
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  080057f4  080057f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006068  08006068  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08006068  08006068  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006068  08006068  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006068  08006068  00016068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800606c  0800606c  0001606c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08006070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  20000034  080060a4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  080060a4  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158a0  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb8  00000000  00000000  000358fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  000384b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  00039740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003031  00000000  00000000  0003a928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169d4  00000000  00000000  0003d959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fd46  00000000  00000000  0005432d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ebc  00000000  00000000  000e40c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	080057dc 	.word	0x080057dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	080057dc 	.word	0x080057dc

0800014c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000010 	.word	0x20000010
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001a4:	f002 fbc7 	bl	8002936 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001b8:	f003 ff4b 	bl	8004052 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001d8:	f003 ff3b 	bl	8004052 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001e2:	f002 fba8 	bl	8002936 <HAL_GPIO_WritePin>
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	200005c8 	.word	0x200005c8

080001f8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
 8000218:	f002 fb8d 	bl	8002936 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
 8000226:	f003 fcc7 	bl	8003bb8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
 8000234:	f003 fcc0 	bl	8003bb8 <HAL_SPI_Transmit>
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
 800023e:	f002 fb7a 	bl	8002936 <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	200005c8 	.word	0x200005c8

08000254 <NRF24_Read_Buf>:
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
  CS_OFF;
}
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	4613      	mov	r3, r2
 8000262:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000264:	2200      	movs	r2, #0
 8000266:	2110      	movs	r1, #16
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <NRF24_Read_Buf+0x4c>)
 800026a:	f002 fb64 	bl	8002936 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800026e:	1df9      	adds	r1, r7, #7
 8000270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000274:	2201      	movs	r2, #1
 8000276:	480b      	ldr	r0, [pc, #44]	; (80002a4 <NRF24_Read_Buf+0x50>)
 8000278:	f003 fc9e 	bl	8003bb8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 800027c:	79bb      	ldrb	r3, [r7, #6]
 800027e:	b29a      	uxth	r2, r3
 8000280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000284:	6839      	ldr	r1, [r7, #0]
 8000286:	4807      	ldr	r0, [pc, #28]	; (80002a4 <NRF24_Read_Buf+0x50>)
 8000288:	f003 fdd2 	bl	8003e30 <HAL_SPI_Receive>
  CS_OFF;
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_Read_Buf+0x4c>)
 8000292:	f002 fb50 	bl	8002936 <HAL_GPIO_WritePin>
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800
 80002a4:	200005c8 	.word	0x200005c8

080002a8 <IRQ_Callback>:
	status = read_config_registers();
	return status;
}
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 80002ae:	2301      	movs	r3, #1
 80002b0:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ba:	4814      	ldr	r0, [pc, #80]	; (800030c <IRQ_Callback+0x64>)
 80002bc:	f002 fb53 	bl	8002966 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80002c0:	200a      	movs	r0, #10
 80002c2:	f7ff ff43 	bl	800014c <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 80002c6:	2007      	movs	r0, #7
 80002c8:	f7ff ff62 	bl	8000190 <NRF24_ReadReg>
 80002cc:	4603      	mov	r3, r0
 80002ce:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d013      	beq.n	8000302 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	085b      	lsrs	r3, r3, #1
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	f003 0307 	and.w	r3, r3, #7
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <IRQ_Callback+0x68>)
 80002e8:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80002ea:	220a      	movs	r2, #10
 80002ec:	4909      	ldr	r1, [pc, #36]	; (8000314 <IRQ_Callback+0x6c>)
 80002ee:	2061      	movs	r0, #97	; 0x61
 80002f0:	f7ff ffb0 	bl	8000254 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 80002f4:	2140      	movs	r1, #64	; 0x40
 80002f6:	2007      	movs	r0, #7
 80002f8:	f7ff ff7e 	bl	80001f8 <NRF24_WriteReg>
		rx_flag = 1;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <IRQ_Callback+0x70>)
 80002fe:	2201      	movs	r2, #1
 8000300:	701a      	strb	r2, [r3, #0]
	}
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40011000 	.word	0x40011000
 8000310:	2000005b 	.word	0x2000005b
 8000314:	20000050 	.word	0x20000050
 8000318:	2000005a 	.word	0x2000005a

0800031c <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8000320:	2000      	movs	r0, #0
 8000322:	f000 f889 	bl	8000438 <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 8000326:	f000 f8a9 	bl	800047c <ssd1306_UpdateScreen>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af04      	add	r7, sp, #16
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800033a:	230a      	movs	r3, #10
 800033c:	9302      	str	r3, [sp, #8]
 800033e:	2301      	movs	r3, #1
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2301      	movs	r3, #1
 8000348:	2200      	movs	r2, #0
 800034a:	2178      	movs	r1, #120	; 0x78
 800034c:	4803      	ldr	r0, [pc, #12]	; (800035c <ssd1306_WriteCommand+0x2c>)
 800034e:	f002 fc7f 	bl	8002c50 <HAL_I2C_Mem_Write>
}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200004e8 	.word	0x200004e8

08000360 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000364:	2064      	movs	r0, #100	; 0x64
 8000366:	f001 ff69 	bl	800223c <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800036a:	20ae      	movs	r0, #174	; 0xae
 800036c:	f7ff ffe0 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000370:	2020      	movs	r0, #32
 8000372:	f7ff ffdd 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000376:	2010      	movs	r0, #16
 8000378:	f7ff ffda 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800037c:	20b0      	movs	r0, #176	; 0xb0
 800037e:	f7ff ffd7 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000382:	20c8      	movs	r0, #200	; 0xc8
 8000384:	f7ff ffd4 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000388:	2000      	movs	r0, #0
 800038a:	f7ff ffd1 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800038e:	2010      	movs	r0, #16
 8000390:	f7ff ffce 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000394:	2040      	movs	r0, #64	; 0x40
 8000396:	f7ff ffcb 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800039a:	2081      	movs	r0, #129	; 0x81
 800039c:	f7ff ffc8 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80003a0:	20ff      	movs	r0, #255	; 0xff
 80003a2:	f7ff ffc5 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80003a6:	20a1      	movs	r0, #161	; 0xa1
 80003a8:	f7ff ffc2 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80003ac:	20a6      	movs	r0, #166	; 0xa6
 80003ae:	f7ff ffbf 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80003b2:	20a8      	movs	r0, #168	; 0xa8
 80003b4:	f7ff ffbc 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80003b8:	203f      	movs	r0, #63	; 0x3f
 80003ba:	f7ff ffb9 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80003be:	20a4      	movs	r0, #164	; 0xa4
 80003c0:	f7ff ffb6 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80003c4:	20d3      	movs	r0, #211	; 0xd3
 80003c6:	f7ff ffb3 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff ffb0 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80003d0:	20d5      	movs	r0, #213	; 0xd5
 80003d2:	f7ff ffad 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80003d6:	20f0      	movs	r0, #240	; 0xf0
 80003d8:	f7ff ffaa 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80003dc:	20d9      	movs	r0, #217	; 0xd9
 80003de:	f7ff ffa7 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80003e2:	2022      	movs	r0, #34	; 0x22
 80003e4:	f7ff ffa4 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80003e8:	20da      	movs	r0, #218	; 0xda
 80003ea:	f7ff ffa1 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80003ee:	2012      	movs	r0, #18
 80003f0:	f7ff ff9e 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80003f4:	20db      	movs	r0, #219	; 0xdb
 80003f6:	f7ff ff9b 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80003fa:	2020      	movs	r0, #32
 80003fc:	f7ff ff98 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000400:	208d      	movs	r0, #141	; 0x8d
 8000402:	f7ff ff95 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000406:	2014      	movs	r0, #20
 8000408:	f7ff ff92 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800040c:	20af      	movs	r0, #175	; 0xaf
 800040e:	f7ff ff8f 	bl	8000330 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000412:	2000      	movs	r0, #0
 8000414:	f000 f810 	bl	8000438 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000418:	f000 f830 	bl	800047c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <ssd1306_Init+0xd4>)
 800041e:	2200      	movs	r2, #0
 8000420:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <ssd1306_Init+0xd4>)
 8000424:	2200      	movs	r2, #0
 8000426:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000428:	4b02      	ldr	r3, [pc, #8]	; (8000434 <ssd1306_Init+0xd4>)
 800042a:	2201      	movs	r2, #1
 800042c:	715a      	strb	r2, [r3, #5]

	return 1;
 800042e:	2301      	movs	r3, #1
}
 8000430:	4618      	mov	r0, r3
 8000432:	bd80      	pop	{r7, pc}
 8000434:	2000045c 	.word	0x2000045c

08000438 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	e00d      	b.n	8000464 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d101      	bne.n	8000452 <ssd1306_Fill+0x1a>
 800044e:	2100      	movs	r1, #0
 8000450:	e000      	b.n	8000454 <ssd1306_Fill+0x1c>
 8000452:	21ff      	movs	r1, #255	; 0xff
 8000454:	4a08      	ldr	r2, [pc, #32]	; (8000478 <ssd1306_Fill+0x40>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	4413      	add	r3, r2
 800045a:	460a      	mov	r2, r1
 800045c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	3301      	adds	r3, #1
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800046a:	d3ed      	bcc.n	8000448 <ssd1306_Fill+0x10>
	}
}
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	2000005c 	.word	0x2000005c

0800047c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000482:	2300      	movs	r3, #0
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	e01d      	b.n	80004c4 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	3b50      	subs	r3, #80	; 0x50
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff4e 	bl	8000330 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000494:	2000      	movs	r0, #0
 8000496:	f7ff ff4b 	bl	8000330 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800049a:	2010      	movs	r0, #16
 800049c:	f7ff ff48 	bl	8000330 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	01db      	lsls	r3, r3, #7
 80004a4:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <ssd1306_UpdateScreen+0x58>)
 80004a6:	4413      	add	r3, r2
 80004a8:	2264      	movs	r2, #100	; 0x64
 80004aa:	9202      	str	r2, [sp, #8]
 80004ac:	2280      	movs	r2, #128	; 0x80
 80004ae:	9201      	str	r2, [sp, #4]
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	2301      	movs	r3, #1
 80004b4:	2240      	movs	r2, #64	; 0x40
 80004b6:	2178      	movs	r1, #120	; 0x78
 80004b8:	4807      	ldr	r0, [pc, #28]	; (80004d8 <ssd1306_UpdateScreen+0x5c>)
 80004ba:	f002 fbc9 	bl	8002c50 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	3301      	adds	r3, #1
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	2b07      	cmp	r3, #7
 80004c8:	d9de      	bls.n	8000488 <ssd1306_UpdateScreen+0xc>
	}
}
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000005c 	.word	0x2000005c
 80004d8:	200004e8 	.word	0x200004e8

080004dc <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	460b      	mov	r3, r1
 80004e8:	71bb      	strb	r3, [r7, #6]
 80004ea:	4613      	mov	r3, r2
 80004ec:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80004ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	db48      	blt.n	8000588 <ssd1306_DrawPixel+0xac>
 80004f6:	79bb      	ldrb	r3, [r7, #6]
 80004f8:	2b3f      	cmp	r3, #63	; 0x3f
 80004fa:	d845      	bhi.n	8000588 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80004fc:	4b25      	ldr	r3, [pc, #148]	; (8000594 <ssd1306_DrawPixel+0xb8>)
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d006      	beq.n	8000512 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000504:	797b      	ldrb	r3, [r7, #5]
 8000506:	2b00      	cmp	r3, #0
 8000508:	bf0c      	ite	eq
 800050a:	2301      	moveq	r3, #1
 800050c:	2300      	movne	r3, #0
 800050e:	b2db      	uxtb	r3, r3
 8000510:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000512:	797b      	ldrb	r3, [r7, #5]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d11a      	bne.n	800054e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000518:	79fa      	ldrb	r2, [r7, #7]
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	08db      	lsrs	r3, r3, #3
 800051e:	b2d8      	uxtb	r0, r3
 8000520:	4603      	mov	r3, r0
 8000522:	01db      	lsls	r3, r3, #7
 8000524:	4413      	add	r3, r2
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 8000528:	5cd3      	ldrb	r3, [r2, r3]
 800052a:	b25a      	sxtb	r2, r3
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	f003 0307 	and.w	r3, r3, #7
 8000532:	2101      	movs	r1, #1
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	b25b      	sxtb	r3, r3
 800053a:	4313      	orrs	r3, r2
 800053c:	b259      	sxtb	r1, r3
 800053e:	79fa      	ldrb	r2, [r7, #7]
 8000540:	4603      	mov	r3, r0
 8000542:	01db      	lsls	r3, r3, #7
 8000544:	4413      	add	r3, r2
 8000546:	b2c9      	uxtb	r1, r1
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 800054a:	54d1      	strb	r1, [r2, r3]
 800054c:	e01d      	b.n	800058a <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	08db      	lsrs	r3, r3, #3
 8000554:	b2d8      	uxtb	r0, r3
 8000556:	4603      	mov	r3, r0
 8000558:	01db      	lsls	r3, r3, #7
 800055a:	4413      	add	r3, r2
 800055c:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 800055e:	5cd3      	ldrb	r3, [r2, r3]
 8000560:	b25a      	sxtb	r2, r3
 8000562:	79bb      	ldrb	r3, [r7, #6]
 8000564:	f003 0307 	and.w	r3, r3, #7
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	b25b      	sxtb	r3, r3
 8000570:	43db      	mvns	r3, r3
 8000572:	b25b      	sxtb	r3, r3
 8000574:	4013      	ands	r3, r2
 8000576:	b259      	sxtb	r1, r3
 8000578:	79fa      	ldrb	r2, [r7, #7]
 800057a:	4603      	mov	r3, r0
 800057c:	01db      	lsls	r3, r3, #7
 800057e:	4413      	add	r3, r2
 8000580:	b2c9      	uxtb	r1, r1
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 8000584:	54d1      	strb	r1, [r2, r3]
 8000586:	e000      	b.n	800058a <ssd1306_DrawPixel+0xae>
		return;
 8000588:	bf00      	nop
	}
}
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000045c 	.word	0x2000045c
 8000598:	2000005c 	.word	0x2000005c

0800059c <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b089      	sub	sp, #36	; 0x24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4604      	mov	r4, r0
 80005a4:	1d38      	adds	r0, r7, #4
 80005a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80005aa:	461a      	mov	r2, r3
 80005ac:	4623      	mov	r3, r4
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	4613      	mov	r3, r2
 80005b2:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80005b4:	4b38      	ldr	r3, [pc, #224]	; (8000698 <ssd1306_WriteChar+0xfc>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	793b      	ldrb	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	2b7f      	cmp	r3, #127	; 0x7f
 80005c0:	dc06      	bgt.n	80005d0 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80005c2:	4b35      	ldr	r3, [pc, #212]	; (8000698 <ssd1306_WriteChar+0xfc>)
 80005c4:	885b      	ldrh	r3, [r3, #2]
 80005c6:	461a      	mov	r2, r3
 80005c8:	797b      	ldrb	r3, [r7, #5]
 80005ca:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80005cc:	2b3f      	cmp	r3, #63	; 0x3f
 80005ce:	dd01      	ble.n	80005d4 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	e05d      	b.n	8000690 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
 80005d8:	e04c      	b.n	8000674 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	3b20      	subs	r3, #32
 80005e0:	7979      	ldrb	r1, [r7, #5]
 80005e2:	fb01 f303 	mul.w	r3, r1, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	440b      	add	r3, r1
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
 80005f8:	e034      	b.n	8000664 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000606:	2b00      	cmp	r3, #0
 8000608:	d012      	beq.n	8000630 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <ssd1306_WriteChar+0xfc>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4413      	add	r3, r2
 8000616:	b2d8      	uxtb	r0, r3
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <ssd1306_WriteChar+0xfc>)
 800061a:	885b      	ldrh	r3, [r3, #2]
 800061c:	b2da      	uxtb	r2, r3
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4413      	add	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	7bba      	ldrb	r2, [r7, #14]
 8000628:	4619      	mov	r1, r3
 800062a:	f7ff ff57 	bl	80004dc <ssd1306_DrawPixel>
 800062e:	e016      	b.n	800065e <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <ssd1306_WriteChar+0xfc>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4413      	add	r3, r2
 800063c:	b2d8      	uxtb	r0, r3
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <ssd1306_WriteChar+0xfc>)
 8000640:	885b      	ldrh	r3, [r3, #2]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4413      	add	r3, r2
 800064a:	b2d9      	uxtb	r1, r3
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	2b00      	cmp	r3, #0
 8000650:	bf0c      	ite	eq
 8000652:	2301      	moveq	r3, #1
 8000654:	2300      	movne	r3, #0
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	f7ff ff3f 	bl	80004dc <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	3301      	adds	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	793b      	ldrb	r3, [r7, #4]
 8000666:	461a      	mov	r2, r3
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4293      	cmp	r3, r2
 800066c:	d3c5      	bcc.n	80005fa <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	3301      	adds	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	797b      	ldrb	r3, [r7, #5]
 8000676:	461a      	mov	r2, r3
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	4293      	cmp	r3, r2
 800067c:	d3ad      	bcc.n	80005da <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <ssd1306_WriteChar+0xfc>)
 8000680:	881a      	ldrh	r2, [r3, #0]
 8000682:	793b      	ldrb	r3, [r7, #4]
 8000684:	b29b      	uxth	r3, r3
 8000686:	4413      	add	r3, r2
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b03      	ldr	r3, [pc, #12]	; (8000698 <ssd1306_WriteChar+0xfc>)
 800068c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3724      	adds	r7, #36	; 0x24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd90      	pop	{r4, r7, pc}
 8000698:	2000045c 	.word	0x2000045c

0800069c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	1d38      	adds	r0, r7, #4
 80006a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80006aa:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80006ac:	e012      	b.n	80006d4 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	7818      	ldrb	r0, [r3, #0]
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	1d3a      	adds	r2, r7, #4
 80006b6:	ca06      	ldmia	r2, {r1, r2}
 80006b8:	f7ff ff70 	bl	800059c <ssd1306_WriteChar>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d002      	beq.n	80006ce <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	e008      	b.n	80006e0 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
	while (*str)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1e8      	bne.n	80006ae <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	781b      	ldrb	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <ssd1306_SetCursor+0x2c>)
 80006fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <ssd1306_SetCursor+0x2c>)
 8000706:	805a      	strh	r2, [r3, #2]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	2000045c 	.word	0x2000045c

08000718 <ssd1306_Line>:

void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	4604      	mov	r4, r0
 8000720:	4608      	mov	r0, r1
 8000722:	4611      	mov	r1, r2
 8000724:	461a      	mov	r2, r3
 8000726:	4623      	mov	r3, r4
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	4603      	mov	r3, r0
 800072c:	71bb      	strb	r3, [r7, #6]
 800072e:	460b      	mov	r3, r1
 8000730:	717b      	strb	r3, [r7, #5]
 8000732:	4613      	mov	r3, r2
 8000734:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8000736:	797a      	ldrb	r2, [r7, #5]
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	bfb8      	it	lt
 8000740:	425b      	neglt	r3, r3
 8000742:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8000744:	793a      	ldrb	r2, [r7, #4]
 8000746:	79bb      	ldrb	r3, [r7, #6]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	bfb8      	it	lt
 800074e:	425b      	neglt	r3, r3
 8000750:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	797b      	ldrb	r3, [r7, #5]
 8000756:	429a      	cmp	r2, r3
 8000758:	d201      	bcs.n	800075e <ssd1306_Line+0x46>
 800075a:	2301      	movs	r3, #1
 800075c:	e001      	b.n	8000762 <ssd1306_Line+0x4a>
 800075e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000762:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	793b      	ldrb	r3, [r7, #4]
 8000768:	429a      	cmp	r2, r3
 800076a:	d201      	bcs.n	8000770 <ssd1306_Line+0x58>
 800076c:	2301      	movs	r3, #1
 800076e:	e001      	b.n	8000774 <ssd1306_Line+0x5c>
 8000770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000774:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 800077e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000782:	7939      	ldrb	r1, [r7, #4]
 8000784:	797b      	ldrb	r3, [r7, #5]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fea8 	bl	80004dc <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 800078c:	e024      	b.n	80007d8 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 800078e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000792:	79b9      	ldrb	r1, [r7, #6]
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fea0 	bl	80004dc <ssd1306_DrawPixel>
    error2 = error * 2;
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	425b      	negs	r3, r3
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dd08      	ble.n	80007be <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80007ac:	69fa      	ldr	r2, [r7, #28]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4413      	add	r3, r2
 80007bc:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	da08      	bge.n	80007d8 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80007c6:	69fa      	ldr	r2, [r7, #28]
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	4413      	add	r3, r2
 80007cc:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	4413      	add	r3, r2
 80007d6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	797b      	ldrb	r3, [r7, #5]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d1d6      	bne.n	800078e <ssd1306_Line+0x76>
 80007e0:	79ba      	ldrb	r2, [r7, #6]
 80007e2:	793b      	ldrb	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d1d2      	bne.n	800078e <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80007e8:	bf00      	nop
}
 80007ea:	3724      	adds	r7, #36	; 0x24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	4604      	mov	r4, r0
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	461a      	mov	r2, r3
 80007fe:	4623      	mov	r3, r4
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	4603      	mov	r3, r0
 8000804:	71bb      	strb	r3, [r7, #6]
 8000806:	460b      	mov	r3, r1
 8000808:	717b      	strb	r3, [r7, #5]
 800080a:	4613      	mov	r3, r2
 800080c:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 800080e:	79bc      	ldrb	r4, [r7, #6]
 8000810:	797a      	ldrb	r2, [r7, #5]
 8000812:	79b9      	ldrb	r1, [r7, #6]
 8000814:	79f8      	ldrb	r0, [r7, #7]
 8000816:	7e3b      	ldrb	r3, [r7, #24]
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	4623      	mov	r3, r4
 800081c:	f7ff ff7c 	bl	8000718 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8000820:	793c      	ldrb	r4, [r7, #4]
 8000822:	797a      	ldrb	r2, [r7, #5]
 8000824:	79b9      	ldrb	r1, [r7, #6]
 8000826:	7978      	ldrb	r0, [r7, #5]
 8000828:	7e3b      	ldrb	r3, [r7, #24]
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	4623      	mov	r3, r4
 800082e:	f7ff ff73 	bl	8000718 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8000832:	793c      	ldrb	r4, [r7, #4]
 8000834:	79fa      	ldrb	r2, [r7, #7]
 8000836:	7939      	ldrb	r1, [r7, #4]
 8000838:	7978      	ldrb	r0, [r7, #5]
 800083a:	7e3b      	ldrb	r3, [r7, #24]
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	4623      	mov	r3, r4
 8000840:	f7ff ff6a 	bl	8000718 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8000844:	79bc      	ldrb	r4, [r7, #6]
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	7939      	ldrb	r1, [r7, #4]
 800084a:	79f8      	ldrb	r0, [r7, #7]
 800084c:	7e3b      	ldrb	r3, [r7, #24]
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	4623      	mov	r3, r4
 8000852:	f7ff ff61 	bl	8000718 <ssd1306_Line>

  return;
 8000856:	bf00      	nop
}
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bd90      	pop	{r4, r7, pc}

0800085e <ssd1306FillRect>:
void ssd1306FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
 800085e:	b590      	push	{r4, r7, lr}
 8000860:	b085      	sub	sp, #20
 8000862:	af00      	add	r7, sp, #0
 8000864:	4604      	mov	r4, r0
 8000866:	4608      	mov	r0, r1
 8000868:	4611      	mov	r1, r2
 800086a:	461a      	mov	r2, r3
 800086c:	4623      	mov	r3, r4
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4603      	mov	r3, r0
 8000872:	71bb      	strb	r3, [r7, #6]
 8000874:	460b      	mov	r3, r1
 8000876:	717b      	strb	r3, [r7, #5]
 8000878:	4613      	mov	r3, r2
 800087a:	713b      	strb	r3, [r7, #4]
    uint8_t x0, x1, y1;

    x0 = x;
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	73fb      	strb	r3, [r7, #15]
    x1 = x + w;
 8000880:	79fa      	ldrb	r2, [r7, #7]
 8000882:	797b      	ldrb	r3, [r7, #5]
 8000884:	4413      	add	r3, r2
 8000886:	73bb      	strb	r3, [r7, #14]
    y1 = y + h;
 8000888:	79ba      	ldrb	r2, [r7, #6]
 800088a:	793b      	ldrb	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	737b      	strb	r3, [r7, #13]
    for(; y < y1; y++)
 8000890:	e013      	b.n	80008ba <ssd1306FillRect+0x5c>
        for(x = x0; x < x1; x++)
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	e009      	b.n	80008ac <ssd1306FillRect+0x4e>
        	ssd1306_DrawPixel(x, y, color);
 8000898:	8c3b      	ldrh	r3, [r7, #32]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	79b9      	ldrb	r1, [r7, #6]
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe1b 	bl	80004dc <ssd1306_DrawPixel>
        for(x = x0; x < x1; x++)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	3301      	adds	r3, #1
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	79fa      	ldrb	r2, [r7, #7]
 80008ae:	7bbb      	ldrb	r3, [r7, #14]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3f1      	bcc.n	8000898 <ssd1306FillRect+0x3a>
    for(; y < y1; y++)
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	3301      	adds	r3, #1
 80008b8:	71bb      	strb	r3, [r7, #6]
 80008ba:	79ba      	ldrb	r2, [r7, #6]
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d3e7      	bcc.n	8000892 <ssd1306FillRect+0x34>
            //ssd1306DrawPixel( x, y, color, layer);
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd90      	pop	{r4, r7, pc}

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d0:	f001 fc52 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d4:	f000 f826 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d8:	f000 f972 	bl	8000bc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008dc:	f000 f868 	bl	80009b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80008e0:	f000 f894 	bl	8000a0c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80008e4:	f000 f918 	bl	8000b18 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80008e8:	f000 f8c6 	bl	8000a78 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80008ec:	f000 f93e 	bl	8000b6c <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <main+0x54>)
 80008f8:	f002 f81d 	bl	8002936 <HAL_GPIO_WritePin>

  // Init interrupp
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	2025      	movs	r0, #37	; 0x25
 8000902:	f001 fd96 	bl	8002432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000906:	2025      	movs	r0, #37	; 0x25
 8000908:	f001 fdaf 	bl	800246a <HAL_NVIC_EnableIRQ>


  // OLED init
  ssd1306_Init();
 800090c:	f7ff fd28 	bl	8000360 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fd91 	bl	8000438 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000916:	f7ff fdb1 	bl	800047c <ssd1306_UpdateScreen>
		HAL_UART_Receive_IT(&huart1, str, 1);		// Start interrupt again
	  }
	#endif


	 menu();
 800091a:	f001 fbdb 	bl	80020d4 <menu>
 800091e:	e7fc      	b.n	800091a <main+0x4e>
 8000920:	40011000 	.word	0x40011000

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b090      	sub	sp, #64	; 0x40
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0318 	add.w	r3, r7, #24
 800092e:	2228      	movs	r2, #40	; 0x28
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f004 fef4 	bl	8005720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000946:	2301      	movs	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800094a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800094e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000958:	2302      	movs	r3, #2
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000962:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0318 	add.w	r3, r7, #24
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fc85 	bl	800327c <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000978:	f000 fa40 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2302      	movs	r3, #2
 8000982:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2102      	movs	r1, #2
 8000996:	4618      	mov	r0, r3
 8000998:	f002 fef0 	bl	800377c <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009a2:	f000 fa2b 	bl	8000dfc <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3740      	adds	r7, #64	; 0x40
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_I2C1_Init+0x50>)
 80009b6:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <MX_I2C1_Init+0x54>)
 80009b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_I2C1_Init+0x50>)
 80009bc:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MX_I2C1_Init+0x58>)
 80009be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_I2C1_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_I2C1_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_I2C1_Init+0x50>)
 80009ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <MX_I2C1_Init+0x50>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_I2C1_Init+0x50>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MX_I2C1_Init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_I2C1_Init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_I2C1_Init+0x50>)
 80009ee:	f001 ffeb 	bl	80029c8 <HAL_I2C_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f8:	f000 fa00 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200004e8 	.word	0x200004e8
 8000a04:	40005400 	.word	0x40005400
 8000a08:	00061a80 	.word	0x00061a80

08000a0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <MX_SPI1_Init+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a40:	2220      	movs	r2, #32
 8000a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a58:	220a      	movs	r2, #10
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a5e:	f003 f827 	bl	8003ab0 <HAL_SPI_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a68:	f000 f9c8 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200005c8 	.word	0x200005c8
 8000a74:	40013000 	.word	0x40013000

08000a78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000a96:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <MX_TIM1_Init+0x9c>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000a9c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000aa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000aaa:	2264      	movs	r2, #100	; 0x64
 8000aac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac0:	4813      	ldr	r0, [pc, #76]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000ac2:	f003 fd61 	bl	8004588 <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000acc:	f000 f996 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	4619      	mov	r1, r3
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000ade:	f003 ff2b 	bl	8004938 <HAL_TIM_ConfigClockSource>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ae8:	f000 f988 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000aec:	2310      	movs	r3, #16
 8000aee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000afa:	f004 f907 	bl	8004d0c <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b04:	f000 f97a 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000580 	.word	0x20000580
 8000b14:	40012c00 	.word	0x40012c00

08000b18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MX_USART1_UART_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b50:	f004 f94c 	bl	8004dec <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b5a:	f000 f94f 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000053c 	.word	0x2000053c
 8000b68:	40013800 	.word	0x40013800

08000b6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_USART3_UART_Init+0x50>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000ba4:	f004 f922 	bl	8004dec <HAL_UART_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bae:	f000 f925 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200004a4 	.word	0x200004a4
 8000bbc:	40004800 	.word	0x40004800

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	4b5f      	ldr	r3, [pc, #380]	; (8000d54 <MX_GPIO_Init+0x194>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a5e      	ldr	r2, [pc, #376]	; (8000d54 <MX_GPIO_Init+0x194>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b5c      	ldr	r3, [pc, #368]	; (8000d54 <MX_GPIO_Init+0x194>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0310 	and.w	r3, r3, #16
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bec:	4b59      	ldr	r3, [pc, #356]	; (8000d54 <MX_GPIO_Init+0x194>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a58      	ldr	r2, [pc, #352]	; (8000d54 <MX_GPIO_Init+0x194>)
 8000bf2:	f043 0320 	orr.w	r3, r3, #32
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b56      	ldr	r3, [pc, #344]	; (8000d54 <MX_GPIO_Init+0x194>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0320 	and.w	r3, r3, #32
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b53      	ldr	r3, [pc, #332]	; (8000d54 <MX_GPIO_Init+0x194>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a52      	ldr	r2, [pc, #328]	; (8000d54 <MX_GPIO_Init+0x194>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b50      	ldr	r3, [pc, #320]	; (8000d54 <MX_GPIO_Init+0x194>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b4d      	ldr	r3, [pc, #308]	; (8000d54 <MX_GPIO_Init+0x194>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a4c      	ldr	r2, [pc, #304]	; (8000d54 <MX_GPIO_Init+0x194>)
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <MX_GPIO_Init+0x194>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	4847      	ldr	r0, [pc, #284]	; (8000d58 <MX_GPIO_Init+0x198>)
 8000c3c:	f001 fe7b 	bl	8002936 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2108      	movs	r1, #8
 8000c44:	4845      	ldr	r0, [pc, #276]	; (8000d5c <MX_GPIO_Init+0x19c>)
 8000c46:	f001 fe76 	bl	8002936 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2110      	movs	r1, #16
 8000c4e:	4843      	ldr	r0, [pc, #268]	; (8000d5c <MX_GPIO_Init+0x19c>)
 8000c50:	f001 fe71 	bl	8002936 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f242 0101 	movw	r1, #8193	; 0x2001
 8000c5a:	4841      	ldr	r0, [pc, #260]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c5c:	f001 fe6b 	bl	8002936 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4619      	mov	r1, r3
 8000c78:	4837      	ldr	r0, [pc, #220]	; (8000d58 <MX_GPIO_Init+0x198>)
 8000c7a:	f001 fcc1 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c82:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <MX_GPIO_Init+0x1a4>)
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4832      	ldr	r0, [pc, #200]	; (8000d5c <MX_GPIO_Init+0x19c>)
 8000c92:	f001 fcb5 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c96:	2318      	movs	r3, #24
 8000c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	4619      	mov	r1, r3
 8000cac:	482b      	ldr	r0, [pc, #172]	; (8000d5c <MX_GPIO_Init+0x19c>)
 8000cae:	f001 fca7 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8000cb2:	f242 0301 	movw	r3, #8193	; 0x2001
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4825      	ldr	r0, [pc, #148]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000ccc:	f001 fc98 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	481f      	ldr	r0, [pc, #124]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000ce4:	f001 fc8c 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ce8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_GPIO_Init+0x1a4>)
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4818      	ldr	r0, [pc, #96]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000cfe:	f001 fc7f 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_GPIO_Init+0x1a4>)
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	4811      	ldr	r0, [pc, #68]	; (8000d5c <MX_GPIO_Init+0x19c>)
 8000d18:	f001 fc72 	bl	8002600 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2008      	movs	r0, #8
 8000d22:	f001 fb86 	bl	8002432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d26:	2008      	movs	r0, #8
 8000d28:	f001 fb9f 	bl	800246a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2017      	movs	r0, #23
 8000d32:	f001 fb7e 	bl	8002432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d36:	2017      	movs	r0, #23
 8000d38:	f001 fb97 	bl	800246a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2028      	movs	r0, #40	; 0x28
 8000d42:	f001 fb76 	bl	8002432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d46:	2028      	movs	r0, #40	; 0x28
 8000d48:	f001 fb8f 	bl	800246a <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40011000 	.word	0x40011000
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	40010c00 	.word	0x40010c00
 8000d64:	10210000 	.word	0x10210000

08000d68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d102      	bne.n	8000d7e <HAL_GPIO_EXTI_Callback+0x16>
  {
    IRQ_Callback();					// Call Callback
 8000d78:	f7ff fa96 	bl	80002a8 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8000d7c:	e000      	b.n	8000d80 <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8000d7e:	bf00      	nop
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_UART_RxCpltCallback>:

//----------------------------------------------------------------------------------------
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <HAL_UART_RxCpltCallback+0x60>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d123      	bne.n	8000de0 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_UART_RxCpltCallback+0x64>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <HAL_UART_RxCpltCallback+0x20>
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_UART_RxCpltCallback+0x68>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b31      	cmp	r3, #49	; 0x31
 8000da6:	d906      	bls.n	8000db6 <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_UART_RxCpltCallback+0x6c>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_UART_RxCpltCallback+0x68>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8000db4:	e014      	b.n	8000de0 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_UART_RxCpltCallback+0x6c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_UART_RxCpltCallback+0x68>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_UART_RxCpltCallback+0x64>)
 8000dc4:	7819      	ldrb	r1, [r3, #0]
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_UART_RxCpltCallback+0x70>)
 8000dc8:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <HAL_UART_RxCpltCallback+0x64>)
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <HAL_UART_RxCpltCallback+0x60>)
 8000dd0:	f004 f859 	bl	8004e86 <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_UART_RxCpltCallback+0x68>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <HAL_UART_RxCpltCallback+0x68>)
 8000dde:	701a      	strb	r2, [r3, #0]
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000053c 	.word	0x2000053c
 8000dec:	20000498 	.word	0x20000498
 8000df0:	2000049a 	.word	0x2000049a
 8000df4:	20000499 	.word	0x20000499
 8000df8:	20000464 	.word	0x20000464

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_MspInit+0x60>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_MspInit+0x60>)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000

08000e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a15      	ldr	r2, [pc, #84]	; (8000edc <HAL_I2C_MspInit+0x70>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d123      	bne.n	8000ed4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_I2C_MspInit+0x74>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <HAL_I2C_MspInit+0x74>)
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_I2C_MspInit+0x74>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea4:	23c0      	movs	r3, #192	; 0xc0
 8000ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea8:	2312      	movs	r3, #18
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <HAL_I2C_MspInit+0x78>)
 8000eb8:	f001 fba2 	bl	8002600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_I2C_MspInit+0x74>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_I2C_MspInit+0x74>)
 8000ec2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec6:	61d3      	str	r3, [r2, #28]
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_I2C_MspInit+0x74>)
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010c00 	.word	0x40010c00

08000ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1b      	ldr	r2, [pc, #108]	; (8000f70 <HAL_SPI_MspInit+0x88>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d12f      	bne.n	8000f68 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f38:	23a0      	movs	r3, #160	; 0xa0
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480b      	ldr	r0, [pc, #44]	; (8000f78 <HAL_SPI_MspInit+0x90>)
 8000f4c:	f001 fb58 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f50:	2340      	movs	r3, #64	; 0x40
 8000f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4619      	mov	r1, r3
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_SPI_MspInit+0x90>)
 8000f64:	f001 fb4c 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3720      	adds	r7, #32
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010800 	.word	0x40010800

08000f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <HAL_TIM_Base_MspInit+0x44>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d113      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_TIM_Base_MspInit+0x48>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <HAL_TIM_Base_MspInit+0x48>)
 8000f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_TIM_Base_MspInit+0x48>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2019      	movs	r0, #25
 8000fac:	f001 fa41 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fb0:	2019      	movs	r0, #25
 8000fb2:	f001 fa5a 	bl	800246a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012c00 	.word	0x40012c00
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a3c      	ldr	r2, [pc, #240]	; (80010d4 <HAL_UART_MspInit+0x10c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d13a      	bne.n	800105e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe8:	4b3b      	ldr	r3, [pc, #236]	; (80010d8 <HAL_UART_MspInit+0x110>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a3a      	ldr	r2, [pc, #232]	; (80010d8 <HAL_UART_MspInit+0x110>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <HAL_UART_MspInit+0x110>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <HAL_UART_MspInit+0x110>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a34      	ldr	r2, [pc, #208]	; (80010d8 <HAL_UART_MspInit+0x110>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <HAL_UART_MspInit+0x110>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	4619      	mov	r1, r3
 800102c:	482b      	ldr	r0, [pc, #172]	; (80010dc <HAL_UART_MspInit+0x114>)
 800102e:	f001 fae7 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	4619      	mov	r1, r3
 8001046:	4825      	ldr	r0, [pc, #148]	; (80010dc <HAL_UART_MspInit+0x114>)
 8001048:	f001 fada 	bl	8002600 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2101      	movs	r1, #1
 8001050:	2025      	movs	r0, #37	; 0x25
 8001052:	f001 f9ee 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001056:	2025      	movs	r0, #37	; 0x25
 8001058:	f001 fa07 	bl	800246a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800105c:	e036      	b.n	80010cc <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <HAL_UART_MspInit+0x118>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d131      	bne.n	80010cc <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_UART_MspInit+0x110>)
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <HAL_UART_MspInit+0x110>)
 800106e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001072:	61d3      	str	r3, [r2, #28]
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_UART_MspInit+0x110>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_UART_MspInit+0x110>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_UART_MspInit+0x110>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_UART_MspInit+0x110>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	4619      	mov	r1, r3
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 80010ae:	f001 faa7 	bl	8002600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0318 	add.w	r3, r7, #24
 80010c4:	4619      	mov	r1, r3
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 80010c8:	f001 fa9a 	bl	8002600 <HAL_GPIO_Init>
}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40013800 	.word	0x40013800
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010800 	.word	0x40010800
 80010e0:	40004800 	.word	0x40004800
 80010e4:	40010c00 	.word	0x40010c00

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112e:	f001 f869 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}

08001136 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800113a:	2004      	movs	r0, #4
 800113c:	f001 fc2c 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <EXTI9_5_IRQHandler+0x44>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	f083 0301 	eor.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d012      	beq.n	800117c <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <EXTI9_5_IRQHandler+0x48>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00c      	beq.n	800117c <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <EXTI9_5_IRQHandler+0x4c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <EXTI9_5_IRQHandler+0x50>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d105      	bne.n	800117c <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <EXTI9_5_IRQHandler+0x54>)
 8001172:	f003 fa59 	bl	8004628 <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <EXTI9_5_IRQHandler+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800117c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001180:	f001 fc0a 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200004a0 	.word	0x200004a0
 800118c:	40010400 	.word	0x40010400
 8001190:	20000008 	.word	0x20000008
 8001194:	2000000c 	.word	0x2000000c
 8001198:	20000580 	.word	0x20000580

0800119c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 80011a0:	4b37      	ldr	r3, [pc, #220]	; (8001280 <TIM1_UP_IRQHandler+0xe4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d165      	bne.n	8001274 <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 80011a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ac:	4835      	ldr	r0, [pc, #212]	; (8001284 <TIM1_UP_IRQHandler+0xe8>)
 80011ae:	f001 fbab 	bl	8002908 <HAL_GPIO_ReadPin>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d118      	bne.n	80011ea <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 80011b8:	4b33      	ldr	r3, [pc, #204]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a32      	ldr	r2, [pc, #200]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 80011c0:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80011c2:	4b32      	ldr	r3, [pc, #200]	; (800128c <TIM1_UP_IRQHandler+0xf0>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dc51      	bgt.n	8001274 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <TIM1_UP_IRQHandler+0xe4>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80011d6:	482e      	ldr	r0, [pc, #184]	; (8001290 <TIM1_UP_IRQHandler+0xf4>)
 80011d8:	f003 fa78 	bl	80046cc <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <TIM1_UP_IRQHandler+0xf8>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	e044      	b.n	8001274 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 80011ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ee:	482a      	ldr	r0, [pc, #168]	; (8001298 <TIM1_UP_IRQHandler+0xfc>)
 80011f0:	f001 fb8a 	bl	8002908 <HAL_GPIO_ReadPin>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d118      	bne.n	800122c <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 8001202:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001204:	4b21      	ldr	r3, [pc, #132]	; (800128c <TIM1_UP_IRQHandler+0xf0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	dc30      	bgt.n	8001274 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <TIM1_UP_IRQHandler+0xe4>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8001218:	481d      	ldr	r0, [pc, #116]	; (8001290 <TIM1_UP_IRQHandler+0xf4>)
 800121a:	f003 fa57 	bl	80046cc <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <TIM1_UP_IRQHandler+0xf8>)
 8001220:	2203      	movs	r2, #3
 8001222:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e023      	b.n	8001274 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 800122c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001230:	4814      	ldr	r0, [pc, #80]	; (8001284 <TIM1_UP_IRQHandler+0xe8>)
 8001232:	f001 fb69 	bl	8002908 <HAL_GPIO_ReadPin>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d118      	bne.n	800126e <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	4a11      	ldr	r2, [pc, #68]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 8001244:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <TIM1_UP_IRQHandler+0xf0>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	dc0f      	bgt.n	8001274 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <TIM1_UP_IRQHandler+0xe4>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <TIM1_UP_IRQHandler+0xf8>)
 800125c:	2202      	movs	r2, #2
 800125e:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8001266:	480a      	ldr	r0, [pc, #40]	; (8001290 <TIM1_UP_IRQHandler+0xf4>)
 8001268:	f003 fa30 	bl	80046cc <HAL_TIM_Base_Stop_IT>
 800126c:	e002      	b.n	8001274 <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <TIM1_UP_IRQHandler+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <TIM1_UP_IRQHandler+0xf4>)
 8001276:	f003 fa57 	bl	8004728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000000c 	.word	0x2000000c
 8001284:	40010c00 	.word	0x40010c00
 8001288:	2000049c 	.word	0x2000049c
 800128c:	20000009 	.word	0x20000009
 8001290:	20000580 	.word	0x20000580
 8001294:	200004a1 	.word	0x200004a1
 8001298:	40010800 	.word	0x40010800

0800129c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <USART1_IRQHandler+0x10>)
 80012a2:	f003 fe21 	bl	8004ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000053c 	.word	0x2000053c

080012b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <EXTI15_10_IRQHandler+0x74>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	f083 0301 	eor.w	r3, r3, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d012      	beq.n	80012e8 <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <EXTI15_10_IRQHandler+0x78>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00c      	beq.n	80012e8 <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <EXTI15_10_IRQHandler+0x7c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <EXTI15_10_IRQHandler+0x80>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d105      	bne.n	80012e8 <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 80012dc:	4815      	ldr	r0, [pc, #84]	; (8001334 <EXTI15_10_IRQHandler+0x84>)
 80012de:	f003 f9a3 	bl	8004628 <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <EXTI15_10_IRQHandler+0x80>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <EXTI15_10_IRQHandler+0x78>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00c      	beq.n	800130e <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <EXTI15_10_IRQHandler+0x7c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <EXTI15_10_IRQHandler+0x80>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d105      	bne.n	800130e <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001302:	480c      	ldr	r0, [pc, #48]	; (8001334 <EXTI15_10_IRQHandler+0x84>)
 8001304:	f003 f990 	bl	8004628 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <EXTI15_10_IRQHandler+0x80>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800130e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001312:	f001 fb41 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001316:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800131a:	f001 fb3d 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200004a0 	.word	0x200004a0
 8001328:	40010400 	.word	0x40010400
 800132c:	20000008 	.word	0x20000008
 8001330:	2000000c 	.word	0x2000000c
 8001334:	20000580 	.word	0x20000580

08001338 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <scroll_bar>:
/*
This function print scrollbar on right part of OLED.

 */
void scroll_bar(void)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af02      	add	r7, sp, #8
	// Work size scrollbar
	uint16_t start_x_scrollbar = 124;
 800134a:	237c      	movs	r3, #124	; 0x7c
 800134c:	81fb      	strh	r3, [r7, #14]
	uint16_t start_y_scrollbar = 17;
 800134e:	2311      	movs	r3, #17
 8001350:	81bb      	strh	r3, [r7, #12]
	uint16_t active_width = 3;
 8001352:	2303      	movs	r3, #3
 8001354:	817b      	strh	r3, [r7, #10]
	uint16_t lenght_all_scrollbar = 48;
 8001356:	2330      	movs	r3, #48	; 0x30
 8001358:	813b      	strh	r3, [r7, #8]

	uint8_t menu_items_counter = 1;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
	// 1. Скопіювати показник на меню в буффер
	// 2. Піднятися до останнього елемента меню
	// 3. Інкрементувати лічильник елементів меню, до останього елемента меню
	// 4. записати нараховані емементи в

	MenuItem_t * currentItem_buff = currentItem;
 800135e:	4b32      	ldr	r3, [pc, #200]	; (8001428 <scroll_bar+0xe4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	613b      	str	r3, [r7, #16]

	if ((currentItem_buff -> up) != 0)							// Step up if existing up
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <scroll_bar+0x36>
	{
		do{
			currentItem_buff = currentItem_buff -> up;			// Step up to the top of menu
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	613b      	str	r3, [r7, #16]
		}
		while ((currentItem_buff -> up) != 0);					// If the top of item doesen't found
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f8      	bne.n	800136c <scroll_bar+0x28>
	}

	if ((currentItem_buff -> up) == 0)							// If found top of menu item
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d109      	bne.n	8001396 <scroll_bar+0x52>
	{
		do{
			currentItem_buff = currentItem_buff -> down;
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	613b      	str	r3, [r7, #16]
			menu_items_counter++;								// Count how many list on menu
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	3301      	adds	r3, #1
 800138c:	75fb      	strb	r3, [r7, #23]
		}
		while ((currentItem_buff -> down) != 0);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f5      	bne.n	8001382 <scroll_bar+0x3e>
	}
	 // Очистити частину керану де є скролбар
	ssd1306FillRect(start_x_scrollbar, start_y_scrollbar, active_width, lenght_all_scrollbar - 2, Black);
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	b2d8      	uxtb	r0, r3
 800139a:	89bb      	ldrh	r3, [r7, #12]
 800139c:	b2d9      	uxtb	r1, r3
 800139e:	897b      	ldrh	r3, [r7, #10]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	893b      	ldrh	r3, [r7, #8]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	3b02      	subs	r3, #2
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2400      	movs	r4, #0
 80013ac:	9400      	str	r4, [sp, #0]
 80013ae:	f7ff fa56 	bl	800085e <ssd1306FillRect>

	// Вивести подовгастий квадрат на край екрану
	ssd1306_DrawRectangle(start_x_scrollbar - 1, start_y_scrollbar - 1, start_x_scrollbar + active_width, 63, White);
 80013b2:	89fb      	ldrh	r3, [r7, #14]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	3b01      	subs	r3, #1
 80013b8:	b2d8      	uxtb	r0, r3
 80013ba:	89bb      	ldrh	r3, [r7, #12]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	3b01      	subs	r3, #1
 80013c0:	b2d9      	uxtb	r1, r3
 80013c2:	89fb      	ldrh	r3, [r7, #14]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	897b      	ldrh	r3, [r7, #10]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	2301      	movs	r3, #1
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	233f      	movs	r3, #63	; 0x3f
 80013d4:	f7ff fa0c 	bl	80007f0 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 80013d8:	f7ff f850 	bl	800047c <ssd1306_UpdateScreen>

	 // Print scroling line
	int id_for_line = currentItem -> id;				// Скопіювати порядковий номер меню
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <scroll_bar+0xe4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	7c1b      	ldrb	r3, [r3, #16]
 80013e2:	607b      	str	r3, [r7, #4]
	// Print scroling line
	uint16_t line_lenght = (lenght_all_scrollbar/menu_items_counter + 1);					   	// Довжина лінії яка відповідає одному меню
 80013e4:	893a      	ldrh	r2, [r7, #8]
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
 80013e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	3301      	adds	r3, #1
 80013f0:	807b      	strh	r3, [r7, #2]
	uint16_t start_lenght = 16 + ((id_for_line - 1)*line_lenght);			// Початок лінії
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	887a      	ldrh	r2, [r7, #2]
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	b29b      	uxth	r3, r3
 8001400:	3310      	adds	r3, #16
 8001402:	803b      	strh	r3, [r7, #0]
	// Print active scrollbar part (line)
	ssd1306FillRect(start_x_scrollbar, start_lenght, active_width, line_lenght, White);
 8001404:	89fb      	ldrh	r3, [r7, #14]
 8001406:	b2d8      	uxtb	r0, r3
 8001408:	883b      	ldrh	r3, [r7, #0]
 800140a:	b2d9      	uxtb	r1, r3
 800140c:	897b      	ldrh	r3, [r7, #10]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2401      	movs	r4, #1
 8001416:	9400      	str	r4, [sp, #0]
 8001418:	f7ff fa21 	bl	800085e <ssd1306FillRect>

	ssd1306_UpdateScreen();
 800141c:	f7ff f82e 	bl	800047c <ssd1306_UpdateScreen>
}
 8001420:	bf00      	nop
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	20000014 	.word	0x20000014

0800142c <print_rectangle_on_head>:
// ----------------------------------------------------------------------------------------
void print_rectangle_on_head(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(0, 0, 127 , 15, White);
 8001432:	2301      	movs	r3, #1
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	230f      	movs	r3, #15
 8001438:	227f      	movs	r2, #127	; 0x7f
 800143a:	2100      	movs	r1, #0
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff f9d7 	bl	80007f0 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8001442:	f7ff f81b 	bl	800047c <ssd1306_UpdateScreen>
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <clear_menu_items>:
// ----------------------------------------------------------------------------------------
// Clear some menu items.
void clear_menu_items (bool first, bool second, bool third, bool fourth)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	4604      	mov	r4, r0
 8001454:	4608      	mov	r0, r1
 8001456:	4611      	mov	r1, r2
 8001458:	461a      	mov	r2, r3
 800145a:	4623      	mov	r3, r4
 800145c:	71fb      	strb	r3, [r7, #7]
 800145e:	4603      	mov	r3, r0
 8001460:	71bb      	strb	r3, [r7, #6]
 8001462:	460b      	mov	r3, r1
 8001464:	717b      	strb	r3, [r7, #5]
 8001466:	4613      	mov	r3, r2
 8001468:	713b      	strb	r3, [r7, #4]
	uint8_t start_row_x = 15;
 800146a:	230f      	movs	r3, #15
 800146c:	77fb      	strb	r3, [r7, #31]
	char str[16] = "               ";   // Must be 15
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <clear_menu_items+0xcc>)
 8001470:	f107 040c 	add.w	r4, r7, #12
 8001474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(first == true)
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00e      	beq.n	800149e <clear_menu_items+0x52>
	{
		ssd1306_SetCursor(start_row_x, first_menu_row);
 8001480:	4b26      	ldr	r3, [pc, #152]	; (800151c <clear_menu_items+0xd0>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	7ffb      	ldrb	r3, [r7, #31]
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f92c 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8001490:	4a23      	ldr	r2, [pc, #140]	; (8001520 <clear_menu_items+0xd4>)
 8001492:	f107 000c 	add.w	r0, r7, #12
 8001496:	2301      	movs	r3, #1
 8001498:	ca06      	ldmia	r2, {r1, r2}
 800149a:	f7ff f8ff 	bl	800069c <ssd1306_WriteString>
	}
	if(second == true)
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00e      	beq.n	80014c2 <clear_menu_items+0x76>
	{
		ssd1306_SetCursor(start_row_x, second_menu_row);
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <clear_menu_items+0xd8>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	7ffb      	ldrb	r3, [r7, #31]
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f91a 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80014b4:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <clear_menu_items+0xd4>)
 80014b6:	f107 000c 	add.w	r0, r7, #12
 80014ba:	2301      	movs	r3, #1
 80014bc:	ca06      	ldmia	r2, {r1, r2}
 80014be:	f7ff f8ed 	bl	800069c <ssd1306_WriteString>
	}
	if(first == true)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00e      	beq.n	80014e6 <clear_menu_items+0x9a>
	{
		ssd1306_SetCursor(start_row_x, third_menu_row);
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <clear_menu_items+0xdc>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f908 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80014d8:	4a11      	ldr	r2, [pc, #68]	; (8001520 <clear_menu_items+0xd4>)
 80014da:	f107 000c 	add.w	r0, r7, #12
 80014de:	2301      	movs	r3, #1
 80014e0:	ca06      	ldmia	r2, {r1, r2}
 80014e2:	f7ff f8db 	bl	800069c <ssd1306_WriteString>
	}
	if(fourth == true)
 80014e6:	793b      	ldrb	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00e      	beq.n	800150a <clear_menu_items+0xbe>
	{
		ssd1306_SetCursor(start_row_x, fourth_menu_row);
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <clear_menu_items+0xe0>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	7ffb      	ldrb	r3, [r7, #31]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f8f6 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <clear_menu_items+0xd4>)
 80014fe:	f107 000c 	add.w	r0, r7, #12
 8001502:	2301      	movs	r3, #1
 8001504:	ca06      	ldmia	r2, {r1, r2}
 8001506:	f7ff f8c9 	bl	800069c <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 800150a:	f7fe ffb7 	bl	800047c <ssd1306_UpdateScreen>
}
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd90      	pop	{r4, r7, pc}
 8001516:	bf00      	nop
 8001518:	080057f4 	.word	0x080057f4
 800151c:	2000001c 	.word	0x2000001c
 8001520:	20000000 	.word	0x20000000
 8001524:	2000001e 	.word	0x2000001e
 8001528:	20000020 	.word	0x20000020
 800152c:	20000022 	.word	0x20000022

08001530 <print_rows_on_oled_if_up>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_up(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]

	clear_menu_items (true , true , true , true );
 8001544:	2301      	movs	r3, #1
 8001546:	2201      	movs	r2, #1
 8001548:	2101      	movs	r1, #1
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff ff7e 	bl	800144c <clear_menu_items>

	print_rectangle_on_head();
 8001550:	f7ff ff6c 	bl	800142c <print_rectangle_on_head>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8001554:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <print_rows_on_oled_if_up+0xd8>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4619      	mov	r1, r3
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff f8c3 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8001562:	4a2a      	ldr	r2, [pc, #168]	; (800160c <print_rows_on_oled_if_up+0xdc>)
 8001564:	2301      	movs	r3, #1
 8001566:	ca06      	ldmia	r2, {r1, r2}
 8001568:	4829      	ldr	r0, [pc, #164]	; (8001610 <print_rows_on_oled_if_up+0xe0>)
 800156a:	f7ff f897 	bl	800069c <ssd1306_WriteString>

	MenuItem_t * currentItem_buff_up = currentItem;				// Create buffer on selected current item pointer.
 800156e:	4b29      	ldr	r3, [pc, #164]	; (8001614 <print_rows_on_oled_if_up+0xe4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <print_rows_on_oled_if_up+0xd8>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	74fb      	strb	r3, [r7, #19]
 800157a:	e035      	b.n	80015e8 <print_rows_on_oled_if_up+0xb8>
	{
		// Print number of menu item
		itoa(currentItem_buff_up -> id, str, 10);
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	7c1b      	ldrb	r3, [r3, #16]
 8001580:	4618      	mov	r0, r3
 8001582:	463b      	mov	r3, r7
 8001584:	220a      	movs	r2, #10
 8001586:	4619      	mov	r1, r3
 8001588:	f004 f8c8 	bl	800571c <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <print_rows_on_oled_if_up+0xe8>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	7cfa      	ldrb	r2, [r7, #19]
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff f8a6 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <print_rows_on_oled_if_up+0xdc>)
 800159e:	4638      	mov	r0, r7
 80015a0:	2301      	movs	r3, #1
 80015a2:	ca06      	ldmia	r2, {r1, r2}
 80015a4:	f7ff f87a 	bl	800069c <ssd1306_WriteString>

		// Print name of menu item
		strncpy(str, currentItem_buff_up -> name, 15);
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	6959      	ldr	r1, [r3, #20]
 80015ac:	463b      	mov	r3, r7
 80015ae:	220f      	movs	r2, #15
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 f8bd 	bl	8005730 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <print_rows_on_oled_if_up+0xec>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	7cfa      	ldrb	r2, [r7, #19]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff f891 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80015c6:	4a11      	ldr	r2, [pc, #68]	; (800160c <print_rows_on_oled_if_up+0xdc>)
 80015c8:	4638      	mov	r0, r7
 80015ca:	2301      	movs	r3, #1
 80015cc:	ca06      	ldmia	r2, {r1, r2}
 80015ce:	f7ff f865 	bl	800069c <ssd1306_WriteString>

		currentItem_buff_up = currentItem_buff_up -> down;		// Make a step down
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	617b      	str	r3, [r7, #20]

		// Print only existing items
		if(currentItem_buff_up == 0)							// If no next item
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <print_rows_on_oled_if_up+0xc6>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <print_rows_on_oled_if_up+0xf0>)
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	7cfb      	ldrb	r3, [r7, #19]
 80015e4:	4413      	add	r3, r2
 80015e6:	74fb      	strb	r3, [r7, #19]
 80015e8:	7cfb      	ldrb	r3, [r7, #19]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <print_rows_on_oled_if_up+0xf4>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d9c3      	bls.n	800157c <print_rows_on_oled_if_up+0x4c>
 80015f4:	e000      	b.n	80015f8 <print_rows_on_oled_if_up+0xc8>
		{
			break;
 80015f6:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 80015f8:	f7fe ff40 	bl	800047c <ssd1306_UpdateScreen>
	scroll_bar();
 80015fc:	f7ff fea2 	bl	8001344 <scroll_bar>
}
 8001600:	bf00      	nop
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000001c 	.word	0x2000001c
 800160c:	20000000 	.word	0x20000000
 8001610:	20000018 	.word	0x20000018
 8001614:	20000014 	.word	0x20000014
 8001618:	20000026 	.word	0x20000026
 800161c:	20000028 	.word	0x20000028
 8001620:	20000024 	.word	0x20000024
 8001624:	20000022 	.word	0x20000022

08001628 <print_rows_on_oled_if_down>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_down(void)	// print text menu item
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
	char str[16] = {0};
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]

	clear_menu_items (true , true , true , true );
 800163c:	2301      	movs	r3, #1
 800163e:	2201      	movs	r2, #1
 8001640:	2101      	movs	r1, #1
 8001642:	2001      	movs	r0, #1
 8001644:	f7ff ff02 	bl	800144c <clear_menu_items>

	print_rectangle_on_head();
 8001648:	f7ff fef0 	bl	800142c <print_rectangle_on_head>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 800164c:	4b2f      	ldr	r3, [pc, #188]	; (800170c <print_rows_on_oled_if_down+0xe4>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	4619      	mov	r1, r3
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff f847 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 800165a:	4a2d      	ldr	r2, [pc, #180]	; (8001710 <print_rows_on_oled_if_down+0xe8>)
 800165c:	2301      	movs	r3, #1
 800165e:	ca06      	ldmia	r2, {r1, r2}
 8001660:	482c      	ldr	r0, [pc, #176]	; (8001714 <print_rows_on_oled_if_down+0xec>)
 8001662:	f7ff f81b 	bl	800069c <ssd1306_WriteString>

	MenuItem_t * currentItem_buff = currentItem;
 8001666:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <print_rows_on_oled_if_down+0xf0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <print_rows_on_oled_if_down+0xe4>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	74fb      	strb	r3, [r7, #19]
 8001672:	e03b      	b.n	80016ec <print_rows_on_oled_if_down+0xc4>
	{
		// Print number of menu item
        itoa(currentItem_buff -> id, str, 10);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	7c1b      	ldrb	r3, [r3, #16]
 8001678:	4618      	mov	r0, r3
 800167a:	463b      	mov	r3, r7
 800167c:	220a      	movs	r2, #10
 800167e:	4619      	mov	r1, r3
 8001680:	f004 f84c 	bl	800571c <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <print_rows_on_oled_if_down+0xf4>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	7cfa      	ldrb	r2, [r7, #19]
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f82a 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8001694:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <print_rows_on_oled_if_down+0xe8>)
 8001696:	4638      	mov	r0, r7
 8001698:	2301      	movs	r3, #1
 800169a:	ca06      	ldmia	r2, {r1, r2}
 800169c:	f7fe fffe 	bl	800069c <ssd1306_WriteString>

		// Print name of menu item
		memset(str, 0, sizeof(str));
 80016a0:	463b      	mov	r3, r7
 80016a2:	2210      	movs	r2, #16
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f004 f83a 	bl	8005720 <memset>
	    strncpy(str, currentItem_buff -> name, 15);
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	6959      	ldr	r1, [r3, #20]
 80016b0:	463b      	mov	r3, r7
 80016b2:	220f      	movs	r2, #15
 80016b4:	4618      	mov	r0, r3
 80016b6:	f004 f83b 	bl	8005730 <strncpy>
	    ssd1306_SetCursor(start_print_name_menu_x, row);
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <print_rows_on_oled_if_down+0xf8>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	7cfa      	ldrb	r2, [r7, #19]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff f80f 	bl	80006e8 <ssd1306_SetCursor>
	    ssd1306_WriteString(str,  Font_7x10, White);
 80016ca:	4a11      	ldr	r2, [pc, #68]	; (8001710 <print_rows_on_oled_if_down+0xe8>)
 80016cc:	4638      	mov	r0, r7
 80016ce:	2301      	movs	r3, #1
 80016d0:	ca06      	ldmia	r2, {r1, r2}
 80016d2:	f7fe ffe3 	bl	800069c <ssd1306_WriteString>

	    currentItem_buff = currentItem_buff -> down;			// Make a step down
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	617b      	str	r3, [r7, #20]

	    // Print only existing items
	    if(currentItem_buff == 0)		 						// If no next item
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00b      	beq.n	80016fa <print_rows_on_oled_if_down+0xd2>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <print_rows_on_oled_if_down+0xfc>)
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	7cfb      	ldrb	r3, [r7, #19]
 80016e8:	4413      	add	r3, r2
 80016ea:	74fb      	strb	r3, [r7, #19]
 80016ec:	7cfb      	ldrb	r3, [r7, #19]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <print_rows_on_oled_if_down+0x100>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d9bd      	bls.n	8001674 <print_rows_on_oled_if_down+0x4c>
 80016f8:	e000      	b.n	80016fc <print_rows_on_oled_if_down+0xd4>
	    {
	    	break;
 80016fa:	bf00      	nop
	    }
	 }
	 ssd1306_UpdateScreen();
 80016fc:	f7fe febe 	bl	800047c <ssd1306_UpdateScreen>
	 scroll_bar();
 8001700:	f7ff fe20 	bl	8001344 <scroll_bar>
}
 8001704:	bf00      	nop
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000001c 	.word	0x2000001c
 8001710:	20000000 	.word	0x20000000
 8001714:	20000018 	.word	0x20000018
 8001718:	20000014 	.word	0x20000014
 800171c:	20000026 	.word	0x20000026
 8001720:	20000028 	.word	0x20000028
 8001724:	20000024 	.word	0x20000024
 8001728:	20000022 	.word	0x20000022

0800172c <print_menu_init>:
// ----------------------------------------------------------------------------------------
// Print first 4 items of menu (only first time)
void print_menu_init(void)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
	MenuItem_t * currentItem_buff = currentItem;
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <print_menu_init+0x10c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	61fb      	str	r3, [r7, #28]

	print_rectangle_on_head();
 8001738:	f7ff fe78 	bl	800142c <print_rectangle_on_head>

	//Print selected name of menu
	char str[20] = ">> MAIN MENU <<";
 800173c:	4b3f      	ldr	r3, [pc, #252]	; (800183c <print_menu_init+0x110>)
 800173e:	1d3c      	adds	r4, r7, #4
 8001740:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001742:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 800174a:	2103      	movs	r1, #3
 800174c:	200a      	movs	r0, #10
 800174e:	f7fe ffcb 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001752:	4a3b      	ldr	r2, [pc, #236]	; (8001840 <print_menu_init+0x114>)
 8001754:	1d38      	adds	r0, r7, #4
 8001756:	2301      	movs	r3, #1
 8001758:	ca06      	ldmia	r2, {r1, r2}
 800175a:	f7fe ff9f 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800175e:	f7fe fe8d 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2214      	movs	r2, #20
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f003 ffd9 	bl	8005720 <memset>

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 800176e:	4b35      	ldr	r3, [pc, #212]	; (8001844 <print_menu_init+0x118>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	76fb      	strb	r3, [r7, #27]
 8001774:	e051      	b.n	800181a <print_menu_init+0xee>
	{
		if(row == first_menu_row)
 8001776:	7efb      	ldrb	r3, [r7, #27]
 8001778:	b29a      	uxth	r2, r3
 800177a:	4b32      	ldr	r3, [pc, #200]	; (8001844 <print_menu_init+0x118>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d10d      	bne.n	800179e <print_menu_init+0x72>
		{
			// Print pointer on menu (On top)
			char str_pointer[4] = "->";
 8001782:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8001786:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8001788:	7efb      	ldrb	r3, [r7, #27]
 800178a:	4619      	mov	r1, r3
 800178c:	2000      	movs	r0, #0
 800178e:	f7fe ffab 	bl	80006e8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8001792:	4a2b      	ldr	r2, [pc, #172]	; (8001840 <print_menu_init+0x114>)
 8001794:	4638      	mov	r0, r7
 8001796:	2301      	movs	r3, #1
 8001798:	ca06      	ldmia	r2, {r1, r2}
 800179a:	f7fe ff7f 	bl	800069c <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	7c1b      	ldrb	r3, [r3, #16]
 80017a2:	4618      	mov	r0, r3
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	220a      	movs	r2, #10
 80017a8:	4619      	mov	r1, r3
 80017aa:	f003 ffb7 	bl	800571c <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <print_menu_init+0x11c>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	7efa      	ldrb	r2, [r7, #27]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe ff95 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80017be:	4a20      	ldr	r2, [pc, #128]	; (8001840 <print_menu_init+0x114>)
 80017c0:	1d38      	adds	r0, r7, #4
 80017c2:	2301      	movs	r3, #1
 80017c4:	ca06      	ldmia	r2, {r1, r2}
 80017c6:	f7fe ff69 	bl	800069c <ssd1306_WriteString>
		memset(str, 0, sizeof(str));
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2214      	movs	r2, #20
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 ffa5 	bl	8005720 <memset>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	6959      	ldr	r1, [r3, #20]
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	220f      	movs	r2, #15
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 ffa6 	bl	8005730 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <print_menu_init+0x120>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	7efa      	ldrb	r2, [r7, #27]
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe ff7a 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80017f4:	4a12      	ldr	r2, [pc, #72]	; (8001840 <print_menu_init+0x114>)
 80017f6:	1d38      	adds	r0, r7, #4
 80017f8:	2301      	movs	r3, #1
 80017fa:	ca06      	ldmia	r2, {r1, r2}
 80017fc:	f7fe ff4e 	bl	800069c <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8001800:	f7fe fe3c 	bl	800047c <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00b      	beq.n	8001828 <print_menu_init+0xfc>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <print_menu_init+0x124>)
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	7efb      	ldrb	r3, [r7, #27]
 8001816:	4413      	add	r3, r2
 8001818:	76fb      	strb	r3, [r7, #27]
 800181a:	7efb      	ldrb	r3, [r7, #27]
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <print_menu_init+0x128>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d9a7      	bls.n	8001776 <print_menu_init+0x4a>
 8001826:	e000      	b.n	800182a <print_menu_init+0xfe>
		{
			break;
 8001828:	bf00      	nop
		}
	}
	scroll_bar();
 800182a:	f7ff fd8b 	bl	8001344 <scroll_bar>
}
 800182e:	bf00      	nop
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	bf00      	nop
 8001838:	20000014 	.word	0x20000014
 800183c:	08005804 	.word	0x08005804
 8001840:	20000000 	.word	0x20000000
 8001844:	2000001c 	.word	0x2000001c
 8001848:	20000026 	.word	0x20000026
 800184c:	20000028 	.word	0x20000028
 8001850:	20000024 	.word	0x20000024
 8001854:	20000022 	.word	0x20000022

08001858 <action>:
// ----------------------------------------------------------------------------------------
void action(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
	char str[16] = {0};
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]

	clearn_oled();
 800186e:	f7fe fd55 	bl	800031c <clearn_oled>

	print_rectangle_on_head();
 8001872:	f7ff fddb 	bl	800142c <print_rectangle_on_head>

	//Print selected name of menu on top of OLED
	MenuItem_t * currentItem_buff_parent = currentItem;
 8001876:	4b40      	ldr	r3, [pc, #256]	; (8001978 <action+0x120>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	617b      	str	r3, [r7, #20]
	currentItem_buff_parent = currentItem_buff_parent -> parent;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	617b      	str	r3, [r7, #20]

	strncpy(str, currentItem_buff_parent -> name, 15);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	6959      	ldr	r1, [r3, #20]
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	220f      	movs	r2, #15
 800188a:	4618      	mov	r0, r3
 800188c:	f003 ff50 	bl	8005730 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001890:	2103      	movs	r1, #3
 8001892:	200a      	movs	r0, #10
 8001894:	f7fe ff28 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001898:	4a38      	ldr	r2, [pc, #224]	; (800197c <action+0x124>)
 800189a:	1d38      	adds	r0, r7, #4
 800189c:	2301      	movs	r3, #1
 800189e:	ca06      	ldmia	r2, {r1, r2}
 80018a0:	f7fe fefc 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80018a4:	f7fe fdea 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2210      	movs	r2, #16
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 ff36 	bl	8005720 <memset>

	MenuItem_t * currentItem_buff = currentItem;
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <action+0x120>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	61fb      	str	r3, [r7, #28]

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80018ba:	4b31      	ldr	r3, [pc, #196]	; (8001980 <action+0x128>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	76fb      	strb	r3, [r7, #27]
 80018c0:	e04b      	b.n	800195a <action+0x102>
	{
		if(row == first_menu_row)
 80018c2:	7efb      	ldrb	r3, [r7, #27]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <action+0x128>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d10d      	bne.n	80018ea <action+0x92>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 80018ce:	f643 632d 	movw	r3, #15917	; 0x3e2d
 80018d2:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 80018d4:	7efb      	ldrb	r3, [r7, #27]
 80018d6:	4619      	mov	r1, r3
 80018d8:	2000      	movs	r0, #0
 80018da:	f7fe ff05 	bl	80006e8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 80018de:	4a27      	ldr	r2, [pc, #156]	; (800197c <action+0x124>)
 80018e0:	4638      	mov	r0, r7
 80018e2:	2301      	movs	r3, #1
 80018e4:	ca06      	ldmia	r2, {r1, r2}
 80018e6:	f7fe fed9 	bl	800069c <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	7c1b      	ldrb	r3, [r3, #16]
 80018ee:	4618      	mov	r0, r3
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	220a      	movs	r2, #10
 80018f4:	4619      	mov	r1, r3
 80018f6:	f003 ff11 	bl	800571c <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <action+0x12c>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	7efa      	ldrb	r2, [r7, #27]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe feef 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800190a:	4a1c      	ldr	r2, [pc, #112]	; (800197c <action+0x124>)
 800190c:	1d38      	adds	r0, r7, #4
 800190e:	2301      	movs	r3, #1
 8001910:	ca06      	ldmia	r2, {r1, r2}
 8001912:	f7fe fec3 	bl	800069c <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	6959      	ldr	r1, [r3, #20]
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	220f      	movs	r2, #15
 800191e:	4618      	mov	r0, r3
 8001920:	f003 ff06 	bl	8005730 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <action+0x130>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	7efa      	ldrb	r2, [r7, #27]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe feda 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8001934:	4a11      	ldr	r2, [pc, #68]	; (800197c <action+0x124>)
 8001936:	1d38      	adds	r0, r7, #4
 8001938:	2301      	movs	r3, #1
 800193a:	ca06      	ldmia	r2, {r1, r2}
 800193c:	f7fe feae 	bl	800069c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001940:	f7fe fd9c 	bl	800047c <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00b      	beq.n	8001968 <action+0x110>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <action+0x134>)
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	7efb      	ldrb	r3, [r7, #27]
 8001956:	4413      	add	r3, r2
 8001958:	76fb      	strb	r3, [r7, #27]
 800195a:	7efb      	ldrb	r3, [r7, #27]
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <action+0x138>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d9ad      	bls.n	80018c2 <action+0x6a>
 8001966:	e000      	b.n	800196a <action+0x112>
		{
			break;
 8001968:	bf00      	nop
		}
	}
	scroll_bar();
 800196a:	f7ff fceb 	bl	8001344 <scroll_bar>
}
 800196e:	bf00      	nop
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000014 	.word	0x20000014
 800197c:	20000000 	.word	0x20000000
 8001980:	2000001c 	.word	0x2000001c
 8001984:	20000026 	.word	0x20000026
 8001988:	20000028 	.word	0x20000028
 800198c:	20000024 	.word	0x20000024
 8001990:	20000022 	.word	0x20000022

08001994 <return_from_menu>:
// ----------------------------------------------------------------------------------------
void return_from_menu(void)
{
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
	currentItem = &items[0];											// Jump to main menu
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <return_from_menu+0x44>)
 800199c:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <return_from_menu+0x48>)
 800199e:	601a      	str	r2, [r3, #0]
	clearn_oled();
 80019a0:	f7fe fcbc 	bl	800031c <clearn_oled>

	// Print "MAIN MENU:"
	char str[20] = ">> MAIN MENU <<";
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <return_from_menu+0x4c>)
 80019a6:	1d3c      	adds	r4, r7, #4
 80019a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 80019b2:	2103      	movs	r1, #3
 80019b4:	200a      	movs	r0, #10
 80019b6:	f7fe fe97 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <return_from_menu+0x50>)
 80019bc:	1d38      	adds	r0, r7, #4
 80019be:	2301      	movs	r3, #1
 80019c0:	ca06      	ldmia	r2, {r1, r2}
 80019c2:	f7fe fe6b 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80019c6:	f7fe fd59 	bl	800047c <ssd1306_UpdateScreen>

	print_menu_init();													// Print all start menu
 80019ca:	f7ff feaf 	bl	800172c <print_menu_init>
}
 80019ce:	bf00      	nop
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000014 	.word	0x20000014
 80019dc:	20000740 	.word	0x20000740
 80019e0:	08005804 	.word	0x08005804
 80019e4:	20000000 	.word	0x20000000

080019e8 <items_menu_1_set_par_1>:
//	currentItem = &items_menu_1[0];										// Set global pointer on first menu
//	action();															// Print items on OLED
//}
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_1(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
	clearn_oled();
 80019ee:	f7fe fc95 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <items_menu_1_set_par_1+0xa4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6959      	ldr	r1, [r3, #20]
 8001a06:	463b      	mov	r3, r7
 8001a08:	220f      	movs	r2, #15
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 fe90 	bl	8005730 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001a10:	2103      	movs	r1, #3
 8001a12:	200a      	movs	r0, #10
 8001a14:	f7fe fe68 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001a18:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <items_menu_1_set_par_1+0xa8>)
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	ca06      	ldmia	r2, {r1, r2}
 8001a20:	f7fe fe3c 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a24:	f7fe fd2a 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fe76 	bl	8005720 <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 8001a34:	463b      	mov	r3, r7
 8001a36:	2210      	movs	r2, #16
 8001a38:	4916      	ldr	r1, [pc, #88]	; (8001a94 <items_menu_1_set_par_1+0xac>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fe78 	bl	8005730 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <items_menu_1_set_par_1+0xb0>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4619      	mov	r1, r3
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7fe fe4d 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <items_menu_1_set_par_1+0xa8>)
 8001a50:	4638      	mov	r0, r7
 8001a52:	2301      	movs	r3, #1
 8001a54:	ca06      	ldmia	r2, {r1, r2}
 8001a56:	f7fe fe21 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a5a:	f7fe fd0f 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <items_menu_1_set_par_1+0xb4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <items_menu_1_set_par_1+0xb8>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	}while (button_status != BUTTON_ENTER);
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <items_menu_1_set_par_1+0xb4>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d1fb      	bne.n	8001a6a <items_menu_1_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <items_menu_1_set_par_1+0xb8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <items_menu_1_set_par_1+0xa4>)
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <items_menu_1_set_par_1+0xbc>)
 8001a7c:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001a7e:	f7ff feeb 	bl	8001858 <action>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000014 	.word	0x20000014
 8001a90:	20000000 	.word	0x20000000
 8001a94:	08005818 	.word	0x08005818
 8001a98:	2000001c 	.word	0x2000001c
 8001a9c:	200004a1 	.word	0x200004a1
 8001aa0:	200004a0 	.word	0x200004a0
 8001aa4:	2000068c 	.word	0x2000068c

08001aa8 <items_menu_1_set_par_2>:
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_2(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
	clearn_oled();
 8001aae:	f7fe fc35 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001ac0:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <items_menu_1_set_par_2+0xa4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6959      	ldr	r1, [r3, #20]
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	220f      	movs	r2, #15
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fe30 	bl	8005730 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001ad0:	2103      	movs	r1, #3
 8001ad2:	200a      	movs	r0, #10
 8001ad4:	f7fe fe08 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <items_menu_1_set_par_2+0xa8>)
 8001ada:	4638      	mov	r0, r7
 8001adc:	2301      	movs	r3, #1
 8001ade:	ca06      	ldmia	r2, {r1, r2}
 8001ae0:	f7fe fddc 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001ae4:	f7fe fcca 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2210      	movs	r2, #16
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fe16 	bl	8005720 <memset>

	strncpy(str, "Set parametr 2", sizeof(str));
 8001af4:	463b      	mov	r3, r7
 8001af6:	2210      	movs	r2, #16
 8001af8:	4916      	ldr	r1, [pc, #88]	; (8001b54 <items_menu_1_set_par_2+0xac>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fe18 	bl	8005730 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <items_menu_1_set_par_2+0xb0>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4619      	mov	r1, r3
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7fe fded 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <items_menu_1_set_par_2+0xa8>)
 8001b10:	4638      	mov	r0, r7
 8001b12:	2301      	movs	r3, #1
 8001b14:	ca06      	ldmia	r2, {r1, r2}
 8001b16:	f7fe fdc1 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001b1a:	f7fe fcaf 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <items_menu_1_set_par_2+0xb4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <items_menu_1_set_par_2+0xb8>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <items_menu_1_set_par_2+0xb4>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d1fb      	bne.n	8001b2a <items_menu_1_set_par_2+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <items_menu_1_set_par_2+0xb8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <items_menu_1_set_par_2+0xa4>)
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <items_menu_1_set_par_2+0xbc>)
 8001b3c:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001b3e:	f7ff fe8b 	bl	8001858 <action>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000014 	.word	0x20000014
 8001b50:	20000000 	.word	0x20000000
 8001b54:	08005828 	.word	0x08005828
 8001b58:	2000001c 	.word	0x2000001c
 8001b5c:	200004a1 	.word	0x200004a1
 8001b60:	200004a0 	.word	0x200004a0
 8001b64:	2000068c 	.word	0x2000068c

08001b68 <items_menu_2_set_par_1>:
//	currentItem = &items_menu_2[0];										// Set global pointer on first menu
//	action();															// Print items on OLED
//}
// ----------------------------------------------------------------------------------------
void items_menu_2_set_par_1(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
	clearn_oled();
 8001b6e:	f7fe fbd5 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001b72:	2300      	movs	r3, #0
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <items_menu_2_set_par_1+0xa4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6959      	ldr	r1, [r3, #20]
 8001b86:	463b      	mov	r3, r7
 8001b88:	220f      	movs	r2, #15
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f003 fdd0 	bl	8005730 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001b90:	2103      	movs	r1, #3
 8001b92:	200a      	movs	r0, #10
 8001b94:	f7fe fda8 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001b98:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <items_menu_2_set_par_1+0xa8>)
 8001b9a:	4638      	mov	r0, r7
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	ca06      	ldmia	r2, {r1, r2}
 8001ba0:	f7fe fd7c 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001ba4:	f7fe fc6a 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001ba8:	463b      	mov	r3, r7
 8001baa:	2210      	movs	r2, #16
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fdb6 	bl	8005720 <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	4916      	ldr	r1, [pc, #88]	; (8001c14 <items_menu_2_set_par_1+0xac>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fdb8 	bl	8005730 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <items_menu_2_set_par_1+0xb0>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7fe fd8d 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <items_menu_2_set_par_1+0xa8>)
 8001bd0:	4638      	mov	r0, r7
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	ca06      	ldmia	r2, {r1, r2}
 8001bd6:	f7fe fd61 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001bda:	f7fe fc4f 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <items_menu_2_set_par_1+0xb4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <items_menu_2_set_par_1+0xb8>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <items_menu_2_set_par_1+0xb4>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d1fb      	bne.n	8001bea <items_menu_2_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <items_menu_2_set_par_1+0xb8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <items_menu_2_set_par_1+0xa4>)
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <items_menu_2_set_par_1+0xbc>)
 8001bfc:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001bfe:	f7ff fe2b 	bl	8001858 <action>
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000014 	.word	0x20000014
 8001c10:	20000000 	.word	0x20000000
 8001c14:	08005818 	.word	0x08005818
 8001c18:	2000001c 	.word	0x2000001c
 8001c1c:	200004a1 	.word	0x200004a1
 8001c20:	200004a0 	.word	0x200004a0
 8001c24:	20000620 	.word	0x20000620

08001c28 <do_it_function_menu_3>:
// ----------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_3(void)        // Print T and H
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
	clearn_oled();
 8001c2e:	f7fe fb75 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001c32:	2300      	movs	r3, #0
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <do_it_function_menu_3+0xc8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6959      	ldr	r1, [r3, #20]
 8001c46:	463b      	mov	r3, r7
 8001c48:	220f      	movs	r2, #15
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fd70 	bl	8005730 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001c50:	2103      	movs	r1, #3
 8001c52:	200a      	movs	r0, #10
 8001c54:	f7fe fd48 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001c58:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <do_it_function_menu_3+0xcc>)
 8001c5a:	4638      	mov	r0, r7
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	ca06      	ldmia	r2, {r1, r2}
 8001c60:	f7fe fd1c 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001c64:	f7fe fc0a 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001c68:	463b      	mov	r3, r7
 8001c6a:	2210      	movs	r2, #16
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fd56 	bl	8005720 <memset>

	strncpy(str, "Doing something 3", sizeof(str));
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <do_it_function_menu_3+0xd0>)
 8001c76:	463c      	mov	r4, r7
 8001c78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <do_it_function_menu_3+0xd4>)
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4619      	mov	r1, r3
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7fe fd2e 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001c8c:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <do_it_function_menu_3+0xcc>)
 8001c8e:	4638      	mov	r0, r7
 8001c90:	2301      	movs	r3, #1
 8001c92:	ca06      	ldmia	r2, {r1, r2}
 8001c94:	f7fe fd02 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001c98:	f7fe fbf0 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <do_it_function_menu_3+0xd8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <do_it_function_menu_3+0xdc>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cae:	4816      	ldr	r0, [pc, #88]	; (8001d08 <do_it_function_menu_3+0xe0>)
 8001cb0:	f000 fe41 	bl	8002936 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cb8:	f000 fac0 	bl	800223c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc2:	4811      	ldr	r0, [pc, #68]	; (8001d08 <do_it_function_menu_3+0xe0>)
 8001cc4:	f000 fe37 	bl	8002936 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001cc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ccc:	f000 fab6 	bl	800223c <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <do_it_function_menu_3+0xd8>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d1e7      	bne.n	8001ca8 <do_it_function_menu_3+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <do_it_function_menu_3+0xdc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <do_it_function_menu_3+0xc8>)
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <do_it_function_menu_3+0xe4>)
 8001ce2:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001ce4:	f7ff fdb8 	bl	8001858 <action>
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd90      	pop	{r4, r7, pc}
 8001cf0:	20000014 	.word	0x20000014
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	08005838 	.word	0x08005838
 8001cfc:	2000001c 	.word	0x2000001c
 8001d00:	200004a1 	.word	0x200004a1
 8001d04:	200004a0 	.word	0x200004a0
 8001d08:	40011000 	.word	0x40011000
 8001d0c:	200006f8 	.word	0x200006f8

08001d10 <Menu_Init>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// ----------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------
void Menu_Init (void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
	// Make pointers on funsctions
	// Main functions
	void (*p_print_rows_on_oled_if_up) (void);
	p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
 8001d16:	4b8b      	ldr	r3, [pc, #556]	; (8001f44 <Menu_Init+0x234>)
 8001d18:	61fb      	str	r3, [r7, #28]

	void (*p_print_rows_on_oled_if_down) (void);					// Create pointer on function
	p_print_rows_on_oled_if_down = print_rows_on_oled_if_down;		// Save function print on pointer print_p
 8001d1a:	4b8b      	ldr	r3, [pc, #556]	; (8001f48 <Menu_Init+0x238>)
 8001d1c:	61bb      	str	r3, [r7, #24]

	void (*p_return_from_menu)(void);
	p_return_from_menu = return_from_menu;
 8001d1e:	4b8b      	ldr	r3, [pc, #556]	; (8001f4c <Menu_Init+0x23c>)
 8001d20:	617b      	str	r3, [r7, #20]

	void (*p_action) (void);										// Create pointer on function
	p_action = action;												// Save function action on pointer action_p
 8001d22:	4b8b      	ldr	r3, [pc, #556]	; (8001f50 <Menu_Init+0x240>)
 8001d24:	613b      	str	r3, [r7, #16]
	// items_menu_1 menu functions
//	void (*p_do_it_function_menu_1) (void);						// Function "Do it". Works when select it
//	p_do_it_function_menu_1 = do_it_function_menu_1;

	void (*p_items_menu_1_set_par_1) (void);
	p_items_menu_1_set_par_1 = items_menu_1_set_par_1;
 8001d26:	4b8b      	ldr	r3, [pc, #556]	; (8001f54 <Menu_Init+0x244>)
 8001d28:	60fb      	str	r3, [r7, #12]

	void (*p_items_menu_1_set_par_2) (void);
	p_items_menu_1_set_par_2 = items_menu_1_set_par_2;
 8001d2a:	4b8b      	ldr	r3, [pc, #556]	; (8001f58 <Menu_Init+0x248>)
 8001d2c:	60bb      	str	r3, [r7, #8]
	// items_menu_2 menu functions
//	void (*p_do_it_function_menu_2) (void);						// Function "Do it". Works when select it
//	p_do_it_function_menu_2 = do_it_function_menu_2;

	void (*p_items_menu_2_set_par_1) (void);
	p_items_menu_2_set_par_1 = items_menu_2_set_par_1;
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <Menu_Init+0x24c>)
 8001d30:	607b      	str	r3, [r7, #4]

	// items_menu_3 menu functions
	void (*p_do_it_function_menu_3) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_3 = do_it_function_menu_3;
 8001d32:	4b8b      	ldr	r3, [pc, #556]	; (8001f60 <Menu_Init+0x250>)
 8001d34:	603b      	str	r3, [r7, #0]

	// Fill in elements(nodes) of list (7 items)
	// Main menu items
	/////////////////////////////////////////////////////////////////

	items[0].up = 0;
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <Menu_Init+0x254>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
	items[0].down = &items[1];
 8001d3c:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <Menu_Init+0x254>)
 8001d3e:	4a8a      	ldr	r2, [pc, #552]	; (8001f68 <Menu_Init+0x258>)
 8001d40:	605a      	str	r2, [r3, #4]
	items[0].child = &items_menu_1[0];
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <Menu_Init+0x254>)
 8001d44:	4a89      	ldr	r2, [pc, #548]	; (8001f6c <Menu_Init+0x25c>)
 8001d46:	609a      	str	r2, [r3, #8]
	items[0].parent = 0;
 8001d48:	4b86      	ldr	r3, [pc, #536]	; (8001f64 <Menu_Init+0x254>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
	items[0].id = 1;
 8001d4e:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <Menu_Init+0x254>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	741a      	strb	r2, [r3, #16]
	items[0].name = "LoRa E220";
 8001d54:	4b83      	ldr	r3, [pc, #524]	; (8001f64 <Menu_Init+0x254>)
 8001d56:	4a86      	ldr	r2, [pc, #536]	; (8001f70 <Menu_Init+0x260>)
 8001d58:	615a      	str	r2, [r3, #20]
	items[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8001d5a:	4a82      	ldr	r2, [pc, #520]	; (8001f64 <Menu_Init+0x254>)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	6193      	str	r3, [r2, #24]
	items[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8001d60:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <Menu_Init+0x254>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	61d3      	str	r3, [r2, #28]
	items[0].makeAction = 0;
 8001d66:	4b7f      	ldr	r3, [pc, #508]	; (8001f64 <Menu_Init+0x254>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]

	items[1].up = &items[0];
 8001d6c:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <Menu_Init+0x254>)
 8001d6e:	4a7d      	ldr	r2, [pc, #500]	; (8001f64 <Menu_Init+0x254>)
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
	items[1].down = &items[2];
 8001d72:	4b7c      	ldr	r3, [pc, #496]	; (8001f64 <Menu_Init+0x254>)
 8001d74:	4a7f      	ldr	r2, [pc, #508]	; (8001f74 <Menu_Init+0x264>)
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
	items[1].child = &items_menu_2[0];
 8001d78:	4b7a      	ldr	r3, [pc, #488]	; (8001f64 <Menu_Init+0x254>)
 8001d7a:	4a7f      	ldr	r2, [pc, #508]	; (8001f78 <Menu_Init+0x268>)
 8001d7c:	62da      	str	r2, [r3, #44]	; 0x2c
	items[1].parent = 0;
 8001d7e:	4b79      	ldr	r3, [pc, #484]	; (8001f64 <Menu_Init+0x254>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
	items[1].id = 2;
 8001d84:	4b77      	ldr	r3, [pc, #476]	; (8001f64 <Menu_Init+0x254>)
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items[1].name = "NRF24L01";
 8001d8c:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <Menu_Init+0x254>)
 8001d8e:	4a7b      	ldr	r2, [pc, #492]	; (8001f7c <Menu_Init+0x26c>)
 8001d90:	639a      	str	r2, [r3, #56]	; 0x38
	items[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8001d92:	4a74      	ldr	r2, [pc, #464]	; (8001f64 <Menu_Init+0x254>)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	63d3      	str	r3, [r2, #60]	; 0x3c
	items[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8001d98:	4a72      	ldr	r2, [pc, #456]	; (8001f64 <Menu_Init+0x254>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
	items[1].makeAction = 0;
 8001d9e:	4b71      	ldr	r3, [pc, #452]	; (8001f64 <Menu_Init+0x254>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	645a      	str	r2, [r3, #68]	; 0x44

	items[2].up = &items[1];
 8001da4:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <Menu_Init+0x254>)
 8001da6:	4a70      	ldr	r2, [pc, #448]	; (8001f68 <Menu_Init+0x258>)
 8001da8:	649a      	str	r2, [r3, #72]	; 0x48
	items[2].down = 0;
 8001daa:	4b6e      	ldr	r3, [pc, #440]	; (8001f64 <Menu_Init+0x254>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	64da      	str	r2, [r3, #76]	; 0x4c
	items[2].child = &items_menu_3[0];
 8001db0:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <Menu_Init+0x254>)
 8001db2:	4a73      	ldr	r2, [pc, #460]	; (8001f80 <Menu_Init+0x270>)
 8001db4:	651a      	str	r2, [r3, #80]	; 0x50
	items[2].parent = 0;
 8001db6:	4b6b      	ldr	r3, [pc, #428]	; (8001f64 <Menu_Init+0x254>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
	items[2].id = 3;
 8001dbc:	4b69      	ldr	r3, [pc, #420]	; (8001f64 <Menu_Init+0x254>)
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items[2].name = "AM2302 sensor";
 8001dc4:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <Menu_Init+0x254>)
 8001dc6:	4a6f      	ldr	r2, [pc, #444]	; (8001f84 <Menu_Init+0x274>)
 8001dc8:	65da      	str	r2, [r3, #92]	; 0x5c
	items[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8001dca:	4a66      	ldr	r2, [pc, #408]	; (8001f64 <Menu_Init+0x254>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	6613      	str	r3, [r2, #96]	; 0x60
	items[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8001dd0:	4a64      	ldr	r2, [pc, #400]	; (8001f64 <Menu_Init+0x254>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	6653      	str	r3, [r2, #100]	; 0x64
	items[2].makeAction = 0;
 8001dd6:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <Menu_Init+0x254>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	669a      	str	r2, [r3, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating LoRa menu
	items_menu_1[0].up = 0;
 8001ddc:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <Menu_Init+0x25c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
	items_menu_1[0].down = &items_menu_1[1];
 8001de2:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <Menu_Init+0x25c>)
 8001de4:	4a68      	ldr	r2, [pc, #416]	; (8001f88 <Menu_Init+0x278>)
 8001de6:	605a      	str	r2, [r3, #4]
	items_menu_1[0].id = 1;
 8001de8:	4b60      	ldr	r3, [pc, #384]	; (8001f6c <Menu_Init+0x25c>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	741a      	strb	r2, [r3, #16]
	items_menu_1[0].child = 0;
 8001dee:	4b5f      	ldr	r3, [pc, #380]	; (8001f6c <Menu_Init+0x25c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
	items_menu_1[0].parent = &items[0];
 8001df4:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <Menu_Init+0x25c>)
 8001df6:	4a5b      	ldr	r2, [pc, #364]	; (8001f64 <Menu_Init+0x254>)
 8001df8:	60da      	str	r2, [r3, #12]
	items_menu_1[0].name = "LoRa RX";
 8001dfa:	4b5c      	ldr	r3, [pc, #368]	; (8001f6c <Menu_Init+0x25c>)
 8001dfc:	4a63      	ldr	r2, [pc, #396]	; (8001f8c <Menu_Init+0x27c>)
 8001dfe:	615a      	str	r2, [r3, #20]
	items_menu_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8001e00:	4a5a      	ldr	r2, [pc, #360]	; (8001f6c <Menu_Init+0x25c>)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	6193      	str	r3, [r2, #24]
	items_menu_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8001e06:	4a59      	ldr	r2, [pc, #356]	; (8001f6c <Menu_Init+0x25c>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	61d3      	str	r3, [r2, #28]
	items_menu_1[0].makeAction = 0;
 8001e0c:	4b57      	ldr	r3, [pc, #348]	; (8001f6c <Menu_Init+0x25c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]

	items_menu_1[1].up = &items_menu_1[0];
 8001e12:	4b56      	ldr	r3, [pc, #344]	; (8001f6c <Menu_Init+0x25c>)
 8001e14:	4a55      	ldr	r2, [pc, #340]	; (8001f6c <Menu_Init+0x25c>)
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1[1].down = &items_menu_1[2];
 8001e18:	4b54      	ldr	r3, [pc, #336]	; (8001f6c <Menu_Init+0x25c>)
 8001e1a:	4a5d      	ldr	r2, [pc, #372]	; (8001f90 <Menu_Init+0x280>)
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1[1].child = 0;
 8001e1e:	4b53      	ldr	r3, [pc, #332]	; (8001f6c <Menu_Init+0x25c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1[1].parent = &items[0];
 8001e24:	4b51      	ldr	r3, [pc, #324]	; (8001f6c <Menu_Init+0x25c>)
 8001e26:	4a4f      	ldr	r2, [pc, #316]	; (8001f64 <Menu_Init+0x254>)
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1[1].id = 2;
 8001e2a:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <Menu_Init+0x25c>)
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1[1].name = "LoRa TX";
 8001e32:	4b4e      	ldr	r3, [pc, #312]	; (8001f6c <Menu_Init+0x25c>)
 8001e34:	4a57      	ldr	r2, [pc, #348]	; (8001f94 <Menu_Init+0x284>)
 8001e36:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8001e38:	4a4c      	ldr	r2, [pc, #304]	; (8001f6c <Menu_Init+0x25c>)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8001e3e:	4a4b      	ldr	r2, [pc, #300]	; (8001f6c <Menu_Init+0x25c>)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1[1].makeAction = 0;
 8001e44:	4b49      	ldr	r3, [pc, #292]	; (8001f6c <Menu_Init+0x25c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44

	items_menu_1[2].up = &items_menu_1[1];
 8001e4a:	4b48      	ldr	r3, [pc, #288]	; (8001f6c <Menu_Init+0x25c>)
 8001e4c:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <Menu_Init+0x278>)
 8001e4e:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1[2].down = 0;
 8001e50:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <Menu_Init+0x25c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1[2].child = 0;
 8001e56:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <Menu_Init+0x25c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1[2].parent = &items[0];
 8001e5c:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <Menu_Init+0x25c>)
 8001e5e:	4a41      	ldr	r2, [pc, #260]	; (8001f64 <Menu_Init+0x254>)
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1[2].id = 3;
 8001e62:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <Menu_Init+0x25c>)
 8001e64:	2203      	movs	r2, #3
 8001e66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1[2].name = "EXIT";						// Name of item
 8001e6a:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <Menu_Init+0x25c>)
 8001e6c:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <Menu_Init+0x288>)
 8001e6e:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8001e70:	4a3e      	ldr	r2, [pc, #248]	; (8001f6c <Menu_Init+0x25c>)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8001e76:	4a3d      	ldr	r2, [pc, #244]	; (8001f6c <Menu_Init+0x25c>)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1[2].makeAction = p_return_from_menu;
 8001e7c:	4a3b      	ldr	r2, [pc, #236]	; (8001f6c <Menu_Init+0x25c>)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_2[0].up = 0;
 8001e82:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <Menu_Init+0x268>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
	items_menu_2[0].down = &items_menu_2[1];
 8001e88:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <Menu_Init+0x268>)
 8001e8a:	4a44      	ldr	r2, [pc, #272]	; (8001f9c <Menu_Init+0x28c>)
 8001e8c:	605a      	str	r2, [r3, #4]
	items_menu_2[0].child = 0;
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <Menu_Init+0x268>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
	items_menu_2[0].parent = &items[1];
 8001e94:	4b38      	ldr	r3, [pc, #224]	; (8001f78 <Menu_Init+0x268>)
 8001e96:	4a34      	ldr	r2, [pc, #208]	; (8001f68 <Menu_Init+0x258>)
 8001e98:	60da      	str	r2, [r3, #12]
	items_menu_2[0].id = 1;
 8001e9a:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <Menu_Init+0x268>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	741a      	strb	r2, [r3, #16]
	items_menu_2[0].name = "NRF RX";						// Name of item
 8001ea0:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <Menu_Init+0x268>)
 8001ea2:	4a3f      	ldr	r2, [pc, #252]	; (8001fa0 <Menu_Init+0x290>)
 8001ea4:	615a      	str	r2, [r3, #20]
	items_menu_2[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8001ea6:	4a34      	ldr	r2, [pc, #208]	; (8001f78 <Menu_Init+0x268>)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	6193      	str	r3, [r2, #24]
	items_menu_2[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8001eac:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <Menu_Init+0x268>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	61d3      	str	r3, [r2, #28]
	items_menu_2[0].makeAction = 0;
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <Menu_Init+0x268>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	621a      	str	r2, [r3, #32]

	items_menu_2[1].up = &items_menu_2[0];
 8001eb8:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <Menu_Init+0x268>)
 8001eba:	4a2f      	ldr	r2, [pc, #188]	; (8001f78 <Menu_Init+0x268>)
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2[1].down = &items_menu_2[2];
 8001ebe:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <Menu_Init+0x268>)
 8001ec0:	4a38      	ldr	r2, [pc, #224]	; (8001fa4 <Menu_Init+0x294>)
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2[1].child = 0;
 8001ec4:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <Menu_Init+0x268>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2[1].parent = &items[1];
 8001eca:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <Menu_Init+0x268>)
 8001ecc:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <Menu_Init+0x258>)
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2[1].id = 2;
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <Menu_Init+0x268>)
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2[1].name = "NRF TX";						// Name of item
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <Menu_Init+0x268>)
 8001eda:	4a33      	ldr	r2, [pc, #204]	; (8001fa8 <Menu_Init+0x298>)
 8001edc:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8001ede:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <Menu_Init+0x268>)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8001ee4:	4a24      	ldr	r2, [pc, #144]	; (8001f78 <Menu_Init+0x268>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2[1].makeAction = 0;
 8001eea:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <Menu_Init+0x268>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	645a      	str	r2, [r3, #68]	; 0x44

	items_menu_2[2].up = &items_menu_2[1];
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <Menu_Init+0x268>)
 8001ef2:	4a2a      	ldr	r2, [pc, #168]	; (8001f9c <Menu_Init+0x28c>)
 8001ef4:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2[2].down = 0;
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <Menu_Init+0x268>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2[2].child = 0;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <Menu_Init+0x268>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2[2].parent = &items[1];
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <Menu_Init+0x268>)
 8001f04:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <Menu_Init+0x258>)
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2[2].id = 3;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <Menu_Init+0x268>)
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2[2].name = "EXIT";						// Name of item
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <Menu_Init+0x268>)
 8001f12:	4a21      	ldr	r2, [pc, #132]	; (8001f98 <Menu_Init+0x288>)
 8001f14:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8001f16:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <Menu_Init+0x268>)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8001f1c:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <Menu_Init+0x268>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2[2].makeAction = p_return_from_menu;
 8001f22:	4a15      	ldr	r2, [pc, #84]	; (8001f78 <Menu_Init+0x268>)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating sensor menu
	items_menu_3[0].up = 0;
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <Menu_Init+0x270>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
	items_menu_3[0].down = &items_menu_3[1];
 8001f2e:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <Menu_Init+0x270>)
 8001f30:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <Menu_Init+0x29c>)
 8001f32:	605a      	str	r2, [r3, #4]
	items_menu_3[0].child = 0;
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <Menu_Init+0x270>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
	items_menu_3[0].parent = &items[2];
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <Menu_Init+0x270>)
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <Menu_Init+0x264>)
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	e036      	b.n	8001fb0 <Menu_Init+0x2a0>
 8001f42:	bf00      	nop
 8001f44:	08001531 	.word	0x08001531
 8001f48:	08001629 	.word	0x08001629
 8001f4c:	08001995 	.word	0x08001995
 8001f50:	08001859 	.word	0x08001859
 8001f54:	080019e9 	.word	0x080019e9
 8001f58:	08001aa9 	.word	0x08001aa9
 8001f5c:	08001b69 	.word	0x08001b69
 8001f60:	08001c29 	.word	0x08001c29
 8001f64:	20000740 	.word	0x20000740
 8001f68:	20000764 	.word	0x20000764
 8001f6c:	2000068c 	.word	0x2000068c
 8001f70:	0800584c 	.word	0x0800584c
 8001f74:	20000788 	.word	0x20000788
 8001f78:	20000620 	.word	0x20000620
 8001f7c:	08005858 	.word	0x08005858
 8001f80:	200006f8 	.word	0x200006f8
 8001f84:	08005864 	.word	0x08005864
 8001f88:	200006b0 	.word	0x200006b0
 8001f8c:	08005874 	.word	0x08005874
 8001f90:	200006d4 	.word	0x200006d4
 8001f94:	0800587c 	.word	0x0800587c
 8001f98:	08005884 	.word	0x08005884
 8001f9c:	20000644 	.word	0x20000644
 8001fa0:	0800588c 	.word	0x0800588c
 8001fa4:	20000668 	.word	0x20000668
 8001fa8:	08005894 	.word	0x08005894
 8001fac:	2000071c 	.word	0x2000071c
	items_menu_3[0].id = 1;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <Menu_Init+0x300>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	741a      	strb	r2, [r3, #16]
	items_menu_3[0].name = "Measure T & H";						// Name of item
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <Menu_Init+0x300>)
 8001fb8:	4a16      	ldr	r2, [pc, #88]	; (8002014 <Menu_Init+0x304>)
 8001fba:	615a      	str	r2, [r3, #20]
	items_menu_3[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8001fbc:	4a14      	ldr	r2, [pc, #80]	; (8002010 <Menu_Init+0x300>)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	6193      	str	r3, [r2, #24]
	items_menu_3[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8001fc2:	4a13      	ldr	r2, [pc, #76]	; (8002010 <Menu_Init+0x300>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	61d3      	str	r3, [r2, #28]
	items_menu_3[0].makeAction = p_do_it_function_menu_3;
 8001fc8:	4a11      	ldr	r2, [pc, #68]	; (8002010 <Menu_Init+0x300>)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6213      	str	r3, [r2, #32]

	items_menu_3[1].up = &items_menu_3[0];
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <Menu_Init+0x300>)
 8001fd0:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <Menu_Init+0x300>)
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_3[1].down = 0;
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <Menu_Init+0x300>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_3[1].child = 0;
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <Menu_Init+0x300>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_3[1].parent = &items[2];
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <Menu_Init+0x300>)
 8001fe2:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <Menu_Init+0x308>)
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_3[1].id = 2;
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <Menu_Init+0x300>)
 8001fe8:	2202      	movs	r2, #2
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_3[1].name = "EXIT";						// Name of item
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <Menu_Init+0x300>)
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	; (800201c <Menu_Init+0x30c>)
 8001ff2:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_3[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8001ff4:	4a06      	ldr	r2, [pc, #24]	; (8002010 <Menu_Init+0x300>)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_3[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <Menu_Init+0x300>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_3[1].makeAction = p_return_from_menu;
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <Menu_Init+0x300>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6453      	str	r3, [r2, #68]	; 0x44

}
 8002006:	bf00      	nop
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	200006f8 	.word	0x200006f8
 8002014:	0800589c 	.word	0x0800589c
 8002018:	20000788 	.word	0x20000788
 800201c:	08005884 	.word	0x08005884

08002020 <up>:
// ----------------------------------------------------------------------------------------
void up(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	if (currentItem->up)
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <up+0x30>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00d      	beq.n	800204a <up+0x2a>
	{
	    currentItem = currentItem->up;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <up+0x30>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a06      	ldr	r2, [pc, #24]	; (8002050 <up+0x30>)
 8002036:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_up )
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <up+0x30>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <up+0x2a>
	    {
	        currentItem->updateScreen_up();
 8002042:	4b03      	ldr	r3, [pc, #12]	; (8002050 <up+0x30>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4798      	blx	r3
	    }
	}
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000014 	.word	0x20000014

08002054 <down>:
// ----------------------------------------------------------------------------------------
void down(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	if (currentItem->down)
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <down+0x30>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00d      	beq.n	800207e <down+0x2a>
	{
	    currentItem = currentItem->down;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <down+0x30>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a06      	ldr	r2, [pc, #24]	; (8002084 <down+0x30>)
 800206a:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_down )
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <down+0x30>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <down+0x2a>
	    {
	        currentItem->updateScreen_down();
 8002076:	4b03      	ldr	r3, [pc, #12]	; (8002084 <down+0x30>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	4798      	blx	r3
	    }
	}
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000014 	.word	0x20000014

08002088 <enter>:
// ----------------------------------------------------------------------------------------
void enter(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	bool status = true;
 800208e:	2301      	movs	r3, #1
 8002090:	71fb      	strb	r3, [r7, #7]
	// Якщо є функція "makeAction" тоді виконати її
	if (currentItem->makeAction)
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <enter+0x48>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <enter+0x20>
	{
		currentItem->makeAction();
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <enter+0x48>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4798      	blx	r3
		status = false;
 80020a4:	2300      	movs	r3, #0
 80020a6:	71fb      	strb	r3, [r7, #7]
	}
	// Якщо є перехід на  "child" і "makeAction" не була виконана, тоді виконати перехід
	if((currentItem->child) && (status == true))
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <enter+0x48>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d009      	beq.n	80020c6 <enter+0x3e>
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <enter+0x3e>
	{
		currentItem = currentItem->child;
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <enter+0x48>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <enter+0x48>)
 80020c0:	6013      	str	r3, [r2, #0]
		action();
 80020c2:	f7ff fbc9 	bl	8001858 <action>
	}
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000014 	.word	0x20000014

080020d4 <menu>:
// ----------------------------------------------------------------------------------------
void menu(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	Menu_Init();									// Init all structures
 80020d8:	f7ff fe1a 	bl	8001d10 <Menu_Init>

	print_menu_init();								// Print start menu and scrolingbar
 80020dc:	f7ff fb26 	bl	800172c <print_menu_init>

	HAL_Delay(10);
 80020e0:	200a      	movs	r0, #10
 80020e2:	f000 f8ab 	bl	800223c <HAL_Delay>

	while(1)
	{
		if(button_processed_status == 1)			// If buttons was pressed
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <menu+0x50>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d1fb      	bne.n	80020e6 <menu+0x12>
		{

			button_processed_status = 1;
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <menu+0x50>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
			switch (button_status)
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <menu+0x54>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d00c      	beq.n	8002116 <menu+0x42>
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	dc0d      	bgt.n	800211c <menu+0x48>
 8002100:	2b01      	cmp	r3, #1
 8002102:	d002      	beq.n	800210a <menu+0x36>
 8002104:	2b02      	cmp	r3, #2
 8002106:	d003      	beq.n	8002110 <menu+0x3c>
 8002108:	e008      	b.n	800211c <menu+0x48>
			{
				case BOTTON_UP:
					up();
 800210a:	f7ff ff89 	bl	8002020 <up>
					break;
 800210e:	e005      	b.n	800211c <menu+0x48>
				case BUTTON_ENTER:
					enter();
 8002110:	f7ff ffba 	bl	8002088 <enter>
					break;
 8002114:	e002      	b.n	800211c <menu+0x48>
				case BUTTON_DOWN:
					down();
 8002116:	f7ff ff9d 	bl	8002054 <down>
					break;
 800211a:	bf00      	nop
			}
			button_status = BOTTON_DOESENT_PRESS;
 800211c:	4b02      	ldr	r3, [pc, #8]	; (8002128 <menu+0x54>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
		if(button_processed_status == 1)			// If buttons was pressed
 8002122:	e7e0      	b.n	80020e6 <menu+0x12>
 8002124:	2000000c 	.word	0x2000000c
 8002128:	200004a1 	.word	0x200004a1

0800212c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800212c:	480c      	ldr	r0, [pc, #48]	; (8002160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800212e:	490d      	ldr	r1, [pc, #52]	; (8002164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002130:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002134:	e002      	b.n	800213c <LoopCopyDataInit>

08002136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213a:	3304      	adds	r3, #4

0800213c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800213c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002140:	d3f9      	bcc.n	8002136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002144:	4c0a      	ldr	r4, [pc, #40]	; (8002170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002148:	e001      	b.n	800214e <LoopFillZerobss>

0800214a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800214c:	3204      	adds	r2, #4

0800214e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002150:	d3fb      	bcc.n	800214a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002152:	f7ff f8f1 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002156:	f003 faa5 	bl	80056a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800215a:	f7fe fbb7 	bl	80008cc <main>
  bx lr
 800215e:	4770      	bx	lr
  ldr r0, =_sdata
 8002160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002164:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002168:	08006070 	.word	0x08006070
  ldr r2, =_sbss
 800216c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8002170:	200007b0 	.word	0x200007b0

08002174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002174:	e7fe      	b.n	8002174 <ADC1_2_IRQHandler>
	...

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_Init+0x28>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <HAL_Init+0x28>)
 8002182:	f043 0310 	orr.w	r3, r3, #16
 8002186:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002188:	2003      	movs	r0, #3
 800218a:	f000 f947 	bl	800241c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218e:	2000      	movs	r0, #0
 8002190:	f000 f808 	bl	80021a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002194:	f7fe fe38 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40022000 	.word	0x40022000

080021a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_InitTick+0x54>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_InitTick+0x58>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f95f 	bl	8002486 <HAL_SYSTICK_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00e      	b.n	80021f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d80a      	bhi.n	80021ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021e0:	f000 f927 	bl	8002432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e4:	4a06      	ldr	r2, [pc, #24]	; (8002200 <HAL_InitTick+0x5c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000010 	.word	0x20000010
 80021fc:	20000030 	.word	0x20000030
 8002200:	2000002c 	.word	0x2000002c

08002204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_IncTick+0x1c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_IncTick+0x20>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	4a03      	ldr	r2, [pc, #12]	; (8002224 <HAL_IncTick+0x20>)
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	20000030 	.word	0x20000030
 8002224:	200007ac 	.word	0x200007ac

08002228 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b02      	ldr	r3, [pc, #8]	; (8002238 <HAL_GetTick+0x10>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	200007ac 	.word	0x200007ac

0800223c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff fff0 	bl	8002228 <HAL_GetTick>
 8002248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002254:	d005      	beq.n	8002262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_Delay+0x44>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002262:	bf00      	nop
 8002264:	f7ff ffe0 	bl	8002228 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f7      	bhi.n	8002264 <HAL_Delay+0x28>
  {
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000030 	.word	0x20000030

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4906      	ldr	r1, [pc, #24]	; (800231c <__NVIC_EnableIRQ+0x34>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100

08002320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db0a      	blt.n	800234a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	490c      	ldr	r1, [pc, #48]	; (800236c <__NVIC_SetPriority+0x4c>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	440b      	add	r3, r1
 8002344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002348:	e00a      	b.n	8002360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4908      	ldr	r1, [pc, #32]	; (8002370 <__NVIC_SetPriority+0x50>)
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	3b04      	subs	r3, #4
 8002358:	0112      	lsls	r2, r2, #4
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	440b      	add	r3, r1
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f1c3 0307 	rsb	r3, r3, #7
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf28      	it	cs
 8002392:	2304      	movcs	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3304      	adds	r3, #4
 800239a:	2b06      	cmp	r3, #6
 800239c:	d902      	bls.n	80023a4 <NVIC_EncodePriority+0x30>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3b03      	subs	r3, #3
 80023a2:	e000      	b.n	80023a6 <NVIC_EncodePriority+0x32>
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	4313      	orrs	r3, r2
         );
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	; 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e8:	d301      	bcc.n	80023ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00f      	b.n	800240e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <SysTick_Config+0x40>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f6:	210f      	movs	r1, #15
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023fc:	f7ff ff90 	bl	8002320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <SysTick_Config+0x40>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SysTick_Config+0x40>)
 8002408:	2207      	movs	r2, #7
 800240a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	e000e010 	.word	0xe000e010

0800241c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff2d 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002444:	f7ff ff42 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	f7ff ff90 	bl	8002374 <NVIC_EncodePriority>
 8002454:	4602      	mov	r2, r0
 8002456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff5f 	bl	8002320 <__NVIC_SetPriority>
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff35 	bl	80022e8 <__NVIC_EnableIRQ>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffa2 	bl	80023d8 <SysTick_Config>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d008      	beq.n	80024c6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2204      	movs	r2, #4
 80024b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e020      	b.n	8002508 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 020e 	bic.w	r2, r2, #14
 80024d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0201 	bic.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ee:	2101      	movs	r1, #1
 80024f0:	fa01 f202 	lsl.w	r2, r1, r2
 80024f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
	...

08002514 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002526:	2b02      	cmp	r3, #2
 8002528:	d005      	beq.n	8002536 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2204      	movs	r2, #4
 800252e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e051      	b.n	80025da <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 020e 	bic.w	r2, r2, #14
 8002544:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <HAL_DMA_Abort_IT+0xd0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d029      	beq.n	80025b4 <HAL_DMA_Abort_IT+0xa0>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a20      	ldr	r2, [pc, #128]	; (80025e8 <HAL_DMA_Abort_IT+0xd4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d022      	beq.n	80025b0 <HAL_DMA_Abort_IT+0x9c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1f      	ldr	r2, [pc, #124]	; (80025ec <HAL_DMA_Abort_IT+0xd8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d01a      	beq.n	80025aa <HAL_DMA_Abort_IT+0x96>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_DMA_Abort_IT+0xdc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d012      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x90>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_DMA_Abort_IT+0xe0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00a      	beq.n	800259e <HAL_DMA_Abort_IT+0x8a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <HAL_DMA_Abort_IT+0xe4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d102      	bne.n	8002598 <HAL_DMA_Abort_IT+0x84>
 8002592:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002596:	e00e      	b.n	80025b6 <HAL_DMA_Abort_IT+0xa2>
 8002598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800259c:	e00b      	b.n	80025b6 <HAL_DMA_Abort_IT+0xa2>
 800259e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025a2:	e008      	b.n	80025b6 <HAL_DMA_Abort_IT+0xa2>
 80025a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a8:	e005      	b.n	80025b6 <HAL_DMA_Abort_IT+0xa2>
 80025aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ae:	e002      	b.n	80025b6 <HAL_DMA_Abort_IT+0xa2>
 80025b0:	2310      	movs	r3, #16
 80025b2:	e000      	b.n	80025b6 <HAL_DMA_Abort_IT+0xa2>
 80025b4:	2301      	movs	r3, #1
 80025b6:	4a11      	ldr	r2, [pc, #68]	; (80025fc <HAL_DMA_Abort_IT+0xe8>)
 80025b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	4798      	blx	r3
    } 
  }
  return status;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40020008 	.word	0x40020008
 80025e8:	4002001c 	.word	0x4002001c
 80025ec:	40020030 	.word	0x40020030
 80025f0:	40020044 	.word	0x40020044
 80025f4:	40020058 	.word	0x40020058
 80025f8:	4002006c 	.word	0x4002006c
 80025fc:	40020000 	.word	0x40020000

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b08b      	sub	sp, #44	; 0x2c
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800260e:	2300      	movs	r3, #0
 8002610:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002612:	e169      	b.n	80028e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002614:	2201      	movs	r2, #1
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	429a      	cmp	r2, r3
 800262e:	f040 8158 	bne.w	80028e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a9a      	ldr	r2, [pc, #616]	; (80028a0 <HAL_GPIO_Init+0x2a0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d05e      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 800263c:	4a98      	ldr	r2, [pc, #608]	; (80028a0 <HAL_GPIO_Init+0x2a0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d875      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 8002642:	4a98      	ldr	r2, [pc, #608]	; (80028a4 <HAL_GPIO_Init+0x2a4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d058      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 8002648:	4a96      	ldr	r2, [pc, #600]	; (80028a4 <HAL_GPIO_Init+0x2a4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d86f      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 800264e:	4a96      	ldr	r2, [pc, #600]	; (80028a8 <HAL_GPIO_Init+0x2a8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d052      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 8002654:	4a94      	ldr	r2, [pc, #592]	; (80028a8 <HAL_GPIO_Init+0x2a8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d869      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 800265a:	4a94      	ldr	r2, [pc, #592]	; (80028ac <HAL_GPIO_Init+0x2ac>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d04c      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 8002660:	4a92      	ldr	r2, [pc, #584]	; (80028ac <HAL_GPIO_Init+0x2ac>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d863      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 8002666:	4a92      	ldr	r2, [pc, #584]	; (80028b0 <HAL_GPIO_Init+0x2b0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d046      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 800266c:	4a90      	ldr	r2, [pc, #576]	; (80028b0 <HAL_GPIO_Init+0x2b0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d85d      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 8002672:	2b12      	cmp	r3, #18
 8002674:	d82a      	bhi.n	80026cc <HAL_GPIO_Init+0xcc>
 8002676:	2b12      	cmp	r3, #18
 8002678:	d859      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 800267a:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <HAL_GPIO_Init+0x80>)
 800267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002680:	080026fb 	.word	0x080026fb
 8002684:	080026d5 	.word	0x080026d5
 8002688:	080026e7 	.word	0x080026e7
 800268c:	08002729 	.word	0x08002729
 8002690:	0800272f 	.word	0x0800272f
 8002694:	0800272f 	.word	0x0800272f
 8002698:	0800272f 	.word	0x0800272f
 800269c:	0800272f 	.word	0x0800272f
 80026a0:	0800272f 	.word	0x0800272f
 80026a4:	0800272f 	.word	0x0800272f
 80026a8:	0800272f 	.word	0x0800272f
 80026ac:	0800272f 	.word	0x0800272f
 80026b0:	0800272f 	.word	0x0800272f
 80026b4:	0800272f 	.word	0x0800272f
 80026b8:	0800272f 	.word	0x0800272f
 80026bc:	0800272f 	.word	0x0800272f
 80026c0:	0800272f 	.word	0x0800272f
 80026c4:	080026dd 	.word	0x080026dd
 80026c8:	080026f1 	.word	0x080026f1
 80026cc:	4a79      	ldr	r2, [pc, #484]	; (80028b4 <HAL_GPIO_Init+0x2b4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026d2:	e02c      	b.n	800272e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	623b      	str	r3, [r7, #32]
          break;
 80026da:	e029      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	3304      	adds	r3, #4
 80026e2:	623b      	str	r3, [r7, #32]
          break;
 80026e4:	e024      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	3308      	adds	r3, #8
 80026ec:	623b      	str	r3, [r7, #32]
          break;
 80026ee:	e01f      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	330c      	adds	r3, #12
 80026f6:	623b      	str	r3, [r7, #32]
          break;
 80026f8:	e01a      	b.n	8002730 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002702:	2304      	movs	r3, #4
 8002704:	623b      	str	r3, [r7, #32]
          break;
 8002706:	e013      	b.n	8002730 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d105      	bne.n	800271c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002710:	2308      	movs	r3, #8
 8002712:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	611a      	str	r2, [r3, #16]
          break;
 800271a:	e009      	b.n	8002730 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800271c:	2308      	movs	r3, #8
 800271e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	615a      	str	r2, [r3, #20]
          break;
 8002726:	e003      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
          break;
 800272c:	e000      	b.n	8002730 <HAL_GPIO_Init+0x130>
          break;
 800272e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2bff      	cmp	r3, #255	; 0xff
 8002734:	d801      	bhi.n	800273a <HAL_GPIO_Init+0x13a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	e001      	b.n	800273e <HAL_GPIO_Init+0x13e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3304      	adds	r3, #4
 800273e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	d802      	bhi.n	800274c <HAL_GPIO_Init+0x14c>
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	e002      	b.n	8002752 <HAL_GPIO_Init+0x152>
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	3b08      	subs	r3, #8
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	210f      	movs	r1, #15
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	401a      	ands	r2, r3
 8002764:	6a39      	ldr	r1, [r7, #32]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	431a      	orrs	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80b1 	beq.w	80028e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002780:	4b4d      	ldr	r3, [pc, #308]	; (80028b8 <HAL_GPIO_Init+0x2b8>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <HAL_GPIO_Init+0x2b8>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_GPIO_Init+0x2b8>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002798:	4a48      	ldr	r2, [pc, #288]	; (80028bc <HAL_GPIO_Init+0x2bc>)
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a40      	ldr	r2, [pc, #256]	; (80028c0 <HAL_GPIO_Init+0x2c0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_GPIO_Init+0x1ec>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a3f      	ldr	r2, [pc, #252]	; (80028c4 <HAL_GPIO_Init+0x2c4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00d      	beq.n	80027e8 <HAL_GPIO_Init+0x1e8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3e      	ldr	r2, [pc, #248]	; (80028c8 <HAL_GPIO_Init+0x2c8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d007      	beq.n	80027e4 <HAL_GPIO_Init+0x1e4>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3d      	ldr	r2, [pc, #244]	; (80028cc <HAL_GPIO_Init+0x2cc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_GPIO_Init+0x1e0>
 80027dc:	2303      	movs	r3, #3
 80027de:	e006      	b.n	80027ee <HAL_GPIO_Init+0x1ee>
 80027e0:	2304      	movs	r3, #4
 80027e2:	e004      	b.n	80027ee <HAL_GPIO_Init+0x1ee>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e002      	b.n	80027ee <HAL_GPIO_Init+0x1ee>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_GPIO_Init+0x1ee>
 80027ec:	2300      	movs	r3, #0
 80027ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f0:	f002 0203 	and.w	r2, r2, #3
 80027f4:	0092      	lsls	r2, r2, #2
 80027f6:	4093      	lsls	r3, r2
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027fe:	492f      	ldr	r1, [pc, #188]	; (80028bc <HAL_GPIO_Init+0x2bc>)
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d006      	beq.n	8002826 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002818:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	492c      	ldr	r1, [pc, #176]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	600b      	str	r3, [r1, #0]
 8002824:	e006      	b.n	8002834 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002826:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	43db      	mvns	r3, r3
 800282e:	4928      	ldr	r1, [pc, #160]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002830:	4013      	ands	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d006      	beq.n	800284e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002840:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4922      	ldr	r1, [pc, #136]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
 800284c:	e006      	b.n	800285c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	43db      	mvns	r3, r3
 8002856:	491e      	ldr	r1, [pc, #120]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002858:	4013      	ands	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	4918      	ldr	r1, [pc, #96]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	4313      	orrs	r3, r2
 8002872:	608b      	str	r3, [r1, #8]
 8002874:	e006      	b.n	8002884 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	43db      	mvns	r3, r3
 800287e:	4914      	ldr	r1, [pc, #80]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002880:	4013      	ands	r3, r2
 8002882:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d021      	beq.n	80028d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	490e      	ldr	r1, [pc, #56]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	60cb      	str	r3, [r1, #12]
 800289c:	e021      	b.n	80028e2 <HAL_GPIO_Init+0x2e2>
 800289e:	bf00      	nop
 80028a0:	10320000 	.word	0x10320000
 80028a4:	10310000 	.word	0x10310000
 80028a8:	10220000 	.word	0x10220000
 80028ac:	10210000 	.word	0x10210000
 80028b0:	10120000 	.word	0x10120000
 80028b4:	10110000 	.word	0x10110000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010000 	.word	0x40010000
 80028c0:	40010800 	.word	0x40010800
 80028c4:	40010c00 	.word	0x40010c00
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40011400 	.word	0x40011400
 80028d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_GPIO_Init+0x304>)
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	43db      	mvns	r3, r3
 80028dc:	4909      	ldr	r1, [pc, #36]	; (8002904 <HAL_GPIO_Init+0x304>)
 80028de:	4013      	ands	r3, r2
 80028e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	3301      	adds	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f47f ae8e 	bne.w	8002614 <HAL_GPIO_Init+0x14>
  }
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	372c      	adds	r7, #44	; 0x2c
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e001      	b.n	800292a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	807b      	strh	r3, [r7, #2]
 8002942:	4613      	mov	r3, r2
 8002944:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002946:	787b      	ldrb	r3, [r7, #1]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800294c:	887a      	ldrh	r2, [r7, #2]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002952:	e003      	b.n	800295c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	041a      	lsls	r2, r3, #16
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	611a      	str	r2, [r3, #16]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	460b      	mov	r3, r1
 8002970:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002978:	887a      	ldrh	r2, [r7, #2]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4013      	ands	r3, r2
 800297e:	041a      	lsls	r2, r3, #16
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	43d9      	mvns	r1, r3
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	400b      	ands	r3, r1
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	611a      	str	r2, [r3, #16]
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d006      	beq.n	80029bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe f9d6 	bl	8000d68 <HAL_GPIO_EXTI_Callback>
  }
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40010400 	.word	0x40010400

080029c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e12b      	b.n	8002c32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fa3c 	bl	8000e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2224      	movs	r2, #36	; 0x24
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a2c:	f000 fffa 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8002a30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4a81      	ldr	r2, [pc, #516]	; (8002c3c <HAL_I2C_Init+0x274>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d807      	bhi.n	8002a4c <HAL_I2C_Init+0x84>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a80      	ldr	r2, [pc, #512]	; (8002c40 <HAL_I2C_Init+0x278>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	bf94      	ite	ls
 8002a44:	2301      	movls	r3, #1
 8002a46:	2300      	movhi	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	e006      	b.n	8002a5a <HAL_I2C_Init+0x92>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4a7d      	ldr	r2, [pc, #500]	; (8002c44 <HAL_I2C_Init+0x27c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	bf94      	ite	ls
 8002a54:	2301      	movls	r3, #1
 8002a56:	2300      	movhi	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0e7      	b.n	8002c32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a78      	ldr	r2, [pc, #480]	; (8002c48 <HAL_I2C_Init+0x280>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0c9b      	lsrs	r3, r3, #18
 8002a6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a6a      	ldr	r2, [pc, #424]	; (8002c3c <HAL_I2C_Init+0x274>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d802      	bhi.n	8002a9c <HAL_I2C_Init+0xd4>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	e009      	b.n	8002ab0 <HAL_I2C_Init+0xe8>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	4a69      	ldr	r2, [pc, #420]	; (8002c4c <HAL_I2C_Init+0x284>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	099b      	lsrs	r3, r3, #6
 8002aae:	3301      	adds	r3, #1
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ac2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	495c      	ldr	r1, [pc, #368]	; (8002c3c <HAL_I2C_Init+0x274>)
 8002acc:	428b      	cmp	r3, r1
 8002ace:	d819      	bhi.n	8002b04 <HAL_I2C_Init+0x13c>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e59      	subs	r1, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ade:	1c59      	adds	r1, r3, #1
 8002ae0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ae4:	400b      	ands	r3, r1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_I2C_Init+0x138>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1e59      	subs	r1, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af8:	3301      	adds	r3, #1
 8002afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afe:	e051      	b.n	8002ba4 <HAL_I2C_Init+0x1dc>
 8002b00:	2304      	movs	r3, #4
 8002b02:	e04f      	b.n	8002ba4 <HAL_I2C_Init+0x1dc>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d111      	bne.n	8002b30 <HAL_I2C_Init+0x168>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1e58      	subs	r0, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	440b      	add	r3, r1
 8002b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e012      	b.n	8002b56 <HAL_I2C_Init+0x18e>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1e58      	subs	r0, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	0099      	lsls	r1, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b46:	3301      	adds	r3, #1
 8002b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_Init+0x196>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e022      	b.n	8002ba4 <HAL_I2C_Init+0x1dc>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10e      	bne.n	8002b84 <HAL_I2C_Init+0x1bc>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1e58      	subs	r0, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	440b      	add	r3, r1
 8002b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b82:	e00f      	b.n	8002ba4 <HAL_I2C_Init+0x1dc>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1e58      	subs	r0, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	0099      	lsls	r1, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	6809      	ldr	r1, [r1, #0]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6911      	ldr	r1, [r2, #16]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	000186a0 	.word	0x000186a0
 8002c40:	001e847f 	.word	0x001e847f
 8002c44:	003d08ff 	.word	0x003d08ff
 8002c48:	431bde83 	.word	0x431bde83
 8002c4c:	10624dd3 	.word	0x10624dd3

08002c50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	460b      	mov	r3, r1
 8002c64:	813b      	strh	r3, [r7, #8]
 8002c66:	4613      	mov	r3, r2
 8002c68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c6a:	f7ff fadd 	bl	8002228 <HAL_GetTick>
 8002c6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	f040 80d9 	bne.w	8002e30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2319      	movs	r3, #25
 8002c84:	2201      	movs	r2, #1
 8002c86:	496d      	ldr	r1, [pc, #436]	; (8002e3c <HAL_I2C_Mem_Write+0x1ec>)
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f971 	bl	8002f70 <I2C_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
 8002c96:	e0cc      	b.n	8002e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_I2C_Mem_Write+0x56>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e0c5      	b.n	8002e32 <HAL_I2C_Mem_Write+0x1e2>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d007      	beq.n	8002ccc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2221      	movs	r2, #33	; 0x21
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4a4d      	ldr	r2, [pc, #308]	; (8002e40 <HAL_I2C_Mem_Write+0x1f0>)
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d0e:	88f8      	ldrh	r0, [r7, #6]
 8002d10:	893a      	ldrh	r2, [r7, #8]
 8002d12:	8979      	ldrh	r1, [r7, #10]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f890 	bl	8002e44 <I2C_RequestMemoryWrite>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d052      	beq.n	8002dd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e081      	b.n	8002e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f9f2 	bl	800311c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d107      	bne.n	8002d56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e06b      	b.n	8002e32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d11b      	bne.n	8002dd0 <HAL_I2C_Mem_Write+0x180>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d017      	beq.n	8002dd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1aa      	bne.n	8002d2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f9de 	bl	800319e <I2C_WaitOnBTFFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00d      	beq.n	8002e04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d107      	bne.n	8002e00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e016      	b.n	8002e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	00100002 	.word	0x00100002
 8002e40:	ffff0000 	.word	0xffff0000

08002e44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	461a      	mov	r2, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	817b      	strh	r3, [r7, #10]
 8002e56:	460b      	mov	r3, r1
 8002e58:	813b      	strh	r3, [r7, #8]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f878 	bl	8002f70 <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e94:	d103      	bne.n	8002e9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e05f      	b.n	8002f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ea2:	897b      	ldrh	r3, [r7, #10]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	492d      	ldr	r1, [pc, #180]	; (8002f6c <I2C_RequestMemoryWrite+0x128>)
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f8b0 	bl	800301e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e04c      	b.n	8002f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee0:	6a39      	ldr	r1, [r7, #32]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f91a 	bl	800311c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d107      	bne.n	8002f06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e02b      	b.n	8002f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f10:	893b      	ldrh	r3, [r7, #8]
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	611a      	str	r2, [r3, #16]
 8002f1a:	e021      	b.n	8002f60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f1c:	893b      	ldrh	r3, [r7, #8]
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	6a39      	ldr	r1, [r7, #32]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f8f4 	bl	800311c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00d      	beq.n	8002f56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d107      	bne.n	8002f52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e005      	b.n	8002f62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f56:	893b      	ldrh	r3, [r7, #8]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	00010002 	.word	0x00010002

08002f70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f80:	e025      	b.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f88:	d021      	beq.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8a:	f7ff f94d 	bl	8002228 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d302      	bcc.n	8002fa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d116      	bne.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e023      	b.n	8003016 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10d      	bne.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	e00c      	b.n	800300e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf0c      	ite	eq
 8003006:	2301      	moveq	r3, #1
 8003008:	2300      	movne	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	429a      	cmp	r2, r3
 8003012:	d0b6      	beq.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800302c:	e051      	b.n	80030d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303c:	d123      	bne.n	8003086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003056:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f043 0204 	orr.w	r2, r3, #4
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e046      	b.n	8003114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800308c:	d021      	beq.n	80030d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308e:	f7ff f8cb 	bl	8002228 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d116      	bne.n	80030d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f043 0220 	orr.w	r2, r3, #32
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e020      	b.n	8003114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	0c1b      	lsrs	r3, r3, #16
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d10c      	bne.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	43da      	mvns	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4013      	ands	r3, r2
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bf14      	ite	ne
 80030ee:	2301      	movne	r3, #1
 80030f0:	2300      	moveq	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	e00b      	b.n	800310e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	43da      	mvns	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4013      	ands	r3, r2
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d18d      	bne.n	800302e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003128:	e02d      	b.n	8003186 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f878 	bl	8003220 <I2C_IsAcknowledgeFailed>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e02d      	b.n	8003196 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003140:	d021      	beq.n	8003186 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7ff f871 	bl	8002228 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d116      	bne.n	8003186 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e007      	b.n	8003196 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	2b80      	cmp	r3, #128	; 0x80
 8003192:	d1ca      	bne.n	800312a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031aa:	e02d      	b.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f837 	bl	8003220 <I2C_IsAcknowledgeFailed>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e02d      	b.n	8003218 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031c2:	d021      	beq.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c4:	f7ff f830 	bl	8002228 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d302      	bcc.n	80031da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e007      	b.n	8003218 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b04      	cmp	r3, #4
 8003214:	d1ca      	bne.n	80031ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d11b      	bne.n	8003270 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003240:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f043 0204 	orr.w	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e26c      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 8087 	beq.w	80033aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800329c:	4b92      	ldr	r3, [pc, #584]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d00c      	beq.n	80032c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032a8:	4b8f      	ldr	r3, [pc, #572]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d112      	bne.n	80032da <HAL_RCC_OscConfig+0x5e>
 80032b4:	4b8c      	ldr	r3, [pc, #560]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d10b      	bne.n	80032da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c2:	4b89      	ldr	r3, [pc, #548]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d06c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x12c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d168      	bne.n	80033a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e246      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x76>
 80032e4:	4b80      	ldr	r3, [pc, #512]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a7f      	ldr	r2, [pc, #508]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	e02e      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x98>
 80032fa:	4b7b      	ldr	r3, [pc, #492]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a7a      	ldr	r2, [pc, #488]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4b78      	ldr	r3, [pc, #480]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a77      	ldr	r2, [pc, #476]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800330c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e01d      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0xbc>
 800331e:	4b72      	ldr	r3, [pc, #456]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a71      	ldr	r2, [pc, #452]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6e      	ldr	r2, [pc, #440]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 8003338:	4b6b      	ldr	r3, [pc, #428]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a6a      	ldr	r2, [pc, #424]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b68      	ldr	r3, [pc, #416]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a67      	ldr	r2, [pc, #412]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fe ff66 	bl	8002228 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe ff62 	bl	8002228 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e1fa      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b5d      	ldr	r3, [pc, #372]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xe4>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe ff52 	bl	8002228 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003388:	f7fe ff4e 	bl	8002228 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	; 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1e6      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x10c>
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033b6:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033c2:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d11c      	bne.n	8003408 <HAL_RCC_OscConfig+0x18c>
 80033ce:	4b46      	ldr	r3, [pc, #280]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x176>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1ba      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b3d      	ldr	r3, [pc, #244]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4939      	ldr	r1, [pc, #228]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	e03a      	b.n	800347e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	4b36      	ldr	r3, [pc, #216]	; (80034ec <HAL_RCC_OscConfig+0x270>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe ff07 	bl	8002228 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341e:	f7fe ff03 	bl	8002228 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e19b      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4927      	ldr	r1, [pc, #156]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003452:	4b26      	ldr	r3, [pc, #152]	; (80034ec <HAL_RCC_OscConfig+0x270>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fee6 	bl	8002228 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003460:	f7fe fee2 	bl	8002228 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e17a      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d03a      	beq.n	8003500 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d019      	beq.n	80034c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003492:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <HAL_RCC_OscConfig+0x274>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003498:	f7fe fec6 	bl	8002228 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a0:	f7fe fec2 	bl	8002228 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e15a      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034be:	2001      	movs	r0, #1
 80034c0:	f000 fad8 	bl	8003a74 <RCC_Delay>
 80034c4:	e01c      	b.n	8003500 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_RCC_OscConfig+0x274>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034cc:	f7fe feac 	bl	8002228 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d2:	e00f      	b.n	80034f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d4:	f7fe fea8 	bl	8002228 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d908      	bls.n	80034f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e140      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	42420000 	.word	0x42420000
 80034f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	4b9e      	ldr	r3, [pc, #632]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e9      	bne.n	80034d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a6 	beq.w	800365a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b97      	ldr	r3, [pc, #604]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	4b94      	ldr	r3, [pc, #592]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	4a93      	ldr	r2, [pc, #588]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003528:	61d3      	str	r3, [r2, #28]
 800352a:	4b91      	ldr	r3, [pc, #580]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353a:	4b8e      	ldr	r3, [pc, #568]	; (8003774 <HAL_RCC_OscConfig+0x4f8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d118      	bne.n	8003578 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003546:	4b8b      	ldr	r3, [pc, #556]	; (8003774 <HAL_RCC_OscConfig+0x4f8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a8a      	ldr	r2, [pc, #552]	; (8003774 <HAL_RCC_OscConfig+0x4f8>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003552:	f7fe fe69 	bl	8002228 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355a:	f7fe fe65 	bl	8002228 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b64      	cmp	r3, #100	; 0x64
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e0fd      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	4b81      	ldr	r3, [pc, #516]	; (8003774 <HAL_RCC_OscConfig+0x4f8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x312>
 8003580:	4b7b      	ldr	r3, [pc, #492]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4a7a      	ldr	r2, [pc, #488]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6213      	str	r3, [r2, #32]
 800358c:	e02d      	b.n	80035ea <HAL_RCC_OscConfig+0x36e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x334>
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a75      	ldr	r2, [pc, #468]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	6213      	str	r3, [r2, #32]
 80035a2:	4b73      	ldr	r3, [pc, #460]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4a72      	ldr	r2, [pc, #456]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035a8:	f023 0304 	bic.w	r3, r3, #4
 80035ac:	6213      	str	r3, [r2, #32]
 80035ae:	e01c      	b.n	80035ea <HAL_RCC_OscConfig+0x36e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b05      	cmp	r3, #5
 80035b6:	d10c      	bne.n	80035d2 <HAL_RCC_OscConfig+0x356>
 80035b8:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4a6c      	ldr	r2, [pc, #432]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035be:	f043 0304 	orr.w	r3, r3, #4
 80035c2:	6213      	str	r3, [r2, #32]
 80035c4:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4a69      	ldr	r2, [pc, #420]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6213      	str	r3, [r2, #32]
 80035d0:	e00b      	b.n	80035ea <HAL_RCC_OscConfig+0x36e>
 80035d2:	4b67      	ldr	r3, [pc, #412]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4a66      	ldr	r2, [pc, #408]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6213      	str	r3, [r2, #32]
 80035de:	4b64      	ldr	r3, [pc, #400]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	4a63      	ldr	r2, [pc, #396]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035e4:	f023 0304 	bic.w	r3, r3, #4
 80035e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d015      	beq.n	800361e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7fe fe19 	bl	8002228 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe fe15 	bl	8002228 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e0ab      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003610:	4b57      	ldr	r3, [pc, #348]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ee      	beq.n	80035fa <HAL_RCC_OscConfig+0x37e>
 800361c:	e014      	b.n	8003648 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe fe03 	bl	8002228 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	e00a      	b.n	800363c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fe fdff 	bl	8002228 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e095      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363c:	4b4c      	ldr	r3, [pc, #304]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ee      	bne.n	8003626 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d105      	bne.n	800365a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364e:	4b48      	ldr	r3, [pc, #288]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4a47      	ldr	r2, [pc, #284]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003658:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8081 	beq.w	8003766 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003664:	4b42      	ldr	r3, [pc, #264]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b08      	cmp	r3, #8
 800366e:	d061      	beq.n	8003734 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d146      	bne.n	8003706 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003678:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <HAL_RCC_OscConfig+0x4fc>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fe fdd3 	bl	8002228 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003686:	f7fe fdcf 	bl	8002228 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e067      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003698:	4b35      	ldr	r3, [pc, #212]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f0      	bne.n	8003686 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ac:	d108      	bne.n	80036c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036ae:	4b30      	ldr	r3, [pc, #192]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	492d      	ldr	r1, [pc, #180]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c0:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a19      	ldr	r1, [r3, #32]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	430b      	orrs	r3, r1
 80036d2:	4927      	ldr	r1, [pc, #156]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d8:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_OscConfig+0x4fc>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7fe fda3 	bl	8002228 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e6:	f7fe fd9f 	bl	8002228 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e037      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f8:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x46a>
 8003704:	e02f      	b.n	8003766 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <HAL_RCC_OscConfig+0x4fc>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe fd8c 	bl	8002228 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe fd88 	bl	8002228 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e020      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x498>
 8003732:	e018      	b.n	8003766 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e013      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	429a      	cmp	r2, r3
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d001      	beq.n	8003766 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000
 8003774:	40007000 	.word	0x40007000
 8003778:	42420060 	.word	0x42420060

0800377c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0d0      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b6a      	ldr	r3, [pc, #424]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d910      	bls.n	80037c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b67      	ldr	r3, [pc, #412]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 0207 	bic.w	r2, r3, #7
 80037a6:	4965      	ldr	r1, [pc, #404]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b63      	ldr	r3, [pc, #396]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0b8      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d8:	4b59      	ldr	r3, [pc, #356]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4a58      	ldr	r2, [pc, #352]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a52      	ldr	r2, [pc, #328]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b50      	ldr	r3, [pc, #320]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	494d      	ldr	r1, [pc, #308]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d040      	beq.n	800389c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	4b47      	ldr	r3, [pc, #284]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d115      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e07f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b41      	ldr	r3, [pc, #260]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e073      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e06b      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b39      	ldr	r3, [pc, #228]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4936      	ldr	r1, [pc, #216]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386c:	f7fe fcdc 	bl	8002228 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fe fcd8 	bl	8002228 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e053      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b27      	ldr	r3, [pc, #156]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d210      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 0207 	bic.w	r2, r3, #7
 80038b2:	4922      	ldr	r1, [pc, #136]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e032      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d8:	4b19      	ldr	r3, [pc, #100]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4916      	ldr	r1, [pc, #88]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	490e      	ldr	r1, [pc, #56]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800390a:	f000 f821 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 800390e:	4602      	mov	r2, r0
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	490a      	ldr	r1, [pc, #40]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	5ccb      	ldrb	r3, [r1, r3]
 800391e:	fa22 f303 	lsr.w	r3, r2, r3
 8003922:	4a09      	ldr	r2, [pc, #36]	; (8003948 <HAL_RCC_ClockConfig+0x1cc>)
 8003924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_ClockConfig+0x1d0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fc3a 	bl	80021a4 <HAL_InitTick>

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40022000 	.word	0x40022000
 8003940:	40021000 	.word	0x40021000
 8003944:	08006028 	.word	0x08006028
 8003948:	20000010 	.word	0x20000010
 800394c:	2000002c 	.word	0x2000002c

08003950 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003950:	b490      	push	{r4, r7}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003956:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003958:	1d3c      	adds	r4, r7, #4
 800395a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800395c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003960:	f240 2301 	movw	r3, #513	; 0x201
 8003964:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800397a:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xb4>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b04      	cmp	r3, #4
 8003988:	d002      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x40>
 800398a:	2b08      	cmp	r3, #8
 800398c:	d003      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0x46>
 800398e:	e02d      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003992:	623b      	str	r3, [r7, #32]
      break;
 8003994:	e02d      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	0c9b      	lsrs	r3, r3, #18
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039a2:	4413      	add	r3, r2
 80039a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	0c5b      	lsrs	r3, r3, #17
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039c2:	4413      	add	r3, r2
 80039c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ce:	fb02 f203 	mul.w	r2, r2, r3
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
 80039da:	e004      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039e0:	fb02 f303 	mul.w	r3, r2, r3
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	623b      	str	r3, [r7, #32]
      break;
 80039ea:	e002      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ee:	623b      	str	r3, [r7, #32]
      break;
 80039f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f2:	6a3b      	ldr	r3, [r7, #32]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3728      	adds	r7, #40	; 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc90      	pop	{r4, r7}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	080058ac 	.word	0x080058ac
 8003a04:	40021000 	.word	0x40021000
 8003a08:	007a1200 	.word	0x007a1200
 8003a0c:	003d0900 	.word	0x003d0900

08003a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b02      	ldr	r3, [pc, #8]	; (8003a20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	20000010 	.word	0x20000010

08003a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a28:	f7ff fff2 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4903      	ldr	r1, [pc, #12]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	08006038 	.word	0x08006038

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a50:	f7ff ffde 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	0adb      	lsrs	r3, r3, #11
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4903      	ldr	r1, [pc, #12]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	08006038 	.word	0x08006038

08003a74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <RCC_Delay+0x34>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <RCC_Delay+0x38>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	0a5b      	lsrs	r3, r3, #9
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a90:	bf00      	nop
  }
  while (Delay --);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	60fa      	str	r2, [r7, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f9      	bne.n	8003a90 <RCC_Delay+0x1c>
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	20000010 	.word	0x20000010
 8003aac:	10624dd3 	.word	0x10624dd3

08003ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e076      	b.n	8003bb0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d108      	bne.n	8003adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad2:	d009      	beq.n	8003ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	61da      	str	r2, [r3, #28]
 8003ada:	e005      	b.n	8003ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd f9f0 	bl	8000ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	ea42 0103 	orr.w	r1, r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	0c1a      	lsrs	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f002 0204 	and.w	r2, r2, #4
 8003b8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69da      	ldr	r2, [r3, #28]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_SPI_Transmit+0x22>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e126      	b.n	8003e28 <HAL_SPI_Transmit+0x270>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be2:	f7fe fb21 	bl	8002228 <HAL_GetTick>
 8003be6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d002      	beq.n	8003bfe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bfc:	e10b      	b.n	8003e16 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_SPI_Transmit+0x52>
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c0e:	e102      	b.n	8003e16 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2203      	movs	r2, #3
 8003c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	88fa      	ldrh	r2, [r7, #6]
 8003c28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	88fa      	ldrh	r2, [r7, #6]
 8003c2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c56:	d10f      	bne.n	8003c78 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	d007      	beq.n	8003c96 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9e:	d14b      	bne.n	8003d38 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_SPI_Transmit+0xf6>
 8003ca8:	8afb      	ldrh	r3, [r7, #22]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d13e      	bne.n	8003d2c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	881a      	ldrh	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	1c9a      	adds	r2, r3, #2
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cd2:	e02b      	b.n	8003d2c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d112      	bne.n	8003d08 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	881a      	ldrh	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	1c9a      	adds	r2, r3, #2
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d06:	e011      	b.n	8003d2c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d08:	f7fe fa8e 	bl	8002228 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d803      	bhi.n	8003d20 <HAL_SPI_Transmit+0x168>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d1e:	d102      	bne.n	8003d26 <HAL_SPI_Transmit+0x16e>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d102      	bne.n	8003d2c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d2a:	e074      	b.n	8003e16 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ce      	bne.n	8003cd4 <HAL_SPI_Transmit+0x11c>
 8003d36:	e04c      	b.n	8003dd2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_SPI_Transmit+0x18e>
 8003d40:	8afb      	ldrh	r3, [r7, #22]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d140      	bne.n	8003dc8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d6c:	e02c      	b.n	8003dc8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d113      	bne.n	8003da4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	7812      	ldrb	r2, [r2, #0]
 8003d88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003da2:	e011      	b.n	8003dc8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003da4:	f7fe fa40 	bl	8002228 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d803      	bhi.n	8003dbc <HAL_SPI_Transmit+0x204>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dba:	d102      	bne.n	8003dc2 <HAL_SPI_Transmit+0x20a>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dc6:	e026      	b.n	8003e16 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1cd      	bne.n	8003d6e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	6839      	ldr	r1, [r7, #0]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fbb8 	bl	800454c <SPI_EndRxTxTransaction>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e000      	b.n	8003e16 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e26:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4c:	d112      	bne.n	8003e74 <HAL_SPI_Receive+0x44>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10e      	bne.n	8003e74 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2204      	movs	r2, #4
 8003e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e5e:	88fa      	ldrh	r2, [r7, #6]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f8f1 	bl	8004052 <HAL_SPI_TransmitReceive>
 8003e70:	4603      	mov	r3, r0
 8003e72:	e0ea      	b.n	800404a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_SPI_Receive+0x52>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e0e3      	b.n	800404a <HAL_SPI_Receive+0x21a>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e8a:	f7fe f9cd 	bl	8002228 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d002      	beq.n	8003ea2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ea0:	e0ca      	b.n	8004038 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_SPI_Receive+0x7e>
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003eb2:	e0c1      	b.n	8004038 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	88fa      	ldrh	r2, [r7, #6]
 8003ed2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efa:	d10f      	bne.n	8003f1c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f1a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d007      	beq.n	8003f3a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f38:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d162      	bne.n	8004008 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f42:	e02e      	b.n	8003fa2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d115      	bne.n	8003f7e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f103 020c 	add.w	r2, r3, #12
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	7812      	ldrb	r2, [r2, #0]
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f7c:	e011      	b.n	8003fa2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f7e:	f7fe f953 	bl	8002228 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d803      	bhi.n	8003f96 <HAL_SPI_Receive+0x166>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f94:	d102      	bne.n	8003f9c <HAL_SPI_Receive+0x16c>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003fa0:	e04a      	b.n	8004038 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1cb      	bne.n	8003f44 <HAL_SPI_Receive+0x114>
 8003fac:	e031      	b.n	8004012 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d113      	bne.n	8003fe4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	b292      	uxth	r2, r2
 8003fc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	1c9a      	adds	r2, r3, #2
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fe2:	e011      	b.n	8004008 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fe4:	f7fe f920 	bl	8002228 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d803      	bhi.n	8003ffc <HAL_SPI_Receive+0x1cc>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ffa:	d102      	bne.n	8004002 <HAL_SPI_Receive+0x1d2>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004006:	e017      	b.n	8004038 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1cd      	bne.n	8003fae <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	6839      	ldr	r1, [r7, #0]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fa46 	bl	80044a8 <SPI_EndRxTransaction>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	75fb      	strb	r3, [r7, #23]
 8004034:	e000      	b.n	8004038 <HAL_SPI_Receive+0x208>
  }

error :
 8004036:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b08c      	sub	sp, #48	; 0x30
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004060:	2301      	movs	r3, #1
 8004062:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_SPI_TransmitReceive+0x26>
 8004074:	2302      	movs	r3, #2
 8004076:	e18a      	b.n	800438e <HAL_SPI_TransmitReceive+0x33c>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004080:	f7fe f8d2 	bl	8002228 <HAL_GetTick>
 8004084:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800408c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004096:	887b      	ldrh	r3, [r7, #2]
 8004098:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800409a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d00f      	beq.n	80040c2 <HAL_SPI_TransmitReceive+0x70>
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040a8:	d107      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x68>
 80040b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d003      	beq.n	80040c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80040ba:	2302      	movs	r3, #2
 80040bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040c0:	e15b      	b.n	800437a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_SPI_TransmitReceive+0x82>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_SPI_TransmitReceive+0x82>
 80040ce:	887b      	ldrh	r3, [r7, #2]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d103      	bne.n	80040dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040da:	e14e      	b.n	800437a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d003      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2205      	movs	r2, #5
 80040ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	887a      	ldrh	r2, [r7, #2]
 8004100:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	887a      	ldrh	r2, [r7, #2]
 8004106:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	887a      	ldrh	r2, [r7, #2]
 8004112:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	d007      	beq.n	8004144 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004142:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414c:	d178      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_SPI_TransmitReceive+0x10a>
 8004156:	8b7b      	ldrh	r3, [r7, #26]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d166      	bne.n	800422a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	881a      	ldrh	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	1c9a      	adds	r2, r3, #2
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004180:	e053      	b.n	800422a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d11b      	bne.n	80041c8 <HAL_SPI_TransmitReceive+0x176>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d016      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x176>
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d113      	bne.n	80041c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	881a      	ldrh	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	1c9a      	adds	r2, r3, #2
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d119      	bne.n	800420a <HAL_SPI_TransmitReceive+0x1b8>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d014      	beq.n	800420a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	b292      	uxth	r2, r2
 80041ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	1c9a      	adds	r2, r3, #2
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004206:	2301      	movs	r3, #1
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800420a:	f7fe f80d 	bl	8002228 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004216:	429a      	cmp	r2, r3
 8004218:	d807      	bhi.n	800422a <HAL_SPI_TransmitReceive+0x1d8>
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004220:	d003      	beq.n	800422a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004228:	e0a7      	b.n	800437a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1a6      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x130>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1a1      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x130>
 800423e:	e07c      	b.n	800433a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_SPI_TransmitReceive+0x1fc>
 8004248:	8b7b      	ldrh	r3, [r7, #26]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d16b      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	330c      	adds	r3, #12
 8004258:	7812      	ldrb	r2, [r2, #0]
 800425a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004274:	e057      	b.n	8004326 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b02      	cmp	r3, #2
 8004282:	d11c      	bne.n	80042be <HAL_SPI_TransmitReceive+0x26c>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d017      	beq.n	80042be <HAL_SPI_TransmitReceive+0x26c>
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d114      	bne.n	80042be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	7812      	ldrb	r2, [r2, #0]
 80042a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d119      	bne.n	8004300 <HAL_SPI_TransmitReceive+0x2ae>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d014      	beq.n	8004300 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042fc:	2301      	movs	r3, #1
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004300:	f7fd ff92 	bl	8002228 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800430c:	429a      	cmp	r2, r3
 800430e:	d803      	bhi.n	8004318 <HAL_SPI_TransmitReceive+0x2c6>
 8004310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004316:	d102      	bne.n	800431e <HAL_SPI_TransmitReceive+0x2cc>
 8004318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004324:	e029      	b.n	800437a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1a2      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x224>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d19d      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f904 	bl	800454c <SPI_EndRxTxTransaction>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d006      	beq.n	8004358 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004356:	e010      	b.n	800437a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10b      	bne.n	8004378 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	e000      	b.n	800437a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004378:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800438a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800438e:	4618      	mov	r0, r3
 8004390:	3730      	adds	r7, #48	; 0x30
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043a8:	f7fd ff3e 	bl	8002228 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043b8:	f7fd ff36 	bl	8002228 <HAL_GetTick>
 80043bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043be:	4b39      	ldr	r3, [pc, #228]	; (80044a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	015b      	lsls	r3, r3, #5
 80043c4:	0d1b      	lsrs	r3, r3, #20
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ce:	e054      	b.n	800447a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d6:	d050      	beq.n	800447a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043d8:	f7fd ff26 	bl	8002228 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d902      	bls.n	80043ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d13d      	bne.n	800446a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004406:	d111      	bne.n	800442c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004410:	d004      	beq.n	800441c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441a:	d107      	bne.n	800442c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004434:	d10f      	bne.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004454:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e017      	b.n	800449a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	3b01      	subs	r3, #1
 8004478:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d19b      	bne.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000010 	.word	0x20000010

080044a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044bc:	d111      	bne.n	80044e2 <SPI_EndRxTransaction+0x3a>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c6:	d004      	beq.n	80044d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d0:	d107      	bne.n	80044e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ea:	d117      	bne.n	800451c <SPI_EndRxTransaction+0x74>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f4:	d112      	bne.n	800451c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2101      	movs	r1, #1
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff ff49 	bl	8004398 <SPI_WaitFlagStateUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01a      	beq.n	8004542 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e013      	b.n	8004544 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2200      	movs	r2, #0
 8004524:	2180      	movs	r1, #128	; 0x80
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7ff ff36 	bl	8004398 <SPI_WaitFlagStateUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	f043 0220 	orr.w	r2, r3, #32
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e000      	b.n	8004544 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2200      	movs	r2, #0
 8004560:	2180      	movs	r1, #128	; 0x80
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7ff ff18 	bl	8004398 <SPI_WaitFlagStateUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d007      	beq.n	800457e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	f043 0220 	orr.w	r2, r3, #32
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e000      	b.n	8004580 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e041      	b.n	800461e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fc fce4 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f000 faa8 	bl	8004b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d001      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e03a      	b.n	80046b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <HAL_TIM_Base_Start_IT+0x98>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00e      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x58>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466a:	d009      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x58>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a14      	ldr	r2, [pc, #80]	; (80046c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x58>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d111      	bne.n	80046a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b06      	cmp	r3, #6
 8004690:	d010      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0201 	orr.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a2:	e007      	b.n	80046b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40000800 	.word	0x40000800

080046cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a1a      	ldr	r2, [r3, #32]
 80046ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10f      	bne.n	8004714 <HAL_TIM_Base_Stop_IT+0x48>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	f240 4344 	movw	r3, #1092	; 0x444
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d107      	bne.n	8004714 <HAL_TIM_Base_Stop_IT+0x48>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b02      	cmp	r3, #2
 800473c:	d122      	bne.n	8004784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b02      	cmp	r3, #2
 800474a:	d11b      	bne.n	8004784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0202 	mvn.w	r2, #2
 8004754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f9ba 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 8004770:	e005      	b.n	800477e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f9ad 	bl	8004ad2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f9bc 	bl	8004af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b04      	cmp	r3, #4
 8004790:	d122      	bne.n	80047d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d11b      	bne.n	80047d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0204 	mvn.w	r2, #4
 80047a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f990 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 80047c4:	e005      	b.n	80047d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f983 	bl	8004ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f992 	bl	8004af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d122      	bne.n	800482c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d11b      	bne.n	800482c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0208 	mvn.w	r2, #8
 80047fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2204      	movs	r2, #4
 8004802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f966 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 8004818:	e005      	b.n	8004826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f959 	bl	8004ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f968 	bl	8004af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b10      	cmp	r3, #16
 8004838:	d122      	bne.n	8004880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b10      	cmp	r3, #16
 8004846:	d11b      	bne.n	8004880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0210 	mvn.w	r2, #16
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2208      	movs	r2, #8
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f93c 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 800486c:	e005      	b.n	800487a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f92f 	bl	8004ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f93e 	bl	8004af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d10e      	bne.n	80048ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d107      	bne.n	80048ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0201 	mvn.w	r2, #1
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f90a 	bl	8004ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b6:	2b80      	cmp	r3, #128	; 0x80
 80048b8:	d10e      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b80      	cmp	r3, #128	; 0x80
 80048c6:	d107      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa81 	bl	8004dda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d10e      	bne.n	8004904 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	d107      	bne.n	8004904 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f902 	bl	8004b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b20      	cmp	r3, #32
 8004910:	d10e      	bne.n	8004930 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b20      	cmp	r3, #32
 800491e:	d107      	bne.n	8004930 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0220 	mvn.w	r2, #32
 8004928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa4c 	bl	8004dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_TIM_ConfigClockSource+0x18>
 800494c:	2302      	movs	r3, #2
 800494e:	e0b3      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x180>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800496e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004976:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004988:	d03e      	beq.n	8004a08 <HAL_TIM_ConfigClockSource+0xd0>
 800498a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498e:	f200 8087 	bhi.w	8004aa0 <HAL_TIM_ConfigClockSource+0x168>
 8004992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004996:	f000 8085 	beq.w	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 800499a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499e:	d87f      	bhi.n	8004aa0 <HAL_TIM_ConfigClockSource+0x168>
 80049a0:	2b70      	cmp	r3, #112	; 0x70
 80049a2:	d01a      	beq.n	80049da <HAL_TIM_ConfigClockSource+0xa2>
 80049a4:	2b70      	cmp	r3, #112	; 0x70
 80049a6:	d87b      	bhi.n	8004aa0 <HAL_TIM_ConfigClockSource+0x168>
 80049a8:	2b60      	cmp	r3, #96	; 0x60
 80049aa:	d050      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x116>
 80049ac:	2b60      	cmp	r3, #96	; 0x60
 80049ae:	d877      	bhi.n	8004aa0 <HAL_TIM_ConfigClockSource+0x168>
 80049b0:	2b50      	cmp	r3, #80	; 0x50
 80049b2:	d03c      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0xf6>
 80049b4:	2b50      	cmp	r3, #80	; 0x50
 80049b6:	d873      	bhi.n	8004aa0 <HAL_TIM_ConfigClockSource+0x168>
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	d058      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0x136>
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d86f      	bhi.n	8004aa0 <HAL_TIM_ConfigClockSource+0x168>
 80049c0:	2b30      	cmp	r3, #48	; 0x30
 80049c2:	d064      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0x156>
 80049c4:	2b30      	cmp	r3, #48	; 0x30
 80049c6:	d86b      	bhi.n	8004aa0 <HAL_TIM_ConfigClockSource+0x168>
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d060      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0x156>
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d867      	bhi.n	8004aa0 <HAL_TIM_ConfigClockSource+0x168>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d05c      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0x156>
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d05a      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049d8:	e062      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6899      	ldr	r1, [r3, #8]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f000 f970 	bl	8004cce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	609a      	str	r2, [r3, #8]
      break;
 8004a06:	e04e      	b.n	8004aa6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	6899      	ldr	r1, [r3, #8]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f000 f959 	bl	8004cce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a2a:	609a      	str	r2, [r3, #8]
      break;
 8004a2c:	e03b      	b.n	8004aa6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6859      	ldr	r1, [r3, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f000 f8d0 	bl	8004be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2150      	movs	r1, #80	; 0x50
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f927 	bl	8004c9a <TIM_ITRx_SetConfig>
      break;
 8004a4c:	e02b      	b.n	8004aa6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6859      	ldr	r1, [r3, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f000 f8ee 	bl	8004c3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2160      	movs	r1, #96	; 0x60
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 f917 	bl	8004c9a <TIM_ITRx_SetConfig>
      break;
 8004a6c:	e01b      	b.n	8004aa6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6859      	ldr	r1, [r3, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f000 f8b0 	bl	8004be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2140      	movs	r1, #64	; 0x40
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f907 	bl	8004c9a <TIM_ITRx_SetConfig>
      break;
 8004a8c:	e00b      	b.n	8004aa6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4619      	mov	r1, r3
 8004a98:	4610      	mov	r0, r2
 8004a9a:	f000 f8fe 	bl	8004c9a <TIM_ITRx_SetConfig>
        break;
 8004a9e:	e002      	b.n	8004aa6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004aa0:	bf00      	nop
 8004aa2:	e000      	b.n	8004aa6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004aa4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr

08004af6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr
	...

08004b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a29      	ldr	r2, [pc, #164]	; (8004bd4 <TIM_Base_SetConfig+0xb8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00b      	beq.n	8004b4c <TIM_Base_SetConfig+0x30>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3a:	d007      	beq.n	8004b4c <TIM_Base_SetConfig+0x30>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a26      	ldr	r2, [pc, #152]	; (8004bd8 <TIM_Base_SetConfig+0xbc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d003      	beq.n	8004b4c <TIM_Base_SetConfig+0x30>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <TIM_Base_SetConfig+0xc0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d108      	bne.n	8004b5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <TIM_Base_SetConfig+0xb8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00b      	beq.n	8004b7e <TIM_Base_SetConfig+0x62>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6c:	d007      	beq.n	8004b7e <TIM_Base_SetConfig+0x62>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <TIM_Base_SetConfig+0xbc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d003      	beq.n	8004b7e <TIM_Base_SetConfig+0x62>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <TIM_Base_SetConfig+0xc0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d108      	bne.n	8004b90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a07      	ldr	r2, [pc, #28]	; (8004bd4 <TIM_Base_SetConfig+0xb8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d103      	bne.n	8004bc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	615a      	str	r2, [r3, #20]
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800

08004be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f023 0201 	bic.w	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f023 030a 	bic.w	r3, r3, #10
 8004c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	621a      	str	r2, [r3, #32]
}
 8004c32:	bf00      	nop
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr

08004c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f023 0210 	bic.w	r2, r3, #16
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	031b      	lsls	r3, r3, #12
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	621a      	str	r2, [r3, #32]
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr

08004c9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b085      	sub	sp, #20
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f043 0307 	orr.w	r3, r3, #7
 8004cbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	609a      	str	r2, [r3, #8]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b087      	sub	sp, #28
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
 8004cda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	021a      	lsls	r2, r3, #8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	609a      	str	r2, [r3, #8]
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bc80      	pop	{r7}
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e046      	b.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a16      	ldr	r2, [pc, #88]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00e      	beq.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d70:	d009      	beq.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a10      	ldr	r2, [pc, #64]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d10c      	bne.n	8004da0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800

08004dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr

08004dda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr

08004dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e03f      	b.n	8004e7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc f8d8 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2224      	movs	r2, #36	; 0x24
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fba9 	bl	8005588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	4613      	mov	r3, r2
 8004e92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d11d      	bne.n	8004edc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_UART_Receive_IT+0x26>
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e016      	b.n	8004ede <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_Receive_IT+0x38>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e00f      	b.n	8004ede <HAL_UART_Receive_IT+0x58>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f9cf 	bl	8005276 <UART_Start_Receive_IT>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	e000      	b.n	8004ede <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
  }
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10d      	bne.n	8004f3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_UART_IRQHandler+0x52>
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fa7f 	bl	8005436 <UART_Receive_IT>
      return;
 8004f38:	e17b      	b.n	8005232 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80b1 	beq.w	80050a4 <HAL_UART_IRQHandler+0x1bc>
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <HAL_UART_IRQHandler+0x70>
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 80a6 	beq.w	80050a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <HAL_UART_IRQHandler+0x90>
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	f043 0201 	orr.w	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_UART_IRQHandler+0xb0>
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	f043 0202 	orr.w	r2, r3, #2
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_UART_IRQHandler+0xd0>
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	f043 0204 	orr.w	r2, r3, #4
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00f      	beq.n	8004fe2 <HAL_UART_IRQHandler+0xfa>
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <HAL_UART_IRQHandler+0xee>
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f043 0208 	orr.w	r2, r3, #8
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 811e 	beq.w	8005228 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <HAL_UART_IRQHandler+0x11e>
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fa18 	bl	8005436 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf14      	ite	ne
 8005014:	2301      	movne	r3, #1
 8005016:	2300      	moveq	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <HAL_UART_IRQHandler+0x146>
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d031      	beq.n	8005092 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f95a 	bl	80052e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d023      	beq.n	800508a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005050:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	2b00      	cmp	r3, #0
 8005058:	d013      	beq.n	8005082 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	4a76      	ldr	r2, [pc, #472]	; (8005238 <HAL_UART_IRQHandler+0x350>)
 8005060:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	4618      	mov	r0, r3
 8005068:	f7fd fa54 	bl	8002514 <HAL_DMA_Abort_IT>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800507c:	4610      	mov	r0, r2
 800507e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005080:	e00e      	b.n	80050a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f8e3 	bl	800524e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005088:	e00a      	b.n	80050a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f8df 	bl	800524e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	e006      	b.n	80050a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f8db 	bl	800524e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800509e:	e0c3      	b.n	8005228 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a0:	bf00      	nop
    return;
 80050a2:	e0c1      	b.n	8005228 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	f040 80a1 	bne.w	80051f0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 809b 	beq.w	80051f0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8095 	beq.w	80051f0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d04e      	beq.n	8005188 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80050f4:	8a3b      	ldrh	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8098 	beq.w	800522c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005100:	8a3a      	ldrh	r2, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	f080 8092 	bcs.w	800522c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8a3a      	ldrh	r2, [r7, #16]
 800510c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	2b20      	cmp	r3, #32
 8005116:	d02b      	beq.n	8005170 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005126:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695a      	ldr	r2, [r3, #20]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0201 	bic.w	r2, r2, #1
 8005136:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005146:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0210 	bic.w	r2, r2, #16
 8005164:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd f997 	bl	800249e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005178:	b29b      	uxth	r3, r3
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	b29b      	uxth	r3, r3
 800517e:	4619      	mov	r1, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f86d 	bl	8005260 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005186:	e051      	b.n	800522c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005190:	b29b      	uxth	r3, r3
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d047      	beq.n	8005230 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80051a0:	8a7b      	ldrh	r3, [r7, #18]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d044      	beq.n	8005230 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051b4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695a      	ldr	r2, [r3, #20]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0210 	bic.w	r2, r2, #16
 80051e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051e4:	8a7b      	ldrh	r3, [r7, #18]
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f839 	bl	8005260 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051ee:	e01f      	b.n	8005230 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <HAL_UART_IRQHandler+0x324>
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f8af 	bl	8005368 <UART_Transmit_IT>
    return;
 800520a:	e012      	b.n	8005232 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00d      	beq.n	8005232 <HAL_UART_IRQHandler+0x34a>
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f8f0 	bl	8005406 <UART_EndTransmit_IT>
    return;
 8005226:	e004      	b.n	8005232 <HAL_UART_IRQHandler+0x34a>
    return;
 8005228:	bf00      	nop
 800522a:	e002      	b.n	8005232 <HAL_UART_IRQHandler+0x34a>
      return;
 800522c:	bf00      	nop
 800522e:	e000      	b.n	8005232 <HAL_UART_IRQHandler+0x34a>
      return;
 8005230:	bf00      	nop
  }
}
 8005232:	3728      	adds	r7, #40	; 0x28
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	08005341 	.word	0x08005341

0800523c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr

08005276 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005276:	b480      	push	{r7}
 8005278:	b085      	sub	sp, #20
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	4613      	mov	r3, r2
 8005282:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	88fa      	ldrh	r2, [r7, #6]
 800528e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	88fa      	ldrh	r2, [r7, #6]
 8005294:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2222      	movs	r2, #34	; 0x22
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ba:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0220 	orr.w	r2, r2, #32
 80052da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0201 	bic.w	r2, r2, #1
 800530e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	2b01      	cmp	r3, #1
 8005316:	d107      	bne.n	8005328 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0210 	bic.w	r2, r2, #16
 8005326:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f7ff ff77 	bl	800524e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b21      	cmp	r3, #33	; 0x21
 800537a:	d13e      	bne.n	80053fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005384:	d114      	bne.n	80053b0 <UART_Transmit_IT+0x48>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d110      	bne.n	80053b0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	1c9a      	adds	r2, r3, #2
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	621a      	str	r2, [r3, #32]
 80053ae:	e008      	b.n	80053c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	1c59      	adds	r1, r3, #1
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6211      	str	r1, [r2, #32]
 80053ba:	781a      	ldrb	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4619      	mov	r1, r3
 80053d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10f      	bne.n	80053f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	e000      	b.n	80053fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053fa:	2302      	movs	r3, #2
  }
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff ff08 	bl	800523c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b086      	sub	sp, #24
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b22      	cmp	r3, #34	; 0x22
 8005448:	f040 8099 	bne.w	800557e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005454:	d117      	bne.n	8005486 <UART_Receive_IT+0x50>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d113      	bne.n	8005486 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	b29b      	uxth	r3, r3
 8005470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005474:	b29a      	uxth	r2, r3
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	1c9a      	adds	r2, r3, #2
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	629a      	str	r2, [r3, #40]	; 0x28
 8005484:	e026      	b.n	80054d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800548c:	2300      	movs	r3, #0
 800548e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005498:	d007      	beq.n	80054aa <UART_Receive_IT+0x74>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <UART_Receive_IT+0x82>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	e008      	b.n	80054ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29b      	uxth	r3, r3
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	4619      	mov	r1, r3
 80054e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d148      	bne.n	800557a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0220 	bic.w	r2, r2, #32
 80054f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	2b01      	cmp	r3, #1
 8005526:	d123      	bne.n	8005570 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0210 	bic.w	r2, r2, #16
 800553c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b10      	cmp	r3, #16
 800554a:	d10a      	bne.n	8005562 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fe79 	bl	8005260 <HAL_UARTEx_RxEventCallback>
 800556e:	e002      	b.n	8005576 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fb fc09 	bl	8000d88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	e002      	b.n	8005580 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	e000      	b.n	8005580 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800557e:	2302      	movs	r3, #2
  }
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80055c2:	f023 030c 	bic.w	r3, r3, #12
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	430b      	orrs	r3, r1
 80055ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2c      	ldr	r2, [pc, #176]	; (800569c <UART_SetConfig+0x114>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d103      	bne.n	80055f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055f0:	f7fe fa2c 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	e002      	b.n	80055fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055f8:	f7fe fa14 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 80055fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	009a      	lsls	r2, r3, #2
 8005608:	441a      	add	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	fbb2 f3f3 	udiv	r3, r2, r3
 8005614:	4a22      	ldr	r2, [pc, #136]	; (80056a0 <UART_SetConfig+0x118>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	0119      	lsls	r1, r3, #4
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009a      	lsls	r2, r3, #2
 8005628:	441a      	add	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	fbb2 f2f3 	udiv	r2, r2, r3
 8005634:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <UART_SetConfig+0x118>)
 8005636:	fba3 0302 	umull	r0, r3, r3, r2
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	2064      	movs	r0, #100	; 0x64
 800563e:	fb00 f303 	mul.w	r3, r0, r3
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	3332      	adds	r3, #50	; 0x32
 8005648:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <UART_SetConfig+0x118>)
 800564a:	fba2 2303 	umull	r2, r3, r2, r3
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005654:	4419      	add	r1, r3
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009a      	lsls	r2, r3, #2
 8005660:	441a      	add	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	fbb2 f2f3 	udiv	r2, r2, r3
 800566c:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <UART_SetConfig+0x118>)
 800566e:	fba3 0302 	umull	r0, r3, r3, r2
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	2064      	movs	r0, #100	; 0x64
 8005676:	fb00 f303 	mul.w	r3, r0, r3
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	3332      	adds	r3, #50	; 0x32
 8005680:	4a07      	ldr	r2, [pc, #28]	; (80056a0 <UART_SetConfig+0x118>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	f003 020f 	and.w	r2, r3, #15
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	440a      	add	r2, r1
 8005692:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40013800 	.word	0x40013800
 80056a0:	51eb851f 	.word	0x51eb851f

080056a4 <__libc_init_array>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	2600      	movs	r6, #0
 80056a8:	4d0c      	ldr	r5, [pc, #48]	; (80056dc <__libc_init_array+0x38>)
 80056aa:	4c0d      	ldr	r4, [pc, #52]	; (80056e0 <__libc_init_array+0x3c>)
 80056ac:	1b64      	subs	r4, r4, r5
 80056ae:	10a4      	asrs	r4, r4, #2
 80056b0:	42a6      	cmp	r6, r4
 80056b2:	d109      	bne.n	80056c8 <__libc_init_array+0x24>
 80056b4:	f000 f892 	bl	80057dc <_init>
 80056b8:	2600      	movs	r6, #0
 80056ba:	4d0a      	ldr	r5, [pc, #40]	; (80056e4 <__libc_init_array+0x40>)
 80056bc:	4c0a      	ldr	r4, [pc, #40]	; (80056e8 <__libc_init_array+0x44>)
 80056be:	1b64      	subs	r4, r4, r5
 80056c0:	10a4      	asrs	r4, r4, #2
 80056c2:	42a6      	cmp	r6, r4
 80056c4:	d105      	bne.n	80056d2 <__libc_init_array+0x2e>
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056cc:	4798      	blx	r3
 80056ce:	3601      	adds	r6, #1
 80056d0:	e7ee      	b.n	80056b0 <__libc_init_array+0xc>
 80056d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d6:	4798      	blx	r3
 80056d8:	3601      	adds	r6, #1
 80056da:	e7f2      	b.n	80056c2 <__libc_init_array+0x1e>
 80056dc:	08006068 	.word	0x08006068
 80056e0:	08006068 	.word	0x08006068
 80056e4:	08006068 	.word	0x08006068
 80056e8:	0800606c 	.word	0x0800606c

080056ec <__itoa>:
 80056ec:	1e93      	subs	r3, r2, #2
 80056ee:	2b22      	cmp	r3, #34	; 0x22
 80056f0:	b510      	push	{r4, lr}
 80056f2:	460c      	mov	r4, r1
 80056f4:	d904      	bls.n	8005700 <__itoa+0x14>
 80056f6:	2300      	movs	r3, #0
 80056f8:	461c      	mov	r4, r3
 80056fa:	700b      	strb	r3, [r1, #0]
 80056fc:	4620      	mov	r0, r4
 80056fe:	bd10      	pop	{r4, pc}
 8005700:	2a0a      	cmp	r2, #10
 8005702:	d109      	bne.n	8005718 <__itoa+0x2c>
 8005704:	2800      	cmp	r0, #0
 8005706:	da07      	bge.n	8005718 <__itoa+0x2c>
 8005708:	232d      	movs	r3, #45	; 0x2d
 800570a:	700b      	strb	r3, [r1, #0]
 800570c:	2101      	movs	r1, #1
 800570e:	4240      	negs	r0, r0
 8005710:	4421      	add	r1, r4
 8005712:	f000 f821 	bl	8005758 <__utoa>
 8005716:	e7f1      	b.n	80056fc <__itoa+0x10>
 8005718:	2100      	movs	r1, #0
 800571a:	e7f9      	b.n	8005710 <__itoa+0x24>

0800571c <itoa>:
 800571c:	f7ff bfe6 	b.w	80056ec <__itoa>

08005720 <memset>:
 8005720:	4603      	mov	r3, r0
 8005722:	4402      	add	r2, r0
 8005724:	4293      	cmp	r3, r2
 8005726:	d100      	bne.n	800572a <memset+0xa>
 8005728:	4770      	bx	lr
 800572a:	f803 1b01 	strb.w	r1, [r3], #1
 800572e:	e7f9      	b.n	8005724 <memset+0x4>

08005730 <strncpy>:
 8005730:	4603      	mov	r3, r0
 8005732:	b510      	push	{r4, lr}
 8005734:	3901      	subs	r1, #1
 8005736:	b132      	cbz	r2, 8005746 <strncpy+0x16>
 8005738:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800573c:	3a01      	subs	r2, #1
 800573e:	f803 4b01 	strb.w	r4, [r3], #1
 8005742:	2c00      	cmp	r4, #0
 8005744:	d1f7      	bne.n	8005736 <strncpy+0x6>
 8005746:	2100      	movs	r1, #0
 8005748:	441a      	add	r2, r3
 800574a:	4293      	cmp	r3, r2
 800574c:	d100      	bne.n	8005750 <strncpy+0x20>
 800574e:	bd10      	pop	{r4, pc}
 8005750:	f803 1b01 	strb.w	r1, [r3], #1
 8005754:	e7f9      	b.n	800574a <strncpy+0x1a>
	...

08005758 <__utoa>:
 8005758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575a:	b08b      	sub	sp, #44	; 0x2c
 800575c:	4605      	mov	r5, r0
 800575e:	460b      	mov	r3, r1
 8005760:	466e      	mov	r6, sp
 8005762:	4c1d      	ldr	r4, [pc, #116]	; (80057d8 <__utoa+0x80>)
 8005764:	f104 0c20 	add.w	ip, r4, #32
 8005768:	4637      	mov	r7, r6
 800576a:	6820      	ldr	r0, [r4, #0]
 800576c:	6861      	ldr	r1, [r4, #4]
 800576e:	3408      	adds	r4, #8
 8005770:	c703      	stmia	r7!, {r0, r1}
 8005772:	4564      	cmp	r4, ip
 8005774:	463e      	mov	r6, r7
 8005776:	d1f7      	bne.n	8005768 <__utoa+0x10>
 8005778:	7921      	ldrb	r1, [r4, #4]
 800577a:	6820      	ldr	r0, [r4, #0]
 800577c:	7139      	strb	r1, [r7, #4]
 800577e:	1e91      	subs	r1, r2, #2
 8005780:	2922      	cmp	r1, #34	; 0x22
 8005782:	6038      	str	r0, [r7, #0]
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	d904      	bls.n	8005794 <__utoa+0x3c>
 800578a:	7019      	strb	r1, [r3, #0]
 800578c:	460b      	mov	r3, r1
 800578e:	4618      	mov	r0, r3
 8005790:	b00b      	add	sp, #44	; 0x2c
 8005792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005794:	1e58      	subs	r0, r3, #1
 8005796:	4684      	mov	ip, r0
 8005798:	fbb5 f7f2 	udiv	r7, r5, r2
 800579c:	fb02 5617 	mls	r6, r2, r7, r5
 80057a0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80057a4:	4476      	add	r6, lr
 80057a6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80057aa:	460c      	mov	r4, r1
 80057ac:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80057b0:	462e      	mov	r6, r5
 80057b2:	42b2      	cmp	r2, r6
 80057b4:	463d      	mov	r5, r7
 80057b6:	f101 0101 	add.w	r1, r1, #1
 80057ba:	d9ed      	bls.n	8005798 <__utoa+0x40>
 80057bc:	2200      	movs	r2, #0
 80057be:	545a      	strb	r2, [r3, r1]
 80057c0:	1919      	adds	r1, r3, r4
 80057c2:	1aa5      	subs	r5, r4, r2
 80057c4:	42aa      	cmp	r2, r5
 80057c6:	dae2      	bge.n	800578e <__utoa+0x36>
 80057c8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80057cc:	780e      	ldrb	r6, [r1, #0]
 80057ce:	3201      	adds	r2, #1
 80057d0:	7006      	strb	r6, [r0, #0]
 80057d2:	f801 5901 	strb.w	r5, [r1], #-1
 80057d6:	e7f4      	b.n	80057c2 <__utoa+0x6a>
 80057d8:	08006040 	.word	0x08006040

080057dc <_init>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	bf00      	nop
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr

080057e8 <_fini>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	bf00      	nop
 80057ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ee:	bc08      	pop	{r3}
 80057f0:	469e      	mov	lr, r3
 80057f2:	4770      	bx	lr
