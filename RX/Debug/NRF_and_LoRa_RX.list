
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fbc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000918  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e0  080079e0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  080079e0  080079e0  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079e0  080079e0  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079e4  080079e4  000179e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080079e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  200000ac  08007a94  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  08007a94  000208c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179ab  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003030  00000000  00000000  00037a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003be18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199f4  00000000  00000000  0003d078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001806d  00000000  00000000  00056a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009046f  00000000  00000000  0006ead9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fef48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005600  00000000  00000000  000fef9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	080070b0 	.word	0x080070b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	080070b0 	.word	0x080070b0

0800014c <LoRa_RX>:
extern bool flag_command_received;		// Flag show status receive data (completed/not completed)
extern char uart_rx_data[50];			// Main rx buffer data

//----------------------------------------------------------------------------------------
void LoRa_RX(bool flag)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;		// Trigger variable

	if((flag_first_time == true) && (flag == true))
 8000156:	4b3e      	ldr	r3, [pc, #248]	; (8000250 <LoRa_RX+0x104>)
 8000158:	781b      	ldrb	r3, [r3, #0]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d029      	beq.n	80001b2 <LoRa_RX+0x66>
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	2b00      	cmp	r3, #0
 8000162:	d026      	beq.n	80001b2 <LoRa_RX+0x66>
	{
		// state_machine
		HAL_Delay(100);
 8000164:	2064      	movs	r0, #100	; 0x64
 8000166:	f003 f839 	bl	80031dc <HAL_Delay>
		init_lora_RX();
 800016a:	f000 fa0b 	bl	8000584 <init_lora_RX>
		HAL_Delay(500);
 800016e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000172:	f003 f833 	bl	80031dc <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000176:	2110      	movs	r1, #16
 8000178:	2000      	movs	r0, #0
 800017a:	f001 f9eb 	bl	8001554 <ssd1306_SetCursor>
		strcpy(test_main, "RX data: ");
 800017e:	4b35      	ldr	r3, [pc, #212]	; (8000254 <LoRa_RX+0x108>)
 8000180:	4a35      	ldr	r2, [pc, #212]	; (8000258 <LoRa_RX+0x10c>)
 8000182:	ca07      	ldmia	r2, {r0, r1, r2}
 8000184:	c303      	stmia	r3!, {r0, r1}
 8000186:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(test_main,  Font_7x10, White);
 8000188:	4a34      	ldr	r2, [pc, #208]	; (800025c <LoRa_RX+0x110>)
 800018a:	2301      	movs	r3, #1
 800018c:	ca06      	ldmia	r2, {r1, r2}
 800018e:	4831      	ldr	r0, [pc, #196]	; (8000254 <LoRa_RX+0x108>)
 8000190:	f001 f9ba 	bl	8001508 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000194:	f001 f8a8 	bl	80012e8 <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 8000198:	2201      	movs	r2, #1
 800019a:	4931      	ldr	r1, [pc, #196]	; (8000260 <LoRa_RX+0x114>)
 800019c:	4831      	ldr	r0, [pc, #196]	; (8000264 <LoRa_RX+0x118>)
 800019e:	f005 fe86 	bl	8005eae <HAL_UART_Receive_IT>
		memset(test_main, 0, sizeof(test_main));
 80001a2:	2214      	movs	r2, #20
 80001a4:	2100      	movs	r1, #0
 80001a6:	482b      	ldr	r0, [pc, #172]	; (8000254 <LoRa_RX+0x108>)
 80001a8:	f006 fae2 	bl	8006770 <memset>
		flag_first_time = false;
 80001ac:	4b28      	ldr	r3, [pc, #160]	; (8000250 <LoRa_RX+0x104>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))
 80001b2:	4b27      	ldr	r3, [pc, #156]	; (8000250 <LoRa_RX+0x104>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	f083 0301 	eor.w	r3, r3, #1
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d039      	beq.n	8000234 <LoRa_RX+0xe8>
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d036      	beq.n	8000234 <LoRa_RX+0xe8>
	{
		if(flag_command_received == true)			// If data is ready
 80001c6:	4b28      	ldr	r3, [pc, #160]	; (8000268 <LoRa_RX+0x11c>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d032      	beq.n	8000234 <LoRa_RX+0xe8>
		{
			// Data received

			//   Print on OLED
			char clearn_array[10] = "         ";
 80001ce:	4a27      	ldr	r2, [pc, #156]	; (800026c <LoRa_RX+0x120>)
 80001d0:	f107 030c 	add.w	r3, r7, #12
 80001d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80001d6:	c303      	stmia	r3!, {r0, r1}
 80001d8:	801a      	strh	r2, [r3, #0]
			ssd1306_SetCursor(60, 16);
 80001da:	2110      	movs	r1, #16
 80001dc:	203c      	movs	r0, #60	; 0x3c
 80001de:	f001 f9b9 	bl	8001554 <ssd1306_SetCursor>

			ssd1306_WriteString(clearn_array,  Font_7x10, White);
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <LoRa_RX+0x110>)
 80001e4:	f107 000c 	add.w	r0, r7, #12
 80001e8:	2301      	movs	r3, #1
 80001ea:	ca06      	ldmia	r2, {r1, r2}
 80001ec:	f001 f98c 	bl	8001508 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80001f0:	f001 f87a 	bl	80012e8 <ssd1306_UpdateScreen>

			ssd1306_SetCursor(60, 16);
 80001f4:	2110      	movs	r1, #16
 80001f6:	203c      	movs	r0, #60	; 0x3c
 80001f8:	f001 f9ac 	bl	8001554 <ssd1306_SetCursor>
			strcpy(test_main, uart_rx_data);
 80001fc:	491c      	ldr	r1, [pc, #112]	; (8000270 <LoRa_RX+0x124>)
 80001fe:	4815      	ldr	r0, [pc, #84]	; (8000254 <LoRa_RX+0x108>)
 8000200:	f006 fba3 	bl	800694a <strcpy>

			ssd1306_WriteString(test_main,  Font_7x10, White);
 8000204:	4a15      	ldr	r2, [pc, #84]	; (800025c <LoRa_RX+0x110>)
 8000206:	2301      	movs	r3, #1
 8000208:	ca06      	ldmia	r2, {r1, r2}
 800020a:	4812      	ldr	r0, [pc, #72]	; (8000254 <LoRa_RX+0x108>)
 800020c:	f001 f97c 	bl	8001508 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000210:	f001 f86a 	bl	80012e8 <ssd1306_UpdateScreen>

			HAL_Delay(100);
 8000214:	2064      	movs	r0, #100	; 0x64
 8000216:	f002 ffe1 	bl	80031dc <HAL_Delay>
			memset(uart_rx_data, 0, sizeof(uart_rx_data));
 800021a:	2232      	movs	r2, #50	; 0x32
 800021c:	2100      	movs	r1, #0
 800021e:	4814      	ldr	r0, [pc, #80]	; (8000270 <LoRa_RX+0x124>)
 8000220:	f006 faa6 	bl	8006770 <memset>
			flag_command_received = false;
 8000224:	4b10      	ldr	r3, [pc, #64]	; (8000268 <LoRa_RX+0x11c>)
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart1, str, 1);		// Start interrupt again
 800022a:	2201      	movs	r2, #1
 800022c:	490c      	ldr	r1, [pc, #48]	; (8000260 <LoRa_RX+0x114>)
 800022e:	480d      	ldr	r0, [pc, #52]	; (8000264 <LoRa_RX+0x118>)
 8000230:	f005 fe3d 	bl	8005eae <HAL_UART_Receive_IT>
		}
	}
	if(flag == false)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f083 0301 	eor.w	r3, r3, #1
 800023a:	b2db      	uxtb	r3, r3
 800023c:	2b00      	cmp	r3, #0
 800023e:	d002      	beq.n	8000246 <LoRa_RX+0xfa>
	{
		flag_first_time = true;
 8000240:	4b03      	ldr	r3, [pc, #12]	; (8000250 <LoRa_RX+0x104>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}
}
 8000246:	bf00      	nop
 8000248:	3718      	adds	r7, #24
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000000 	.word	0x20000000
 8000254:	200000c8 	.word	0x200000c8
 8000258:	080070c8 	.word	0x080070c8
 800025c:	20000014 	.word	0x20000014
 8000260:	20000594 	.word	0x20000594
 8000264:	20000644 	.word	0x20000644
 8000268:	20000595 	.word	0x20000595
 800026c:	080070d4 	.word	0x080070d4
 8000270:	20000560 	.word	0x20000560

08000274 <LoRa_TX>:
//----------------------------------------------------------------------------------------
void LoRa_TX(bool flag)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;		// Trigger variable
	static int transmit_count = 0;			// Variable for transmit
	if((flag_first_time == true) && (flag == true))
 800027e:	4b34      	ldr	r3, [pc, #208]	; (8000350 <LoRa_TX+0xdc>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d024      	beq.n	80002d0 <LoRa_TX+0x5c>
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d021      	beq.n	80002d0 <LoRa_TX+0x5c>
	{
		HAL_Delay(100);
 800028c:	2064      	movs	r0, #100	; 0x64
 800028e:	f002 ffa5 	bl	80031dc <HAL_Delay>
		init_lora_TX();
 8000292:	f000 f92f 	bl	80004f4 <init_lora_TX>
		HAL_Delay(500);
 8000296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800029a:	f002 ff9f 	bl	80031dc <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 800029e:	2110      	movs	r1, #16
 80002a0:	2000      	movs	r0, #0
 80002a2:	f001 f957 	bl	8001554 <ssd1306_SetCursor>
		strcpy(test_main, "TX data: ");
 80002a6:	4b2b      	ldr	r3, [pc, #172]	; (8000354 <LoRa_TX+0xe0>)
 80002a8:	4a2b      	ldr	r2, [pc, #172]	; (8000358 <LoRa_TX+0xe4>)
 80002aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ac:	c303      	stmia	r3!, {r0, r1}
 80002ae:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(test_main,  Font_7x10, White);
 80002b0:	4a2a      	ldr	r2, [pc, #168]	; (800035c <LoRa_TX+0xe8>)
 80002b2:	2301      	movs	r3, #1
 80002b4:	ca06      	ldmia	r2, {r1, r2}
 80002b6:	4827      	ldr	r0, [pc, #156]	; (8000354 <LoRa_TX+0xe0>)
 80002b8:	f001 f926 	bl	8001508 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80002bc:	f001 f814 	bl	80012e8 <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 80002c0:	2201      	movs	r2, #1
 80002c2:	4927      	ldr	r1, [pc, #156]	; (8000360 <LoRa_TX+0xec>)
 80002c4:	4827      	ldr	r0, [pc, #156]	; (8000364 <LoRa_TX+0xf0>)
 80002c6:	f005 fdf2 	bl	8005eae <HAL_UART_Receive_IT>
		flag_first_time = false;
 80002ca:	4b21      	ldr	r3, [pc, #132]	; (8000350 <LoRa_TX+0xdc>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))
 80002d0:	4b1f      	ldr	r3, [pc, #124]	; (8000350 <LoRa_TX+0xdc>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	f083 0301 	eor.w	r3, r3, #1
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d027      	beq.n	800032e <LoRa_TX+0xba>
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d024      	beq.n	800032e <LoRa_TX+0xba>
	{
		int count = lora_transmit_data(transmit_count);
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <LoRa_TX+0xf4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f841 	bl	8000370 <lora_transmit_data>
 80002ee:	60f8      	str	r0, [r7, #12]
		transmit_count ++;
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <LoRa_TX+0xf4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	3301      	adds	r3, #1
 80002f6:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <LoRa_TX+0xf4>)
 80002f8:	6013      	str	r3, [r2, #0]
		// Print transmeeting data
		memset(test_main, 0, sizeof(test_main));
 80002fa:	2214      	movs	r2, #20
 80002fc:	2100      	movs	r1, #0
 80002fe:	4815      	ldr	r0, [pc, #84]	; (8000354 <LoRa_TX+0xe0>)
 8000300:	f006 fa36 	bl	8006770 <memset>
		ssd1306_SetCursor(60, 16);
 8000304:	2110      	movs	r1, #16
 8000306:	203c      	movs	r0, #60	; 0x3c
 8000308:	f001 f924 	bl	8001554 <ssd1306_SetCursor>
		sprintf(test_main, "%d", count);
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	4917      	ldr	r1, [pc, #92]	; (800036c <LoRa_TX+0xf8>)
 8000310:	4810      	ldr	r0, [pc, #64]	; (8000354 <LoRa_TX+0xe0>)
 8000312:	f006 faeb 	bl	80068ec <siprintf>
		ssd1306_WriteString(test_main,  Font_7x10, White);
 8000316:	4a11      	ldr	r2, [pc, #68]	; (800035c <LoRa_TX+0xe8>)
 8000318:	2301      	movs	r3, #1
 800031a:	ca06      	ldmia	r2, {r1, r2}
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <LoRa_TX+0xe0>)
 800031e:	f001 f8f3 	bl	8001508 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000322:	f000 ffe1 	bl	80012e8 <ssd1306_UpdateScreen>

		HAL_Delay(2000);			// Must be more than 1.5 sec
 8000326:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800032a:	f002 ff57 	bl	80031dc <HAL_Delay>
	}
	if(flag == false)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f083 0301 	eor.w	r3, r3, #1
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d005      	beq.n	8000346 <LoRa_TX+0xd2>
	{
		flag_first_time = true;
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <LoRa_TX+0xdc>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
		transmit_count = 0;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <LoRa_TX+0xf4>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
	}


}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000001 	.word	0x20000001
 8000354:	200000c8 	.word	0x200000c8
 8000358:	080070e0 	.word	0x080070e0
 800035c:	20000014 	.word	0x20000014
 8000360:	20000594 	.word	0x20000594
 8000364:	20000644 	.word	0x20000644
 8000368:	200000dc 	.word	0x200000dc
 800036c:	080070ec 	.word	0x080070ec

08000370 <lora_transmit_data>:
//----------------------------------------------------------------------------------------
int lora_transmit_data(int transmit_count)    // Rename
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
//	static int transmit_count = 0;			// Variable for transmit
	static uint8_t data[10] = {0};

	//transmit_count++;

	data[5] = '0' + transmit_count%10;
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4b48      	ldr	r3, [pc, #288]	; (800049c <lora_transmit_data+0x12c>)
 800037c:	fb83 1302 	smull	r1, r3, r3, r2
 8000380:	1099      	asrs	r1, r3, #2
 8000382:	17d3      	asrs	r3, r2, #31
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	460b      	mov	r3, r1
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	440b      	add	r3, r1
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	1ad1      	subs	r1, r2, r3
 8000390:	b2cb      	uxtb	r3, r1
 8000392:	3330      	adds	r3, #48	; 0x30
 8000394:	b2da      	uxtb	r2, r3
 8000396:	4b42      	ldr	r3, [pc, #264]	; (80004a0 <lora_transmit_data+0x130>)
 8000398:	715a      	strb	r2, [r3, #5]
	data[4] = '0' + (transmit_count/10) % 10;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a3f      	ldr	r2, [pc, #252]	; (800049c <lora_transmit_data+0x12c>)
 800039e:	fb82 1203 	smull	r1, r2, r2, r3
 80003a2:	1092      	asrs	r2, r2, #2
 80003a4:	17db      	asrs	r3, r3, #31
 80003a6:	1ad2      	subs	r2, r2, r3
 80003a8:	4b3c      	ldr	r3, [pc, #240]	; (800049c <lora_transmit_data+0x12c>)
 80003aa:	fb83 1302 	smull	r1, r3, r3, r2
 80003ae:	1099      	asrs	r1, r3, #2
 80003b0:	17d3      	asrs	r3, r2, #31
 80003b2:	1ac9      	subs	r1, r1, r3
 80003b4:	460b      	mov	r3, r1
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	440b      	add	r3, r1
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	1ad1      	subs	r1, r2, r3
 80003be:	b2cb      	uxtb	r3, r1
 80003c0:	3330      	adds	r3, #48	; 0x30
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	4b36      	ldr	r3, [pc, #216]	; (80004a0 <lora_transmit_data+0x130>)
 80003c6:	711a      	strb	r2, [r3, #4]
	data[3] = '0' + (transmit_count/100) % 10;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <lora_transmit_data+0x134>)
 80003cc:	fb82 1203 	smull	r1, r2, r2, r3
 80003d0:	1152      	asrs	r2, r2, #5
 80003d2:	17db      	asrs	r3, r3, #31
 80003d4:	1ad2      	subs	r2, r2, r3
 80003d6:	4b31      	ldr	r3, [pc, #196]	; (800049c <lora_transmit_data+0x12c>)
 80003d8:	fb83 1302 	smull	r1, r3, r3, r2
 80003dc:	1099      	asrs	r1, r3, #2
 80003de:	17d3      	asrs	r3, r2, #31
 80003e0:	1ac9      	subs	r1, r1, r3
 80003e2:	460b      	mov	r3, r1
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	440b      	add	r3, r1
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	1ad1      	subs	r1, r2, r3
 80003ec:	b2cb      	uxtb	r3, r1
 80003ee:	3330      	adds	r3, #48	; 0x30
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b2b      	ldr	r3, [pc, #172]	; (80004a0 <lora_transmit_data+0x130>)
 80003f4:	70da      	strb	r2, [r3, #3]
	data[2] = '0' + (transmit_count/1000) % 10;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a2b      	ldr	r2, [pc, #172]	; (80004a8 <lora_transmit_data+0x138>)
 80003fa:	fb82 1203 	smull	r1, r2, r2, r3
 80003fe:	1192      	asrs	r2, r2, #6
 8000400:	17db      	asrs	r3, r3, #31
 8000402:	1ad2      	subs	r2, r2, r3
 8000404:	4b25      	ldr	r3, [pc, #148]	; (800049c <lora_transmit_data+0x12c>)
 8000406:	fb83 1302 	smull	r1, r3, r3, r2
 800040a:	1099      	asrs	r1, r3, #2
 800040c:	17d3      	asrs	r3, r2, #31
 800040e:	1ac9      	subs	r1, r1, r3
 8000410:	460b      	mov	r3, r1
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	440b      	add	r3, r1
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	1ad1      	subs	r1, r2, r3
 800041a:	b2cb      	uxtb	r3, r1
 800041c:	3330      	adds	r3, #48	; 0x30
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <lora_transmit_data+0x130>)
 8000422:	709a      	strb	r2, [r3, #2]
	data[1] = '0' + (transmit_count/10000) % 10;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <lora_transmit_data+0x13c>)
 8000428:	fb82 1203 	smull	r1, r2, r2, r3
 800042c:	1312      	asrs	r2, r2, #12
 800042e:	17db      	asrs	r3, r3, #31
 8000430:	1ad2      	subs	r2, r2, r3
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <lora_transmit_data+0x12c>)
 8000434:	fb83 1302 	smull	r1, r3, r3, r2
 8000438:	1099      	asrs	r1, r3, #2
 800043a:	17d3      	asrs	r3, r2, #31
 800043c:	1ac9      	subs	r1, r1, r3
 800043e:	460b      	mov	r3, r1
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	440b      	add	r3, r1
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	1ad1      	subs	r1, r2, r3
 8000448:	b2cb      	uxtb	r3, r1
 800044a:	3330      	adds	r3, #48	; 0x30
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <lora_transmit_data+0x130>)
 8000450:	705a      	strb	r2, [r3, #1]
	data[0] = '0' + (transmit_count/100000) % 10;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <lora_transmit_data+0x140>)
 8000456:	fb82 1203 	smull	r1, r2, r2, r3
 800045a:	1352      	asrs	r2, r2, #13
 800045c:	17db      	asrs	r3, r3, #31
 800045e:	1ad2      	subs	r2, r2, r3
 8000460:	4b0e      	ldr	r3, [pc, #56]	; (800049c <lora_transmit_data+0x12c>)
 8000462:	fb83 1302 	smull	r1, r3, r3, r2
 8000466:	1099      	asrs	r1, r3, #2
 8000468:	17d3      	asrs	r3, r2, #31
 800046a:	1ac9      	subs	r1, r1, r3
 800046c:	460b      	mov	r3, r1
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	440b      	add	r3, r1
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	1ad1      	subs	r1, r2, r3
 8000476:	b2cb      	uxtb	r3, r1
 8000478:	3330      	adds	r3, #48	; 0x30
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <lora_transmit_data+0x130>)
 800047e:	701a      	strb	r2, [r3, #0]
	data[6] = '\0';
 8000480:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <lora_transmit_data+0x130>)
 8000482:	2200      	movs	r2, #0
 8000484:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit_IT(&huart1, data, 7);
 8000486:	2207      	movs	r2, #7
 8000488:	4905      	ldr	r1, [pc, #20]	; (80004a0 <lora_transmit_data+0x130>)
 800048a:	480a      	ldr	r0, [pc, #40]	; (80004b4 <lora_transmit_data+0x144>)
 800048c:	f005 fccb 	bl	8005e26 <HAL_UART_Transmit_IT>

	return transmit_count;
 8000490:	687b      	ldr	r3, [r7, #4]
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	66666667 	.word	0x66666667
 80004a0:	200000e0 	.word	0x200000e0
 80004a4:	51eb851f 	.word	0x51eb851f
 80004a8:	10624dd3 	.word	0x10624dd3
 80004ac:	68db8bad 	.word	0x68db8bad
 80004b0:	14f8b589 	.word	0x14f8b589
 80004b4:	20000644 	.word	0x20000644

080004b8 <read_all_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_all_settings_from_module(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 80004bc:	f000 f8c8 	bl	8000650 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 80004c0:	200a      	movs	r0, #10
 80004c2:	f002 fe8b 	bl	80031dc <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;			// 0xC1 - Read register command
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <read_all_settings_from_module+0x34>)
 80004c8:	22c1      	movs	r2, #193	; 0xc1
 80004ca:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;			// Number of register for read
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <read_all_settings_from_module+0x34>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;			// How many registers must be read
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <read_all_settings_from_module+0x34>)
 80004d4:	2208      	movs	r2, #8
 80004d6:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 80004d8:	2203      	movs	r2, #3
 80004da:	4904      	ldr	r1, [pc, #16]	; (80004ec <read_all_settings_from_module+0x34>)
 80004dc:	4804      	ldr	r0, [pc, #16]	; (80004f0 <read_all_settings_from_module+0x38>)
 80004de:	f005 fca2 	bl	8005e26 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80004e2:	2064      	movs	r0, #100	; 0x64
 80004e4:	f002 fe7a 	bl	80031dc <HAL_Delay>

	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200000ec 	.word	0x200000ec
 80004f0:	20000644 	.word	0x20000644

080004f4 <init_lora_TX>:
//----------------------------------------------------------------------------------------
bool init_lora_TX(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	// з зчитаними даними конфіг регістрів. Якщо співпадає повністю, тоді записати в
	// глобальну змінну що модуль ініціалізований нормально

	static uint8_t data[10] = {0};

	set_config_deep_sleep_mode();
 80004f8:	f000 f8aa 	bl	8000650 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 80004fc:	2064      	movs	r0, #100	; 0x64
 80004fe:	f002 fe6d 	bl	80031dc <HAL_Delay>

	// Init module
	// Descripe settings structure
	data[0] = 0xC0;		// 0xC0 - Set register command
 8000502:	4b1e      	ldr	r3, [pc, #120]	; (800057c <init_lora_TX+0x88>)
 8000504:	22c0      	movs	r2, #192	; 0xc0
 8000506:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8000508:	4b1c      	ldr	r3, [pc, #112]	; (800057c <init_lora_TX+0x88>)
 800050a:	2200      	movs	r2, #0
 800050c:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <init_lora_TX+0x88>)
 8000510:	2203      	movs	r2, #3
 8000512:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <init_lora_TX+0x88>)
 8000516:	2212      	movs	r2, #18
 8000518:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <init_lora_TX+0x88>)
 800051c:	2234      	movs	r2, #52	; 0x34
 800051e:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register (see in Datasheet)
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <init_lora_TX+0x88>)
 8000522:	2262      	movs	r2, #98	; 0x62
 8000524:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 8000526:	2206      	movs	r2, #6
 8000528:	4914      	ldr	r1, [pc, #80]	; (800057c <init_lora_TX+0x88>)
 800052a:	4815      	ldr	r0, [pc, #84]	; (8000580 <init_lora_TX+0x8c>)
 800052c:	f005 fc7b 	bl	8005e26 <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 8000530:	200a      	movs	r0, #10
 8000532:	f002 fe53 	bl	80031dc <HAL_Delay>

	memset(data, 0, sizeof(data));
 8000536:	220a      	movs	r2, #10
 8000538:	2100      	movs	r1, #0
 800053a:	4810      	ldr	r0, [pc, #64]	; (800057c <init_lora_TX+0x88>)
 800053c:	f006 f918 	bl	8006770 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <init_lora_TX+0x88>)
 8000542:	22c0      	movs	r2, #192	; 0xc0
 8000544:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <init_lora_TX+0x88>)
 8000548:	2205      	movs	r2, #5
 800054a:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <init_lora_TX+0x88>)
 800054e:	2201      	movs	r2, #1
 8000550:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <init_lora_TX+0x88>)
 8000554:	2200      	movs	r2, #0
 8000556:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8000558:	2204      	movs	r2, #4
 800055a:	4908      	ldr	r1, [pc, #32]	; (800057c <init_lora_TX+0x88>)
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <init_lora_TX+0x8c>)
 800055e:	f005 fc62 	bl	8005e26 <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 8000562:	200a      	movs	r0, #10
 8000564:	f002 fe3a 	bl	80031dc <HAL_Delay>
	///////////////

	read_all_settings_from_module();
 8000568:	f7ff ffa6 	bl	80004b8 <read_all_settings_from_module>
	set_WOR_TX_mode();
 800056c:	f000 f894 	bl	8000698 <set_WOR_TX_mode>
	HAL_Delay(100);
 8000570:	2064      	movs	r0, #100	; 0x64
 8000572:	f002 fe33 	bl	80031dc <HAL_Delay>
}
 8000576:	bf00      	nop
 8000578:	4618      	mov	r0, r3
 800057a:	bd80      	pop	{r7, pc}
 800057c:	200000f8 	.word	0x200000f8
 8000580:	20000644 	.word	0x20000644

08000584 <init_lora_RX>:
//----------------------------------------------------------------------------------------
bool init_lora_RX(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	static uint8_t data[10] = {0};
	set_config_deep_sleep_mode();
 8000588:	f000 f862 	bl	8000650 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 800058c:	2064      	movs	r0, #100	; 0x64
 800058e:	f002 fe25 	bl	80031dc <HAL_Delay>

	data[0] = 0xC0;
 8000592:	4b1e      	ldr	r3, [pc, #120]	; (800060c <init_lora_RX+0x88>)
 8000594:	22c0      	movs	r2, #192	; 0xc0
 8000596:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <init_lora_RX+0x88>)
 800059a:	2200      	movs	r2, #0
 800059c:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 800059e:	4b1b      	ldr	r3, [pc, #108]	; (800060c <init_lora_RX+0x88>)
 80005a0:	2203      	movs	r2, #3
 80005a2:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <init_lora_RX+0x88>)
 80005a6:	2212      	movs	r2, #18
 80005a8:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <init_lora_RX+0x88>)
 80005ac:	2234      	movs	r2, #52	; 0x34
 80005ae:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register ()
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <init_lora_RX+0x88>)
 80005b2:	2262      	movs	r2, #98	; 0x62
 80005b4:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 80005b6:	2206      	movs	r2, #6
 80005b8:	4914      	ldr	r1, [pc, #80]	; (800060c <init_lora_RX+0x88>)
 80005ba:	4815      	ldr	r0, [pc, #84]	; (8000610 <init_lora_RX+0x8c>)
 80005bc:	f005 fc33 	bl	8005e26 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f002 fe0b 	bl	80031dc <HAL_Delay>

	memset(data, 0, sizeof(data));
 80005c6:	220a      	movs	r2, #10
 80005c8:	2100      	movs	r1, #0
 80005ca:	4810      	ldr	r0, [pc, #64]	; (800060c <init_lora_RX+0x88>)
 80005cc:	f006 f8d0 	bl	8006770 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <init_lora_RX+0x88>)
 80005d2:	22c0      	movs	r2, #192	; 0xc0
 80005d4:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <init_lora_RX+0x88>)
 80005d8:	2205      	movs	r2, #5
 80005da:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <init_lora_RX+0x88>)
 80005de:	2201      	movs	r2, #1
 80005e0:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <init_lora_RX+0x88>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 80005e8:	2204      	movs	r2, #4
 80005ea:	4908      	ldr	r1, [pc, #32]	; (800060c <init_lora_RX+0x88>)
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <init_lora_RX+0x8c>)
 80005ee:	f005 fc1a 	bl	8005e26 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80005f2:	2064      	movs	r0, #100	; 0x64
 80005f4:	f002 fdf2 	bl	80031dc <HAL_Delay>

	read_settings_from_module();
 80005f8:	f000 f80c 	bl	8000614 <read_settings_from_module>

	set_WOR_RX_mode();
 80005fc:	f000 f83a 	bl	8000674 <set_WOR_RX_mode>

	HAL_Delay(100);
 8000600:	2064      	movs	r0, #100	; 0x64
 8000602:	f002 fdeb 	bl	80031dc <HAL_Delay>
}
 8000606:	bf00      	nop
 8000608:	4618      	mov	r0, r3
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000104 	.word	0x20000104
 8000610:	20000644 	.word	0x20000644

08000614 <read_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_settings_from_module(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 8000618:	f000 f81a 	bl	8000650 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 800061c:	200a      	movs	r0, #10
 800061e:	f002 fddd 	bl	80031dc <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <read_settings_from_module+0x34>)
 8000624:	22c1      	movs	r2, #193	; 0xc1
 8000626:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <read_settings_from_module+0x34>)
 800062a:	2200      	movs	r2, #0
 800062c:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <read_settings_from_module+0x34>)
 8000630:	2208      	movs	r2, #8
 8000632:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 8000634:	2203      	movs	r2, #3
 8000636:	4904      	ldr	r1, [pc, #16]	; (8000648 <read_settings_from_module+0x34>)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <read_settings_from_module+0x38>)
 800063a:	f005 fbf4 	bl	8005e26 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 800063e:	2064      	movs	r0, #100	; 0x64
 8000640:	f002 fdcc 	bl	80031dc <HAL_Delay>
	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate

	return true;
 8000644:	bf00      	nop
}
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000110 	.word	0x20000110
 800064c:	20000644 	.word	0x20000644

08000650 <set_config_deep_sleep_mode>:
//-------------------------------------------------------------------------------------------------
void set_config_deep_sleep_mode (void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	// Function use for go to deep sleep and configuration mode
	// Set M0 and M1 PINs
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <set_config_deep_sleep_mode+0x20>)
 800065c:	f003 f93b 	bl	80038d6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2101      	movs	r1, #1
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <set_config_deep_sleep_mode+0x20>)
 8000666:	f003 f936 	bl	80038d6 <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40010c00 	.word	0x40010c00

08000674 <set_WOR_RX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_RX_mode (void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Receiving mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <set_WOR_RX_mode+0x20>)
 8000680:	f003 f929 	bl	80038d6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2101      	movs	r1, #1
 8000688:	4802      	ldr	r0, [pc, #8]	; (8000694 <set_WOR_RX_mode+0x20>)
 800068a:	f003 f924 	bl	80038d6 <HAL_GPIO_WritePin>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40010c00 	.word	0x40010c00

08000698 <set_WOR_TX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_TX_mode (void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Transmitting mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <set_WOR_TX_mode+0x20>)
 80006a4:	f003 f917 	bl	80038d6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2101      	movs	r1, #1
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <set_WOR_TX_mode+0x20>)
 80006ae:	f003 f912 	bl	80038d6 <HAL_GPIO_WritePin>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40010c00 	.word	0x40010c00

080006bc <NRF24L01_RX_Mode>:
		NRF24L01_Receive();
	}
}
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80006c2:	2300      	movs	r3, #0
 80006c4:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 fb96 	bl	8000df8 <NRF24_ReadReg>
 80006cc:	4603      	mov	r3, r0
 80006ce:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP) | (1<<PRIM_RX);    	// Power up module. Write PWR_UP and PRIM_RX bits
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f043 0303 	orr.w	r3, r3, #3
 80006d6:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	4619      	mov	r1, r3
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 fbbf 	bl	8000e60 <NRF24_WriteReg>
  NRF24_WriteReg(CONFIG, 0x33);     		//  IRQ WORK  ~ 130 us
 80006e2:	2133      	movs	r1, #51	; 0x33
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 fbbb 	bl	8000e60 <NRF24_WriteReg>
  CE_SET;
 80006ea:	2201      	movs	r2, #1
 80006ec:	2108      	movs	r1, #8
 80006ee:	4807      	ldr	r0, [pc, #28]	; (800070c <NRF24L01_RX_Mode+0x50>)
 80006f0:	f003 f8f1 	bl	80038d6 <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 80006f4:	2096      	movs	r0, #150	; 0x96
 80006f6:	f000 fb5d 	bl	8000db4 <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 80006fa:	f000 fc65 	bl	8000fc8 <NRF24_FlushRX>
  NRF24_FlushTX();
 80006fe:	f000 fc85 	bl	800100c <NRF24_FlushTX>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40010800 	.word	0x40010800

08000710 <NRF24L01_Receive>:
//----------------------------------------------------------------------------------------
// Function waite Low IRQ signal from NRF module
bool NRF24L01_Receive(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
	if(rx_flag == 1)
 8000716:	4b29      	ldr	r3, [pc, #164]	; (80007bc <NRF24L01_Receive+0xac>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b01      	cmp	r3, #1
 800071e:	d148      	bne.n	80007b2 <NRF24L01_Receive+0xa2>
	{
		// Detect what's pipes data come from
		if(pipe == 0)
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <NRF24L01_Receive+0xb0>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d11f      	bne.n	8000768 <NRF24L01_Receive+0x58>
		{
			ssd1306_SetCursor(0, 16);
 8000728:	2110      	movs	r1, #16
 800072a:	2000      	movs	r0, #0
 800072c:	f000 ff12 	bl	8001554 <ssd1306_SetCursor>
			char str_rx_oled_buffer_pipe_0[15] = {0};
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	f8c3 2007 	str.w	r2, [r3, #7]
			strcpy(str_rx_oled_buffer_pipe_0, "P0 data:");
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <NRF24L01_Receive+0xb4>)
 8000748:	ca07      	ldmia	r2, {r0, r1, r2}
 800074a:	c303      	stmia	r3!, {r0, r1}
 800074c:	701a      	strb	r2, [r3, #0]
			strcat(str_rx_oled_buffer_pipe_0, RX_BUF);
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	491d      	ldr	r1, [pc, #116]	; (80007c8 <NRF24L01_Receive+0xb8>)
 8000754:	4618      	mov	r0, r3
 8000756:	f006 f8e9 	bl	800692c <strcat>
			ssd1306_WriteString(str_rx_oled_buffer_pipe_0,  Font_7x10, White);
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <NRF24L01_Receive+0xbc>)
 800075c:	f107 0010 	add.w	r0, r7, #16
 8000760:	2301      	movs	r3, #1
 8000762:	ca06      	ldmia	r2, {r1, r2}
 8000764:	f000 fed0 	bl	8001508 <ssd1306_WriteString>
		}
		if(pipe == 1)
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <NRF24L01_Receive+0xb0>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d11b      	bne.n	80007a8 <NRF24L01_Receive+0x98>
		{
			ssd1306_SetCursor(0, 26);
 8000770:	211a      	movs	r1, #26
 8000772:	2000      	movs	r0, #0
 8000774:	f000 feee 	bl	8001554 <ssd1306_SetCursor>
			char str_rx_oled_buffer_pipe_1[15] = {0};
 8000778:	2300      	movs	r3, #0
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	f8c3 2007 	str.w	r2, [r3, #7]
			strcpy(str_rx_oled_buffer_pipe_1, "P1 data:");
 8000788:	463b      	mov	r3, r7
 800078a:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <NRF24L01_Receive+0xc0>)
 800078c:	ca07      	ldmia	r2, {r0, r1, r2}
 800078e:	c303      	stmia	r3!, {r0, r1}
 8000790:	701a      	strb	r2, [r3, #0]
			strcat(str_rx_oled_buffer_pipe_1, RX_BUF);
 8000792:	463b      	mov	r3, r7
 8000794:	490c      	ldr	r1, [pc, #48]	; (80007c8 <NRF24L01_Receive+0xb8>)
 8000796:	4618      	mov	r0, r3
 8000798:	f006 f8c8 	bl	800692c <strcat>
			ssd1306_WriteString(str_rx_oled_buffer_pipe_1,  Font_7x10, White);
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <NRF24L01_Receive+0xbc>)
 800079e:	4638      	mov	r0, r7
 80007a0:	2301      	movs	r3, #1
 80007a2:	ca06      	ldmia	r2, {r1, r2}
 80007a4:	f000 feb0 	bl	8001508 <ssd1306_WriteString>
		}
		// Print RX data on OLED
		ssd1306_UpdateScreen();
 80007a8:	f000 fd9e 	bl	80012e8 <ssd1306_UpdateScreen>
		rx_flag = 0;
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <NRF24L01_Receive+0xac>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
	}
}
 80007b2:	bf00      	nop
 80007b4:	4618      	mov	r0, r3
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000126 	.word	0x20000126
 80007c0:	2000014c 	.word	0x2000014c
 80007c4:	080070f0 	.word	0x080070f0
 80007c8:	2000011c 	.word	0x2000011c
 80007cc:	20000014 	.word	0x20000014
 80007d0:	080070fc 	.word	0x080070fc

080007d4 <NRF24_init_RX_mode>:
//----------------------------------------------------------------------------------------
void NRF24_init_RX_mode(void)                  // RECEIVE
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	reset_nrf24l01();	// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80007d8:	f000 fc7a 	bl	80010d0 <reset_nrf24l01>

	tx_or_rx_mode = rx_mode;		// For block interrupt HAL_GPIO_EXTI_Callback
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <NRF24_init_RX_mode+0xb4>)
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <NRF24_init_RX_mode+0xb8>)
 80007e2:	701a      	strb	r2, [r3, #0]

	CE_RESET;
 80007e4:	2200      	movs	r2, #0
 80007e6:	2108      	movs	r1, #8
 80007e8:	4829      	ldr	r0, [pc, #164]	; (8000890 <NRF24_init_RX_mode+0xbc>)
 80007ea:	f003 f874 	bl	80038d6 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 80007ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80007f2:	f000 fadf 	bl	8000db4 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter) 0b 0000 1010
 80007f6:	210a      	movs	r1, #10
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 fb31 	bl	8000e60 <NRF24_WriteReg>

	DelayMicro(5000);
 80007fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000802:	f000 fad7 	bl	8000db4 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x03); 			// Enable Pipe0 and Pipe1
 8000806:	2103      	movs	r1, #3
 8000808:	2001      	movs	r0, #1
 800080a:	f000 fb29 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x03); 		// Enable Pipe0 and Pipe1
 800080e:	2103      	movs	r1, #3
 8000810:	2002      	movs	r0, #2
 8000812:	f000 fb25 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8000816:	2101      	movs	r1, #1
 8000818:	2003      	movs	r0, #3
 800081a:	f000 fb21 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 800081e:	215f      	movs	r1, #95	; 0x5f
 8000820:	2004      	movs	r0, #4
 8000822:	f000 fb1d 	bl	8000e60 <NRF24_WriteReg>
	NRF24_ToggleFeatures();					// Send activated command
 8000826:	f000 fb49 	bl	8000ebc <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);				// Turn off all FEATURE register
 800082a:	2100      	movs	r1, #0
 800082c:	201d      	movs	r0, #29
 800082e:	f000 fb17 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0); 				// Turn off all payload length data pipe
 8000832:	2100      	movs	r1, #0
 8000834:	201c      	movs	r0, #28
 8000836:	f000 fb13 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800083a:	2170      	movs	r1, #112	; 0x70
 800083c:	2007      	movs	r0, #7
 800083e:	f000 fb0f 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz  // was 76
 8000842:	214c      	movs	r1, #76	; 0x4c
 8000844:	2005      	movs	r0, #5
 8000846:	f000 fb0b 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26); 	    // TX_PWR:0dBm, Datarate:250kbps
 800084a:	2126      	movs	r1, #38	; 0x26
 800084c:	2006      	movs	r0, #6
 800084e:	f000 fb07 	bl	8000e60 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_0, TX_ADR_WIDTH);		//	set up Transmit address. Used for a PTX device only.
 8000852:	2203      	movs	r2, #3
 8000854:	490f      	ldr	r1, [pc, #60]	; (8000894 <NRF24_init_RX_mode+0xc0>)
 8000856:	2010      	movs	r0, #16
 8000858:	f000 fb84 	bl	8000f64 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_0, TX_ADR_WIDTH);    // Set up pipe 0 address
 800085c:	2203      	movs	r2, #3
 800085e:	490d      	ldr	r1, [pc, #52]	; (8000894 <NRF24_init_RX_mode+0xc0>)
 8000860:	200a      	movs	r0, #10
 8000862:	f000 fb7f 	bl	8000f64 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS_1, TX_ADR_WIDTH);    // Set up pipe 1 address
 8000866:	2203      	movs	r2, #3
 8000868:	490b      	ldr	r1, [pc, #44]	; (8000898 <NRF24_init_RX_mode+0xc4>)
 800086a:	200b      	movs	r0, #11
 800086c:	f000 fb7a 	bl	8000f64 <NRF24_Write_Buf>

	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 0
 8000870:	210a      	movs	r1, #10
 8000872:	2011      	movs	r0, #17
 8000874:	f000 faf4 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 1
 8000878:	210a      	movs	r1, #10
 800087a:	2012      	movs	r0, #18
 800087c:	f000 faf0 	bl	8000e60 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 8000880:	f7ff ff1c 	bl	80006bc <NRF24L01_RX_Mode>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000011a 	.word	0x2000011a
 800088c:	20000003 	.word	0x20000003
 8000890:	40010800 	.word	0x40010800
 8000894:	20000004 	.word	0x20000004
 8000898:	20000008 	.word	0x20000008

0800089c <IRQ_Callback>:

//----------------------------------------------------------------------------------------
// Callback generate when stm32 get falling  signal from IRQ pin (NRF module show that it has data in buffer)
void IRQ_Callback(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 80008a2:	2301      	movs	r3, #1
 80008a4:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ae:	4814      	ldr	r0, [pc, #80]	; (8000900 <IRQ_Callback+0x64>)
 80008b0:	f003 f829 	bl	8003906 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80008b4:	200a      	movs	r0, #10
 80008b6:	f000 fa7d 	bl	8000db4 <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 80008ba:	2007      	movs	r0, #7
 80008bc:	f000 fa9c 	bl	8000df8 <NRF24_ReadReg>
 80008c0:	4603      	mov	r3, r0
 80008c2:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d013      	beq.n	80008f6 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <IRQ_Callback+0x68>)
 80008dc:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80008de:	220a      	movs	r2, #10
 80008e0:	4909      	ldr	r1, [pc, #36]	; (8000908 <IRQ_Callback+0x6c>)
 80008e2:	2061      	movs	r0, #97	; 0x61
 80008e4:	f000 fb14 	bl	8000f10 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 80008e8:	2140      	movs	r1, #64	; 0x40
 80008ea:	2007      	movs	r0, #7
 80008ec:	f000 fab8 	bl	8000e60 <NRF24_WriteReg>
		rx_flag = 1;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <IRQ_Callback+0x70>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
	}
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40011000 	.word	0x40011000
 8000904:	2000014c 	.word	0x2000014c
 8000908:	2000011c 	.word	0x2000011c
 800090c:	20000126 	.word	0x20000126

08000910 <NRF24L01_RX_Mode_for_TX_mode>:
		NRF24L01_Transmission();
	}
}
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode_for_TX_mode(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 8000916:	2300      	movs	r3, #0
 8000918:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 800091a:	2000      	movs	r0, #0
 800091c:	f000 fa6c 	bl	8000df8 <NRF24_ReadReg>
 8000920:	4603      	mov	r3, r0
 8000922:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f043 0303 	orr.w	r3, r3, #3
 800092a:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	4619      	mov	r1, r3
 8000930:	2000      	movs	r0, #0
 8000932:	f000 fa95 	bl	8000e60 <NRF24_WriteReg>
  CE_SET;
 8000936:	2201      	movs	r2, #1
 8000938:	2108      	movs	r1, #8
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <NRF24L01_RX_Mode_for_TX_mode+0x48>)
 800093c:	f002 ffcb 	bl	80038d6 <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 8000940:	2096      	movs	r0, #150	; 0x96
 8000942:	f000 fa37 	bl	8000db4 <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 8000946:	f000 fb3f 	bl	8000fc8 <NRF24_FlushRX>
  NRF24_FlushTX();
 800094a:	f000 fb5f 	bl	800100c <NRF24_FlushTX>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40010800 	.word	0x40010800

0800095c <NRF24_init_TX_mode>:
//----------------------------------------------------------------------------------------
void NRF24_init_TX_mode(void)    // TRANSMITTER
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	reset_nrf24l01();	// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8000960:	f000 fbb6 	bl	80010d0 <reset_nrf24l01>

	tx_or_rx_mode = tx_mode;		// For block interrupt HAL_GPIO_EXTI_Callback
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <NRF24_init_TX_mode+0xa8>)
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <NRF24_init_TX_mode+0xac>)
 800096a:	701a      	strb	r2, [r3, #0]

	CE_RESET;
 800096c:	2200      	movs	r2, #0
 800096e:	2108      	movs	r1, #8
 8000970:	4826      	ldr	r0, [pc, #152]	; (8000a0c <NRF24_init_TX_mode+0xb0>)
 8000972:	f002 ffb0 	bl	80038d6 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8000976:	f241 3088 	movw	r0, #5000	; 0x1388
 800097a:	f000 fa1b 	bl	8000db4 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800097e:	210a      	movs	r1, #10
 8000980:	2000      	movs	r0, #0
 8000982:	f000 fa6d 	bl	8000e60 <NRF24_WriteReg>

	DelayMicro(5000);
 8000986:	f241 3088 	movw	r0, #5000	; 0x1388
 800098a:	f000 fa13 	bl	8000db4 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 800098e:	2101      	movs	r1, #1
 8000990:	2001      	movs	r0, #1
 8000992:	f000 fa65 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8000996:	2101      	movs	r1, #1
 8000998:	2002      	movs	r0, #2
 800099a:	f000 fa61 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800099e:	2101      	movs	r1, #1
 80009a0:	2003      	movs	r0, #3
 80009a2:	f000 fa5d 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 80009a6:	215f      	movs	r1, #95	; 0x5f
 80009a8:	2004      	movs	r0, #4
 80009aa:	f000 fa59 	bl	8000e60 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 80009ae:	f000 fa85 	bl	8000ebc <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	201d      	movs	r0, #29
 80009b6:	f000 fa53 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 80009ba:	2100      	movs	r1, #0
 80009bc:	201c      	movs	r0, #28
 80009be:	f000 fa4f 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 80009c2:	2170      	movs	r1, #112	; 0x70
 80009c4:	2007      	movs	r0, #7
 80009c6:	f000 fa4b 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 80009ca:	214c      	movs	r1, #76	; 0x4c
 80009cc:	2005      	movs	r0, #5
 80009ce:	f000 fa47 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 80009d2:	2126      	movs	r1, #38	; 0x26
 80009d4:	2006      	movs	r0, #6
 80009d6:	f000 fa43 	bl	8000e60 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 80009da:	2203      	movs	r2, #3
 80009dc:	490c      	ldr	r1, [pc, #48]	; (8000a10 <NRF24_init_TX_mode+0xb4>)
 80009de:	2010      	movs	r0, #16
 80009e0:	f000 fac0 	bl	8000f64 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 80009e4:	2203      	movs	r2, #3
 80009e6:	490a      	ldr	r1, [pc, #40]	; (8000a10 <NRF24_init_TX_mode+0xb4>)
 80009e8:	200a      	movs	r0, #10
 80009ea:	f000 fabb 	bl	8000f64 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 80009ee:	210a      	movs	r1, #10
 80009f0:	2011      	movs	r0, #17
 80009f2:	f000 fa35 	bl	8000e60 <NRF24_WriteReg>

	NRF24L01_RX_Mode_for_TX_mode();
 80009f6:	f7ff ff8b 	bl	8000910 <NRF24L01_RX_Mode_for_TX_mode>

	read_config_registers();	// For debug
 80009fa:	f000 fb29 	bl	8001050 <read_config_registers>
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000002 	.word	0x20000002
 8000a08:	20000003 	.word	0x20000003
 8000a0c:	40010800 	.word	0x40010800
 8000a10:	2000000c 	.word	0x2000000c

08000a14 <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	4908      	ldr	r1, [pc, #32]	; (8000a40 <NRF24L01_TX_Mode+0x2c>)
 8000a20:	2010      	movs	r0, #16
 8000a22:	f000 fa9f 	bl	8000f64 <NRF24_Write_Buf>
  CE_RESET;
 8000a26:	2200      	movs	r2, #0
 8000a28:	2108      	movs	r1, #8
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <NRF24L01_TX_Mode+0x30>)
 8000a2c:	f002 ff53 	bl	80038d6 <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 8000a30:	f000 faca 	bl	8000fc8 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000a34:	f000 faea 	bl	800100c <NRF24_FlushTX>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000000c 	.word	0x2000000c
 8000a44:	40010800 	.word	0x40010800

08000a48 <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	4613      	mov	r3, r2
 8000a56:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	4813      	ldr	r0, [pc, #76]	; (8000aac <NRF24_Transmit+0x64>)
 8000a5e:	f002 ff3a 	bl	80038d6 <HAL_GPIO_WritePin>
  CS_ON;
 8000a62:	2200      	movs	r2, #0
 8000a64:	2110      	movs	r1, #16
 8000a66:	4811      	ldr	r0, [pc, #68]	; (8000aac <NRF24_Transmit+0x64>)
 8000a68:	f002 ff35 	bl	80038d6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 8000a6c:	1df9      	adds	r1, r7, #7
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	2201      	movs	r2, #1
 8000a74:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <NRF24_Transmit+0x68>)
 8000a76:	f004 f86f 	bl	8004b58 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f000 f99a 	bl	8000db4 <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 8000a80:	79bb      	ldrb	r3, [r7, #6]
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a88:	6839      	ldr	r1, [r7, #0]
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <NRF24_Transmit+0x68>)
 8000a8c:	f004 f864 	bl	8004b58 <HAL_SPI_Transmit>
  CS_OFF;
 8000a90:	2201      	movs	r2, #1
 8000a92:	2110      	movs	r1, #16
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <NRF24_Transmit+0x64>)
 8000a96:	f002 ff1e 	bl	80038d6 <HAL_GPIO_WritePin>
  CE_SET;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <NRF24_Transmit+0x64>)
 8000aa0:	f002 ff19 	bl	80038d6 <HAL_GPIO_WritePin>
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	200006d0 	.word	0x200006d0

08000ab4 <NRF24L01_Send>:
//----------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ffa5 	bl	8000a14 <NRF24L01_TX_Mode>

  regval = NRF24_ReadReg(CONFIG);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f994 	bl	8000df8 <NRF24_ReadReg>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	73bb      	strb	r3, [r7, #14]

  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 8000ad4:	7bbb      	ldrb	r3, [r7, #14]
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 8000adc:	7bbb      	ldrb	r3, [r7, #14]
 8000ade:	f023 0301 	bic.w	r3, r3, #1
 8000ae2:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 f9b9 	bl	8000e60 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 8000aee:	2096      	movs	r0, #150	; 0x96
 8000af0:	f000 f960 	bl	8000db4 <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 8000af4:	220a      	movs	r2, #10
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	20a0      	movs	r0, #160	; 0xa0
 8000afa:	f7ff ffa5 	bl	8000a48 <NRF24_Transmit>

  CE_SET;
 8000afe:	2201      	movs	r2, #1
 8000b00:	2108      	movs	r1, #8
 8000b02:	481c      	ldr	r0, [pc, #112]	; (8000b74 <NRF24L01_Send+0xc0>)
 8000b04:	f002 fee7 	bl	80038d6 <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 8000b08:	200f      	movs	r0, #15
 8000b0a:	f000 f953 	bl	8000db4 <DelayMicro>
  CE_RESET;
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2108      	movs	r1, #8
 8000b12:	4818      	ldr	r0, [pc, #96]	; (8000b74 <NRF24L01_Send+0xc0>)
 8000b14:	f002 fedf 	bl	80038d6 <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 8000b18:	bf00      	nop
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4815      	ldr	r0, [pc, #84]	; (8000b74 <NRF24L01_Send+0xc0>)
 8000b1e:	f002 fec3 	bl	80038a8 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d0f8      	beq.n	8000b1a <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 8000b28:	2007      	movs	r0, #7
 8000b2a:	f000 f965 	bl	8000df8 <NRF24_ReadReg>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	f003 0320 	and.w	r3, r3, #32
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d004      	beq.n	8000b46 <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	2007      	movs	r0, #7
 8000b40:	f000 f98e 	bl	8000e60 <NRF24_WriteReg>
 8000b44:	e00a      	b.n	8000b5c <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d005      	beq.n	8000b5c <NRF24L01_Send+0xa8>
  {

    NRF24_WriteReg(STATUS_NRF, 0x10);
 8000b50:	2110      	movs	r1, #16
 8000b52:	2007      	movs	r0, #7
 8000b54:	f000 f984 	bl	8000e60 <NRF24_WriteReg>
    NRF24_FlushTX();
 8000b58:	f000 fa58 	bl	800100c <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 8000b5c:	2008      	movs	r0, #8
 8000b5e:	f000 f94b 	bl	8000df8 <NRF24_ReadReg>
 8000b62:	4603      	mov	r3, r0
 8000b64:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode

  NRF24L01_RX_Mode_for_TX_mode();
 8000b66:	f7ff fed3 	bl	8000910 <NRF24L01_RX_Mode_for_TX_mode>

  return regval;
 8000b6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40010800 	.word	0x40010800

08000b78 <NRF24L01_Transmission>:
//----------------------------------------------------------------------------------------
void NRF24L01_Transmission(void)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b095      	sub	sp, #84	; 0x54
 8000b7c:	af00      	add	r7, sp, #0
	char ctr[5] = {0};
 8000b7e:	2300      	movs	r3, #0
 8000b80:	647b      	str	r3, [r7, #68]	; 0x44
 8000b82:	2300      	movs	r3, #0
 8000b84:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	char ctr_buf[5] = {0};
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

	uint8_t retr_cnt, dt = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	int test_data = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	64fb      	str	r3, [r7, #76]	; 0x4c

	while(1)
	{
		// Test transmit data

		uint8_t buf2[20]={0};
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
		sprintf(buf2, "%d", test_data);
 8000bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bb4:	4976      	ldr	r1, [pc, #472]	; (8000d90 <NRF24L01_Transmission+0x218>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f005 fe98 	bl	80068ec <siprintf>

		// Print transmit data
		uint8_t test[25] = {0};
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	751a      	strb	r2, [r3, #20]
		uint8_t test_i[10] = {0};
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	809a      	strh	r2, [r3, #4]

		ssd1306_SetCursor(0, 16);
 8000bde:	2110      	movs	r1, #16
 8000be0:	2000      	movs	r0, #0
 8000be2:	f000 fcb7 	bl	8001554 <ssd1306_SetCursor>
		strcpy(test, "Data:");
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4a6a      	ldr	r2, [pc, #424]	; (8000d94 <NRF24L01_Transmission+0x21c>)
 8000bec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bf0:	6018      	str	r0, [r3, #0]
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	8019      	strh	r1, [r3, #0]

		ssd1306_WriteString(test,  Font_7x10, White);
 8000bf6:	4a68      	ldr	r2, [pc, #416]	; (8000d98 <NRF24L01_Transmission+0x220>)
 8000bf8:	f107 000c 	add.w	r0, r7, #12
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	ca06      	ldmia	r2, {r1, r2}
 8000c00:	f000 fc82 	bl	8001508 <ssd1306_WriteString>

		dt = NRF24L01_Send(buf2);						// Transmit data
 8000c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff53 	bl	8000ab4 <NRF24L01_Send>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

		strcat(test, buf2);
 8000c14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f005 fe84 	bl	800692c <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000c24:	4a5c      	ldr	r2, [pc, #368]	; (8000d98 <NRF24L01_Transmission+0x220>)
 8000c26:	f107 000c 	add.w	r0, r7, #12
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	ca06      	ldmia	r2, {r1, r2}
 8000c2e:	f000 fc6b 	bl	8001508 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000c32:	f000 fb59 	bl	80012e8 <ssd1306_UpdateScreen>

		//dt = NRF24L01_Send(buf2);						// Transmit data

		retr_cnt = dt & 0xF;
 8000c36:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		retr_cnt_full += retr_cnt;
 8000c42:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8000c46:	4b55      	ldr	r3, [pc, #340]	; (8000d9c <NRF24L01_Transmission+0x224>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a53      	ldr	r2, [pc, #332]	; (8000d9c <NRF24L01_Transmission+0x224>)
 8000c4e:	6013      	str	r3, [r2, #0]

		// Print transmit counter
		memset(test, 0, sizeof(test));
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2219      	movs	r2, #25
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f005 fd89 	bl	8006770 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000c5e:	463b      	mov	r3, r7
 8000c60:	220a      	movs	r2, #10
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f005 fd83 	bl	8006770 <memset>

		ssd1306_SetCursor(0, 26);
 8000c6a:	211a      	movs	r1, #26
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 fc71 	bl	8001554 <ssd1306_SetCursor>
		strcpy(test, "Conut trans:");
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4a4a      	ldr	r2, [pc, #296]	; (8000da0 <NRF24L01_Transmission+0x228>)
 8000c78:	461c      	mov	r4, r3
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c7e:	c407      	stmia	r4!, {r0, r1, r2}
 8000c80:	7023      	strb	r3, [r4, #0]
		// number in string
		itoa(i, test_i, 10);
 8000c82:	4b48      	ldr	r3, [pc, #288]	; (8000da4 <NRF24L01_Transmission+0x22c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4639      	mov	r1, r7
 8000c88:	220a      	movs	r2, #10
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f005 fd60 	bl	8006750 <itoa>
		strcat(test, test_i);
 8000c90:	463a      	mov	r2, r7
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f005 fe47 	bl	800692c <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000c9e:	4a3e      	ldr	r2, [pc, #248]	; (8000d98 <NRF24L01_Transmission+0x220>)
 8000ca0:	f107 000c 	add.w	r0, r7, #12
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	ca06      	ldmia	r2, {r1, r2}
 8000ca8:	f000 fc2e 	bl	8001508 <ssd1306_WriteString>

		// Print retransmeet counter
		memset(test, 0, sizeof(test));
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2219      	movs	r2, #25
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f005 fd5b 	bl	8006770 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000cba:	463b      	mov	r3, r7
 8000cbc:	220a      	movs	r2, #10
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f005 fd55 	bl	8006770 <memset>

		ssd1306_SetCursor(0, 36);
 8000cc6:	2124      	movs	r1, #36	; 0x24
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 fc43 	bl	8001554 <ssd1306_SetCursor>
		strcpy(test, "Retransm:");
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	4a35      	ldr	r2, [pc, #212]	; (8000da8 <NRF24L01_Transmission+0x230>)
 8000cd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cd6:	c303      	stmia	r3!, {r0, r1}
 8000cd8:	801a      	strh	r2, [r3, #0]
		itoa(retr_cnt_full, test_i, 10);
 8000cda:	4b30      	ldr	r3, [pc, #192]	; (8000d9c <NRF24L01_Transmission+0x224>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4639      	mov	r1, r7
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f005 fd34 	bl	8006750 <itoa>
		strcat(test, test_i);
 8000ce8:	463a      	mov	r2, r7
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f005 fe1b 	bl	800692c <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000cf6:	4a28      	ldr	r2, [pc, #160]	; (8000d98 <NRF24L01_Transmission+0x220>)
 8000cf8:	f107 000c 	add.w	r0, r7, #12
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	ca06      	ldmia	r2, {r1, r2}
 8000d00:	f000 fc02 	bl	8001508 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000d04:	f000 faf0 	bl	80012e8 <ssd1306_UpdateScreen>

		// Print lost pacets
		memset(test, 0, sizeof(test));
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2219      	movs	r2, #25
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f005 fd2d 	bl	8006770 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000d16:	463b      	mov	r3, r7
 8000d18:	220a      	movs	r2, #10
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fd27 	bl	8006770 <memset>

		cnt_lost = dt >> 4;
 8000d22:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d26:	091b      	lsrs	r3, r3, #4
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <NRF24L01_Transmission+0x234>)
 8000d2e:	601a      	str	r2, [r3, #0]

		ssd1306_SetCursor(0, 46);
 8000d30:	212e      	movs	r1, #46	; 0x2e
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 fc0e 	bl	8001554 <ssd1306_SetCursor>
		strcpy(test, "Lost:");
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <NRF24L01_Transmission+0x238>)
 8000d3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d42:	6018      	str	r0, [r3, #0]
 8000d44:	3304      	adds	r3, #4
 8000d46:	8019      	strh	r1, [r3, #0]
		itoa(cnt_lost, test_i, 10);
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <NRF24L01_Transmission+0x234>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	220a      	movs	r2, #10
 8000d50:	4618      	mov	r0, r3
 8000d52:	f005 fcfd 	bl	8006750 <itoa>
		strcat(test, test_i);
 8000d56:	463a      	mov	r2, r7
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f005 fde4 	bl	800692c <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000d64:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <NRF24L01_Transmission+0x220>)
 8000d66:	f107 000c 	add.w	r0, r7, #12
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	ca06      	ldmia	r2, {r1, r2}
 8000d6e:	f000 fbcb 	bl	8001508 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000d72:	f000 fab9 	bl	80012e8 <ssd1306_UpdateScreen>

		test_data++;
 8000d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d78:	3301      	adds	r3, #1
 8000d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
		i++;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <NRF24L01_Transmission+0x22c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <NRF24L01_Transmission+0x22c>)
 8000d84:	6013      	str	r3, [r2, #0]

		HAL_Delay(1000);
 8000d86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d8a:	f002 fa27 	bl	80031dc <HAL_Delay>
	{
 8000d8e:	e705      	b.n	8000b9c <NRF24L01_Transmission+0x24>
 8000d90:	08007108 	.word	0x08007108
 8000d94:	0800710c 	.word	0x0800710c
 8000d98:	20000014 	.word	0x20000014
 8000d9c:	20000150 	.word	0x20000150
 8000da0:	08007114 	.word	0x08007114
 8000da4:	20000010 	.word	0x20000010
 8000da8:	08007124 	.word	0x08007124
 8000dac:	20000154 	.word	0x20000154
 8000db0:	08007130 	.word	0x08007130

08000db4 <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <DelayMicro+0x3c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <DelayMicro+0x3c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <DelayMicro+0x40>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	0ddb      	lsrs	r3, r3, #23
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	fb02 f303 	mul.w	r3, r2, r3
 8000dd4:	607b      	str	r3, [r7, #4]
	while (micros--);
 8000dd6:	bf00      	nop
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	1e5a      	subs	r2, r3, #1
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1fa      	bne.n	8000dd8 <DelayMicro+0x24>
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000024 	.word	0x20000024
 8000df4:	ffa71ee7 	.word	0xffa71ee7

08000df8 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 8000e06:	2200      	movs	r2, #0
 8000e08:	2110      	movs	r1, #16
 8000e0a:	4813      	ldr	r0, [pc, #76]	; (8000e58 <NRF24_ReadReg+0x60>)
 8000e0c:	f002 fd63 	bl	80038d6 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8000e10:	f107 020f 	add.w	r2, r7, #15
 8000e14:	1df9      	adds	r1, r7, #7
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	480f      	ldr	r0, [pc, #60]	; (8000e5c <NRF24_ReadReg+0x64>)
 8000e20:	f004 f8e7 	bl	8004ff2 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2b07      	cmp	r3, #7
 8000e28:	d00c      	beq.n	8000e44 <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 8000e2a:	23ff      	movs	r3, #255	; 0xff
 8000e2c:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8000e2e:	f107 020f 	add.w	r2, r7, #15
 8000e32:	f107 010e 	add.w	r1, r7, #14
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <NRF24_ReadReg+0x64>)
 8000e40:	f004 f8d7 	bl	8004ff2 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 8000e44:	2201      	movs	r2, #1
 8000e46:	2110      	movs	r1, #16
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <NRF24_ReadReg+0x60>)
 8000e4a:	f002 fd44 	bl	80038d6 <HAL_GPIO_WritePin>
  return dt;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	200006d0 	.word	0x200006d0

08000e60 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	460a      	mov	r2, r1
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f043 0320 	orr.w	r3, r3, #32
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <NRF24_WriteReg+0x54>)
 8000e80:	f002 fd29 	bl	80038d6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000e84:	1df9      	adds	r1, r7, #7
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	480a      	ldr	r0, [pc, #40]	; (8000eb8 <NRF24_WriteReg+0x58>)
 8000e8e:	f003 fe63 	bl	8004b58 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 8000e92:	1db9      	adds	r1, r7, #6
 8000e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <NRF24_WriteReg+0x58>)
 8000e9c:	f003 fe5c 	bl	8004b58 <HAL_SPI_Transmit>
  CS_OFF;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <NRF24_WriteReg+0x54>)
 8000ea6:	f002 fd16 	bl	80038d6 <HAL_GPIO_WritePin>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	200006d0 	.word	0x200006d0

08000ebc <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 8000ec2:	2350      	movs	r3, #80	; 0x50
 8000ec4:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2110      	movs	r1, #16
 8000eca:	480f      	ldr	r0, [pc, #60]	; (8000f08 <NRF24_ToggleFeatures+0x4c>)
 8000ecc:	f002 fd03 	bl	80038d6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000ed0:	1d39      	adds	r1, r7, #4
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <NRF24_ToggleFeatures+0x50>)
 8000eda:	f003 fe3d 	bl	8004b58 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f7ff ff68 	bl	8000db4 <DelayMicro>
  dt[0] = 0x73;
 8000ee4:	2373      	movs	r3, #115	; 0x73
 8000ee6:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000ee8:	1d39      	adds	r1, r7, #4
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <NRF24_ToggleFeatures+0x50>)
 8000ef2:	f003 fe31 	bl	8004b58 <HAL_SPI_Transmit>
  CS_OFF;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2110      	movs	r1, #16
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <NRF24_ToggleFeatures+0x4c>)
 8000efc:	f002 fceb 	bl	80038d6 <HAL_GPIO_WritePin>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	200006d0 	.word	0x200006d0

08000f10 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000f20:	2200      	movs	r2, #0
 8000f22:	2110      	movs	r1, #16
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <NRF24_Read_Buf+0x4c>)
 8000f26:	f002 fcd6 	bl	80038d6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000f2a:	1df9      	adds	r1, r7, #7
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	2201      	movs	r2, #1
 8000f32:	480b      	ldr	r0, [pc, #44]	; (8000f60 <NRF24_Read_Buf+0x50>)
 8000f34:	f003 fe10 	bl	8004b58 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f40:	6839      	ldr	r1, [r7, #0]
 8000f42:	4807      	ldr	r0, [pc, #28]	; (8000f60 <NRF24_Read_Buf+0x50>)
 8000f44:	f003 ff44 	bl	8004dd0 <HAL_SPI_Receive>
  CS_OFF;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <NRF24_Read_Buf+0x4c>)
 8000f4e:	f002 fcc2 	bl	80038d6 <HAL_GPIO_WritePin>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40010800 	.word	0x40010800
 8000f60:	200006d0 	.word	0x200006d0

08000f64 <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f043 0320 	orr.w	r3, r3, #32
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2110      	movs	r1, #16
 8000f82:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <NRF24_Write_Buf+0x5c>)
 8000f84:	f002 fca7 	bl	80038d6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000f88:	1df9      	adds	r1, r7, #7
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	2201      	movs	r2, #1
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <NRF24_Write_Buf+0x60>)
 8000f92:	f003 fde1 	bl	8004b58 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff ff0c 	bl	8000db4 <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8000f9c:	79bb      	ldrb	r3, [r7, #6]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa4:	6839      	ldr	r1, [r7, #0]
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <NRF24_Write_Buf+0x60>)
 8000fa8:	f003 fdd6 	bl	8004b58 <HAL_SPI_Transmit>
  CS_OFF;
 8000fac:	2201      	movs	r2, #1
 8000fae:	2110      	movs	r1, #16
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <NRF24_Write_Buf+0x5c>)
 8000fb2:	f002 fc90 	bl	80038d6 <HAL_GPIO_WritePin>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	200006d0 	.word	0x200006d0

08000fc8 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000fce:	23e2      	movs	r3, #226	; 0xe2
 8000fd0:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	480b      	ldr	r0, [pc, #44]	; (8001004 <NRF24_FlushRX+0x3c>)
 8000fd8:	f002 fc7d 	bl	80038d6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000fdc:	1d39      	adds	r1, r7, #4
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <NRF24_FlushRX+0x40>)
 8000fe6:	f003 fdb7 	bl	8004b58 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff fee2 	bl	8000db4 <DelayMicro>
  CS_OFF;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <NRF24_FlushRX+0x3c>)
 8000ff6:	f002 fc6e 	bl	80038d6 <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40010800 	.word	0x40010800
 8001008:	200006d0 	.word	0x200006d0

0800100c <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 8001012:	23e1      	movs	r3, #225	; 0xe1
 8001014:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8001016:	2200      	movs	r2, #0
 8001018:	2110      	movs	r1, #16
 800101a:	480b      	ldr	r0, [pc, #44]	; (8001048 <NRF24_FlushTX+0x3c>)
 800101c:	f002 fc5b 	bl	80038d6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001020:	1d39      	adds	r1, r7, #4
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	2201      	movs	r2, #1
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <NRF24_FlushTX+0x40>)
 800102a:	f003 fd95 	bl	8004b58 <HAL_SPI_Transmit>
  DelayMicro(1);
 800102e:	2001      	movs	r0, #1
 8001030:	f7ff fec0 	bl	8000db4 <DelayMicro>
  CS_OFF;
 8001034:	2201      	movs	r2, #1
 8001036:	2110      	movs	r1, #16
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <NRF24_FlushTX+0x3c>)
 800103a:	f002 fc4c 	bl	80038d6 <HAL_GPIO_WritePin>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40010800 	.word	0x40010800
 800104c:	200006d0 	.word	0x200006d0

08001050 <read_config_registers>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
bool read_config_registers(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	f002 f8c1 	bl	80031dc <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fecc 	bl	8000df8 <NRF24_ReadReg>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <read_config_registers+0x78>)
 8001066:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff fec5 	bl	8000df8 <NRF24_ReadReg>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <read_config_registers+0x78>)
 8001074:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 8001076:	2002      	movs	r0, #2
 8001078:	f7ff febe 	bl	8000df8 <NRF24_ReadReg>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <read_config_registers+0x78>)
 8001082:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 8001084:	2007      	movs	r0, #7
 8001086:	f7ff feb7 	bl	8000df8 <NRF24_ReadReg>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <read_config_registers+0x78>)
 8001090:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 8001092:	2006      	movs	r0, #6
 8001094:	f7ff feb0 	bl	8000df8 <NRF24_ReadReg>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <read_config_registers+0x78>)
 800109e:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 80010a0:	2203      	movs	r2, #3
 80010a2:	490a      	ldr	r1, [pc, #40]	; (80010cc <read_config_registers+0x7c>)
 80010a4:	2010      	movs	r0, #16
 80010a6:	f7ff ff33 	bl	8000f10 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 80010aa:	2203      	movs	r2, #3
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <read_config_registers+0x7c>)
 80010ae:	200a      	movs	r0, #10
 80010b0:	f7ff ff2e 	bl	8000f10 <NRF24_Read_Buf>

	if(config_array[0] == 0)		// Data from nrf module was read
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <read_config_registers+0x78>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <read_config_registers+0x70>
	{
		return false;
 80010bc:	2300      	movs	r3, #0
 80010be:	e000      	b.n	80010c2 <read_config_registers+0x72>
	}
	else
	{
		return true;
 80010c0:	2301      	movs	r3, #1
	}
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000128 	.word	0x20000128
 80010cc:	20000138 	.word	0x20000138

080010d0 <reset_nrf24l01>:
//----------------------------------------------------------------------------------------
void reset_nrf24l01(void)   // reconfigure module
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

	CE_RESET;
 80010d6:	2200      	movs	r2, #0
 80010d8:	2108      	movs	r1, #8
 80010da:	4829      	ldr	r0, [pc, #164]	; (8001180 <reset_nrf24l01+0xb0>)
 80010dc:	f002 fbfb 	bl	80038d6 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 80010e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80010e4:	f7ff fe66 	bl	8000db4 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 80010e8:	210a      	movs	r1, #10
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff feb8 	bl	8000e60 <NRF24_WriteReg>

	DelayMicro(5000);
 80010f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80010f4:	f7ff fe5e 	bl	8000db4 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 80010f8:	2101      	movs	r1, #1
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff feb0 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8001100:	2101      	movs	r1, #1
 8001102:	2002      	movs	r0, #2
 8001104:	f7ff feac 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8001108:	2101      	movs	r1, #1
 800110a:	2003      	movs	r0, #3
 800110c:	f7ff fea8 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8001110:	215f      	movs	r1, #95	; 0x5f
 8001112:	2004      	movs	r0, #4
 8001114:	f7ff fea4 	bl	8000e60 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 8001118:	f7ff fed0 	bl	8000ebc <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 800111c:	2100      	movs	r1, #0
 800111e:	201d      	movs	r0, #29
 8001120:	f7ff fe9e 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8001124:	2100      	movs	r1, #0
 8001126:	201c      	movs	r0, #28
 8001128:	f7ff fe9a 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x00); 		// Reset flags for IRQ   // WAS NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800112c:	2100      	movs	r1, #0
 800112e:	2007      	movs	r0, #7
 8001130:	f7ff fe96 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8001134:	214c      	movs	r1, #76	; 0x4c
 8001136:	2005      	movs	r0, #5
 8001138:	f7ff fe92 	bl	8000e60 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 800113c:	2126      	movs	r1, #38	; 0x26
 800113e:	2006      	movs	r0, #6
 8001140:	f7ff fe8e 	bl	8000e60 <NRF24_WriteReg>

	uint8_t TX_ADDRESS_RESET[TX_ADR_WIDTH] = {0x00,0x00,0x00};   // Address for pipe 0
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <reset_nrf24l01+0xb4>)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	4611      	mov	r1, r2
 800114c:	8019      	strh	r1, [r3, #0]
 800114e:	3302      	adds	r3, #2
 8001150:	0c12      	lsrs	r2, r2, #16
 8001152:	701a      	strb	r2, [r3, #0]
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_RESET, TX_ADR_WIDTH);			// Write TX address
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2203      	movs	r2, #3
 8001158:	4619      	mov	r1, r3
 800115a:	2010      	movs	r0, #16
 800115c:	f7ff ff02 	bl	8000f64 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_RESET, TX_ADR_WIDTH);		// Set up pipe 0 address
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2203      	movs	r2, #3
 8001164:	4619      	mov	r1, r3
 8001166:	200a      	movs	r0, #10
 8001168:	f7ff fefc 	bl	8000f64 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 800116c:	210a      	movs	r1, #10
 800116e:	2011      	movs	r0, #17
 8001170:	f7ff fe76 	bl	8000e60 <NRF24_WriteReg>

	NRF24L01_RX_Mode_for_TX_mode();
 8001174:	f7ff fbcc 	bl	8000910 <NRF24L01_RX_Mode_for_TX_mode>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40010800 	.word	0x40010800
 8001184:	08007138 	.word	0x08007138

08001188 <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 800118c:	2000      	movs	r0, #0
 800118e:	f000 f889 	bl	80012a4 <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 8001192:	f000 f8a9 	bl	80012e8 <ssd1306_UpdateScreen>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80011a6:	230a      	movs	r3, #10
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	2301      	movs	r3, #1
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	2200      	movs	r2, #0
 80011b6:	2178      	movs	r1, #120	; 0x78
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <ssd1306_WriteCommand+0x2c>)
 80011ba:	f002 fd19 	bl	8003bf0 <HAL_I2C_Mem_Write>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200005f0 	.word	0x200005f0

080011cc <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80011d0:	2064      	movs	r0, #100	; 0x64
 80011d2:	f002 f803 	bl	80031dc <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80011d6:	20ae      	movs	r0, #174	; 0xae
 80011d8:	f7ff ffe0 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80011dc:	2020      	movs	r0, #32
 80011de:	f7ff ffdd 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80011e2:	2010      	movs	r0, #16
 80011e4:	f7ff ffda 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011e8:	20b0      	movs	r0, #176	; 0xb0
 80011ea:	f7ff ffd7 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80011ee:	20c8      	movs	r0, #200	; 0xc8
 80011f0:	f7ff ffd4 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff ffd1 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80011fa:	2010      	movs	r0, #16
 80011fc:	f7ff ffce 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001200:	2040      	movs	r0, #64	; 0x40
 8001202:	f7ff ffcb 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001206:	2081      	movs	r0, #129	; 0x81
 8001208:	f7ff ffc8 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 800120c:	20ff      	movs	r0, #255	; 0xff
 800120e:	f7ff ffc5 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001212:	20a1      	movs	r0, #161	; 0xa1
 8001214:	f7ff ffc2 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001218:	20a6      	movs	r0, #166	; 0xa6
 800121a:	f7ff ffbf 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 800121e:	20a8      	movs	r0, #168	; 0xa8
 8001220:	f7ff ffbc 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001224:	203f      	movs	r0, #63	; 0x3f
 8001226:	f7ff ffb9 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800122a:	20a4      	movs	r0, #164	; 0xa4
 800122c:	f7ff ffb6 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001230:	20d3      	movs	r0, #211	; 0xd3
 8001232:	f7ff ffb3 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff ffb0 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800123c:	20d5      	movs	r0, #213	; 0xd5
 800123e:	f7ff ffad 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001242:	20f0      	movs	r0, #240	; 0xf0
 8001244:	f7ff ffaa 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001248:	20d9      	movs	r0, #217	; 0xd9
 800124a:	f7ff ffa7 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800124e:	2022      	movs	r0, #34	; 0x22
 8001250:	f7ff ffa4 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001254:	20da      	movs	r0, #218	; 0xda
 8001256:	f7ff ffa1 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800125a:	2012      	movs	r0, #18
 800125c:	f7ff ff9e 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001260:	20db      	movs	r0, #219	; 0xdb
 8001262:	f7ff ff9b 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001266:	2020      	movs	r0, #32
 8001268:	f7ff ff98 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800126c:	208d      	movs	r0, #141	; 0x8d
 800126e:	f7ff ff95 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001272:	2014      	movs	r0, #20
 8001274:	f7ff ff92 	bl	800119c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001278:	20af      	movs	r0, #175	; 0xaf
 800127a:	f7ff ff8f 	bl	800119c <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 800127e:	2000      	movs	r0, #0
 8001280:	f000 f810 	bl	80012a4 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001284:	f000 f830 	bl	80012e8 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <ssd1306_Init+0xd4>)
 800128a:	2200      	movs	r2, #0
 800128c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <ssd1306_Init+0xd4>)
 8001290:	2200      	movs	r2, #0
 8001292:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8001294:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <ssd1306_Init+0xd4>)
 8001296:	2201      	movs	r2, #1
 8001298:	715a      	strb	r2, [r3, #5]

	return 1;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000558 	.word	0x20000558

080012a4 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	e00d      	b.n	80012d0 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <ssd1306_Fill+0x1a>
 80012ba:	2100      	movs	r1, #0
 80012bc:	e000      	b.n	80012c0 <ssd1306_Fill+0x1c>
 80012be:	21ff      	movs	r1, #255	; 0xff
 80012c0:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <ssd1306_Fill+0x40>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	460a      	mov	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d6:	d3ed      	bcc.n	80012b4 <ssd1306_Fill+0x10>
	}
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	20000158 	.word	0x20000158

080012e8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 80012ee:	2300      	movs	r3, #0
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	e01d      	b.n	8001330 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	3b50      	subs	r3, #80	; 0x50
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff4e 	bl	800119c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff ff4b 	bl	800119c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001306:	2010      	movs	r0, #16
 8001308:	f7ff ff48 	bl	800119c <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	01db      	lsls	r3, r3, #7
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <ssd1306_UpdateScreen+0x58>)
 8001312:	4413      	add	r3, r2
 8001314:	2264      	movs	r2, #100	; 0x64
 8001316:	9202      	str	r2, [sp, #8]
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	2240      	movs	r2, #64	; 0x40
 8001322:	2178      	movs	r1, #120	; 0x78
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <ssd1306_UpdateScreen+0x5c>)
 8001326:	f002 fc63 	bl	8003bf0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	3301      	adds	r3, #1
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b07      	cmp	r3, #7
 8001334:	d9de      	bls.n	80012f4 <ssd1306_UpdateScreen+0xc>
	}
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000158 	.word	0x20000158
 8001344:	200005f0 	.word	0x200005f0

08001348 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	460b      	mov	r3, r1
 8001354:	71bb      	strb	r3, [r7, #6]
 8001356:	4613      	mov	r3, r2
 8001358:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db48      	blt.n	80013f4 <ssd1306_DrawPixel+0xac>
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	2b3f      	cmp	r3, #63	; 0x3f
 8001366:	d845      	bhi.n	80013f4 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <ssd1306_DrawPixel+0xb8>)
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8001370:	797b      	ldrb	r3, [r7, #5]
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf0c      	ite	eq
 8001376:	2301      	moveq	r3, #1
 8001378:	2300      	movne	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 800137e:	797b      	ldrb	r3, [r7, #5]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d11a      	bne.n	80013ba <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001384:	79fa      	ldrb	r2, [r7, #7]
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	b2d8      	uxtb	r0, r3
 800138c:	4603      	mov	r3, r0
 800138e:	01db      	lsls	r3, r3, #7
 8001390:	4413      	add	r3, r2
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <ssd1306_DrawPixel+0xbc>)
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	b25a      	sxtb	r2, r3
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b259      	sxtb	r1, r3
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	4603      	mov	r3, r0
 80013ae:	01db      	lsls	r3, r3, #7
 80013b0:	4413      	add	r3, r2
 80013b2:	b2c9      	uxtb	r1, r1
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <ssd1306_DrawPixel+0xbc>)
 80013b6:	54d1      	strb	r1, [r2, r3]
 80013b8:	e01d      	b.n	80013f6 <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b2d8      	uxtb	r0, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	01db      	lsls	r3, r3, #7
 80013c6:	4413      	add	r3, r2
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <ssd1306_DrawPixel+0xbc>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	4013      	ands	r3, r2
 80013e2:	b259      	sxtb	r1, r3
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	4603      	mov	r3, r0
 80013e8:	01db      	lsls	r3, r3, #7
 80013ea:	4413      	add	r3, r2
 80013ec:	b2c9      	uxtb	r1, r1
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <ssd1306_DrawPixel+0xbc>)
 80013f0:	54d1      	strb	r1, [r2, r3]
 80013f2:	e000      	b.n	80013f6 <ssd1306_DrawPixel+0xae>
		return;
 80013f4:	bf00      	nop
	}
}
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000558 	.word	0x20000558
 8001404:	20000158 	.word	0x20000158

08001408 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	1d38      	adds	r0, r7, #4
 8001412:	e880 0006 	stmia.w	r0, {r1, r2}
 8001416:	461a      	mov	r2, r3
 8001418:	4623      	mov	r3, r4
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	4613      	mov	r3, r2
 800141e:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001420:	4b38      	ldr	r3, [pc, #224]	; (8001504 <ssd1306_WriteChar+0xfc>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	793b      	ldrb	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	2b7f      	cmp	r3, #127	; 0x7f
 800142c:	dc06      	bgt.n	800143c <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800142e:	4b35      	ldr	r3, [pc, #212]	; (8001504 <ssd1306_WriteChar+0xfc>)
 8001430:	885b      	ldrh	r3, [r3, #2]
 8001432:	461a      	mov	r2, r3
 8001434:	797b      	ldrb	r3, [r7, #5]
 8001436:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001438:	2b3f      	cmp	r3, #63	; 0x3f
 800143a:	dd01      	ble.n	8001440 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 800143c:	2300      	movs	r3, #0
 800143e:	e05d      	b.n	80014fc <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	e04c      	b.n	80014e0 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3b20      	subs	r3, #32
 800144c:	7979      	ldrb	r1, [r7, #5]
 800144e:	fb01 f303 	mul.w	r3, r1, r3
 8001452:	4619      	mov	r1, r3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	440b      	add	r3, r1
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	e034      	b.n	80014d0 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d012      	beq.n	800149c <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <ssd1306_WriteChar+0xfc>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4413      	add	r3, r2
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <ssd1306_WriteChar+0xfc>)
 8001486:	885b      	ldrh	r3, [r3, #2]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4413      	add	r3, r2
 8001490:	b2db      	uxtb	r3, r3
 8001492:	7bba      	ldrb	r2, [r7, #14]
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff ff57 	bl	8001348 <ssd1306_DrawPixel>
 800149a:	e016      	b.n	80014ca <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <ssd1306_WriteChar+0xfc>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4413      	add	r3, r2
 80014a8:	b2d8      	uxtb	r0, r3
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <ssd1306_WriteChar+0xfc>)
 80014ac:	885b      	ldrh	r3, [r3, #2]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	b2d9      	uxtb	r1, r3
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bf0c      	ite	eq
 80014be:	2301      	moveq	r3, #1
 80014c0:	2300      	movne	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	461a      	mov	r2, r3
 80014c6:	f7ff ff3f 	bl	8001348 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	793b      	ldrb	r3, [r7, #4]
 80014d2:	461a      	mov	r2, r3
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d3c5      	bcc.n	8001466 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	797b      	ldrb	r3, [r7, #5]
 80014e2:	461a      	mov	r2, r3
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d3ad      	bcc.n	8001446 <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <ssd1306_WriteChar+0xfc>)
 80014ec:	881a      	ldrh	r2, [r3, #0]
 80014ee:	793b      	ldrb	r3, [r7, #4]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b03      	ldr	r3, [pc, #12]	; (8001504 <ssd1306_WriteChar+0xfc>)
 80014f8:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3724      	adds	r7, #36	; 0x24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd90      	pop	{r4, r7, pc}
 8001504:	20000558 	.word	0x20000558

08001508 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	1d38      	adds	r0, r7, #4
 8001512:	e880 0006 	stmia.w	r0, {r1, r2}
 8001516:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8001518:	e012      	b.n	8001540 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	7818      	ldrb	r0, [r3, #0]
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	1d3a      	adds	r2, r7, #4
 8001522:	ca06      	ldmia	r2, {r1, r2}
 8001524:	f7ff ff70 	bl	8001408 <ssd1306_WriteChar>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d002      	beq.n	800153a <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	e008      	b.n	800154c <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1e8      	bne.n	800151a <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	781b      	ldrb	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	460a      	mov	r2, r1
 800155e:	71fb      	strb	r3, [r7, #7]
 8001560:	4613      	mov	r3, r2
 8001562:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <ssd1306_SetCursor+0x2c>)
 800156a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <ssd1306_SetCursor+0x2c>)
 8001572:	805a      	strh	r2, [r3, #2]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000558 	.word	0x20000558

08001584 <ssd1306_Line>:

void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	4604      	mov	r4, r0
 800158c:	4608      	mov	r0, r1
 800158e:	4611      	mov	r1, r2
 8001590:	461a      	mov	r2, r3
 8001592:	4623      	mov	r3, r4
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	4603      	mov	r3, r0
 8001598:	71bb      	strb	r3, [r7, #6]
 800159a:	460b      	mov	r3, r1
 800159c:	717b      	strb	r3, [r7, #5]
 800159e:	4613      	mov	r3, r2
 80015a0:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 80015a2:	797a      	ldrb	r2, [r7, #5]
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bfb8      	it	lt
 80015ac:	425b      	neglt	r3, r3
 80015ae:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 80015b0:	793a      	ldrb	r2, [r7, #4]
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bfb8      	it	lt
 80015ba:	425b      	neglt	r3, r3
 80015bc:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80015be:	79fa      	ldrb	r2, [r7, #7]
 80015c0:	797b      	ldrb	r3, [r7, #5]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d201      	bcs.n	80015ca <ssd1306_Line+0x46>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e001      	b.n	80015ce <ssd1306_Line+0x4a>
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ce:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80015d0:	79ba      	ldrb	r2, [r7, #6]
 80015d2:	793b      	ldrb	r3, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d201      	bcs.n	80015dc <ssd1306_Line+0x58>
 80015d8:	2301      	movs	r3, #1
 80015da:	e001      	b.n	80015e0 <ssd1306_Line+0x5c>
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e0:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 80015ea:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80015ee:	7939      	ldrb	r1, [r7, #4]
 80015f0:	797b      	ldrb	r3, [r7, #5]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fea8 	bl	8001348 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80015f8:	e024      	b.n	8001644 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80015fa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80015fe:	79b9      	ldrb	r1, [r7, #6]
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fea0 	bl	8001348 <ssd1306_DrawPixel>
    error2 = error * 2;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	425b      	negs	r3, r3
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	429a      	cmp	r2, r3
 8001616:	dd08      	ble.n	800162a <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	4413      	add	r3, r2
 8001628:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	429a      	cmp	r2, r3
 8001630:	da08      	bge.n	8001644 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	4413      	add	r3, r2
 8001638:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	79bb      	ldrb	r3, [r7, #6]
 8001640:	4413      	add	r3, r2
 8001642:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8001644:	79fa      	ldrb	r2, [r7, #7]
 8001646:	797b      	ldrb	r3, [r7, #5]
 8001648:	429a      	cmp	r2, r3
 800164a:	d1d6      	bne.n	80015fa <ssd1306_Line+0x76>
 800164c:	79ba      	ldrb	r2, [r7, #6]
 800164e:	793b      	ldrb	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	d1d2      	bne.n	80015fa <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8001654:	bf00      	nop
}
 8001656:	3724      	adds	r7, #36	; 0x24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b085      	sub	sp, #20
 8001660:	af02      	add	r7, sp, #8
 8001662:	4604      	mov	r4, r0
 8001664:	4608      	mov	r0, r1
 8001666:	4611      	mov	r1, r2
 8001668:	461a      	mov	r2, r3
 800166a:	4623      	mov	r3, r4
 800166c:	71fb      	strb	r3, [r7, #7]
 800166e:	4603      	mov	r3, r0
 8001670:	71bb      	strb	r3, [r7, #6]
 8001672:	460b      	mov	r3, r1
 8001674:	717b      	strb	r3, [r7, #5]
 8001676:	4613      	mov	r3, r2
 8001678:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 800167a:	79bc      	ldrb	r4, [r7, #6]
 800167c:	797a      	ldrb	r2, [r7, #5]
 800167e:	79b9      	ldrb	r1, [r7, #6]
 8001680:	79f8      	ldrb	r0, [r7, #7]
 8001682:	7e3b      	ldrb	r3, [r7, #24]
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	4623      	mov	r3, r4
 8001688:	f7ff ff7c 	bl	8001584 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 800168c:	793c      	ldrb	r4, [r7, #4]
 800168e:	797a      	ldrb	r2, [r7, #5]
 8001690:	79b9      	ldrb	r1, [r7, #6]
 8001692:	7978      	ldrb	r0, [r7, #5]
 8001694:	7e3b      	ldrb	r3, [r7, #24]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	4623      	mov	r3, r4
 800169a:	f7ff ff73 	bl	8001584 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 800169e:	793c      	ldrb	r4, [r7, #4]
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	7939      	ldrb	r1, [r7, #4]
 80016a4:	7978      	ldrb	r0, [r7, #5]
 80016a6:	7e3b      	ldrb	r3, [r7, #24]
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	4623      	mov	r3, r4
 80016ac:	f7ff ff6a 	bl	8001584 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 80016b0:	79bc      	ldrb	r4, [r7, #6]
 80016b2:	79fa      	ldrb	r2, [r7, #7]
 80016b4:	7939      	ldrb	r1, [r7, #4]
 80016b6:	79f8      	ldrb	r0, [r7, #7]
 80016b8:	7e3b      	ldrb	r3, [r7, #24]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	4623      	mov	r3, r4
 80016be:	f7ff ff61 	bl	8001584 <ssd1306_Line>

  return;
 80016c2:	bf00      	nop
}
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd90      	pop	{r4, r7, pc}

080016ca <ssd1306FillRect>:
void ssd1306FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
 80016ca:	b590      	push	{r4, r7, lr}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4604      	mov	r4, r0
 80016d2:	4608      	mov	r0, r1
 80016d4:	4611      	mov	r1, r2
 80016d6:	461a      	mov	r2, r3
 80016d8:	4623      	mov	r3, r4
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4603      	mov	r3, r0
 80016de:	71bb      	strb	r3, [r7, #6]
 80016e0:	460b      	mov	r3, r1
 80016e2:	717b      	strb	r3, [r7, #5]
 80016e4:	4613      	mov	r3, r2
 80016e6:	713b      	strb	r3, [r7, #4]
    uint8_t x0, x1, y1;

    x0 = x;
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	73fb      	strb	r3, [r7, #15]
    x1 = x + w;
 80016ec:	79fa      	ldrb	r2, [r7, #7]
 80016ee:	797b      	ldrb	r3, [r7, #5]
 80016f0:	4413      	add	r3, r2
 80016f2:	73bb      	strb	r3, [r7, #14]
    y1 = y + h;
 80016f4:	79ba      	ldrb	r2, [r7, #6]
 80016f6:	793b      	ldrb	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	737b      	strb	r3, [r7, #13]
    for(; y < y1; y++)
 80016fc:	e013      	b.n	8001726 <ssd1306FillRect+0x5c>
        for(x = x0; x < x1; x++)
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	e009      	b.n	8001718 <ssd1306FillRect+0x4e>
        	ssd1306_DrawPixel(x, y, color);
 8001704:	8c3b      	ldrh	r3, [r7, #32]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	79b9      	ldrb	r1, [r7, #6]
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fe1b 	bl	8001348 <ssd1306_DrawPixel>
        for(x = x0; x < x1; x++)
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	3301      	adds	r3, #1
 8001716:	71fb      	strb	r3, [r7, #7]
 8001718:	79fa      	ldrb	r2, [r7, #7]
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	429a      	cmp	r2, r3
 800171e:	d3f1      	bcc.n	8001704 <ssd1306FillRect+0x3a>
    for(; y < y1; y++)
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	3301      	adds	r3, #1
 8001724:	71bb      	strb	r3, [r7, #6]
 8001726:	79ba      	ldrb	r2, [r7, #6]
 8001728:	7b7b      	ldrb	r3, [r7, #13]
 800172a:	429a      	cmp	r2, r3
 800172c:	d3e7      	bcc.n	80016fe <ssd1306FillRect+0x34>
            //ssd1306DrawPixel( x, y, color, layer);
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173c:	f001 fcec 	bl	8003118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001740:	f000 f826 	bl	8001790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001744:	f000 f972 	bl	8001a2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001748:	f000 f868 	bl	800181c <MX_I2C1_Init>
  MX_SPI1_Init();
 800174c:	f000 f894 	bl	8001878 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001750:	f000 f918 	bl	8001984 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001754:	f000 f8c6 	bl	80018e4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001758:	f000 f93e 	bl	80019d8 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001762:	480a      	ldr	r0, [pc, #40]	; (800178c <main+0x54>)
 8001764:	f002 f8b7 	bl	80038d6 <HAL_GPIO_WritePin>

  // Init interrupt (For LoRa)
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2025      	movs	r0, #37	; 0x25
 800176e:	f001 fe30 	bl	80033d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001772:	2025      	movs	r0, #37	; 0x25
 8001774:	f001 fe49 	bl	800340a <HAL_NVIC_EnableIRQ>

  // OLED init
  ssd1306_Init();
 8001778:	f7ff fd28 	bl	80011cc <ssd1306_Init>
  ssd1306_Fill(Black);
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fd91 	bl	80012a4 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8001782:	f7ff fdb1 	bl	80012e8 <ssd1306_UpdateScreen>

  while (1)
  {
	menu();
 8001786:	f001 fc75 	bl	8003074 <menu>
 800178a:	e7fc      	b.n	8001786 <main+0x4e>
 800178c:	40011000 	.word	0x40011000

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b090      	sub	sp, #64	; 0x40
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0318 	add.w	r3, r7, #24
 800179a:	2228      	movs	r2, #40	; 0x28
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f004 ffe6 	bl	8006770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b2:	2301      	movs	r3, #1
 80017b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c4:	2302      	movs	r3, #2
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80017ce:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fd1f 	bl	800421c <HAL_RCC_OscConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80017e4:	f000 fa4a 	bl	8001c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e8:	230f      	movs	r3, #15
 80017ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ec:	2302      	movs	r3, #2
 80017ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2102      	movs	r1, #2
 8001802:	4618      	mov	r0, r3
 8001804:	f002 ff8a 	bl	800471c <HAL_RCC_ClockConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800180e:	f000 fa35 	bl	8001c7c <Error_Handler>
  }
}
 8001812:	bf00      	nop
 8001814:	3740      	adds	r7, #64	; 0x40
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_I2C1_Init+0x50>)
 8001822:	4a13      	ldr	r2, [pc, #76]	; (8001870 <MX_I2C1_Init+0x54>)
 8001824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_I2C1_Init+0x50>)
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <MX_I2C1_Init+0x58>)
 800182a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_I2C1_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_I2C1_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_I2C1_Init+0x50>)
 800183a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <MX_I2C1_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_I2C1_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	; (800186c <MX_I2C1_Init+0x50>)
 800185a:	f002 f885 	bl	8003968 <HAL_I2C_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001864:	f000 fa0a 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200005f0 	.word	0x200005f0
 8001870:	40005400 	.word	0x40005400
 8001874:	00061a80 	.word	0x00061a80

08001878 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_SPI1_Init+0x64>)
 800187e:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <MX_SPI1_Init+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_SPI1_Init+0x64>)
 8001884:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001888:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_SPI1_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <MX_SPI1_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_SPI1_Init+0x64>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_SPI1_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_SPI1_Init+0x64>)
 80018a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_SPI1_Init+0x64>)
 80018ac:	2220      	movs	r2, #32
 80018ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <MX_SPI1_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_SPI1_Init+0x64>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <MX_SPI1_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_SPI1_Init+0x64>)
 80018c4:	220a      	movs	r2, #10
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <MX_SPI1_Init+0x64>)
 80018ca:	f003 f8c1 	bl	8004a50 <HAL_SPI_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018d4:	f000 f9d2 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200006d0 	.word	0x200006d0
 80018e0:	40013000 	.word	0x40013000

080018e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	463b      	mov	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <MX_TIM1_Init+0x98>)
 8001902:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <MX_TIM1_Init+0x9c>)
 8001904:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <MX_TIM1_Init+0x98>)
 8001908:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800190c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_TIM1_Init+0x98>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <MX_TIM1_Init+0x98>)
 8001916:	2264      	movs	r2, #100	; 0x64
 8001918:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_TIM1_Init+0x98>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <MX_TIM1_Init+0x98>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <MX_TIM1_Init+0x98>)
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800192c:	4813      	ldr	r0, [pc, #76]	; (800197c <MX_TIM1_Init+0x98>)
 800192e:	f003 fdfb 	bl	8005528 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001938:	f000 f9a0 	bl	8001c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <MX_TIM1_Init+0x98>)
 800194a:	f003 ffc5 	bl	80058d8 <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001954:	f000 f992 	bl	8001c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001958:	2310      	movs	r3, #16
 800195a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001960:	463b      	mov	r3, r7
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_TIM1_Init+0x98>)
 8001966:	f004 f9a1 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001970:	f000 f984 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000688 	.word	0x20000688
 8001980:	40012c00 	.word	0x40012c00

08001984 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <MX_USART1_UART_Init+0x50>)
 800198c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 8001990:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019bc:	f004 f9e6 	bl	8005d8c <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019c6:	f000 f959 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000644 	.word	0x20000644
 80019d4:	40013800 	.word	0x40013800

080019d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_USART3_UART_Init+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 8001a10:	f004 f9bc 	bl	8005d8c <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a1a:	f000 f92f 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200005ac 	.word	0x200005ac
 8001a28:	40004800 	.word	0x40004800

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a40:	4b5f      	ldr	r3, [pc, #380]	; (8001bc0 <MX_GPIO_Init+0x194>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <MX_GPIO_Init+0x194>)
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b5c      	ldr	r3, [pc, #368]	; (8001bc0 <MX_GPIO_Init+0x194>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a58:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <MX_GPIO_Init+0x194>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <MX_GPIO_Init+0x194>)
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b56      	ldr	r3, [pc, #344]	; (8001bc0 <MX_GPIO_Init+0x194>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <MX_GPIO_Init+0x194>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <MX_GPIO_Init+0x194>)
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <MX_GPIO_Init+0x194>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a88:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <MX_GPIO_Init+0x194>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a4c      	ldr	r2, [pc, #304]	; (8001bc0 <MX_GPIO_Init+0x194>)
 8001a8e:	f043 0308 	orr.w	r3, r3, #8
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <MX_GPIO_Init+0x194>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa6:	4847      	ldr	r0, [pc, #284]	; (8001bc4 <MX_GPIO_Init+0x198>)
 8001aa8:	f001 ff15 	bl	80038d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2108      	movs	r1, #8
 8001ab0:	4845      	ldr	r0, [pc, #276]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001ab2:	f001 ff10 	bl	80038d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2110      	movs	r1, #16
 8001aba:	4843      	ldr	r0, [pc, #268]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001abc:	f001 ff0b 	bl	80038d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f242 0101 	movw	r1, #8193	; 0x2001
 8001ac6:	4841      	ldr	r0, [pc, #260]	; (8001bcc <MX_GPIO_Init+0x1a0>)
 8001ac8:	f001 ff05 	bl	80038d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4837      	ldr	r0, [pc, #220]	; (8001bc4 <MX_GPIO_Init+0x198>)
 8001ae6:	f001 fd5b 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001aea:	2304      	movs	r3, #4
 8001aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <MX_GPIO_Init+0x1a4>)
 8001af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	4619      	mov	r1, r3
 8001afc:	4832      	ldr	r0, [pc, #200]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001afe:	f001 fd4f 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001b02:	2318      	movs	r3, #24
 8001b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4619      	mov	r1, r3
 8001b18:	482b      	ldr	r0, [pc, #172]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001b1a:	f001 fd41 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8001b1e:	f242 0301 	movw	r3, #8193	; 0x2001
 8001b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b24:	2301      	movs	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4619      	mov	r1, r3
 8001b36:	4825      	ldr	r0, [pc, #148]	; (8001bcc <MX_GPIO_Init+0x1a0>)
 8001b38:	f001 fd32 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	481f      	ldr	r0, [pc, #124]	; (8001bcc <MX_GPIO_Init+0x1a0>)
 8001b50:	f001 fd26 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b54:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <MX_GPIO_Init+0x1a4>)
 8001b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4619      	mov	r1, r3
 8001b68:	4818      	ldr	r0, [pc, #96]	; (8001bcc <MX_GPIO_Init+0x1a0>)
 8001b6a:	f001 fd19 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_GPIO_Init+0x1a4>)
 8001b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	4811      	ldr	r0, [pc, #68]	; (8001bc8 <MX_GPIO_Init+0x19c>)
 8001b84:	f001 fd0c 	bl	80035a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2008      	movs	r0, #8
 8001b8e:	f001 fc20 	bl	80033d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001b92:	2008      	movs	r0, #8
 8001b94:	f001 fc39 	bl	800340a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2017      	movs	r0, #23
 8001b9e:	f001 fc18 	bl	80033d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ba2:	2017      	movs	r0, #23
 8001ba4:	f001 fc31 	bl	800340a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	2028      	movs	r0, #40	; 0x28
 8001bae:	f001 fc10 	bl	80033d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bb2:	2028      	movs	r0, #40	; 0x28
 8001bb4:	f001 fc29 	bl	800340a <HAL_NVIC_EnableIRQ>

}
 8001bb8:	bf00      	nop
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40011000 	.word	0x40011000
 8001bc8:	40010800 	.word	0x40010800
 8001bcc:	40010c00 	.word	0x40010c00
 8001bd0:	10210000 	.word	0x10210000

08001bd4 <HAL_GPIO_EXTI_Callback>:



//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d108      	bne.n	8001bf6 <HAL_GPIO_EXTI_Callback+0x22>
  {
	  if(tx_or_rx_mode == rx_mode)
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x30>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d103      	bne.n	8001bf8 <HAL_GPIO_EXTI_Callback+0x24>
	  {
		  IRQ_Callback();					// Call Callback
 8001bf0:	f7fe fe54 	bl	800089c <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_EXTI_Callback+0x24>
    __NOP();
 8001bf6:	bf00      	nop
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000003 	.word	0x20000003
 8001c04:	2000011a 	.word	0x2000011a

08001c08 <HAL_UART_RxCpltCallback>:
//----------------------------------------------------------------------------------------
// Receive data from LoRa module
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <HAL_UART_RxCpltCallback+0x60>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d123      	bne.n	8001c60 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_UART_RxCpltCallback+0x64>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_UART_RxCpltCallback+0x20>
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_UART_RxCpltCallback+0x68>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b31      	cmp	r3, #49	; 0x31
 8001c26:	d906      	bls.n	8001c36 <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_UART_RxCpltCallback+0x6c>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_UART_RxCpltCallback+0x68>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8001c34:	e014      	b.n	8001c60 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_UART_RxCpltCallback+0x6c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_UART_RxCpltCallback+0x68>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_UART_RxCpltCallback+0x64>)
 8001c44:	7819      	ldrb	r1, [r3, #0]
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_UART_RxCpltCallback+0x70>)
 8001c48:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4907      	ldr	r1, [pc, #28]	; (8001c6c <HAL_UART_RxCpltCallback+0x64>)
 8001c4e:	4806      	ldr	r0, [pc, #24]	; (8001c68 <HAL_UART_RxCpltCallback+0x60>)
 8001c50:	f004 f92d 	bl	8005eae <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_UART_RxCpltCallback+0x68>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <HAL_UART_RxCpltCallback+0x68>)
 8001c5e:	701a      	strb	r2, [r3, #0]
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000644 	.word	0x20000644
 8001c6c:	20000594 	.word	0x20000594
 8001c70:	20000596 	.word	0x20000596
 8001c74:	20000595 	.word	0x20000595
 8001c78:	20000560 	.word	0x20000560

08001c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <Error_Handler+0x8>
	...

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6193      	str	r3, [r2, #24]
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a0e      	ldr	r2, [pc, #56]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_MspInit+0x60>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_MspInit+0x60>)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010000 	.word	0x40010000

08001cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <HAL_I2C_MspInit+0x70>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d123      	bne.n	8001d54 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d24:	23c0      	movs	r3, #192	; 0xc0
 8001d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d28:	2312      	movs	r3, #18
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4619      	mov	r1, r3
 8001d36:	480b      	ldr	r0, [pc, #44]	; (8001d64 <HAL_I2C_MspInit+0x78>)
 8001d38:	f001 fc32 	bl	80035a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d46:	61d3      	str	r3, [r2, #28]
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40005400 	.word	0x40005400
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010c00 	.word	0x40010c00

08001d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_SPI_MspInit+0x88>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d12f      	bne.n	8001de8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <HAL_SPI_MspInit+0x8c>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <HAL_SPI_MspInit+0x8c>)
 8001d8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_SPI_MspInit+0x8c>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_SPI_MspInit+0x8c>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <HAL_SPI_MspInit+0x8c>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_SPI_MspInit+0x8c>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001db8:	23a0      	movs	r3, #160	; 0xa0
 8001dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480b      	ldr	r0, [pc, #44]	; (8001df8 <HAL_SPI_MspInit+0x90>)
 8001dcc:	f001 fbe8 	bl	80035a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dd0:	2340      	movs	r3, #64	; 0x40
 8001dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	4619      	mov	r1, r3
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <HAL_SPI_MspInit+0x90>)
 8001de4:	f001 fbdc 	bl	80035a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40013000 	.word	0x40013000
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010800 	.word	0x40010800

08001dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <HAL_TIM_Base_MspInit+0x44>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d113      	bne.n	8001e36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <HAL_TIM_Base_MspInit+0x48>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <HAL_TIM_Base_MspInit+0x48>)
 8001e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e18:	6193      	str	r3, [r2, #24]
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_TIM_Base_MspInit+0x48>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2019      	movs	r0, #25
 8001e2c:	f001 fad1 	bl	80033d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e30:	2019      	movs	r0, #25
 8001e32:	f001 faea 	bl	800340a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a3c      	ldr	r2, [pc, #240]	; (8001f54 <HAL_UART_MspInit+0x10c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d13a      	bne.n	8001ede <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e68:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_UART_MspInit+0x110>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a3a      	ldr	r2, [pc, #232]	; (8001f58 <HAL_UART_MspInit+0x110>)
 8001e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <HAL_UART_MspInit+0x110>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <HAL_UART_MspInit+0x110>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a34      	ldr	r2, [pc, #208]	; (8001f58 <HAL_UART_MspInit+0x110>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <HAL_UART_MspInit+0x110>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 0318 	add.w	r3, r7, #24
 8001eaa:	4619      	mov	r1, r3
 8001eac:	482b      	ldr	r0, [pc, #172]	; (8001f5c <HAL_UART_MspInit+0x114>)
 8001eae:	f001 fb77 	bl	80035a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 0318 	add.w	r3, r7, #24
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4825      	ldr	r0, [pc, #148]	; (8001f5c <HAL_UART_MspInit+0x114>)
 8001ec8:	f001 fb6a 	bl	80035a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2101      	movs	r1, #1
 8001ed0:	2025      	movs	r0, #37	; 0x25
 8001ed2:	f001 fa7e 	bl	80033d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ed6:	2025      	movs	r0, #37	; 0x25
 8001ed8:	f001 fa97 	bl	800340a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001edc:	e036      	b.n	8001f4c <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <HAL_UART_MspInit+0x118>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d131      	bne.n	8001f4c <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_UART_MspInit+0x110>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_UART_MspInit+0x110>)
 8001eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef2:	61d3      	str	r3, [r2, #28]
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_UART_MspInit+0x110>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_UART_MspInit+0x110>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <HAL_UART_MspInit+0x110>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_UART_MspInit+0x110>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f107 0318 	add.w	r3, r7, #24
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <HAL_UART_MspInit+0x11c>)
 8001f2e:	f001 fb37 	bl	80035a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 0318 	add.w	r3, r7, #24
 8001f44:	4619      	mov	r1, r3
 8001f46:	4807      	ldr	r0, [pc, #28]	; (8001f64 <HAL_UART_MspInit+0x11c>)
 8001f48:	f001 fb2a 	bl	80035a0 <HAL_GPIO_Init>
}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40013800 	.word	0x40013800
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40010800 	.word	0x40010800
 8001f60:	40004800 	.word	0x40004800
 8001f64:	40010c00 	.word	0x40010c00

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <NMI_Handler+0x4>

08001f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <HardFault_Handler+0x4>

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <MemManage_Handler+0x4>

08001f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <BusFault_Handler+0x4>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <UsageFault_Handler+0x4>

08001f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fae:	f001 f8f9 	bl	80031a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001fba:	2004      	movs	r0, #4
 8001fbc:	f001 fcbc 	bl	8003938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <EXTI9_5_IRQHandler+0x44>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	f083 0301 	eor.w	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <EXTI9_5_IRQHandler+0x48>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <EXTI9_5_IRQHandler+0x4c>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <EXTI9_5_IRQHandler+0x50>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d105      	bne.n	8001ffc <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8001ff0:	4809      	ldr	r0, [pc, #36]	; (8002018 <EXTI9_5_IRQHandler+0x54>)
 8001ff2:	f003 fae9 	bl	80055c8 <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <EXTI9_5_IRQHandler+0x50>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ffc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002000:	f001 fc9a 	bl	8003938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200005a0 	.word	0x200005a0
 800200c:	40010400 	.word	0x40010400
 8002010:	2000001c 	.word	0x2000001c
 8002014:	20000020 	.word	0x20000020
 8002018:	20000688 	.word	0x20000688

0800201c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8002020:	4b37      	ldr	r3, [pc, #220]	; (8002100 <TIM1_UP_IRQHandler+0xe4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d165      	bne.n	80020f4 <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 8002028:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800202c:	4835      	ldr	r0, [pc, #212]	; (8002104 <TIM1_UP_IRQHandler+0xe8>)
 800202e:	f001 fc3b 	bl	80038a8 <HAL_GPIO_ReadPin>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d118      	bne.n	800206a <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 8002038:	4b33      	ldr	r3, [pc, #204]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	4a32      	ldr	r2, [pc, #200]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 8002040:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8002042:	4b32      	ldr	r3, [pc, #200]	; (800210c <TIM1_UP_IRQHandler+0xf0>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	dc51      	bgt.n	80020f4 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <TIM1_UP_IRQHandler+0xe4>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8002056:	482e      	ldr	r0, [pc, #184]	; (8002110 <TIM1_UP_IRQHandler+0xf4>)
 8002058:	f003 fb08 	bl	800566c <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 800205c:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <TIM1_UP_IRQHandler+0xf8>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e044      	b.n	80020f4 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 800206a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800206e:	482a      	ldr	r0, [pc, #168]	; (8002118 <TIM1_UP_IRQHandler+0xfc>)
 8002070:	f001 fc1a 	bl	80038a8 <HAL_GPIO_ReadPin>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a21      	ldr	r2, [pc, #132]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 8002082:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <TIM1_UP_IRQHandler+0xf0>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	dc30      	bgt.n	80020f4 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <TIM1_UP_IRQHandler+0xe4>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8002098:	481d      	ldr	r0, [pc, #116]	; (8002110 <TIM1_UP_IRQHandler+0xf4>)
 800209a:	f003 fae7 	bl	800566c <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <TIM1_UP_IRQHandler+0xf8>)
 80020a0:	2203      	movs	r2, #3
 80020a2:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e023      	b.n	80020f4 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 80020ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020b0:	4814      	ldr	r0, [pc, #80]	; (8002104 <TIM1_UP_IRQHandler+0xe8>)
 80020b2:	f001 fbf9 	bl	80038a8 <HAL_GPIO_ReadPin>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d118      	bne.n	80020ee <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a11      	ldr	r2, [pc, #68]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 80020c4:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <TIM1_UP_IRQHandler+0xf0>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	dc0f      	bgt.n	80020f4 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <TIM1_UP_IRQHandler+0xe4>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <TIM1_UP_IRQHandler+0xf8>)
 80020dc:	2202      	movs	r2, #2
 80020de:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80020e6:	480a      	ldr	r0, [pc, #40]	; (8002110 <TIM1_UP_IRQHandler+0xf4>)
 80020e8:	f003 fac0 	bl	800566c <HAL_TIM_Base_Stop_IT>
 80020ec:	e002      	b.n	80020f4 <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <TIM1_UP_IRQHandler+0xec>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020f4:	4806      	ldr	r0, [pc, #24]	; (8002110 <TIM1_UP_IRQHandler+0xf4>)
 80020f6:	f003 fae7 	bl	80056c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000020 	.word	0x20000020
 8002104:	40010c00 	.word	0x40010c00
 8002108:	20000598 	.word	0x20000598
 800210c:	2000001d 	.word	0x2000001d
 8002110:	20000688 	.word	0x20000688
 8002114:	200005a1 	.word	0x200005a1
 8002118:	40010800 	.word	0x40010800

0800211c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <USART1_IRQHandler+0x10>)
 8002122:	f003 fef5 	bl	8005f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000644 	.word	0x20000644

08002130 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <EXTI15_10_IRQHandler+0x74>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	f083 0301 	eor.w	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d012      	beq.n	8002168 <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <EXTI15_10_IRQHandler+0x78>)
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <EXTI15_10_IRQHandler+0x7c>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <EXTI15_10_IRQHandler+0x80>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d105      	bne.n	8002168 <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 800215c:	4815      	ldr	r0, [pc, #84]	; (80021b4 <EXTI15_10_IRQHandler+0x84>)
 800215e:	f003 fa33 	bl	80055c8 <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <EXTI15_10_IRQHandler+0x80>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <EXTI15_10_IRQHandler+0x78>)
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00c      	beq.n	800218e <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <EXTI15_10_IRQHandler+0x7c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <EXTI15_10_IRQHandler+0x80>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d105      	bne.n	800218e <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8002182:	480c      	ldr	r0, [pc, #48]	; (80021b4 <EXTI15_10_IRQHandler+0x84>)
 8002184:	f003 fa20 	bl	80055c8 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <EXTI15_10_IRQHandler+0x80>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800218e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002192:	f001 fbd1 	bl	8003938 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002196:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800219a:	f001 fbcd 	bl	8003938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200005a0 	.word	0x200005a0
 80021a8:	40010400 	.word	0x40010400
 80021ac:	2000001c 	.word	0x2000001c
 80021b0:	20000020 	.word	0x20000020
 80021b4:	20000688 	.word	0x20000688

080021b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <_sbrk+0x5c>)
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <_sbrk+0x60>)
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <_sbrk+0x64>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <_sbrk+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e8:	f004 fa70 	bl	80066cc <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	220c      	movs	r2, #12
 80021f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021f6:	e009      	b.n	800220c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <_sbrk+0x64>)
 8002208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20005000 	.word	0x20005000
 8002218:	00000400 	.word	0x00000400
 800221c:	2000059c 	.word	0x2000059c
 8002220:	200008c8 	.word	0x200008c8

08002224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <Menu_Init>:
void nrf_rx_mode(void);


// ----------------------------------------------------------------------------------------
void Menu_Init (void)
{
 8002230:	b480      	push	{r7}
 8002232:	b08d      	sub	sp, #52	; 0x34
 8002234:	af00      	add	r7, sp, #0
	// Make pointers on funsctions
	// Main functions
	void (*p_print_rows_on_oled_if_up) (void);
	p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
 8002236:	4b89      	ldr	r3, [pc, #548]	; (800245c <Menu_Init+0x22c>)
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c

	void (*p_print_rows_on_oled_if_down) (void);					// Create pointer on function
	p_print_rows_on_oled_if_down = print_rows_on_oled_if_down;		// Save function print on pointer print_p
 800223a:	4b89      	ldr	r3, [pc, #548]	; (8002460 <Menu_Init+0x230>)
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28

	void (*p_return_from_menu)(void);
	p_return_from_menu = return_from_menu;
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <Menu_Init+0x234>)
 8002240:	627b      	str	r3, [r7, #36]	; 0x24

	void (*p_action) (void);										// Create pointer on function
	p_action = action;												// Save function action on pointer action_p
 8002242:	4b89      	ldr	r3, [pc, #548]	; (8002468 <Menu_Init+0x238>)
 8002244:	623b      	str	r3, [r7, #32]

	// LoRa  menu functions
	void (*p_lora_rx_mode) (void);						// Function "Do it". Works when select it
	p_lora_rx_mode = lora_rx_mode;
 8002246:	4b89      	ldr	r3, [pc, #548]	; (800246c <Menu_Init+0x23c>)
 8002248:	61fb      	str	r3, [r7, #28]

	void (*p_lora_tx_mode) (void);						// Function "Do it". Works when select it
	p_lora_tx_mode = lora_tx_mode;
 800224a:	4b89      	ldr	r3, [pc, #548]	; (8002470 <Menu_Init+0x240>)
 800224c:	61bb      	str	r3, [r7, #24]


	void (*p_items_menu_1_set_par_2) (void);			// Doesen't use yet
	p_items_menu_1_set_par_2 = items_menu_1_set_par_2;
 800224e:	4b89      	ldr	r3, [pc, #548]	; (8002474 <Menu_Init+0x244>)
 8002250:	617b      	str	r3, [r7, #20]
	// items_menu_2 menu functions
//	void (*p_do_it_function_menu_2) (void);						// Function "Do it". Works when select it
//	p_do_it_function_menu_2 = do_it_function_menu_2;

	void (*p_items_menu_2_set_par_1) (void);
	p_items_menu_2_set_par_1 = items_menu_2_set_par_1;
 8002252:	4b89      	ldr	r3, [pc, #548]	; (8002478 <Menu_Init+0x248>)
 8002254:	613b      	str	r3, [r7, #16]

	// items_menu_3 menu functions
	void (*p_do_it_function_menu_3) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_3 = do_it_function_menu_3;
 8002256:	4b89      	ldr	r3, [pc, #548]	; (800247c <Menu_Init+0x24c>)
 8002258:	60fb      	str	r3, [r7, #12]


	void (*p_nrf_tx_mode) (void);						// Function "Do it". Works when select it
	p_nrf_tx_mode = nrf_tx_mode;
 800225a:	4b89      	ldr	r3, [pc, #548]	; (8002480 <Menu_Init+0x250>)
 800225c:	60bb      	str	r3, [r7, #8]

	void (*p_nrf_rx_mode) (void);						// Function "Do it". Works when select it
	p_nrf_rx_mode = nrf_rx_mode;
 800225e:	4b89      	ldr	r3, [pc, #548]	; (8002484 <Menu_Init+0x254>)
 8002260:	607b      	str	r3, [r7, #4]

	// Fill in elements(nodes) of list (7 items)
	// Main menu items
	/////////////////////////////////////////////////////////////////

	items[0].up = 0;
 8002262:	4b89      	ldr	r3, [pc, #548]	; (8002488 <Menu_Init+0x258>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
	items[0].down = &items[1];
 8002268:	4b87      	ldr	r3, [pc, #540]	; (8002488 <Menu_Init+0x258>)
 800226a:	4a88      	ldr	r2, [pc, #544]	; (800248c <Menu_Init+0x25c>)
 800226c:	605a      	str	r2, [r3, #4]
	items[0].child = &items_menu_1[0];
 800226e:	4b86      	ldr	r3, [pc, #536]	; (8002488 <Menu_Init+0x258>)
 8002270:	4a87      	ldr	r2, [pc, #540]	; (8002490 <Menu_Init+0x260>)
 8002272:	609a      	str	r2, [r3, #8]
	items[0].parent = 0;
 8002274:	4b84      	ldr	r3, [pc, #528]	; (8002488 <Menu_Init+0x258>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
	items[0].id = 1;
 800227a:	4b83      	ldr	r3, [pc, #524]	; (8002488 <Menu_Init+0x258>)
 800227c:	2201      	movs	r2, #1
 800227e:	741a      	strb	r2, [r3, #16]
	items[0].name = "LoRa E220";
 8002280:	4b81      	ldr	r3, [pc, #516]	; (8002488 <Menu_Init+0x258>)
 8002282:	4a84      	ldr	r2, [pc, #528]	; (8002494 <Menu_Init+0x264>)
 8002284:	615a      	str	r2, [r3, #20]
	items[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8002286:	4a80      	ldr	r2, [pc, #512]	; (8002488 <Menu_Init+0x258>)
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	6193      	str	r3, [r2, #24]
	items[0].updateScreen_down = p_print_rows_on_oled_if_down;
 800228c:	4a7e      	ldr	r2, [pc, #504]	; (8002488 <Menu_Init+0x258>)
 800228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002290:	61d3      	str	r3, [r2, #28]
	items[0].makeAction = 0;
 8002292:	4b7d      	ldr	r3, [pc, #500]	; (8002488 <Menu_Init+0x258>)
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]

	items[1].up = &items[0];
 8002298:	4b7b      	ldr	r3, [pc, #492]	; (8002488 <Menu_Init+0x258>)
 800229a:	4a7b      	ldr	r2, [pc, #492]	; (8002488 <Menu_Init+0x258>)
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
	items[1].down = &items[2];
 800229e:	4b7a      	ldr	r3, [pc, #488]	; (8002488 <Menu_Init+0x258>)
 80022a0:	4a7d      	ldr	r2, [pc, #500]	; (8002498 <Menu_Init+0x268>)
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
	items[1].child = &items_menu_2[0];
 80022a4:	4b78      	ldr	r3, [pc, #480]	; (8002488 <Menu_Init+0x258>)
 80022a6:	4a7d      	ldr	r2, [pc, #500]	; (800249c <Menu_Init+0x26c>)
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
	items[1].parent = 0;
 80022aa:	4b77      	ldr	r3, [pc, #476]	; (8002488 <Menu_Init+0x258>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
	items[1].id = 2;
 80022b0:	4b75      	ldr	r3, [pc, #468]	; (8002488 <Menu_Init+0x258>)
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items[1].name = "NRF24L01";
 80022b8:	4b73      	ldr	r3, [pc, #460]	; (8002488 <Menu_Init+0x258>)
 80022ba:	4a79      	ldr	r2, [pc, #484]	; (80024a0 <Menu_Init+0x270>)
 80022bc:	639a      	str	r2, [r3, #56]	; 0x38
	items[1].updateScreen_up = p_print_rows_on_oled_if_up;
 80022be:	4a72      	ldr	r2, [pc, #456]	; (8002488 <Menu_Init+0x258>)
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c2:	63d3      	str	r3, [r2, #60]	; 0x3c
	items[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80022c4:	4a70      	ldr	r2, [pc, #448]	; (8002488 <Menu_Init+0x258>)
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
	items[1].makeAction = 0;
 80022ca:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <Menu_Init+0x258>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	645a      	str	r2, [r3, #68]	; 0x44

	items[2].up = &items[1];
 80022d0:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <Menu_Init+0x258>)
 80022d2:	4a6e      	ldr	r2, [pc, #440]	; (800248c <Menu_Init+0x25c>)
 80022d4:	649a      	str	r2, [r3, #72]	; 0x48
	items[2].down = 0;
 80022d6:	4b6c      	ldr	r3, [pc, #432]	; (8002488 <Menu_Init+0x258>)
 80022d8:	2200      	movs	r2, #0
 80022da:	64da      	str	r2, [r3, #76]	; 0x4c
	items[2].child = &items_menu_3[0];
 80022dc:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <Menu_Init+0x258>)
 80022de:	4a71      	ldr	r2, [pc, #452]	; (80024a4 <Menu_Init+0x274>)
 80022e0:	651a      	str	r2, [r3, #80]	; 0x50
	items[2].parent = 0;
 80022e2:	4b69      	ldr	r3, [pc, #420]	; (8002488 <Menu_Init+0x258>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
	items[2].id = 3;
 80022e8:	4b67      	ldr	r3, [pc, #412]	; (8002488 <Menu_Init+0x258>)
 80022ea:	2203      	movs	r2, #3
 80022ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items[2].name = "AM2302 sensor";
 80022f0:	4b65      	ldr	r3, [pc, #404]	; (8002488 <Menu_Init+0x258>)
 80022f2:	4a6d      	ldr	r2, [pc, #436]	; (80024a8 <Menu_Init+0x278>)
 80022f4:	65da      	str	r2, [r3, #92]	; 0x5c
	items[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80022f6:	4a64      	ldr	r2, [pc, #400]	; (8002488 <Menu_Init+0x258>)
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	6613      	str	r3, [r2, #96]	; 0x60
	items[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80022fc:	4a62      	ldr	r2, [pc, #392]	; (8002488 <Menu_Init+0x258>)
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	6653      	str	r3, [r2, #100]	; 0x64
	items[2].makeAction = 0;
 8002302:	4b61      	ldr	r3, [pc, #388]	; (8002488 <Menu_Init+0x258>)
 8002304:	2200      	movs	r2, #0
 8002306:	669a      	str	r2, [r3, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating LoRa menu
	items_menu_1[0].up = 0;
 8002308:	4b61      	ldr	r3, [pc, #388]	; (8002490 <Menu_Init+0x260>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
	items_menu_1[0].down = &items_menu_1[1];
 800230e:	4b60      	ldr	r3, [pc, #384]	; (8002490 <Menu_Init+0x260>)
 8002310:	4a66      	ldr	r2, [pc, #408]	; (80024ac <Menu_Init+0x27c>)
 8002312:	605a      	str	r2, [r3, #4]
	items_menu_1[0].id = 1;
 8002314:	4b5e      	ldr	r3, [pc, #376]	; (8002490 <Menu_Init+0x260>)
 8002316:	2201      	movs	r2, #1
 8002318:	741a      	strb	r2, [r3, #16]
	items_menu_1[0].child = 0;
 800231a:	4b5d      	ldr	r3, [pc, #372]	; (8002490 <Menu_Init+0x260>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
	items_menu_1[0].parent = &items[0];
 8002320:	4b5b      	ldr	r3, [pc, #364]	; (8002490 <Menu_Init+0x260>)
 8002322:	4a59      	ldr	r2, [pc, #356]	; (8002488 <Menu_Init+0x258>)
 8002324:	60da      	str	r2, [r3, #12]
	items_menu_1[0].name = "LoRa RX";
 8002326:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <Menu_Init+0x260>)
 8002328:	4a61      	ldr	r2, [pc, #388]	; (80024b0 <Menu_Init+0x280>)
 800232a:	615a      	str	r2, [r3, #20]
	items_menu_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 800232c:	4a58      	ldr	r2, [pc, #352]	; (8002490 <Menu_Init+0x260>)
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	6193      	str	r3, [r2, #24]
	items_menu_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8002332:	4a57      	ldr	r2, [pc, #348]	; (8002490 <Menu_Init+0x260>)
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	61d3      	str	r3, [r2, #28]
	items_menu_1[0].makeAction = p_lora_rx_mode;
 8002338:	4a55      	ldr	r2, [pc, #340]	; (8002490 <Menu_Init+0x260>)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	6213      	str	r3, [r2, #32]

	items_menu_1[1].up = &items_menu_1[0];
 800233e:	4b54      	ldr	r3, [pc, #336]	; (8002490 <Menu_Init+0x260>)
 8002340:	4a53      	ldr	r2, [pc, #332]	; (8002490 <Menu_Init+0x260>)
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1[1].down = &items_menu_1[2];
 8002344:	4b52      	ldr	r3, [pc, #328]	; (8002490 <Menu_Init+0x260>)
 8002346:	4a5b      	ldr	r2, [pc, #364]	; (80024b4 <Menu_Init+0x284>)
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1[1].child = 0;
 800234a:	4b51      	ldr	r3, [pc, #324]	; (8002490 <Menu_Init+0x260>)
 800234c:	2200      	movs	r2, #0
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1[1].parent = &items[0];
 8002350:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <Menu_Init+0x260>)
 8002352:	4a4d      	ldr	r2, [pc, #308]	; (8002488 <Menu_Init+0x258>)
 8002354:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1[1].id = 2;
 8002356:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <Menu_Init+0x260>)
 8002358:	2202      	movs	r2, #2
 800235a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1[1].name = "LoRa TX";
 800235e:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <Menu_Init+0x260>)
 8002360:	4a55      	ldr	r2, [pc, #340]	; (80024b8 <Menu_Init+0x288>)
 8002362:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8002364:	4a4a      	ldr	r2, [pc, #296]	; (8002490 <Menu_Init+0x260>)
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 800236a:	4a49      	ldr	r2, [pc, #292]	; (8002490 <Menu_Init+0x260>)
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1[1].makeAction = p_lora_tx_mode;
 8002370:	4a47      	ldr	r2, [pc, #284]	; (8002490 <Menu_Init+0x260>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_1[2].up = &items_menu_1[1];
 8002376:	4b46      	ldr	r3, [pc, #280]	; (8002490 <Menu_Init+0x260>)
 8002378:	4a4c      	ldr	r2, [pc, #304]	; (80024ac <Menu_Init+0x27c>)
 800237a:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1[2].down = 0;
 800237c:	4b44      	ldr	r3, [pc, #272]	; (8002490 <Menu_Init+0x260>)
 800237e:	2200      	movs	r2, #0
 8002380:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1[2].child = 0;
 8002382:	4b43      	ldr	r3, [pc, #268]	; (8002490 <Menu_Init+0x260>)
 8002384:	2200      	movs	r2, #0
 8002386:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1[2].parent = &items[0];
 8002388:	4b41      	ldr	r3, [pc, #260]	; (8002490 <Menu_Init+0x260>)
 800238a:	4a3f      	ldr	r2, [pc, #252]	; (8002488 <Menu_Init+0x258>)
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1[2].id = 3;
 800238e:	4b40      	ldr	r3, [pc, #256]	; (8002490 <Menu_Init+0x260>)
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1[2].name = "EXIT";						// Name of item
 8002396:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <Menu_Init+0x260>)
 8002398:	4a48      	ldr	r2, [pc, #288]	; (80024bc <Menu_Init+0x28c>)
 800239a:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 800239c:	4a3c      	ldr	r2, [pc, #240]	; (8002490 <Menu_Init+0x260>)
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80023a2:	4a3b      	ldr	r2, [pc, #236]	; (8002490 <Menu_Init+0x260>)
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1[2].makeAction = p_return_from_menu;
 80023a8:	4a39      	ldr	r2, [pc, #228]	; (8002490 <Menu_Init+0x260>)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_2[0].up = 0;
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <Menu_Init+0x26c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
	items_menu_2[0].down = &items_menu_2[1];
 80023b4:	4b39      	ldr	r3, [pc, #228]	; (800249c <Menu_Init+0x26c>)
 80023b6:	4a42      	ldr	r2, [pc, #264]	; (80024c0 <Menu_Init+0x290>)
 80023b8:	605a      	str	r2, [r3, #4]
	items_menu_2[0].child = 0;
 80023ba:	4b38      	ldr	r3, [pc, #224]	; (800249c <Menu_Init+0x26c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
	items_menu_2[0].parent = &items[1];
 80023c0:	4b36      	ldr	r3, [pc, #216]	; (800249c <Menu_Init+0x26c>)
 80023c2:	4a32      	ldr	r2, [pc, #200]	; (800248c <Menu_Init+0x25c>)
 80023c4:	60da      	str	r2, [r3, #12]
	items_menu_2[0].id = 1;
 80023c6:	4b35      	ldr	r3, [pc, #212]	; (800249c <Menu_Init+0x26c>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	741a      	strb	r2, [r3, #16]
	items_menu_2[0].name = "NRF RX";						// Name of item
 80023cc:	4b33      	ldr	r3, [pc, #204]	; (800249c <Menu_Init+0x26c>)
 80023ce:	4a3d      	ldr	r2, [pc, #244]	; (80024c4 <Menu_Init+0x294>)
 80023d0:	615a      	str	r2, [r3, #20]
	items_menu_2[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80023d2:	4a32      	ldr	r2, [pc, #200]	; (800249c <Menu_Init+0x26c>)
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	6193      	str	r3, [r2, #24]
	items_menu_2[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80023d8:	4a30      	ldr	r2, [pc, #192]	; (800249c <Menu_Init+0x26c>)
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	61d3      	str	r3, [r2, #28]
	items_menu_2[0].makeAction = p_nrf_rx_mode;
 80023de:	4a2f      	ldr	r2, [pc, #188]	; (800249c <Menu_Init+0x26c>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6213      	str	r3, [r2, #32]

	items_menu_2[1].up = &items_menu_2[0];
 80023e4:	4b2d      	ldr	r3, [pc, #180]	; (800249c <Menu_Init+0x26c>)
 80023e6:	4a2d      	ldr	r2, [pc, #180]	; (800249c <Menu_Init+0x26c>)
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2[1].down = &items_menu_2[2];
 80023ea:	4b2c      	ldr	r3, [pc, #176]	; (800249c <Menu_Init+0x26c>)
 80023ec:	4a36      	ldr	r2, [pc, #216]	; (80024c8 <Menu_Init+0x298>)
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2[1].child = 0;
 80023f0:	4b2a      	ldr	r3, [pc, #168]	; (800249c <Menu_Init+0x26c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2[1].parent = &items[1];
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <Menu_Init+0x26c>)
 80023f8:	4a24      	ldr	r2, [pc, #144]	; (800248c <Menu_Init+0x25c>)
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2[1].id = 2;
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <Menu_Init+0x26c>)
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2[1].name = "NRF TX";						// Name of item
 8002404:	4b25      	ldr	r3, [pc, #148]	; (800249c <Menu_Init+0x26c>)
 8002406:	4a31      	ldr	r2, [pc, #196]	; (80024cc <Menu_Init+0x29c>)
 8002408:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2[1].updateScreen_up = p_print_rows_on_oled_if_up;
 800240a:	4a24      	ldr	r2, [pc, #144]	; (800249c <Menu_Init+0x26c>)
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8002410:	4a22      	ldr	r2, [pc, #136]	; (800249c <Menu_Init+0x26c>)
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2[1].makeAction = p_nrf_tx_mode;
 8002416:	4a21      	ldr	r2, [pc, #132]	; (800249c <Menu_Init+0x26c>)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_2[2].up = &items_menu_2[1];
 800241c:	4b1f      	ldr	r3, [pc, #124]	; (800249c <Menu_Init+0x26c>)
 800241e:	4a28      	ldr	r2, [pc, #160]	; (80024c0 <Menu_Init+0x290>)
 8002420:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2[2].down = 0;
 8002422:	4b1e      	ldr	r3, [pc, #120]	; (800249c <Menu_Init+0x26c>)
 8002424:	2200      	movs	r2, #0
 8002426:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2[2].child = 0;
 8002428:	4b1c      	ldr	r3, [pc, #112]	; (800249c <Menu_Init+0x26c>)
 800242a:	2200      	movs	r2, #0
 800242c:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2[2].parent = &items[1];
 800242e:	4b1b      	ldr	r3, [pc, #108]	; (800249c <Menu_Init+0x26c>)
 8002430:	4a16      	ldr	r2, [pc, #88]	; (800248c <Menu_Init+0x25c>)
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2[2].id = 3;
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <Menu_Init+0x26c>)
 8002436:	2203      	movs	r2, #3
 8002438:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2[2].name = "EXIT";						// Name of item
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <Menu_Init+0x26c>)
 800243e:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <Menu_Init+0x28c>)
 8002440:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8002442:	4a16      	ldr	r2, [pc, #88]	; (800249c <Menu_Init+0x26c>)
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8002448:	4a14      	ldr	r2, [pc, #80]	; (800249c <Menu_Init+0x26c>)
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2[2].makeAction = p_return_from_menu;
 800244e:	4a13      	ldr	r2, [pc, #76]	; (800249c <Menu_Init+0x26c>)
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating sensor menu
	items_menu_3[0].up = 0;
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <Menu_Init+0x274>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e039      	b.n	80024d0 <Menu_Init+0x2a0>
 800245c:	08002769 	.word	0x08002769
 8002460:	08002861 	.word	0x08002861
 8002464:	08002bcd 	.word	0x08002bcd
 8002468:	08002a91 	.word	0x08002a91
 800246c:	08002c21 	.word	0x08002c21
 8002470:	08002cbd 	.word	0x08002cbd
 8002474:	08002d59 	.word	0x08002d59
 8002478:	08002e19 	.word	0x08002e19
 800247c:	08002ed9 	.word	0x08002ed9
 8002480:	0800256b 	.word	0x0800256b
 8002484:	08002559 	.word	0x08002559
 8002488:	20000848 	.word	0x20000848
 800248c:	2000086c 	.word	0x2000086c
 8002490:	20000794 	.word	0x20000794
 8002494:	0800713c 	.word	0x0800713c
 8002498:	20000890 	.word	0x20000890
 800249c:	20000728 	.word	0x20000728
 80024a0:	08007148 	.word	0x08007148
 80024a4:	20000800 	.word	0x20000800
 80024a8:	08007154 	.word	0x08007154
 80024ac:	200007b8 	.word	0x200007b8
 80024b0:	08007164 	.word	0x08007164
 80024b4:	200007dc 	.word	0x200007dc
 80024b8:	0800716c 	.word	0x0800716c
 80024bc:	08007174 	.word	0x08007174
 80024c0:	2000074c 	.word	0x2000074c
 80024c4:	0800717c 	.word	0x0800717c
 80024c8:	20000770 	.word	0x20000770
 80024cc:	08007184 	.word	0x08007184
	items_menu_3[0].down = &items_menu_3[1];
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <Menu_Init+0x314>)
 80024d2:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <Menu_Init+0x318>)
 80024d4:	605a      	str	r2, [r3, #4]
	items_menu_3[0].child = 0;
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <Menu_Init+0x314>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
	items_menu_3[0].parent = &items[2];
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <Menu_Init+0x314>)
 80024de:	4a1b      	ldr	r2, [pc, #108]	; (800254c <Menu_Init+0x31c>)
 80024e0:	60da      	str	r2, [r3, #12]
	items_menu_3[0].id = 1;
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <Menu_Init+0x314>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	741a      	strb	r2, [r3, #16]
	items_menu_3[0].name = "Measure T & H";						// Name of item
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <Menu_Init+0x314>)
 80024ea:	4a19      	ldr	r2, [pc, #100]	; (8002550 <Menu_Init+0x320>)
 80024ec:	615a      	str	r2, [r3, #20]
	items_menu_3[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80024ee:	4a15      	ldr	r2, [pc, #84]	; (8002544 <Menu_Init+0x314>)
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	6193      	str	r3, [r2, #24]
	items_menu_3[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80024f4:	4a13      	ldr	r2, [pc, #76]	; (8002544 <Menu_Init+0x314>)
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	61d3      	str	r3, [r2, #28]
	items_menu_3[0].makeAction = p_do_it_function_menu_3;
 80024fa:	4a12      	ldr	r2, [pc, #72]	; (8002544 <Menu_Init+0x314>)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6213      	str	r3, [r2, #32]

	items_menu_3[1].up = &items_menu_3[0];
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <Menu_Init+0x314>)
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <Menu_Init+0x314>)
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_3[1].down = 0;
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <Menu_Init+0x314>)
 8002508:	2200      	movs	r2, #0
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_3[1].child = 0;
 800250c:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <Menu_Init+0x314>)
 800250e:	2200      	movs	r2, #0
 8002510:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_3[1].parent = &items[2];
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <Menu_Init+0x314>)
 8002514:	4a0d      	ldr	r2, [pc, #52]	; (800254c <Menu_Init+0x31c>)
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_3[1].id = 2;
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <Menu_Init+0x314>)
 800251a:	2202      	movs	r2, #2
 800251c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_3[1].name = "EXIT";						// Name of item
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <Menu_Init+0x314>)
 8002522:	4a0c      	ldr	r2, [pc, #48]	; (8002554 <Menu_Init+0x324>)
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_3[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8002526:	4a07      	ldr	r2, [pc, #28]	; (8002544 <Menu_Init+0x314>)
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252a:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_3[1].updateScreen_down = p_print_rows_on_oled_if_down;
 800252c:	4a05      	ldr	r2, [pc, #20]	; (8002544 <Menu_Init+0x314>)
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_3[1].makeAction = p_return_from_menu;
 8002532:	4a04      	ldr	r2, [pc, #16]	; (8002544 <Menu_Init+0x314>)
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	6453      	str	r3, [r2, #68]	; 0x44

}
 8002538:	bf00      	nop
 800253a:	3734      	adds	r7, #52	; 0x34
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000800 	.word	0x20000800
 8002548:	20000824 	.word	0x20000824
 800254c:	20000890 	.word	0x20000890
 8002550:	0800718c 	.word	0x0800718c
 8002554:	08007174 	.word	0x08007174

08002558 <nrf_rx_mode>:
// ----------------------------------------------------------------------------------------
void nrf_rx_mode(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	clearn_oled();
 800255c:	f7fe fe14 	bl	8001188 <clearn_oled>
	NRF24_init_RX_mode();
 8002560:	f7fe f938 	bl	80007d4 <NRF24_init_RX_mode>
	while(1)
	{
		NRF24L01_Receive();
 8002564:	f7fe f8d4 	bl	8000710 <NRF24L01_Receive>
 8002568:	e7fc      	b.n	8002564 <nrf_rx_mode+0xc>

0800256a <nrf_tx_mode>:
	}
}
// ----------------------------------------------------------------------------------------
void nrf_tx_mode(void)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	af00      	add	r7, sp, #0
	clearn_oled();
 800256e:	f7fe fe0b 	bl	8001188 <clearn_oled>
	NRF24_init_TX_mode();
 8002572:	f7fe f9f3 	bl	800095c <NRF24_init_TX_mode>
	while(1)
	{
		NRF24L01_Transmission();
 8002576:	f7fe faff 	bl	8000b78 <NRF24L01_Transmission>
	{
 800257a:	e7fc      	b.n	8002576 <nrf_tx_mode+0xc>

0800257c <scroll_bar>:

/*
This function print scrollbar on right part of OLED.
 */
void scroll_bar(void)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af02      	add	r7, sp, #8
	// Work size scrollbar
	uint16_t start_x_scrollbar = 124;
 8002582:	237c      	movs	r3, #124	; 0x7c
 8002584:	81fb      	strh	r3, [r7, #14]
	uint16_t start_y_scrollbar = 17;
 8002586:	2311      	movs	r3, #17
 8002588:	81bb      	strh	r3, [r7, #12]
	uint16_t active_width = 3;
 800258a:	2303      	movs	r3, #3
 800258c:	817b      	strh	r3, [r7, #10]
	uint16_t lenght_all_scrollbar = 48;
 800258e:	2330      	movs	r3, #48	; 0x30
 8002590:	813b      	strh	r3, [r7, #8]

	uint8_t menu_items_counter = 1;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
	// 1. Скопіювати показник на меню в буффер.
	// 2. Піднятися до першого елемента меню.
	// 3. Опускатися вниз до останнього пункту меню і інкрементувати лічильник елементів меню.
	// 4. Використати лічильник пунктів меню для вираховування довжини полоси прокрутки і її координат.

	MenuItem_t * currentItem_buff = currentItem;
 8002596:	4b32      	ldr	r3, [pc, #200]	; (8002660 <scroll_bar+0xe4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	613b      	str	r3, [r7, #16]

	if ((currentItem_buff -> up) != 0)							// Step up if existing up
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d006      	beq.n	80025b2 <scroll_bar+0x36>
	{
		do{
			currentItem_buff = currentItem_buff -> up;			// Step up to the top of menu
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	613b      	str	r3, [r7, #16]
		}
		while ((currentItem_buff -> up) != 0);					// If the top of item doesen't found
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f8      	bne.n	80025a4 <scroll_bar+0x28>
	}

	if ((currentItem_buff -> up) == 0)							// If found top of menu item
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <scroll_bar+0x52>
	{
		do{
			currentItem_buff = currentItem_buff -> down;
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	613b      	str	r3, [r7, #16]
			menu_items_counter++;								// Count how many list on menu
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
 80025c2:	3301      	adds	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
		}
		while ((currentItem_buff -> down) != 0);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f5      	bne.n	80025ba <scroll_bar+0x3e>
	}
	 // Очистити частину керану де є скролбар
	ssd1306FillRect(start_x_scrollbar, start_y_scrollbar, active_width, lenght_all_scrollbar - 2, Black);
 80025ce:	89fb      	ldrh	r3, [r7, #14]
 80025d0:	b2d8      	uxtb	r0, r3
 80025d2:	89bb      	ldrh	r3, [r7, #12]
 80025d4:	b2d9      	uxtb	r1, r3
 80025d6:	897b      	ldrh	r3, [r7, #10]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	893b      	ldrh	r3, [r7, #8]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	3b02      	subs	r3, #2
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2400      	movs	r4, #0
 80025e4:	9400      	str	r4, [sp, #0]
 80025e6:	f7ff f870 	bl	80016ca <ssd1306FillRect>

	// Вивести подовгастий квадрат на край екрану
	ssd1306_DrawRectangle(start_x_scrollbar - 1, start_y_scrollbar - 1, start_x_scrollbar + active_width, 63, White);
 80025ea:	89fb      	ldrh	r3, [r7, #14]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b2d8      	uxtb	r0, r3
 80025f2:	89bb      	ldrh	r3, [r7, #12]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b2d9      	uxtb	r1, r3
 80025fa:	89fb      	ldrh	r3, [r7, #14]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	897b      	ldrh	r3, [r7, #10]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	4413      	add	r3, r2
 8002604:	b2da      	uxtb	r2, r3
 8002606:	2301      	movs	r3, #1
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	233f      	movs	r3, #63	; 0x3f
 800260c:	f7ff f826 	bl	800165c <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8002610:	f7fe fe6a 	bl	80012e8 <ssd1306_UpdateScreen>

	 // Print scroling line
	int id_for_line = currentItem -> id;				// Скопіювати порядковий номер меню (Для того щоб взнати на якому пункті меню зараз стоїмо)
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <scroll_bar+0xe4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	7c1b      	ldrb	r3, [r3, #16]
 800261a:	607b      	str	r3, [r7, #4]
	// Print scroling line
	uint16_t line_lenght = (lenght_all_scrollbar/menu_items_counter + 1);					   	// Довжина лінії яка відповідає одному меню
 800261c:	893a      	ldrh	r2, [r7, #8]
 800261e:	7dfb      	ldrb	r3, [r7, #23]
 8002620:	fb92 f3f3 	sdiv	r3, r2, r3
 8002624:	b29b      	uxth	r3, r3
 8002626:	3301      	adds	r3, #1
 8002628:	807b      	strh	r3, [r7, #2]
	uint16_t start_lenght = 16 + ((id_for_line - 1)*line_lenght);								// Початок лінії
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3b01      	subs	r3, #1
 800262e:	b29b      	uxth	r3, r3
 8002630:	887a      	ldrh	r2, [r7, #2]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	b29b      	uxth	r3, r3
 8002638:	3310      	adds	r3, #16
 800263a:	803b      	strh	r3, [r7, #0]
	// Print active scrollbar part (line)
	ssd1306FillRect(start_x_scrollbar, start_lenght, active_width, line_lenght, White);
 800263c:	89fb      	ldrh	r3, [r7, #14]
 800263e:	b2d8      	uxtb	r0, r3
 8002640:	883b      	ldrh	r3, [r7, #0]
 8002642:	b2d9      	uxtb	r1, r3
 8002644:	897b      	ldrh	r3, [r7, #10]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2401      	movs	r4, #1
 800264e:	9400      	str	r4, [sp, #0]
 8002650:	f7ff f83b 	bl	80016ca <ssd1306FillRect>

	ssd1306_UpdateScreen();
 8002654:	f7fe fe48 	bl	80012e8 <ssd1306_UpdateScreen>
}
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd90      	pop	{r4, r7, pc}
 8002660:	20000028 	.word	0x20000028

08002664 <print_rectangle_on_head>:
// ----------------------------------------------------------------------------------------
void print_rectangle_on_head(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(0, 0, 127 , 15, White);
 800266a:	2301      	movs	r3, #1
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	230f      	movs	r3, #15
 8002670:	227f      	movs	r2, #127	; 0x7f
 8002672:	2100      	movs	r1, #0
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe fff1 	bl	800165c <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 800267a:	f7fe fe35 	bl	80012e8 <ssd1306_UpdateScreen>
}
 800267e:	bf00      	nop
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <clear_menu_items>:
// ----------------------------------------------------------------------------------------
// Clear some menu items.
void clear_menu_items (bool first, bool second, bool third, bool fourth)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	4604      	mov	r4, r0
 800268c:	4608      	mov	r0, r1
 800268e:	4611      	mov	r1, r2
 8002690:	461a      	mov	r2, r3
 8002692:	4623      	mov	r3, r4
 8002694:	71fb      	strb	r3, [r7, #7]
 8002696:	4603      	mov	r3, r0
 8002698:	71bb      	strb	r3, [r7, #6]
 800269a:	460b      	mov	r3, r1
 800269c:	717b      	strb	r3, [r7, #5]
 800269e:	4613      	mov	r3, r2
 80026a0:	713b      	strb	r3, [r7, #4]
	uint8_t start_row_x = 15;
 80026a2:	230f      	movs	r3, #15
 80026a4:	77fb      	strb	r3, [r7, #31]
	char str[16] = "               ";   // Must be 15
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <clear_menu_items+0xcc>)
 80026a8:	f107 040c 	add.w	r4, r7, #12
 80026ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(first == true)
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00e      	beq.n	80026d6 <clear_menu_items+0x52>
	{
		ssd1306_SetCursor(start_row_x, first_menu_row);
 80026b8:	4b26      	ldr	r3, [pc, #152]	; (8002754 <clear_menu_items+0xd0>)
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	7ffb      	ldrb	r3, [r7, #31]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe ff46 	bl	8001554 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80026c8:	4a23      	ldr	r2, [pc, #140]	; (8002758 <clear_menu_items+0xd4>)
 80026ca:	f107 000c 	add.w	r0, r7, #12
 80026ce:	2301      	movs	r3, #1
 80026d0:	ca06      	ldmia	r2, {r1, r2}
 80026d2:	f7fe ff19 	bl	8001508 <ssd1306_WriteString>
	}
	if(second == true)
 80026d6:	79bb      	ldrb	r3, [r7, #6]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00e      	beq.n	80026fa <clear_menu_items+0x76>
	{
		ssd1306_SetCursor(start_row_x, second_menu_row);
 80026dc:	4b1f      	ldr	r3, [pc, #124]	; (800275c <clear_menu_items+0xd8>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	7ffb      	ldrb	r3, [r7, #31]
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe ff34 	bl	8001554 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80026ec:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <clear_menu_items+0xd4>)
 80026ee:	f107 000c 	add.w	r0, r7, #12
 80026f2:	2301      	movs	r3, #1
 80026f4:	ca06      	ldmia	r2, {r1, r2}
 80026f6:	f7fe ff07 	bl	8001508 <ssd1306_WriteString>
	}
	if(first == true)
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00e      	beq.n	800271e <clear_menu_items+0x9a>
	{
		ssd1306_SetCursor(start_row_x, third_menu_row);
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <clear_menu_items+0xdc>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	7ffb      	ldrb	r3, [r7, #31]
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe ff22 	bl	8001554 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002710:	4a11      	ldr	r2, [pc, #68]	; (8002758 <clear_menu_items+0xd4>)
 8002712:	f107 000c 	add.w	r0, r7, #12
 8002716:	2301      	movs	r3, #1
 8002718:	ca06      	ldmia	r2, {r1, r2}
 800271a:	f7fe fef5 	bl	8001508 <ssd1306_WriteString>
	}
	if(fourth == true)
 800271e:	793b      	ldrb	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <clear_menu_items+0xbe>
	{
		ssd1306_SetCursor(start_row_x, fourth_menu_row);
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <clear_menu_items+0xe0>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	7ffb      	ldrb	r3, [r7, #31]
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe ff10 	bl	8001554 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002734:	4a08      	ldr	r2, [pc, #32]	; (8002758 <clear_menu_items+0xd4>)
 8002736:	f107 000c 	add.w	r0, r7, #12
 800273a:	2301      	movs	r3, #1
 800273c:	ca06      	ldmia	r2, {r1, r2}
 800273e:	f7fe fee3 	bl	8001508 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8002742:	f7fe fdd1 	bl	80012e8 <ssd1306_UpdateScreen>
}
 8002746:	bf00      	nop
 8002748:	3724      	adds	r7, #36	; 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd90      	pop	{r4, r7, pc}
 800274e:	bf00      	nop
 8002750:	0800719c 	.word	0x0800719c
 8002754:	20000030 	.word	0x20000030
 8002758:	20000014 	.word	0x20000014
 800275c:	20000032 	.word	0x20000032
 8002760:	20000034 	.word	0x20000034
 8002764:	20000036 	.word	0x20000036

08002768 <print_rows_on_oled_if_up>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_up(void)				// print text menu items
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
	char str[16] = {0};
 800276e:	2300      	movs	r3, #0
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]

	clear_menu_items (true , true , true , true );
 800277c:	2301      	movs	r3, #1
 800277e:	2201      	movs	r2, #1
 8002780:	2101      	movs	r1, #1
 8002782:	2001      	movs	r0, #1
 8002784:	f7ff ff7e 	bl	8002684 <clear_menu_items>

	print_rectangle_on_head();
 8002788:	f7ff ff6c 	bl	8002664 <print_rectangle_on_head>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <print_rows_on_oled_if_up+0xd8>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	4619      	mov	r1, r3
 8002794:	2000      	movs	r0, #0
 8002796:	f7fe fedd 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 800279a:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <print_rows_on_oled_if_up+0xdc>)
 800279c:	2301      	movs	r3, #1
 800279e:	ca06      	ldmia	r2, {r1, r2}
 80027a0:	4829      	ldr	r0, [pc, #164]	; (8002848 <print_rows_on_oled_if_up+0xe0>)
 80027a2:	f7fe feb1 	bl	8001508 <ssd1306_WriteString>

	MenuItem_t * currentItem_buff_up = currentItem;				// Create buffer on selected current item pointer.
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <print_rows_on_oled_if_up+0xe4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80027ac:	4b24      	ldr	r3, [pc, #144]	; (8002840 <print_rows_on_oled_if_up+0xd8>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	74fb      	strb	r3, [r7, #19]
 80027b2:	e035      	b.n	8002820 <print_rows_on_oled_if_up+0xb8>
	{
		// Print number of menu item
		itoa(currentItem_buff_up -> id, str, 10);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	7c1b      	ldrb	r3, [r3, #16]
 80027b8:	4618      	mov	r0, r3
 80027ba:	463b      	mov	r3, r7
 80027bc:	220a      	movs	r2, #10
 80027be:	4619      	mov	r1, r3
 80027c0:	f003 ffc6 	bl	8006750 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <print_rows_on_oled_if_up+0xe8>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	7cfa      	ldrb	r2, [r7, #19]
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fec0 	bl	8001554 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <print_rows_on_oled_if_up+0xdc>)
 80027d6:	4638      	mov	r0, r7
 80027d8:	2301      	movs	r3, #1
 80027da:	ca06      	ldmia	r2, {r1, r2}
 80027dc:	f7fe fe94 	bl	8001508 <ssd1306_WriteString>

		// Print name of menu item
		strncpy(str, currentItem_buff_up -> name, 15);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	6959      	ldr	r1, [r3, #20]
 80027e4:	463b      	mov	r3, r7
 80027e6:	220f      	movs	r2, #15
 80027e8:	4618      	mov	r0, r3
 80027ea:	f004 f8b6 	bl	800695a <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <print_rows_on_oled_if_up+0xec>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	7cfa      	ldrb	r2, [r7, #19]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe feab 	bl	8001554 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80027fe:	4a11      	ldr	r2, [pc, #68]	; (8002844 <print_rows_on_oled_if_up+0xdc>)
 8002800:	4638      	mov	r0, r7
 8002802:	2301      	movs	r3, #1
 8002804:	ca06      	ldmia	r2, {r1, r2}
 8002806:	f7fe fe7f 	bl	8001508 <ssd1306_WriteString>

		currentItem_buff_up = currentItem_buff_up -> down;		// Make a step down
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	617b      	str	r3, [r7, #20]

		// Print only existing items
		if(currentItem_buff_up == 0)							// If no next item
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <print_rows_on_oled_if_up+0xc6>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <print_rows_on_oled_if_up+0xf0>)
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	7cfb      	ldrb	r3, [r7, #19]
 800281c:	4413      	add	r3, r2
 800281e:	74fb      	strb	r3, [r7, #19]
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	b29a      	uxth	r2, r3
 8002824:	4b0d      	ldr	r3, [pc, #52]	; (800285c <print_rows_on_oled_if_up+0xf4>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d9c3      	bls.n	80027b4 <print_rows_on_oled_if_up+0x4c>
 800282c:	e000      	b.n	8002830 <print_rows_on_oled_if_up+0xc8>
		{
			break;
 800282e:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 8002830:	f7fe fd5a 	bl	80012e8 <ssd1306_UpdateScreen>
	scroll_bar();
 8002834:	f7ff fea2 	bl	800257c <scroll_bar>
}
 8002838:	bf00      	nop
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000030 	.word	0x20000030
 8002844:	20000014 	.word	0x20000014
 8002848:	2000002c 	.word	0x2000002c
 800284c:	20000028 	.word	0x20000028
 8002850:	2000003a 	.word	0x2000003a
 8002854:	2000003c 	.word	0x2000003c
 8002858:	20000038 	.word	0x20000038
 800285c:	20000036 	.word	0x20000036

08002860 <print_rows_on_oled_if_down>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_down(void)			// print text menu items
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]

	clear_menu_items (true , true , true , true );
 8002874:	2301      	movs	r3, #1
 8002876:	2201      	movs	r2, #1
 8002878:	2101      	movs	r1, #1
 800287a:	2001      	movs	r0, #1
 800287c:	f7ff ff02 	bl	8002684 <clear_menu_items>

	print_rectangle_on_head();
 8002880:	f7ff fef0 	bl	8002664 <print_rectangle_on_head>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8002884:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <print_rows_on_oled_if_down+0xe4>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4619      	mov	r1, r3
 800288c:	2000      	movs	r0, #0
 800288e:	f7fe fe61 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8002892:	4a2d      	ldr	r2, [pc, #180]	; (8002948 <print_rows_on_oled_if_down+0xe8>)
 8002894:	2301      	movs	r3, #1
 8002896:	ca06      	ldmia	r2, {r1, r2}
 8002898:	482c      	ldr	r0, [pc, #176]	; (800294c <print_rows_on_oled_if_down+0xec>)
 800289a:	f7fe fe35 	bl	8001508 <ssd1306_WriteString>

	MenuItem_t * currentItem_buff = currentItem;
 800289e:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <print_rows_on_oled_if_down+0xf0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <print_rows_on_oled_if_down+0xe4>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	74fb      	strb	r3, [r7, #19]
 80028aa:	e03b      	b.n	8002924 <print_rows_on_oled_if_down+0xc4>
	{
		// Print number of menu item
        itoa(currentItem_buff -> id, str, 10);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	7c1b      	ldrb	r3, [r3, #16]
 80028b0:	4618      	mov	r0, r3
 80028b2:	463b      	mov	r3, r7
 80028b4:	220a      	movs	r2, #10
 80028b6:	4619      	mov	r1, r3
 80028b8:	f003 ff4a 	bl	8006750 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <print_rows_on_oled_if_down+0xf4>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	7cfa      	ldrb	r2, [r7, #19]
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fe44 	bl	8001554 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80028cc:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <print_rows_on_oled_if_down+0xe8>)
 80028ce:	4638      	mov	r0, r7
 80028d0:	2301      	movs	r3, #1
 80028d2:	ca06      	ldmia	r2, {r1, r2}
 80028d4:	f7fe fe18 	bl	8001508 <ssd1306_WriteString>

		// Print name of menu item
		memset(str, 0, sizeof(str));
 80028d8:	463b      	mov	r3, r7
 80028da:	2210      	movs	r2, #16
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 ff46 	bl	8006770 <memset>
	    strncpy(str, currentItem_buff -> name, 15);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	6959      	ldr	r1, [r3, #20]
 80028e8:	463b      	mov	r3, r7
 80028ea:	220f      	movs	r2, #15
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 f834 	bl	800695a <strncpy>
	    ssd1306_SetCursor(start_print_name_menu_x, row);
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <print_rows_on_oled_if_down+0xf8>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	7cfa      	ldrb	r2, [r7, #19]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe fe29 	bl	8001554 <ssd1306_SetCursor>
	    ssd1306_WriteString(str,  Font_7x10, White);
 8002902:	4a11      	ldr	r2, [pc, #68]	; (8002948 <print_rows_on_oled_if_down+0xe8>)
 8002904:	4638      	mov	r0, r7
 8002906:	2301      	movs	r3, #1
 8002908:	ca06      	ldmia	r2, {r1, r2}
 800290a:	f7fe fdfd 	bl	8001508 <ssd1306_WriteString>

	    currentItem_buff = currentItem_buff -> down;			// Make a step down
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	617b      	str	r3, [r7, #20]

	    // Print only existing items
	    if(currentItem_buff == 0)		 						// If no next item
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <print_rows_on_oled_if_down+0xd2>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <print_rows_on_oled_if_down+0xfc>)
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	4413      	add	r3, r2
 8002922:	74fb      	strb	r3, [r7, #19]
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	b29a      	uxth	r2, r3
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <print_rows_on_oled_if_down+0x100>)
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d9bd      	bls.n	80028ac <print_rows_on_oled_if_down+0x4c>
 8002930:	e000      	b.n	8002934 <print_rows_on_oled_if_down+0xd4>
	    {
	    	break;
 8002932:	bf00      	nop
	    }
	 }
	 ssd1306_UpdateScreen();
 8002934:	f7fe fcd8 	bl	80012e8 <ssd1306_UpdateScreen>
	 scroll_bar();
 8002938:	f7ff fe20 	bl	800257c <scroll_bar>
}
 800293c:	bf00      	nop
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000030 	.word	0x20000030
 8002948:	20000014 	.word	0x20000014
 800294c:	2000002c 	.word	0x2000002c
 8002950:	20000028 	.word	0x20000028
 8002954:	2000003a 	.word	0x2000003a
 8002958:	2000003c 	.word	0x2000003c
 800295c:	20000038 	.word	0x20000038
 8002960:	20000036 	.word	0x20000036

08002964 <print_menu_init>:
// ----------------------------------------------------------------------------------------
// Print first 4 items of menu (only first time)
void print_menu_init(void)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
	MenuItem_t * currentItem_buff = currentItem;
 800296a:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <print_menu_init+0x10c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	61fb      	str	r3, [r7, #28]

	print_rectangle_on_head();
 8002970:	f7ff fe78 	bl	8002664 <print_rectangle_on_head>

	//Print selected name of menu
	char str[20] = ">> MAIN MENU <<";
 8002974:	4b3f      	ldr	r3, [pc, #252]	; (8002a74 <print_menu_init+0x110>)
 8002976:	1d3c      	adds	r4, r7, #4
 8002978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800297a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8002982:	2103      	movs	r1, #3
 8002984:	200a      	movs	r0, #10
 8002986:	f7fe fde5 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800298a:	4a3b      	ldr	r2, [pc, #236]	; (8002a78 <print_menu_init+0x114>)
 800298c:	1d38      	adds	r0, r7, #4
 800298e:	2301      	movs	r3, #1
 8002990:	ca06      	ldmia	r2, {r1, r2}
 8002992:	f7fe fdb9 	bl	8001508 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002996:	f7fe fca7 	bl	80012e8 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	2214      	movs	r2, #20
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f003 fee5 	bl	8006770 <memset>

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80029a6:	4b35      	ldr	r3, [pc, #212]	; (8002a7c <print_menu_init+0x118>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	76fb      	strb	r3, [r7, #27]
 80029ac:	e051      	b.n	8002a52 <print_menu_init+0xee>
	{
		if(row == first_menu_row)
 80029ae:	7efb      	ldrb	r3, [r7, #27]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <print_menu_init+0x118>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d10d      	bne.n	80029d6 <print_menu_init+0x72>
		{
			// Print pointer on menu (On top)
			char str_pointer[4] = "->";
 80029ba:	f643 632d 	movw	r3, #15917	; 0x3e2d
 80029be:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 80029c0:	7efb      	ldrb	r3, [r7, #27]
 80029c2:	4619      	mov	r1, r3
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7fe fdc5 	bl	8001554 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 80029ca:	4a2b      	ldr	r2, [pc, #172]	; (8002a78 <print_menu_init+0x114>)
 80029cc:	4638      	mov	r0, r7
 80029ce:	2301      	movs	r3, #1
 80029d0:	ca06      	ldmia	r2, {r1, r2}
 80029d2:	f7fe fd99 	bl	8001508 <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	7c1b      	ldrb	r3, [r3, #16]
 80029da:	4618      	mov	r0, r3
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	220a      	movs	r2, #10
 80029e0:	4619      	mov	r1, r3
 80029e2:	f003 feb5 	bl	8006750 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <print_menu_init+0x11c>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	7efa      	ldrb	r2, [r7, #27]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe fdaf 	bl	8001554 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80029f6:	4a20      	ldr	r2, [pc, #128]	; (8002a78 <print_menu_init+0x114>)
 80029f8:	1d38      	adds	r0, r7, #4
 80029fa:	2301      	movs	r3, #1
 80029fc:	ca06      	ldmia	r2, {r1, r2}
 80029fe:	f7fe fd83 	bl	8001508 <ssd1306_WriteString>
		memset(str, 0, sizeof(str));
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	2214      	movs	r2, #20
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 feb1 	bl	8006770 <memset>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	6959      	ldr	r1, [r3, #20]
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	220f      	movs	r2, #15
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 ff9f 	bl	800695a <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <print_menu_init+0x120>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	7efa      	ldrb	r2, [r7, #27]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fd94 	bl	8001554 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002a2c:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <print_menu_init+0x114>)
 8002a2e:	1d38      	adds	r0, r7, #4
 8002a30:	2301      	movs	r3, #1
 8002a32:	ca06      	ldmia	r2, {r1, r2}
 8002a34:	f7fe fd68 	bl	8001508 <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8002a38:	f7fe fc56 	bl	80012e8 <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00b      	beq.n	8002a60 <print_menu_init+0xfc>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <print_menu_init+0x124>)
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	7efb      	ldrb	r3, [r7, #27]
 8002a4e:	4413      	add	r3, r2
 8002a50:	76fb      	strb	r3, [r7, #27]
 8002a52:	7efb      	ldrb	r3, [r7, #27]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <print_menu_init+0x128>)
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d9a7      	bls.n	80029ae <print_menu_init+0x4a>
 8002a5e:	e000      	b.n	8002a62 <print_menu_init+0xfe>
		{
			break;
 8002a60:	bf00      	nop
		}
	}
	scroll_bar();
 8002a62:	f7ff fd8b 	bl	800257c <scroll_bar>
}
 8002a66:	bf00      	nop
 8002a68:	3724      	adds	r7, #36	; 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd90      	pop	{r4, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000028 	.word	0x20000028
 8002a74:	080071ac 	.word	0x080071ac
 8002a78:	20000014 	.word	0x20000014
 8002a7c:	20000030 	.word	0x20000030
 8002a80:	2000003a 	.word	0x2000003a
 8002a84:	2000003c 	.word	0x2000003c
 8002a88:	20000038 	.word	0x20000038
 8002a8c:	20000036 	.word	0x20000036

08002a90 <action>:
// ----------------------------------------------------------------------------------------
void action(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]

	clearn_oled();
 8002aa6:	f7fe fb6f 	bl	8001188 <clearn_oled>

	print_rectangle_on_head();
 8002aaa:	f7ff fddb 	bl	8002664 <print_rectangle_on_head>

	//Print selected name of menu on top of OLED (in rectangle)
	MenuItem_t * currentItem_buff_parent = currentItem;
 8002aae:	4b40      	ldr	r3, [pc, #256]	; (8002bb0 <action+0x120>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	617b      	str	r3, [r7, #20]
	currentItem_buff_parent = currentItem_buff_parent -> parent;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	617b      	str	r3, [r7, #20]

	strncpy(str, currentItem_buff_parent -> name, 15);
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	6959      	ldr	r1, [r3, #20]
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f003 ff49 	bl	800695a <strncpy>
	ssd1306_SetCursor(10, 3);
 8002ac8:	2103      	movs	r1, #3
 8002aca:	200a      	movs	r0, #10
 8002acc:	f7fe fd42 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002ad0:	4a38      	ldr	r2, [pc, #224]	; (8002bb4 <action+0x124>)
 8002ad2:	1d38      	adds	r0, r7, #4
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	ca06      	ldmia	r2, {r1, r2}
 8002ad8:	f7fe fd16 	bl	8001508 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002adc:	f7fe fc04 	bl	80012e8 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 fe42 	bl	8006770 <memset>

	MenuItem_t * currentItem_buff = currentItem;
 8002aec:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <action+0x120>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	61fb      	str	r3, [r7, #28]

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <action+0x128>)
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	76fb      	strb	r3, [r7, #27]
 8002af8:	e04b      	b.n	8002b92 <action+0x102>
	{
		if(row == first_menu_row)
 8002afa:	7efb      	ldrb	r3, [r7, #27]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <action+0x128>)
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d10d      	bne.n	8002b22 <action+0x92>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 8002b06:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8002b0a:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8002b0c:	7efb      	ldrb	r3, [r7, #27]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fe fd1f 	bl	8001554 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8002b16:	4a27      	ldr	r2, [pc, #156]	; (8002bb4 <action+0x124>)
 8002b18:	4638      	mov	r0, r7
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	ca06      	ldmia	r2, {r1, r2}
 8002b1e:	f7fe fcf3 	bl	8001508 <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	7c1b      	ldrb	r3, [r3, #16]
 8002b26:	4618      	mov	r0, r3
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	220a      	movs	r2, #10
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f003 fe0f 	bl	8006750 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8002b32:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <action+0x12c>)
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	7efa      	ldrb	r2, [r7, #27]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe fd09 	bl	8001554 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002b42:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <action+0x124>)
 8002b44:	1d38      	adds	r0, r7, #4
 8002b46:	2301      	movs	r3, #1
 8002b48:	ca06      	ldmia	r2, {r1, r2}
 8002b4a:	f7fe fcdd 	bl	8001508 <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	6959      	ldr	r1, [r3, #20]
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	220f      	movs	r2, #15
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 feff 	bl	800695a <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <action+0x130>)
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	7efa      	ldrb	r2, [r7, #27]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fcf4 	bl	8001554 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002b6c:	4a11      	ldr	r2, [pc, #68]	; (8002bb4 <action+0x124>)
 8002b6e:	1d38      	adds	r0, r7, #4
 8002b70:	2301      	movs	r3, #1
 8002b72:	ca06      	ldmia	r2, {r1, r2}
 8002b74:	f7fe fcc8 	bl	8001508 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8002b78:	f7fe fbb6 	bl	80012e8 <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00b      	beq.n	8002ba0 <action+0x110>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <action+0x134>)
 8002b8a:	781a      	ldrb	r2, [r3, #0]
 8002b8c:	7efb      	ldrb	r3, [r7, #27]
 8002b8e:	4413      	add	r3, r2
 8002b90:	76fb      	strb	r3, [r7, #27]
 8002b92:	7efb      	ldrb	r3, [r7, #27]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <action+0x138>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d9ad      	bls.n	8002afa <action+0x6a>
 8002b9e:	e000      	b.n	8002ba2 <action+0x112>
		{
			break;
 8002ba0:	bf00      	nop
		}
	}
	scroll_bar();
 8002ba2:	f7ff fceb 	bl	800257c <scroll_bar>
}
 8002ba6:	bf00      	nop
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000028 	.word	0x20000028
 8002bb4:	20000014 	.word	0x20000014
 8002bb8:	20000030 	.word	0x20000030
 8002bbc:	2000003a 	.word	0x2000003a
 8002bc0:	2000003c 	.word	0x2000003c
 8002bc4:	20000038 	.word	0x20000038
 8002bc8:	20000036 	.word	0x20000036

08002bcc <return_from_menu>:
// ----------------------------------------------------------------------------------------
void return_from_menu(void)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
	currentItem = &items[0];											// Jump to main menu
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <return_from_menu+0x44>)
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <return_from_menu+0x48>)
 8002bd6:	601a      	str	r2, [r3, #0]
	clearn_oled();
 8002bd8:	f7fe fad6 	bl	8001188 <clearn_oled>

	// Print "MAIN MENU:"
	char str[20] = ">> MAIN MENU <<";
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <return_from_menu+0x4c>)
 8002bde:	1d3c      	adds	r4, r7, #4
 8002be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002be2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8002bea:	2103      	movs	r1, #3
 8002bec:	200a      	movs	r0, #10
 8002bee:	f7fe fcb1 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <return_from_menu+0x50>)
 8002bf4:	1d38      	adds	r0, r7, #4
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	ca06      	ldmia	r2, {r1, r2}
 8002bfa:	f7fe fc85 	bl	8001508 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002bfe:	f7fe fb73 	bl	80012e8 <ssd1306_UpdateScreen>

	print_menu_init();													// Print all start menu
 8002c02:	f7ff feaf 	bl	8002964 <print_menu_init>
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd90      	pop	{r4, r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000028 	.word	0x20000028
 8002c14:	20000848 	.word	0x20000848
 8002c18:	080071ac 	.word	0x080071ac
 8002c1c:	20000014 	.word	0x20000014

08002c20 <lora_rx_mode>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// LORA FUNCTIONS
void lora_rx_mode(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
	clearn_oled();
 8002c26:	f7fe faaf 	bl	8001188 <clearn_oled>
	print_rectangle_on_head();
 8002c2a:	f7ff fd1b 	bl	8002664 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8002c2e:	2300      	movs	r3, #0
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <lora_rx_mode+0x88>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6959      	ldr	r1, [r3, #20]
 8002c42:	463b      	mov	r3, r7
 8002c44:	220f      	movs	r2, #15
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 fe87 	bl	800695a <strncpy>
	ssd1306_SetCursor(10, 3);
 8002c4c:	2103      	movs	r1, #3
 8002c4e:	200a      	movs	r0, #10
 8002c50:	f7fe fc80 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002c54:	4a15      	ldr	r2, [pc, #84]	; (8002cac <lora_rx_mode+0x8c>)
 8002c56:	4638      	mov	r0, r7
 8002c58:	2301      	movs	r3, #1
 8002c5a:	ca06      	ldmia	r2, {r1, r2}
 8002c5c:	f7fe fc54 	bl	8001508 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002c60:	f7fe fb42 	bl	80012e8 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002c64:	463b      	mov	r3, r7
 8002c66:	2210      	movs	r2, #16
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 fd80 	bl	8006770 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <lora_rx_mode+0x90>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002c76:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <lora_rx_mode+0x94>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_RX(true);
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f7fd fa65 	bl	800014c <LoRa_RX>
	}while (button_status != BUTTON_ENTER);
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <lora_rx_mode+0x90>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d1f8      	bne.n	8002c7c <lora_rx_mode+0x5c>
	LoRa_RX(false);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fd fa5e 	bl	800014c <LoRa_RX>

	block_interrupt_form_up_and_down_buttons = false;
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <lora_rx_mode+0x94>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <lora_rx_mode+0x88>)
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <lora_rx_mode+0x98>)
 8002c9a:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8002c9c:	f7ff fef8 	bl	8002a90 <action>
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000028 	.word	0x20000028
 8002cac:	20000014 	.word	0x20000014
 8002cb0:	200005a1 	.word	0x200005a1
 8002cb4:	200005a0 	.word	0x200005a0
 8002cb8:	20000794 	.word	0x20000794

08002cbc <lora_tx_mode>:
// ----------------------------------------------------------------------------------------
void lora_tx_mode(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
	clearn_oled();
 8002cc2:	f7fe fa61 	bl	8001188 <clearn_oled>
	print_rectangle_on_head();
 8002cc6:	f7ff fccd 	bl	8002664 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8002cca:	2300      	movs	r3, #0
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <lora_tx_mode+0x88>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6959      	ldr	r1, [r3, #20]
 8002cde:	463b      	mov	r3, r7
 8002ce0:	220f      	movs	r2, #15
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 fe39 	bl	800695a <strncpy>
	ssd1306_SetCursor(10, 3);
 8002ce8:	2103      	movs	r1, #3
 8002cea:	200a      	movs	r0, #10
 8002cec:	f7fe fc32 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <lora_tx_mode+0x8c>)
 8002cf2:	4638      	mov	r0, r7
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	ca06      	ldmia	r2, {r1, r2}
 8002cf8:	f7fe fc06 	bl	8001508 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002cfc:	f7fe faf4 	bl	80012e8 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002d00:	463b      	mov	r3, r7
 8002d02:	2210      	movs	r2, #16
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f003 fd32 	bl	8006770 <memset>


	button_status = BOTTON_DOESENT_PRESS;
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <lora_tx_mode+0x90>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <lora_tx_mode+0x94>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_TX(true);
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f7fd faab 	bl	8000274 <LoRa_TX>

	}while (button_status != BUTTON_ENTER);
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <lora_tx_mode+0x90>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d1f8      	bne.n	8002d18 <lora_tx_mode+0x5c>
	LoRa_TX(false);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f7fd faa4 	bl	8000274 <LoRa_TX>

	block_interrupt_form_up_and_down_buttons = false;
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <lora_tx_mode+0x94>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8002d32:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <lora_tx_mode+0x88>)
 8002d34:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <lora_tx_mode+0x98>)
 8002d36:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8002d38:	f7ff feaa 	bl	8002a90 <action>
}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000028 	.word	0x20000028
 8002d48:	20000014 	.word	0x20000014
 8002d4c:	200005a1 	.word	0x200005a1
 8002d50:	200005a0 	.word	0x200005a0
 8002d54:	20000794 	.word	0x20000794

08002d58 <items_menu_1_set_par_2>:
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
	action();															// Print items on OLED
}
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_2(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
	clearn_oled();
 8002d5e:	f7fe fa13 	bl	8001188 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002d62:	2300      	movs	r3, #0
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <items_menu_1_set_par_2+0xa4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6959      	ldr	r1, [r3, #20]
 8002d76:	463b      	mov	r3, r7
 8002d78:	220f      	movs	r2, #15
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 fded 	bl	800695a <strncpy>
	ssd1306_SetCursor(10, 3);
 8002d80:	2103      	movs	r1, #3
 8002d82:	200a      	movs	r0, #10
 8002d84:	f7fe fbe6 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002d88:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <items_menu_1_set_par_2+0xa8>)
 8002d8a:	4638      	mov	r0, r7
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	ca06      	ldmia	r2, {r1, r2}
 8002d90:	f7fe fbba 	bl	8001508 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002d94:	f7fe faa8 	bl	80012e8 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002d98:	463b      	mov	r3, r7
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f003 fce6 	bl	8006770 <memset>

	strncpy(str, "Set parametr 2", sizeof(str));
 8002da4:	463b      	mov	r3, r7
 8002da6:	2210      	movs	r2, #16
 8002da8:	4916      	ldr	r1, [pc, #88]	; (8002e04 <items_menu_1_set_par_2+0xac>)
 8002daa:	4618      	mov	r0, r3
 8002dac:	f003 fdd5 	bl	800695a <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <items_menu_1_set_par_2+0xb0>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	4619      	mov	r1, r3
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7fe fbcb 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002dbe:	4a10      	ldr	r2, [pc, #64]	; (8002e00 <items_menu_1_set_par_2+0xa8>)
 8002dc0:	4638      	mov	r0, r7
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	ca06      	ldmia	r2, {r1, r2}
 8002dc6:	f7fe fb9f 	bl	8001508 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002dca:	f7fe fa8d 	bl	80012e8 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <items_menu_1_set_par_2+0xb4>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <items_menu_1_set_par_2+0xb8>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <items_menu_1_set_par_2+0xb4>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d1fb      	bne.n	8002dda <items_menu_1_set_par_2+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8002de2:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <items_menu_1_set_par_2+0xb8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <items_menu_1_set_par_2+0xa4>)
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <items_menu_1_set_par_2+0xbc>)
 8002dec:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8002dee:	f7ff fe4f 	bl	8002a90 <action>
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000028 	.word	0x20000028
 8002e00:	20000014 	.word	0x20000014
 8002e04:	080071d0 	.word	0x080071d0
 8002e08:	20000030 	.word	0x20000030
 8002e0c:	200005a1 	.word	0x200005a1
 8002e10:	200005a0 	.word	0x200005a0
 8002e14:	20000794 	.word	0x20000794

08002e18 <items_menu_2_set_par_1>:
//	currentItem = &items_menu_2[0];										// Set global pointer on first menu
//	action();															// Print items on OLED
//}
// ----------------------------------------------------------------------------------------
void items_menu_2_set_par_1(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
	clearn_oled();
 8002e1e:	f7fe f9b3 	bl	8001188 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002e22:	2300      	movs	r3, #0
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002e30:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <items_menu_2_set_par_1+0xa4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6959      	ldr	r1, [r3, #20]
 8002e36:	463b      	mov	r3, r7
 8002e38:	220f      	movs	r2, #15
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 fd8d 	bl	800695a <strncpy>
	ssd1306_SetCursor(10, 3);
 8002e40:	2103      	movs	r1, #3
 8002e42:	200a      	movs	r0, #10
 8002e44:	f7fe fb86 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002e48:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <items_menu_2_set_par_1+0xa8>)
 8002e4a:	4638      	mov	r0, r7
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	ca06      	ldmia	r2, {r1, r2}
 8002e50:	f7fe fb5a 	bl	8001508 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002e54:	f7fe fa48 	bl	80012e8 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002e58:	463b      	mov	r3, r7
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fc86 	bl	8006770 <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 8002e64:	463b      	mov	r3, r7
 8002e66:	2210      	movs	r2, #16
 8002e68:	4916      	ldr	r1, [pc, #88]	; (8002ec4 <items_menu_2_set_par_1+0xac>)
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 fd75 	bl	800695a <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8002e70:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <items_menu_2_set_par_1+0xb0>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	4619      	mov	r1, r3
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe fb6b 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002e7e:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <items_menu_2_set_par_1+0xa8>)
 8002e80:	4638      	mov	r0, r7
 8002e82:	2301      	movs	r3, #1
 8002e84:	ca06      	ldmia	r2, {r1, r2}
 8002e86:	f7fe fb3f 	bl	8001508 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002e8a:	f7fe fa2d 	bl	80012e8 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <items_menu_2_set_par_1+0xb4>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <items_menu_2_set_par_1+0xb8>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <items_menu_2_set_par_1+0xb4>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d1fb      	bne.n	8002e9a <items_menu_2_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <items_menu_2_set_par_1+0xb8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <items_menu_2_set_par_1+0xa4>)
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <items_menu_2_set_par_1+0xbc>)
 8002eac:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8002eae:	f7ff fdef 	bl	8002a90 <action>
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000028 	.word	0x20000028
 8002ec0:	20000014 	.word	0x20000014
 8002ec4:	080071c0 	.word	0x080071c0
 8002ec8:	20000030 	.word	0x20000030
 8002ecc:	200005a1 	.word	0x200005a1
 8002ed0:	200005a0 	.word	0x200005a0
 8002ed4:	20000728 	.word	0x20000728

08002ed8 <do_it_function_menu_3>:
// ----------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_3(void)        // Print T and H
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
	clearn_oled();
 8002ede:	f7fe f953 	bl	8001188 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <do_it_function_menu_3+0xc8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6959      	ldr	r1, [r3, #20]
 8002ef6:	463b      	mov	r3, r7
 8002ef8:	220f      	movs	r2, #15
 8002efa:	4618      	mov	r0, r3
 8002efc:	f003 fd2d 	bl	800695a <strncpy>
	ssd1306_SetCursor(10, 3);
 8002f00:	2103      	movs	r1, #3
 8002f02:	200a      	movs	r0, #10
 8002f04:	f7fe fb26 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <do_it_function_menu_3+0xcc>)
 8002f0a:	4638      	mov	r0, r7
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	ca06      	ldmia	r2, {r1, r2}
 8002f10:	f7fe fafa 	bl	8001508 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002f14:	f7fe f9e8 	bl	80012e8 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002f18:	463b      	mov	r3, r7
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f003 fc26 	bl	8006770 <memset>

	strncpy(str, "Doing something 3", sizeof(str));
 8002f24:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <do_it_function_menu_3+0xd0>)
 8002f26:	463c      	mov	r4, r7
 8002f28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <do_it_function_menu_3+0xd4>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	4619      	mov	r1, r3
 8002f36:	2000      	movs	r0, #0
 8002f38:	f7fe fb0c 	bl	8001554 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002f3c:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <do_it_function_menu_3+0xcc>)
 8002f3e:	4638      	mov	r0, r7
 8002f40:	2301      	movs	r3, #1
 8002f42:	ca06      	ldmia	r2, {r1, r2}
 8002f44:	f7fe fae0 	bl	8001508 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002f48:	f7fe f9ce 	bl	80012e8 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8002f4c:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <do_it_function_menu_3+0xd8>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002f52:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <do_it_function_menu_3+0xdc>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f5e:	4816      	ldr	r0, [pc, #88]	; (8002fb8 <do_it_function_menu_3+0xe0>)
 8002f60:	f000 fcb9 	bl	80038d6 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002f64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f68:	f000 f938 	bl	80031dc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f72:	4811      	ldr	r0, [pc, #68]	; (8002fb8 <do_it_function_menu_3+0xe0>)
 8002f74:	f000 fcaf 	bl	80038d6 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002f78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f7c:	f000 f92e 	bl	80031dc <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <do_it_function_menu_3+0xd8>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d1e7      	bne.n	8002f58 <do_it_function_menu_3+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <do_it_function_menu_3+0xdc>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8002f8e:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <do_it_function_menu_3+0xc8>)
 8002f90:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <do_it_function_menu_3+0xe4>)
 8002f92:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8002f94:	f7ff fd7c 	bl	8002a90 <action>
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd90      	pop	{r4, r7, pc}
 8002fa0:	20000028 	.word	0x20000028
 8002fa4:	20000014 	.word	0x20000014
 8002fa8:	080071e0 	.word	0x080071e0
 8002fac:	20000030 	.word	0x20000030
 8002fb0:	200005a1 	.word	0x200005a1
 8002fb4:	200005a0 	.word	0x200005a0
 8002fb8:	40011000 	.word	0x40011000
 8002fbc:	20000800 	.word	0x20000800

08002fc0 <up>:
//// ----------------------------------------------------------------------------------------
void up(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
	if (currentItem->up)
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <up+0x30>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00d      	beq.n	8002fea <up+0x2a>
	{
	    currentItem = currentItem->up;
 8002fce:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <up+0x30>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a06      	ldr	r2, [pc, #24]	; (8002ff0 <up+0x30>)
 8002fd6:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_up )
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <up+0x30>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <up+0x2a>
	    {
	        currentItem->updateScreen_up();
 8002fe2:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <up+0x30>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	4798      	blx	r3
	    }
	}
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000028 	.word	0x20000028

08002ff4 <down>:
// ----------------------------------------------------------------------------------------
void down(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
	if (currentItem->down)
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <down+0x30>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <down+0x2a>
	{
	    currentItem = currentItem->down;
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <down+0x30>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4a06      	ldr	r2, [pc, #24]	; (8003024 <down+0x30>)
 800300a:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_down )
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <down+0x30>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <down+0x2a>
	    {
	        currentItem->updateScreen_down();
 8003016:	4b03      	ldr	r3, [pc, #12]	; (8003024 <down+0x30>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	4798      	blx	r3
	    }
	}
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000028 	.word	0x20000028

08003028 <enter>:
// ----------------------------------------------------------------------------------------
void enter(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
	bool status = true;
 800302e:	2301      	movs	r3, #1
 8003030:	71fb      	strb	r3, [r7, #7]
	// Якщо є функція "makeAction" тоді виконати її
	if (currentItem->makeAction)
 8003032:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <enter+0x48>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <enter+0x20>
	{
		currentItem->makeAction();
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <enter+0x48>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	4798      	blx	r3
		status = false;
 8003044:	2300      	movs	r3, #0
 8003046:	71fb      	strb	r3, [r7, #7]
	}
	// Якщо є перехід на  "child" і "makeAction" не була виконана, тоді виконати перехід
	if((currentItem->child) && (status == true))
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <enter+0x48>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <enter+0x3e>
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d006      	beq.n	8003066 <enter+0x3e>
	{
		currentItem = currentItem->child;
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <enter+0x48>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <enter+0x48>)
 8003060:	6013      	str	r3, [r2, #0]
		action();
 8003062:	f7ff fd15 	bl	8002a90 <action>
	}
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000028 	.word	0x20000028

08003074 <menu>:
// ----------------------------------------------------------------------------------------
void menu(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
	Menu_Init();									// Init all structures
 8003078:	f7ff f8da 	bl	8002230 <Menu_Init>

	print_menu_init();								// Print start menu and scrolingbar
 800307c:	f7ff fc72 	bl	8002964 <print_menu_init>

	HAL_Delay(10);
 8003080:	200a      	movs	r0, #10
 8003082:	f000 f8ab 	bl	80031dc <HAL_Delay>

	while(1)
	{
		if(button_processed_status == 1)			// If buttons was pressed
 8003086:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <menu+0x50>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d1fb      	bne.n	8003086 <menu+0x12>
		{

			button_processed_status = 1;
 800308e:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <menu+0x50>)
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]
			switch (button_status)
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <menu+0x54>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d00c      	beq.n	80030b6 <menu+0x42>
 800309c:	2b03      	cmp	r3, #3
 800309e:	dc0d      	bgt.n	80030bc <menu+0x48>
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d002      	beq.n	80030aa <menu+0x36>
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d003      	beq.n	80030b0 <menu+0x3c>
 80030a8:	e008      	b.n	80030bc <menu+0x48>
			{
				case BOTTON_UP:
					up();
 80030aa:	f7ff ff89 	bl	8002fc0 <up>
					break;
 80030ae:	e005      	b.n	80030bc <menu+0x48>
				case BUTTON_ENTER:
					enter();
 80030b0:	f7ff ffba 	bl	8003028 <enter>
					break;
 80030b4:	e002      	b.n	80030bc <menu+0x48>
				case BUTTON_DOWN:
					down();
 80030b6:	f7ff ff9d 	bl	8002ff4 <down>
					break;
 80030ba:	bf00      	nop
			}
			button_status = BOTTON_DOESENT_PRESS;
 80030bc:	4b02      	ldr	r3, [pc, #8]	; (80030c8 <menu+0x54>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
		if(button_processed_status == 1)			// If buttons was pressed
 80030c2:	e7e0      	b.n	8003086 <menu+0x12>
 80030c4:	20000020 	.word	0x20000020
 80030c8:	200005a1 	.word	0x200005a1

080030cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030cc:	480c      	ldr	r0, [pc, #48]	; (8003100 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030ce:	490d      	ldr	r1, [pc, #52]	; (8003104 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d4:	e002      	b.n	80030dc <LoopCopyDataInit>

080030d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030da:	3304      	adds	r3, #4

080030dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e0:	d3f9      	bcc.n	80030d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030e4:	4c0a      	ldr	r4, [pc, #40]	; (8003110 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e8:	e001      	b.n	80030ee <LoopFillZerobss>

080030ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030ec:	3204      	adds	r2, #4

080030ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f0:	d3fb      	bcc.n	80030ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030f2:	f7ff f897 	bl	8002224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030f6:	f003 faef 	bl	80066d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030fa:	f7fe fb1d 	bl	8001738 <main>
  bx lr
 80030fe:	4770      	bx	lr
  ldr r0, =_sdata
 8003100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003104:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8003108:	080079e8 	.word	0x080079e8
  ldr r2, =_sbss
 800310c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8003110:	200008c8 	.word	0x200008c8

08003114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003114:	e7fe      	b.n	8003114 <ADC1_2_IRQHandler>
	...

08003118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <HAL_Init+0x28>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a07      	ldr	r2, [pc, #28]	; (8003140 <HAL_Init+0x28>)
 8003122:	f043 0310 	orr.w	r3, r3, #16
 8003126:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003128:	2003      	movs	r0, #3
 800312a:	f000 f947 	bl	80033bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800312e:	2000      	movs	r0, #0
 8003130:	f000 f808 	bl	8003144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003134:	f7fe fda8 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40022000 	.word	0x40022000

08003144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800314c:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_InitTick+0x54>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_InitTick+0x58>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	4619      	mov	r1, r3
 8003156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800315a:	fbb3 f3f1 	udiv	r3, r3, r1
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f95f 	bl	8003426 <HAL_SYSTICK_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e00e      	b.n	8003190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b0f      	cmp	r3, #15
 8003176:	d80a      	bhi.n	800318e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003178:	2200      	movs	r2, #0
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003180:	f000 f927 	bl	80033d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003184:	4a06      	ldr	r2, [pc, #24]	; (80031a0 <HAL_InitTick+0x5c>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	e000      	b.n	8003190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20000024 	.word	0x20000024
 800319c:	20000044 	.word	0x20000044
 80031a0:	20000040 	.word	0x20000040

080031a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_IncTick+0x1c>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_IncTick+0x20>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4413      	add	r3, r2
 80031b4:	4a03      	ldr	r2, [pc, #12]	; (80031c4 <HAL_IncTick+0x20>)
 80031b6:	6013      	str	r3, [r2, #0]
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	20000044 	.word	0x20000044
 80031c4:	200008b4 	.word	0x200008b4

080031c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return uwTick;
 80031cc:	4b02      	ldr	r3, [pc, #8]	; (80031d8 <HAL_GetTick+0x10>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	200008b4 	.word	0x200008b4

080031dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031e4:	f7ff fff0 	bl	80031c8 <HAL_GetTick>
 80031e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f4:	d005      	beq.n	8003202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <HAL_Delay+0x44>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003202:	bf00      	nop
 8003204:	f7ff ffe0 	bl	80031c8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	429a      	cmp	r2, r3
 8003212:	d8f7      	bhi.n	8003204 <HAL_Delay+0x28>
  {
  }
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000044 	.word	0x20000044

08003224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <__NVIC_SetPriorityGrouping+0x44>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003240:	4013      	ands	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800324c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003256:	4a04      	ldr	r2, [pc, #16]	; (8003268 <__NVIC_SetPriorityGrouping+0x44>)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	60d3      	str	r3, [r2, #12]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <__NVIC_GetPriorityGrouping+0x18>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f003 0307 	and.w	r3, r3, #7
}
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	2b00      	cmp	r3, #0
 8003298:	db0b      	blt.n	80032b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	f003 021f 	and.w	r2, r3, #31
 80032a0:	4906      	ldr	r1, [pc, #24]	; (80032bc <__NVIC_EnableIRQ+0x34>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2001      	movs	r0, #1
 80032aa:	fa00 f202 	lsl.w	r2, r0, r2
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	e000e100 	.word	0xe000e100

080032c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	db0a      	blt.n	80032ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	490c      	ldr	r1, [pc, #48]	; (800330c <__NVIC_SetPriority+0x4c>)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	0112      	lsls	r2, r2, #4
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	440b      	add	r3, r1
 80032e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e8:	e00a      	b.n	8003300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4908      	ldr	r1, [pc, #32]	; (8003310 <__NVIC_SetPriority+0x50>)
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	3b04      	subs	r3, #4
 80032f8:	0112      	lsls	r2, r2, #4
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	440b      	add	r3, r1
 80032fe:	761a      	strb	r2, [r3, #24]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	e000e100 	.word	0xe000e100
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	; 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f1c3 0307 	rsb	r3, r3, #7
 800332e:	2b04      	cmp	r3, #4
 8003330:	bf28      	it	cs
 8003332:	2304      	movcs	r3, #4
 8003334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3304      	adds	r3, #4
 800333a:	2b06      	cmp	r3, #6
 800333c:	d902      	bls.n	8003344 <NVIC_EncodePriority+0x30>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3b03      	subs	r3, #3
 8003342:	e000      	b.n	8003346 <NVIC_EncodePriority+0x32>
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43da      	mvns	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	401a      	ands	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800335c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	43d9      	mvns	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800336c:	4313      	orrs	r3, r2
         );
}
 800336e:	4618      	mov	r0, r3
 8003370:	3724      	adds	r7, #36	; 0x24
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003388:	d301      	bcc.n	800338e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800338a:	2301      	movs	r3, #1
 800338c:	e00f      	b.n	80033ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <SysTick_Config+0x40>)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3b01      	subs	r3, #1
 8003394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003396:	210f      	movs	r1, #15
 8003398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800339c:	f7ff ff90 	bl	80032c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <SysTick_Config+0x40>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a6:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <SysTick_Config+0x40>)
 80033a8:	2207      	movs	r2, #7
 80033aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	e000e010 	.word	0xe000e010

080033bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff ff2d 	bl	8003224 <__NVIC_SetPriorityGrouping>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033e4:	f7ff ff42 	bl	800326c <__NVIC_GetPriorityGrouping>
 80033e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	6978      	ldr	r0, [r7, #20]
 80033f0:	f7ff ff90 	bl	8003314 <NVIC_EncodePriority>
 80033f4:	4602      	mov	r2, r0
 80033f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ff5f 	bl	80032c0 <__NVIC_SetPriority>
}
 8003402:	bf00      	nop
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	4603      	mov	r3, r0
 8003412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff ff35 	bl	8003288 <__NVIC_EnableIRQ>
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ffa2 	bl	8003378 <SysTick_Config>
 8003434:	4603      	mov	r3, r0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800343e:	b480      	push	{r7}
 8003440:	b085      	sub	sp, #20
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003450:	2b02      	cmp	r3, #2
 8003452:	d008      	beq.n	8003466 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2204      	movs	r2, #4
 8003458:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e020      	b.n	80034a8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 020e 	bic.w	r2, r2, #14
 8003474:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0201 	bic.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	2101      	movs	r1, #1
 8003490:	fa01 f202 	lsl.w	r2, r1, r2
 8003494:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d005      	beq.n	80034d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2204      	movs	r2, #4
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	e051      	b.n	800357a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 020e 	bic.w	r2, r2, #14
 80034e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a22      	ldr	r2, [pc, #136]	; (8003584 <HAL_DMA_Abort_IT+0xd0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d029      	beq.n	8003554 <HAL_DMA_Abort_IT+0xa0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a20      	ldr	r2, [pc, #128]	; (8003588 <HAL_DMA_Abort_IT+0xd4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d022      	beq.n	8003550 <HAL_DMA_Abort_IT+0x9c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1f      	ldr	r2, [pc, #124]	; (800358c <HAL_DMA_Abort_IT+0xd8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d01a      	beq.n	800354a <HAL_DMA_Abort_IT+0x96>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <HAL_DMA_Abort_IT+0xdc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d012      	beq.n	8003544 <HAL_DMA_Abort_IT+0x90>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <HAL_DMA_Abort_IT+0xe0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00a      	beq.n	800353e <HAL_DMA_Abort_IT+0x8a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <HAL_DMA_Abort_IT+0xe4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d102      	bne.n	8003538 <HAL_DMA_Abort_IT+0x84>
 8003532:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003536:	e00e      	b.n	8003556 <HAL_DMA_Abort_IT+0xa2>
 8003538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800353c:	e00b      	b.n	8003556 <HAL_DMA_Abort_IT+0xa2>
 800353e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003542:	e008      	b.n	8003556 <HAL_DMA_Abort_IT+0xa2>
 8003544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003548:	e005      	b.n	8003556 <HAL_DMA_Abort_IT+0xa2>
 800354a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800354e:	e002      	b.n	8003556 <HAL_DMA_Abort_IT+0xa2>
 8003550:	2310      	movs	r3, #16
 8003552:	e000      	b.n	8003556 <HAL_DMA_Abort_IT+0xa2>
 8003554:	2301      	movs	r3, #1
 8003556:	4a11      	ldr	r2, [pc, #68]	; (800359c <HAL_DMA_Abort_IT+0xe8>)
 8003558:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4798      	blx	r3
    } 
  }
  return status;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40020008 	.word	0x40020008
 8003588:	4002001c 	.word	0x4002001c
 800358c:	40020030 	.word	0x40020030
 8003590:	40020044 	.word	0x40020044
 8003594:	40020058 	.word	0x40020058
 8003598:	4002006c 	.word	0x4002006c
 800359c:	40020000 	.word	0x40020000

080035a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b08b      	sub	sp, #44	; 0x2c
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035aa:	2300      	movs	r3, #0
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b2:	e169      	b.n	8003888 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035b4:	2201      	movs	r2, #1
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	f040 8158 	bne.w	8003882 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4a9a      	ldr	r2, [pc, #616]	; (8003840 <HAL_GPIO_Init+0x2a0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d05e      	beq.n	800369a <HAL_GPIO_Init+0xfa>
 80035dc:	4a98      	ldr	r2, [pc, #608]	; (8003840 <HAL_GPIO_Init+0x2a0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d875      	bhi.n	80036ce <HAL_GPIO_Init+0x12e>
 80035e2:	4a98      	ldr	r2, [pc, #608]	; (8003844 <HAL_GPIO_Init+0x2a4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d058      	beq.n	800369a <HAL_GPIO_Init+0xfa>
 80035e8:	4a96      	ldr	r2, [pc, #600]	; (8003844 <HAL_GPIO_Init+0x2a4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d86f      	bhi.n	80036ce <HAL_GPIO_Init+0x12e>
 80035ee:	4a96      	ldr	r2, [pc, #600]	; (8003848 <HAL_GPIO_Init+0x2a8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d052      	beq.n	800369a <HAL_GPIO_Init+0xfa>
 80035f4:	4a94      	ldr	r2, [pc, #592]	; (8003848 <HAL_GPIO_Init+0x2a8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d869      	bhi.n	80036ce <HAL_GPIO_Init+0x12e>
 80035fa:	4a94      	ldr	r2, [pc, #592]	; (800384c <HAL_GPIO_Init+0x2ac>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d04c      	beq.n	800369a <HAL_GPIO_Init+0xfa>
 8003600:	4a92      	ldr	r2, [pc, #584]	; (800384c <HAL_GPIO_Init+0x2ac>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d863      	bhi.n	80036ce <HAL_GPIO_Init+0x12e>
 8003606:	4a92      	ldr	r2, [pc, #584]	; (8003850 <HAL_GPIO_Init+0x2b0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d046      	beq.n	800369a <HAL_GPIO_Init+0xfa>
 800360c:	4a90      	ldr	r2, [pc, #576]	; (8003850 <HAL_GPIO_Init+0x2b0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d85d      	bhi.n	80036ce <HAL_GPIO_Init+0x12e>
 8003612:	2b12      	cmp	r3, #18
 8003614:	d82a      	bhi.n	800366c <HAL_GPIO_Init+0xcc>
 8003616:	2b12      	cmp	r3, #18
 8003618:	d859      	bhi.n	80036ce <HAL_GPIO_Init+0x12e>
 800361a:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <HAL_GPIO_Init+0x80>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	0800369b 	.word	0x0800369b
 8003624:	08003675 	.word	0x08003675
 8003628:	08003687 	.word	0x08003687
 800362c:	080036c9 	.word	0x080036c9
 8003630:	080036cf 	.word	0x080036cf
 8003634:	080036cf 	.word	0x080036cf
 8003638:	080036cf 	.word	0x080036cf
 800363c:	080036cf 	.word	0x080036cf
 8003640:	080036cf 	.word	0x080036cf
 8003644:	080036cf 	.word	0x080036cf
 8003648:	080036cf 	.word	0x080036cf
 800364c:	080036cf 	.word	0x080036cf
 8003650:	080036cf 	.word	0x080036cf
 8003654:	080036cf 	.word	0x080036cf
 8003658:	080036cf 	.word	0x080036cf
 800365c:	080036cf 	.word	0x080036cf
 8003660:	080036cf 	.word	0x080036cf
 8003664:	0800367d 	.word	0x0800367d
 8003668:	08003691 	.word	0x08003691
 800366c:	4a79      	ldr	r2, [pc, #484]	; (8003854 <HAL_GPIO_Init+0x2b4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003672:	e02c      	b.n	80036ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	623b      	str	r3, [r7, #32]
          break;
 800367a:	e029      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	3304      	adds	r3, #4
 8003682:	623b      	str	r3, [r7, #32]
          break;
 8003684:	e024      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	3308      	adds	r3, #8
 800368c:	623b      	str	r3, [r7, #32]
          break;
 800368e:	e01f      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	330c      	adds	r3, #12
 8003696:	623b      	str	r3, [r7, #32]
          break;
 8003698:	e01a      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036a2:	2304      	movs	r3, #4
 80036a4:	623b      	str	r3, [r7, #32]
          break;
 80036a6:	e013      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036b0:	2308      	movs	r3, #8
 80036b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	611a      	str	r2, [r3, #16]
          break;
 80036ba:	e009      	b.n	80036d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036bc:	2308      	movs	r3, #8
 80036be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	615a      	str	r2, [r3, #20]
          break;
 80036c6:	e003      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036c8:	2300      	movs	r3, #0
 80036ca:	623b      	str	r3, [r7, #32]
          break;
 80036cc:	e000      	b.n	80036d0 <HAL_GPIO_Init+0x130>
          break;
 80036ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2bff      	cmp	r3, #255	; 0xff
 80036d4:	d801      	bhi.n	80036da <HAL_GPIO_Init+0x13a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	e001      	b.n	80036de <HAL_GPIO_Init+0x13e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3304      	adds	r3, #4
 80036de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2bff      	cmp	r3, #255	; 0xff
 80036e4:	d802      	bhi.n	80036ec <HAL_GPIO_Init+0x14c>
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	e002      	b.n	80036f2 <HAL_GPIO_Init+0x152>
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	3b08      	subs	r3, #8
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	210f      	movs	r1, #15
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	401a      	ands	r2, r3
 8003704:	6a39      	ldr	r1, [r7, #32]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	431a      	orrs	r2, r3
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80b1 	beq.w	8003882 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003720:	4b4d      	ldr	r3, [pc, #308]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	4a4c      	ldr	r2, [pc, #304]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6193      	str	r3, [r2, #24]
 800372c:	4b4a      	ldr	r3, [pc, #296]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003738:	4a48      	ldr	r2, [pc, #288]	; (800385c <HAL_GPIO_Init+0x2bc>)
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	3302      	adds	r3, #2
 8003740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003744:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	220f      	movs	r2, #15
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4013      	ands	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a40      	ldr	r2, [pc, #256]	; (8003860 <HAL_GPIO_Init+0x2c0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <HAL_GPIO_Init+0x1ec>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3f      	ldr	r2, [pc, #252]	; (8003864 <HAL_GPIO_Init+0x2c4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00d      	beq.n	8003788 <HAL_GPIO_Init+0x1e8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a3e      	ldr	r2, [pc, #248]	; (8003868 <HAL_GPIO_Init+0x2c8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d007      	beq.n	8003784 <HAL_GPIO_Init+0x1e4>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a3d      	ldr	r2, [pc, #244]	; (800386c <HAL_GPIO_Init+0x2cc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d101      	bne.n	8003780 <HAL_GPIO_Init+0x1e0>
 800377c:	2303      	movs	r3, #3
 800377e:	e006      	b.n	800378e <HAL_GPIO_Init+0x1ee>
 8003780:	2304      	movs	r3, #4
 8003782:	e004      	b.n	800378e <HAL_GPIO_Init+0x1ee>
 8003784:	2302      	movs	r3, #2
 8003786:	e002      	b.n	800378e <HAL_GPIO_Init+0x1ee>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_GPIO_Init+0x1ee>
 800378c:	2300      	movs	r3, #0
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	f002 0203 	and.w	r2, r2, #3
 8003794:	0092      	lsls	r2, r2, #2
 8003796:	4093      	lsls	r3, r2
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800379e:	492f      	ldr	r1, [pc, #188]	; (800385c <HAL_GPIO_Init+0x2bc>)
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	3302      	adds	r3, #2
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037b8:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	492c      	ldr	r1, [pc, #176]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]
 80037c4:	e006      	b.n	80037d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037c6:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	4928      	ldr	r1, [pc, #160]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d006      	beq.n	80037ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037e0:	4b23      	ldr	r3, [pc, #140]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	4922      	ldr	r1, [pc, #136]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]
 80037ec:	e006      	b.n	80037fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	491e      	ldr	r1, [pc, #120]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d006      	beq.n	8003816 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	4918      	ldr	r1, [pc, #96]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]
 8003814:	e006      	b.n	8003824 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003816:	4b16      	ldr	r3, [pc, #88]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	43db      	mvns	r3, r3
 800381e:	4914      	ldr	r1, [pc, #80]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 8003820:	4013      	ands	r3, r2
 8003822:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d021      	beq.n	8003874 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003830:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	490e      	ldr	r1, [pc, #56]	; (8003870 <HAL_GPIO_Init+0x2d0>)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	60cb      	str	r3, [r1, #12]
 800383c:	e021      	b.n	8003882 <HAL_GPIO_Init+0x2e2>
 800383e:	bf00      	nop
 8003840:	10320000 	.word	0x10320000
 8003844:	10310000 	.word	0x10310000
 8003848:	10220000 	.word	0x10220000
 800384c:	10210000 	.word	0x10210000
 8003850:	10120000 	.word	0x10120000
 8003854:	10110000 	.word	0x10110000
 8003858:	40021000 	.word	0x40021000
 800385c:	40010000 	.word	0x40010000
 8003860:	40010800 	.word	0x40010800
 8003864:	40010c00 	.word	0x40010c00
 8003868:	40011000 	.word	0x40011000
 800386c:	40011400 	.word	0x40011400
 8003870:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_GPIO_Init+0x304>)
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	43db      	mvns	r3, r3
 800387c:	4909      	ldr	r1, [pc, #36]	; (80038a4 <HAL_GPIO_Init+0x304>)
 800387e:	4013      	ands	r3, r2
 8003880:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	3301      	adds	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	f47f ae8e 	bne.w	80035b4 <HAL_GPIO_Init+0x14>
  }
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	372c      	adds	r7, #44	; 0x2c
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	40010400 	.word	0x40010400

080038a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	887b      	ldrh	r3, [r7, #2]
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
 80038c4:	e001      	b.n	80038ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	807b      	strh	r3, [r7, #2]
 80038e2:	4613      	mov	r3, r2
 80038e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038e6:	787b      	ldrb	r3, [r7, #1]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ec:	887a      	ldrh	r2, [r7, #2]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038f2:	e003      	b.n	80038fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	041a      	lsls	r2, r3, #16
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	611a      	str	r2, [r3, #16]
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003906:	b480      	push	{r7}
 8003908:	b085      	sub	sp, #20
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003918:	887a      	ldrh	r2, [r7, #2]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4013      	ands	r3, r2
 800391e:	041a      	lsls	r2, r3, #16
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	43d9      	mvns	r1, r3
 8003924:	887b      	ldrh	r3, [r7, #2]
 8003926:	400b      	ands	r3, r1
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	611a      	str	r2, [r3, #16]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d006      	beq.n	800395c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800394e:	4a05      	ldr	r2, [pc, #20]	; (8003964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe f93c 	bl	8001bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40010400 	.word	0x40010400

08003968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e12b      	b.n	8003bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fe f9ac 	bl	8001cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	; 0x24
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039cc:	f000 fffa 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 80039d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4a81      	ldr	r2, [pc, #516]	; (8003bdc <HAL_I2C_Init+0x274>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d807      	bhi.n	80039ec <HAL_I2C_Init+0x84>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4a80      	ldr	r2, [pc, #512]	; (8003be0 <HAL_I2C_Init+0x278>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	bf94      	ite	ls
 80039e4:	2301      	movls	r3, #1
 80039e6:	2300      	movhi	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e006      	b.n	80039fa <HAL_I2C_Init+0x92>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a7d      	ldr	r2, [pc, #500]	; (8003be4 <HAL_I2C_Init+0x27c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	bf94      	ite	ls
 80039f4:	2301      	movls	r3, #1
 80039f6:	2300      	movhi	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0e7      	b.n	8003bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a78      	ldr	r2, [pc, #480]	; (8003be8 <HAL_I2C_Init+0x280>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	0c9b      	lsrs	r3, r3, #18
 8003a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a6a      	ldr	r2, [pc, #424]	; (8003bdc <HAL_I2C_Init+0x274>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d802      	bhi.n	8003a3c <HAL_I2C_Init+0xd4>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	e009      	b.n	8003a50 <HAL_I2C_Init+0xe8>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	4a69      	ldr	r2, [pc, #420]	; (8003bec <HAL_I2C_Init+0x284>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	3301      	adds	r3, #1
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	495c      	ldr	r1, [pc, #368]	; (8003bdc <HAL_I2C_Init+0x274>)
 8003a6c:	428b      	cmp	r3, r1
 8003a6e:	d819      	bhi.n	8003aa4 <HAL_I2C_Init+0x13c>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e59      	subs	r1, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7e:	1c59      	adds	r1, r3, #1
 8003a80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a84:	400b      	ands	r3, r1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_I2C_Init+0x138>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1e59      	subs	r1, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	e051      	b.n	8003b44 <HAL_I2C_Init+0x1dc>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	e04f      	b.n	8003b44 <HAL_I2C_Init+0x1dc>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d111      	bne.n	8003ad0 <HAL_I2C_Init+0x168>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e58      	subs	r0, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	440b      	add	r3, r1
 8003aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e012      	b.n	8003af6 <HAL_I2C_Init+0x18e>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e58      	subs	r0, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	0099      	lsls	r1, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_Init+0x196>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e022      	b.n	8003b44 <HAL_I2C_Init+0x1dc>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10e      	bne.n	8003b24 <HAL_I2C_Init+0x1bc>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1e58      	subs	r0, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6859      	ldr	r1, [r3, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	440b      	add	r3, r1
 8003b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b22:	e00f      	b.n	8003b44 <HAL_I2C_Init+0x1dc>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e58      	subs	r0, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6859      	ldr	r1, [r3, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	0099      	lsls	r1, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	6809      	ldr	r1, [r1, #0]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6911      	ldr	r1, [r2, #16]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68d2      	ldr	r2, [r2, #12]
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	430b      	orrs	r3, r1
 8003b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	000186a0 	.word	0x000186a0
 8003be0:	001e847f 	.word	0x001e847f
 8003be4:	003d08ff 	.word	0x003d08ff
 8003be8:	431bde83 	.word	0x431bde83
 8003bec:	10624dd3 	.word	0x10624dd3

08003bf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	817b      	strh	r3, [r7, #10]
 8003c02:	460b      	mov	r3, r1
 8003c04:	813b      	strh	r3, [r7, #8]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c0a:	f7ff fadd 	bl	80031c8 <HAL_GetTick>
 8003c0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	f040 80d9 	bne.w	8003dd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2319      	movs	r3, #25
 8003c24:	2201      	movs	r2, #1
 8003c26:	496d      	ldr	r1, [pc, #436]	; (8003ddc <HAL_I2C_Mem_Write+0x1ec>)
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f971 	bl	8003f10 <I2C_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
 8003c36:	e0cc      	b.n	8003dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_I2C_Mem_Write+0x56>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e0c5      	b.n	8003dd2 <HAL_I2C_Mem_Write+0x1e2>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d007      	beq.n	8003c6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2221      	movs	r2, #33	; 0x21
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2240      	movs	r2, #64	; 0x40
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a3a      	ldr	r2, [r7, #32]
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a4d      	ldr	r2, [pc, #308]	; (8003de0 <HAL_I2C_Mem_Write+0x1f0>)
 8003cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cae:	88f8      	ldrh	r0, [r7, #6]
 8003cb0:	893a      	ldrh	r2, [r7, #8]
 8003cb2:	8979      	ldrh	r1, [r7, #10]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f890 	bl	8003de4 <I2C_RequestMemoryWrite>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d052      	beq.n	8003d70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e081      	b.n	8003dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f9f2 	bl	80040bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d107      	bne.n	8003cf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06b      	b.n	8003dd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d11b      	bne.n	8003d70 <HAL_I2C_Mem_Write+0x180>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d017      	beq.n	8003d70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1aa      	bne.n	8003cce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f9de 	bl	800413e <I2C_WaitOnBTFFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d107      	bne.n	8003da0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e016      	b.n	8003dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	00100002 	.word	0x00100002
 8003de0:	ffff0000 	.word	0xffff0000

08003de4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	4608      	mov	r0, r1
 8003dee:	4611      	mov	r1, r2
 8003df0:	461a      	mov	r2, r3
 8003df2:	4603      	mov	r3, r0
 8003df4:	817b      	strh	r3, [r7, #10]
 8003df6:	460b      	mov	r3, r1
 8003df8:	813b      	strh	r3, [r7, #8]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f878 	bl	8003f10 <I2C_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00d      	beq.n	8003e42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e34:	d103      	bne.n	8003e3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e05f      	b.n	8003f02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e42:	897b      	ldrh	r3, [r7, #10]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	492d      	ldr	r1, [pc, #180]	; (8003f0c <I2C_RequestMemoryWrite+0x128>)
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f8b0 	bl	8003fbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e04c      	b.n	8003f02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e80:	6a39      	ldr	r1, [r7, #32]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f91a 	bl	80040bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00d      	beq.n	8003eaa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d107      	bne.n	8003ea6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e02b      	b.n	8003f02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb0:	893b      	ldrh	r3, [r7, #8]
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	611a      	str	r2, [r3, #16]
 8003eba:	e021      	b.n	8003f00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ebc:	893b      	ldrh	r3, [r7, #8]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ecc:	6a39      	ldr	r1, [r7, #32]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8f4 	bl	80040bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d107      	bne.n	8003ef2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e005      	b.n	8003f02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef6:	893b      	ldrh	r3, [r7, #8]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	00010002 	.word	0x00010002

08003f10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f20:	e025      	b.n	8003f6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f28:	d021      	beq.n	8003f6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7ff f94d 	bl	80031c8 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d116      	bne.n	8003f6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f043 0220 	orr.w	r2, r3, #32
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e023      	b.n	8003fb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d10d      	bne.n	8003f94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	e00c      	b.n	8003fae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	43da      	mvns	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bf0c      	ite	eq
 8003fa6:	2301      	moveq	r3, #1
 8003fa8:	2300      	movne	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d0b6      	beq.n	8003f22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fcc:	e051      	b.n	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fdc:	d123      	bne.n	8004026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ff6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f043 0204 	orr.w	r2, r3, #4
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e046      	b.n	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402c:	d021      	beq.n	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402e:	f7ff f8cb 	bl	80031c8 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	429a      	cmp	r2, r3
 800403c:	d302      	bcc.n	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d116      	bne.n	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e020      	b.n	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	d10c      	bne.n	8004096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	43da      	mvns	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	e00b      	b.n	80040ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	43da      	mvns	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4013      	ands	r3, r2
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d18d      	bne.n	8003fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040c8:	e02d      	b.n	8004126 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f878 	bl	80041c0 <I2C_IsAcknowledgeFailed>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e02d      	b.n	8004136 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e0:	d021      	beq.n	8004126 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7ff f871 	bl	80031c8 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d116      	bne.n	8004126 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f043 0220 	orr.w	r2, r3, #32
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e007      	b.n	8004136 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b80      	cmp	r3, #128	; 0x80
 8004132:	d1ca      	bne.n	80040ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800414a:	e02d      	b.n	80041a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f837 	bl	80041c0 <I2C_IsAcknowledgeFailed>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e02d      	b.n	80041b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004162:	d021      	beq.n	80041a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004164:	f7ff f830 	bl	80031c8 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	429a      	cmp	r2, r3
 8004172:	d302      	bcc.n	800417a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d116      	bne.n	80041a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e007      	b.n	80041b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d1ca      	bne.n	800414c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d6:	d11b      	bne.n	8004210 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f043 0204 	orr.w	r2, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e26c      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8087 	beq.w	800434a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800423c:	4b92      	ldr	r3, [pc, #584]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 030c 	and.w	r3, r3, #12
 8004244:	2b04      	cmp	r3, #4
 8004246:	d00c      	beq.n	8004262 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004248:	4b8f      	ldr	r3, [pc, #572]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d112      	bne.n	800427a <HAL_RCC_OscConfig+0x5e>
 8004254:	4b8c      	ldr	r3, [pc, #560]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d10b      	bne.n	800427a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004262:	4b89      	ldr	r3, [pc, #548]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d06c      	beq.n	8004348 <HAL_RCC_OscConfig+0x12c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d168      	bne.n	8004348 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e246      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0x76>
 8004284:	4b80      	ldr	r3, [pc, #512]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7f      	ldr	r2, [pc, #508]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 800428a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e02e      	b.n	80042f0 <HAL_RCC_OscConfig+0xd4>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x98>
 800429a:	4b7b      	ldr	r3, [pc, #492]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a7a      	ldr	r2, [pc, #488]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4b78      	ldr	r3, [pc, #480]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a77      	ldr	r2, [pc, #476]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e01d      	b.n	80042f0 <HAL_RCC_OscConfig+0xd4>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0xbc>
 80042be:	4b72      	ldr	r3, [pc, #456]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a71      	ldr	r2, [pc, #452]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4b6f      	ldr	r3, [pc, #444]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a6e      	ldr	r2, [pc, #440]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e00b      	b.n	80042f0 <HAL_RCC_OscConfig+0xd4>
 80042d8:	4b6b      	ldr	r3, [pc, #428]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a6a      	ldr	r2, [pc, #424]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b68      	ldr	r3, [pc, #416]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a67      	ldr	r2, [pc, #412]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d013      	beq.n	8004320 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7fe ff66 	bl	80031c8 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004300:	f7fe ff62 	bl	80031c8 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e1fa      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	4b5d      	ldr	r3, [pc, #372]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0xe4>
 800431e:	e014      	b.n	800434a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fe ff52 	bl	80031c8 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004328:	f7fe ff4e 	bl	80031c8 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	; 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e1e6      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	4b53      	ldr	r3, [pc, #332]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x10c>
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d063      	beq.n	800441e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004356:	4b4c      	ldr	r3, [pc, #304]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004362:	4b49      	ldr	r3, [pc, #292]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b08      	cmp	r3, #8
 800436c:	d11c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x18c>
 800436e:	4b46      	ldr	r3, [pc, #280]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d116      	bne.n	80043a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437a:	4b43      	ldr	r3, [pc, #268]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_RCC_OscConfig+0x176>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d001      	beq.n	8004392 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e1ba      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004392:	4b3d      	ldr	r3, [pc, #244]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4939      	ldr	r1, [pc, #228]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a6:	e03a      	b.n	800441e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d020      	beq.n	80043f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b0:	4b36      	ldr	r3, [pc, #216]	; (800448c <HAL_RCC_OscConfig+0x270>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b6:	f7fe ff07 	bl	80031c8 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043be:	f7fe ff03 	bl	80031c8 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e19b      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d0:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043dc:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4927      	ldr	r1, [pc, #156]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]
 80043f0:	e015      	b.n	800441e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f2:	4b26      	ldr	r3, [pc, #152]	; (800448c <HAL_RCC_OscConfig+0x270>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fe fee6 	bl	80031c8 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004400:	f7fe fee2 	bl	80031c8 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e17a      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004412:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d03a      	beq.n	80044a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d019      	beq.n	8004466 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004432:	4b17      	ldr	r3, [pc, #92]	; (8004490 <HAL_RCC_OscConfig+0x274>)
 8004434:	2201      	movs	r2, #1
 8004436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004438:	f7fe fec6 	bl	80031c8 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004440:	f7fe fec2 	bl	80031c8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e15a      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004452:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800445e:	2001      	movs	r0, #1
 8004460:	f000 fad8 	bl	8004a14 <RCC_Delay>
 8004464:	e01c      	b.n	80044a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <HAL_RCC_OscConfig+0x274>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446c:	f7fe feac 	bl	80031c8 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004472:	e00f      	b.n	8004494 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004474:	f7fe fea8 	bl	80031c8 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d908      	bls.n	8004494 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e140      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	42420000 	.word	0x42420000
 8004490:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004494:	4b9e      	ldr	r3, [pc, #632]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e9      	bne.n	8004474 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80a6 	beq.w	80045fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ae:	2300      	movs	r3, #0
 80044b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b2:	4b97      	ldr	r3, [pc, #604]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10d      	bne.n	80044da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044be:	4b94      	ldr	r3, [pc, #592]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	4a93      	ldr	r2, [pc, #588]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80044c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c8:	61d3      	str	r3, [r2, #28]
 80044ca:	4b91      	ldr	r3, [pc, #580]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044da:	4b8e      	ldr	r3, [pc, #568]	; (8004714 <HAL_RCC_OscConfig+0x4f8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d118      	bne.n	8004518 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e6:	4b8b      	ldr	r3, [pc, #556]	; (8004714 <HAL_RCC_OscConfig+0x4f8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a8a      	ldr	r2, [pc, #552]	; (8004714 <HAL_RCC_OscConfig+0x4f8>)
 80044ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f2:	f7fe fe69 	bl	80031c8 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fa:	f7fe fe65 	bl	80031c8 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b64      	cmp	r3, #100	; 0x64
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e0fd      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	4b81      	ldr	r3, [pc, #516]	; (8004714 <HAL_RCC_OscConfig+0x4f8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f0      	beq.n	80044fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d106      	bne.n	800452e <HAL_RCC_OscConfig+0x312>
 8004520:	4b7b      	ldr	r3, [pc, #492]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4a7a      	ldr	r2, [pc, #488]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6213      	str	r3, [r2, #32]
 800452c:	e02d      	b.n	800458a <HAL_RCC_OscConfig+0x36e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0x334>
 8004536:	4b76      	ldr	r3, [pc, #472]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	4a75      	ldr	r2, [pc, #468]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800453c:	f023 0301 	bic.w	r3, r3, #1
 8004540:	6213      	str	r3, [r2, #32]
 8004542:	4b73      	ldr	r3, [pc, #460]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	4a72      	ldr	r2, [pc, #456]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004548:	f023 0304 	bic.w	r3, r3, #4
 800454c:	6213      	str	r3, [r2, #32]
 800454e:	e01c      	b.n	800458a <HAL_RCC_OscConfig+0x36e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b05      	cmp	r3, #5
 8004556:	d10c      	bne.n	8004572 <HAL_RCC_OscConfig+0x356>
 8004558:	4b6d      	ldr	r3, [pc, #436]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	4a6c      	ldr	r2, [pc, #432]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800455e:	f043 0304 	orr.w	r3, r3, #4
 8004562:	6213      	str	r3, [r2, #32]
 8004564:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4a69      	ldr	r2, [pc, #420]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6213      	str	r3, [r2, #32]
 8004570:	e00b      	b.n	800458a <HAL_RCC_OscConfig+0x36e>
 8004572:	4b67      	ldr	r3, [pc, #412]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4a66      	ldr	r2, [pc, #408]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	6213      	str	r3, [r2, #32]
 800457e:	4b64      	ldr	r3, [pc, #400]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4a63      	ldr	r2, [pc, #396]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004584:	f023 0304 	bic.w	r3, r3, #4
 8004588:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d015      	beq.n	80045be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004592:	f7fe fe19 	bl	80031c8 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004598:	e00a      	b.n	80045b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459a:	f7fe fe15 	bl	80031c8 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0ab      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b0:	4b57      	ldr	r3, [pc, #348]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ee      	beq.n	800459a <HAL_RCC_OscConfig+0x37e>
 80045bc:	e014      	b.n	80045e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045be:	f7fe fe03 	bl	80031c8 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c4:	e00a      	b.n	80045dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c6:	f7fe fdff 	bl	80031c8 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e095      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045dc:	4b4c      	ldr	r3, [pc, #304]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ee      	bne.n	80045c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d105      	bne.n	80045fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ee:	4b48      	ldr	r3, [pc, #288]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	4a47      	ldr	r2, [pc, #284]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80045f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8081 	beq.w	8004706 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004604:	4b42      	ldr	r3, [pc, #264]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b08      	cmp	r3, #8
 800460e:	d061      	beq.n	80046d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d146      	bne.n	80046a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004618:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_OscConfig+0x4fc>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461e:	f7fe fdd3 	bl	80031c8 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004626:	f7fe fdcf 	bl	80031c8 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e067      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004638:	4b35      	ldr	r3, [pc, #212]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f0      	bne.n	8004626 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464c:	d108      	bne.n	8004660 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800464e:	4b30      	ldr	r3, [pc, #192]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	492d      	ldr	r1, [pc, #180]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004660:	4b2b      	ldr	r3, [pc, #172]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a19      	ldr	r1, [r3, #32]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	430b      	orrs	r3, r1
 8004672:	4927      	ldr	r1, [pc, #156]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004678:	4b27      	ldr	r3, [pc, #156]	; (8004718 <HAL_RCC_OscConfig+0x4fc>)
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467e:	f7fe fda3 	bl	80031c8 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004686:	f7fe fd9f 	bl	80031c8 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e037      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0x46a>
 80046a4:	e02f      	b.n	8004706 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <HAL_RCC_OscConfig+0x4fc>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fe fd8c 	bl	80031c8 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fe fd88 	bl	80031c8 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e020      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x498>
 80046d2:	e018      	b.n	8004706 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e013      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d106      	bne.n	8004702 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d001      	beq.n	8004706 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40021000 	.word	0x40021000
 8004714:	40007000 	.word	0x40007000
 8004718:	42420060 	.word	0x42420060

0800471c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0d0      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004730:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d910      	bls.n	8004760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b67      	ldr	r3, [pc, #412]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 0207 	bic.w	r2, r3, #7
 8004746:	4965      	ldr	r1, [pc, #404]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b63      	ldr	r3, [pc, #396]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0b8      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d020      	beq.n	80047ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004778:	4b59      	ldr	r3, [pc, #356]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a58      	ldr	r2, [pc, #352]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004782:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004790:	4b53      	ldr	r3, [pc, #332]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800479a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479c:	4b50      	ldr	r3, [pc, #320]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	494d      	ldr	r1, [pc, #308]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d040      	beq.n	800483c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b47      	ldr	r3, [pc, #284]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d115      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e07f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047da:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e073      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ea:	4b3d      	ldr	r3, [pc, #244]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e06b      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fa:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f023 0203 	bic.w	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4936      	ldr	r1, [pc, #216]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004808:	4313      	orrs	r3, r2
 800480a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800480c:	f7fe fcdc 	bl	80031c8 <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004812:	e00a      	b.n	800482a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004814:	f7fe fcd8 	bl	80031c8 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e053      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 020c 	and.w	r2, r3, #12
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	429a      	cmp	r2, r3
 800483a:	d1eb      	bne.n	8004814 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d210      	bcs.n	800486c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484a:	4b24      	ldr	r3, [pc, #144]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 0207 	bic.w	r2, r3, #7
 8004852:	4922      	ldr	r1, [pc, #136]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485a:	4b20      	ldr	r3, [pc, #128]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e032      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004878:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4916      	ldr	r1, [pc, #88]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004896:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	490e      	ldr	r1, [pc, #56]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048aa:	f000 f821 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80048ae:	4602      	mov	r2, r0
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	490a      	ldr	r1, [pc, #40]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80048bc:	5ccb      	ldrb	r3, [r1, r3]
 80048be:	fa22 f303 	lsr.w	r3, r2, r3
 80048c2:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1cc>)
 80048c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048c6:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_ClockConfig+0x1d0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe fc3a 	bl	8003144 <HAL_InitTick>

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40022000 	.word	0x40022000
 80048e0:	40021000 	.word	0x40021000
 80048e4:	08007970 	.word	0x08007970
 80048e8:	20000024 	.word	0x20000024
 80048ec:	20000040 	.word	0x20000040

080048f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f0:	b490      	push	{r4, r7}
 80048f2:	b08a      	sub	sp, #40	; 0x28
 80048f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048f6:	4b2a      	ldr	r3, [pc, #168]	; (80049a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048f8:	1d3c      	adds	r4, r7, #4
 80048fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004900:	f240 2301 	movw	r3, #513	; 0x201
 8004904:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	2300      	movs	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	2300      	movs	r3, #0
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800491a:	4b22      	ldr	r3, [pc, #136]	; (80049a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b04      	cmp	r3, #4
 8004928:	d002      	beq.n	8004930 <HAL_RCC_GetSysClockFreq+0x40>
 800492a:	2b08      	cmp	r3, #8
 800492c:	d003      	beq.n	8004936 <HAL_RCC_GetSysClockFreq+0x46>
 800492e:	e02d      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004930:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004932:	623b      	str	r3, [r7, #32]
      break;
 8004934:	e02d      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	0c9b      	lsrs	r3, r3, #18
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004942:	4413      	add	r3, r2
 8004944:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004948:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004954:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	0c5b      	lsrs	r3, r3, #17
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004962:	4413      	add	r3, r2
 8004964:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004968:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	4a0e      	ldr	r2, [pc, #56]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800496e:	fb02 f203 	mul.w	r2, r2, r3
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
 800497a:	e004      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	4a0b      	ldr	r2, [pc, #44]	; (80049ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004980:	fb02 f303 	mul.w	r3, r2, r3
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	623b      	str	r3, [r7, #32]
      break;
 800498a:	e002      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800498e:	623b      	str	r3, [r7, #32]
      break;
 8004990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004992:	6a3b      	ldr	r3, [r7, #32]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3728      	adds	r7, #40	; 0x28
 8004998:	46bd      	mov	sp, r7
 800499a:	bc90      	pop	{r4, r7}
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	080071f4 	.word	0x080071f4
 80049a4:	40021000 	.word	0x40021000
 80049a8:	007a1200 	.word	0x007a1200
 80049ac:	003d0900 	.word	0x003d0900

080049b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b4:	4b02      	ldr	r3, [pc, #8]	; (80049c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80049b6:	681b      	ldr	r3, [r3, #0]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	20000024 	.word	0x20000024

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049c8:	f7ff fff2 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4903      	ldr	r1, [pc, #12]	; (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40021000 	.word	0x40021000
 80049e8:	08007980 	.word	0x08007980

080049ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049f0:	f7ff ffde 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	0adb      	lsrs	r3, r3, #11
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4903      	ldr	r1, [pc, #12]	; (8004a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	08007980 	.word	0x08007980

08004a14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <RCC_Delay+0x34>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <RCC_Delay+0x38>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	0a5b      	lsrs	r3, r3, #9
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a30:	bf00      	nop
  }
  while (Delay --);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1e5a      	subs	r2, r3, #1
 8004a36:	60fa      	str	r2, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f9      	bne.n	8004a30 <RCC_Delay+0x1c>
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	20000024 	.word	0x20000024
 8004a4c:	10624dd3 	.word	0x10624dd3

08004a50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e076      	b.n	8004b50 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d108      	bne.n	8004a7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a72:	d009      	beq.n	8004a88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	61da      	str	r2, [r3, #28]
 8004a7a:	e005      	b.n	8004a88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fd f960 	bl	8001d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004abe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0c:	ea42 0103 	orr.w	r1, r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	0c1a      	lsrs	r2, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f002 0204 	and.w	r2, r2, #4
 8004b2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_SPI_Transmit+0x22>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e126      	b.n	8004dc8 <HAL_SPI_Transmit+0x270>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b82:	f7fe fb21 	bl	80031c8 <HAL_GetTick>
 8004b86:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d002      	beq.n	8004b9e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b9c:	e10b      	b.n	8004db6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_SPI_Transmit+0x52>
 8004ba4:	88fb      	ldrh	r3, [r7, #6]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bae:	e102      	b.n	8004db6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	88fa      	ldrh	r2, [r7, #6]
 8004bc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	88fa      	ldrh	r2, [r7, #6]
 8004bce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf6:	d10f      	bne.n	8004c18 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d007      	beq.n	8004c36 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3e:	d14b      	bne.n	8004cd8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_SPI_Transmit+0xf6>
 8004c48:	8afb      	ldrh	r3, [r7, #22]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d13e      	bne.n	8004ccc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	881a      	ldrh	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	1c9a      	adds	r2, r3, #2
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c72:	e02b      	b.n	8004ccc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d112      	bne.n	8004ca8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	1c9a      	adds	r2, r3, #2
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ca6:	e011      	b.n	8004ccc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca8:	f7fe fa8e 	bl	80031c8 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d803      	bhi.n	8004cc0 <HAL_SPI_Transmit+0x168>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_Transmit+0x16e>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d102      	bne.n	8004ccc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cca:	e074      	b.n	8004db6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1ce      	bne.n	8004c74 <HAL_SPI_Transmit+0x11c>
 8004cd6:	e04c      	b.n	8004d72 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_SPI_Transmit+0x18e>
 8004ce0:	8afb      	ldrh	r3, [r7, #22]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d140      	bne.n	8004d68 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	7812      	ldrb	r2, [r2, #0]
 8004cf2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d0c:	e02c      	b.n	8004d68 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d113      	bne.n	8004d44 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	7812      	ldrb	r2, [r2, #0]
 8004d28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d42:	e011      	b.n	8004d68 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d44:	f7fe fa40 	bl	80031c8 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d803      	bhi.n	8004d5c <HAL_SPI_Transmit+0x204>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d5a:	d102      	bne.n	8004d62 <HAL_SPI_Transmit+0x20a>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d66:	e026      	b.n	8004db6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1cd      	bne.n	8004d0e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fbb8 	bl	80054ec <SPI_EndRxTxTransaction>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e000      	b.n	8004db6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004db4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004dc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3720      	adds	r7, #32
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dec:	d112      	bne.n	8004e14 <HAL_SPI_Receive+0x44>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10e      	bne.n	8004e14 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004dfe:	88fa      	ldrh	r2, [r7, #6]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f8f1 	bl	8004ff2 <HAL_SPI_TransmitReceive>
 8004e10:	4603      	mov	r3, r0
 8004e12:	e0ea      	b.n	8004fea <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_SPI_Receive+0x52>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e0e3      	b.n	8004fea <HAL_SPI_Receive+0x21a>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e2a:	f7fe f9cd 	bl	80031c8 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d002      	beq.n	8004e42 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e40:	e0ca      	b.n	8004fd8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_SPI_Receive+0x7e>
 8004e48:	88fb      	ldrh	r3, [r7, #6]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e52:	e0c1      	b.n	8004fd8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2204      	movs	r2, #4
 8004e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	88fa      	ldrh	r2, [r7, #6]
 8004e72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9a:	d10f      	bne.n	8004ebc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004eba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec6:	2b40      	cmp	r3, #64	; 0x40
 8004ec8:	d007      	beq.n	8004eda <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d162      	bne.n	8004fa8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ee2:	e02e      	b.n	8004f42 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d115      	bne.n	8004f1e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f103 020c 	add.w	r2, r3, #12
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	7812      	ldrb	r2, [r2, #0]
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f1c:	e011      	b.n	8004f42 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f1e:	f7fe f953 	bl	80031c8 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d803      	bhi.n	8004f36 <HAL_SPI_Receive+0x166>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f34:	d102      	bne.n	8004f3c <HAL_SPI_Receive+0x16c>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d102      	bne.n	8004f42 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f40:	e04a      	b.n	8004fd8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1cb      	bne.n	8004ee4 <HAL_SPI_Receive+0x114>
 8004f4c:	e031      	b.n	8004fb2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d113      	bne.n	8004f84 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	b292      	uxth	r2, r2
 8004f68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	1c9a      	adds	r2, r3, #2
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f82:	e011      	b.n	8004fa8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f84:	f7fe f920 	bl	80031c8 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d803      	bhi.n	8004f9c <HAL_SPI_Receive+0x1cc>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9a:	d102      	bne.n	8004fa2 <HAL_SPI_Receive+0x1d2>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d102      	bne.n	8004fa8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fa6:	e017      	b.n	8004fd8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1cd      	bne.n	8004f4e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	6839      	ldr	r1, [r7, #0]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fa46 	bl	8005448 <SPI_EndRxTransaction>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	75fb      	strb	r3, [r7, #23]
 8004fd4:	e000      	b.n	8004fd8 <HAL_SPI_Receive+0x208>
  }

error :
 8004fd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b08c      	sub	sp, #48	; 0x30
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005000:	2301      	movs	r3, #1
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x26>
 8005014:	2302      	movs	r3, #2
 8005016:	e18a      	b.n	800532e <HAL_SPI_TransmitReceive+0x33c>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005020:	f7fe f8d2 	bl	80031c8 <HAL_GetTick>
 8005024:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800502c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005036:	887b      	ldrh	r3, [r7, #2]
 8005038:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800503a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800503e:	2b01      	cmp	r3, #1
 8005040:	d00f      	beq.n	8005062 <HAL_SPI_TransmitReceive+0x70>
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005048:	d107      	bne.n	800505a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <HAL_SPI_TransmitReceive+0x68>
 8005052:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005056:	2b04      	cmp	r3, #4
 8005058:	d003      	beq.n	8005062 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800505a:	2302      	movs	r3, #2
 800505c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005060:	e15b      	b.n	800531a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_SPI_TransmitReceive+0x82>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_SPI_TransmitReceive+0x82>
 800506e:	887b      	ldrh	r3, [r7, #2]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d103      	bne.n	800507c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800507a:	e14e      	b.n	800531a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b04      	cmp	r3, #4
 8005086:	d003      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2205      	movs	r2, #5
 800508c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	887a      	ldrh	r2, [r7, #2]
 80050a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	887a      	ldrh	r2, [r7, #2]
 80050a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	887a      	ldrh	r2, [r7, #2]
 80050b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	887a      	ldrh	r2, [r7, #2]
 80050b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d007      	beq.n	80050e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ec:	d178      	bne.n	80051e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_SPI_TransmitReceive+0x10a>
 80050f6:	8b7b      	ldrh	r3, [r7, #26]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d166      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	881a      	ldrh	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	1c9a      	adds	r2, r3, #2
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005120:	e053      	b.n	80051ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b02      	cmp	r3, #2
 800512e:	d11b      	bne.n	8005168 <HAL_SPI_TransmitReceive+0x176>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d016      	beq.n	8005168 <HAL_SPI_TransmitReceive+0x176>
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d113      	bne.n	8005168 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	881a      	ldrh	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	1c9a      	adds	r2, r3, #2
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b01      	cmp	r3, #1
 8005174:	d119      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x1b8>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d014      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	b292      	uxth	r2, r2
 800518c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	1c9a      	adds	r2, r3, #2
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051a6:	2301      	movs	r3, #1
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051aa:	f7fe f80d 	bl	80031c8 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d807      	bhi.n	80051ca <HAL_SPI_TransmitReceive+0x1d8>
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c0:	d003      	beq.n	80051ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051c8:	e0a7      	b.n	800531a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1a6      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x130>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1a1      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x130>
 80051de:	e07c      	b.n	80052da <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_SPI_TransmitReceive+0x1fc>
 80051e8:	8b7b      	ldrh	r3, [r7, #26]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d16b      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	330c      	adds	r3, #12
 80051f8:	7812      	ldrb	r2, [r2, #0]
 80051fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005214:	e057      	b.n	80052c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d11c      	bne.n	800525e <HAL_SPI_TransmitReceive+0x26c>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d017      	beq.n	800525e <HAL_SPI_TransmitReceive+0x26c>
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005230:	2b01      	cmp	r3, #1
 8005232:	d114      	bne.n	800525e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b01      	cmp	r3, #1
 800526a:	d119      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x2ae>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d014      	beq.n	80052a0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800529c:	2301      	movs	r3, #1
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052a0:	f7fd ff92 	bl	80031c8 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d803      	bhi.n	80052b8 <HAL_SPI_TransmitReceive+0x2c6>
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052b6:	d102      	bne.n	80052be <HAL_SPI_TransmitReceive+0x2cc>
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d103      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052c4:	e029      	b.n	800531a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1a2      	bne.n	8005216 <HAL_SPI_TransmitReceive+0x224>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d19d      	bne.n	8005216 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 f904 	bl	80054ec <SPI_EndRxTxTransaction>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d006      	beq.n	80052f8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052f6:	e010      	b.n	800531a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	e000      	b.n	800531a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005318:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800532a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800532e:	4618      	mov	r0, r3
 8005330:	3730      	adds	r7, #48	; 0x30
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005348:	f7fd ff3e 	bl	80031c8 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	4413      	add	r3, r2
 8005356:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005358:	f7fd ff36 	bl	80031c8 <HAL_GetTick>
 800535c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800535e:	4b39      	ldr	r3, [pc, #228]	; (8005444 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	015b      	lsls	r3, r3, #5
 8005364:	0d1b      	lsrs	r3, r3, #20
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	fb02 f303 	mul.w	r3, r2, r3
 800536c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800536e:	e054      	b.n	800541a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005376:	d050      	beq.n	800541a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005378:	f7fd ff26 	bl	80031c8 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	429a      	cmp	r2, r3
 8005386:	d902      	bls.n	800538e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d13d      	bne.n	800540a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800539c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a6:	d111      	bne.n	80053cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b0:	d004      	beq.n	80053bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ba:	d107      	bne.n	80053cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d4:	d10f      	bne.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e017      	b.n	800543a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	3b01      	subs	r3, #1
 8005418:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4013      	ands	r3, r2
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	429a      	cmp	r2, r3
 8005428:	bf0c      	ite	eq
 800542a:	2301      	moveq	r3, #1
 800542c:	2300      	movne	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	429a      	cmp	r2, r3
 8005436:	d19b      	bne.n	8005370 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000024 	.word	0x20000024

08005448 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800545c:	d111      	bne.n	8005482 <SPI_EndRxTransaction+0x3a>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005466:	d004      	beq.n	8005472 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005470:	d107      	bne.n	8005482 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005480:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800548a:	d117      	bne.n	80054bc <SPI_EndRxTransaction+0x74>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005494:	d112      	bne.n	80054bc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2200      	movs	r2, #0
 800549e:	2101      	movs	r1, #1
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7ff ff49 	bl	8005338 <SPI_WaitFlagStateUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01a      	beq.n	80054e2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b0:	f043 0220 	orr.w	r2, r3, #32
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e013      	b.n	80054e4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2200      	movs	r2, #0
 80054c4:	2180      	movs	r1, #128	; 0x80
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f7ff ff36 	bl	8005338 <SPI_WaitFlagStateUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d007      	beq.n	80054e2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	f043 0220 	orr.w	r2, r3, #32
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e000      	b.n	80054e4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	2180      	movs	r1, #128	; 0x80
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff ff18 	bl	8005338 <SPI_WaitFlagStateUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	f043 0220 	orr.w	r2, r3, #32
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e000      	b.n	8005520 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e041      	b.n	80055be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fc fc54 	bl	8001dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f000 faa8 	bl	8005abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d001      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e03a      	b.n	8005656 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a18      	ldr	r2, [pc, #96]	; (8005660 <HAL_TIM_Base_Start_IT+0x98>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00e      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0x58>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560a:	d009      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0x58>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a14      	ldr	r2, [pc, #80]	; (8005664 <HAL_TIM_Base_Start_IT+0x9c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d004      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0x58>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a13      	ldr	r2, [pc, #76]	; (8005668 <HAL_TIM_Base_Start_IT+0xa0>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d111      	bne.n	8005644 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b06      	cmp	r3, #6
 8005630:	d010      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0201 	orr.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005642:	e007      	b.n	8005654 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800

0800566c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6a1a      	ldr	r2, [r3, #32]
 800568a:	f241 1311 	movw	r3, #4369	; 0x1111
 800568e:	4013      	ands	r3, r2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10f      	bne.n	80056b4 <HAL_TIM_Base_Stop_IT+0x48>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6a1a      	ldr	r2, [r3, #32]
 800569a:	f240 4344 	movw	r3, #1092	; 0x444
 800569e:	4013      	ands	r3, r2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d107      	bne.n	80056b4 <HAL_TIM_Base_Stop_IT+0x48>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0201 	bic.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d122      	bne.n	8005724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d11b      	bne.n	8005724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0202 	mvn.w	r2, #2
 80056f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f9ba 	bl	8005a84 <HAL_TIM_IC_CaptureCallback>
 8005710:	e005      	b.n	800571e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f9ad 	bl	8005a72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f9bc 	bl	8005a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b04      	cmp	r3, #4
 8005730:	d122      	bne.n	8005778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b04      	cmp	r3, #4
 800573e:	d11b      	bne.n	8005778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0204 	mvn.w	r2, #4
 8005748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2202      	movs	r2, #2
 800574e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f990 	bl	8005a84 <HAL_TIM_IC_CaptureCallback>
 8005764:	e005      	b.n	8005772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f983 	bl	8005a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f992 	bl	8005a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b08      	cmp	r3, #8
 8005784:	d122      	bne.n	80057cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b08      	cmp	r3, #8
 8005792:	d11b      	bne.n	80057cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0208 	mvn.w	r2, #8
 800579c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2204      	movs	r2, #4
 80057a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f966 	bl	8005a84 <HAL_TIM_IC_CaptureCallback>
 80057b8:	e005      	b.n	80057c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f959 	bl	8005a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f968 	bl	8005a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d122      	bne.n	8005820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d11b      	bne.n	8005820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0210 	mvn.w	r2, #16
 80057f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2208      	movs	r2, #8
 80057f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f93c 	bl	8005a84 <HAL_TIM_IC_CaptureCallback>
 800580c:	e005      	b.n	800581a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f92f 	bl	8005a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f93e 	bl	8005a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b01      	cmp	r3, #1
 800582c:	d10e      	bne.n	800584c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d107      	bne.n	800584c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0201 	mvn.w	r2, #1
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f90a 	bl	8005a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005856:	2b80      	cmp	r3, #128	; 0x80
 8005858:	d10e      	bne.n	8005878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005864:	2b80      	cmp	r3, #128	; 0x80
 8005866:	d107      	bne.n	8005878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fa81 	bl	8005d7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d10e      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d107      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800589c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f902 	bl	8005aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d10e      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d107      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0220 	mvn.w	r2, #32
 80058c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fa4c 	bl	8005d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058d0:	bf00      	nop
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_TIM_ConfigClockSource+0x18>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e0b3      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x180>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800590e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005916:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005928:	d03e      	beq.n	80059a8 <HAL_TIM_ConfigClockSource+0xd0>
 800592a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592e:	f200 8087 	bhi.w	8005a40 <HAL_TIM_ConfigClockSource+0x168>
 8005932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005936:	f000 8085 	beq.w	8005a44 <HAL_TIM_ConfigClockSource+0x16c>
 800593a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593e:	d87f      	bhi.n	8005a40 <HAL_TIM_ConfigClockSource+0x168>
 8005940:	2b70      	cmp	r3, #112	; 0x70
 8005942:	d01a      	beq.n	800597a <HAL_TIM_ConfigClockSource+0xa2>
 8005944:	2b70      	cmp	r3, #112	; 0x70
 8005946:	d87b      	bhi.n	8005a40 <HAL_TIM_ConfigClockSource+0x168>
 8005948:	2b60      	cmp	r3, #96	; 0x60
 800594a:	d050      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x116>
 800594c:	2b60      	cmp	r3, #96	; 0x60
 800594e:	d877      	bhi.n	8005a40 <HAL_TIM_ConfigClockSource+0x168>
 8005950:	2b50      	cmp	r3, #80	; 0x50
 8005952:	d03c      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0xf6>
 8005954:	2b50      	cmp	r3, #80	; 0x50
 8005956:	d873      	bhi.n	8005a40 <HAL_TIM_ConfigClockSource+0x168>
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d058      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x136>
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d86f      	bhi.n	8005a40 <HAL_TIM_ConfigClockSource+0x168>
 8005960:	2b30      	cmp	r3, #48	; 0x30
 8005962:	d064      	beq.n	8005a2e <HAL_TIM_ConfigClockSource+0x156>
 8005964:	2b30      	cmp	r3, #48	; 0x30
 8005966:	d86b      	bhi.n	8005a40 <HAL_TIM_ConfigClockSource+0x168>
 8005968:	2b20      	cmp	r3, #32
 800596a:	d060      	beq.n	8005a2e <HAL_TIM_ConfigClockSource+0x156>
 800596c:	2b20      	cmp	r3, #32
 800596e:	d867      	bhi.n	8005a40 <HAL_TIM_ConfigClockSource+0x168>
 8005970:	2b00      	cmp	r3, #0
 8005972:	d05c      	beq.n	8005a2e <HAL_TIM_ConfigClockSource+0x156>
 8005974:	2b10      	cmp	r3, #16
 8005976:	d05a      	beq.n	8005a2e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005978:	e062      	b.n	8005a40 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6899      	ldr	r1, [r3, #8]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f000 f970 	bl	8005c6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800599c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	609a      	str	r2, [r3, #8]
      break;
 80059a6:	e04e      	b.n	8005a46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	6899      	ldr	r1, [r3, #8]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f000 f959 	bl	8005c6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ca:	609a      	str	r2, [r3, #8]
      break;
 80059cc:	e03b      	b.n	8005a46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6859      	ldr	r1, [r3, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	461a      	mov	r2, r3
 80059dc:	f000 f8d0 	bl	8005b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2150      	movs	r1, #80	; 0x50
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f927 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 80059ec:	e02b      	b.n	8005a46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	6859      	ldr	r1, [r3, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f000 f8ee 	bl	8005bdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2160      	movs	r1, #96	; 0x60
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f917 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 8005a0c:	e01b      	b.n	8005a46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6859      	ldr	r1, [r3, #4]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f000 f8b0 	bl	8005b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2140      	movs	r1, #64	; 0x40
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 f907 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 8005a2c:	e00b      	b.n	8005a46 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f000 f8fe 	bl	8005c3a <TIM_ITRx_SetConfig>
        break;
 8005a3e:	e002      	b.n	8005a46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr

08005a72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr

08005a96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr
	...

08005abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a29      	ldr	r2, [pc, #164]	; (8005b74 <TIM_Base_SetConfig+0xb8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00b      	beq.n	8005aec <TIM_Base_SetConfig+0x30>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ada:	d007      	beq.n	8005aec <TIM_Base_SetConfig+0x30>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a26      	ldr	r2, [pc, #152]	; (8005b78 <TIM_Base_SetConfig+0xbc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_Base_SetConfig+0x30>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a25      	ldr	r2, [pc, #148]	; (8005b7c <TIM_Base_SetConfig+0xc0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d108      	bne.n	8005afe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1c      	ldr	r2, [pc, #112]	; (8005b74 <TIM_Base_SetConfig+0xb8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00b      	beq.n	8005b1e <TIM_Base_SetConfig+0x62>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0c:	d007      	beq.n	8005b1e <TIM_Base_SetConfig+0x62>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a19      	ldr	r2, [pc, #100]	; (8005b78 <TIM_Base_SetConfig+0xbc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d003      	beq.n	8005b1e <TIM_Base_SetConfig+0x62>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a18      	ldr	r2, [pc, #96]	; (8005b7c <TIM_Base_SetConfig+0xc0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d108      	bne.n	8005b30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a07      	ldr	r2, [pc, #28]	; (8005b74 <TIM_Base_SetConfig+0xb8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d103      	bne.n	8005b64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	615a      	str	r2, [r3, #20]
}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr
 8005b74:	40012c00 	.word	0x40012c00
 8005b78:	40000400 	.word	0x40000400
 8005b7c:	40000800 	.word	0x40000800

08005b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f023 0201 	bic.w	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f023 030a 	bic.w	r3, r3, #10
 8005bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr

08005bdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	f023 0210 	bic.w	r2, r3, #16
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	031b      	lsls	r3, r3, #12
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	621a      	str	r2, [r3, #32]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr

08005c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f043 0307 	orr.w	r3, r3, #7
 8005c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	609a      	str	r2, [r3, #8]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr

08005c6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b087      	sub	sp, #28
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	021a      	lsls	r2, r3, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	431a      	orrs	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	609a      	str	r2, [r3, #8]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr

08005cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e046      	b.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00e      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d10:	d009      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a12      	ldr	r2, [pc, #72]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d004      	beq.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a10      	ldr	r2, [pc, #64]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d10c      	bne.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40000400 	.word	0x40000400
 8005d64:	40000800 	.word	0x40000800

08005d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bc80      	pop	{r7}
 8005d78:	4770      	bx	lr

08005d7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e03f      	b.n	8005e1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fc f848 	bl	8001e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2224      	movs	r2, #36	; 0x24
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fbed 	bl	80065b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005de4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695a      	ldr	r2, [r3, #20]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005df4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d130      	bne.n	8005ea2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <HAL_UART_Transmit_IT+0x26>
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e029      	b.n	8005ea4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <HAL_UART_Transmit_IT+0x38>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e022      	b.n	8005ea4 <HAL_UART_Transmit_IT+0x7e>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	88fa      	ldrh	r2, [r7, #6]
 8005e70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	88fa      	ldrh	r2, [r7, #6]
 8005e76:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2221      	movs	r2, #33	; 0x21
 8005e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e9c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e000      	b.n	8005ea4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
  }
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr

08005eae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d11d      	bne.n	8005f04 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_UART_Receive_IT+0x26>
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e016      	b.n	8005f06 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <HAL_UART_Receive_IT+0x38>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	e00f      	b.n	8005f06 <HAL_UART_Receive_IT+0x58>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005ef4:	88fb      	ldrh	r3, [r7, #6]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 f9cf 	bl	800629e <UART_Start_Receive_IT>
 8005f00:	4603      	mov	r3, r0
 8005f02:	e000      	b.n	8005f06 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f04:	2302      	movs	r3, #2
  }
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	; 0x28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10d      	bne.n	8005f62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d008      	beq.n	8005f62 <HAL_UART_IRQHandler+0x52>
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa7f 	bl	800645e <UART_Receive_IT>
      return;
 8005f60:	e17b      	b.n	800625a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80b1 	beq.w	80060cc <HAL_UART_IRQHandler+0x1bc>
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d105      	bne.n	8005f80 <HAL_UART_IRQHandler+0x70>
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80a6 	beq.w	80060cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_UART_IRQHandler+0x90>
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	f043 0201 	orr.w	r2, r3, #1
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	f003 0304 	and.w	r3, r3, #4
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <HAL_UART_IRQHandler+0xb0>
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb8:	f043 0202 	orr.w	r2, r3, #2
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_UART_IRQHandler+0xd0>
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	f043 0204 	orr.w	r2, r3, #4
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00f      	beq.n	800600a <HAL_UART_IRQHandler+0xfa>
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	f003 0320 	and.w	r3, r3, #32
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d104      	bne.n	8005ffe <HAL_UART_IRQHandler+0xee>
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d005      	beq.n	800600a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f043 0208 	orr.w	r2, r3, #8
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 811e 	beq.w	8006250 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <HAL_UART_IRQHandler+0x11e>
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa18 	bl	800645e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	bf14      	ite	ne
 800603c:	2301      	movne	r3, #1
 800603e:	2300      	moveq	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <HAL_UART_IRQHandler+0x146>
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d031      	beq.n	80060ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f95a 	bl	8006310 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d023      	beq.n	80060b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006078:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	2b00      	cmp	r3, #0
 8006080:	d013      	beq.n	80060aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	4a76      	ldr	r2, [pc, #472]	; (8006260 <HAL_UART_IRQHandler+0x350>)
 8006088:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	4618      	mov	r0, r3
 8006090:	f7fd fa10 	bl	80034b4 <HAL_DMA_Abort_IT>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d016      	beq.n	80060c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060a4:	4610      	mov	r0, r2
 80060a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a8:	e00e      	b.n	80060c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f8e3 	bl	8006276 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b0:	e00a      	b.n	80060c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f8df 	bl	8006276 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b8:	e006      	b.n	80060c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f8db 	bl	8006276 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060c6:	e0c3      	b.n	8006250 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c8:	bf00      	nop
    return;
 80060ca:	e0c1      	b.n	8006250 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	f040 80a1 	bne.w	8006218 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 809b 	beq.w	8006218 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8095 	beq.w	8006218 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	d04e      	beq.n	80061b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800611c:	8a3b      	ldrh	r3, [r7, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 8098 	beq.w	8006254 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006128:	8a3a      	ldrh	r2, [r7, #16]
 800612a:	429a      	cmp	r2, r3
 800612c:	f080 8092 	bcs.w	8006254 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8a3a      	ldrh	r2, [r7, #16]
 8006134:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	2b20      	cmp	r3, #32
 800613e:	d02b      	beq.n	8006198 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800614e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695a      	ldr	r2, [r3, #20]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800616e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68da      	ldr	r2, [r3, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0210 	bic.w	r2, r2, #16
 800618c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	4618      	mov	r0, r3
 8006194:	f7fd f953 	bl	800343e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f86d 	bl	8006288 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80061ae:	e051      	b.n	8006254 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d047      	beq.n	8006258 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80061c8:	8a7b      	ldrh	r3, [r7, #18]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d044      	beq.n	8006258 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695a      	ldr	r2, [r3, #20]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0201 	bic.w	r2, r2, #1
 80061ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0210 	bic.w	r2, r2, #16
 800620a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800620c:	8a7b      	ldrh	r3, [r7, #18]
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f839 	bl	8006288 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006216:	e01f      	b.n	8006258 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b00      	cmp	r3, #0
 8006220:	d008      	beq.n	8006234 <HAL_UART_IRQHandler+0x324>
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f8af 	bl	8006390 <UART_Transmit_IT>
    return;
 8006232:	e012      	b.n	800625a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00d      	beq.n	800625a <HAL_UART_IRQHandler+0x34a>
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f8f0 	bl	800642e <UART_EndTransmit_IT>
    return;
 800624e:	e004      	b.n	800625a <HAL_UART_IRQHandler+0x34a>
    return;
 8006250:	bf00      	nop
 8006252:	e002      	b.n	800625a <HAL_UART_IRQHandler+0x34a>
      return;
 8006254:	bf00      	nop
 8006256:	e000      	b.n	800625a <HAL_UART_IRQHandler+0x34a>
      return;
 8006258:	bf00      	nop
  }
}
 800625a:	3728      	adds	r7, #40	; 0x28
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	08006369 	.word	0x08006369

08006264 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	bc80      	pop	{r7}
 8006274:	4770      	bx	lr

08006276 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr

08006288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	bc80      	pop	{r7}
 800629c:	4770      	bx	lr

0800629e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800629e:	b480      	push	{r7}
 80062a0:	b085      	sub	sp, #20
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	4613      	mov	r3, r2
 80062aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	88fa      	ldrh	r2, [r7, #6]
 80062b6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	88fa      	ldrh	r2, [r7, #6]
 80062bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2222      	movs	r2, #34	; 0x22
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062e2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695a      	ldr	r2, [r3, #20]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0220 	orr.w	r2, r2, #32
 8006302:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006326:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695a      	ldr	r2, [r3, #20]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	2b01      	cmp	r3, #1
 800633e:	d107      	bne.n	8006350 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0210 	bic.w	r2, r2, #16
 800634e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr

08006368 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff ff77 	bl	8006276 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006388:	bf00      	nop
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b21      	cmp	r3, #33	; 0x21
 80063a2:	d13e      	bne.n	8006422 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ac:	d114      	bne.n	80063d8 <UART_Transmit_IT+0x48>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d110      	bne.n	80063d8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	1c9a      	adds	r2, r3, #2
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	621a      	str	r2, [r3, #32]
 80063d6:	e008      	b.n	80063ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	1c59      	adds	r1, r3, #1
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	6211      	str	r1, [r2, #32]
 80063e2:	781a      	ldrb	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	4619      	mov	r1, r3
 80063f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10f      	bne.n	800641e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800640c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800641c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	e000      	b.n	8006424 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006422:	2302      	movs	r3, #2
  }
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr

0800642e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006444:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff ff08 	bl	8006264 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b086      	sub	sp, #24
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b22      	cmp	r3, #34	; 0x22
 8006470:	f040 8099 	bne.w	80065a6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647c:	d117      	bne.n	80064ae <UART_Receive_IT+0x50>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d113      	bne.n	80064ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649c:	b29a      	uxth	r2, r3
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a6:	1c9a      	adds	r2, r3, #2
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	629a      	str	r2, [r3, #40]	; 0x28
 80064ac:	e026      	b.n	80064fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c0:	d007      	beq.n	80064d2 <UART_Receive_IT+0x74>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <UART_Receive_IT+0x82>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	e008      	b.n	80064f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29b      	uxth	r3, r3
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4619      	mov	r1, r3
 800650a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800650c:	2b00      	cmp	r3, #0
 800650e:	d148      	bne.n	80065a2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0220 	bic.w	r2, r2, #32
 800651e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800652e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695a      	ldr	r2, [r3, #20]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0201 	bic.w	r2, r2, #1
 800653e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	2b01      	cmp	r3, #1
 800654e:	d123      	bne.n	8006598 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0210 	bic.w	r2, r2, #16
 8006564:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b10      	cmp	r3, #16
 8006572:	d10a      	bne.n	800658a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fe79 	bl	8006288 <HAL_UARTEx_RxEventCallback>
 8006596:	e002      	b.n	800659e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7fb fb35 	bl	8001c08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e002      	b.n	80065a8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e000      	b.n	80065a8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80065a6:	2302      	movs	r3, #2
  }
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80065ea:	f023 030c 	bic.w	r3, r3, #12
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6812      	ldr	r2, [r2, #0]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	430b      	orrs	r3, r1
 80065f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a2c      	ldr	r2, [pc, #176]	; (80066c4 <UART_SetConfig+0x114>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d103      	bne.n	8006620 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006618:	f7fe f9e8 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	e002      	b.n	8006626 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006620:	f7fe f9d0 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8006624:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	009a      	lsls	r2, r3, #2
 8006630:	441a      	add	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	fbb2 f3f3 	udiv	r3, r2, r3
 800663c:	4a22      	ldr	r2, [pc, #136]	; (80066c8 <UART_SetConfig+0x118>)
 800663e:	fba2 2303 	umull	r2, r3, r2, r3
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	0119      	lsls	r1, r3, #4
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	009a      	lsls	r2, r3, #2
 8006650:	441a      	add	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	fbb2 f2f3 	udiv	r2, r2, r3
 800665c:	4b1a      	ldr	r3, [pc, #104]	; (80066c8 <UART_SetConfig+0x118>)
 800665e:	fba3 0302 	umull	r0, r3, r3, r2
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	2064      	movs	r0, #100	; 0x64
 8006666:	fb00 f303 	mul.w	r3, r0, r3
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	3332      	adds	r3, #50	; 0x32
 8006670:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <UART_SetConfig+0x118>)
 8006672:	fba2 2303 	umull	r2, r3, r2, r3
 8006676:	095b      	lsrs	r3, r3, #5
 8006678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800667c:	4419      	add	r1, r3
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009a      	lsls	r2, r3, #2
 8006688:	441a      	add	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	fbb2 f2f3 	udiv	r2, r2, r3
 8006694:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <UART_SetConfig+0x118>)
 8006696:	fba3 0302 	umull	r0, r3, r3, r2
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	2064      	movs	r0, #100	; 0x64
 800669e:	fb00 f303 	mul.w	r3, r0, r3
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	3332      	adds	r3, #50	; 0x32
 80066a8:	4a07      	ldr	r2, [pc, #28]	; (80066c8 <UART_SetConfig+0x118>)
 80066aa:	fba2 2303 	umull	r2, r3, r2, r3
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	f003 020f 	and.w	r2, r3, #15
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	440a      	add	r2, r1
 80066ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80066bc:	bf00      	nop
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40013800 	.word	0x40013800
 80066c8:	51eb851f 	.word	0x51eb851f

080066cc <__errno>:
 80066cc:	4b01      	ldr	r3, [pc, #4]	; (80066d4 <__errno+0x8>)
 80066ce:	6818      	ldr	r0, [r3, #0]
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20000048 	.word	0x20000048

080066d8 <__libc_init_array>:
 80066d8:	b570      	push	{r4, r5, r6, lr}
 80066da:	2600      	movs	r6, #0
 80066dc:	4d0c      	ldr	r5, [pc, #48]	; (8006710 <__libc_init_array+0x38>)
 80066de:	4c0d      	ldr	r4, [pc, #52]	; (8006714 <__libc_init_array+0x3c>)
 80066e0:	1b64      	subs	r4, r4, r5
 80066e2:	10a4      	asrs	r4, r4, #2
 80066e4:	42a6      	cmp	r6, r4
 80066e6:	d109      	bne.n	80066fc <__libc_init_array+0x24>
 80066e8:	f000 fce2 	bl	80070b0 <_init>
 80066ec:	2600      	movs	r6, #0
 80066ee:	4d0a      	ldr	r5, [pc, #40]	; (8006718 <__libc_init_array+0x40>)
 80066f0:	4c0a      	ldr	r4, [pc, #40]	; (800671c <__libc_init_array+0x44>)
 80066f2:	1b64      	subs	r4, r4, r5
 80066f4:	10a4      	asrs	r4, r4, #2
 80066f6:	42a6      	cmp	r6, r4
 80066f8:	d105      	bne.n	8006706 <__libc_init_array+0x2e>
 80066fa:	bd70      	pop	{r4, r5, r6, pc}
 80066fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006700:	4798      	blx	r3
 8006702:	3601      	adds	r6, #1
 8006704:	e7ee      	b.n	80066e4 <__libc_init_array+0xc>
 8006706:	f855 3b04 	ldr.w	r3, [r5], #4
 800670a:	4798      	blx	r3
 800670c:	3601      	adds	r6, #1
 800670e:	e7f2      	b.n	80066f6 <__libc_init_array+0x1e>
 8006710:	080079e0 	.word	0x080079e0
 8006714:	080079e0 	.word	0x080079e0
 8006718:	080079e0 	.word	0x080079e0
 800671c:	080079e4 	.word	0x080079e4

08006720 <__itoa>:
 8006720:	1e93      	subs	r3, r2, #2
 8006722:	2b22      	cmp	r3, #34	; 0x22
 8006724:	b510      	push	{r4, lr}
 8006726:	460c      	mov	r4, r1
 8006728:	d904      	bls.n	8006734 <__itoa+0x14>
 800672a:	2300      	movs	r3, #0
 800672c:	461c      	mov	r4, r3
 800672e:	700b      	strb	r3, [r1, #0]
 8006730:	4620      	mov	r0, r4
 8006732:	bd10      	pop	{r4, pc}
 8006734:	2a0a      	cmp	r2, #10
 8006736:	d109      	bne.n	800674c <__itoa+0x2c>
 8006738:	2800      	cmp	r0, #0
 800673a:	da07      	bge.n	800674c <__itoa+0x2c>
 800673c:	232d      	movs	r3, #45	; 0x2d
 800673e:	700b      	strb	r3, [r1, #0]
 8006740:	2101      	movs	r1, #1
 8006742:	4240      	negs	r0, r0
 8006744:	4421      	add	r1, r4
 8006746:	f000 f91b 	bl	8006980 <__utoa>
 800674a:	e7f1      	b.n	8006730 <__itoa+0x10>
 800674c:	2100      	movs	r1, #0
 800674e:	e7f9      	b.n	8006744 <__itoa+0x24>

08006750 <itoa>:
 8006750:	f7ff bfe6 	b.w	8006720 <__itoa>

08006754 <memcpy>:
 8006754:	440a      	add	r2, r1
 8006756:	4291      	cmp	r1, r2
 8006758:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800675c:	d100      	bne.n	8006760 <memcpy+0xc>
 800675e:	4770      	bx	lr
 8006760:	b510      	push	{r4, lr}
 8006762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006766:	4291      	cmp	r1, r2
 8006768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800676c:	d1f9      	bne.n	8006762 <memcpy+0xe>
 800676e:	bd10      	pop	{r4, pc}

08006770 <memset>:
 8006770:	4603      	mov	r3, r0
 8006772:	4402      	add	r2, r0
 8006774:	4293      	cmp	r3, r2
 8006776:	d100      	bne.n	800677a <memset+0xa>
 8006778:	4770      	bx	lr
 800677a:	f803 1b01 	strb.w	r1, [r3], #1
 800677e:	e7f9      	b.n	8006774 <memset+0x4>

08006780 <_free_r>:
 8006780:	b538      	push	{r3, r4, r5, lr}
 8006782:	4605      	mov	r5, r0
 8006784:	2900      	cmp	r1, #0
 8006786:	d043      	beq.n	8006810 <_free_r+0x90>
 8006788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800678c:	1f0c      	subs	r4, r1, #4
 800678e:	2b00      	cmp	r3, #0
 8006790:	bfb8      	it	lt
 8006792:	18e4      	addlt	r4, r4, r3
 8006794:	f000 f936 	bl	8006a04 <__malloc_lock>
 8006798:	4a1e      	ldr	r2, [pc, #120]	; (8006814 <_free_r+0x94>)
 800679a:	6813      	ldr	r3, [r2, #0]
 800679c:	4610      	mov	r0, r2
 800679e:	b933      	cbnz	r3, 80067ae <_free_r+0x2e>
 80067a0:	6063      	str	r3, [r4, #4]
 80067a2:	6014      	str	r4, [r2, #0]
 80067a4:	4628      	mov	r0, r5
 80067a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067aa:	f000 b931 	b.w	8006a10 <__malloc_unlock>
 80067ae:	42a3      	cmp	r3, r4
 80067b0:	d90a      	bls.n	80067c8 <_free_r+0x48>
 80067b2:	6821      	ldr	r1, [r4, #0]
 80067b4:	1862      	adds	r2, r4, r1
 80067b6:	4293      	cmp	r3, r2
 80067b8:	bf01      	itttt	eq
 80067ba:	681a      	ldreq	r2, [r3, #0]
 80067bc:	685b      	ldreq	r3, [r3, #4]
 80067be:	1852      	addeq	r2, r2, r1
 80067c0:	6022      	streq	r2, [r4, #0]
 80067c2:	6063      	str	r3, [r4, #4]
 80067c4:	6004      	str	r4, [r0, #0]
 80067c6:	e7ed      	b.n	80067a4 <_free_r+0x24>
 80067c8:	461a      	mov	r2, r3
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	b10b      	cbz	r3, 80067d2 <_free_r+0x52>
 80067ce:	42a3      	cmp	r3, r4
 80067d0:	d9fa      	bls.n	80067c8 <_free_r+0x48>
 80067d2:	6811      	ldr	r1, [r2, #0]
 80067d4:	1850      	adds	r0, r2, r1
 80067d6:	42a0      	cmp	r0, r4
 80067d8:	d10b      	bne.n	80067f2 <_free_r+0x72>
 80067da:	6820      	ldr	r0, [r4, #0]
 80067dc:	4401      	add	r1, r0
 80067de:	1850      	adds	r0, r2, r1
 80067e0:	4283      	cmp	r3, r0
 80067e2:	6011      	str	r1, [r2, #0]
 80067e4:	d1de      	bne.n	80067a4 <_free_r+0x24>
 80067e6:	6818      	ldr	r0, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	4401      	add	r1, r0
 80067ec:	6011      	str	r1, [r2, #0]
 80067ee:	6053      	str	r3, [r2, #4]
 80067f0:	e7d8      	b.n	80067a4 <_free_r+0x24>
 80067f2:	d902      	bls.n	80067fa <_free_r+0x7a>
 80067f4:	230c      	movs	r3, #12
 80067f6:	602b      	str	r3, [r5, #0]
 80067f8:	e7d4      	b.n	80067a4 <_free_r+0x24>
 80067fa:	6820      	ldr	r0, [r4, #0]
 80067fc:	1821      	adds	r1, r4, r0
 80067fe:	428b      	cmp	r3, r1
 8006800:	bf01      	itttt	eq
 8006802:	6819      	ldreq	r1, [r3, #0]
 8006804:	685b      	ldreq	r3, [r3, #4]
 8006806:	1809      	addeq	r1, r1, r0
 8006808:	6021      	streq	r1, [r4, #0]
 800680a:	6063      	str	r3, [r4, #4]
 800680c:	6054      	str	r4, [r2, #4]
 800680e:	e7c9      	b.n	80067a4 <_free_r+0x24>
 8006810:	bd38      	pop	{r3, r4, r5, pc}
 8006812:	bf00      	nop
 8006814:	200005a4 	.word	0x200005a4

08006818 <_malloc_r>:
 8006818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681a:	1ccd      	adds	r5, r1, #3
 800681c:	f025 0503 	bic.w	r5, r5, #3
 8006820:	3508      	adds	r5, #8
 8006822:	2d0c      	cmp	r5, #12
 8006824:	bf38      	it	cc
 8006826:	250c      	movcc	r5, #12
 8006828:	2d00      	cmp	r5, #0
 800682a:	4606      	mov	r6, r0
 800682c:	db01      	blt.n	8006832 <_malloc_r+0x1a>
 800682e:	42a9      	cmp	r1, r5
 8006830:	d903      	bls.n	800683a <_malloc_r+0x22>
 8006832:	230c      	movs	r3, #12
 8006834:	6033      	str	r3, [r6, #0]
 8006836:	2000      	movs	r0, #0
 8006838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800683a:	f000 f8e3 	bl	8006a04 <__malloc_lock>
 800683e:	4921      	ldr	r1, [pc, #132]	; (80068c4 <_malloc_r+0xac>)
 8006840:	680a      	ldr	r2, [r1, #0]
 8006842:	4614      	mov	r4, r2
 8006844:	b99c      	cbnz	r4, 800686e <_malloc_r+0x56>
 8006846:	4f20      	ldr	r7, [pc, #128]	; (80068c8 <_malloc_r+0xb0>)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	b923      	cbnz	r3, 8006856 <_malloc_r+0x3e>
 800684c:	4621      	mov	r1, r4
 800684e:	4630      	mov	r0, r6
 8006850:	f000 f83c 	bl	80068cc <_sbrk_r>
 8006854:	6038      	str	r0, [r7, #0]
 8006856:	4629      	mov	r1, r5
 8006858:	4630      	mov	r0, r6
 800685a:	f000 f837 	bl	80068cc <_sbrk_r>
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	d123      	bne.n	80068aa <_malloc_r+0x92>
 8006862:	230c      	movs	r3, #12
 8006864:	4630      	mov	r0, r6
 8006866:	6033      	str	r3, [r6, #0]
 8006868:	f000 f8d2 	bl	8006a10 <__malloc_unlock>
 800686c:	e7e3      	b.n	8006836 <_malloc_r+0x1e>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	1b5b      	subs	r3, r3, r5
 8006872:	d417      	bmi.n	80068a4 <_malloc_r+0x8c>
 8006874:	2b0b      	cmp	r3, #11
 8006876:	d903      	bls.n	8006880 <_malloc_r+0x68>
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	441c      	add	r4, r3
 800687c:	6025      	str	r5, [r4, #0]
 800687e:	e004      	b.n	800688a <_malloc_r+0x72>
 8006880:	6863      	ldr	r3, [r4, #4]
 8006882:	42a2      	cmp	r2, r4
 8006884:	bf0c      	ite	eq
 8006886:	600b      	streq	r3, [r1, #0]
 8006888:	6053      	strne	r3, [r2, #4]
 800688a:	4630      	mov	r0, r6
 800688c:	f000 f8c0 	bl	8006a10 <__malloc_unlock>
 8006890:	f104 000b 	add.w	r0, r4, #11
 8006894:	1d23      	adds	r3, r4, #4
 8006896:	f020 0007 	bic.w	r0, r0, #7
 800689a:	1ac2      	subs	r2, r0, r3
 800689c:	d0cc      	beq.n	8006838 <_malloc_r+0x20>
 800689e:	1a1b      	subs	r3, r3, r0
 80068a0:	50a3      	str	r3, [r4, r2]
 80068a2:	e7c9      	b.n	8006838 <_malloc_r+0x20>
 80068a4:	4622      	mov	r2, r4
 80068a6:	6864      	ldr	r4, [r4, #4]
 80068a8:	e7cc      	b.n	8006844 <_malloc_r+0x2c>
 80068aa:	1cc4      	adds	r4, r0, #3
 80068ac:	f024 0403 	bic.w	r4, r4, #3
 80068b0:	42a0      	cmp	r0, r4
 80068b2:	d0e3      	beq.n	800687c <_malloc_r+0x64>
 80068b4:	1a21      	subs	r1, r4, r0
 80068b6:	4630      	mov	r0, r6
 80068b8:	f000 f808 	bl	80068cc <_sbrk_r>
 80068bc:	3001      	adds	r0, #1
 80068be:	d1dd      	bne.n	800687c <_malloc_r+0x64>
 80068c0:	e7cf      	b.n	8006862 <_malloc_r+0x4a>
 80068c2:	bf00      	nop
 80068c4:	200005a4 	.word	0x200005a4
 80068c8:	200005a8 	.word	0x200005a8

080068cc <_sbrk_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	2300      	movs	r3, #0
 80068d0:	4d05      	ldr	r5, [pc, #20]	; (80068e8 <_sbrk_r+0x1c>)
 80068d2:	4604      	mov	r4, r0
 80068d4:	4608      	mov	r0, r1
 80068d6:	602b      	str	r3, [r5, #0]
 80068d8:	f7fb fc6e 	bl	80021b8 <_sbrk>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d102      	bne.n	80068e6 <_sbrk_r+0x1a>
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	b103      	cbz	r3, 80068e6 <_sbrk_r+0x1a>
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	200008b8 	.word	0x200008b8

080068ec <siprintf>:
 80068ec:	b40e      	push	{r1, r2, r3}
 80068ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068f2:	b500      	push	{lr}
 80068f4:	b09c      	sub	sp, #112	; 0x70
 80068f6:	ab1d      	add	r3, sp, #116	; 0x74
 80068f8:	9002      	str	r0, [sp, #8]
 80068fa:	9006      	str	r0, [sp, #24]
 80068fc:	9107      	str	r1, [sp, #28]
 80068fe:	9104      	str	r1, [sp, #16]
 8006900:	4808      	ldr	r0, [pc, #32]	; (8006924 <siprintf+0x38>)
 8006902:	4909      	ldr	r1, [pc, #36]	; (8006928 <siprintf+0x3c>)
 8006904:	f853 2b04 	ldr.w	r2, [r3], #4
 8006908:	9105      	str	r1, [sp, #20]
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	a902      	add	r1, sp, #8
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	f000 f8e0 	bl	8006ad4 <_svfiprintf_r>
 8006914:	2200      	movs	r2, #0
 8006916:	9b02      	ldr	r3, [sp, #8]
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	b01c      	add	sp, #112	; 0x70
 800691c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006920:	b003      	add	sp, #12
 8006922:	4770      	bx	lr
 8006924:	20000048 	.word	0x20000048
 8006928:	ffff0208 	.word	0xffff0208

0800692c <strcat>:
 800692c:	4602      	mov	r2, r0
 800692e:	b510      	push	{r4, lr}
 8006930:	7814      	ldrb	r4, [r2, #0]
 8006932:	4613      	mov	r3, r2
 8006934:	3201      	adds	r2, #1
 8006936:	2c00      	cmp	r4, #0
 8006938:	d1fa      	bne.n	8006930 <strcat+0x4>
 800693a:	3b01      	subs	r3, #1
 800693c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006940:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006944:	2a00      	cmp	r2, #0
 8006946:	d1f9      	bne.n	800693c <strcat+0x10>
 8006948:	bd10      	pop	{r4, pc}

0800694a <strcpy>:
 800694a:	4603      	mov	r3, r0
 800694c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006950:	f803 2b01 	strb.w	r2, [r3], #1
 8006954:	2a00      	cmp	r2, #0
 8006956:	d1f9      	bne.n	800694c <strcpy+0x2>
 8006958:	4770      	bx	lr

0800695a <strncpy>:
 800695a:	4603      	mov	r3, r0
 800695c:	b510      	push	{r4, lr}
 800695e:	3901      	subs	r1, #1
 8006960:	b132      	cbz	r2, 8006970 <strncpy+0x16>
 8006962:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006966:	3a01      	subs	r2, #1
 8006968:	f803 4b01 	strb.w	r4, [r3], #1
 800696c:	2c00      	cmp	r4, #0
 800696e:	d1f7      	bne.n	8006960 <strncpy+0x6>
 8006970:	2100      	movs	r1, #0
 8006972:	441a      	add	r2, r3
 8006974:	4293      	cmp	r3, r2
 8006976:	d100      	bne.n	800697a <strncpy+0x20>
 8006978:	bd10      	pop	{r4, pc}
 800697a:	f803 1b01 	strb.w	r1, [r3], #1
 800697e:	e7f9      	b.n	8006974 <strncpy+0x1a>

08006980 <__utoa>:
 8006980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006982:	b08b      	sub	sp, #44	; 0x2c
 8006984:	4605      	mov	r5, r0
 8006986:	460b      	mov	r3, r1
 8006988:	466e      	mov	r6, sp
 800698a:	4c1d      	ldr	r4, [pc, #116]	; (8006a00 <__utoa+0x80>)
 800698c:	f104 0c20 	add.w	ip, r4, #32
 8006990:	4637      	mov	r7, r6
 8006992:	6820      	ldr	r0, [r4, #0]
 8006994:	6861      	ldr	r1, [r4, #4]
 8006996:	3408      	adds	r4, #8
 8006998:	c703      	stmia	r7!, {r0, r1}
 800699a:	4564      	cmp	r4, ip
 800699c:	463e      	mov	r6, r7
 800699e:	d1f7      	bne.n	8006990 <__utoa+0x10>
 80069a0:	7921      	ldrb	r1, [r4, #4]
 80069a2:	6820      	ldr	r0, [r4, #0]
 80069a4:	7139      	strb	r1, [r7, #4]
 80069a6:	1e91      	subs	r1, r2, #2
 80069a8:	2922      	cmp	r1, #34	; 0x22
 80069aa:	6038      	str	r0, [r7, #0]
 80069ac:	f04f 0100 	mov.w	r1, #0
 80069b0:	d904      	bls.n	80069bc <__utoa+0x3c>
 80069b2:	7019      	strb	r1, [r3, #0]
 80069b4:	460b      	mov	r3, r1
 80069b6:	4618      	mov	r0, r3
 80069b8:	b00b      	add	sp, #44	; 0x2c
 80069ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069bc:	1e58      	subs	r0, r3, #1
 80069be:	4684      	mov	ip, r0
 80069c0:	fbb5 f7f2 	udiv	r7, r5, r2
 80069c4:	fb02 5617 	mls	r6, r2, r7, r5
 80069c8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80069cc:	4476      	add	r6, lr
 80069ce:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80069d2:	460c      	mov	r4, r1
 80069d4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80069d8:	462e      	mov	r6, r5
 80069da:	42b2      	cmp	r2, r6
 80069dc:	463d      	mov	r5, r7
 80069de:	f101 0101 	add.w	r1, r1, #1
 80069e2:	d9ed      	bls.n	80069c0 <__utoa+0x40>
 80069e4:	2200      	movs	r2, #0
 80069e6:	545a      	strb	r2, [r3, r1]
 80069e8:	1919      	adds	r1, r3, r4
 80069ea:	1aa5      	subs	r5, r4, r2
 80069ec:	42aa      	cmp	r2, r5
 80069ee:	dae2      	bge.n	80069b6 <__utoa+0x36>
 80069f0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80069f4:	780e      	ldrb	r6, [r1, #0]
 80069f6:	3201      	adds	r2, #1
 80069f8:	7006      	strb	r6, [r0, #0]
 80069fa:	f801 5901 	strb.w	r5, [r1], #-1
 80069fe:	e7f4      	b.n	80069ea <__utoa+0x6a>
 8006a00:	08007988 	.word	0x08007988

08006a04 <__malloc_lock>:
 8006a04:	4801      	ldr	r0, [pc, #4]	; (8006a0c <__malloc_lock+0x8>)
 8006a06:	f000 bafb 	b.w	8007000 <__retarget_lock_acquire_recursive>
 8006a0a:	bf00      	nop
 8006a0c:	200008c0 	.word	0x200008c0

08006a10 <__malloc_unlock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__malloc_unlock+0x8>)
 8006a12:	f000 baf6 	b.w	8007002 <__retarget_lock_release_recursive>
 8006a16:	bf00      	nop
 8006a18:	200008c0 	.word	0x200008c0

08006a1c <__ssputs_r>:
 8006a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a20:	688e      	ldr	r6, [r1, #8]
 8006a22:	4682      	mov	sl, r0
 8006a24:	429e      	cmp	r6, r3
 8006a26:	460c      	mov	r4, r1
 8006a28:	4690      	mov	r8, r2
 8006a2a:	461f      	mov	r7, r3
 8006a2c:	d838      	bhi.n	8006aa0 <__ssputs_r+0x84>
 8006a2e:	898a      	ldrh	r2, [r1, #12]
 8006a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a34:	d032      	beq.n	8006a9c <__ssputs_r+0x80>
 8006a36:	6825      	ldr	r5, [r4, #0]
 8006a38:	6909      	ldr	r1, [r1, #16]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	eba5 0901 	sub.w	r9, r5, r1
 8006a40:	6965      	ldr	r5, [r4, #20]
 8006a42:	444b      	add	r3, r9
 8006a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a4c:	106d      	asrs	r5, r5, #1
 8006a4e:	429d      	cmp	r5, r3
 8006a50:	bf38      	it	cc
 8006a52:	461d      	movcc	r5, r3
 8006a54:	0553      	lsls	r3, r2, #21
 8006a56:	d531      	bpl.n	8006abc <__ssputs_r+0xa0>
 8006a58:	4629      	mov	r1, r5
 8006a5a:	f7ff fedd 	bl	8006818 <_malloc_r>
 8006a5e:	4606      	mov	r6, r0
 8006a60:	b950      	cbnz	r0, 8006a78 <__ssputs_r+0x5c>
 8006a62:	230c      	movs	r3, #12
 8006a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a68:	f8ca 3000 	str.w	r3, [sl]
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a72:	81a3      	strh	r3, [r4, #12]
 8006a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a78:	464a      	mov	r2, r9
 8006a7a:	6921      	ldr	r1, [r4, #16]
 8006a7c:	f7ff fe6a 	bl	8006754 <memcpy>
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8a:	81a3      	strh	r3, [r4, #12]
 8006a8c:	6126      	str	r6, [r4, #16]
 8006a8e:	444e      	add	r6, r9
 8006a90:	6026      	str	r6, [r4, #0]
 8006a92:	463e      	mov	r6, r7
 8006a94:	6165      	str	r5, [r4, #20]
 8006a96:	eba5 0509 	sub.w	r5, r5, r9
 8006a9a:	60a5      	str	r5, [r4, #8]
 8006a9c:	42be      	cmp	r6, r7
 8006a9e:	d900      	bls.n	8006aa2 <__ssputs_r+0x86>
 8006aa0:	463e      	mov	r6, r7
 8006aa2:	4632      	mov	r2, r6
 8006aa4:	4641      	mov	r1, r8
 8006aa6:	6820      	ldr	r0, [r4, #0]
 8006aa8:	f000 faba 	bl	8007020 <memmove>
 8006aac:	68a3      	ldr	r3, [r4, #8]
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	1b9b      	subs	r3, r3, r6
 8006ab2:	4432      	add	r2, r6
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	60a3      	str	r3, [r4, #8]
 8006ab8:	6022      	str	r2, [r4, #0]
 8006aba:	e7db      	b.n	8006a74 <__ssputs_r+0x58>
 8006abc:	462a      	mov	r2, r5
 8006abe:	f000 fac9 	bl	8007054 <_realloc_r>
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d1e1      	bne.n	8006a8c <__ssputs_r+0x70>
 8006ac8:	4650      	mov	r0, sl
 8006aca:	6921      	ldr	r1, [r4, #16]
 8006acc:	f7ff fe58 	bl	8006780 <_free_r>
 8006ad0:	e7c7      	b.n	8006a62 <__ssputs_r+0x46>
	...

08006ad4 <_svfiprintf_r>:
 8006ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad8:	4698      	mov	r8, r3
 8006ada:	898b      	ldrh	r3, [r1, #12]
 8006adc:	4607      	mov	r7, r0
 8006ade:	061b      	lsls	r3, r3, #24
 8006ae0:	460d      	mov	r5, r1
 8006ae2:	4614      	mov	r4, r2
 8006ae4:	b09d      	sub	sp, #116	; 0x74
 8006ae6:	d50e      	bpl.n	8006b06 <_svfiprintf_r+0x32>
 8006ae8:	690b      	ldr	r3, [r1, #16]
 8006aea:	b963      	cbnz	r3, 8006b06 <_svfiprintf_r+0x32>
 8006aec:	2140      	movs	r1, #64	; 0x40
 8006aee:	f7ff fe93 	bl	8006818 <_malloc_r>
 8006af2:	6028      	str	r0, [r5, #0]
 8006af4:	6128      	str	r0, [r5, #16]
 8006af6:	b920      	cbnz	r0, 8006b02 <_svfiprintf_r+0x2e>
 8006af8:	230c      	movs	r3, #12
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b00:	e0d1      	b.n	8006ca6 <_svfiprintf_r+0x1d2>
 8006b02:	2340      	movs	r3, #64	; 0x40
 8006b04:	616b      	str	r3, [r5, #20]
 8006b06:	2300      	movs	r3, #0
 8006b08:	9309      	str	r3, [sp, #36]	; 0x24
 8006b0a:	2320      	movs	r3, #32
 8006b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b10:	2330      	movs	r3, #48	; 0x30
 8006b12:	f04f 0901 	mov.w	r9, #1
 8006b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006cc0 <_svfiprintf_r+0x1ec>
 8006b1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b22:	4623      	mov	r3, r4
 8006b24:	469a      	mov	sl, r3
 8006b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b2a:	b10a      	cbz	r2, 8006b30 <_svfiprintf_r+0x5c>
 8006b2c:	2a25      	cmp	r2, #37	; 0x25
 8006b2e:	d1f9      	bne.n	8006b24 <_svfiprintf_r+0x50>
 8006b30:	ebba 0b04 	subs.w	fp, sl, r4
 8006b34:	d00b      	beq.n	8006b4e <_svfiprintf_r+0x7a>
 8006b36:	465b      	mov	r3, fp
 8006b38:	4622      	mov	r2, r4
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	f7ff ff6d 	bl	8006a1c <__ssputs_r>
 8006b42:	3001      	adds	r0, #1
 8006b44:	f000 80aa 	beq.w	8006c9c <_svfiprintf_r+0x1c8>
 8006b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b4a:	445a      	add	r2, fp
 8006b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 80a2 	beq.w	8006c9c <_svfiprintf_r+0x1c8>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b62:	f10a 0a01 	add.w	sl, sl, #1
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	9307      	str	r3, [sp, #28]
 8006b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b70:	4654      	mov	r4, sl
 8006b72:	2205      	movs	r2, #5
 8006b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b78:	4851      	ldr	r0, [pc, #324]	; (8006cc0 <_svfiprintf_r+0x1ec>)
 8006b7a:	f000 fa43 	bl	8007004 <memchr>
 8006b7e:	9a04      	ldr	r2, [sp, #16]
 8006b80:	b9d8      	cbnz	r0, 8006bba <_svfiprintf_r+0xe6>
 8006b82:	06d0      	lsls	r0, r2, #27
 8006b84:	bf44      	itt	mi
 8006b86:	2320      	movmi	r3, #32
 8006b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b8c:	0711      	lsls	r1, r2, #28
 8006b8e:	bf44      	itt	mi
 8006b90:	232b      	movmi	r3, #43	; 0x2b
 8006b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b96:	f89a 3000 	ldrb.w	r3, [sl]
 8006b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b9c:	d015      	beq.n	8006bca <_svfiprintf_r+0xf6>
 8006b9e:	4654      	mov	r4, sl
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	f04f 0c0a 	mov.w	ip, #10
 8006ba6:	9a07      	ldr	r2, [sp, #28]
 8006ba8:	4621      	mov	r1, r4
 8006baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bae:	3b30      	subs	r3, #48	; 0x30
 8006bb0:	2b09      	cmp	r3, #9
 8006bb2:	d94e      	bls.n	8006c52 <_svfiprintf_r+0x17e>
 8006bb4:	b1b0      	cbz	r0, 8006be4 <_svfiprintf_r+0x110>
 8006bb6:	9207      	str	r2, [sp, #28]
 8006bb8:	e014      	b.n	8006be4 <_svfiprintf_r+0x110>
 8006bba:	eba0 0308 	sub.w	r3, r0, r8
 8006bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	46a2      	mov	sl, r4
 8006bc6:	9304      	str	r3, [sp, #16]
 8006bc8:	e7d2      	b.n	8006b70 <_svfiprintf_r+0x9c>
 8006bca:	9b03      	ldr	r3, [sp, #12]
 8006bcc:	1d19      	adds	r1, r3, #4
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	9103      	str	r1, [sp, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bfbb      	ittet	lt
 8006bd6:	425b      	neglt	r3, r3
 8006bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8006bdc:	9307      	strge	r3, [sp, #28]
 8006bde:	9307      	strlt	r3, [sp, #28]
 8006be0:	bfb8      	it	lt
 8006be2:	9204      	strlt	r2, [sp, #16]
 8006be4:	7823      	ldrb	r3, [r4, #0]
 8006be6:	2b2e      	cmp	r3, #46	; 0x2e
 8006be8:	d10c      	bne.n	8006c04 <_svfiprintf_r+0x130>
 8006bea:	7863      	ldrb	r3, [r4, #1]
 8006bec:	2b2a      	cmp	r3, #42	; 0x2a
 8006bee:	d135      	bne.n	8006c5c <_svfiprintf_r+0x188>
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	3402      	adds	r4, #2
 8006bf4:	1d1a      	adds	r2, r3, #4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	9203      	str	r2, [sp, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bfb8      	it	lt
 8006bfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c02:	9305      	str	r3, [sp, #20]
 8006c04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cd0 <_svfiprintf_r+0x1fc>
 8006c08:	2203      	movs	r2, #3
 8006c0a:	4650      	mov	r0, sl
 8006c0c:	7821      	ldrb	r1, [r4, #0]
 8006c0e:	f000 f9f9 	bl	8007004 <memchr>
 8006c12:	b140      	cbz	r0, 8006c26 <_svfiprintf_r+0x152>
 8006c14:	2340      	movs	r3, #64	; 0x40
 8006c16:	eba0 000a 	sub.w	r0, r0, sl
 8006c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8006c1e:	9b04      	ldr	r3, [sp, #16]
 8006c20:	3401      	adds	r4, #1
 8006c22:	4303      	orrs	r3, r0
 8006c24:	9304      	str	r3, [sp, #16]
 8006c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c2a:	2206      	movs	r2, #6
 8006c2c:	4825      	ldr	r0, [pc, #148]	; (8006cc4 <_svfiprintf_r+0x1f0>)
 8006c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c32:	f000 f9e7 	bl	8007004 <memchr>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d038      	beq.n	8006cac <_svfiprintf_r+0x1d8>
 8006c3a:	4b23      	ldr	r3, [pc, #140]	; (8006cc8 <_svfiprintf_r+0x1f4>)
 8006c3c:	bb1b      	cbnz	r3, 8006c86 <_svfiprintf_r+0x1b2>
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	3307      	adds	r3, #7
 8006c42:	f023 0307 	bic.w	r3, r3, #7
 8006c46:	3308      	adds	r3, #8
 8006c48:	9303      	str	r3, [sp, #12]
 8006c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c4c:	4433      	add	r3, r6
 8006c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c50:	e767      	b.n	8006b22 <_svfiprintf_r+0x4e>
 8006c52:	460c      	mov	r4, r1
 8006c54:	2001      	movs	r0, #1
 8006c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c5a:	e7a5      	b.n	8006ba8 <_svfiprintf_r+0xd4>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f04f 0c0a 	mov.w	ip, #10
 8006c62:	4619      	mov	r1, r3
 8006c64:	3401      	adds	r4, #1
 8006c66:	9305      	str	r3, [sp, #20]
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c6e:	3a30      	subs	r2, #48	; 0x30
 8006c70:	2a09      	cmp	r2, #9
 8006c72:	d903      	bls.n	8006c7c <_svfiprintf_r+0x1a8>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0c5      	beq.n	8006c04 <_svfiprintf_r+0x130>
 8006c78:	9105      	str	r1, [sp, #20]
 8006c7a:	e7c3      	b.n	8006c04 <_svfiprintf_r+0x130>
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	2301      	movs	r3, #1
 8006c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c84:	e7f0      	b.n	8006c68 <_svfiprintf_r+0x194>
 8006c86:	ab03      	add	r3, sp, #12
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	462a      	mov	r2, r5
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <_svfiprintf_r+0x1f8>)
 8006c90:	a904      	add	r1, sp, #16
 8006c92:	f3af 8000 	nop.w
 8006c96:	1c42      	adds	r2, r0, #1
 8006c98:	4606      	mov	r6, r0
 8006c9a:	d1d6      	bne.n	8006c4a <_svfiprintf_r+0x176>
 8006c9c:	89ab      	ldrh	r3, [r5, #12]
 8006c9e:	065b      	lsls	r3, r3, #25
 8006ca0:	f53f af2c 	bmi.w	8006afc <_svfiprintf_r+0x28>
 8006ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ca6:	b01d      	add	sp, #116	; 0x74
 8006ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cac:	ab03      	add	r3, sp, #12
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	462a      	mov	r2, r5
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <_svfiprintf_r+0x1f8>)
 8006cb6:	a904      	add	r1, sp, #16
 8006cb8:	f000 f87c 	bl	8006db4 <_printf_i>
 8006cbc:	e7eb      	b.n	8006c96 <_svfiprintf_r+0x1c2>
 8006cbe:	bf00      	nop
 8006cc0:	080079ad 	.word	0x080079ad
 8006cc4:	080079b7 	.word	0x080079b7
 8006cc8:	00000000 	.word	0x00000000
 8006ccc:	08006a1d 	.word	0x08006a1d
 8006cd0:	080079b3 	.word	0x080079b3

08006cd4 <_printf_common>:
 8006cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd8:	4616      	mov	r6, r2
 8006cda:	4699      	mov	r9, r3
 8006cdc:	688a      	ldr	r2, [r1, #8]
 8006cde:	690b      	ldr	r3, [r1, #16]
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	bfb8      	it	lt
 8006ce6:	4613      	movlt	r3, r2
 8006ce8:	6033      	str	r3, [r6, #0]
 8006cea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cee:	460c      	mov	r4, r1
 8006cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cf4:	b10a      	cbz	r2, 8006cfa <_printf_common+0x26>
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	6033      	str	r3, [r6, #0]
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	0699      	lsls	r1, r3, #26
 8006cfe:	bf42      	ittt	mi
 8006d00:	6833      	ldrmi	r3, [r6, #0]
 8006d02:	3302      	addmi	r3, #2
 8006d04:	6033      	strmi	r3, [r6, #0]
 8006d06:	6825      	ldr	r5, [r4, #0]
 8006d08:	f015 0506 	ands.w	r5, r5, #6
 8006d0c:	d106      	bne.n	8006d1c <_printf_common+0x48>
 8006d0e:	f104 0a19 	add.w	sl, r4, #25
 8006d12:	68e3      	ldr	r3, [r4, #12]
 8006d14:	6832      	ldr	r2, [r6, #0]
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	42ab      	cmp	r3, r5
 8006d1a:	dc28      	bgt.n	8006d6e <_printf_common+0x9a>
 8006d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d20:	1e13      	subs	r3, r2, #0
 8006d22:	6822      	ldr	r2, [r4, #0]
 8006d24:	bf18      	it	ne
 8006d26:	2301      	movne	r3, #1
 8006d28:	0692      	lsls	r2, r2, #26
 8006d2a:	d42d      	bmi.n	8006d88 <_printf_common+0xb4>
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	4638      	mov	r0, r7
 8006d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d34:	47c0      	blx	r8
 8006d36:	3001      	adds	r0, #1
 8006d38:	d020      	beq.n	8006d7c <_printf_common+0xa8>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	68e5      	ldr	r5, [r4, #12]
 8006d3e:	f003 0306 	and.w	r3, r3, #6
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	bf18      	it	ne
 8006d46:	2500      	movne	r5, #0
 8006d48:	6832      	ldr	r2, [r6, #0]
 8006d4a:	f04f 0600 	mov.w	r6, #0
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	bf08      	it	eq
 8006d52:	1aad      	subeq	r5, r5, r2
 8006d54:	6922      	ldr	r2, [r4, #16]
 8006d56:	bf08      	it	eq
 8006d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	bfc4      	itt	gt
 8006d60:	1a9b      	subgt	r3, r3, r2
 8006d62:	18ed      	addgt	r5, r5, r3
 8006d64:	341a      	adds	r4, #26
 8006d66:	42b5      	cmp	r5, r6
 8006d68:	d11a      	bne.n	8006da0 <_printf_common+0xcc>
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	e008      	b.n	8006d80 <_printf_common+0xac>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4652      	mov	r2, sl
 8006d72:	4649      	mov	r1, r9
 8006d74:	4638      	mov	r0, r7
 8006d76:	47c0      	blx	r8
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d103      	bne.n	8006d84 <_printf_common+0xb0>
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d84:	3501      	adds	r5, #1
 8006d86:	e7c4      	b.n	8006d12 <_printf_common+0x3e>
 8006d88:	2030      	movs	r0, #48	; 0x30
 8006d8a:	18e1      	adds	r1, r4, r3
 8006d8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d96:	4422      	add	r2, r4
 8006d98:	3302      	adds	r3, #2
 8006d9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d9e:	e7c5      	b.n	8006d2c <_printf_common+0x58>
 8006da0:	2301      	movs	r3, #1
 8006da2:	4622      	mov	r2, r4
 8006da4:	4649      	mov	r1, r9
 8006da6:	4638      	mov	r0, r7
 8006da8:	47c0      	blx	r8
 8006daa:	3001      	adds	r0, #1
 8006dac:	d0e6      	beq.n	8006d7c <_printf_common+0xa8>
 8006dae:	3601      	adds	r6, #1
 8006db0:	e7d9      	b.n	8006d66 <_printf_common+0x92>
	...

08006db4 <_printf_i>:
 8006db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db8:	460c      	mov	r4, r1
 8006dba:	7e27      	ldrb	r7, [r4, #24]
 8006dbc:	4691      	mov	r9, r2
 8006dbe:	2f78      	cmp	r7, #120	; 0x78
 8006dc0:	4680      	mov	r8, r0
 8006dc2:	469a      	mov	sl, r3
 8006dc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006dc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dca:	d807      	bhi.n	8006ddc <_printf_i+0x28>
 8006dcc:	2f62      	cmp	r7, #98	; 0x62
 8006dce:	d80a      	bhi.n	8006de6 <_printf_i+0x32>
 8006dd0:	2f00      	cmp	r7, #0
 8006dd2:	f000 80d9 	beq.w	8006f88 <_printf_i+0x1d4>
 8006dd6:	2f58      	cmp	r7, #88	; 0x58
 8006dd8:	f000 80a4 	beq.w	8006f24 <_printf_i+0x170>
 8006ddc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006de4:	e03a      	b.n	8006e5c <_printf_i+0xa8>
 8006de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dea:	2b15      	cmp	r3, #21
 8006dec:	d8f6      	bhi.n	8006ddc <_printf_i+0x28>
 8006dee:	a001      	add	r0, pc, #4	; (adr r0, 8006df4 <_printf_i+0x40>)
 8006df0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006df4:	08006e4d 	.word	0x08006e4d
 8006df8:	08006e61 	.word	0x08006e61
 8006dfc:	08006ddd 	.word	0x08006ddd
 8006e00:	08006ddd 	.word	0x08006ddd
 8006e04:	08006ddd 	.word	0x08006ddd
 8006e08:	08006ddd 	.word	0x08006ddd
 8006e0c:	08006e61 	.word	0x08006e61
 8006e10:	08006ddd 	.word	0x08006ddd
 8006e14:	08006ddd 	.word	0x08006ddd
 8006e18:	08006ddd 	.word	0x08006ddd
 8006e1c:	08006ddd 	.word	0x08006ddd
 8006e20:	08006f6f 	.word	0x08006f6f
 8006e24:	08006e91 	.word	0x08006e91
 8006e28:	08006f51 	.word	0x08006f51
 8006e2c:	08006ddd 	.word	0x08006ddd
 8006e30:	08006ddd 	.word	0x08006ddd
 8006e34:	08006f91 	.word	0x08006f91
 8006e38:	08006ddd 	.word	0x08006ddd
 8006e3c:	08006e91 	.word	0x08006e91
 8006e40:	08006ddd 	.word	0x08006ddd
 8006e44:	08006ddd 	.word	0x08006ddd
 8006e48:	08006f59 	.word	0x08006f59
 8006e4c:	680b      	ldr	r3, [r1, #0]
 8006e4e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e52:	1d1a      	adds	r2, r3, #4
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	600a      	str	r2, [r1, #0]
 8006e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0a4      	b.n	8006faa <_printf_i+0x1f6>
 8006e60:	6825      	ldr	r5, [r4, #0]
 8006e62:	6808      	ldr	r0, [r1, #0]
 8006e64:	062e      	lsls	r6, r5, #24
 8006e66:	f100 0304 	add.w	r3, r0, #4
 8006e6a:	d50a      	bpl.n	8006e82 <_printf_i+0xce>
 8006e6c:	6805      	ldr	r5, [r0, #0]
 8006e6e:	600b      	str	r3, [r1, #0]
 8006e70:	2d00      	cmp	r5, #0
 8006e72:	da03      	bge.n	8006e7c <_printf_i+0xc8>
 8006e74:	232d      	movs	r3, #45	; 0x2d
 8006e76:	426d      	negs	r5, r5
 8006e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e7c:	230a      	movs	r3, #10
 8006e7e:	485e      	ldr	r0, [pc, #376]	; (8006ff8 <_printf_i+0x244>)
 8006e80:	e019      	b.n	8006eb6 <_printf_i+0x102>
 8006e82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e86:	6805      	ldr	r5, [r0, #0]
 8006e88:	600b      	str	r3, [r1, #0]
 8006e8a:	bf18      	it	ne
 8006e8c:	b22d      	sxthne	r5, r5
 8006e8e:	e7ef      	b.n	8006e70 <_printf_i+0xbc>
 8006e90:	680b      	ldr	r3, [r1, #0]
 8006e92:	6825      	ldr	r5, [r4, #0]
 8006e94:	1d18      	adds	r0, r3, #4
 8006e96:	6008      	str	r0, [r1, #0]
 8006e98:	0628      	lsls	r0, r5, #24
 8006e9a:	d501      	bpl.n	8006ea0 <_printf_i+0xec>
 8006e9c:	681d      	ldr	r5, [r3, #0]
 8006e9e:	e002      	b.n	8006ea6 <_printf_i+0xf2>
 8006ea0:	0669      	lsls	r1, r5, #25
 8006ea2:	d5fb      	bpl.n	8006e9c <_printf_i+0xe8>
 8006ea4:	881d      	ldrh	r5, [r3, #0]
 8006ea6:	2f6f      	cmp	r7, #111	; 0x6f
 8006ea8:	bf0c      	ite	eq
 8006eaa:	2308      	moveq	r3, #8
 8006eac:	230a      	movne	r3, #10
 8006eae:	4852      	ldr	r0, [pc, #328]	; (8006ff8 <_printf_i+0x244>)
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eb6:	6866      	ldr	r6, [r4, #4]
 8006eb8:	2e00      	cmp	r6, #0
 8006eba:	bfa8      	it	ge
 8006ebc:	6821      	ldrge	r1, [r4, #0]
 8006ebe:	60a6      	str	r6, [r4, #8]
 8006ec0:	bfa4      	itt	ge
 8006ec2:	f021 0104 	bicge.w	r1, r1, #4
 8006ec6:	6021      	strge	r1, [r4, #0]
 8006ec8:	b90d      	cbnz	r5, 8006ece <_printf_i+0x11a>
 8006eca:	2e00      	cmp	r6, #0
 8006ecc:	d04d      	beq.n	8006f6a <_printf_i+0x1b6>
 8006ece:	4616      	mov	r6, r2
 8006ed0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ed4:	fb03 5711 	mls	r7, r3, r1, r5
 8006ed8:	5dc7      	ldrb	r7, [r0, r7]
 8006eda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ede:	462f      	mov	r7, r5
 8006ee0:	42bb      	cmp	r3, r7
 8006ee2:	460d      	mov	r5, r1
 8006ee4:	d9f4      	bls.n	8006ed0 <_printf_i+0x11c>
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d10b      	bne.n	8006f02 <_printf_i+0x14e>
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	07df      	lsls	r7, r3, #31
 8006eee:	d508      	bpl.n	8006f02 <_printf_i+0x14e>
 8006ef0:	6923      	ldr	r3, [r4, #16]
 8006ef2:	6861      	ldr	r1, [r4, #4]
 8006ef4:	4299      	cmp	r1, r3
 8006ef6:	bfde      	ittt	le
 8006ef8:	2330      	movle	r3, #48	; 0x30
 8006efa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006efe:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006f02:	1b92      	subs	r2, r2, r6
 8006f04:	6122      	str	r2, [r4, #16]
 8006f06:	464b      	mov	r3, r9
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	f8cd a000 	str.w	sl, [sp]
 8006f10:	aa03      	add	r2, sp, #12
 8006f12:	f7ff fedf 	bl	8006cd4 <_printf_common>
 8006f16:	3001      	adds	r0, #1
 8006f18:	d14c      	bne.n	8006fb4 <_printf_i+0x200>
 8006f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f1e:	b004      	add	sp, #16
 8006f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f24:	4834      	ldr	r0, [pc, #208]	; (8006ff8 <_printf_i+0x244>)
 8006f26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f2a:	680e      	ldr	r6, [r1, #0]
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f32:	061f      	lsls	r7, r3, #24
 8006f34:	600e      	str	r6, [r1, #0]
 8006f36:	d514      	bpl.n	8006f62 <_printf_i+0x1ae>
 8006f38:	07d9      	lsls	r1, r3, #31
 8006f3a:	bf44      	itt	mi
 8006f3c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f40:	6023      	strmi	r3, [r4, #0]
 8006f42:	b91d      	cbnz	r5, 8006f4c <_printf_i+0x198>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	f023 0320 	bic.w	r3, r3, #32
 8006f4a:	6023      	str	r3, [r4, #0]
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	e7af      	b.n	8006eb0 <_printf_i+0xfc>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	f043 0320 	orr.w	r3, r3, #32
 8006f56:	6023      	str	r3, [r4, #0]
 8006f58:	2378      	movs	r3, #120	; 0x78
 8006f5a:	4828      	ldr	r0, [pc, #160]	; (8006ffc <_printf_i+0x248>)
 8006f5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f60:	e7e3      	b.n	8006f2a <_printf_i+0x176>
 8006f62:	065e      	lsls	r6, r3, #25
 8006f64:	bf48      	it	mi
 8006f66:	b2ad      	uxthmi	r5, r5
 8006f68:	e7e6      	b.n	8006f38 <_printf_i+0x184>
 8006f6a:	4616      	mov	r6, r2
 8006f6c:	e7bb      	b.n	8006ee6 <_printf_i+0x132>
 8006f6e:	680b      	ldr	r3, [r1, #0]
 8006f70:	6826      	ldr	r6, [r4, #0]
 8006f72:	1d1d      	adds	r5, r3, #4
 8006f74:	6960      	ldr	r0, [r4, #20]
 8006f76:	600d      	str	r5, [r1, #0]
 8006f78:	0635      	lsls	r5, r6, #24
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	d501      	bpl.n	8006f82 <_printf_i+0x1ce>
 8006f7e:	6018      	str	r0, [r3, #0]
 8006f80:	e002      	b.n	8006f88 <_printf_i+0x1d4>
 8006f82:	0671      	lsls	r1, r6, #25
 8006f84:	d5fb      	bpl.n	8006f7e <_printf_i+0x1ca>
 8006f86:	8018      	strh	r0, [r3, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4616      	mov	r6, r2
 8006f8c:	6123      	str	r3, [r4, #16]
 8006f8e:	e7ba      	b.n	8006f06 <_printf_i+0x152>
 8006f90:	680b      	ldr	r3, [r1, #0]
 8006f92:	1d1a      	adds	r2, r3, #4
 8006f94:	600a      	str	r2, [r1, #0]
 8006f96:	681e      	ldr	r6, [r3, #0]
 8006f98:	2100      	movs	r1, #0
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	6862      	ldr	r2, [r4, #4]
 8006f9e:	f000 f831 	bl	8007004 <memchr>
 8006fa2:	b108      	cbz	r0, 8006fa8 <_printf_i+0x1f4>
 8006fa4:	1b80      	subs	r0, r0, r6
 8006fa6:	6060      	str	r0, [r4, #4]
 8006fa8:	6863      	ldr	r3, [r4, #4]
 8006faa:	6123      	str	r3, [r4, #16]
 8006fac:	2300      	movs	r3, #0
 8006fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fb2:	e7a8      	b.n	8006f06 <_printf_i+0x152>
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	4640      	mov	r0, r8
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	47d0      	blx	sl
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d0ab      	beq.n	8006f1a <_printf_i+0x166>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	079b      	lsls	r3, r3, #30
 8006fc6:	d413      	bmi.n	8006ff0 <_printf_i+0x23c>
 8006fc8:	68e0      	ldr	r0, [r4, #12]
 8006fca:	9b03      	ldr	r3, [sp, #12]
 8006fcc:	4298      	cmp	r0, r3
 8006fce:	bfb8      	it	lt
 8006fd0:	4618      	movlt	r0, r3
 8006fd2:	e7a4      	b.n	8006f1e <_printf_i+0x16a>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4632      	mov	r2, r6
 8006fd8:	4649      	mov	r1, r9
 8006fda:	4640      	mov	r0, r8
 8006fdc:	47d0      	blx	sl
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d09b      	beq.n	8006f1a <_printf_i+0x166>
 8006fe2:	3501      	adds	r5, #1
 8006fe4:	68e3      	ldr	r3, [r4, #12]
 8006fe6:	9903      	ldr	r1, [sp, #12]
 8006fe8:	1a5b      	subs	r3, r3, r1
 8006fea:	42ab      	cmp	r3, r5
 8006fec:	dcf2      	bgt.n	8006fd4 <_printf_i+0x220>
 8006fee:	e7eb      	b.n	8006fc8 <_printf_i+0x214>
 8006ff0:	2500      	movs	r5, #0
 8006ff2:	f104 0619 	add.w	r6, r4, #25
 8006ff6:	e7f5      	b.n	8006fe4 <_printf_i+0x230>
 8006ff8:	080079be 	.word	0x080079be
 8006ffc:	080079cf 	.word	0x080079cf

08007000 <__retarget_lock_acquire_recursive>:
 8007000:	4770      	bx	lr

08007002 <__retarget_lock_release_recursive>:
 8007002:	4770      	bx	lr

08007004 <memchr>:
 8007004:	4603      	mov	r3, r0
 8007006:	b510      	push	{r4, lr}
 8007008:	b2c9      	uxtb	r1, r1
 800700a:	4402      	add	r2, r0
 800700c:	4293      	cmp	r3, r2
 800700e:	4618      	mov	r0, r3
 8007010:	d101      	bne.n	8007016 <memchr+0x12>
 8007012:	2000      	movs	r0, #0
 8007014:	e003      	b.n	800701e <memchr+0x1a>
 8007016:	7804      	ldrb	r4, [r0, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	428c      	cmp	r4, r1
 800701c:	d1f6      	bne.n	800700c <memchr+0x8>
 800701e:	bd10      	pop	{r4, pc}

08007020 <memmove>:
 8007020:	4288      	cmp	r0, r1
 8007022:	b510      	push	{r4, lr}
 8007024:	eb01 0402 	add.w	r4, r1, r2
 8007028:	d902      	bls.n	8007030 <memmove+0x10>
 800702a:	4284      	cmp	r4, r0
 800702c:	4623      	mov	r3, r4
 800702e:	d807      	bhi.n	8007040 <memmove+0x20>
 8007030:	1e43      	subs	r3, r0, #1
 8007032:	42a1      	cmp	r1, r4
 8007034:	d008      	beq.n	8007048 <memmove+0x28>
 8007036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800703a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800703e:	e7f8      	b.n	8007032 <memmove+0x12>
 8007040:	4601      	mov	r1, r0
 8007042:	4402      	add	r2, r0
 8007044:	428a      	cmp	r2, r1
 8007046:	d100      	bne.n	800704a <memmove+0x2a>
 8007048:	bd10      	pop	{r4, pc}
 800704a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800704e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007052:	e7f7      	b.n	8007044 <memmove+0x24>

08007054 <_realloc_r>:
 8007054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007056:	4607      	mov	r7, r0
 8007058:	4614      	mov	r4, r2
 800705a:	460e      	mov	r6, r1
 800705c:	b921      	cbnz	r1, 8007068 <_realloc_r+0x14>
 800705e:	4611      	mov	r1, r2
 8007060:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007064:	f7ff bbd8 	b.w	8006818 <_malloc_r>
 8007068:	b922      	cbnz	r2, 8007074 <_realloc_r+0x20>
 800706a:	f7ff fb89 	bl	8006780 <_free_r>
 800706e:	4625      	mov	r5, r4
 8007070:	4628      	mov	r0, r5
 8007072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007074:	f000 f814 	bl	80070a0 <_malloc_usable_size_r>
 8007078:	42a0      	cmp	r0, r4
 800707a:	d20f      	bcs.n	800709c <_realloc_r+0x48>
 800707c:	4621      	mov	r1, r4
 800707e:	4638      	mov	r0, r7
 8007080:	f7ff fbca 	bl	8006818 <_malloc_r>
 8007084:	4605      	mov	r5, r0
 8007086:	2800      	cmp	r0, #0
 8007088:	d0f2      	beq.n	8007070 <_realloc_r+0x1c>
 800708a:	4631      	mov	r1, r6
 800708c:	4622      	mov	r2, r4
 800708e:	f7ff fb61 	bl	8006754 <memcpy>
 8007092:	4631      	mov	r1, r6
 8007094:	4638      	mov	r0, r7
 8007096:	f7ff fb73 	bl	8006780 <_free_r>
 800709a:	e7e9      	b.n	8007070 <_realloc_r+0x1c>
 800709c:	4635      	mov	r5, r6
 800709e:	e7e7      	b.n	8007070 <_realloc_r+0x1c>

080070a0 <_malloc_usable_size_r>:
 80070a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070a4:	1f18      	subs	r0, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	bfbc      	itt	lt
 80070aa:	580b      	ldrlt	r3, [r1, r0]
 80070ac:	18c0      	addlt	r0, r0, r3
 80070ae:	4770      	bx	lr

080070b0 <_init>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr

080070bc <_fini>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	bf00      	nop
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr
