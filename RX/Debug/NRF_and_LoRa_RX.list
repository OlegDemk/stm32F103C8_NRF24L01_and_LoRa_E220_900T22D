
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005348  08005348  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08005348  08005348  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005348  08005348  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  20000020  08005370  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  08005370  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f60  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a01  00000000  00000000  00033fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  000369b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00037ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b26  00000000  00000000  00038cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f61  00000000  00000000  0003b7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f0be  00000000  00000000  00051757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0815  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bcc  00000000  00000000  000e0868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b1c 	.word	0x08004b1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08004b1c 	.word	0x08004b1c

0800014c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000010 	.word	0x20000010
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001a4:	f001 fdc1 	bl	8001d2a <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001b8:	f003 f945 	bl	8003446 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001d8:	f003 f935 	bl	8003446 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001e2:	f001 fda2 	bl	8001d2a <HAL_GPIO_WritePin>
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	20000570 	.word	0x20000570

080001f8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
 8000218:	f001 fd87 	bl	8001d2a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
 8000226:	f002 fec1 	bl	8002fac <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
 8000234:	f002 feba 	bl	8002fac <HAL_SPI_Transmit>
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
 800023e:	f001 fd74 	bl	8001d2a <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	20000570 	.word	0x20000570

08000254 <NRF24_Read_Buf>:
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
  CS_OFF;
}
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	4613      	mov	r3, r2
 8000262:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000264:	2200      	movs	r2, #0
 8000266:	2110      	movs	r1, #16
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <NRF24_Read_Buf+0x4c>)
 800026a:	f001 fd5e 	bl	8001d2a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800026e:	1df9      	adds	r1, r7, #7
 8000270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000274:	2201      	movs	r2, #1
 8000276:	480b      	ldr	r0, [pc, #44]	; (80002a4 <NRF24_Read_Buf+0x50>)
 8000278:	f002 fe98 	bl	8002fac <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 800027c:	79bb      	ldrb	r3, [r7, #6]
 800027e:	b29a      	uxth	r2, r3
 8000280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000284:	6839      	ldr	r1, [r7, #0]
 8000286:	4807      	ldr	r0, [pc, #28]	; (80002a4 <NRF24_Read_Buf+0x50>)
 8000288:	f002 ffcc 	bl	8003224 <HAL_SPI_Receive>
  CS_OFF;
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_Read_Buf+0x4c>)
 8000292:	f001 fd4a 	bl	8001d2a <HAL_GPIO_WritePin>
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000570 	.word	0x20000570

080002a8 <IRQ_Callback>:
	status = read_config_registers();
	return status;
}
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 80002ae:	2301      	movs	r3, #1
 80002b0:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ba:	4814      	ldr	r0, [pc, #80]	; (800030c <IRQ_Callback+0x64>)
 80002bc:	f001 fd4d 	bl	8001d5a <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80002c0:	200a      	movs	r0, #10
 80002c2:	f7ff ff43 	bl	800014c <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 80002c6:	2007      	movs	r0, #7
 80002c8:	f7ff ff62 	bl	8000190 <NRF24_ReadReg>
 80002cc:	4603      	mov	r3, r0
 80002ce:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d013      	beq.n	8000302 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	085b      	lsrs	r3, r3, #1
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	f003 0307 	and.w	r3, r3, #7
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <IRQ_Callback+0x68>)
 80002e8:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80002ea:	220a      	movs	r2, #10
 80002ec:	4909      	ldr	r1, [pc, #36]	; (8000314 <IRQ_Callback+0x6c>)
 80002ee:	2061      	movs	r0, #97	; 0x61
 80002f0:	f7ff ffb0 	bl	8000254 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 80002f4:	2140      	movs	r1, #64	; 0x40
 80002f6:	2007      	movs	r0, #7
 80002f8:	f7ff ff7e 	bl	80001f8 <NRF24_WriteReg>
		rx_flag = 1;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <IRQ_Callback+0x70>)
 80002fe:	2201      	movs	r2, #1
 8000300:	701a      	strb	r2, [r3, #0]
	}
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40011000 	.word	0x40011000
 8000310:	20000047 	.word	0x20000047
 8000314:	2000003c 	.word	0x2000003c
 8000318:	20000046 	.word	0x20000046

0800031c <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8000320:	2000      	movs	r0, #0
 8000322:	f000 f889 	bl	8000438 <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 8000326:	f000 f8a9 	bl	800047c <ssd1306_UpdateScreen>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af04      	add	r7, sp, #16
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800033a:	230a      	movs	r3, #10
 800033c:	9302      	str	r3, [sp, #8]
 800033e:	2301      	movs	r3, #1
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2301      	movs	r3, #1
 8000348:	2200      	movs	r2, #0
 800034a:	2178      	movs	r1, #120	; 0x78
 800034c:	4803      	ldr	r0, [pc, #12]	; (800035c <ssd1306_WriteCommand+0x2c>)
 800034e:	f001 fe79 	bl	8002044 <HAL_I2C_Mem_Write>
}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000490 	.word	0x20000490

08000360 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000364:	2064      	movs	r0, #100	; 0x64
 8000366:	f001 f963 	bl	8001630 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800036a:	20ae      	movs	r0, #174	; 0xae
 800036c:	f7ff ffe0 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000370:	2020      	movs	r0, #32
 8000372:	f7ff ffdd 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000376:	2010      	movs	r0, #16
 8000378:	f7ff ffda 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800037c:	20b0      	movs	r0, #176	; 0xb0
 800037e:	f7ff ffd7 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000382:	20c8      	movs	r0, #200	; 0xc8
 8000384:	f7ff ffd4 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000388:	2000      	movs	r0, #0
 800038a:	f7ff ffd1 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800038e:	2010      	movs	r0, #16
 8000390:	f7ff ffce 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000394:	2040      	movs	r0, #64	; 0x40
 8000396:	f7ff ffcb 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800039a:	2081      	movs	r0, #129	; 0x81
 800039c:	f7ff ffc8 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80003a0:	20ff      	movs	r0, #255	; 0xff
 80003a2:	f7ff ffc5 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80003a6:	20a1      	movs	r0, #161	; 0xa1
 80003a8:	f7ff ffc2 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80003ac:	20a6      	movs	r0, #166	; 0xa6
 80003ae:	f7ff ffbf 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80003b2:	20a8      	movs	r0, #168	; 0xa8
 80003b4:	f7ff ffbc 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80003b8:	203f      	movs	r0, #63	; 0x3f
 80003ba:	f7ff ffb9 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80003be:	20a4      	movs	r0, #164	; 0xa4
 80003c0:	f7ff ffb6 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80003c4:	20d3      	movs	r0, #211	; 0xd3
 80003c6:	f7ff ffb3 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff ffb0 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80003d0:	20d5      	movs	r0, #213	; 0xd5
 80003d2:	f7ff ffad 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80003d6:	20f0      	movs	r0, #240	; 0xf0
 80003d8:	f7ff ffaa 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80003dc:	20d9      	movs	r0, #217	; 0xd9
 80003de:	f7ff ffa7 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80003e2:	2022      	movs	r0, #34	; 0x22
 80003e4:	f7ff ffa4 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80003e8:	20da      	movs	r0, #218	; 0xda
 80003ea:	f7ff ffa1 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80003ee:	2012      	movs	r0, #18
 80003f0:	f7ff ff9e 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80003f4:	20db      	movs	r0, #219	; 0xdb
 80003f6:	f7ff ff9b 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80003fa:	2020      	movs	r0, #32
 80003fc:	f7ff ff98 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000400:	208d      	movs	r0, #141	; 0x8d
 8000402:	f7ff ff95 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000406:	2014      	movs	r0, #20
 8000408:	f7ff ff92 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800040c:	20af      	movs	r0, #175	; 0xaf
 800040e:	f7ff ff8f 	bl	8000330 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000412:	2000      	movs	r0, #0
 8000414:	f000 f810 	bl	8000438 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000418:	f000 f830 	bl	800047c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <ssd1306_Init+0xd4>)
 800041e:	2200      	movs	r2, #0
 8000420:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <ssd1306_Init+0xd4>)
 8000424:	2200      	movs	r2, #0
 8000426:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000428:	4b02      	ldr	r3, [pc, #8]	; (8000434 <ssd1306_Init+0xd4>)
 800042a:	2201      	movs	r2, #1
 800042c:	715a      	strb	r2, [r3, #5]

	return 1;
 800042e:	2301      	movs	r3, #1
}
 8000430:	4618      	mov	r0, r3
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000448 	.word	0x20000448

08000438 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	e00d      	b.n	8000464 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d101      	bne.n	8000452 <ssd1306_Fill+0x1a>
 800044e:	2100      	movs	r1, #0
 8000450:	e000      	b.n	8000454 <ssd1306_Fill+0x1c>
 8000452:	21ff      	movs	r1, #255	; 0xff
 8000454:	4a08      	ldr	r2, [pc, #32]	; (8000478 <ssd1306_Fill+0x40>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	4413      	add	r3, r2
 800045a:	460a      	mov	r2, r1
 800045c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	3301      	adds	r3, #1
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800046a:	d3ed      	bcc.n	8000448 <ssd1306_Fill+0x10>
	}
}
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	20000048 	.word	0x20000048

0800047c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000482:	2300      	movs	r3, #0
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	e01d      	b.n	80004c4 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	3b50      	subs	r3, #80	; 0x50
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff4e 	bl	8000330 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000494:	2000      	movs	r0, #0
 8000496:	f7ff ff4b 	bl	8000330 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800049a:	2010      	movs	r0, #16
 800049c:	f7ff ff48 	bl	8000330 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	01db      	lsls	r3, r3, #7
 80004a4:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <ssd1306_UpdateScreen+0x58>)
 80004a6:	4413      	add	r3, r2
 80004a8:	2264      	movs	r2, #100	; 0x64
 80004aa:	9202      	str	r2, [sp, #8]
 80004ac:	2280      	movs	r2, #128	; 0x80
 80004ae:	9201      	str	r2, [sp, #4]
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	2301      	movs	r3, #1
 80004b4:	2240      	movs	r2, #64	; 0x40
 80004b6:	2178      	movs	r1, #120	; 0x78
 80004b8:	4807      	ldr	r0, [pc, #28]	; (80004d8 <ssd1306_UpdateScreen+0x5c>)
 80004ba:	f001 fdc3 	bl	8002044 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	3301      	adds	r3, #1
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	2b07      	cmp	r3, #7
 80004c8:	d9de      	bls.n	8000488 <ssd1306_UpdateScreen+0xc>
	}
}
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000048 	.word	0x20000048
 80004d8:	20000490 	.word	0x20000490

080004dc <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	460b      	mov	r3, r1
 80004e8:	71bb      	strb	r3, [r7, #6]
 80004ea:	4613      	mov	r3, r2
 80004ec:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80004ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	db48      	blt.n	8000588 <ssd1306_DrawPixel+0xac>
 80004f6:	79bb      	ldrb	r3, [r7, #6]
 80004f8:	2b3f      	cmp	r3, #63	; 0x3f
 80004fa:	d845      	bhi.n	8000588 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80004fc:	4b25      	ldr	r3, [pc, #148]	; (8000594 <ssd1306_DrawPixel+0xb8>)
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d006      	beq.n	8000512 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000504:	797b      	ldrb	r3, [r7, #5]
 8000506:	2b00      	cmp	r3, #0
 8000508:	bf0c      	ite	eq
 800050a:	2301      	moveq	r3, #1
 800050c:	2300      	movne	r3, #0
 800050e:	b2db      	uxtb	r3, r3
 8000510:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000512:	797b      	ldrb	r3, [r7, #5]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d11a      	bne.n	800054e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000518:	79fa      	ldrb	r2, [r7, #7]
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	08db      	lsrs	r3, r3, #3
 800051e:	b2d8      	uxtb	r0, r3
 8000520:	4603      	mov	r3, r0
 8000522:	01db      	lsls	r3, r3, #7
 8000524:	4413      	add	r3, r2
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 8000528:	5cd3      	ldrb	r3, [r2, r3]
 800052a:	b25a      	sxtb	r2, r3
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	f003 0307 	and.w	r3, r3, #7
 8000532:	2101      	movs	r1, #1
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	b25b      	sxtb	r3, r3
 800053a:	4313      	orrs	r3, r2
 800053c:	b259      	sxtb	r1, r3
 800053e:	79fa      	ldrb	r2, [r7, #7]
 8000540:	4603      	mov	r3, r0
 8000542:	01db      	lsls	r3, r3, #7
 8000544:	4413      	add	r3, r2
 8000546:	b2c9      	uxtb	r1, r1
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 800054a:	54d1      	strb	r1, [r2, r3]
 800054c:	e01d      	b.n	800058a <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	08db      	lsrs	r3, r3, #3
 8000554:	b2d8      	uxtb	r0, r3
 8000556:	4603      	mov	r3, r0
 8000558:	01db      	lsls	r3, r3, #7
 800055a:	4413      	add	r3, r2
 800055c:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 800055e:	5cd3      	ldrb	r3, [r2, r3]
 8000560:	b25a      	sxtb	r2, r3
 8000562:	79bb      	ldrb	r3, [r7, #6]
 8000564:	f003 0307 	and.w	r3, r3, #7
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	b25b      	sxtb	r3, r3
 8000570:	43db      	mvns	r3, r3
 8000572:	b25b      	sxtb	r3, r3
 8000574:	4013      	ands	r3, r2
 8000576:	b259      	sxtb	r1, r3
 8000578:	79fa      	ldrb	r2, [r7, #7]
 800057a:	4603      	mov	r3, r0
 800057c:	01db      	lsls	r3, r3, #7
 800057e:	4413      	add	r3, r2
 8000580:	b2c9      	uxtb	r1, r1
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 8000584:	54d1      	strb	r1, [r2, r3]
 8000586:	e000      	b.n	800058a <ssd1306_DrawPixel+0xae>
		return;
 8000588:	bf00      	nop
	}
}
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000448 	.word	0x20000448
 8000598:	20000048 	.word	0x20000048

0800059c <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b089      	sub	sp, #36	; 0x24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4604      	mov	r4, r0
 80005a4:	1d38      	adds	r0, r7, #4
 80005a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80005aa:	461a      	mov	r2, r3
 80005ac:	4623      	mov	r3, r4
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	4613      	mov	r3, r2
 80005b2:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80005b4:	4b38      	ldr	r3, [pc, #224]	; (8000698 <ssd1306_WriteChar+0xfc>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	793b      	ldrb	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	2b7f      	cmp	r3, #127	; 0x7f
 80005c0:	dc06      	bgt.n	80005d0 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80005c2:	4b35      	ldr	r3, [pc, #212]	; (8000698 <ssd1306_WriteChar+0xfc>)
 80005c4:	885b      	ldrh	r3, [r3, #2]
 80005c6:	461a      	mov	r2, r3
 80005c8:	797b      	ldrb	r3, [r7, #5]
 80005ca:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80005cc:	2b3f      	cmp	r3, #63	; 0x3f
 80005ce:	dd01      	ble.n	80005d4 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	e05d      	b.n	8000690 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
 80005d8:	e04c      	b.n	8000674 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	3b20      	subs	r3, #32
 80005e0:	7979      	ldrb	r1, [r7, #5]
 80005e2:	fb01 f303 	mul.w	r3, r1, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	440b      	add	r3, r1
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
 80005f8:	e034      	b.n	8000664 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000606:	2b00      	cmp	r3, #0
 8000608:	d012      	beq.n	8000630 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <ssd1306_WriteChar+0xfc>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4413      	add	r3, r2
 8000616:	b2d8      	uxtb	r0, r3
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <ssd1306_WriteChar+0xfc>)
 800061a:	885b      	ldrh	r3, [r3, #2]
 800061c:	b2da      	uxtb	r2, r3
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4413      	add	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	7bba      	ldrb	r2, [r7, #14]
 8000628:	4619      	mov	r1, r3
 800062a:	f7ff ff57 	bl	80004dc <ssd1306_DrawPixel>
 800062e:	e016      	b.n	800065e <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <ssd1306_WriteChar+0xfc>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4413      	add	r3, r2
 800063c:	b2d8      	uxtb	r0, r3
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <ssd1306_WriteChar+0xfc>)
 8000640:	885b      	ldrh	r3, [r3, #2]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4413      	add	r3, r2
 800064a:	b2d9      	uxtb	r1, r3
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	2b00      	cmp	r3, #0
 8000650:	bf0c      	ite	eq
 8000652:	2301      	moveq	r3, #1
 8000654:	2300      	movne	r3, #0
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	f7ff ff3f 	bl	80004dc <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	3301      	adds	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	793b      	ldrb	r3, [r7, #4]
 8000666:	461a      	mov	r2, r3
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4293      	cmp	r3, r2
 800066c:	d3c5      	bcc.n	80005fa <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	3301      	adds	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	797b      	ldrb	r3, [r7, #5]
 8000676:	461a      	mov	r2, r3
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	4293      	cmp	r3, r2
 800067c:	d3ad      	bcc.n	80005da <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <ssd1306_WriteChar+0xfc>)
 8000680:	881a      	ldrh	r2, [r3, #0]
 8000682:	793b      	ldrb	r3, [r7, #4]
 8000684:	b29b      	uxth	r3, r3
 8000686:	4413      	add	r3, r2
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b03      	ldr	r3, [pc, #12]	; (8000698 <ssd1306_WriteChar+0xfc>)
 800068c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3724      	adds	r7, #36	; 0x24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd90      	pop	{r4, r7, pc}
 8000698:	20000448 	.word	0x20000448

0800069c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	1d38      	adds	r0, r7, #4
 80006a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80006aa:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80006ac:	e012      	b.n	80006d4 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	7818      	ldrb	r0, [r3, #0]
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	1d3a      	adds	r2, r7, #4
 80006b6:	ca06      	ldmia	r2, {r1, r2}
 80006b8:	f7ff ff70 	bl	800059c <ssd1306_WriteChar>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d002      	beq.n	80006ce <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	e008      	b.n	80006e0 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
	while (*str)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1e8      	bne.n	80006ae <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	781b      	ldrb	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <ssd1306_SetCursor+0x2c>)
 80006fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <ssd1306_SetCursor+0x2c>)
 8000706:	805a      	strh	r2, [r3, #2]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000448 	.word	0x20000448

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071e:	f000 ff25 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000722:	f000 f829 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f000 f94b 	bl	80009c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800072a:	f000 f86b 	bl	8000804 <MX_I2C1_Init>
  MX_SPI1_Init();
 800072e:	f000 f897 	bl	8000860 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000732:	f000 f91b 	bl	800096c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000736:	f000 f8c9 	bl	80008cc <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <main+0x5c>)
 8000742:	f001 faf2 	bl	8001d2a <HAL_GPIO_WritePin>

  // Init interrupp
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2025      	movs	r0, #37	; 0x25
 800074c:	f001 f86b 	bl	8001826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000750:	2025      	movs	r0, #37	; 0x25
 8000752:	f001 f884 	bl	800185e <HAL_NVIC_EnableIRQ>


  // OLED init
  ssd1306_Init();
 8000756:	f7ff fe03 	bl	8000360 <ssd1306_Init>
  ssd1306_Fill(Black);
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff fe6c 	bl	8000438 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000760:	f7ff fe8c 	bl	800047c <ssd1306_UpdateScreen>
	  }
	#endif

     ///////////////////////////////////////////////////
	 // Test phase state mashine
	bool  state_machine_status = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	71fb      	strb	r3, [r7, #7]
    if (state_machine_status == 1)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0fa      	beq.n	8000764 <main+0x4c>
	{
		state_machine();
 800076e:	f000 fcf9 	bl	8001164 <state_machine>
  {
 8000772:	e7f7      	b.n	8000764 <main+0x4c>
 8000774:	40011000 	.word	0x40011000

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b090      	sub	sp, #64	; 0x40
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	2228      	movs	r2, #40	; 0x28
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f004 f9b8 	bl	8004afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80007b6:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 ff55 	bl	8002670 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007cc:	f000 fa0a 	bl	8000be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2102      	movs	r1, #2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 f9c0 	bl	8002b70 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007f6:	f000 f9f5 	bl	8000be4 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3740      	adds	r7, #64	; 0x40
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_I2C1_Init+0x50>)
 800080a:	4a13      	ldr	r2, [pc, #76]	; (8000858 <MX_I2C1_Init+0x54>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_I2C1_Init+0x50>)
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_I2C1_Init+0x58>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_I2C1_Init+0x50>)
 8000822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_I2C1_Init+0x50>)
 8000842:	f001 fabb 	bl	8001dbc <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800084c:	f000 f9ca 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000490 	.word	0x20000490
 8000858:	40005400 	.word	0x40005400
 800085c:	00061a80 	.word	0x00061a80

08000860 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_SPI1_Init+0x64>)
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <MX_SPI1_Init+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_SPI1_Init+0x64>)
 800086c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_SPI1_Init+0x64>)
 800088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000890:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_SPI1_Init+0x64>)
 8000894:	2220      	movs	r2, #32
 8000896:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_SPI1_Init+0x64>)
 80008ac:	220a      	movs	r2, #10
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_SPI1_Init+0x64>)
 80008b2:	f002 faf7 	bl	8002ea4 <HAL_SPI_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008bc:	f000 f992 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000570 	.word	0x20000570
 80008c8:	40013000 	.word	0x40013000

080008cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	463b      	mov	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008e8:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <MX_TIM1_Init+0x98>)
 80008ea:	4a1f      	ldr	r2, [pc, #124]	; (8000968 <MX_TIM1_Init+0x9c>)
 80008ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_TIM1_Init+0x98>)
 80008f0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80008f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_TIM1_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_TIM1_Init+0x98>)
 80008fe:	2264      	movs	r2, #100	; 0x64
 8000900:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_TIM1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_TIM1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_TIM1_Init+0x98>)
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000914:	4813      	ldr	r0, [pc, #76]	; (8000964 <MX_TIM1_Init+0x98>)
 8000916:	f003 f831 	bl	800397c <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000920:	f000 f960 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4619      	mov	r1, r3
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <MX_TIM1_Init+0x98>)
 8000932:	f003 f9fb 	bl	8003d2c <HAL_TIM_ConfigClockSource>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800093c:	f000 f952 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000940:	2310      	movs	r3, #16
 8000942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_TIM1_Init+0x98>)
 800094e:	f003 fbd7 	bl	8004100 <HAL_TIMEx_MasterConfigSynchronization>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000958:	f000 f944 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000528 	.word	0x20000528
 8000968:	40012c00 	.word	0x40012c00

0800096c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART1_UART_Init+0x4c>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <MX_USART1_UART_Init+0x50>)
 8000974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_USART1_UART_Init+0x4c>)
 8000978:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800097c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART1_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART1_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART1_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART1_UART_Init+0x4c>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART1_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART1_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART1_UART_Init+0x4c>)
 80009a4:	f003 fc1c 	bl	80041e0 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ae:	f000 f919 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200004e4 	.word	0x200004e4
 80009bc:	40013800 	.word	0x40013800

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d4:	4b59      	ldr	r3, [pc, #356]	; (8000b3c <MX_GPIO_Init+0x17c>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a58      	ldr	r2, [pc, #352]	; (8000b3c <MX_GPIO_Init+0x17c>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b56      	ldr	r3, [pc, #344]	; (8000b3c <MX_GPIO_Init+0x17c>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0310 	and.w	r3, r3, #16
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ec:	4b53      	ldr	r3, [pc, #332]	; (8000b3c <MX_GPIO_Init+0x17c>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a52      	ldr	r2, [pc, #328]	; (8000b3c <MX_GPIO_Init+0x17c>)
 80009f2:	f043 0320 	orr.w	r3, r3, #32
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b50      	ldr	r3, [pc, #320]	; (8000b3c <MX_GPIO_Init+0x17c>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0320 	and.w	r3, r3, #32
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <MX_GPIO_Init+0x17c>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a4c      	ldr	r2, [pc, #304]	; (8000b3c <MX_GPIO_Init+0x17c>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b4a      	ldr	r3, [pc, #296]	; (8000b3c <MX_GPIO_Init+0x17c>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <MX_GPIO_Init+0x17c>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a46      	ldr	r2, [pc, #280]	; (8000b3c <MX_GPIO_Init+0x17c>)
 8000a22:	f043 0308 	orr.w	r3, r3, #8
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b44      	ldr	r3, [pc, #272]	; (8000b3c <MX_GPIO_Init+0x17c>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0308 	and.w	r3, r3, #8
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3a:	4841      	ldr	r0, [pc, #260]	; (8000b40 <MX_GPIO_Init+0x180>)
 8000a3c:	f001 f975 	bl	8001d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2108      	movs	r1, #8
 8000a44:	483f      	ldr	r0, [pc, #252]	; (8000b44 <MX_GPIO_Init+0x184>)
 8000a46:	f001 f970 	bl	8001d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2110      	movs	r1, #16
 8000a4e:	483d      	ldr	r0, [pc, #244]	; (8000b44 <MX_GPIO_Init+0x184>)
 8000a50:	f001 f96b 	bl	8001d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f242 0101 	movw	r1, #8193	; 0x2001
 8000a5a:	483b      	ldr	r0, [pc, #236]	; (8000b48 <MX_GPIO_Init+0x188>)
 8000a5c:	f001 f965 	bl	8001d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	4619      	mov	r1, r3
 8000a78:	4831      	ldr	r0, [pc, #196]	; (8000b40 <MX_GPIO_Init+0x180>)
 8000a7a:	f000 ffbb 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8;
 8000a7e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a84:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <MX_GPIO_Init+0x18c>)
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4619      	mov	r1, r3
 8000a92:	482c      	ldr	r0, [pc, #176]	; (8000b44 <MX_GPIO_Init+0x184>)
 8000a94:	f000 ffae 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000a98:	2318      	movs	r3, #24
 8000a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	4825      	ldr	r0, [pc, #148]	; (8000b44 <MX_GPIO_Init+0x184>)
 8000ab0:	f000 ffa0 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8000ab4:	f242 0301 	movw	r3, #8193	; 0x2001
 8000ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4619      	mov	r1, r3
 8000acc:	481e      	ldr	r0, [pc, #120]	; (8000b48 <MX_GPIO_Init+0x188>)
 8000ace:	f000 ff91 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4818      	ldr	r0, [pc, #96]	; (8000b48 <MX_GPIO_Init+0x188>)
 8000ae6:	f000 ff85 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000aea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_GPIO_Init+0x18c>)
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4619      	mov	r1, r3
 8000afe:	4812      	ldr	r0, [pc, #72]	; (8000b48 <MX_GPIO_Init+0x188>)
 8000b00:	f000 ff78 	bl	80019f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	2008      	movs	r0, #8
 8000b0a:	f000 fe8c 	bl	8001826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b0e:	2008      	movs	r0, #8
 8000b10:	f000 fea5 	bl	800185e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2017      	movs	r0, #23
 8000b1a:	f000 fe84 	bl	8001826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b1e:	2017      	movs	r0, #23
 8000b20:	f000 fe9d 	bl	800185e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2028      	movs	r0, #40	; 0x28
 8000b2a:	f000 fe7c 	bl	8001826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b2e:	2028      	movs	r0, #40	; 0x28
 8000b30:	f000 fe95 	bl	800185e <HAL_NVIC_EnableIRQ>

}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40011000 	.word	0x40011000
 8000b44:	40010800 	.word	0x40010800
 8000b48:	40010c00 	.word	0x40010c00
 8000b4c:	10210000 	.word	0x10210000

08000b50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d102      	bne.n	8000b66 <HAL_GPIO_EXTI_Callback+0x16>
  {
    IRQ_Callback();					// Call Callback
 8000b60:	f7ff fba2 	bl	80002a8 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8000b64:	e000      	b.n	8000b68 <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8000b66:	bf00      	nop
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_UART_RxCpltCallback>:

//----------------------------------------------------------------------------------------
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a15      	ldr	r2, [pc, #84]	; (8000bd0 <HAL_UART_RxCpltCallback+0x60>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d123      	bne.n	8000bc8 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_UART_RxCpltCallback+0x64>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_UART_RxCpltCallback+0x20>
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <HAL_UART_RxCpltCallback+0x68>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b31      	cmp	r3, #49	; 0x31
 8000b8e:	d906      	bls.n	8000b9e <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_UART_RxCpltCallback+0x6c>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_UART_RxCpltCallback+0x68>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8000b9c:	e014      	b.n	8000bc8 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_UART_RxCpltCallback+0x6c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_UART_RxCpltCallback+0x68>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_UART_RxCpltCallback+0x64>)
 8000bac:	7819      	ldrb	r1, [r3, #0]
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_UART_RxCpltCallback+0x70>)
 8000bb0:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <HAL_UART_RxCpltCallback+0x64>)
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <HAL_UART_RxCpltCallback+0x60>)
 8000bb8:	f003 fb5f 	bl	800427a <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_UART_RxCpltCallback+0x68>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_UART_RxCpltCallback+0x68>)
 8000bc6:	701a      	strb	r2, [r3, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200004e4 	.word	0x200004e4
 8000bd4:	20000484 	.word	0x20000484
 8000bd8:	20000486 	.word	0x20000486
 8000bdc:	20000485 	.word	0x20000485
 8000be0:	20000450 	.word	0x20000450

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_MspInit+0x5c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <HAL_MspInit+0x5c>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_MspInit+0x60>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_MspInit+0x60>)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000

08000c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <HAL_I2C_MspInit+0x70>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d123      	bne.n	8000cbc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_I2C_MspInit+0x74>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a13      	ldr	r2, [pc, #76]	; (8000cc8 <HAL_I2C_MspInit+0x74>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_I2C_MspInit+0x74>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c8c:	23c0      	movs	r3, #192	; 0xc0
 8000c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c90:	2312      	movs	r3, #18
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <HAL_I2C_MspInit+0x78>)
 8000ca0:	f000 fea8 	bl	80019f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_I2C_MspInit+0x74>)
 8000ca6:	69db      	ldr	r3, [r3, #28]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_I2C_MspInit+0x74>)
 8000caa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cae:	61d3      	str	r3, [r2, #28]
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_I2C_MspInit+0x74>)
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010c00 	.word	0x40010c00

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d12f      	bne.n	8000d50 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000cf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d20:	23a0      	movs	r3, #160	; 0xa0
 8000d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4619      	mov	r1, r3
 8000d32:	480b      	ldr	r0, [pc, #44]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d34:	f000 fe5e 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d38:	2340      	movs	r3, #64	; 0x40
 8000d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d4c:	f000 fe52 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40013000 	.word	0x40013000
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010800 	.word	0x40010800

08000d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <HAL_TIM_Base_MspInit+0x44>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d113      	bne.n	8000d9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_TIM_Base_MspInit+0x48>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <HAL_TIM_Base_MspInit+0x48>)
 8000d7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_TIM_Base_MspInit+0x48>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	2019      	movs	r0, #25
 8000d94:	f000 fd47 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d98:	2019      	movs	r0, #25
 8000d9a:	f000 fd60 	bl	800185e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40012c00 	.word	0x40012c00
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <HAL_UART_MspInit+0x9c>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d139      	bne.n	8000e44 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <HAL_UART_MspInit+0xa0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <HAL_UART_MspInit+0xa0>)
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <HAL_UART_MspInit+0xa0>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_UART_MspInit+0xa0>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <HAL_UART_MspInit+0xa0>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_UART_MspInit+0xa0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	4619      	mov	r1, r3
 8000e14:	480f      	ldr	r0, [pc, #60]	; (8000e54 <HAL_UART_MspInit+0xa4>)
 8000e16:	f000 fded 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4809      	ldr	r0, [pc, #36]	; (8000e54 <HAL_UART_MspInit+0xa4>)
 8000e30:	f000 fde0 	bl	80019f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2101      	movs	r1, #1
 8000e38:	2025      	movs	r0, #37	; 0x25
 8000e3a:	f000 fcf4 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e3e:	2025      	movs	r0, #37	; 0x25
 8000e40:	f000 fd0d 	bl	800185e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40013800 	.word	0x40013800
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010800 	.word	0x40010800

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr

08000e9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9e:	f000 fbab 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000eaa:	2004      	movs	r0, #4
 8000eac:	f000 ff6e 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <EXTI9_5_IRQHandler+0x38>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00c      	beq.n	8000ede <EXTI9_5_IRQHandler+0x2a>
	{
		if(button_processed_status == doesent_detected)
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <EXTI9_5_IRQHandler+0x3c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <EXTI9_5_IRQHandler+0x40>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d105      	bne.n	8000ede <EXTI9_5_IRQHandler+0x2a>
		{
			HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <EXTI9_5_IRQHandler+0x44>)
 8000ed4:	f002 fda2 	bl	8003a1c <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <EXTI9_5_IRQHandler+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ede:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ee2:	f000 ff53 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40010400 	.word	0x40010400
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	2000000c 	.word	0x2000000c
 8000ef8:	20000528 	.word	0x20000528

08000efc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	/* This timmer start by external interrupts from buttons:
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8000f00:	4b5d      	ldr	r3, [pc, #372]	; (8001078 <TIM1_UP_IRQHandler+0x17c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 80b2 	bne.w	800106e <TIM1_UP_IRQHandler+0x172>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 8000f0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0e:	485b      	ldr	r0, [pc, #364]	; (800107c <TIM1_UP_IRQHandler+0x180>)
 8000f10:	f000 fef4 	bl	8001cfc <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d13b      	bne.n	8000f92 <TIM1_UP_IRQHandler+0x96>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 8000f1a:	4b59      	ldr	r3, [pc, #356]	; (8001080 <TIM1_UP_IRQHandler+0x184>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a57      	ldr	r2, [pc, #348]	; (8001080 <TIM1_UP_IRQHandler+0x184>)
 8000f22:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8000f24:	4b57      	ldr	r3, [pc, #348]	; (8001084 <TIM1_UP_IRQHandler+0x188>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b55      	ldr	r3, [pc, #340]	; (8001080 <TIM1_UP_IRQHandler+0x184>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	dc2f      	bgt.n	8000f92 <TIM1_UP_IRQHandler+0x96>
			{
				delay_time = 0;
 8000f32:	4b53      	ldr	r3, [pc, #332]	; (8001080 <TIM1_UP_IRQHandler+0x184>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
				button_processed_status = 1;						// Flag for interrupts
 8000f38:	4b4f      	ldr	r3, [pc, #316]	; (8001078 <TIM1_UP_IRQHandler+0x17c>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8000f3e:	4852      	ldr	r0, [pc, #328]	; (8001088 <TIM1_UP_IRQHandler+0x18c>)
 8000f40:	f002 fdbe 	bl	8003ac0 <HAL_TIM_Base_Stop_IT>

				if(utton_enter_pressed_flag == 0)					// If menu doesen't enter
 8000f44:	4b51      	ldr	r3, [pc, #324]	; (800108c <TIM1_UP_IRQHandler+0x190>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d122      	bne.n	8000f92 <TIM1_UP_IRQHandler+0x96>
				{
					switch(state_get())
 8000f4c:	f000 f8ee 	bl	800112c <state_get>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d81a      	bhi.n	8000f8c <TIM1_UP_IRQHandler+0x90>
 8000f56:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <TIM1_UP_IRQHandler+0x60>)
 8000f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	08000f75 	.word	0x08000f75
 8000f64:	08000f7d 	.word	0x08000f7d
 8000f68:	08000f85 	.word	0x08000f85
					{
						case ST_1:
							state_set(ST_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f8e9 	bl	8001144 <state_set>
							break;
 8000f72:	e00b      	b.n	8000f8c <TIM1_UP_IRQHandler+0x90>
						case ST_2:
							state_set(ST_1);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 f8e5 	bl	8001144 <state_set>
							break;
 8000f7a:	e007      	b.n	8000f8c <TIM1_UP_IRQHandler+0x90>
						case ST_3:
							state_set(ST_2);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f000 f8e1 	bl	8001144 <state_set>
							break;
 8000f82:	e003      	b.n	8000f8c <TIM1_UP_IRQHandler+0x90>
						case ST_4:
							state_set(ST_3);
 8000f84:	2002      	movs	r0, #2
 8000f86:	f000 f8dd 	bl	8001144 <state_set>
						break;
 8000f8a:	bf00      	nop
					}
					button_was_pressed = true;
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <TIM1_UP_IRQHandler+0x194>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 8000f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f96:	483f      	ldr	r0, [pc, #252]	; (8001094 <TIM1_UP_IRQHandler+0x198>)
 8000f98:	f000 feb0 	bl	8001cfc <HAL_GPIO_ReadPin>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d13b      	bne.n	800101a <TIM1_UP_IRQHandler+0x11e>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 8000fa2:	4b37      	ldr	r3, [pc, #220]	; (8001080 <TIM1_UP_IRQHandler+0x184>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a35      	ldr	r2, [pc, #212]	; (8001080 <TIM1_UP_IRQHandler+0x184>)
 8000faa:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <TIM1_UP_IRQHandler+0x188>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b33      	ldr	r3, [pc, #204]	; (8001080 <TIM1_UP_IRQHandler+0x184>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dc2f      	bgt.n	800101a <TIM1_UP_IRQHandler+0x11e>
			{
				delay_time = 0;
 8000fba:	4b31      	ldr	r3, [pc, #196]	; (8001080 <TIM1_UP_IRQHandler+0x184>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
				button_processed_status = 1;						// Flag for interrupts
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <TIM1_UP_IRQHandler+0x17c>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8000fc6:	4830      	ldr	r0, [pc, #192]	; (8001088 <TIM1_UP_IRQHandler+0x18c>)
 8000fc8:	f002 fd7a 	bl	8003ac0 <HAL_TIM_Base_Stop_IT>

				if(utton_enter_pressed_flag == 0)					// If menu doesen't enter
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <TIM1_UP_IRQHandler+0x190>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d122      	bne.n	800101a <TIM1_UP_IRQHandler+0x11e>
				{
					switch(state_get())
 8000fd4:	f000 f8aa 	bl	800112c <state_get>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d81a      	bhi.n	8001014 <TIM1_UP_IRQHandler+0x118>
 8000fde:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <TIM1_UP_IRQHandler+0xe8>)
 8000fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe4:	08000ff5 	.word	0x08000ff5
 8000fe8:	08000ffd 	.word	0x08000ffd
 8000fec:	08001005 	.word	0x08001005
 8000ff0:	0800100d 	.word	0x0800100d
					{
						case ST_1:
							state_set(ST_2);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f000 f8a5 	bl	8001144 <state_set>
							break;
 8000ffa:	e00b      	b.n	8001014 <TIM1_UP_IRQHandler+0x118>
						case ST_2:
							state_set(ST_3);
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f000 f8a1 	bl	8001144 <state_set>
							break;
 8001002:	e007      	b.n	8001014 <TIM1_UP_IRQHandler+0x118>
						case ST_3:
							state_set(ST_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f89d 	bl	8001144 <state_set>
							break;
 800100a:	e003      	b.n	8001014 <TIM1_UP_IRQHandler+0x118>
						case ST_4:
							state_set(ST_1);
 800100c:	2000      	movs	r0, #0
 800100e:	f000 f899 	bl	8001144 <state_set>
							break;
 8001012:	bf00      	nop
					}
					button_was_pressed = true;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <TIM1_UP_IRQHandler+0x194>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 800101a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101e:	4817      	ldr	r0, [pc, #92]	; (800107c <TIM1_UP_IRQHandler+0x180>)
 8001020:	f000 fe6c 	bl	8001cfc <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d121      	bne.n	800106e <TIM1_UP_IRQHandler+0x172>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <TIM1_UP_IRQHandler+0x184>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a13      	ldr	r2, [pc, #76]	; (8001080 <TIM1_UP_IRQHandler+0x184>)
 8001032:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <TIM1_UP_IRQHandler+0x188>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <TIM1_UP_IRQHandler+0x184>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	dc15      	bgt.n	800106e <TIM1_UP_IRQHandler+0x172>
			{
				delay_time = 0;
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <TIM1_UP_IRQHandler+0x184>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
				button_processed_status = 1;
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <TIM1_UP_IRQHandler+0x17c>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]

				button_was_pressed = true;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <TIM1_UP_IRQHandler+0x194>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
				utton_enter_pressed_flag = !utton_enter_pressed_flag;
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <TIM1_UP_IRQHandler+0x190>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf0c      	ite	eq
 800105c:	2301      	moveq	r3, #1
 800105e:	2300      	movne	r3, #0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	461a      	mov	r2, r3
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <TIM1_UP_IRQHandler+0x190>)
 8001066:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8001068:	4807      	ldr	r0, [pc, #28]	; (8001088 <TIM1_UP_IRQHandler+0x18c>)
 800106a:	f002 fd29 	bl	8003ac0 <HAL_TIM_Base_Stop_IT>
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <TIM1_UP_IRQHandler+0x18c>)
 8001070:	f002 fd54 	bl	8003b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000000c 	.word	0x2000000c
 800107c:	40010c00 	.word	0x40010c00
 8001080:	20000488 	.word	0x20000488
 8001084:	20000009 	.word	0x20000009
 8001088:	20000528 	.word	0x20000528
 800108c:	2000048d 	.word	0x2000048d
 8001090:	20000014 	.word	0x20000014
 8001094:	40010800 	.word	0x40010800

08001098 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <USART1_IRQHandler+0x10>)
 800109e:	f003 f91d 	bl	80042dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200004e4 	.word	0x200004e4

080010ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	// Detect "UP" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <EXTI15_10_IRQHandler+0x64>)
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00c      	beq.n	80010d6 <EXTI15_10_IRQHandler+0x2a>
	{
		if(button_processed_status == doesent_detected)
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <EXTI15_10_IRQHandler+0x68>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <EXTI15_10_IRQHandler+0x6c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d105      	bne.n	80010d6 <EXTI15_10_IRQHandler+0x2a>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 80010ca:	4814      	ldr	r0, [pc, #80]	; (800111c <EXTI15_10_IRQHandler+0x70>)
 80010cc:	f002 fca6 	bl	8003a1c <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <EXTI15_10_IRQHandler+0x6c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <EXTI15_10_IRQHandler+0x64>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00c      	beq.n	80010fc <EXTI15_10_IRQHandler+0x50>
	{
		if(button_processed_status == doesent_detected)
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <EXTI15_10_IRQHandler+0x68>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <EXTI15_10_IRQHandler+0x6c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d105      	bne.n	80010fc <EXTI15_10_IRQHandler+0x50>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <EXTI15_10_IRQHandler+0x70>)
 80010f2:	f002 fc93 	bl	8003a1c <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <EXTI15_10_IRQHandler+0x6c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
		}
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80010fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001100:	f000 fe44 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001104:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001108:	f000 fe40 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40010400 	.word	0x40010400
 8001114:	20000008 	.word	0x20000008
 8001118:	2000000c 	.word	0x2000000c
 800111c:	20000528 	.word	0x20000528

08001120 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <state_get>:
int pressed_batton_counter = 0;


// ----------------------------------------------------------------------------------------
STATE_t state_get(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	return state;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <state_get+0x14>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2000048c 	.word	0x2000048c

08001144 <state_set>:

// ----------------------------------------------------------------------------------------
void state_set(STATE_t new_state)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	state = new_state;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <state_set+0x1c>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	7013      	strb	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2000048c 	.word	0x2000048c

08001164 <state_machine>:
// ----------------------------------------------------------------------------------------
void state_machine(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0a4      	sub	sp, #144	; 0x90
 8001168:	af00      	add	r7, sp, #0
	// Init OLED
	// Init nrf module
	// Init LoRa module
	// Print status modules
	char str[20] = {0};
 800116a:	2300      	movs	r3, #0
 800116c:	67bb      	str	r3, [r7, #120]	; 0x78
 800116e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]


	// Only 4
	char menu_items[4][30] = {
 800117c:	4ac8      	ldr	r2, [pc, #800]	; (80014a0 <state_machine+0x33c>)
 800117e:	463b      	mov	r3, r7
 8001180:	4611      	mov	r1, r2
 8001182:	2278      	movs	r2, #120	; 0x78
 8001184:	4618      	mov	r0, r3
 8001186:	f003 fcab 	bl	8004ae0 <memcpy>
		"LoRa E220   TX",
		"NRF 24L01   RX",
		"NRF 24L01   TX"
	};

	clearn_oled();
 800118a:	f7ff f8c7 	bl	800031c <clearn_oled>

	bool print_all_menu = true;
 800118e:	2301      	movs	r3, #1
 8001190:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

	while(1)   // Main loop
	{
		if(print_all_menu == true)
 8001194:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001198:	2b00      	cmp	r3, #0
 800119a:	d038      	beq.n	800120e <state_machine+0xaa>
		{
			// Print all menus on OLED
			uint8_t row = 20;
 800119c:	2314      	movs	r3, #20
 800119e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			for(uint8_t i = 0; i <=4; i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80011a8:	e02d      	b.n	8001206 <state_machine+0xa2>
			{
				ssd1306_SetCursor(20, row);
 80011aa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80011ae:	4619      	mov	r1, r3
 80011b0:	2014      	movs	r0, #20
 80011b2:	f7ff fa99 	bl	80006e8 <ssd1306_SetCursor>
				memset(str, 0, sizeof(str));
 80011b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011ba:	2214      	movs	r2, #20
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 fc9c 	bl	8004afc <memset>
				strcpy(str, menu_items[i]);
 80011c4:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80011c8:	4639      	mov	r1, r7
 80011ca:	4613      	mov	r3, r2
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	1a9b      	subs	r3, r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	18ca      	adds	r2, r1, r3
 80011d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 fc96 	bl	8004b0c <strcpy>
				ssd1306_WriteString(str,  Font_7x10, White);
 80011e0:	4ab0      	ldr	r2, [pc, #704]	; (80014a4 <state_machine+0x340>)
 80011e2:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80011e6:	2301      	movs	r3, #1
 80011e8:	ca06      	ldmia	r2, {r1, r2}
 80011ea:	f7ff fa57 	bl	800069c <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80011ee:	f7ff f945 	bl	800047c <ssd1306_UpdateScreen>
				row = row + 10;
 80011f2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80011f6:	330a      	adds	r3, #10
 80011f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			for(uint8_t i = 0; i <=4; i++)
 80011fc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001200:	3301      	adds	r3, #1
 8001202:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001206:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800120a:	2b04      	cmp	r3, #4
 800120c:	d9cd      	bls.n	80011aa <state_machine+0x46>
			}
		}

		if(button_was_pressed == true)				// From timer_1 interrupt (New button was pressed)
 800120e:	4ba6      	ldr	r3, [pc, #664]	; (80014a8 <state_machine+0x344>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 813a 	beq.w	800148c <state_machine+0x328>
		{

			switch(state_get())
 8001218:	f7ff ff88 	bl	800112c <state_get>
 800121c:	4603      	mov	r3, r0
 800121e:	2b03      	cmp	r3, #3
 8001220:	d8b8      	bhi.n	8001194 <state_machine+0x30>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <state_machine+0xc4>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	08001239 	.word	0x08001239
 800122c:	080012cd 	.word	0x080012cd
 8001230:	08001361 	.word	0x08001361
 8001234:	080013f7 	.word	0x080013f7
			{
				case ST_1:
					// Print data on OLED
					clearn_pointer_on_menu();
 8001238:	f000 f93e 	bl	80014b8 <clearn_pointer_on_menu>

					ssd1306_SetCursor(0, 20);
 800123c:	2114      	movs	r1, #20
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff fa52 	bl	80006e8 <ssd1306_SetCursor>
					memset(str, 0, sizeof(str));
 8001244:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001248:	2214      	movs	r2, #20
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f003 fc55 	bl	8004afc <memset>
					strcpy(str, "->");
 8001252:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001256:	4a95      	ldr	r2, [pc, #596]	; (80014ac <state_machine+0x348>)
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	4611      	mov	r1, r2
 800125c:	8019      	strh	r1, [r3, #0]
 800125e:	3302      	adds	r3, #2
 8001260:	0c12      	lsrs	r2, r2, #16
 8001262:	701a      	strb	r2, [r3, #0]
					ssd1306_WriteString(str,  Font_7x10, White);
 8001264:	4a8f      	ldr	r2, [pc, #572]	; (80014a4 <state_machine+0x340>)
 8001266:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800126a:	2301      	movs	r3, #1
 800126c:	ca06      	ldmia	r2, {r1, r2}
 800126e:	f7ff fa15 	bl	800069c <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8001272:	f7ff f903 	bl	800047c <ssd1306_UpdateScreen>
					button_was_pressed = false;
 8001276:	4b8c      	ldr	r3, [pc, #560]	; (80014a8 <state_machine+0x344>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
					print_all_menu == false;

					if(utton_enter_pressed_flag == 1)	// If "Enter" button was press"
 800127c:	4b8c      	ldr	r3, [pc, #560]	; (80014b0 <state_machine+0x34c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	f040 8105 	bne.w	8001490 <state_machine+0x32c>
					{
						print_all_menu == true;
						clearn_oled();
 8001286:	f7ff f849 	bl	800031c <clearn_oled>
						while (utton_enter_pressed_flag == 1)
 800128a:	e011      	b.n	80012b0 <state_machine+0x14c>
						{
							// LoRa module working where
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001292:	4888      	ldr	r0, [pc, #544]	; (80014b4 <state_machine+0x350>)
 8001294:	f000 fd49 	bl	8001d2a <HAL_GPIO_WritePin>
							HAL_Delay(50);
 8001298:	2032      	movs	r0, #50	; 0x32
 800129a:	f000 f9c9 	bl	8001630 <HAL_Delay>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a4:	4883      	ldr	r0, [pc, #524]	; (80014b4 <state_machine+0x350>)
 80012a6:	f000 fd40 	bl	8001d2a <HAL_GPIO_WritePin>
							HAL_Delay(50);
 80012aa:	2032      	movs	r0, #50	; 0x32
 80012ac:	f000 f9c0 	bl	8001630 <HAL_Delay>
						while (utton_enter_pressed_flag == 1)
 80012b0:	4b7f      	ldr	r3, [pc, #508]	; (80014b0 <state_machine+0x34c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d0e9      	beq.n	800128c <state_machine+0x128>
						}
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012be:	487d      	ldr	r0, [pc, #500]	; (80014b4 <state_machine+0x350>)
 80012c0:	f000 fd33 	bl	8001d2a <HAL_GPIO_WritePin>
						utton_enter_pressed_flag = 0;
 80012c4:	4b7a      	ldr	r3, [pc, #488]	; (80014b0 <state_machine+0x34c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
					}

					break;
 80012ca:	e0e1      	b.n	8001490 <state_machine+0x32c>

				case ST_2:
					// Print data on OLED
					clearn_pointer_on_menu();
 80012cc:	f000 f8f4 	bl	80014b8 <clearn_pointer_on_menu>

					ssd1306_SetCursor(0, 30);
 80012d0:	211e      	movs	r1, #30
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff fa08 	bl	80006e8 <ssd1306_SetCursor>
					memset(str, 0, sizeof(str));
 80012d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012dc:	2214      	movs	r2, #20
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fc0b 	bl	8004afc <memset>
					strcpy(str, "->");
 80012e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012ea:	4a70      	ldr	r2, [pc, #448]	; (80014ac <state_machine+0x348>)
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	4611      	mov	r1, r2
 80012f0:	8019      	strh	r1, [r3, #0]
 80012f2:	3302      	adds	r3, #2
 80012f4:	0c12      	lsrs	r2, r2, #16
 80012f6:	701a      	strb	r2, [r3, #0]
					ssd1306_WriteString(str,  Font_7x10, White);
 80012f8:	4a6a      	ldr	r2, [pc, #424]	; (80014a4 <state_machine+0x340>)
 80012fa:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80012fe:	2301      	movs	r3, #1
 8001300:	ca06      	ldmia	r2, {r1, r2}
 8001302:	f7ff f9cb 	bl	800069c <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8001306:	f7ff f8b9 	bl	800047c <ssd1306_UpdateScreen>
					button_was_pressed = false;
 800130a:	4b67      	ldr	r3, [pc, #412]	; (80014a8 <state_machine+0x344>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
					print_all_menu == false;

					if(utton_enter_pressed_flag == 1)	// If "Enter" button was press"
 8001310:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <state_machine+0x34c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	f040 80bd 	bne.w	8001494 <state_machine+0x330>
					{
						clearn_oled();
 800131a:	f7fe ffff 	bl	800031c <clearn_oled>
						print_all_menu == true;
						while (utton_enter_pressed_flag == 1)
 800131e:	e011      	b.n	8001344 <state_machine+0x1e0>
						{
							// LoRa module working where
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001326:	4863      	ldr	r0, [pc, #396]	; (80014b4 <state_machine+0x350>)
 8001328:	f000 fcff 	bl	8001d2a <HAL_GPIO_WritePin>
							HAL_Delay(100);
 800132c:	2064      	movs	r0, #100	; 0x64
 800132e:	f000 f97f 	bl	8001630 <HAL_Delay>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001338:	485e      	ldr	r0, [pc, #376]	; (80014b4 <state_machine+0x350>)
 800133a:	f000 fcf6 	bl	8001d2a <HAL_GPIO_WritePin>
							HAL_Delay(100);
 800133e:	2064      	movs	r0, #100	; 0x64
 8001340:	f000 f976 	bl	8001630 <HAL_Delay>
						while (utton_enter_pressed_flag == 1)
 8001344:	4b5a      	ldr	r3, [pc, #360]	; (80014b0 <state_machine+0x34c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d0e9      	beq.n	8001320 <state_machine+0x1bc>
						}
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001352:	4858      	ldr	r0, [pc, #352]	; (80014b4 <state_machine+0x350>)
 8001354:	f000 fce9 	bl	8001d2a <HAL_GPIO_WritePin>
						utton_enter_pressed_flag = 0;
 8001358:	4b55      	ldr	r3, [pc, #340]	; (80014b0 <state_machine+0x34c>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
					}

					break;
 800135e:	e099      	b.n	8001494 <state_machine+0x330>

				case ST_3:
					// Print data on OLED
					clearn_pointer_on_menu();
 8001360:	f000 f8aa 	bl	80014b8 <clearn_pointer_on_menu>

					ssd1306_SetCursor(0, 40);
 8001364:	2128      	movs	r1, #40	; 0x28
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff f9be 	bl	80006e8 <ssd1306_SetCursor>
					memset(str, 0, sizeof(str));
 800136c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001370:	2214      	movs	r2, #20
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f003 fbc1 	bl	8004afc <memset>
					strcpy(str, "->");
 800137a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800137e:	4a4b      	ldr	r2, [pc, #300]	; (80014ac <state_machine+0x348>)
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	4611      	mov	r1, r2
 8001384:	8019      	strh	r1, [r3, #0]
 8001386:	3302      	adds	r3, #2
 8001388:	0c12      	lsrs	r2, r2, #16
 800138a:	701a      	strb	r2, [r3, #0]
					ssd1306_WriteString(str,  Font_7x10, White);
 800138c:	4a45      	ldr	r2, [pc, #276]	; (80014a4 <state_machine+0x340>)
 800138e:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001392:	2301      	movs	r3, #1
 8001394:	ca06      	ldmia	r2, {r1, r2}
 8001396:	f7ff f981 	bl	800069c <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 800139a:	f7ff f86f 	bl	800047c <ssd1306_UpdateScreen>
					button_was_pressed = false;
 800139e:	4b42      	ldr	r3, [pc, #264]	; (80014a8 <state_machine+0x344>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
					print_all_menu == false;

					if(utton_enter_pressed_flag == 1)	// If "Enter" button was press"
 80013a4:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <state_machine+0x34c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d175      	bne.n	8001498 <state_machine+0x334>
					{
						clearn_oled();
 80013ac:	f7fe ffb6 	bl	800031c <clearn_oled>
						print_all_menu == true;
						while (utton_enter_pressed_flag == 1)
 80013b0:	e013      	b.n	80013da <state_machine+0x276>
						{
							// LoRa module working where
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b8:	483e      	ldr	r0, [pc, #248]	; (80014b4 <state_machine+0x350>)
 80013ba:	f000 fcb6 	bl	8001d2a <HAL_GPIO_WritePin>
							HAL_Delay(300);
 80013be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013c2:	f000 f935 	bl	8001630 <HAL_Delay>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013cc:	4839      	ldr	r0, [pc, #228]	; (80014b4 <state_machine+0x350>)
 80013ce:	f000 fcac 	bl	8001d2a <HAL_GPIO_WritePin>
							HAL_Delay(300);
 80013d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013d6:	f000 f92b 	bl	8001630 <HAL_Delay>
						while (utton_enter_pressed_flag == 1)
 80013da:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <state_machine+0x34c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d0e7      	beq.n	80013b2 <state_machine+0x24e>
						}
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e8:	4832      	ldr	r0, [pc, #200]	; (80014b4 <state_machine+0x350>)
 80013ea:	f000 fc9e 	bl	8001d2a <HAL_GPIO_WritePin>
						utton_enter_pressed_flag = 0;
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <state_machine+0x34c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
					}

					break;
 80013f4:	e050      	b.n	8001498 <state_machine+0x334>

				case ST_4:
					// Print data on OLED
					clearn_pointer_on_menu();
 80013f6:	f000 f85f 	bl	80014b8 <clearn_pointer_on_menu>

					ssd1306_SetCursor(0, 50);
 80013fa:	2132      	movs	r1, #50	; 0x32
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff f973 	bl	80006e8 <ssd1306_SetCursor>
					memset(str, 0, sizeof(str));
 8001402:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001406:	2214      	movs	r2, #20
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fb76 	bl	8004afc <memset>
					strcpy(str, "->");
 8001410:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001414:	4a25      	ldr	r2, [pc, #148]	; (80014ac <state_machine+0x348>)
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	4611      	mov	r1, r2
 800141a:	8019      	strh	r1, [r3, #0]
 800141c:	3302      	adds	r3, #2
 800141e:	0c12      	lsrs	r2, r2, #16
 8001420:	701a      	strb	r2, [r3, #0]
					ssd1306_WriteString(str,  Font_7x10, White);
 8001422:	4a20      	ldr	r2, [pc, #128]	; (80014a4 <state_machine+0x340>)
 8001424:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001428:	2301      	movs	r3, #1
 800142a:	ca06      	ldmia	r2, {r1, r2}
 800142c:	f7ff f936 	bl	800069c <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8001430:	f7ff f824 	bl	800047c <ssd1306_UpdateScreen>
					button_was_pressed = false;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <state_machine+0x344>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
					print_all_menu == false;

					if(utton_enter_pressed_flag == 1)	// If "Enter" button was press"
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <state_machine+0x34c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d12c      	bne.n	800149c <state_machine+0x338>
					{
						clearn_oled();
 8001442:	f7fe ff6b 	bl	800031c <clearn_oled>
						print_all_menu == true;
						while (utton_enter_pressed_flag == 1)
 8001446:	e013      	b.n	8001470 <state_machine+0x30c>
						{
							// LoRa module working where
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144e:	4819      	ldr	r0, [pc, #100]	; (80014b4 <state_machine+0x350>)
 8001450:	f000 fc6b 	bl	8001d2a <HAL_GPIO_WritePin>
							HAL_Delay(600);
 8001454:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001458:	f000 f8ea 	bl	8001630 <HAL_Delay>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001462:	4814      	ldr	r0, [pc, #80]	; (80014b4 <state_machine+0x350>)
 8001464:	f000 fc61 	bl	8001d2a <HAL_GPIO_WritePin>
							HAL_Delay(600);
 8001468:	f44f 7016 	mov.w	r0, #600	; 0x258
 800146c:	f000 f8e0 	bl	8001630 <HAL_Delay>
						while (utton_enter_pressed_flag == 1)
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <state_machine+0x34c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d0e7      	beq.n	8001448 <state_machine+0x2e4>
						}
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <state_machine+0x350>)
 8001480:	f000 fc53 	bl	8001d2a <HAL_GPIO_WritePin>
						utton_enter_pressed_flag = 0;
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <state_machine+0x34c>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
					}

					break;
 800148a:	e007      	b.n	800149c <state_machine+0x338>

			}
		}
 800148c:	bf00      	nop
 800148e:	e681      	b.n	8001194 <state_machine+0x30>
					break;
 8001490:	bf00      	nop
 8001492:	e67f      	b.n	8001194 <state_machine+0x30>
					break;
 8001494:	bf00      	nop
 8001496:	e67d      	b.n	8001194 <state_machine+0x30>
					break;
 8001498:	bf00      	nop
 800149a:	e67b      	b.n	8001194 <state_machine+0x30>
					break;
 800149c:	bf00      	nop
		if(print_all_menu == true)
 800149e:	e679      	b.n	8001194 <state_machine+0x30>
 80014a0:	08004b38 	.word	0x08004b38
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000014 	.word	0x20000014
 80014ac:	08004b34 	.word	0x08004b34
 80014b0:	2000048d 	.word	0x2000048d
 80014b4:	40011000 	.word	0x40011000

080014b8 <clearn_pointer_on_menu>:
	}
}
// ----------------------------------------------------------------------------------------
void clearn_pointer_on_menu(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
	for(uint8_t i =20; i <= 50; i = i+10)
 80014be:	2314      	movs	r3, #20
 80014c0:	71fb      	strb	r3, [r7, #7]
 80014c2:	e01f      	b.n	8001504 <clearn_pointer_on_menu+0x4c>
	{
		char str[5] = {0};
 80014c4:	2300      	movs	r3, #0
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	2300      	movs	r3, #0
 80014ca:	713b      	strb	r3, [r7, #4]
		ssd1306_SetCursor(0, i);
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4619      	mov	r1, r3
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff f909 	bl	80006e8 <ssd1306_SetCursor>
		memset(str, 0, sizeof(str));
 80014d6:	463b      	mov	r3, r7
 80014d8:	2205      	movs	r2, #5
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fb0d 	bl	8004afc <memset>
		strcpy(str, "  ");
 80014e2:	463b      	mov	r3, r7
 80014e4:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <clearn_pointer_on_menu+0x60>)
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	4611      	mov	r1, r2
 80014ea:	8019      	strh	r1, [r3, #0]
 80014ec:	3302      	adds	r3, #2
 80014ee:	0c12      	lsrs	r2, r2, #16
 80014f0:	701a      	strb	r2, [r3, #0]
		ssd1306_WriteString(str,  Font_7x10, White);
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <clearn_pointer_on_menu+0x64>)
 80014f4:	4638      	mov	r0, r7
 80014f6:	2301      	movs	r3, #1
 80014f8:	ca06      	ldmia	r2, {r1, r2}
 80014fa:	f7ff f8cf 	bl	800069c <ssd1306_WriteString>
	for(uint8_t i =20; i <= 50; i = i+10)
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	330a      	adds	r3, #10
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b32      	cmp	r3, #50	; 0x32
 8001508:	d9dc      	bls.n	80014c4 <clearn_pointer_on_menu+0xc>
	}
	ssd1306_UpdateScreen();
 800150a:	f7fe ffb7 	bl	800047c <ssd1306_UpdateScreen>

}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	08004bb0 	.word	0x08004bb0
 800151c:	20000000 	.word	0x20000000

08001520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	; (8001558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	; (8001564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001546:	f7ff fdeb 	bl	8001120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f003 faa5 	bl	8004a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154e:	f7ff f8e3 	bl	8000718 <main>
  bx lr
 8001552:	4770      	bx	lr
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800155c:	08005350 	.word	0x08005350
  ldr r2, =_sbss
 8001560:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001564:	200005cc 	.word	0x200005cc

08001568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC1_2_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x28>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x28>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f947 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fb32 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40022000 	.word	0x40022000

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f95f 	bl	800187a <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d4:	f000 f927 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000010 	.word	0x20000010
 80015f0:	2000001c 	.word	0x2000001c
 80015f4:	20000018 	.word	0x20000018

080015f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x1c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x20>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a03      	ldr	r2, [pc, #12]	; (8001618 <HAL_IncTick+0x20>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	2000001c 	.word	0x2000001c
 8001618:	200005c8 	.word	0x200005c8

0800161c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_GetTick+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	200005c8 	.word	0x200005c8

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff fff0 	bl	800161c <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_Delay+0x44>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffe0 	bl	800161c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000001c 	.word	0x2000001c

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4906      	ldr	r1, [pc, #24]	; (8001710 <__NVIC_EnableIRQ+0x34>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f0:	f7ff ff90 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff2d 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff42 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff90 	bl	8001768 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5f 	bl	8001714 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff35 	bl	80016dc <__NVIC_EnableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa2 	bl	80017cc <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d008      	beq.n	80018ba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2204      	movs	r2, #4
 80018ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e020      	b.n	80018fc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 020e 	bic.w	r2, r2, #14
 80018c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0201 	bic.w	r2, r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e2:	2101      	movs	r1, #1
 80018e4:	fa01 f202 	lsl.w	r2, r1, r2
 80018e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
	...

08001908 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800191a:	2b02      	cmp	r3, #2
 800191c:	d005      	beq.n	800192a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2204      	movs	r2, #4
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e051      	b.n	80019ce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 020e 	bic.w	r2, r2, #14
 8001938:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0201 	bic.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <HAL_DMA_Abort_IT+0xd0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d029      	beq.n	80019a8 <HAL_DMA_Abort_IT+0xa0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a20      	ldr	r2, [pc, #128]	; (80019dc <HAL_DMA_Abort_IT+0xd4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d022      	beq.n	80019a4 <HAL_DMA_Abort_IT+0x9c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <HAL_DMA_Abort_IT+0xd8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d01a      	beq.n	800199e <HAL_DMA_Abort_IT+0x96>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_DMA_Abort_IT+0xdc>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d012      	beq.n	8001998 <HAL_DMA_Abort_IT+0x90>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <HAL_DMA_Abort_IT+0xe0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d00a      	beq.n	8001992 <HAL_DMA_Abort_IT+0x8a>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <HAL_DMA_Abort_IT+0xe4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d102      	bne.n	800198c <HAL_DMA_Abort_IT+0x84>
 8001986:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800198a:	e00e      	b.n	80019aa <HAL_DMA_Abort_IT+0xa2>
 800198c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001990:	e00b      	b.n	80019aa <HAL_DMA_Abort_IT+0xa2>
 8001992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001996:	e008      	b.n	80019aa <HAL_DMA_Abort_IT+0xa2>
 8001998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199c:	e005      	b.n	80019aa <HAL_DMA_Abort_IT+0xa2>
 800199e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a2:	e002      	b.n	80019aa <HAL_DMA_Abort_IT+0xa2>
 80019a4:	2310      	movs	r3, #16
 80019a6:	e000      	b.n	80019aa <HAL_DMA_Abort_IT+0xa2>
 80019a8:	2301      	movs	r3, #1
 80019aa:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <HAL_DMA_Abort_IT+0xe8>)
 80019ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	4798      	blx	r3
    } 
  }
  return status;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40020008 	.word	0x40020008
 80019dc:	4002001c 	.word	0x4002001c
 80019e0:	40020030 	.word	0x40020030
 80019e4:	40020044 	.word	0x40020044
 80019e8:	40020058 	.word	0x40020058
 80019ec:	4002006c 	.word	0x4002006c
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b08b      	sub	sp, #44	; 0x2c
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a06:	e169      	b.n	8001cdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8158 	bne.w	8001cd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4a9a      	ldr	r2, [pc, #616]	; (8001c94 <HAL_GPIO_Init+0x2a0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d05e      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a30:	4a98      	ldr	r2, [pc, #608]	; (8001c94 <HAL_GPIO_Init+0x2a0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d875      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a36:	4a98      	ldr	r2, [pc, #608]	; (8001c98 <HAL_GPIO_Init+0x2a4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d058      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a3c:	4a96      	ldr	r2, [pc, #600]	; (8001c98 <HAL_GPIO_Init+0x2a4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d86f      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a42:	4a96      	ldr	r2, [pc, #600]	; (8001c9c <HAL_GPIO_Init+0x2a8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d052      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a48:	4a94      	ldr	r2, [pc, #592]	; (8001c9c <HAL_GPIO_Init+0x2a8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d869      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a4e:	4a94      	ldr	r2, [pc, #592]	; (8001ca0 <HAL_GPIO_Init+0x2ac>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d04c      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a54:	4a92      	ldr	r2, [pc, #584]	; (8001ca0 <HAL_GPIO_Init+0x2ac>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d863      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a5a:	4a92      	ldr	r2, [pc, #584]	; (8001ca4 <HAL_GPIO_Init+0x2b0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d046      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a60:	4a90      	ldr	r2, [pc, #576]	; (8001ca4 <HAL_GPIO_Init+0x2b0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d85d      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a66:	2b12      	cmp	r3, #18
 8001a68:	d82a      	bhi.n	8001ac0 <HAL_GPIO_Init+0xcc>
 8001a6a:	2b12      	cmp	r3, #18
 8001a6c:	d859      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <HAL_GPIO_Init+0x80>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001aef 	.word	0x08001aef
 8001a78:	08001ac9 	.word	0x08001ac9
 8001a7c:	08001adb 	.word	0x08001adb
 8001a80:	08001b1d 	.word	0x08001b1d
 8001a84:	08001b23 	.word	0x08001b23
 8001a88:	08001b23 	.word	0x08001b23
 8001a8c:	08001b23 	.word	0x08001b23
 8001a90:	08001b23 	.word	0x08001b23
 8001a94:	08001b23 	.word	0x08001b23
 8001a98:	08001b23 	.word	0x08001b23
 8001a9c:	08001b23 	.word	0x08001b23
 8001aa0:	08001b23 	.word	0x08001b23
 8001aa4:	08001b23 	.word	0x08001b23
 8001aa8:	08001b23 	.word	0x08001b23
 8001aac:	08001b23 	.word	0x08001b23
 8001ab0:	08001b23 	.word	0x08001b23
 8001ab4:	08001b23 	.word	0x08001b23
 8001ab8:	08001ad1 	.word	0x08001ad1
 8001abc:	08001ae5 	.word	0x08001ae5
 8001ac0:	4a79      	ldr	r2, [pc, #484]	; (8001ca8 <HAL_GPIO_Init+0x2b4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ac6:	e02c      	b.n	8001b22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	623b      	str	r3, [r7, #32]
          break;
 8001ace:	e029      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	623b      	str	r3, [r7, #32]
          break;
 8001ad8:	e024      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	3308      	adds	r3, #8
 8001ae0:	623b      	str	r3, [r7, #32]
          break;
 8001ae2:	e01f      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	330c      	adds	r3, #12
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	e01a      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001af6:	2304      	movs	r3, #4
 8001af8:	623b      	str	r3, [r7, #32]
          break;
 8001afa:	e013      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b04:	2308      	movs	r3, #8
 8001b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	611a      	str	r2, [r3, #16]
          break;
 8001b0e:	e009      	b.n	8001b24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b10:	2308      	movs	r3, #8
 8001b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	615a      	str	r2, [r3, #20]
          break;
 8001b1a:	e003      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
          break;
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          break;
 8001b22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2bff      	cmp	r3, #255	; 0xff
 8001b28:	d801      	bhi.n	8001b2e <HAL_GPIO_Init+0x13a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	e001      	b.n	8001b32 <HAL_GPIO_Init+0x13e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3304      	adds	r3, #4
 8001b32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2bff      	cmp	r3, #255	; 0xff
 8001b38:	d802      	bhi.n	8001b40 <HAL_GPIO_Init+0x14c>
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	e002      	b.n	8001b46 <HAL_GPIO_Init+0x152>
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	3b08      	subs	r3, #8
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	210f      	movs	r1, #15
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	6a39      	ldr	r1, [r7, #32]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	431a      	orrs	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80b1 	beq.w	8001cd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b74:	4b4d      	ldr	r3, [pc, #308]	; (8001cac <HAL_GPIO_Init+0x2b8>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a4c      	ldr	r2, [pc, #304]	; (8001cac <HAL_GPIO_Init+0x2b8>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <HAL_GPIO_Init+0x2b8>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b8c:	4a48      	ldr	r2, [pc, #288]	; (8001cb0 <HAL_GPIO_Init+0x2bc>)
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3302      	adds	r3, #2
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a40      	ldr	r2, [pc, #256]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_GPIO_Init+0x1ec>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a3f      	ldr	r2, [pc, #252]	; (8001cb8 <HAL_GPIO_Init+0x2c4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00d      	beq.n	8001bdc <HAL_GPIO_Init+0x1e8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a3e      	ldr	r2, [pc, #248]	; (8001cbc <HAL_GPIO_Init+0x2c8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d007      	beq.n	8001bd8 <HAL_GPIO_Init+0x1e4>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a3d      	ldr	r2, [pc, #244]	; (8001cc0 <HAL_GPIO_Init+0x2cc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d101      	bne.n	8001bd4 <HAL_GPIO_Init+0x1e0>
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e006      	b.n	8001be2 <HAL_GPIO_Init+0x1ee>
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	e004      	b.n	8001be2 <HAL_GPIO_Init+0x1ee>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e002      	b.n	8001be2 <HAL_GPIO_Init+0x1ee>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_GPIO_Init+0x1ee>
 8001be0:	2300      	movs	r3, #0
 8001be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be4:	f002 0203 	and.w	r2, r2, #3
 8001be8:	0092      	lsls	r2, r2, #2
 8001bea:	4093      	lsls	r3, r2
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bf2:	492f      	ldr	r1, [pc, #188]	; (8001cb0 <HAL_GPIO_Init+0x2bc>)
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	492c      	ldr	r1, [pc, #176]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4928      	ldr	r1, [pc, #160]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4922      	ldr	r1, [pc, #136]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	491e      	ldr	r1, [pc, #120]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	4918      	ldr	r1, [pc, #96]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]
 8001c68:	e006      	b.n	8001c78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	4914      	ldr	r1, [pc, #80]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d021      	beq.n	8001cc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	490e      	ldr	r1, [pc, #56]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60cb      	str	r3, [r1, #12]
 8001c90:	e021      	b.n	8001cd6 <HAL_GPIO_Init+0x2e2>
 8001c92:	bf00      	nop
 8001c94:	10320000 	.word	0x10320000
 8001c98:	10310000 	.word	0x10310000
 8001c9c:	10220000 	.word	0x10220000
 8001ca0:	10210000 	.word	0x10210000
 8001ca4:	10120000 	.word	0x10120000
 8001ca8:	10110000 	.word	0x10110000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40010800 	.word	0x40010800
 8001cb8:	40010c00 	.word	0x40010c00
 8001cbc:	40011000 	.word	0x40011000
 8001cc0:	40011400 	.word	0x40011400
 8001cc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	4909      	ldr	r1, [pc, #36]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	3301      	adds	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f47f ae8e 	bne.w	8001a08 <HAL_GPIO_Init+0x14>
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	372c      	adds	r7, #44	; 0x2c
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	887b      	ldrh	r3, [r7, #2]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	e001      	b.n	8001d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	807b      	strh	r3, [r7, #2]
 8001d36:	4613      	mov	r3, r2
 8001d38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d3a:	787b      	ldrb	r3, [r7, #1]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d40:	887a      	ldrh	r2, [r7, #2]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d46:	e003      	b.n	8001d50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	041a      	lsls	r2, r3, #16
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	611a      	str	r2, [r3, #16]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d6c:	887a      	ldrh	r2, [r7, #2]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4013      	ands	r3, r2
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fed0 	bl	8000b50 <HAL_GPIO_EXTI_Callback>
  }
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40010400 	.word	0x40010400

08001dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e12b      	b.n	8002026 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe ff36 	bl	8000c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2224      	movs	r2, #36	; 0x24
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0201 	bic.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e20:	f000 fffa 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8001e24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4a81      	ldr	r2, [pc, #516]	; (8002030 <HAL_I2C_Init+0x274>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d807      	bhi.n	8001e40 <HAL_I2C_Init+0x84>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4a80      	ldr	r2, [pc, #512]	; (8002034 <HAL_I2C_Init+0x278>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	bf94      	ite	ls
 8001e38:	2301      	movls	r3, #1
 8001e3a:	2300      	movhi	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	e006      	b.n	8001e4e <HAL_I2C_Init+0x92>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4a7d      	ldr	r2, [pc, #500]	; (8002038 <HAL_I2C_Init+0x27c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	bf94      	ite	ls
 8001e48:	2301      	movls	r3, #1
 8001e4a:	2300      	movhi	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0e7      	b.n	8002026 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4a78      	ldr	r2, [pc, #480]	; (800203c <HAL_I2C_Init+0x280>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	0c9b      	lsrs	r3, r3, #18
 8001e60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4a6a      	ldr	r2, [pc, #424]	; (8002030 <HAL_I2C_Init+0x274>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d802      	bhi.n	8001e90 <HAL_I2C_Init+0xd4>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	e009      	b.n	8001ea4 <HAL_I2C_Init+0xe8>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	4a69      	ldr	r2, [pc, #420]	; (8002040 <HAL_I2C_Init+0x284>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	099b      	lsrs	r3, r3, #6
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	495c      	ldr	r1, [pc, #368]	; (8002030 <HAL_I2C_Init+0x274>)
 8001ec0:	428b      	cmp	r3, r1
 8001ec2:	d819      	bhi.n	8001ef8 <HAL_I2C_Init+0x13c>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1e59      	subs	r1, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed2:	1c59      	adds	r1, r3, #1
 8001ed4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ed8:	400b      	ands	r3, r1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <HAL_I2C_Init+0x138>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1e59      	subs	r1, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eec:	3301      	adds	r3, #1
 8001eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef2:	e051      	b.n	8001f98 <HAL_I2C_Init+0x1dc>
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	e04f      	b.n	8001f98 <HAL_I2C_Init+0x1dc>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d111      	bne.n	8001f24 <HAL_I2C_Init+0x168>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1e58      	subs	r0, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	440b      	add	r3, r1
 8001f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	e012      	b.n	8001f4a <HAL_I2C_Init+0x18e>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1e58      	subs	r0, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	0099      	lsls	r1, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_I2C_Init+0x196>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e022      	b.n	8001f98 <HAL_I2C_Init+0x1dc>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10e      	bne.n	8001f78 <HAL_I2C_Init+0x1bc>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1e58      	subs	r0, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	440b      	add	r3, r1
 8001f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f76:	e00f      	b.n	8001f98 <HAL_I2C_Init+0x1dc>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1e58      	subs	r0, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	0099      	lsls	r1, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	6809      	ldr	r1, [r1, #0]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69da      	ldr	r2, [r3, #28]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6911      	ldr	r1, [r2, #16]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68d2      	ldr	r2, [r2, #12]
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	000186a0 	.word	0x000186a0
 8002034:	001e847f 	.word	0x001e847f
 8002038:	003d08ff 	.word	0x003d08ff
 800203c:	431bde83 	.word	0x431bde83
 8002040:	10624dd3 	.word	0x10624dd3

08002044 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	4608      	mov	r0, r1
 800204e:	4611      	mov	r1, r2
 8002050:	461a      	mov	r2, r3
 8002052:	4603      	mov	r3, r0
 8002054:	817b      	strh	r3, [r7, #10]
 8002056:	460b      	mov	r3, r1
 8002058:	813b      	strh	r3, [r7, #8]
 800205a:	4613      	mov	r3, r2
 800205c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800205e:	f7ff fadd 	bl	800161c <HAL_GetTick>
 8002062:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b20      	cmp	r3, #32
 800206e:	f040 80d9 	bne.w	8002224 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2319      	movs	r3, #25
 8002078:	2201      	movs	r2, #1
 800207a:	496d      	ldr	r1, [pc, #436]	; (8002230 <HAL_I2C_Mem_Write+0x1ec>)
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f971 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002088:	2302      	movs	r3, #2
 800208a:	e0cc      	b.n	8002226 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_I2C_Mem_Write+0x56>
 8002096:	2302      	movs	r3, #2
 8002098:	e0c5      	b.n	8002226 <HAL_I2C_Mem_Write+0x1e2>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d007      	beq.n	80020c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2221      	movs	r2, #33	; 0x21
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2240      	movs	r2, #64	; 0x40
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a3a      	ldr	r2, [r7, #32]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a4d      	ldr	r2, [pc, #308]	; (8002234 <HAL_I2C_Mem_Write+0x1f0>)
 8002100:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002102:	88f8      	ldrh	r0, [r7, #6]
 8002104:	893a      	ldrh	r2, [r7, #8]
 8002106:	8979      	ldrh	r1, [r7, #10]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	4603      	mov	r3, r0
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f890 	bl	8002238 <I2C_RequestMemoryWrite>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d052      	beq.n	80021c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e081      	b.n	8002226 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f9f2 	bl	8002510 <I2C_WaitOnTXEFlagUntilTimeout>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00d      	beq.n	800214e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	2b04      	cmp	r3, #4
 8002138:	d107      	bne.n	800214a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002148:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e06b      	b.n	8002226 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b04      	cmp	r3, #4
 800218a:	d11b      	bne.n	80021c4 <HAL_I2C_Mem_Write+0x180>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	d017      	beq.n	80021c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	781a      	ldrb	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1aa      	bne.n	8002122 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f9de 	bl	8002592 <I2C_WaitOnBTFFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00d      	beq.n	80021f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d107      	bne.n	80021f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e016      	b.n	8002226 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	e000      	b.n	8002226 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002224:	2302      	movs	r3, #2
  }
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	00100002 	.word	0x00100002
 8002234:	ffff0000 	.word	0xffff0000

08002238 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	4608      	mov	r0, r1
 8002242:	4611      	mov	r1, r2
 8002244:	461a      	mov	r2, r3
 8002246:	4603      	mov	r3, r0
 8002248:	817b      	strh	r3, [r7, #10]
 800224a:	460b      	mov	r3, r1
 800224c:	813b      	strh	r3, [r7, #8]
 800224e:	4613      	mov	r3, r2
 8002250:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002260:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	2200      	movs	r2, #0
 800226a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f878 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002288:	d103      	bne.n	8002292 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e05f      	b.n	8002356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002296:	897b      	ldrh	r3, [r7, #10]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	492d      	ldr	r1, [pc, #180]	; (8002360 <I2C_RequestMemoryWrite+0x128>)
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f8b0 	bl	8002412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e04c      	b.n	8002356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	6a39      	ldr	r1, [r7, #32]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f91a 	bl	8002510 <I2C_WaitOnTXEFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00d      	beq.n	80022fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d107      	bne.n	80022fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e02b      	b.n	8002356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d105      	bne.n	8002310 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002304:	893b      	ldrh	r3, [r7, #8]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	611a      	str	r2, [r3, #16]
 800230e:	e021      	b.n	8002354 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002310:	893b      	ldrh	r3, [r7, #8]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	b29b      	uxth	r3, r3
 8002316:	b2da      	uxtb	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800231e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002320:	6a39      	ldr	r1, [r7, #32]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f8f4 	bl	8002510 <I2C_WaitOnTXEFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00d      	beq.n	800234a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b04      	cmp	r3, #4
 8002334:	d107      	bne.n	8002346 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002344:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e005      	b.n	8002356 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800234a:	893b      	ldrh	r3, [r7, #8]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	00010002 	.word	0x00010002

08002364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002374:	e025      	b.n	80023c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800237c:	d021      	beq.n	80023c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237e:	f7ff f94d 	bl	800161c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d302      	bcc.n	8002394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d116      	bne.n	80023c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e023      	b.n	800240a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d10d      	bne.n	80023e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	43da      	mvns	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4013      	ands	r3, r2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bf0c      	ite	eq
 80023de:	2301      	moveq	r3, #1
 80023e0:	2300      	movne	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	e00c      	b.n	8002402 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4013      	ands	r3, r2
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	bf0c      	ite	eq
 80023fa:	2301      	moveq	r3, #1
 80023fc:	2300      	movne	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	429a      	cmp	r2, r3
 8002406:	d0b6      	beq.n	8002376 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002420:	e051      	b.n	80024c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002430:	d123      	bne.n	800247a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002440:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800244a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f043 0204 	orr.w	r2, r3, #4
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e046      	b.n	8002508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002480:	d021      	beq.n	80024c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002482:	f7ff f8cb 	bl	800161c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	d302      	bcc.n	8002498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d116      	bne.n	80024c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f043 0220 	orr.w	r2, r3, #32
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e020      	b.n	8002508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d10c      	bne.n	80024ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	43da      	mvns	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4013      	ands	r3, r2
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf14      	ite	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	2300      	moveq	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	e00b      	b.n	8002502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	43da      	mvns	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4013      	ands	r3, r2
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf14      	ite	ne
 80024fc:	2301      	movne	r3, #1
 80024fe:	2300      	moveq	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d18d      	bne.n	8002422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800251c:	e02d      	b.n	800257a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 f878 	bl	8002614 <I2C_IsAcknowledgeFailed>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e02d      	b.n	800258a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002534:	d021      	beq.n	800257a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002536:	f7ff f871 	bl	800161c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	429a      	cmp	r2, r3
 8002544:	d302      	bcc.n	800254c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d116      	bne.n	800257a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f043 0220 	orr.w	r2, r3, #32
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e007      	b.n	800258a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002584:	2b80      	cmp	r3, #128	; 0x80
 8002586:	d1ca      	bne.n	800251e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800259e:	e02d      	b.n	80025fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f837 	bl	8002614 <I2C_IsAcknowledgeFailed>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e02d      	b.n	800260c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025b6:	d021      	beq.n	80025fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b8:	f7ff f830 	bl	800161c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d302      	bcc.n	80025ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f043 0220 	orr.w	r2, r3, #32
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e007      	b.n	800260c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d1ca      	bne.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262a:	d11b      	bne.n	8002664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e26c      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8087 	beq.w	800279e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002690:	4b92      	ldr	r3, [pc, #584]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b04      	cmp	r3, #4
 800269a:	d00c      	beq.n	80026b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800269c:	4b8f      	ldr	r3, [pc, #572]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d112      	bne.n	80026ce <HAL_RCC_OscConfig+0x5e>
 80026a8:	4b8c      	ldr	r3, [pc, #560]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b4:	d10b      	bne.n	80026ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b6:	4b89      	ldr	r3, [pc, #548]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d06c      	beq.n	800279c <HAL_RCC_OscConfig+0x12c>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d168      	bne.n	800279c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e246      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x76>
 80026d8:	4b80      	ldr	r3, [pc, #512]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a7f      	ldr	r2, [pc, #508]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	e02e      	b.n	8002744 <HAL_RCC_OscConfig+0xd4>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x98>
 80026ee:	4b7b      	ldr	r3, [pc, #492]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7a      	ldr	r2, [pc, #488]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b78      	ldr	r3, [pc, #480]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a77      	ldr	r2, [pc, #476]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e01d      	b.n	8002744 <HAL_RCC_OscConfig+0xd4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0xbc>
 8002712:	4b72      	ldr	r3, [pc, #456]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a71      	ldr	r2, [pc, #452]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	4b6f      	ldr	r3, [pc, #444]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a6e      	ldr	r2, [pc, #440]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e00b      	b.n	8002744 <HAL_RCC_OscConfig+0xd4>
 800272c:	4b6b      	ldr	r3, [pc, #428]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a6a      	ldr	r2, [pc, #424]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b68      	ldr	r3, [pc, #416]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a67      	ldr	r2, [pc, #412]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 800273e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002742:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d013      	beq.n	8002774 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe ff66 	bl	800161c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002754:	f7fe ff62 	bl	800161c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1fa      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b5d      	ldr	r3, [pc, #372]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0xe4>
 8002772:	e014      	b.n	800279e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7fe ff52 	bl	800161c <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7fe ff4e 	bl	800161c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	; 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e1e6      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	4b53      	ldr	r3, [pc, #332]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x10c>
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d063      	beq.n	8002872 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027aa:	4b4c      	ldr	r3, [pc, #304]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027b6:	4b49      	ldr	r3, [pc, #292]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d11c      	bne.n	80027fc <HAL_RCC_OscConfig+0x18c>
 80027c2:	4b46      	ldr	r3, [pc, #280]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d116      	bne.n	80027fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ce:	4b43      	ldr	r3, [pc, #268]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_RCC_OscConfig+0x176>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d001      	beq.n	80027e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e1ba      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e6:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4939      	ldr	r1, [pc, #228]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fa:	e03a      	b.n	8002872 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002804:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280a:	f7fe ff07 	bl	800161c <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002812:	f7fe ff03 	bl	800161c <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e19b      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002824:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002830:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4927      	ldr	r1, [pc, #156]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
 8002844:	e015      	b.n	8002872 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fee6 	bl	800161c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002854:	f7fe fee2 	bl	800161c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e17a      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d03a      	beq.n	80028f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d019      	beq.n	80028ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002886:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002888:	2201      	movs	r2, #1
 800288a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288c:	f7fe fec6 	bl	800161c <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002894:	f7fe fec2 	bl	800161c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e15a      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a6:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <HAL_RCC_OscConfig+0x26c>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028b2:	2001      	movs	r0, #1
 80028b4:	f000 fad8 	bl	8002e68 <RCC_Delay>
 80028b8:	e01c      	b.n	80028f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c0:	f7fe feac 	bl	800161c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c6:	e00f      	b.n	80028e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c8:	f7fe fea8 	bl	800161c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d908      	bls.n	80028e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e140      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	42420000 	.word	0x42420000
 80028e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e8:	4b9e      	ldr	r3, [pc, #632]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e9      	bne.n	80028c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80a6 	beq.w	8002a4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002906:	4b97      	ldr	r3, [pc, #604]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10d      	bne.n	800292e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	4b94      	ldr	r3, [pc, #592]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a93      	ldr	r2, [pc, #588]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291c:	61d3      	str	r3, [r2, #28]
 800291e:	4b91      	ldr	r3, [pc, #580]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292a:	2301      	movs	r3, #1
 800292c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292e:	4b8e      	ldr	r3, [pc, #568]	; (8002b68 <HAL_RCC_OscConfig+0x4f8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d118      	bne.n	800296c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293a:	4b8b      	ldr	r3, [pc, #556]	; (8002b68 <HAL_RCC_OscConfig+0x4f8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a8a      	ldr	r2, [pc, #552]	; (8002b68 <HAL_RCC_OscConfig+0x4f8>)
 8002940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002946:	f7fe fe69 	bl	800161c <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294e:	f7fe fe65 	bl	800161c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b64      	cmp	r3, #100	; 0x64
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e0fd      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	4b81      	ldr	r3, [pc, #516]	; (8002b68 <HAL_RCC_OscConfig+0x4f8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d106      	bne.n	8002982 <HAL_RCC_OscConfig+0x312>
 8002974:	4b7b      	ldr	r3, [pc, #492]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4a7a      	ldr	r2, [pc, #488]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6213      	str	r3, [r2, #32]
 8002980:	e02d      	b.n	80029de <HAL_RCC_OscConfig+0x36e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x334>
 800298a:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4a75      	ldr	r2, [pc, #468]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002990:	f023 0301 	bic.w	r3, r3, #1
 8002994:	6213      	str	r3, [r2, #32]
 8002996:	4b73      	ldr	r3, [pc, #460]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4a72      	ldr	r2, [pc, #456]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 800299c:	f023 0304 	bic.w	r3, r3, #4
 80029a0:	6213      	str	r3, [r2, #32]
 80029a2:	e01c      	b.n	80029de <HAL_RCC_OscConfig+0x36e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d10c      	bne.n	80029c6 <HAL_RCC_OscConfig+0x356>
 80029ac:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4a6c      	ldr	r2, [pc, #432]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	6213      	str	r3, [r2, #32]
 80029b8:	4b6a      	ldr	r3, [pc, #424]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4a69      	ldr	r2, [pc, #420]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6213      	str	r3, [r2, #32]
 80029c4:	e00b      	b.n	80029de <HAL_RCC_OscConfig+0x36e>
 80029c6:	4b67      	ldr	r3, [pc, #412]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4a66      	ldr	r2, [pc, #408]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6213      	str	r3, [r2, #32]
 80029d2:	4b64      	ldr	r3, [pc, #400]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4a63      	ldr	r2, [pc, #396]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d015      	beq.n	8002a12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e6:	f7fe fe19 	bl	800161c <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fe15 	bl	800161c <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0ab      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	4b57      	ldr	r3, [pc, #348]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ee      	beq.n	80029ee <HAL_RCC_OscConfig+0x37e>
 8002a10:	e014      	b.n	8002a3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7fe fe03 	bl	800161c <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7fe fdff 	bl	800161c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e095      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a30:	4b4c      	ldr	r3, [pc, #304]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ee      	bne.n	8002a1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a42:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4a47      	ldr	r2, [pc, #284]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8081 	beq.w	8002b5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a58:	4b42      	ldr	r3, [pc, #264]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d061      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d146      	bne.n	8002afa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6c:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <HAL_RCC_OscConfig+0x4fc>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7fe fdd3 	bl	800161c <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7fe fdcf 	bl	800161c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e067      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8c:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d108      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aa2:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	492d      	ldr	r1, [pc, #180]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a19      	ldr	r1, [r3, #32]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	4927      	ldr	r1, [pc, #156]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_RCC_OscConfig+0x4fc>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fda3 	bl	800161c <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ada:	f7fe fd9f 	bl	800161c <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e037      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x46a>
 8002af8:	e02f      	b.n	8002b5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <HAL_RCC_OscConfig+0x4fc>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe fd8c 	bl	800161c <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe fd88 	bl	800161c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e020      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x498>
 8002b26:	e018      	b.n	8002b5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e013      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d106      	bne.n	8002b56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	42420060 	.word	0x42420060

08002b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0d0      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b84:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d910      	bls.n	8002bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b67      	ldr	r3, [pc, #412]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 0207 	bic.w	r2, r3, #7
 8002b9a:	4965      	ldr	r1, [pc, #404]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b63      	ldr	r3, [pc, #396]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0b8      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bcc:	4b59      	ldr	r3, [pc, #356]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be4:	4b53      	ldr	r3, [pc, #332]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4a52      	ldr	r2, [pc, #328]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf0:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	494d      	ldr	r1, [pc, #308]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d040      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	4b47      	ldr	r3, [pc, #284]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d115      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e07f      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e073      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06b      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4e:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f023 0203 	bic.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4936      	ldr	r1, [pc, #216]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c60:	f7fe fcdc 	bl	800161c <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	f7fe fcd8 	bl	800161c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e053      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 020c 	and.w	r2, r3, #12
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d1eb      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c90:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d210      	bcs.n	8002cc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 0207 	bic.w	r2, r3, #7
 8002ca6:	4922      	ldr	r1, [pc, #136]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e032      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4916      	ldr	r1, [pc, #88]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	490e      	ldr	r1, [pc, #56]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cfe:	f000 f821 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002d02:	4602      	mov	r2, r0
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	490a      	ldr	r1, [pc, #40]	; (8002d38 <HAL_RCC_ClockConfig+0x1c8>)
 8002d10:	5ccb      	ldrb	r3, [r1, r3]
 8002d12:	fa22 f303 	lsr.w	r3, r2, r3
 8002d16:	4a09      	ldr	r2, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1cc>)
 8002d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_RCC_ClockConfig+0x1d0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fc3a 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40022000 	.word	0x40022000
 8002d34:	40021000 	.word	0x40021000
 8002d38:	08005330 	.word	0x08005330
 8002d3c:	20000010 	.word	0x20000010
 8002d40:	20000018 	.word	0x20000018

08002d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d44:	b490      	push	{r4, r7}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d4c:	1d3c      	adds	r4, r7, #4
 8002d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d54:	f240 2301 	movw	r3, #513	; 0x201
 8002d58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d6e:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d002      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x40>
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d003      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0x46>
 8002d82:	e02d      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d84:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d86:	623b      	str	r3, [r7, #32]
      break;
 8002d88:	e02d      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	0c9b      	lsrs	r3, r3, #18
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d96:	4413      	add	r3, r2
 8002d98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d9c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0c5b      	lsrs	r3, r3, #17
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002db6:	4413      	add	r3, r2
 8002db8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc2:	fb02 f203 	mul.w	r2, r2, r3
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dce:	e004      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dd4:	fb02 f303 	mul.w	r3, r2, r3
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	623b      	str	r3, [r7, #32]
      break;
 8002dde:	e002      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002de2:	623b      	str	r3, [r7, #32]
      break;
 8002de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002de6:	6a3b      	ldr	r3, [r7, #32]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc90      	pop	{r4, r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	08004bb4 	.word	0x08004bb4
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	007a1200 	.word	0x007a1200
 8002e00:	003d0900 	.word	0x003d0900

08002e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000010 	.word	0x20000010

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e1c:	f7ff fff2 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4903      	ldr	r1, [pc, #12]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	08005340 	.word	0x08005340

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e44:	f7ff ffde 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	0adb      	lsrs	r3, r3, #11
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4903      	ldr	r1, [pc, #12]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08005340 	.word	0x08005340

08002e68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <RCC_Delay+0x34>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <RCC_Delay+0x38>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	0a5b      	lsrs	r3, r3, #9
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e84:	bf00      	nop
  }
  while (Delay --);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1e5a      	subs	r2, r3, #1
 8002e8a:	60fa      	str	r2, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f9      	bne.n	8002e84 <RCC_Delay+0x1c>
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	20000010 	.word	0x20000010
 8002ea0:	10624dd3 	.word	0x10624dd3

08002ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e076      	b.n	8002fa4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec6:	d009      	beq.n	8002edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	61da      	str	r2, [r3, #28]
 8002ece:	e005      	b.n	8002edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd feea 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	ea42 0103 	orr.w	r1, r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	0c1a      	lsrs	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f002 0204 	and.w	r2, r2, #4
 8002f82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_SPI_Transmit+0x22>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e126      	b.n	800321c <HAL_SPI_Transmit+0x270>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fd6:	f7fe fb21 	bl	800161c <HAL_GetTick>
 8002fda:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d002      	beq.n	8002ff2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
 8002fee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ff0:	e10b      	b.n	800320a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_SPI_Transmit+0x52>
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003002:	e102      	b.n	800320a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2203      	movs	r2, #3
 8003008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800304a:	d10f      	bne.n	800306c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800306a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	2b40      	cmp	r3, #64	; 0x40
 8003078:	d007      	beq.n	800308a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003092:	d14b      	bne.n	800312c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_SPI_Transmit+0xf6>
 800309c:	8afb      	ldrh	r3, [r7, #22]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d13e      	bne.n	8003120 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	881a      	ldrh	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	1c9a      	adds	r2, r3, #2
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030c6:	e02b      	b.n	8003120 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d112      	bne.n	80030fc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	881a      	ldrh	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	1c9a      	adds	r2, r3, #2
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80030fa:	e011      	b.n	8003120 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030fc:	f7fe fa8e 	bl	800161c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d803      	bhi.n	8003114 <HAL_SPI_Transmit+0x168>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003112:	d102      	bne.n	800311a <HAL_SPI_Transmit+0x16e>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d102      	bne.n	8003120 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800311e:	e074      	b.n	800320a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1ce      	bne.n	80030c8 <HAL_SPI_Transmit+0x11c>
 800312a:	e04c      	b.n	80031c6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_SPI_Transmit+0x18e>
 8003134:	8afb      	ldrh	r3, [r7, #22]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d140      	bne.n	80031bc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	7812      	ldrb	r2, [r2, #0]
 8003146:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003160:	e02c      	b.n	80031bc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b02      	cmp	r3, #2
 800316e:	d113      	bne.n	8003198 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	7812      	ldrb	r2, [r2, #0]
 800317c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	86da      	strh	r2, [r3, #54]	; 0x36
 8003196:	e011      	b.n	80031bc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003198:	f7fe fa40 	bl	800161c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d803      	bhi.n	80031b0 <HAL_SPI_Transmit+0x204>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ae:	d102      	bne.n	80031b6 <HAL_SPI_Transmit+0x20a>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031ba:	e026      	b.n	800320a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1cd      	bne.n	8003162 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	6839      	ldr	r1, [r7, #0]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 fbb8 	bl	8003940 <SPI_EndRxTxTransaction>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e000      	b.n	800320a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003208:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800321a:	7ffb      	ldrb	r3, [r7, #31]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3720      	adds	r7, #32
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003240:	d112      	bne.n	8003268 <HAL_SPI_Receive+0x44>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10e      	bne.n	8003268 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2204      	movs	r2, #4
 800324e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003252:	88fa      	ldrh	r2, [r7, #6]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f8f1 	bl	8003446 <HAL_SPI_TransmitReceive>
 8003264:	4603      	mov	r3, r0
 8003266:	e0ea      	b.n	800343e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_SPI_Receive+0x52>
 8003272:	2302      	movs	r3, #2
 8003274:	e0e3      	b.n	800343e <HAL_SPI_Receive+0x21a>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800327e:	f7fe f9cd 	bl	800161c <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d002      	beq.n	8003296 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003290:	2302      	movs	r3, #2
 8003292:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003294:	e0ca      	b.n	800342c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_SPI_Receive+0x7e>
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032a6:	e0c1      	b.n	800342c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2204      	movs	r2, #4
 80032ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	88fa      	ldrh	r2, [r7, #6]
 80032c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ee:	d10f      	bne.n	8003310 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800330e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d007      	beq.n	800332e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800332c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d162      	bne.n	80033fc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003336:	e02e      	b.n	8003396 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d115      	bne.n	8003372 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f103 020c 	add.w	r2, r3, #12
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003370:	e011      	b.n	8003396 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003372:	f7fe f953 	bl	800161c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d803      	bhi.n	800338a <HAL_SPI_Receive+0x166>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003388:	d102      	bne.n	8003390 <HAL_SPI_Receive+0x16c>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003394:	e04a      	b.n	800342c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1cb      	bne.n	8003338 <HAL_SPI_Receive+0x114>
 80033a0:	e031      	b.n	8003406 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d113      	bne.n	80033d8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	b292      	uxth	r2, r2
 80033bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	1c9a      	adds	r2, r3, #2
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033d6:	e011      	b.n	80033fc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033d8:	f7fe f920 	bl	800161c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d803      	bhi.n	80033f0 <HAL_SPI_Receive+0x1cc>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ee:	d102      	bne.n	80033f6 <HAL_SPI_Receive+0x1d2>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80033fa:	e017      	b.n	800342c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1cd      	bne.n	80033a2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	6839      	ldr	r1, [r7, #0]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fa46 	bl	800389c <SPI_EndRxTransaction>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	75fb      	strb	r3, [r7, #23]
 8003428:	e000      	b.n	800342c <HAL_SPI_Receive+0x208>
  }

error :
 800342a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800343c:	7dfb      	ldrb	r3, [r7, #23]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b08c      	sub	sp, #48	; 0x30
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003454:	2301      	movs	r3, #1
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_SPI_TransmitReceive+0x26>
 8003468:	2302      	movs	r3, #2
 800346a:	e18a      	b.n	8003782 <HAL_SPI_TransmitReceive+0x33c>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003474:	f7fe f8d2 	bl	800161c <HAL_GetTick>
 8003478:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800348a:	887b      	ldrh	r3, [r7, #2]
 800348c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800348e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003492:	2b01      	cmp	r3, #1
 8003494:	d00f      	beq.n	80034b6 <HAL_SPI_TransmitReceive+0x70>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800349c:	d107      	bne.n	80034ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <HAL_SPI_TransmitReceive+0x68>
 80034a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d003      	beq.n	80034b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80034ae:	2302      	movs	r3, #2
 80034b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034b4:	e15b      	b.n	800376e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_SPI_TransmitReceive+0x82>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_SPI_TransmitReceive+0x82>
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d103      	bne.n	80034d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034ce:	e14e      	b.n	800376e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d003      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2205      	movs	r2, #5
 80034e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	887a      	ldrh	r2, [r7, #2]
 80034fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	887a      	ldrh	r2, [r7, #2]
 8003506:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	887a      	ldrh	r2, [r7, #2]
 800350c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003524:	2b40      	cmp	r3, #64	; 0x40
 8003526:	d007      	beq.n	8003538 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003536:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003540:	d178      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_SPI_TransmitReceive+0x10a>
 800354a:	8b7b      	ldrh	r3, [r7, #26]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d166      	bne.n	800361e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	881a      	ldrh	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	1c9a      	adds	r2, r3, #2
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003574:	e053      	b.n	800361e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b02      	cmp	r3, #2
 8003582:	d11b      	bne.n	80035bc <HAL_SPI_TransmitReceive+0x176>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d016      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x176>
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d113      	bne.n	80035bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	1c9a      	adds	r2, r3, #2
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d119      	bne.n	80035fe <HAL_SPI_TransmitReceive+0x1b8>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d014      	beq.n	80035fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	b292      	uxth	r2, r2
 80035e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	1c9a      	adds	r2, r3, #2
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035fa:	2301      	movs	r3, #1
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035fe:	f7fe f80d 	bl	800161c <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800360a:	429a      	cmp	r2, r3
 800360c:	d807      	bhi.n	800361e <HAL_SPI_TransmitReceive+0x1d8>
 800360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003614:	d003      	beq.n	800361e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800361c:	e0a7      	b.n	800376e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1a6      	bne.n	8003576 <HAL_SPI_TransmitReceive+0x130>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1a1      	bne.n	8003576 <HAL_SPI_TransmitReceive+0x130>
 8003632:	e07c      	b.n	800372e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <HAL_SPI_TransmitReceive+0x1fc>
 800363c:	8b7b      	ldrh	r3, [r7, #26]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d16b      	bne.n	800371a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	330c      	adds	r3, #12
 800364c:	7812      	ldrb	r2, [r2, #0]
 800364e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003668:	e057      	b.n	800371a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b02      	cmp	r3, #2
 8003676:	d11c      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x26c>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d017      	beq.n	80036b2 <HAL_SPI_TransmitReceive+0x26c>
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d114      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	7812      	ldrb	r2, [r2, #0]
 8003694:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d119      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x2ae>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d014      	beq.n	80036f4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036f0:	2301      	movs	r3, #1
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036f4:	f7fd ff92 	bl	800161c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003700:	429a      	cmp	r2, r3
 8003702:	d803      	bhi.n	800370c <HAL_SPI_TransmitReceive+0x2c6>
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800370a:	d102      	bne.n	8003712 <HAL_SPI_TransmitReceive+0x2cc>
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	2b00      	cmp	r3, #0
 8003710:	d103      	bne.n	800371a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003718:	e029      	b.n	800376e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1a2      	bne.n	800366a <HAL_SPI_TransmitReceive+0x224>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d19d      	bne.n	800366a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f904 	bl	8003940 <SPI_EndRxTxTransaction>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800374a:	e010      	b.n	800376e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10b      	bne.n	800376c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	e000      	b.n	800376e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800376c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800377e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003782:	4618      	mov	r0, r3
 8003784:	3730      	adds	r7, #48	; 0x30
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800379c:	f7fd ff3e 	bl	800161c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	4413      	add	r3, r2
 80037aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037ac:	f7fd ff36 	bl	800161c <HAL_GetTick>
 80037b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037b2:	4b39      	ldr	r3, [pc, #228]	; (8003898 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	015b      	lsls	r3, r3, #5
 80037b8:	0d1b      	lsrs	r3, r3, #20
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	fb02 f303 	mul.w	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037c2:	e054      	b.n	800386e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ca:	d050      	beq.n	800386e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037cc:	f7fd ff26 	bl	800161c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d902      	bls.n	80037e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d13d      	bne.n	800385e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037fa:	d111      	bne.n	8003820 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003804:	d004      	beq.n	8003810 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	d107      	bne.n	8003820 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003828:	d10f      	bne.n	800384a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003848:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e017      	b.n	800388e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	3b01      	subs	r3, #1
 800386c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4013      	ands	r3, r2
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	429a      	cmp	r2, r3
 800387c:	bf0c      	ite	eq
 800387e:	2301      	moveq	r3, #1
 8003880:	2300      	movne	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	429a      	cmp	r2, r3
 800388a:	d19b      	bne.n	80037c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000010 	.word	0x20000010

0800389c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038b0:	d111      	bne.n	80038d6 <SPI_EndRxTransaction+0x3a>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ba:	d004      	beq.n	80038c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c4:	d107      	bne.n	80038d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038de:	d117      	bne.n	8003910 <SPI_EndRxTransaction+0x74>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e8:	d112      	bne.n	8003910 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2200      	movs	r2, #0
 80038f2:	2101      	movs	r1, #1
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f7ff ff49 	bl	800378c <SPI_WaitFlagStateUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01a      	beq.n	8003936 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e013      	b.n	8003938 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2200      	movs	r2, #0
 8003918:	2180      	movs	r1, #128	; 0x80
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff ff36 	bl	800378c <SPI_WaitFlagStateUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e000      	b.n	8003938 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2200      	movs	r2, #0
 8003954:	2180      	movs	r1, #128	; 0x80
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff ff18 	bl	800378c <SPI_WaitFlagStateUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e000      	b.n	8003974 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e041      	b.n	8003a12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd f9de 	bl	8000d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4619      	mov	r1, r3
 80039ba:	4610      	mov	r0, r2
 80039bc:	f000 faa8 	bl	8003f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d001      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e03a      	b.n	8003aaa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <HAL_TIM_Base_Start_IT+0x98>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00e      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x58>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5e:	d009      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x58>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x58>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a13      	ldr	r2, [pc, #76]	; (8003abc <HAL_TIM_Base_Start_IT+0xa0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d111      	bne.n	8003a98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d010      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a96:	e007      	b.n	8003aa8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800

08003ac0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10f      	bne.n	8003b08 <HAL_TIM_Base_Stop_IT+0x48>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	f240 4344 	movw	r3, #1092	; 0x444
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d107      	bne.n	8003b08 <HAL_TIM_Base_Stop_IT+0x48>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr

08003b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d122      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d11b      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0202 	mvn.w	r2, #2
 8003b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f9ba 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 8003b64:	e005      	b.n	8003b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f9ad 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f9bc 	bl	8003eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d122      	bne.n	8003bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d11b      	bne.n	8003bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0204 	mvn.w	r2, #4
 8003b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f990 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 8003bb8:	e005      	b.n	8003bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f983 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f992 	bl	8003eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d122      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d11b      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0208 	mvn.w	r2, #8
 8003bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f966 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 8003c0c:	e005      	b.n	8003c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f959 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f968 	bl	8003eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d122      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d11b      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0210 	mvn.w	r2, #16
 8003c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f93c 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 8003c60:	e005      	b.n	8003c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f92f 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f93e 	bl	8003eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d10e      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d107      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0201 	mvn.w	r2, #1
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f90a 	bl	8003eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d10e      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb8:	2b80      	cmp	r3, #128	; 0x80
 8003cba:	d107      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa81 	bl	80041ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d107      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f902 	bl	8003efc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0220 	mvn.w	r2, #32
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa4c 	bl	80041bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_TIM_ConfigClockSource+0x18>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e0b3      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x180>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7c:	d03e      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0xd0>
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d82:	f200 8087 	bhi.w	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8a:	f000 8085 	beq.w	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	d87f      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003d94:	2b70      	cmp	r3, #112	; 0x70
 8003d96:	d01a      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0xa2>
 8003d98:	2b70      	cmp	r3, #112	; 0x70
 8003d9a:	d87b      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003d9c:	2b60      	cmp	r3, #96	; 0x60
 8003d9e:	d050      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x116>
 8003da0:	2b60      	cmp	r3, #96	; 0x60
 8003da2:	d877      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003da4:	2b50      	cmp	r3, #80	; 0x50
 8003da6:	d03c      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0xf6>
 8003da8:	2b50      	cmp	r3, #80	; 0x50
 8003daa:	d873      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d058      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x136>
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d86f      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003db4:	2b30      	cmp	r3, #48	; 0x30
 8003db6:	d064      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x156>
 8003db8:	2b30      	cmp	r3, #48	; 0x30
 8003dba:	d86b      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d060      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x156>
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d867      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d05c      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x156>
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d05a      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003dcc:	e062      	b.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6899      	ldr	r1, [r3, #8]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f000 f970 	bl	80040c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003df0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	609a      	str	r2, [r3, #8]
      break;
 8003dfa:	e04e      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6899      	ldr	r1, [r3, #8]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f000 f959 	bl	80040c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e1e:	609a      	str	r2, [r3, #8]
      break;
 8003e20:	e03b      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 f8d0 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2150      	movs	r1, #80	; 0x50
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f927 	bl	800408e <TIM_ITRx_SetConfig>
      break;
 8003e40:	e02b      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f000 f8ee 	bl	8004030 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2160      	movs	r1, #96	; 0x60
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f917 	bl	800408e <TIM_ITRx_SetConfig>
      break;
 8003e60:	e01b      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f000 f8b0 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2140      	movs	r1, #64	; 0x40
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f907 	bl	800408e <TIM_ITRx_SetConfig>
      break;
 8003e80:	e00b      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f000 f8fe 	bl	800408e <TIM_ITRx_SetConfig>
        break;
 8003e92:	e002      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e94:	bf00      	nop
 8003e96:	e000      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
	...

08003f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <TIM_Base_SetConfig+0xb8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <TIM_Base_SetConfig+0x30>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d007      	beq.n	8003f40 <TIM_Base_SetConfig+0x30>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <TIM_Base_SetConfig+0xbc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_Base_SetConfig+0x30>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <TIM_Base_SetConfig+0xc0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d108      	bne.n	8003f52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <TIM_Base_SetConfig+0xb8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00b      	beq.n	8003f72 <TIM_Base_SetConfig+0x62>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f60:	d007      	beq.n	8003f72 <TIM_Base_SetConfig+0x62>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <TIM_Base_SetConfig+0xbc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d003      	beq.n	8003f72 <TIM_Base_SetConfig+0x62>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <TIM_Base_SetConfig+0xc0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d108      	bne.n	8003f84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a07      	ldr	r2, [pc, #28]	; (8003fc8 <TIM_Base_SetConfig+0xb8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d103      	bne.n	8003fb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	615a      	str	r2, [r3, #20]
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800

08003fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0201 	bic.w	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f023 030a 	bic.w	r3, r3, #10
 8004010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f023 0210 	bic.w	r2, r3, #16
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800405a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	031b      	lsls	r3, r3, #12
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800406c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	621a      	str	r2, [r3, #32]
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f043 0307 	orr.w	r3, r3, #7
 80040b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	609a      	str	r2, [r3, #8]
}
 80040b8:	bf00      	nop
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr

080040c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b087      	sub	sp, #28
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	021a      	lsls	r2, r3, #8
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	609a      	str	r2, [r3, #8]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004114:	2302      	movs	r3, #2
 8004116:	e046      	b.n	80041a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d009      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10c      	bne.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	4313      	orrs	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800

080041bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e03f      	b.n	8004272 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fc fdd2 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	; 0x24
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fba9 	bl	800497c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	4613      	mov	r3, r2
 8004286:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b20      	cmp	r3, #32
 8004292:	d11d      	bne.n	80042d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_UART_Receive_IT+0x26>
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e016      	b.n	80042d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Receive_IT+0x38>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e00f      	b.n	80042d2 <HAL_UART_Receive_IT+0x58>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80042c0:	88fb      	ldrh	r3, [r7, #6]
 80042c2:	461a      	mov	r2, r3
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f9cf 	bl	800466a <UART_Start_Receive_IT>
 80042cc:	4603      	mov	r3, r0
 80042ce:	e000      	b.n	80042d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042d0:	2302      	movs	r3, #2
  }
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10d      	bne.n	800432e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_UART_IRQHandler+0x52>
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fa7f 	bl	800482a <UART_Receive_IT>
      return;
 800432c:	e17b      	b.n	8004626 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80b1 	beq.w	8004498 <HAL_UART_IRQHandler+0x1bc>
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d105      	bne.n	800434c <HAL_UART_IRQHandler+0x70>
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80a6 	beq.w	8004498 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_UART_IRQHandler+0x90>
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	f043 0201 	orr.w	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_UART_IRQHandler+0xb0>
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f043 0202 	orr.w	r2, r3, #2
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <HAL_UART_IRQHandler+0xd0>
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	f043 0204 	orr.w	r2, r3, #4
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00f      	beq.n	80043d6 <HAL_UART_IRQHandler+0xfa>
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <HAL_UART_IRQHandler+0xee>
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f043 0208 	orr.w	r2, r3, #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 811e 	beq.w	800461c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_UART_IRQHandler+0x11e>
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fa18 	bl	800482a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <HAL_UART_IRQHandler+0x146>
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d031      	beq.n	8004486 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f95a 	bl	80046dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d023      	beq.n	800447e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004444:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	2b00      	cmp	r3, #0
 800444c:	d013      	beq.n	8004476 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	4a76      	ldr	r2, [pc, #472]	; (800462c <HAL_UART_IRQHandler+0x350>)
 8004454:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	4618      	mov	r0, r3
 800445c:	f7fd fa54 	bl	8001908 <HAL_DMA_Abort_IT>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004470:	4610      	mov	r0, r2
 8004472:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004474:	e00e      	b.n	8004494 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8e3 	bl	8004642 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447c:	e00a      	b.n	8004494 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8df 	bl	8004642 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004484:	e006      	b.n	8004494 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8db 	bl	8004642 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004492:	e0c3      	b.n	800461c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004494:	bf00      	nop
    return;
 8004496:	e0c1      	b.n	800461c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	2b01      	cmp	r3, #1
 800449e:	f040 80a1 	bne.w	80045e4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 809b 	beq.w	80045e4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8095 	beq.w	80045e4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d04e      	beq.n	800457c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80044e8:	8a3b      	ldrh	r3, [r7, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8098 	beq.w	8004620 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044f4:	8a3a      	ldrh	r2, [r7, #16]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	f080 8092 	bcs.w	8004620 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8a3a      	ldrh	r2, [r7, #16]
 8004500:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2b20      	cmp	r3, #32
 800450a:	d02b      	beq.n	8004564 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0210 	bic.w	r2, r2, #16
 8004558:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	4618      	mov	r0, r3
 8004560:	f7fd f997 	bl	8001892 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800456c:	b29b      	uxth	r3, r3
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	b29b      	uxth	r3, r3
 8004572:	4619      	mov	r1, r3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f86d 	bl	8004654 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800457a:	e051      	b.n	8004620 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004584:	b29b      	uxth	r3, r3
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d047      	beq.n	8004624 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004594:	8a7b      	ldrh	r3, [r7, #18]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d044      	beq.n	8004624 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045a8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0201 	bic.w	r2, r2, #1
 80045b8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0210 	bic.w	r2, r2, #16
 80045d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045d8:	8a7b      	ldrh	r3, [r7, #18]
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f839 	bl	8004654 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80045e2:	e01f      	b.n	8004624 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d008      	beq.n	8004600 <HAL_UART_IRQHandler+0x324>
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f8af 	bl	800475c <UART_Transmit_IT>
    return;
 80045fe:	e012      	b.n	8004626 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <HAL_UART_IRQHandler+0x34a>
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f8f0 	bl	80047fa <UART_EndTransmit_IT>
    return;
 800461a:	e004      	b.n	8004626 <HAL_UART_IRQHandler+0x34a>
    return;
 800461c:	bf00      	nop
 800461e:	e002      	b.n	8004626 <HAL_UART_IRQHandler+0x34a>
      return;
 8004620:	bf00      	nop
 8004622:	e000      	b.n	8004626 <HAL_UART_IRQHandler+0x34a>
      return;
 8004624:	bf00      	nop
  }
}
 8004626:	3728      	adds	r7, #40	; 0x28
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	08004735 	.word	0x08004735

08004630 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr

08004642 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr

0800466a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	4613      	mov	r3, r2
 8004676:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	88fa      	ldrh	r2, [r7, #6]
 8004682:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	88fa      	ldrh	r2, [r7, #6]
 8004688:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2222      	movs	r2, #34	; 0x22
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0220 	orr.w	r2, r2, #32
 80046ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	2b01      	cmp	r3, #1
 800470a:	d107      	bne.n	800471c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0210 	bic.w	r2, r2, #16
 800471a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr

08004734 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff ff77 	bl	8004642 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b21      	cmp	r3, #33	; 0x21
 800476e:	d13e      	bne.n	80047ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004778:	d114      	bne.n	80047a4 <UART_Transmit_IT+0x48>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d110      	bne.n	80047a4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004796:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	1c9a      	adds	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	621a      	str	r2, [r3, #32]
 80047a2:	e008      	b.n	80047b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	1c59      	adds	r1, r3, #1
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6211      	str	r1, [r2, #32]
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29b      	uxth	r3, r3
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	4619      	mov	r1, r3
 80047c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10f      	bne.n	80047ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	e000      	b.n	80047f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047ee:	2302      	movs	r3, #2
  }
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004810:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff ff08 	bl	8004630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b086      	sub	sp, #24
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b22      	cmp	r3, #34	; 0x22
 800483c:	f040 8099 	bne.w	8004972 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004848:	d117      	bne.n	800487a <UART_Receive_IT+0x50>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d113      	bne.n	800487a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004868:	b29a      	uxth	r2, r3
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	1c9a      	adds	r2, r3, #2
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	629a      	str	r2, [r3, #40]	; 0x28
 8004878:	e026      	b.n	80048c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488c:	d007      	beq.n	800489e <UART_Receive_IT+0x74>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <UART_Receive_IT+0x82>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	e008      	b.n	80048be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4619      	mov	r1, r3
 80048d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d148      	bne.n	800496e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0220 	bic.w	r2, r2, #32
 80048ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	2b01      	cmp	r3, #1
 800491a:	d123      	bne.n	8004964 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0210 	bic.w	r2, r2, #16
 8004930:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	2b10      	cmp	r3, #16
 800493e:	d10a      	bne.n	8004956 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800495a:	4619      	mov	r1, r3
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff fe79 	bl	8004654 <HAL_UARTEx_RxEventCallback>
 8004962:	e002      	b.n	800496a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fc f903 	bl	8000b70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	e002      	b.n	8004974 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	e000      	b.n	8004974 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004972:	2302      	movs	r3, #2
  }
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049b6:	f023 030c 	bic.w	r3, r3, #12
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	430b      	orrs	r3, r1
 80049c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a2c      	ldr	r2, [pc, #176]	; (8004a90 <UART_SetConfig+0x114>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d103      	bne.n	80049ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049e4:	f7fe fa2c 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	e002      	b.n	80049f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049ec:	f7fe fa14 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 80049f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009a      	lsls	r2, r3, #2
 80049fc:	441a      	add	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <UART_SetConfig+0x118>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	0119      	lsls	r1, r3, #4
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009a      	lsls	r2, r3, #2
 8004a1c:	441a      	add	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a28:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <UART_SetConfig+0x118>)
 8004a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	2064      	movs	r0, #100	; 0x64
 8004a32:	fb00 f303 	mul.w	r3, r0, r3
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	3332      	adds	r3, #50	; 0x32
 8004a3c:	4a15      	ldr	r2, [pc, #84]	; (8004a94 <UART_SetConfig+0x118>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a48:	4419      	add	r1, r3
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009a      	lsls	r2, r3, #2
 8004a54:	441a      	add	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a60:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <UART_SetConfig+0x118>)
 8004a62:	fba3 0302 	umull	r0, r3, r3, r2
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	2064      	movs	r0, #100	; 0x64
 8004a6a:	fb00 f303 	mul.w	r3, r0, r3
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	3332      	adds	r3, #50	; 0x32
 8004a74:	4a07      	ldr	r2, [pc, #28]	; (8004a94 <UART_SetConfig+0x118>)
 8004a76:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7a:	095b      	lsrs	r3, r3, #5
 8004a7c:	f003 020f 	and.w	r2, r3, #15
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	440a      	add	r2, r1
 8004a86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40013800 	.word	0x40013800
 8004a94:	51eb851f 	.word	0x51eb851f

08004a98 <__libc_init_array>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	2600      	movs	r6, #0
 8004a9c:	4d0c      	ldr	r5, [pc, #48]	; (8004ad0 <__libc_init_array+0x38>)
 8004a9e:	4c0d      	ldr	r4, [pc, #52]	; (8004ad4 <__libc_init_array+0x3c>)
 8004aa0:	1b64      	subs	r4, r4, r5
 8004aa2:	10a4      	asrs	r4, r4, #2
 8004aa4:	42a6      	cmp	r6, r4
 8004aa6:	d109      	bne.n	8004abc <__libc_init_array+0x24>
 8004aa8:	f000 f838 	bl	8004b1c <_init>
 8004aac:	2600      	movs	r6, #0
 8004aae:	4d0a      	ldr	r5, [pc, #40]	; (8004ad8 <__libc_init_array+0x40>)
 8004ab0:	4c0a      	ldr	r4, [pc, #40]	; (8004adc <__libc_init_array+0x44>)
 8004ab2:	1b64      	subs	r4, r4, r5
 8004ab4:	10a4      	asrs	r4, r4, #2
 8004ab6:	42a6      	cmp	r6, r4
 8004ab8:	d105      	bne.n	8004ac6 <__libc_init_array+0x2e>
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac0:	4798      	blx	r3
 8004ac2:	3601      	adds	r6, #1
 8004ac4:	e7ee      	b.n	8004aa4 <__libc_init_array+0xc>
 8004ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aca:	4798      	blx	r3
 8004acc:	3601      	adds	r6, #1
 8004ace:	e7f2      	b.n	8004ab6 <__libc_init_array+0x1e>
 8004ad0:	08005348 	.word	0x08005348
 8004ad4:	08005348 	.word	0x08005348
 8004ad8:	08005348 	.word	0x08005348
 8004adc:	0800534c 	.word	0x0800534c

08004ae0 <memcpy>:
 8004ae0:	440a      	add	r2, r1
 8004ae2:	4291      	cmp	r1, r2
 8004ae4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004ae8:	d100      	bne.n	8004aec <memcpy+0xc>
 8004aea:	4770      	bx	lr
 8004aec:	b510      	push	{r4, lr}
 8004aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004af2:	4291      	cmp	r1, r2
 8004af4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af8:	d1f9      	bne.n	8004aee <memcpy+0xe>
 8004afa:	bd10      	pop	{r4, pc}

08004afc <memset>:
 8004afc:	4603      	mov	r3, r0
 8004afe:	4402      	add	r2, r0
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d100      	bne.n	8004b06 <memset+0xa>
 8004b04:	4770      	bx	lr
 8004b06:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0a:	e7f9      	b.n	8004b00 <memset+0x4>

08004b0c <strcpy>:
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b12:	f803 2b01 	strb.w	r2, [r3], #1
 8004b16:	2a00      	cmp	r2, #0
 8004b18:	d1f9      	bne.n	8004b0e <strcpy+0x2>
 8004b1a:	4770      	bx	lr

08004b1c <_init>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	bf00      	nop
 8004b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b22:	bc08      	pop	{r3}
 8004b24:	469e      	mov	lr, r3
 8004b26:	4770      	bx	lr

08004b28 <_fini>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	bf00      	nop
 8004b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2e:	bc08      	pop	{r3}
 8004b30:	469e      	mov	lr, r3
 8004b32:	4770      	bx	lr
