
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007138  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000928  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b6c  08007b6c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08007b6c  08007b6c  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b6c  08007b6c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b6c  08007b6c  00017b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b70  08007b70  00017b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08007b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  200000ac  08007c20  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  08007c20  000208bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a2d  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003045  00000000  00000000  00037b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003ab48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003beb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199f4  00000000  00000000  0003d110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018023  00000000  00000000  00056b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090478  00000000  00000000  0006eb27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fef9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005620  00000000  00000000  000feff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	0800722c 	.word	0x0800722c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	0800722c 	.word	0x0800722c

0800014c <LoRa_RX>:
extern bool flag_command_received;			// Flag show status receive data (completed/not completed)
extern char uart_rx_data[50];				// Main rx buffer data

//----------------------------------------------------------------------------------------
void LoRa_RX(bool flag)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	char str_1[20] = {0};
 8000156:	2300      	movs	r3, #0
 8000158:	617b      	str	r3, [r7, #20]
 800015a:	f107 0318 	add.w	r3, r7, #24
 800015e:	2200      	movs	r2, #0
 8000160:	601a      	str	r2, [r3, #0]
 8000162:	605a      	str	r2, [r3, #4]
 8000164:	609a      	str	r2, [r3, #8]
 8000166:	60da      	str	r2, [r3, #12]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init)
 8000168:	4b41      	ldr	r3, [pc, #260]	; (8000270 <LoRa_RX+0x124>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b00      	cmp	r3, #0
 800016e:	d02d      	beq.n	80001cc <LoRa_RX+0x80>
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	2b00      	cmp	r3, #0
 8000174:	d02a      	beq.n	80001cc <LoRa_RX+0x80>
	{
		// state_machine
		HAL_Delay(100);
 8000176:	2064      	movs	r0, #100	; 0x64
 8000178:	f003 f8ee 	bl	8003358 <HAL_Delay>
		init_lora_RX();
 800017c:	f000 fa1e 	bl	80005bc <init_lora_RX>
		HAL_Delay(500);
 8000180:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000184:	f003 f8e8 	bl	8003358 <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000188:	2110      	movs	r1, #16
 800018a:	2000      	movs	r0, #0
 800018c:	f001 f9f4 	bl	8001578 <ssd1306_SetCursor>
		strcpy(str_1, "RX data: ");
 8000190:	f107 0314 	add.w	r3, r7, #20
 8000194:	4a37      	ldr	r2, [pc, #220]	; (8000274 <LoRa_RX+0x128>)
 8000196:	ca07      	ldmia	r2, {r0, r1, r2}
 8000198:	c303      	stmia	r3!, {r0, r1}
 800019a:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 800019c:	4a36      	ldr	r2, [pc, #216]	; (8000278 <LoRa_RX+0x12c>)
 800019e:	f107 0014 	add.w	r0, r7, #20
 80001a2:	2301      	movs	r3, #1
 80001a4:	ca06      	ldmia	r2, {r1, r2}
 80001a6:	f001 f9c1 	bl	800152c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80001aa:	f001 f8af 	bl	800130c <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 80001ae:	2201      	movs	r2, #1
 80001b0:	4932      	ldr	r1, [pc, #200]	; (800027c <LoRa_RX+0x130>)
 80001b2:	4833      	ldr	r0, [pc, #204]	; (8000280 <LoRa_RX+0x134>)
 80001b4:	f005 ff39 	bl	800602a <HAL_UART_Receive_IT>
		memset(str_1, 0, sizeof(str_1));
 80001b8:	f107 0314 	add.w	r3, r7, #20
 80001bc:	2214      	movs	r2, #20
 80001be:	2100      	movs	r1, #0
 80001c0:	4618      	mov	r0, r3
 80001c2:	f006 fb93 	bl	80068ec <memset>
		flag_first_time = false;
 80001c6:	4b2a      	ldr	r3, [pc, #168]	; (8000270 <LoRa_RX+0x124>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Do it when data was received
 80001cc:	4b28      	ldr	r3, [pc, #160]	; (8000270 <LoRa_RX+0x124>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	f083 0301 	eor.w	r3, r3, #1
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d03c      	beq.n	8000254 <LoRa_RX+0x108>
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d039      	beq.n	8000254 <LoRa_RX+0x108>
	{
		if(flag_command_received == true)							// If data is ready
 80001e0:	4b28      	ldr	r3, [pc, #160]	; (8000284 <LoRa_RX+0x138>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d035      	beq.n	8000254 <LoRa_RX+0x108>
		{
			// Data receive
			// Clean data part on OLED
			char clearn_array[10] = "         ";
 80001e8:	4a27      	ldr	r2, [pc, #156]	; (8000288 <LoRa_RX+0x13c>)
 80001ea:	f107 0308 	add.w	r3, r7, #8
 80001ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80001f0:	c303      	stmia	r3!, {r0, r1}
 80001f2:	801a      	strh	r2, [r3, #0]
			ssd1306_SetCursor(60, 16);
 80001f4:	2110      	movs	r1, #16
 80001f6:	203c      	movs	r0, #60	; 0x3c
 80001f8:	f001 f9be 	bl	8001578 <ssd1306_SetCursor>
			ssd1306_WriteString(clearn_array,  Font_7x10, White);
 80001fc:	4a1e      	ldr	r2, [pc, #120]	; (8000278 <LoRa_RX+0x12c>)
 80001fe:	f107 0008 	add.w	r0, r7, #8
 8000202:	2301      	movs	r3, #1
 8000204:	ca06      	ldmia	r2, {r1, r2}
 8000206:	f001 f991 	bl	800152c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800020a:	f001 f87f 	bl	800130c <ssd1306_UpdateScreen>

			// Print received data
			ssd1306_SetCursor(60, 16);
 800020e:	2110      	movs	r1, #16
 8000210:	203c      	movs	r0, #60	; 0x3c
 8000212:	f001 f9b1 	bl	8001578 <ssd1306_SetCursor>
			strcpy(str_1, uart_rx_data);
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	491c      	ldr	r1, [pc, #112]	; (800028c <LoRa_RX+0x140>)
 800021c:	4618      	mov	r0, r3
 800021e:	f006 fc52 	bl	8006ac6 <strcpy>
			ssd1306_WriteString(str_1,  Font_7x10, White);
 8000222:	4a15      	ldr	r2, [pc, #84]	; (8000278 <LoRa_RX+0x12c>)
 8000224:	f107 0014 	add.w	r0, r7, #20
 8000228:	2301      	movs	r3, #1
 800022a:	ca06      	ldmia	r2, {r1, r2}
 800022c:	f001 f97e 	bl	800152c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000230:	f001 f86c 	bl	800130c <ssd1306_UpdateScreen>

			HAL_Delay(100);
 8000234:	2064      	movs	r0, #100	; 0x64
 8000236:	f003 f88f 	bl	8003358 <HAL_Delay>
			memset(uart_rx_data, 0, sizeof(uart_rx_data));
 800023a:	2232      	movs	r2, #50	; 0x32
 800023c:	2100      	movs	r1, #0
 800023e:	4813      	ldr	r0, [pc, #76]	; (800028c <LoRa_RX+0x140>)
 8000240:	f006 fb54 	bl	80068ec <memset>
			flag_command_received = false;
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <LoRa_RX+0x138>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart1, str, 1);					// Start interrupt again
 800024a:	2201      	movs	r2, #1
 800024c:	490b      	ldr	r1, [pc, #44]	; (800027c <LoRa_RX+0x130>)
 800024e:	480c      	ldr	r0, [pc, #48]	; (8000280 <LoRa_RX+0x134>)
 8000250:	f005 feeb 	bl	800602a <HAL_UART_Receive_IT>
		}
	}
	if(flag == false)
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	f083 0301 	eor.w	r3, r3, #1
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <LoRa_RX+0x11a>
	{
		flag_first_time = true;
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <LoRa_RX+0x124>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
	}
}
 8000266:	bf00      	nop
 8000268:	3728      	adds	r7, #40	; 0x28
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000000 	.word	0x20000000
 8000274:	08007244 	.word	0x08007244
 8000278:	20000014 	.word	0x20000014
 800027c:	20000588 	.word	0x20000588
 8000280:	20000638 	.word	0x20000638
 8000284:	20000589 	.word	0x20000589
 8000288:	08007250 	.word	0x08007250
 800028c:	20000554 	.word	0x20000554

08000290 <LoRa_TX>:
//----------------------------------------------------------------------------------------
void LoRa_TX(bool flag)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	static int transmit_count = 0;									// Variable for transmit
	char str_1[20] = {0};
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	f107 030c 	add.w	r3, r7, #12
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init)
 80002ac:	4b37      	ldr	r3, [pc, #220]	; (800038c <LoRa_TX+0xfc>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d026      	beq.n	8000302 <LoRa_TX+0x72>
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d023      	beq.n	8000302 <LoRa_TX+0x72>
	{
		HAL_Delay(100);
 80002ba:	2064      	movs	r0, #100	; 0x64
 80002bc:	f003 f84c 	bl	8003358 <HAL_Delay>
		init_lora_TX();
 80002c0:	f000 f934 	bl	800052c <init_lora_TX>
		HAL_Delay(500);
 80002c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c8:	f003 f846 	bl	8003358 <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 80002cc:	2110      	movs	r1, #16
 80002ce:	2000      	movs	r0, #0
 80002d0:	f001 f952 	bl	8001578 <ssd1306_SetCursor>
		strcpy(str_1, "TX data: ");
 80002d4:	f107 0308 	add.w	r3, r7, #8
 80002d8:	4a2d      	ldr	r2, [pc, #180]	; (8000390 <LoRa_TX+0x100>)
 80002da:	ca07      	ldmia	r2, {r0, r1, r2}
 80002dc:	c303      	stmia	r3!, {r0, r1}
 80002de:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 80002e0:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <LoRa_TX+0x104>)
 80002e2:	f107 0008 	add.w	r0, r7, #8
 80002e6:	2301      	movs	r3, #1
 80002e8:	ca06      	ldmia	r2, {r1, r2}
 80002ea:	f001 f91f 	bl	800152c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80002ee:	f001 f80d 	bl	800130c <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 80002f2:	2201      	movs	r2, #1
 80002f4:	4928      	ldr	r1, [pc, #160]	; (8000398 <LoRa_TX+0x108>)
 80002f6:	4829      	ldr	r0, [pc, #164]	; (800039c <LoRa_TX+0x10c>)
 80002f8:	f005 fe97 	bl	800602a <HAL_UART_Receive_IT>
		flag_first_time = false;
 80002fc:	4b23      	ldr	r3, [pc, #140]	; (800038c <LoRa_TX+0xfc>)
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Repeat it part for transmit data
 8000302:	4b22      	ldr	r3, [pc, #136]	; (800038c <LoRa_TX+0xfc>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	f083 0301 	eor.w	r3, r3, #1
 800030a:	b2db      	uxtb	r3, r3
 800030c:	2b00      	cmp	r3, #0
 800030e:	d02c      	beq.n	800036a <LoRa_TX+0xda>
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d029      	beq.n	800036a <LoRa_TX+0xda>
	{
		int count = lora_transmit_data(transmit_count);
 8000316:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <LoRa_TX+0x110>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4618      	mov	r0, r3
 800031c:	f000 f844 	bl	80003a8 <lora_transmit_data>
 8000320:	61f8      	str	r0, [r7, #28]
		transmit_count ++;
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <LoRa_TX+0x110>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	3301      	adds	r3, #1
 8000328:	4a1d      	ldr	r2, [pc, #116]	; (80003a0 <LoRa_TX+0x110>)
 800032a:	6013      	str	r3, [r2, #0]
		// Print transmeeting data
		memset(str_1, 0, sizeof(str_1));
 800032c:	f107 0308 	add.w	r3, r7, #8
 8000330:	2214      	movs	r2, #20
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f006 fad9 	bl	80068ec <memset>
		ssd1306_SetCursor(60, 16);
 800033a:	2110      	movs	r1, #16
 800033c:	203c      	movs	r0, #60	; 0x3c
 800033e:	f001 f91b 	bl	8001578 <ssd1306_SetCursor>
		sprintf(str_1, "%d", count);
 8000342:	f107 0308 	add.w	r3, r7, #8
 8000346:	69fa      	ldr	r2, [r7, #28]
 8000348:	4916      	ldr	r1, [pc, #88]	; (80003a4 <LoRa_TX+0x114>)
 800034a:	4618      	mov	r0, r3
 800034c:	f006 fb8c 	bl	8006a68 <siprintf>
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <LoRa_TX+0x104>)
 8000352:	f107 0008 	add.w	r0, r7, #8
 8000356:	2301      	movs	r3, #1
 8000358:	ca06      	ldmia	r2, {r1, r2}
 800035a:	f001 f8e7 	bl	800152c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800035e:	f000 ffd5 	bl	800130c <ssd1306_UpdateScreen>

		HAL_Delay(2000);											// Must be more than 1.5 sec
 8000362:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000366:	f002 fff7 	bl	8003358 <HAL_Delay>
	}
	if(flag == false)
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	f083 0301 	eor.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	2b00      	cmp	r3, #0
 8000374:	d005      	beq.n	8000382 <LoRa_TX+0xf2>
	{
		flag_first_time = true;
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <LoRa_TX+0xfc>)
 8000378:	2201      	movs	r2, #1
 800037a:	701a      	strb	r2, [r3, #0]
		transmit_count = 0;
 800037c:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <LoRa_TX+0x110>)
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
	}
}
 8000382:	bf00      	nop
 8000384:	3720      	adds	r7, #32
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000001 	.word	0x20000001
 8000390:	0800725c 	.word	0x0800725c
 8000394:	20000014 	.word	0x20000014
 8000398:	20000588 	.word	0x20000588
 800039c:	20000638 	.word	0x20000638
 80003a0:	200000c8 	.word	0x200000c8
 80003a4:	08007268 	.word	0x08007268

080003a8 <lora_transmit_data>:
//----------------------------------------------------------------------------------------
int lora_transmit_data(int transmit_count)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	static uint8_t data[10] = {0};

	data[5] = '0' + transmit_count%10;
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	4b48      	ldr	r3, [pc, #288]	; (80004d4 <lora_transmit_data+0x12c>)
 80003b4:	fb83 1302 	smull	r1, r3, r3, r2
 80003b8:	1099      	asrs	r1, r3, #2
 80003ba:	17d3      	asrs	r3, r2, #31
 80003bc:	1ac9      	subs	r1, r1, r3
 80003be:	460b      	mov	r3, r1
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	440b      	add	r3, r1
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	1ad1      	subs	r1, r2, r3
 80003c8:	b2cb      	uxtb	r3, r1
 80003ca:	3330      	adds	r3, #48	; 0x30
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4b42      	ldr	r3, [pc, #264]	; (80004d8 <lora_transmit_data+0x130>)
 80003d0:	715a      	strb	r2, [r3, #5]
	data[4] = '0' + (transmit_count/10) % 10;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a3f      	ldr	r2, [pc, #252]	; (80004d4 <lora_transmit_data+0x12c>)
 80003d6:	fb82 1203 	smull	r1, r2, r2, r3
 80003da:	1092      	asrs	r2, r2, #2
 80003dc:	17db      	asrs	r3, r3, #31
 80003de:	1ad2      	subs	r2, r2, r3
 80003e0:	4b3c      	ldr	r3, [pc, #240]	; (80004d4 <lora_transmit_data+0x12c>)
 80003e2:	fb83 1302 	smull	r1, r3, r3, r2
 80003e6:	1099      	asrs	r1, r3, #2
 80003e8:	17d3      	asrs	r3, r2, #31
 80003ea:	1ac9      	subs	r1, r1, r3
 80003ec:	460b      	mov	r3, r1
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	440b      	add	r3, r1
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	1ad1      	subs	r1, r2, r3
 80003f6:	b2cb      	uxtb	r3, r1
 80003f8:	3330      	adds	r3, #48	; 0x30
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	4b36      	ldr	r3, [pc, #216]	; (80004d8 <lora_transmit_data+0x130>)
 80003fe:	711a      	strb	r2, [r3, #4]
	data[3] = '0' + (transmit_count/100) % 10;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a36      	ldr	r2, [pc, #216]	; (80004dc <lora_transmit_data+0x134>)
 8000404:	fb82 1203 	smull	r1, r2, r2, r3
 8000408:	1152      	asrs	r2, r2, #5
 800040a:	17db      	asrs	r3, r3, #31
 800040c:	1ad2      	subs	r2, r2, r3
 800040e:	4b31      	ldr	r3, [pc, #196]	; (80004d4 <lora_transmit_data+0x12c>)
 8000410:	fb83 1302 	smull	r1, r3, r3, r2
 8000414:	1099      	asrs	r1, r3, #2
 8000416:	17d3      	asrs	r3, r2, #31
 8000418:	1ac9      	subs	r1, r1, r3
 800041a:	460b      	mov	r3, r1
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	440b      	add	r3, r1
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	1ad1      	subs	r1, r2, r3
 8000424:	b2cb      	uxtb	r3, r1
 8000426:	3330      	adds	r3, #48	; 0x30
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <lora_transmit_data+0x130>)
 800042c:	70da      	strb	r2, [r3, #3]
	data[2] = '0' + (transmit_count/1000) % 10;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a2b      	ldr	r2, [pc, #172]	; (80004e0 <lora_transmit_data+0x138>)
 8000432:	fb82 1203 	smull	r1, r2, r2, r3
 8000436:	1192      	asrs	r2, r2, #6
 8000438:	17db      	asrs	r3, r3, #31
 800043a:	1ad2      	subs	r2, r2, r3
 800043c:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <lora_transmit_data+0x12c>)
 800043e:	fb83 1302 	smull	r1, r3, r3, r2
 8000442:	1099      	asrs	r1, r3, #2
 8000444:	17d3      	asrs	r3, r2, #31
 8000446:	1ac9      	subs	r1, r1, r3
 8000448:	460b      	mov	r3, r1
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	440b      	add	r3, r1
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	1ad1      	subs	r1, r2, r3
 8000452:	b2cb      	uxtb	r3, r1
 8000454:	3330      	adds	r3, #48	; 0x30
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <lora_transmit_data+0x130>)
 800045a:	709a      	strb	r2, [r3, #2]
	data[1] = '0' + (transmit_count/10000) % 10;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a21      	ldr	r2, [pc, #132]	; (80004e4 <lora_transmit_data+0x13c>)
 8000460:	fb82 1203 	smull	r1, r2, r2, r3
 8000464:	1312      	asrs	r2, r2, #12
 8000466:	17db      	asrs	r3, r3, #31
 8000468:	1ad2      	subs	r2, r2, r3
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <lora_transmit_data+0x12c>)
 800046c:	fb83 1302 	smull	r1, r3, r3, r2
 8000470:	1099      	asrs	r1, r3, #2
 8000472:	17d3      	asrs	r3, r2, #31
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	460b      	mov	r3, r1
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	440b      	add	r3, r1
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	1ad1      	subs	r1, r2, r3
 8000480:	b2cb      	uxtb	r3, r1
 8000482:	3330      	adds	r3, #48	; 0x30
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <lora_transmit_data+0x130>)
 8000488:	705a      	strb	r2, [r3, #1]
	data[0] = '0' + (transmit_count/100000) % 10;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a16      	ldr	r2, [pc, #88]	; (80004e8 <lora_transmit_data+0x140>)
 800048e:	fb82 1203 	smull	r1, r2, r2, r3
 8000492:	1352      	asrs	r2, r2, #13
 8000494:	17db      	asrs	r3, r3, #31
 8000496:	1ad2      	subs	r2, r2, r3
 8000498:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <lora_transmit_data+0x12c>)
 800049a:	fb83 1302 	smull	r1, r3, r3, r2
 800049e:	1099      	asrs	r1, r3, #2
 80004a0:	17d3      	asrs	r3, r2, #31
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	460b      	mov	r3, r1
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	440b      	add	r3, r1
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	1ad1      	subs	r1, r2, r3
 80004ae:	b2cb      	uxtb	r3, r1
 80004b0:	3330      	adds	r3, #48	; 0x30
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <lora_transmit_data+0x130>)
 80004b6:	701a      	strb	r2, [r3, #0]
	data[6] = '\0';
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <lora_transmit_data+0x130>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit_IT(&huart1, data, 7);
 80004be:	2207      	movs	r2, #7
 80004c0:	4905      	ldr	r1, [pc, #20]	; (80004d8 <lora_transmit_data+0x130>)
 80004c2:	480a      	ldr	r0, [pc, #40]	; (80004ec <lora_transmit_data+0x144>)
 80004c4:	f005 fd6d 	bl	8005fa2 <HAL_UART_Transmit_IT>

	return transmit_count;
 80004c8:	687b      	ldr	r3, [r7, #4]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	66666667 	.word	0x66666667
 80004d8:	200000cc 	.word	0x200000cc
 80004dc:	51eb851f 	.word	0x51eb851f
 80004e0:	10624dd3 	.word	0x10624dd3
 80004e4:	68db8bad 	.word	0x68db8bad
 80004e8:	14f8b589 	.word	0x14f8b589
 80004ec:	20000638 	.word	0x20000638

080004f0 <read_all_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_all_settings_from_module(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 80004f4:	f000 f8c8 	bl	8000688 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 80004f8:	200a      	movs	r0, #10
 80004fa:	f002 ff2d 	bl	8003358 <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;			// 0xC1 - Read register command
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <read_all_settings_from_module+0x34>)
 8000500:	22c1      	movs	r2, #193	; 0xc1
 8000502:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;			// Number of register for read
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <read_all_settings_from_module+0x34>)
 8000506:	2200      	movs	r2, #0
 8000508:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;			// How many registers must be read
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <read_all_settings_from_module+0x34>)
 800050c:	2208      	movs	r2, #8
 800050e:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 8000510:	2203      	movs	r2, #3
 8000512:	4904      	ldr	r1, [pc, #16]	; (8000524 <read_all_settings_from_module+0x34>)
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <read_all_settings_from_module+0x38>)
 8000516:	f005 fd44 	bl	8005fa2 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 800051a:	2064      	movs	r0, #100	; 0x64
 800051c:	f002 ff1c 	bl	8003358 <HAL_Delay>

	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200000d8 	.word	0x200000d8
 8000528:	20000638 	.word	0x20000638

0800052c <init_lora_TX>:
//----------------------------------------------------------------------------------------
bool init_lora_TX(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	// з зчитаними даними конфіг регістрів. Якщо співпадає повністю, тоді записати в
	// глобальну змінну що модуль ініціалізований нормально

	static uint8_t data[10] = {0};

	set_config_deep_sleep_mode();
 8000530:	f000 f8aa 	bl	8000688 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 8000534:	2064      	movs	r0, #100	; 0x64
 8000536:	f002 ff0f 	bl	8003358 <HAL_Delay>

	// Init module
	// Descripe settings structure
	data[0] = 0xC0;		// 0xC0 - Set register command
 800053a:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <init_lora_TX+0x88>)
 800053c:	22c0      	movs	r2, #192	; 0xc0
 800053e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <init_lora_TX+0x88>)
 8000542:	2200      	movs	r2, #0
 8000544:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <init_lora_TX+0x88>)
 8000548:	2203      	movs	r2, #3
 800054a:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <init_lora_TX+0x88>)
 800054e:	2212      	movs	r2, #18
 8000550:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <init_lora_TX+0x88>)
 8000554:	2234      	movs	r2, #52	; 0x34
 8000556:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register (see in Datasheet)
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <init_lora_TX+0x88>)
 800055a:	2262      	movs	r2, #98	; 0x62
 800055c:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 800055e:	2206      	movs	r2, #6
 8000560:	4914      	ldr	r1, [pc, #80]	; (80005b4 <init_lora_TX+0x88>)
 8000562:	4815      	ldr	r0, [pc, #84]	; (80005b8 <init_lora_TX+0x8c>)
 8000564:	f005 fd1d 	bl	8005fa2 <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 8000568:	200a      	movs	r0, #10
 800056a:	f002 fef5 	bl	8003358 <HAL_Delay>

	memset(data, 0, sizeof(data));
 800056e:	220a      	movs	r2, #10
 8000570:	2100      	movs	r1, #0
 8000572:	4810      	ldr	r0, [pc, #64]	; (80005b4 <init_lora_TX+0x88>)
 8000574:	f006 f9ba 	bl	80068ec <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <init_lora_TX+0x88>)
 800057a:	22c0      	movs	r2, #192	; 0xc0
 800057c:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <init_lora_TX+0x88>)
 8000580:	2205      	movs	r2, #5
 8000582:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <init_lora_TX+0x88>)
 8000586:	2201      	movs	r2, #1
 8000588:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <init_lora_TX+0x88>)
 800058c:	2200      	movs	r2, #0
 800058e:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8000590:	2204      	movs	r2, #4
 8000592:	4908      	ldr	r1, [pc, #32]	; (80005b4 <init_lora_TX+0x88>)
 8000594:	4808      	ldr	r0, [pc, #32]	; (80005b8 <init_lora_TX+0x8c>)
 8000596:	f005 fd04 	bl	8005fa2 <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 800059a:	200a      	movs	r0, #10
 800059c:	f002 fedc 	bl	8003358 <HAL_Delay>
	///////////////

	read_all_settings_from_module();
 80005a0:	f7ff ffa6 	bl	80004f0 <read_all_settings_from_module>
	set_WOR_TX_mode();
 80005a4:	f000 f894 	bl	80006d0 <set_WOR_TX_mode>
	HAL_Delay(100);
 80005a8:	2064      	movs	r0, #100	; 0x64
 80005aa:	f002 fed5 	bl	8003358 <HAL_Delay>
}
 80005ae:	bf00      	nop
 80005b0:	4618      	mov	r0, r3
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000e4 	.word	0x200000e4
 80005b8:	20000638 	.word	0x20000638

080005bc <init_lora_RX>:
//----------------------------------------------------------------------------------------
bool init_lora_RX(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	static uint8_t data[10] = {0};
	set_config_deep_sleep_mode();
 80005c0:	f000 f862 	bl	8000688 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 80005c4:	2064      	movs	r0, #100	; 0x64
 80005c6:	f002 fec7 	bl	8003358 <HAL_Delay>

	data[0] = 0xC0;
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <init_lora_RX+0x88>)
 80005cc:	22c0      	movs	r2, #192	; 0xc0
 80005ce:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <init_lora_RX+0x88>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 80005d6:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <init_lora_RX+0x88>)
 80005d8:	2203      	movs	r2, #3
 80005da:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <init_lora_RX+0x88>)
 80005de:	2212      	movs	r2, #18
 80005e0:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <init_lora_RX+0x88>)
 80005e4:	2234      	movs	r2, #52	; 0x34
 80005e6:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register ()
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <init_lora_RX+0x88>)
 80005ea:	2262      	movs	r2, #98	; 0x62
 80005ec:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 80005ee:	2206      	movs	r2, #6
 80005f0:	4914      	ldr	r1, [pc, #80]	; (8000644 <init_lora_RX+0x88>)
 80005f2:	4815      	ldr	r0, [pc, #84]	; (8000648 <init_lora_RX+0x8c>)
 80005f4:	f005 fcd5 	bl	8005fa2 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80005f8:	2064      	movs	r0, #100	; 0x64
 80005fa:	f002 fead 	bl	8003358 <HAL_Delay>

	memset(data, 0, sizeof(data));
 80005fe:	220a      	movs	r2, #10
 8000600:	2100      	movs	r1, #0
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <init_lora_RX+0x88>)
 8000604:	f006 f972 	bl	80068ec <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <init_lora_RX+0x88>)
 800060a:	22c0      	movs	r2, #192	; 0xc0
 800060c:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <init_lora_RX+0x88>)
 8000610:	2205      	movs	r2, #5
 8000612:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <init_lora_RX+0x88>)
 8000616:	2201      	movs	r2, #1
 8000618:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <init_lora_RX+0x88>)
 800061c:	2200      	movs	r2, #0
 800061e:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8000620:	2204      	movs	r2, #4
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <init_lora_RX+0x88>)
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <init_lora_RX+0x8c>)
 8000626:	f005 fcbc 	bl	8005fa2 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 800062a:	2064      	movs	r0, #100	; 0x64
 800062c:	f002 fe94 	bl	8003358 <HAL_Delay>

	read_settings_from_module();
 8000630:	f000 f80c 	bl	800064c <read_settings_from_module>

	set_WOR_RX_mode();
 8000634:	f000 f83a 	bl	80006ac <set_WOR_RX_mode>

	HAL_Delay(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f002 fe8d 	bl	8003358 <HAL_Delay>
}
 800063e:	bf00      	nop
 8000640:	4618      	mov	r0, r3
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000f0 	.word	0x200000f0
 8000648:	20000638 	.word	0x20000638

0800064c <read_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_settings_from_module(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 8000650:	f000 f81a 	bl	8000688 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 8000654:	200a      	movs	r0, #10
 8000656:	f002 fe7f 	bl	8003358 <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <read_settings_from_module+0x34>)
 800065c:	22c1      	movs	r2, #193	; 0xc1
 800065e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <read_settings_from_module+0x34>)
 8000662:	2200      	movs	r2, #0
 8000664:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <read_settings_from_module+0x34>)
 8000668:	2208      	movs	r2, #8
 800066a:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 800066c:	2203      	movs	r2, #3
 800066e:	4904      	ldr	r1, [pc, #16]	; (8000680 <read_settings_from_module+0x34>)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <read_settings_from_module+0x38>)
 8000672:	f005 fc96 	bl	8005fa2 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000676:	2064      	movs	r0, #100	; 0x64
 8000678:	f002 fe6e 	bl	8003358 <HAL_Delay>
	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate

	return true;
 800067c:	bf00      	nop
}
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000fc 	.word	0x200000fc
 8000684:	20000638 	.word	0x20000638

08000688 <set_config_deep_sleep_mode>:
//-------------------------------------------------------------------------------------------------
void set_config_deep_sleep_mode (void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	// Function use for go to deep sleep and configuration mode
	// Set M0 and M1 PINs
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <set_config_deep_sleep_mode+0x20>)
 8000694:	f003 f9dd 	bl	8003a52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2101      	movs	r1, #1
 800069c:	4802      	ldr	r0, [pc, #8]	; (80006a8 <set_config_deep_sleep_mode+0x20>)
 800069e:	f003 f9d8 	bl	8003a52 <HAL_GPIO_WritePin>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40010c00 	.word	0x40010c00

080006ac <set_WOR_RX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_RX_mode (void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Receiving mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <set_WOR_RX_mode+0x20>)
 80006b8:	f003 f9cb 	bl	8003a52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2101      	movs	r1, #1
 80006c0:	4802      	ldr	r0, [pc, #8]	; (80006cc <set_WOR_RX_mode+0x20>)
 80006c2:	f003 f9c6 	bl	8003a52 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40010c00 	.word	0x40010c00

080006d0 <set_WOR_TX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_TX_mode (void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Transmitting mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <set_WOR_TX_mode+0x20>)
 80006dc:	f003 f9b9 	bl	8003a52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2101      	movs	r1, #1
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <set_WOR_TX_mode+0x20>)
 80006e6:	f003 f9b4 	bl	8003a52 <HAL_GPIO_WritePin>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40010c00 	.word	0x40010c00

080006f4 <NRF24L01_RX_Mode>:
		NRF24L01_Receive();
	}
}
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80006fa:	2300      	movs	r3, #0
 80006fc:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 fb8c 	bl	8000e1c <NRF24_ReadReg>
 8000704:	4603      	mov	r3, r0
 8000706:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP) | (1<<PRIM_RX);    	// Power up module. Write PWR_UP and PRIM_RX bits
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f043 0303 	orr.w	r3, r3, #3
 800070e:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4619      	mov	r1, r3
 8000714:	2000      	movs	r0, #0
 8000716:	f000 fbb5 	bl	8000e84 <NRF24_WriteReg>
  NRF24_WriteReg(CONFIG, 0x33);     		//  IRQ WORK  ~ 130 us
 800071a:	2133      	movs	r1, #51	; 0x33
 800071c:	2000      	movs	r0, #0
 800071e:	f000 fbb1 	bl	8000e84 <NRF24_WriteReg>
  CE_SET;
 8000722:	2201      	movs	r2, #1
 8000724:	2108      	movs	r1, #8
 8000726:	4807      	ldr	r0, [pc, #28]	; (8000744 <NRF24L01_RX_Mode+0x50>)
 8000728:	f003 f993 	bl	8003a52 <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 800072c:	2096      	movs	r0, #150	; 0x96
 800072e:	f000 fb53 	bl	8000dd8 <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 8000732:	f000 fc5b 	bl	8000fec <NRF24_FlushRX>
  NRF24_FlushTX();
 8000736:	f000 fc7b 	bl	8001030 <NRF24_FlushTX>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40010800 	.word	0x40010800

08000748 <NRF24L01_Receive>:
//----------------------------------------------------------------------------------------
// Function waite Low IRQ signal from NRF module
bool NRF24L01_Receive(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
	if(rx_flag == 1)
 800074e:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <NRF24L01_Receive+0xac>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b01      	cmp	r3, #1
 8000756:	d148      	bne.n	80007ea <NRF24L01_Receive+0xa2>
	{
		// Detect what's pipes data come from
		if(pipe == 0)
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <NRF24L01_Receive+0xb0>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d11f      	bne.n	80007a0 <NRF24L01_Receive+0x58>
		{
			ssd1306_SetCursor(0, 16);
 8000760:	2110      	movs	r1, #16
 8000762:	2000      	movs	r0, #0
 8000764:	f000 ff08 	bl	8001578 <ssd1306_SetCursor>
			char str_rx_oled_buffer_pipe_0[15] = {0};
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	f8c3 2007 	str.w	r2, [r3, #7]
			strcpy(str_rx_oled_buffer_pipe_0, "P0 data:");
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <NRF24L01_Receive+0xb4>)
 8000780:	ca07      	ldmia	r2, {r0, r1, r2}
 8000782:	c303      	stmia	r3!, {r0, r1}
 8000784:	701a      	strb	r2, [r3, #0]
			strcat(str_rx_oled_buffer_pipe_0, RX_BUF);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	491d      	ldr	r1, [pc, #116]	; (8000800 <NRF24L01_Receive+0xb8>)
 800078c:	4618      	mov	r0, r3
 800078e:	f006 f98b 	bl	8006aa8 <strcat>
			ssd1306_WriteString(str_rx_oled_buffer_pipe_0,  Font_7x10, White);
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <NRF24L01_Receive+0xbc>)
 8000794:	f107 0010 	add.w	r0, r7, #16
 8000798:	2301      	movs	r3, #1
 800079a:	ca06      	ldmia	r2, {r1, r2}
 800079c:	f000 fec6 	bl	800152c <ssd1306_WriteString>
		}
		if(pipe == 1)
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <NRF24L01_Receive+0xb0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d11b      	bne.n	80007e0 <NRF24L01_Receive+0x98>
		{
			ssd1306_SetCursor(0, 26);
 80007a8:	211a      	movs	r1, #26
 80007aa:	2000      	movs	r0, #0
 80007ac:	f000 fee4 	bl	8001578 <ssd1306_SetCursor>
			char str_rx_oled_buffer_pipe_1[15] = {0};
 80007b0:	2300      	movs	r3, #0
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	f8c3 2007 	str.w	r2, [r3, #7]
			strcpy(str_rx_oled_buffer_pipe_1, "P1 data:");
 80007c0:	463b      	mov	r3, r7
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <NRF24L01_Receive+0xc0>)
 80007c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c6:	c303      	stmia	r3!, {r0, r1}
 80007c8:	701a      	strb	r2, [r3, #0]
			strcat(str_rx_oled_buffer_pipe_1, RX_BUF);
 80007ca:	463b      	mov	r3, r7
 80007cc:	490c      	ldr	r1, [pc, #48]	; (8000800 <NRF24L01_Receive+0xb8>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f006 f96a 	bl	8006aa8 <strcat>
			ssd1306_WriteString(str_rx_oled_buffer_pipe_1,  Font_7x10, White);
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <NRF24L01_Receive+0xbc>)
 80007d6:	4638      	mov	r0, r7
 80007d8:	2301      	movs	r3, #1
 80007da:	ca06      	ldmia	r2, {r1, r2}
 80007dc:	f000 fea6 	bl	800152c <ssd1306_WriteString>
		}
		// Print RX data on OLED
		ssd1306_UpdateScreen();
 80007e0:	f000 fd94 	bl	800130c <ssd1306_UpdateScreen>
		rx_flag = 0;
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <NRF24L01_Receive+0xac>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
	}
}
 80007ea:	bf00      	nop
 80007ec:	4618      	mov	r0, r3
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000112 	.word	0x20000112
 80007f8:	20000138 	.word	0x20000138
 80007fc:	0800726c 	.word	0x0800726c
 8000800:	20000108 	.word	0x20000108
 8000804:	20000014 	.word	0x20000014
 8000808:	08007278 	.word	0x08007278

0800080c <NRF24_init_RX_mode>:
//----------------------------------------------------------------------------------------
void NRF24_init_RX_mode(void)                  // RECEIVE
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	reset_nrf24l01();	// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8000810:	f000 fc70 	bl	80010f4 <reset_nrf24l01>

	tx_or_rx_mode = rx_mode;		// For block interrupt HAL_GPIO_EXTI_Callback
 8000814:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <NRF24_init_RX_mode+0xb4>)
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <NRF24_init_RX_mode+0xb8>)
 800081a:	701a      	strb	r2, [r3, #0]

	CE_RESET;
 800081c:	2200      	movs	r2, #0
 800081e:	2108      	movs	r1, #8
 8000820:	4829      	ldr	r0, [pc, #164]	; (80008c8 <NRF24_init_RX_mode+0xbc>)
 8000822:	f003 f916 	bl	8003a52 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8000826:	f241 3088 	movw	r0, #5000	; 0x1388
 800082a:	f000 fad5 	bl	8000dd8 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter) 0b 0000 1010
 800082e:	210a      	movs	r1, #10
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fb27 	bl	8000e84 <NRF24_WriteReg>

	DelayMicro(5000);
 8000836:	f241 3088 	movw	r0, #5000	; 0x1388
 800083a:	f000 facd 	bl	8000dd8 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x03); 			// Enable Pipe0 and Pipe1
 800083e:	2103      	movs	r1, #3
 8000840:	2001      	movs	r0, #1
 8000842:	f000 fb1f 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x03); 		// Enable Pipe0 and Pipe1
 8000846:	2103      	movs	r1, #3
 8000848:	2002      	movs	r0, #2
 800084a:	f000 fb1b 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800084e:	2101      	movs	r1, #1
 8000850:	2003      	movs	r0, #3
 8000852:	f000 fb17 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8000856:	215f      	movs	r1, #95	; 0x5f
 8000858:	2004      	movs	r0, #4
 800085a:	f000 fb13 	bl	8000e84 <NRF24_WriteReg>
	NRF24_ToggleFeatures();					// Send activated command
 800085e:	f000 fb3f 	bl	8000ee0 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);				// Turn off all FEATURE register
 8000862:	2100      	movs	r1, #0
 8000864:	201d      	movs	r0, #29
 8000866:	f000 fb0d 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0); 				// Turn off all payload length data pipe
 800086a:	2100      	movs	r1, #0
 800086c:	201c      	movs	r0, #28
 800086e:	f000 fb09 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 8000872:	2170      	movs	r1, #112	; 0x70
 8000874:	2007      	movs	r0, #7
 8000876:	f000 fb05 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz  // was 76
 800087a:	214c      	movs	r1, #76	; 0x4c
 800087c:	2005      	movs	r0, #5
 800087e:	f000 fb01 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26); 	    // TX_PWR:0dBm, Datarate:250kbps
 8000882:	2126      	movs	r1, #38	; 0x26
 8000884:	2006      	movs	r0, #6
 8000886:	f000 fafd 	bl	8000e84 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_0, TX_ADR_WIDTH);		//	set up Transmit address. Used for a PTX device only.
 800088a:	2203      	movs	r2, #3
 800088c:	490f      	ldr	r1, [pc, #60]	; (80008cc <NRF24_init_RX_mode+0xc0>)
 800088e:	2010      	movs	r0, #16
 8000890:	f000 fb7a 	bl	8000f88 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_0, TX_ADR_WIDTH);    // Set up pipe 0 address
 8000894:	2203      	movs	r2, #3
 8000896:	490d      	ldr	r1, [pc, #52]	; (80008cc <NRF24_init_RX_mode+0xc0>)
 8000898:	200a      	movs	r0, #10
 800089a:	f000 fb75 	bl	8000f88 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS_1, TX_ADR_WIDTH);    // Set up pipe 1 address
 800089e:	2203      	movs	r2, #3
 80008a0:	490b      	ldr	r1, [pc, #44]	; (80008d0 <NRF24_init_RX_mode+0xc4>)
 80008a2:	200b      	movs	r0, #11
 80008a4:	f000 fb70 	bl	8000f88 <NRF24_Write_Buf>

	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 0
 80008a8:	210a      	movs	r1, #10
 80008aa:	2011      	movs	r0, #17
 80008ac:	f000 faea 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 1
 80008b0:	210a      	movs	r1, #10
 80008b2:	2012      	movs	r0, #18
 80008b4:	f000 fae6 	bl	8000e84 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 80008b8:	f7ff ff1c 	bl	80006f4 <NRF24L01_RX_Mode>
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000106 	.word	0x20000106
 80008c4:	20000003 	.word	0x20000003
 80008c8:	40010800 	.word	0x40010800
 80008cc:	20000004 	.word	0x20000004
 80008d0:	20000008 	.word	0x20000008

080008d4 <IRQ_Callback>:

//----------------------------------------------------------------------------------------
// Callback generate when stm32 get falling  signal from IRQ pin (NRF module show that it has data in buffer)
void IRQ_Callback(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 80008da:	2301      	movs	r3, #1
 80008dc:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 80008de:	2300      	movs	r3, #0
 80008e0:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <IRQ_Callback+0x64>)
 80008e8:	f003 f8cb 	bl	8003a82 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f000 fa73 	bl	8000dd8 <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 80008f2:	2007      	movs	r0, #7
 80008f4:	f000 fa92 	bl	8000e1c <NRF24_ReadReg>
 80008f8:	4603      	mov	r3, r0
 80008fa:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000902:	2b00      	cmp	r3, #0
 8000904:	d013      	beq.n	800092e <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	b2db      	uxtb	r3, r3
 800090c:	f003 0307 	and.w	r3, r3, #7
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <IRQ_Callback+0x68>)
 8000914:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 8000916:	220a      	movs	r2, #10
 8000918:	4909      	ldr	r1, [pc, #36]	; (8000940 <IRQ_Callback+0x6c>)
 800091a:	2061      	movs	r0, #97	; 0x61
 800091c:	f000 fb0a 	bl	8000f34 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 8000920:	2140      	movs	r1, #64	; 0x40
 8000922:	2007      	movs	r0, #7
 8000924:	f000 faae 	bl	8000e84 <NRF24_WriteReg>
		rx_flag = 1;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <IRQ_Callback+0x70>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
	}
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40011000 	.word	0x40011000
 800093c:	20000138 	.word	0x20000138
 8000940:	20000108 	.word	0x20000108
 8000944:	20000112 	.word	0x20000112

08000948 <NRF24L01_RX_Mode_for_TX_mode>:
		NRF24L01_Transmission();
	}
}
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode_for_TX_mode(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 fa62 	bl	8000e1c <NRF24_ReadReg>
 8000958:	4603      	mov	r3, r0
 800095a:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f043 0303 	orr.w	r3, r3, #3
 8000962:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4619      	mov	r1, r3
 8000968:	2000      	movs	r0, #0
 800096a:	f000 fa8b 	bl	8000e84 <NRF24_WriteReg>
  CE_SET;
 800096e:	2201      	movs	r2, #1
 8000970:	2108      	movs	r1, #8
 8000972:	4807      	ldr	r0, [pc, #28]	; (8000990 <NRF24L01_RX_Mode_for_TX_mode+0x48>)
 8000974:	f003 f86d 	bl	8003a52 <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 8000978:	2096      	movs	r0, #150	; 0x96
 800097a:	f000 fa2d 	bl	8000dd8 <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 800097e:	f000 fb35 	bl	8000fec <NRF24_FlushRX>
  NRF24_FlushTX();
 8000982:	f000 fb55 	bl	8001030 <NRF24_FlushTX>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010800 	.word	0x40010800

08000994 <NRF24_init_TX_mode>:
//----------------------------------------------------------------------------------------
void NRF24_init_TX_mode(void)    // TRANSMITTER
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	reset_nrf24l01();
 8000998:	f000 fbac 	bl	80010f4 <reset_nrf24l01>

	tx_or_rx_mode = tx_mode;		// For block interrupt HAL_GPIO_EXTI_Callback
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <NRF24_init_TX_mode+0xa8>)
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <NRF24_init_TX_mode+0xac>)
 80009a2:	701a      	strb	r2, [r3, #0]

	CE_RESET;
 80009a4:	2200      	movs	r2, #0
 80009a6:	2108      	movs	r1, #8
 80009a8:	4826      	ldr	r0, [pc, #152]	; (8000a44 <NRF24_init_TX_mode+0xb0>)
 80009aa:	f003 f852 	bl	8003a52 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 80009ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80009b2:	f000 fa11 	bl	8000dd8 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 80009b6:	210a      	movs	r1, #10
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 fa63 	bl	8000e84 <NRF24_WriteReg>

	DelayMicro(5000);
 80009be:	f241 3088 	movw	r0, #5000	; 0x1388
 80009c2:	f000 fa09 	bl	8000dd8 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 80009c6:	2101      	movs	r1, #1
 80009c8:	2001      	movs	r0, #1
 80009ca:	f000 fa5b 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 80009ce:	2101      	movs	r1, #1
 80009d0:	2002      	movs	r0, #2
 80009d2:	f000 fa57 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 80009d6:	2101      	movs	r1, #1
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 fa53 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 80009de:	215f      	movs	r1, #95	; 0x5f
 80009e0:	2004      	movs	r0, #4
 80009e2:	f000 fa4f 	bl	8000e84 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 80009e6:	f000 fa7b 	bl	8000ee0 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 80009ea:	2100      	movs	r1, #0
 80009ec:	201d      	movs	r0, #29
 80009ee:	f000 fa49 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 80009f2:	2100      	movs	r1, #0
 80009f4:	201c      	movs	r0, #28
 80009f6:	f000 fa45 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 80009fa:	2170      	movs	r1, #112	; 0x70
 80009fc:	2007      	movs	r0, #7
 80009fe:	f000 fa41 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8000a02:	214c      	movs	r1, #76	; 0x4c
 8000a04:	2005      	movs	r0, #5
 8000a06:	f000 fa3d 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 8000a0a:	2126      	movs	r1, #38	; 0x26
 8000a0c:	2006      	movs	r0, #6
 8000a0e:	f000 fa39 	bl	8000e84 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 8000a12:	2203      	movs	r2, #3
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <NRF24_init_TX_mode+0xb4>)
 8000a16:	2010      	movs	r0, #16
 8000a18:	f000 fab6 	bl	8000f88 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	490a      	ldr	r1, [pc, #40]	; (8000a48 <NRF24_init_TX_mode+0xb4>)
 8000a20:	200a      	movs	r0, #10
 8000a22:	f000 fab1 	bl	8000f88 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 8000a26:	210a      	movs	r1, #10
 8000a28:	2011      	movs	r0, #17
 8000a2a:	f000 fa2b 	bl	8000e84 <NRF24_WriteReg>

	NRF24L01_RX_Mode_for_TX_mode();
 8000a2e:	f7ff ff8b 	bl	8000948 <NRF24L01_RX_Mode_for_TX_mode>

	read_config_registers();	// For debug
 8000a32:	f000 fb1f 	bl	8001074 <read_config_registers>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000002 	.word	0x20000002
 8000a40:	20000003 	.word	0x20000003
 8000a44:	40010800 	.word	0x40010800
 8000a48:	2000000c 	.word	0x2000000c

08000a4c <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8000a54:	2203      	movs	r2, #3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <NRF24L01_TX_Mode+0x2c>)
 8000a58:	2010      	movs	r0, #16
 8000a5a:	f000 fa95 	bl	8000f88 <NRF24_Write_Buf>
  CE_RESET;
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2108      	movs	r1, #8
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <NRF24L01_TX_Mode+0x30>)
 8000a64:	f002 fff5 	bl	8003a52 <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 8000a68:	f000 fac0 	bl	8000fec <NRF24_FlushRX>
  NRF24_FlushTX();
 8000a6c:	f000 fae0 	bl	8001030 <NRF24_FlushTX>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000000c 	.word	0x2000000c
 8000a7c:	40010800 	.word	0x40010800

08000a80 <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 8000a90:	2200      	movs	r2, #0
 8000a92:	2108      	movs	r1, #8
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <NRF24_Transmit+0x64>)
 8000a96:	f002 ffdc 	bl	8003a52 <HAL_GPIO_WritePin>
  CS_ON;
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2110      	movs	r1, #16
 8000a9e:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <NRF24_Transmit+0x64>)
 8000aa0:	f002 ffd7 	bl	8003a52 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 8000aa4:	1df9      	adds	r1, r7, #7
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	2201      	movs	r2, #1
 8000aac:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <NRF24_Transmit+0x68>)
 8000aae:	f004 f911 	bl	8004cd4 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f000 f990 	bl	8000dd8 <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac0:	6839      	ldr	r1, [r7, #0]
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <NRF24_Transmit+0x68>)
 8000ac4:	f004 f906 	bl	8004cd4 <HAL_SPI_Transmit>
  CS_OFF;
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2110      	movs	r1, #16
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <NRF24_Transmit+0x64>)
 8000ace:	f002 ffc0 	bl	8003a52 <HAL_GPIO_WritePin>
  CE_SET;
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2108      	movs	r1, #8
 8000ad6:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <NRF24_Transmit+0x64>)
 8000ad8:	f002 ffbb 	bl	8003a52 <HAL_GPIO_WritePin>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40010800 	.word	0x40010800
 8000ae8:	200006c4 	.word	0x200006c4

08000aec <NRF24L01_Send>:
//----------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	2300      	movs	r3, #0
 8000afa:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ffa5 	bl	8000a4c <NRF24L01_TX_Mode>

  regval = NRF24_ReadReg(CONFIG);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 f98a 	bl	8000e1c <NRF24_ReadReg>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	73bb      	strb	r3, [r7, #14]

  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 8000b14:	7bbb      	ldrb	r3, [r7, #14]
 8000b16:	f023 0301 	bic.w	r3, r3, #1
 8000b1a:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 8000b1c:	7bbb      	ldrb	r3, [r7, #14]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 f9af 	bl	8000e84 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 8000b26:	2096      	movs	r0, #150	; 0x96
 8000b28:	f000 f956 	bl	8000dd8 <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 8000b2c:	220a      	movs	r2, #10
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	20a0      	movs	r0, #160	; 0xa0
 8000b32:	f7ff ffa5 	bl	8000a80 <NRF24_Transmit>

  CE_SET;
 8000b36:	2201      	movs	r2, #1
 8000b38:	2108      	movs	r1, #8
 8000b3a:	481c      	ldr	r0, [pc, #112]	; (8000bac <NRF24L01_Send+0xc0>)
 8000b3c:	f002 ff89 	bl	8003a52 <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 8000b40:	200f      	movs	r0, #15
 8000b42:	f000 f949 	bl	8000dd8 <DelayMicro>
  CE_RESET;
 8000b46:	2200      	movs	r2, #0
 8000b48:	2108      	movs	r1, #8
 8000b4a:	4818      	ldr	r0, [pc, #96]	; (8000bac <NRF24L01_Send+0xc0>)
 8000b4c:	f002 ff81 	bl	8003a52 <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 8000b50:	bf00      	nop
 8000b52:	2104      	movs	r1, #4
 8000b54:	4815      	ldr	r0, [pc, #84]	; (8000bac <NRF24L01_Send+0xc0>)
 8000b56:	f002 ff65 	bl	8003a24 <HAL_GPIO_ReadPin>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d0f8      	beq.n	8000b52 <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 8000b60:	2007      	movs	r0, #7
 8000b62:	f000 f95b 	bl	8000e1c <NRF24_ReadReg>
 8000b66:	4603      	mov	r3, r0
 8000b68:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	f003 0320 	and.w	r3, r3, #32
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d004      	beq.n	8000b7e <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 8000b74:	2120      	movs	r1, #32
 8000b76:	2007      	movs	r0, #7
 8000b78:	f000 f984 	bl	8000e84 <NRF24_WriteReg>
 8000b7c:	e00a      	b.n	8000b94 <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d005      	beq.n	8000b94 <NRF24L01_Send+0xa8>
  {
    NRF24_WriteReg(STATUS_NRF, 0x10);
 8000b88:	2110      	movs	r1, #16
 8000b8a:	2007      	movs	r0, #7
 8000b8c:	f000 f97a 	bl	8000e84 <NRF24_WriteReg>
    NRF24_FlushTX();
 8000b90:	f000 fa4e 	bl	8001030 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 8000b94:	2008      	movs	r0, #8
 8000b96:	f000 f941 	bl	8000e1c <NRF24_ReadReg>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode_for_TX_mode();
 8000b9e:	f7ff fed3 	bl	8000948 <NRF24L01_RX_Mode_for_TX_mode>

  return regval;
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40010800 	.word	0x40010800

08000bb0 <NRF24L01_Transmission>:
//----------------------------------------------------------------------------------------
void NRF24L01_Transmission(void)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b091      	sub	sp, #68	; 0x44
 8000bb4:	af00      	add	r7, sp, #0
	static uint8_t retr_cnt, dt = 0;
	//static int test_data = 0;							// Init test data for transmit
	uint8_t buf2[20]={0};
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
	uint8_t test_i[10] = {0};
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	809a      	strh	r2, [r3, #4]

	uint8_t str_nrf[25] = {0};
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
 8000bea:	751a      	strb	r2, [r3, #20]

	// Print transmit data
	ssd1306_SetCursor(0, 16);
 8000bec:	2110      	movs	r1, #16
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 fcc2 	bl	8001578 <ssd1306_SetCursor>
	strcpy(str_nrf, "Data:");
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4a6c      	ldr	r2, [pc, #432]	; (8000da8 <NRF24L01_Transmission+0x1f8>)
 8000bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bfc:	6018      	str	r0, [r3, #0]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	8019      	strh	r1, [r3, #0]
	sprintf(buf2, "%d", test_data);
 8000c02:	4b6a      	ldr	r3, [pc, #424]	; (8000dac <NRF24L01_Transmission+0x1fc>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0a:	4969      	ldr	r1, [pc, #420]	; (8000db0 <NRF24L01_Transmission+0x200>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f005 ff2b 	bl	8006a68 <siprintf>
	strcat(str_nrf, buf2);
 8000c12:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f005 ff44 	bl	8006aa8 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8000c20:	4a64      	ldr	r2, [pc, #400]	; (8000db4 <NRF24L01_Transmission+0x204>)
 8000c22:	1d38      	adds	r0, r7, #4
 8000c24:	2301      	movs	r3, #1
 8000c26:	ca06      	ldmia	r2, {r1, r2}
 8000c28:	f000 fc80 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000c2c:	f000 fb6e 	bl	800130c <ssd1306_UpdateScreen>
	memset(str_nrf, 0, sizeof(str_nrf));
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2219      	movs	r2, #25
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f005 fe58 	bl	80068ec <memset>

	dt = NRF24L01_Send(buf2);						// Transmit data
 8000c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff53 	bl	8000aec <NRF24L01_Send>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b5b      	ldr	r3, [pc, #364]	; (8000db8 <NRF24L01_Transmission+0x208>)
 8000c4c:	701a      	strb	r2, [r3, #0]

	// Calculation retransmitted packets
	retr_cnt = dt & 0xF;
 8000c4e:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <NRF24L01_Transmission+0x208>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	4b58      	ldr	r3, [pc, #352]	; (8000dbc <NRF24L01_Transmission+0x20c>)
 8000c5a:	701a      	strb	r2, [r3, #0]
	retr_cnt_full += retr_cnt;		// Counting retransmit packets
 8000c5c:	4b57      	ldr	r3, [pc, #348]	; (8000dbc <NRF24L01_Transmission+0x20c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b57      	ldr	r3, [pc, #348]	; (8000dc0 <NRF24L01_Transmission+0x210>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a55      	ldr	r2, [pc, #340]	; (8000dc0 <NRF24L01_Transmission+0x210>)
 8000c6a:	6013      	str	r3, [r2, #0]

	// Print transmit counter
	memset(test_i, 0, sizeof(test_i));
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	220a      	movs	r2, #10
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f005 fe39 	bl	80068ec <memset>
	ssd1306_SetCursor(0, 26);
 8000c7a:	211a      	movs	r1, #26
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f000 fc7b 	bl	8001578 <ssd1306_SetCursor>
	strcpy(str_nrf, "Conut trans:");
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4a4f      	ldr	r2, [pc, #316]	; (8000dc4 <NRF24L01_Transmission+0x214>)
 8000c86:	461c      	mov	r4, r3
 8000c88:	4613      	mov	r3, r2
 8000c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c8c:	c407      	stmia	r4!, {r0, r1, r2}
 8000c8e:	7023      	strb	r3, [r4, #0]
	itoa(i, test_i, 10);								// Convert number in string
 8000c90:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <NRF24L01_Transmission+0x218>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f107 0120 	add.w	r1, r7, #32
 8000c98:	220a      	movs	r2, #10
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f005 fe16 	bl	80068cc <itoa>
	strcat(str_nrf, test_i);
 8000ca0:	f107 0220 	add.w	r2, r7, #32
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f005 fefd 	bl	8006aa8 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8000cae:	4a41      	ldr	r2, [pc, #260]	; (8000db4 <NRF24L01_Transmission+0x204>)
 8000cb0:	1d38      	adds	r0, r7, #4
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	ca06      	ldmia	r2, {r1, r2}
 8000cb6:	f000 fc39 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000cba:	f000 fb27 	bl	800130c <ssd1306_UpdateScreen>

	// Print retransmeet counter
	memset(str_nrf, 0, sizeof(str_nrf));
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2219      	movs	r2, #25
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f005 fe11 	bl	80068ec <memset>
	memset(test_i, 0, sizeof(test_i));
 8000cca:	f107 0320 	add.w	r3, r7, #32
 8000cce:	220a      	movs	r2, #10
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f005 fe0a 	bl	80068ec <memset>
	ssd1306_SetCursor(0, 36);
 8000cd8:	2124      	movs	r1, #36	; 0x24
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 fc4c 	bl	8001578 <ssd1306_SetCursor>
	strcpy(str_nrf, "Retransm:");
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4a3a      	ldr	r2, [pc, #232]	; (8000dcc <NRF24L01_Transmission+0x21c>)
 8000ce4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ce6:	c303      	stmia	r3!, {r0, r1}
 8000ce8:	801a      	strh	r2, [r3, #0]
	itoa(retr_cnt_full, test_i, 10);
 8000cea:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <NRF24L01_Transmission+0x210>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f107 0120 	add.w	r1, r7, #32
 8000cf2:	220a      	movs	r2, #10
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f005 fde9 	bl	80068cc <itoa>
	strcat(str_nrf, test_i);
 8000cfa:	f107 0220 	add.w	r2, r7, #32
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f005 fed0 	bl	8006aa8 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8000d08:	4a2a      	ldr	r2, [pc, #168]	; (8000db4 <NRF24L01_Transmission+0x204>)
 8000d0a:	1d38      	adds	r0, r7, #4
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	ca06      	ldmia	r2, {r1, r2}
 8000d10:	f000 fc0c 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000d14:	f000 fafa 	bl	800130c <ssd1306_UpdateScreen>

	// Print lost packets
	memset(str_nrf, 0, sizeof(str_nrf));
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2219      	movs	r2, #25
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f005 fde4 	bl	80068ec <memset>
	memset(test_i, 0, sizeof(test_i));
 8000d24:	f107 0320 	add.w	r3, r7, #32
 8000d28:	220a      	movs	r2, #10
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f005 fddd 	bl	80068ec <memset>

	cnt_lost = dt >> 4;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <NRF24L01_Transmission+0x208>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <NRF24L01_Transmission+0x220>)
 8000d3e:	601a      	str	r2, [r3, #0]

	ssd1306_SetCursor(0, 46);
 8000d40:	212e      	movs	r1, #46	; 0x2e
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 fc18 	bl	8001578 <ssd1306_SetCursor>
	strcpy(str_nrf, "Lost:");
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <NRF24L01_Transmission+0x224>)
 8000d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d50:	6018      	str	r0, [r3, #0]
 8000d52:	3304      	adds	r3, #4
 8000d54:	8019      	strh	r1, [r3, #0]
	itoa(cnt_lost, test_i, 10);
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <NRF24L01_Transmission+0x220>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f107 0120 	add.w	r1, r7, #32
 8000d5e:	220a      	movs	r2, #10
 8000d60:	4618      	mov	r0, r3
 8000d62:	f005 fdb3 	bl	80068cc <itoa>
	strcat(str_nrf, test_i);
 8000d66:	f107 0220 	add.w	r2, r7, #32
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f005 fe9a 	bl	8006aa8 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8000d74:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <NRF24L01_Transmission+0x204>)
 8000d76:	1d38      	adds	r0, r7, #4
 8000d78:	2301      	movs	r3, #1
 8000d7a:	ca06      	ldmia	r2, {r1, r2}
 8000d7c:	f000 fbd6 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000d80:	f000 fac4 	bl	800130c <ssd1306_UpdateScreen>

	test_data++;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <NRF24L01_Transmission+0x1fc>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <NRF24L01_Transmission+0x1fc>)
 8000d8c:	6013      	str	r3, [r2, #0]
	i++;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <NRF24L01_Transmission+0x218>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <NRF24L01_Transmission+0x218>)
 8000d96:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 8000d98:	2064      	movs	r0, #100	; 0x64
 8000d9a:	f002 fadd 	bl	8003358 <HAL_Delay>
}
 8000d9e:	bf00      	nop
 8000da0:	3744      	adds	r7, #68	; 0x44
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	08007284 	.word	0x08007284
 8000dac:	20000144 	.word	0x20000144
 8000db0:	0800728c 	.word	0x0800728c
 8000db4:	20000014 	.word	0x20000014
 8000db8:	20000148 	.word	0x20000148
 8000dbc:	20000149 	.word	0x20000149
 8000dc0:	2000013c 	.word	0x2000013c
 8000dc4:	08007290 	.word	0x08007290
 8000dc8:	20000010 	.word	0x20000010
 8000dcc:	080072a0 	.word	0x080072a0
 8000dd0:	20000140 	.word	0x20000140
 8000dd4:	080072ac 	.word	0x080072ac

08000dd8 <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <DelayMicro+0x3c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <DelayMicro+0x3c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <DelayMicro+0x40>)
 8000dec:	fba2 2303 	umull	r2, r3, r2, r3
 8000df0:	0ddb      	lsrs	r3, r3, #23
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	fb02 f303 	mul.w	r3, r2, r3
 8000df8:	607b      	str	r3, [r7, #4]
	while (micros--);
 8000dfa:	bf00      	nop
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1fa      	bne.n	8000dfc <DelayMicro+0x24>
}
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000024 	.word	0x20000024
 8000e18:	ffa71ee7 	.word	0xffa71ee7

08000e1c <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	4813      	ldr	r0, [pc, #76]	; (8000e7c <NRF24_ReadReg+0x60>)
 8000e30:	f002 fe0f 	bl	8003a52 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8000e34:	f107 020f 	add.w	r2, r7, #15
 8000e38:	1df9      	adds	r1, r7, #7
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	480f      	ldr	r0, [pc, #60]	; (8000e80 <NRF24_ReadReg+0x64>)
 8000e44:	f004 f993 	bl	800516e <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b07      	cmp	r3, #7
 8000e4c:	d00c      	beq.n	8000e68 <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 8000e4e:	23ff      	movs	r3, #255	; 0xff
 8000e50:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8000e52:	f107 020f 	add.w	r2, r7, #15
 8000e56:	f107 010e 	add.w	r1, r7, #14
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2301      	movs	r3, #1
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <NRF24_ReadReg+0x64>)
 8000e64:	f004 f983 	bl	800516e <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <NRF24_ReadReg+0x60>)
 8000e6e:	f002 fdf0 	bl	8003a52 <HAL_GPIO_WritePin>
  return dt;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	200006c4 	.word	0x200006c4

08000e84 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	4613      	mov	r3, r2
 8000e92:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f043 0320 	orr.w	r3, r3, #32
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2110      	movs	r1, #16
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <NRF24_WriteReg+0x54>)
 8000ea4:	f002 fdd5 	bl	8003a52 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000ea8:	1df9      	adds	r1, r7, #7
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	2201      	movs	r2, #1
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <NRF24_WriteReg+0x58>)
 8000eb2:	f003 ff0f 	bl	8004cd4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 8000eb6:	1db9      	adds	r1, r7, #6
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4807      	ldr	r0, [pc, #28]	; (8000edc <NRF24_WriteReg+0x58>)
 8000ec0:	f003 ff08 	bl	8004cd4 <HAL_SPI_Transmit>
  CS_OFF;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <NRF24_WriteReg+0x54>)
 8000eca:	f002 fdc2 	bl	8003a52 <HAL_GPIO_WritePin>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40010800 	.word	0x40010800
 8000edc:	200006c4 	.word	0x200006c4

08000ee0 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 8000ee6:	2350      	movs	r3, #80	; 0x50
 8000ee8:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8000eea:	2200      	movs	r2, #0
 8000eec:	2110      	movs	r1, #16
 8000eee:	480f      	ldr	r0, [pc, #60]	; (8000f2c <NRF24_ToggleFeatures+0x4c>)
 8000ef0:	f002 fdaf 	bl	8003a52 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000ef4:	1d39      	adds	r1, r7, #4
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	2201      	movs	r2, #1
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <NRF24_ToggleFeatures+0x50>)
 8000efe:	f003 fee9 	bl	8004cd4 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f7ff ff68 	bl	8000dd8 <DelayMicro>
  dt[0] = 0x73;
 8000f08:	2373      	movs	r3, #115	; 0x73
 8000f0a:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000f0c:	1d39      	adds	r1, r7, #4
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	2201      	movs	r2, #1
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <NRF24_ToggleFeatures+0x50>)
 8000f16:	f003 fedd 	bl	8004cd4 <HAL_SPI_Transmit>
  CS_OFF;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	4803      	ldr	r0, [pc, #12]	; (8000f2c <NRF24_ToggleFeatures+0x4c>)
 8000f20:	f002 fd97 	bl	8003a52 <HAL_GPIO_WritePin>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	200006c4 	.word	0x200006c4

08000f34 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000f44:	2200      	movs	r2, #0
 8000f46:	2110      	movs	r1, #16
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <NRF24_Read_Buf+0x4c>)
 8000f4a:	f002 fd82 	bl	8003a52 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000f4e:	1df9      	adds	r1, r7, #7
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	2201      	movs	r2, #1
 8000f56:	480b      	ldr	r0, [pc, #44]	; (8000f84 <NRF24_Read_Buf+0x50>)
 8000f58:	f003 febc 	bl	8004cd4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <NRF24_Read_Buf+0x50>)
 8000f68:	f003 fff0 	bl	8004f4c <HAL_SPI_Receive>
  CS_OFF;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <NRF24_Read_Buf+0x4c>)
 8000f72:	f002 fd6e 	bl	8003a52 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40010800 	.word	0x40010800
 8000f84:	200006c4 	.word	0x200006c4

08000f88 <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	4613      	mov	r3, r2
 8000f96:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f043 0320 	orr.w	r3, r3, #32
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <NRF24_Write_Buf+0x5c>)
 8000fa8:	f002 fd53 	bl	8003a52 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000fac:	1df9      	adds	r1, r7, #7
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <NRF24_Write_Buf+0x60>)
 8000fb6:	f003 fe8d 	bl	8004cd4 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f7ff ff0c 	bl	8000dd8 <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc8:	6839      	ldr	r1, [r7, #0]
 8000fca:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <NRF24_Write_Buf+0x60>)
 8000fcc:	f003 fe82 	bl	8004cd4 <HAL_SPI_Transmit>
  CS_OFF;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2110      	movs	r1, #16
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <NRF24_Write_Buf+0x5c>)
 8000fd6:	f002 fd3c 	bl	8003a52 <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	200006c4 	.word	0x200006c4

08000fec <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000ff2:	23e2      	movs	r3, #226	; 0xe2
 8000ff4:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	480b      	ldr	r0, [pc, #44]	; (8001028 <NRF24_FlushRX+0x3c>)
 8000ffc:	f002 fd29 	bl	8003a52 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001000:	1d39      	adds	r1, r7, #4
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	2201      	movs	r2, #1
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <NRF24_FlushRX+0x40>)
 800100a:	f003 fe63 	bl	8004cd4 <HAL_SPI_Transmit>
  DelayMicro(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff fee2 	bl	8000dd8 <DelayMicro>
  CS_OFF;
 8001014:	2201      	movs	r2, #1
 8001016:	2110      	movs	r1, #16
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <NRF24_FlushRX+0x3c>)
 800101a:	f002 fd1a 	bl	8003a52 <HAL_GPIO_WritePin>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40010800 	.word	0x40010800
 800102c:	200006c4 	.word	0x200006c4

08001030 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 8001036:	23e1      	movs	r3, #225	; 0xe1
 8001038:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800103a:	2200      	movs	r2, #0
 800103c:	2110      	movs	r1, #16
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <NRF24_FlushTX+0x3c>)
 8001040:	f002 fd07 	bl	8003a52 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001044:	1d39      	adds	r1, r7, #4
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	2201      	movs	r2, #1
 800104c:	4808      	ldr	r0, [pc, #32]	; (8001070 <NRF24_FlushTX+0x40>)
 800104e:	f003 fe41 	bl	8004cd4 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fec0 	bl	8000dd8 <DelayMicro>
  CS_OFF;
 8001058:	2201      	movs	r2, #1
 800105a:	2110      	movs	r1, #16
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <NRF24_FlushTX+0x3c>)
 800105e:	f002 fcf8 	bl	8003a52 <HAL_GPIO_WritePin>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40010800 	.word	0x40010800
 8001070:	200006c4 	.word	0x200006c4

08001074 <read_config_registers>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
bool read_config_registers(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001078:	2064      	movs	r0, #100	; 0x64
 800107a:	f002 f96d 	bl	8003358 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fecc 	bl	8000e1c <NRF24_ReadReg>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <read_config_registers+0x78>)
 800108a:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff fec5 	bl	8000e1c <NRF24_ReadReg>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <read_config_registers+0x78>)
 8001098:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 800109a:	2002      	movs	r0, #2
 800109c:	f7ff febe 	bl	8000e1c <NRF24_ReadReg>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <read_config_registers+0x78>)
 80010a6:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 80010a8:	2007      	movs	r0, #7
 80010aa:	f7ff feb7 	bl	8000e1c <NRF24_ReadReg>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <read_config_registers+0x78>)
 80010b4:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 80010b6:	2006      	movs	r0, #6
 80010b8:	f7ff feb0 	bl	8000e1c <NRF24_ReadReg>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <read_config_registers+0x78>)
 80010c2:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 80010c4:	2203      	movs	r2, #3
 80010c6:	490a      	ldr	r1, [pc, #40]	; (80010f0 <read_config_registers+0x7c>)
 80010c8:	2010      	movs	r0, #16
 80010ca:	f7ff ff33 	bl	8000f34 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 80010ce:	2203      	movs	r2, #3
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <read_config_registers+0x7c>)
 80010d2:	200a      	movs	r0, #10
 80010d4:	f7ff ff2e 	bl	8000f34 <NRF24_Read_Buf>

	if(config_array[0] == 0)		// Data from nrf module was read
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <read_config_registers+0x78>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <read_config_registers+0x70>
	{
		return false;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e000      	b.n	80010e6 <read_config_registers+0x72>
	}
	else
	{
		return true;
 80010e4:	2301      	movs	r3, #1
	}
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000114 	.word	0x20000114
 80010f0:	20000124 	.word	0x20000124

080010f4 <reset_nrf24l01>:
//----------------------------------------------------------------------------------------
void reset_nrf24l01(void)   // reconfigure module
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
	CE_RESET;
 80010fa:	2200      	movs	r2, #0
 80010fc:	2108      	movs	r1, #8
 80010fe:	4829      	ldr	r0, [pc, #164]	; (80011a4 <reset_nrf24l01+0xb0>)
 8001100:	f002 fca7 	bl	8003a52 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8001104:	f241 3088 	movw	r0, #5000	; 0x1388
 8001108:	f7ff fe66 	bl	8000dd8 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800110c:	210a      	movs	r1, #10
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff feb8 	bl	8000e84 <NRF24_WriteReg>

	DelayMicro(5000);
 8001114:	f241 3088 	movw	r0, #5000	; 0x1388
 8001118:	f7ff fe5e 	bl	8000dd8 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 800111c:	2101      	movs	r1, #1
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff feb0 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8001124:	2101      	movs	r1, #1
 8001126:	2002      	movs	r0, #2
 8001128:	f7ff feac 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800112c:	2101      	movs	r1, #1
 800112e:	2003      	movs	r0, #3
 8001130:	f7ff fea8 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8001134:	215f      	movs	r1, #95	; 0x5f
 8001136:	2004      	movs	r0, #4
 8001138:	f7ff fea4 	bl	8000e84 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 800113c:	f7ff fed0 	bl	8000ee0 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 8001140:	2100      	movs	r1, #0
 8001142:	201d      	movs	r0, #29
 8001144:	f7ff fe9e 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8001148:	2100      	movs	r1, #0
 800114a:	201c      	movs	r0, #28
 800114c:	f7ff fe9a 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x00); 		// Reset flags for IRQ   // WAS NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 8001150:	2100      	movs	r1, #0
 8001152:	2007      	movs	r0, #7
 8001154:	f7ff fe96 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8001158:	214c      	movs	r1, #76	; 0x4c
 800115a:	2005      	movs	r0, #5
 800115c:	f7ff fe92 	bl	8000e84 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 8001160:	2126      	movs	r1, #38	; 0x26
 8001162:	2006      	movs	r0, #6
 8001164:	f7ff fe8e 	bl	8000e84 <NRF24_WriteReg>

	uint8_t TX_ADDRESS_RESET[TX_ADR_WIDTH] = {0x00,0x00,0x00};   // Address for pipe 0
 8001168:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <reset_nrf24l01+0xb4>)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	4611      	mov	r1, r2
 8001170:	8019      	strh	r1, [r3, #0]
 8001172:	3302      	adds	r3, #2
 8001174:	0c12      	lsrs	r2, r2, #16
 8001176:	701a      	strb	r2, [r3, #0]
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_RESET, TX_ADR_WIDTH);			// Write TX address
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2203      	movs	r2, #3
 800117c:	4619      	mov	r1, r3
 800117e:	2010      	movs	r0, #16
 8001180:	f7ff ff02 	bl	8000f88 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_RESET, TX_ADR_WIDTH);		// Set up pipe 0 address
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2203      	movs	r2, #3
 8001188:	4619      	mov	r1, r3
 800118a:	200a      	movs	r0, #10
 800118c:	f7ff fefc 	bl	8000f88 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 8001190:	210a      	movs	r1, #10
 8001192:	2011      	movs	r0, #17
 8001194:	f7ff fe76 	bl	8000e84 <NRF24_WriteReg>

	NRF24L01_RX_Mode_for_TX_mode();
 8001198:	f7ff fbd6 	bl	8000948 <NRF24L01_RX_Mode_for_TX_mode>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40010800 	.word	0x40010800
 80011a8:	080072b4 	.word	0x080072b4

080011ac <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f000 f889 	bl	80012c8 <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 80011b6:	f000 f8a9 	bl	800130c <ssd1306_UpdateScreen>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80011ca:	230a      	movs	r3, #10
 80011cc:	9302      	str	r3, [sp, #8]
 80011ce:	2301      	movs	r3, #1
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2301      	movs	r3, #1
 80011d8:	2200      	movs	r2, #0
 80011da:	2178      	movs	r1, #120	; 0x78
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <ssd1306_WriteCommand+0x2c>)
 80011de:	f002 fdc5 	bl	8003d6c <HAL_I2C_Mem_Write>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200005e4 	.word	0x200005e4

080011f0 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80011f4:	2064      	movs	r0, #100	; 0x64
 80011f6:	f002 f8af 	bl	8003358 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80011fa:	20ae      	movs	r0, #174	; 0xae
 80011fc:	f7ff ffe0 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001200:	2020      	movs	r0, #32
 8001202:	f7ff ffdd 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001206:	2010      	movs	r0, #16
 8001208:	f7ff ffda 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800120c:	20b0      	movs	r0, #176	; 0xb0
 800120e:	f7ff ffd7 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001212:	20c8      	movs	r0, #200	; 0xc8
 8001214:	f7ff ffd4 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff ffd1 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800121e:	2010      	movs	r0, #16
 8001220:	f7ff ffce 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001224:	2040      	movs	r0, #64	; 0x40
 8001226:	f7ff ffcb 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800122a:	2081      	movs	r0, #129	; 0x81
 800122c:	f7ff ffc8 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001230:	20ff      	movs	r0, #255	; 0xff
 8001232:	f7ff ffc5 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001236:	20a1      	movs	r0, #161	; 0xa1
 8001238:	f7ff ffc2 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800123c:	20a6      	movs	r0, #166	; 0xa6
 800123e:	f7ff ffbf 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001242:	20a8      	movs	r0, #168	; 0xa8
 8001244:	f7ff ffbc 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001248:	203f      	movs	r0, #63	; 0x3f
 800124a:	f7ff ffb9 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800124e:	20a4      	movs	r0, #164	; 0xa4
 8001250:	f7ff ffb6 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001254:	20d3      	movs	r0, #211	; 0xd3
 8001256:	f7ff ffb3 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff ffb0 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001260:	20d5      	movs	r0, #213	; 0xd5
 8001262:	f7ff ffad 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001266:	20f0      	movs	r0, #240	; 0xf0
 8001268:	f7ff ffaa 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800126c:	20d9      	movs	r0, #217	; 0xd9
 800126e:	f7ff ffa7 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001272:	2022      	movs	r0, #34	; 0x22
 8001274:	f7ff ffa4 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001278:	20da      	movs	r0, #218	; 0xda
 800127a:	f7ff ffa1 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800127e:	2012      	movs	r0, #18
 8001280:	f7ff ff9e 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001284:	20db      	movs	r0, #219	; 0xdb
 8001286:	f7ff ff9b 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800128a:	2020      	movs	r0, #32
 800128c:	f7ff ff98 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001290:	208d      	movs	r0, #141	; 0x8d
 8001292:	f7ff ff95 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001296:	2014      	movs	r0, #20
 8001298:	f7ff ff92 	bl	80011c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800129c:	20af      	movs	r0, #175	; 0xaf
 800129e:	f7ff ff8f 	bl	80011c0 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 f810 	bl	80012c8 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80012a8:	f000 f830 	bl	800130c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <ssd1306_Init+0xd4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <ssd1306_Init+0xd4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <ssd1306_Init+0xd4>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	715a      	strb	r2, [r3, #5]

	return 1;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000054c 	.word	0x2000054c

080012c8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	e00d      	b.n	80012f4 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <ssd1306_Fill+0x1a>
 80012de:	2100      	movs	r1, #0
 80012e0:	e000      	b.n	80012e4 <ssd1306_Fill+0x1c>
 80012e2:	21ff      	movs	r1, #255	; 0xff
 80012e4:	4a08      	ldr	r2, [pc, #32]	; (8001308 <ssd1306_Fill+0x40>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	460a      	mov	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3301      	adds	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fa:	d3ed      	bcc.n	80012d8 <ssd1306_Fill+0x10>
	}
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	2000014c 	.word	0x2000014c

0800130c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8001312:	2300      	movs	r3, #0
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	e01d      	b.n	8001354 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	3b50      	subs	r3, #80	; 0x50
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff4e 	bl	80011c0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff ff4b 	bl	80011c0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800132a:	2010      	movs	r0, #16
 800132c:	f7ff ff48 	bl	80011c0 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	01db      	lsls	r3, r3, #7
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <ssd1306_UpdateScreen+0x58>)
 8001336:	4413      	add	r3, r2
 8001338:	2264      	movs	r2, #100	; 0x64
 800133a:	9202      	str	r2, [sp, #8]
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	9201      	str	r2, [sp, #4]
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	2240      	movs	r2, #64	; 0x40
 8001346:	2178      	movs	r1, #120	; 0x78
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <ssd1306_UpdateScreen+0x5c>)
 800134a:	f002 fd0f 	bl	8003d6c <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	3301      	adds	r3, #1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b07      	cmp	r3, #7
 8001358:	d9de      	bls.n	8001318 <ssd1306_UpdateScreen+0xc>
	}
}
 800135a:	bf00      	nop
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2000014c 	.word	0x2000014c
 8001368:	200005e4 	.word	0x200005e4

0800136c <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	460b      	mov	r3, r1
 8001378:	71bb      	strb	r3, [r7, #6]
 800137a:	4613      	mov	r3, r2
 800137c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db48      	blt.n	8001418 <ssd1306_DrawPixel+0xac>
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	2b3f      	cmp	r3, #63	; 0x3f
 800138a:	d845      	bhi.n	8001418 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <ssd1306_DrawPixel+0xb8>)
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2b00      	cmp	r3, #0
 8001398:	bf0c      	ite	eq
 800139a:	2301      	moveq	r3, #1
 800139c:	2300      	movne	r3, #0
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 80013a2:	797b      	ldrb	r3, [r7, #5]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d11a      	bne.n	80013de <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013a8:	79fa      	ldrb	r2, [r7, #7]
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	b2d8      	uxtb	r0, r3
 80013b0:	4603      	mov	r3, r0
 80013b2:	01db      	lsls	r3, r3, #7
 80013b4:	4413      	add	r3, r2
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <ssd1306_DrawPixel+0xbc>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	2101      	movs	r1, #1
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b259      	sxtb	r1, r3
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	4603      	mov	r3, r0
 80013d2:	01db      	lsls	r3, r3, #7
 80013d4:	4413      	add	r3, r2
 80013d6:	b2c9      	uxtb	r1, r1
 80013d8:	4a13      	ldr	r2, [pc, #76]	; (8001428 <ssd1306_DrawPixel+0xbc>)
 80013da:	54d1      	strb	r1, [r2, r3]
 80013dc:	e01d      	b.n	800141a <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	79bb      	ldrb	r3, [r7, #6]
 80013e2:	08db      	lsrs	r3, r3, #3
 80013e4:	b2d8      	uxtb	r0, r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	01db      	lsls	r3, r3, #7
 80013ea:	4413      	add	r3, r2
 80013ec:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <ssd1306_DrawPixel+0xbc>)
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	2101      	movs	r1, #1
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	b25b      	sxtb	r3, r3
 8001404:	4013      	ands	r3, r2
 8001406:	b259      	sxtb	r1, r3
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	4603      	mov	r3, r0
 800140c:	01db      	lsls	r3, r3, #7
 800140e:	4413      	add	r3, r2
 8001410:	b2c9      	uxtb	r1, r1
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <ssd1306_DrawPixel+0xbc>)
 8001414:	54d1      	strb	r1, [r2, r3]
 8001416:	e000      	b.n	800141a <ssd1306_DrawPixel+0xae>
		return;
 8001418:	bf00      	nop
	}
}
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	2000054c 	.word	0x2000054c
 8001428:	2000014c 	.word	0x2000014c

0800142c <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	4604      	mov	r4, r0
 8001434:	1d38      	adds	r0, r7, #4
 8001436:	e880 0006 	stmia.w	r0, {r1, r2}
 800143a:	461a      	mov	r2, r3
 800143c:	4623      	mov	r3, r4
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	4613      	mov	r3, r2
 8001442:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001444:	4b38      	ldr	r3, [pc, #224]	; (8001528 <ssd1306_WriteChar+0xfc>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	793b      	ldrb	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	2b7f      	cmp	r3, #127	; 0x7f
 8001450:	dc06      	bgt.n	8001460 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <ssd1306_WriteChar+0xfc>)
 8001454:	885b      	ldrh	r3, [r3, #2]
 8001456:	461a      	mov	r2, r3
 8001458:	797b      	ldrb	r3, [r7, #5]
 800145a:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800145c:	2b3f      	cmp	r3, #63	; 0x3f
 800145e:	dd01      	ble.n	8001464 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8001460:	2300      	movs	r3, #0
 8001462:	e05d      	b.n	8001520 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	e04c      	b.n	8001504 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	3b20      	subs	r3, #32
 8001470:	7979      	ldrb	r1, [r7, #5]
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	4619      	mov	r1, r3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	440b      	add	r3, r1
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	e034      	b.n	80014f4 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d012      	beq.n	80014c0 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <ssd1306_WriteChar+0xfc>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	b2d8      	uxtb	r0, r3
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <ssd1306_WriteChar+0xfc>)
 80014aa:	885b      	ldrh	r3, [r3, #2]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	7bba      	ldrb	r2, [r7, #14]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff ff57 	bl	800136c <ssd1306_DrawPixel>
 80014be:	e016      	b.n	80014ee <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <ssd1306_WriteChar+0xfc>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b2d8      	uxtb	r0, r3
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <ssd1306_WriteChar+0xfc>)
 80014d0:	885b      	ldrh	r3, [r3, #2]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4413      	add	r3, r2
 80014da:	b2d9      	uxtb	r1, r3
 80014dc:	7bbb      	ldrb	r3, [r7, #14]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	f7ff ff3f 	bl	800136c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	793b      	ldrb	r3, [r7, #4]
 80014f6:	461a      	mov	r2, r3
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d3c5      	bcc.n	800148a <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	797b      	ldrb	r3, [r7, #5]
 8001506:	461a      	mov	r2, r3
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4293      	cmp	r3, r2
 800150c:	d3ad      	bcc.n	800146a <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <ssd1306_WriteChar+0xfc>)
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	793b      	ldrb	r3, [r7, #4]
 8001514:	b29b      	uxth	r3, r3
 8001516:	4413      	add	r3, r2
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b03      	ldr	r3, [pc, #12]	; (8001528 <ssd1306_WriteChar+0xfc>)
 800151c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3724      	adds	r7, #36	; 0x24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd90      	pop	{r4, r7, pc}
 8001528:	2000054c 	.word	0x2000054c

0800152c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	1d38      	adds	r0, r7, #4
 8001536:	e880 0006 	stmia.w	r0, {r1, r2}
 800153a:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 800153c:	e012      	b.n	8001564 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	7818      	ldrb	r0, [r3, #0]
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	1d3a      	adds	r2, r7, #4
 8001546:	ca06      	ldmia	r2, {r1, r2}
 8001548:	f7ff ff70 	bl	800142c <ssd1306_WriteChar>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d002      	beq.n	800155e <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	e008      	b.n	8001570 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3301      	adds	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1e8      	bne.n	800153e <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	781b      	ldrb	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	460a      	mov	r2, r1
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	4613      	mov	r3, r2
 8001586:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <ssd1306_SetCursor+0x2c>)
 800158e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <ssd1306_SetCursor+0x2c>)
 8001596:	805a      	strh	r2, [r3, #2]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	2000054c 	.word	0x2000054c

080015a8 <ssd1306_Line>:

void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4604      	mov	r4, r0
 80015b0:	4608      	mov	r0, r1
 80015b2:	4611      	mov	r1, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	4623      	mov	r3, r4
 80015b8:	71fb      	strb	r3, [r7, #7]
 80015ba:	4603      	mov	r3, r0
 80015bc:	71bb      	strb	r3, [r7, #6]
 80015be:	460b      	mov	r3, r1
 80015c0:	717b      	strb	r3, [r7, #5]
 80015c2:	4613      	mov	r3, r2
 80015c4:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 80015c6:	797a      	ldrb	r2, [r7, #5]
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bfb8      	it	lt
 80015d0:	425b      	neglt	r3, r3
 80015d2:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 80015d4:	793a      	ldrb	r2, [r7, #4]
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bfb8      	it	lt
 80015de:	425b      	neglt	r3, r3
 80015e0:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	797b      	ldrb	r3, [r7, #5]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d201      	bcs.n	80015ee <ssd1306_Line+0x46>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e001      	b.n	80015f2 <ssd1306_Line+0x4a>
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015f2:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80015f4:	79ba      	ldrb	r2, [r7, #6]
 80015f6:	793b      	ldrb	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d201      	bcs.n	8001600 <ssd1306_Line+0x58>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e001      	b.n	8001604 <ssd1306_Line+0x5c>
 8001600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001604:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 800160e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001612:	7939      	ldrb	r1, [r7, #4]
 8001614:	797b      	ldrb	r3, [r7, #5]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fea8 	bl	800136c <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 800161c:	e024      	b.n	8001668 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 800161e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001622:	79b9      	ldrb	r1, [r7, #6]
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fea0 	bl	800136c <ssd1306_DrawPixel>
    error2 = error * 2;
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	425b      	negs	r3, r3
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	429a      	cmp	r2, r3
 800163a:	dd08      	ble.n	800164e <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	4413      	add	r3, r2
 800164c:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	429a      	cmp	r2, r3
 8001654:	da08      	bge.n	8001668 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	4413      	add	r3, r2
 800165c:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	79bb      	ldrb	r3, [r7, #6]
 8001664:	4413      	add	r3, r2
 8001666:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8001668:	79fa      	ldrb	r2, [r7, #7]
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	429a      	cmp	r2, r3
 800166e:	d1d6      	bne.n	800161e <ssd1306_Line+0x76>
 8001670:	79ba      	ldrb	r2, [r7, #6]
 8001672:	793b      	ldrb	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	d1d2      	bne.n	800161e <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8001678:	bf00      	nop
}
 800167a:	3724      	adds	r7, #36	; 0x24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd90      	pop	{r4, r7, pc}

08001680 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b085      	sub	sp, #20
 8001684:	af02      	add	r7, sp, #8
 8001686:	4604      	mov	r4, r0
 8001688:	4608      	mov	r0, r1
 800168a:	4611      	mov	r1, r2
 800168c:	461a      	mov	r2, r3
 800168e:	4623      	mov	r3, r4
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	4603      	mov	r3, r0
 8001694:	71bb      	strb	r3, [r7, #6]
 8001696:	460b      	mov	r3, r1
 8001698:	717b      	strb	r3, [r7, #5]
 800169a:	4613      	mov	r3, r2
 800169c:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 800169e:	79bc      	ldrb	r4, [r7, #6]
 80016a0:	797a      	ldrb	r2, [r7, #5]
 80016a2:	79b9      	ldrb	r1, [r7, #6]
 80016a4:	79f8      	ldrb	r0, [r7, #7]
 80016a6:	7e3b      	ldrb	r3, [r7, #24]
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	4623      	mov	r3, r4
 80016ac:	f7ff ff7c 	bl	80015a8 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 80016b0:	793c      	ldrb	r4, [r7, #4]
 80016b2:	797a      	ldrb	r2, [r7, #5]
 80016b4:	79b9      	ldrb	r1, [r7, #6]
 80016b6:	7978      	ldrb	r0, [r7, #5]
 80016b8:	7e3b      	ldrb	r3, [r7, #24]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	4623      	mov	r3, r4
 80016be:	f7ff ff73 	bl	80015a8 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 80016c2:	793c      	ldrb	r4, [r7, #4]
 80016c4:	79fa      	ldrb	r2, [r7, #7]
 80016c6:	7939      	ldrb	r1, [r7, #4]
 80016c8:	7978      	ldrb	r0, [r7, #5]
 80016ca:	7e3b      	ldrb	r3, [r7, #24]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	4623      	mov	r3, r4
 80016d0:	f7ff ff6a 	bl	80015a8 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 80016d4:	79bc      	ldrb	r4, [r7, #6]
 80016d6:	79fa      	ldrb	r2, [r7, #7]
 80016d8:	7939      	ldrb	r1, [r7, #4]
 80016da:	79f8      	ldrb	r0, [r7, #7]
 80016dc:	7e3b      	ldrb	r3, [r7, #24]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4623      	mov	r3, r4
 80016e2:	f7ff ff61 	bl	80015a8 <ssd1306_Line>

  return;
 80016e6:	bf00      	nop
}
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}

080016ee <ssd1306FillRect>:
void ssd1306FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
 80016ee:	b590      	push	{r4, r7, lr}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4604      	mov	r4, r0
 80016f6:	4608      	mov	r0, r1
 80016f8:	4611      	mov	r1, r2
 80016fa:	461a      	mov	r2, r3
 80016fc:	4623      	mov	r3, r4
 80016fe:	71fb      	strb	r3, [r7, #7]
 8001700:	4603      	mov	r3, r0
 8001702:	71bb      	strb	r3, [r7, #6]
 8001704:	460b      	mov	r3, r1
 8001706:	717b      	strb	r3, [r7, #5]
 8001708:	4613      	mov	r3, r2
 800170a:	713b      	strb	r3, [r7, #4]
    uint8_t x0, x1, y1;

    x0 = x;
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	73fb      	strb	r3, [r7, #15]
    x1 = x + w;
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	797b      	ldrb	r3, [r7, #5]
 8001714:	4413      	add	r3, r2
 8001716:	73bb      	strb	r3, [r7, #14]
    y1 = y + h;
 8001718:	79ba      	ldrb	r2, [r7, #6]
 800171a:	793b      	ldrb	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	737b      	strb	r3, [r7, #13]
    for(; y < y1; y++)
 8001720:	e013      	b.n	800174a <ssd1306FillRect+0x5c>
        for(x = x0; x < x1; x++)
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	e009      	b.n	800173c <ssd1306FillRect+0x4e>
        	ssd1306_DrawPixel(x, y, color);
 8001728:	8c3b      	ldrh	r3, [r7, #32]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	79b9      	ldrb	r1, [r7, #6]
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe1b 	bl	800136c <ssd1306_DrawPixel>
        for(x = x0; x < x1; x++)
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	3301      	adds	r3, #1
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	79fa      	ldrb	r2, [r7, #7]
 800173e:	7bbb      	ldrb	r3, [r7, #14]
 8001740:	429a      	cmp	r2, r3
 8001742:	d3f1      	bcc.n	8001728 <ssd1306FillRect+0x3a>
    for(; y < y1; y++)
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	3301      	adds	r3, #1
 8001748:	71bb      	strb	r3, [r7, #6]
 800174a:	79ba      	ldrb	r2, [r7, #6]
 800174c:	7b7b      	ldrb	r3, [r7, #13]
 800174e:	429a      	cmp	r2, r3
 8001750:	d3e7      	bcc.n	8001722 <ssd1306FillRect+0x34>
            //ssd1306DrawPixel( x, y, color, layer);
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bd90      	pop	{r4, r7, pc}

0800175c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001760:	f001 fd98 	bl	8003294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001764:	f000 f826 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001768:	f000 f972 	bl	8001a50 <MX_GPIO_Init>
  MX_I2C1_Init();
 800176c:	f000 f868 	bl	8001840 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001770:	f000 f894 	bl	800189c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001774:	f000 f918 	bl	80019a8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001778:	f000 f8c6 	bl	8001908 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800177c:	f000 f93e 	bl	80019fc <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001786:	480a      	ldr	r0, [pc, #40]	; (80017b0 <main+0x54>)
 8001788:	f002 f963 	bl	8003a52 <HAL_GPIO_WritePin>

  // Init interrupt (For LoRa)
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2025      	movs	r0, #37	; 0x25
 8001792:	f001 fedc 	bl	800354e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001796:	2025      	movs	r0, #37	; 0x25
 8001798:	f001 fef5 	bl	8003586 <HAL_NVIC_EnableIRQ>

  // OLED init
  ssd1306_Init();
 800179c:	f7ff fd28 	bl	80011f0 <ssd1306_Init>
  ssd1306_Fill(Black);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fd91 	bl	80012c8 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80017a6:	f7ff fdb1 	bl	800130c <ssd1306_UpdateScreen>

  while (1)
  {
	menu();
 80017aa:	f000 fee3 	bl	8002574 <menu>
 80017ae:	e7fc      	b.n	80017aa <main+0x4e>
 80017b0:	40011000 	.word	0x40011000

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b090      	sub	sp, #64	; 0x40
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 0318 	add.w	r3, r7, #24
 80017be:	2228      	movs	r2, #40	; 0x28
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 f892 	bl	80068ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e4:	2301      	movs	r3, #1
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e8:	2302      	movs	r3, #2
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80017f2:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 fdcb 	bl	8004398 <HAL_RCC_OscConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001808:	f000 fa4a 	bl	8001ca0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180c:	230f      	movs	r3, #15
 800180e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001810:	2302      	movs	r3, #2
 8001812:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2102      	movs	r1, #2
 8001826:	4618      	mov	r0, r3
 8001828:	f003 f836 	bl	8004898 <HAL_RCC_ClockConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001832:	f000 fa35 	bl	8001ca0 <Error_Handler>
  }
}
 8001836:	bf00      	nop
 8001838:	3740      	adds	r7, #64	; 0x40
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_I2C1_Init+0x50>)
 8001846:	4a13      	ldr	r2, [pc, #76]	; (8001894 <MX_I2C1_Init+0x54>)
 8001848:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_I2C1_Init+0x50>)
 800184c:	4a12      	ldr	r2, [pc, #72]	; (8001898 <MX_I2C1_Init+0x58>)
 800184e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_I2C1_Init+0x50>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_I2C1_Init+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_I2C1_Init+0x50>)
 800185e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001862:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <MX_I2C1_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_I2C1_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <MX_I2C1_Init+0x50>)
 800187e:	f002 f931 	bl	8003ae4 <HAL_I2C_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001888:	f000 fa0a 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200005e4 	.word	0x200005e4
 8001894:	40005400 	.word	0x40005400
 8001898:	00061a80 	.word	0x00061a80

0800189c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <MX_SPI1_Init+0x64>)
 80018a2:	4a18      	ldr	r2, [pc, #96]	; (8001904 <MX_SPI1_Init+0x68>)
 80018a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <MX_SPI1_Init+0x64>)
 80018a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <MX_SPI1_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_SPI1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_SPI1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_SPI1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_SPI1_Init+0x64>)
 80018c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_SPI1_Init+0x64>)
 80018d0:	2220      	movs	r2, #32
 80018d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_SPI1_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <MX_SPI1_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_SPI1_Init+0x64>)
 80018e8:	220a      	movs	r2, #10
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_SPI1_Init+0x64>)
 80018ee:	f003 f96d 	bl	8004bcc <HAL_SPI_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018f8:	f000 f9d2 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200006c4 	.word	0x200006c4
 8001904:	40013000 	.word	0x40013000

08001908 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	463b      	mov	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <MX_TIM1_Init+0x98>)
 8001926:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <MX_TIM1_Init+0x9c>)
 8001928:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <MX_TIM1_Init+0x98>)
 800192c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001930:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <MX_TIM1_Init+0x98>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <MX_TIM1_Init+0x98>)
 800193a:	2264      	movs	r2, #100	; 0x64
 800193c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_TIM1_Init+0x98>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <MX_TIM1_Init+0x98>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <MX_TIM1_Init+0x98>)
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001950:	4813      	ldr	r0, [pc, #76]	; (80019a0 <MX_TIM1_Init+0x98>)
 8001952:	f003 fea7 	bl	80056a4 <HAL_TIM_Base_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800195c:	f000 f9a0 	bl	8001ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001964:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	4619      	mov	r1, r3
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <MX_TIM1_Init+0x98>)
 800196e:	f004 f871 	bl	8005a54 <HAL_TIM_ConfigClockSource>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001978:	f000 f992 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800197c:	2310      	movs	r3, #16
 800197e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001984:	463b      	mov	r3, r7
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_TIM1_Init+0x98>)
 800198a:	f004 fa4d 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001994:	f000 f984 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000067c 	.word	0x2000067c
 80019a4:	40012c00 	.word	0x40012c00

080019a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_USART1_UART_Init+0x4c>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <MX_USART1_UART_Init+0x50>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <MX_USART1_UART_Init+0x4c>)
 80019b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_USART1_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_USART1_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <MX_USART1_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_USART1_UART_Init+0x4c>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <MX_USART1_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_USART1_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_USART1_UART_Init+0x4c>)
 80019e0:	f004 fa92 	bl	8005f08 <HAL_UART_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019ea:	f000 f959 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000638 	.word	0x20000638
 80019f8:	40013800 	.word	0x40013800

080019fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <MX_USART3_UART_Init+0x50>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_USART3_UART_Init+0x4c>)
 8001a34:	f004 fa68 	bl	8005f08 <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a3e:	f000 f92f 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200005a0 	.word	0x200005a0
 8001a4c:	40004800 	.word	0x40004800

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a64:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <MX_GPIO_Init+0x194>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a5e      	ldr	r2, [pc, #376]	; (8001be4 <MX_GPIO_Init+0x194>)
 8001a6a:	f043 0310 	orr.w	r3, r3, #16
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b5c      	ldr	r3, [pc, #368]	; (8001be4 <MX_GPIO_Init+0x194>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <MX_GPIO_Init+0x194>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <MX_GPIO_Init+0x194>)
 8001a82:	f043 0320 	orr.w	r3, r3, #32
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <MX_GPIO_Init+0x194>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0320 	and.w	r3, r3, #32
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <MX_GPIO_Init+0x194>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a52      	ldr	r2, [pc, #328]	; (8001be4 <MX_GPIO_Init+0x194>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <MX_GPIO_Init+0x194>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <MX_GPIO_Init+0x194>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a4c      	ldr	r2, [pc, #304]	; (8001be4 <MX_GPIO_Init+0x194>)
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b4a      	ldr	r3, [pc, #296]	; (8001be4 <MX_GPIO_Init+0x194>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aca:	4847      	ldr	r0, [pc, #284]	; (8001be8 <MX_GPIO_Init+0x198>)
 8001acc:	f001 ffc1 	bl	8003a52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2108      	movs	r1, #8
 8001ad4:	4845      	ldr	r0, [pc, #276]	; (8001bec <MX_GPIO_Init+0x19c>)
 8001ad6:	f001 ffbc 	bl	8003a52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2110      	movs	r1, #16
 8001ade:	4843      	ldr	r0, [pc, #268]	; (8001bec <MX_GPIO_Init+0x19c>)
 8001ae0:	f001 ffb7 	bl	8003a52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f242 0101 	movw	r1, #8193	; 0x2001
 8001aea:	4841      	ldr	r0, [pc, #260]	; (8001bf0 <MX_GPIO_Init+0x1a0>)
 8001aec:	f001 ffb1 	bl	8003a52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	4619      	mov	r1, r3
 8001b08:	4837      	ldr	r0, [pc, #220]	; (8001be8 <MX_GPIO_Init+0x198>)
 8001b0a:	f001 fe07 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <MX_GPIO_Init+0x1a4>)
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4832      	ldr	r0, [pc, #200]	; (8001bec <MX_GPIO_Init+0x19c>)
 8001b22:	f001 fdfb 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001b26:	2318      	movs	r3, #24
 8001b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	482b      	ldr	r0, [pc, #172]	; (8001bec <MX_GPIO_Init+0x19c>)
 8001b3e:	f001 fded 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8001b42:	f242 0301 	movw	r3, #8193	; 0x2001
 8001b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4825      	ldr	r0, [pc, #148]	; (8001bf0 <MX_GPIO_Init+0x1a0>)
 8001b5c:	f001 fdde 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8001b60:	2302      	movs	r3, #2
 8001b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4619      	mov	r1, r3
 8001b72:	481f      	ldr	r0, [pc, #124]	; (8001bf0 <MX_GPIO_Init+0x1a0>)
 8001b74:	f001 fdd2 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b78:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <MX_GPIO_Init+0x1a4>)
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <MX_GPIO_Init+0x1a0>)
 8001b8e:	f001 fdc5 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <MX_GPIO_Init+0x1a4>)
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4811      	ldr	r0, [pc, #68]	; (8001bec <MX_GPIO_Init+0x19c>)
 8001ba8:	f001 fdb8 	bl	800371c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2008      	movs	r0, #8
 8001bb2:	f001 fccc 	bl	800354e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001bb6:	2008      	movs	r0, #8
 8001bb8:	f001 fce5 	bl	8003586 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2017      	movs	r0, #23
 8001bc2:	f001 fcc4 	bl	800354e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bc6:	2017      	movs	r0, #23
 8001bc8:	f001 fcdd 	bl	8003586 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2028      	movs	r0, #40	; 0x28
 8001bd2:	f001 fcbc 	bl	800354e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bd6:	2028      	movs	r0, #40	; 0x28
 8001bd8:	f001 fcd5 	bl	8003586 <HAL_NVIC_EnableIRQ>

}
 8001bdc:	bf00      	nop
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40011000 	.word	0x40011000
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40010c00 	.word	0x40010c00
 8001bf4:	10210000 	.word	0x10210000

08001bf8 <HAL_GPIO_EXTI_Callback>:
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);

}
//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2   (IRQ from NRF module)
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d108      	bne.n	8001c1a <HAL_GPIO_EXTI_Callback+0x22>
  {
	  if(tx_or_rx_mode == rx_mode)
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_GPIO_EXTI_Callback+0x30>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d103      	bne.n	8001c1c <HAL_GPIO_EXTI_Callback+0x24>
	  {
		  IRQ_Callback();					// Call Callback
 8001c14:	f7fe fe5e 	bl	80008d4 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_EXTI_Callback+0x24>
    __NOP();
 8001c1a:	bf00      	nop
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000003 	.word	0x20000003
 8001c28:	20000106 	.word	0x20000106

08001c2c <HAL_UART_RxCpltCallback>:
//----------------------------------------------------------------------------------------
// Receive data from LoRa module
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_UART_RxCpltCallback+0x60>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d123      	bne.n	8001c84 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_UART_RxCpltCallback+0x64>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_UART_RxCpltCallback+0x20>
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_UART_RxCpltCallback+0x68>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b31      	cmp	r3, #49	; 0x31
 8001c4a:	d906      	bls.n	8001c5a <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_UART_RxCpltCallback+0x6c>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_UART_RxCpltCallback+0x68>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8001c58:	e014      	b.n	8001c84 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_UART_RxCpltCallback+0x6c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_UART_RxCpltCallback+0x68>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_UART_RxCpltCallback+0x64>)
 8001c68:	7819      	ldrb	r1, [r3, #0]
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_UART_RxCpltCallback+0x70>)
 8001c6c:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4907      	ldr	r1, [pc, #28]	; (8001c90 <HAL_UART_RxCpltCallback+0x64>)
 8001c72:	4806      	ldr	r0, [pc, #24]	; (8001c8c <HAL_UART_RxCpltCallback+0x60>)
 8001c74:	f004 f9d9 	bl	800602a <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_UART_RxCpltCallback+0x68>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <HAL_UART_RxCpltCallback+0x68>)
 8001c82:	701a      	strb	r2, [r3, #0]
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000638 	.word	0x20000638
 8001c90:	20000588 	.word	0x20000588
 8001c94:	2000058a 	.word	0x2000058a
 8001c98:	20000589 	.word	0x20000589
 8001c9c:	20000554 	.word	0x20000554

08001ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca4:	b672      	cpsid	i
}
 8001ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <Error_Handler+0x8>
	...

08001cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_MspInit+0x5c>)
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <HAL_MspInit+0x5c>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6193      	str	r3, [r2, #24]
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_MspInit+0x5c>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_MspInit+0x5c>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <HAL_MspInit+0x5c>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	61d3      	str	r3, [r2, #28]
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_MspInit+0x5c>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_MspInit+0x60>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_MspInit+0x60>)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010000 	.word	0x40010000

08001d10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_I2C_MspInit+0x70>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d123      	bne.n	8001d78 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_I2C_MspInit+0x74>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <HAL_I2C_MspInit+0x74>)
 8001d36:	f043 0308 	orr.w	r3, r3, #8
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_I2C_MspInit+0x74>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d48:	23c0      	movs	r3, #192	; 0xc0
 8001d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4c:	2312      	movs	r3, #18
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480b      	ldr	r0, [pc, #44]	; (8001d88 <HAL_I2C_MspInit+0x78>)
 8001d5c:	f001 fcde 	bl	800371c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_I2C_MspInit+0x74>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <HAL_I2C_MspInit+0x74>)
 8001d66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d6a:	61d3      	str	r3, [r2, #28]
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_I2C_MspInit+0x74>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40005400 	.word	0x40005400
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010c00 	.word	0x40010c00

08001d8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_SPI_MspInit+0x88>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d12f      	bne.n	8001e0c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001db2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ddc:	23a0      	movs	r3, #160	; 0xa0
 8001dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	4619      	mov	r1, r3
 8001dee:	480b      	ldr	r0, [pc, #44]	; (8001e1c <HAL_SPI_MspInit+0x90>)
 8001df0:	f001 fc94 	bl	800371c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001df4:	2340      	movs	r3, #64	; 0x40
 8001df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	4619      	mov	r1, r3
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <HAL_SPI_MspInit+0x90>)
 8001e08:	f001 fc88 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40013000 	.word	0x40013000
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010800 	.word	0x40010800

08001e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	; (8001e64 <HAL_TIM_Base_MspInit+0x44>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d113      	bne.n	8001e5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_TIM_Base_MspInit+0x48>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <HAL_TIM_Base_MspInit+0x48>)
 8001e38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e3c:	6193      	str	r3, [r2, #24]
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_TIM_Base_MspInit+0x48>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2019      	movs	r0, #25
 8001e50:	f001 fb7d 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e54:	2019      	movs	r0, #25
 8001e56:	f001 fb96 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40012c00 	.word	0x40012c00
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0318 	add.w	r3, r7, #24
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a3c      	ldr	r2, [pc, #240]	; (8001f78 <HAL_UART_MspInit+0x10c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d13a      	bne.n	8001f02 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_UART_MspInit+0x110>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4a3a      	ldr	r2, [pc, #232]	; (8001f7c <HAL_UART_MspInit+0x110>)
 8001e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e96:	6193      	str	r3, [r2, #24]
 8001e98:	4b38      	ldr	r3, [pc, #224]	; (8001f7c <HAL_UART_MspInit+0x110>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_UART_MspInit+0x110>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a34      	ldr	r2, [pc, #208]	; (8001f7c <HAL_UART_MspInit+0x110>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <HAL_UART_MspInit+0x110>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 0318 	add.w	r3, r7, #24
 8001ece:	4619      	mov	r1, r3
 8001ed0:	482b      	ldr	r0, [pc, #172]	; (8001f80 <HAL_UART_MspInit+0x114>)
 8001ed2:	f001 fc23 	bl	800371c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 0318 	add.w	r3, r7, #24
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4825      	ldr	r0, [pc, #148]	; (8001f80 <HAL_UART_MspInit+0x114>)
 8001eec:	f001 fc16 	bl	800371c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	2025      	movs	r0, #37	; 0x25
 8001ef6:	f001 fb2a 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001efa:	2025      	movs	r0, #37	; 0x25
 8001efc:	f001 fb43 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f00:	e036      	b.n	8001f70 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1f      	ldr	r2, [pc, #124]	; (8001f84 <HAL_UART_MspInit+0x118>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d131      	bne.n	8001f70 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_UART_MspInit+0x110>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	4a1a      	ldr	r2, [pc, #104]	; (8001f7c <HAL_UART_MspInit+0x110>)
 8001f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f16:	61d3      	str	r3, [r2, #28]
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_UART_MspInit+0x110>)
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f24:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_UART_MspInit+0x110>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <HAL_UART_MspInit+0x110>)
 8001f2a:	f043 0308 	orr.w	r3, r3, #8
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_UART_MspInit+0x110>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 0318 	add.w	r3, r7, #24
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <HAL_UART_MspInit+0x11c>)
 8001f52:	f001 fbe3 	bl	800371c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f107 0318 	add.w	r3, r7, #24
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4807      	ldr	r0, [pc, #28]	; (8001f88 <HAL_UART_MspInit+0x11c>)
 8001f6c:	f001 fbd6 	bl	800371c <HAL_GPIO_Init>
}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010800 	.word	0x40010800
 8001f84:	40004800 	.word	0x40004800
 8001f88:	40010c00 	.word	0x40010c00

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <NMI_Handler+0x4>

08001f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <MemManage_Handler+0x4>

08001f9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <BusFault_Handler+0x4>

08001fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <UsageFault_Handler+0x4>

08001faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd2:	f001 f9a5 	bl	8003320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001fde:	2004      	movs	r0, #4
 8001fe0:	f001 fd68 	bl	8003ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <EXTI9_5_IRQHandler+0x44>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	f083 0301 	eor.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d012      	beq.n	8002020 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <EXTI9_5_IRQHandler+0x48>)
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00c      	beq.n	8002020 <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <EXTI9_5_IRQHandler+0x4c>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <EXTI9_5_IRQHandler+0x50>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d105      	bne.n	8002020 <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <EXTI9_5_IRQHandler+0x54>)
 8002016:	f003 fb95 	bl	8005744 <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <EXTI9_5_IRQHandler+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002020:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002024:	f001 fd46 	bl	8003ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000594 	.word	0x20000594
 8002030:	40010400 	.word	0x40010400
 8002034:	2000001c 	.word	0x2000001c
 8002038:	20000020 	.word	0x20000020
 800203c:	2000067c 	.word	0x2000067c

08002040 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8002044:	4b37      	ldr	r3, [pc, #220]	; (8002124 <TIM1_UP_IRQHandler+0xe4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d165      	bne.n	8002118 <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 800204c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002050:	4835      	ldr	r0, [pc, #212]	; (8002128 <TIM1_UP_IRQHandler+0xe8>)
 8002052:	f001 fce7 	bl	8003a24 <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d118      	bne.n	800208e <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 800205c:	4b33      	ldr	r3, [pc, #204]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	4a32      	ldr	r2, [pc, #200]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 8002064:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8002066:	4b32      	ldr	r3, [pc, #200]	; (8002130 <TIM1_UP_IRQHandler+0xf0>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	4b2f      	ldr	r3, [pc, #188]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	dc51      	bgt.n	8002118 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <TIM1_UP_IRQHandler+0xe4>)
 8002076:	2201      	movs	r2, #1
 8002078:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800207a:	482e      	ldr	r0, [pc, #184]	; (8002134 <TIM1_UP_IRQHandler+0xf4>)
 800207c:	f003 fbb4 	bl	80057e8 <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <TIM1_UP_IRQHandler+0xf8>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8002086:	4b29      	ldr	r3, [pc, #164]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e044      	b.n	8002118 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	482a      	ldr	r0, [pc, #168]	; (800213c <TIM1_UP_IRQHandler+0xfc>)
 8002094:	f001 fcc6 	bl	8003a24 <HAL_GPIO_ReadPin>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d118      	bne.n	80020d0 <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 800209e:	4b23      	ldr	r3, [pc, #140]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3301      	adds	r3, #1
 80020a4:	4a21      	ldr	r2, [pc, #132]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 80020a6:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <TIM1_UP_IRQHandler+0xf0>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b1f      	ldr	r3, [pc, #124]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	dc30      	bgt.n	8002118 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <TIM1_UP_IRQHandler+0xe4>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80020bc:	481d      	ldr	r0, [pc, #116]	; (8002134 <TIM1_UP_IRQHandler+0xf4>)
 80020be:	f003 fb93 	bl	80057e8 <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <TIM1_UP_IRQHandler+0xf8>)
 80020c4:	2203      	movs	r2, #3
 80020c6:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e023      	b.n	8002118 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 80020d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d4:	4814      	ldr	r0, [pc, #80]	; (8002128 <TIM1_UP_IRQHandler+0xe8>)
 80020d6:	f001 fca5 	bl	8003a24 <HAL_GPIO_ReadPin>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d118      	bne.n	8002112 <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 80020e8:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <TIM1_UP_IRQHandler+0xf0>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	dc0f      	bgt.n	8002118 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <TIM1_UP_IRQHandler+0xe4>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <TIM1_UP_IRQHandler+0xf8>)
 8002100:	2202      	movs	r2, #2
 8002102:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800210a:	480a      	ldr	r0, [pc, #40]	; (8002134 <TIM1_UP_IRQHandler+0xf4>)
 800210c:	f003 fb6c 	bl	80057e8 <HAL_TIM_Base_Stop_IT>
 8002110:	e002      	b.n	8002118 <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <TIM1_UP_IRQHandler+0xec>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002118:	4806      	ldr	r0, [pc, #24]	; (8002134 <TIM1_UP_IRQHandler+0xf4>)
 800211a:	f003 fb93 	bl	8005844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000020 	.word	0x20000020
 8002128:	40010c00 	.word	0x40010c00
 800212c:	2000058c 	.word	0x2000058c
 8002130:	2000001d 	.word	0x2000001d
 8002134:	2000067c 	.word	0x2000067c
 8002138:	20000595 	.word	0x20000595
 800213c:	40010800 	.word	0x40010800

08002140 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <USART1_IRQHandler+0x10>)
 8002146:	f003 ffa1 	bl	800608c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000638 	.word	0x20000638

08002154 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <EXTI15_10_IRQHandler+0x74>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f083 0301 	eor.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d012      	beq.n	800218c <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <EXTI15_10_IRQHandler+0x78>)
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <EXTI15_10_IRQHandler+0x7c>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <EXTI15_10_IRQHandler+0x80>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d105      	bne.n	800218c <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8002180:	4815      	ldr	r0, [pc, #84]	; (80021d8 <EXTI15_10_IRQHandler+0x84>)
 8002182:	f003 fadf 	bl	8005744 <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <EXTI15_10_IRQHandler+0x80>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <EXTI15_10_IRQHandler+0x78>)
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00c      	beq.n	80021b2 <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <EXTI15_10_IRQHandler+0x7c>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <EXTI15_10_IRQHandler+0x80>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d105      	bne.n	80021b2 <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 80021a6:	480c      	ldr	r0, [pc, #48]	; (80021d8 <EXTI15_10_IRQHandler+0x84>)
 80021a8:	f003 facc 	bl	8005744 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <EXTI15_10_IRQHandler+0x80>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021b6:	f001 fc7d 	bl	8003ab4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80021ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021be:	f001 fc79 	bl	8003ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000594 	.word	0x20000594
 80021cc:	40010400 	.word	0x40010400
 80021d0:	2000001c 	.word	0x2000001c
 80021d4:	20000020 	.word	0x20000020
 80021d8:	2000067c 	.word	0x2000067c

080021dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <_sbrk+0x5c>)
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <_sbrk+0x60>)
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <_sbrk+0x64>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <_sbrk+0x68>)
 80021fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	429a      	cmp	r2, r3
 800220a:	d207      	bcs.n	800221c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800220c:	f004 fb1c 	bl	8006848 <__errno>
 8002210:	4603      	mov	r3, r0
 8002212:	220c      	movs	r2, #12
 8002214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800221a:	e009      	b.n	8002230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <_sbrk+0x64>)
 800222c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222e:	68fb      	ldr	r3, [r7, #12]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20005000 	.word	0x20005000
 800223c:	00000400 	.word	0x00000400
 8002240:	20000590 	.word	0x20000590
 8002244:	200008c0 	.word	0x200008c0

08002248 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <Menu_Init>:
void nrf_rx_mode(void);


// ----------------------------------------------------------------------------------------
void Menu_Init (void)
{
 8002254:	b480      	push	{r7}
 8002256:	b08b      	sub	sp, #44	; 0x2c
 8002258:	af00      	add	r7, sp, #0
	// Make pointers on funsctions
	// Main functions
	void (*p_print_rows_on_oled_if_up) (void);
	p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
 800225a:	4b8a      	ldr	r3, [pc, #552]	; (8002484 <Menu_Init+0x230>)
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
	void (*p_print_rows_on_oled_if_down) (void);					// Create pointer on function
	p_print_rows_on_oled_if_down = print_rows_on_oled_if_down;		// Save function print on pointer print_p
 800225e:	4b8a      	ldr	r3, [pc, #552]	; (8002488 <Menu_Init+0x234>)
 8002260:	623b      	str	r3, [r7, #32]
	void (*p_return_from_menu)(void);
	p_return_from_menu = return_from_menu;
 8002262:	4b8a      	ldr	r3, [pc, #552]	; (800248c <Menu_Init+0x238>)
 8002264:	61fb      	str	r3, [r7, #28]
	// ------------------------------------------------------

	// LoRa  menu functions
	void (*p_lora_rx_mode) (void);						// Function "Do it". Works when select it
	p_lora_rx_mode = lora_rx_mode;
 8002266:	4b8a      	ldr	r3, [pc, #552]	; (8002490 <Menu_Init+0x23c>)
 8002268:	61bb      	str	r3, [r7, #24]
	void (*p_lora_tx_mode) (void);						// Function "Do it". Works when select it
	p_lora_tx_mode = lora_tx_mode;
 800226a:	4b8a      	ldr	r3, [pc, #552]	; (8002494 <Menu_Init+0x240>)
 800226c:	617b      	str	r3, [r7, #20]

	// ------------------------------------------------------
	void (*p_nrf_tx_mode) (void);						// Function "Do it". Works when select it
	p_nrf_tx_mode = nrf_tx_mode;
 800226e:	4b8a      	ldr	r3, [pc, #552]	; (8002498 <Menu_Init+0x244>)
 8002270:	613b      	str	r3, [r7, #16]
	void (*p_nrf_rx_mode) (void);						// Function "Do it". Works when select it
	p_nrf_rx_mode = nrf_rx_mode;
 8002272:	4b8a      	ldr	r3, [pc, #552]	; (800249c <Menu_Init+0x248>)
 8002274:	60fb      	str	r3, [r7, #12]


	// ------------------------------------------------------
	void (*p_items_menu_1_set_par_2) (void);			// Doesen't use yet
	p_items_menu_1_set_par_2 = items_menu_1_set_par_2;
 8002276:	4b8a      	ldr	r3, [pc, #552]	; (80024a0 <Menu_Init+0x24c>)
 8002278:	60bb      	str	r3, [r7, #8]
	// items_menu_2 menu functions
//	void (*p_do_it_function_menu_2) (void);						// Function "Do it". Works when select it
//	p_do_it_function_menu_2 = do_it_function_menu_2;

	void (*p_items_menu_2_set_par_1) (void);
	p_items_menu_2_set_par_1 = items_menu_2_set_par_1;
 800227a:	4b8a      	ldr	r3, [pc, #552]	; (80024a4 <Menu_Init+0x250>)
 800227c:	607b      	str	r3, [r7, #4]

	// items_menu_3 menu functions
	void (*p_do_it_function_menu_3) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_3 = do_it_function_menu_3;
 800227e:	4b8a      	ldr	r3, [pc, #552]	; (80024a8 <Menu_Init+0x254>)
 8002280:	603b      	str	r3, [r7, #0]


	// Fill in elements(nodes) of list (7 items)
	// Main menu items
	/////////////////////////////////////////////////////////////////
	items[0].up = 0;
 8002282:	4b8a      	ldr	r3, [pc, #552]	; (80024ac <Menu_Init+0x258>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
	items[0].down = &items[1];
 8002288:	4b88      	ldr	r3, [pc, #544]	; (80024ac <Menu_Init+0x258>)
 800228a:	4a89      	ldr	r2, [pc, #548]	; (80024b0 <Menu_Init+0x25c>)
 800228c:	605a      	str	r2, [r3, #4]
	items[0].child = &items_menu_1[0];
 800228e:	4b87      	ldr	r3, [pc, #540]	; (80024ac <Menu_Init+0x258>)
 8002290:	4a88      	ldr	r2, [pc, #544]	; (80024b4 <Menu_Init+0x260>)
 8002292:	609a      	str	r2, [r3, #8]
	items[0].parent = 0;
 8002294:	4b85      	ldr	r3, [pc, #532]	; (80024ac <Menu_Init+0x258>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
	items[0].id = 1;
 800229a:	4b84      	ldr	r3, [pc, #528]	; (80024ac <Menu_Init+0x258>)
 800229c:	2201      	movs	r2, #1
 800229e:	741a      	strb	r2, [r3, #16]
	items[0].name = "LoRa E220";
 80022a0:	4b82      	ldr	r3, [pc, #520]	; (80024ac <Menu_Init+0x258>)
 80022a2:	4a85      	ldr	r2, [pc, #532]	; (80024b8 <Menu_Init+0x264>)
 80022a4:	615a      	str	r2, [r3, #20]
	items[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80022a6:	4a81      	ldr	r2, [pc, #516]	; (80024ac <Menu_Init+0x258>)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	6193      	str	r3, [r2, #24]
	items[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80022ac:	4a7f      	ldr	r2, [pc, #508]	; (80024ac <Menu_Init+0x258>)
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	61d3      	str	r3, [r2, #28]
	items[0].makeAction = 0;
 80022b2:	4b7e      	ldr	r3, [pc, #504]	; (80024ac <Menu_Init+0x258>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]

	items[1].up = &items[0];
 80022b8:	4b7c      	ldr	r3, [pc, #496]	; (80024ac <Menu_Init+0x258>)
 80022ba:	4a7c      	ldr	r2, [pc, #496]	; (80024ac <Menu_Init+0x258>)
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
	items[1].down = &items[2];
 80022be:	4b7b      	ldr	r3, [pc, #492]	; (80024ac <Menu_Init+0x258>)
 80022c0:	4a7e      	ldr	r2, [pc, #504]	; (80024bc <Menu_Init+0x268>)
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
	items[1].child = &items_menu_2[0];
 80022c4:	4b79      	ldr	r3, [pc, #484]	; (80024ac <Menu_Init+0x258>)
 80022c6:	4a7e      	ldr	r2, [pc, #504]	; (80024c0 <Menu_Init+0x26c>)
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
	items[1].parent = 0;
 80022ca:	4b78      	ldr	r3, [pc, #480]	; (80024ac <Menu_Init+0x258>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
	items[1].id = 2;
 80022d0:	4b76      	ldr	r3, [pc, #472]	; (80024ac <Menu_Init+0x258>)
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items[1].name = "NRF24L01";
 80022d8:	4b74      	ldr	r3, [pc, #464]	; (80024ac <Menu_Init+0x258>)
 80022da:	4a7a      	ldr	r2, [pc, #488]	; (80024c4 <Menu_Init+0x270>)
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
	items[1].updateScreen_up = p_print_rows_on_oled_if_up;
 80022de:	4a73      	ldr	r2, [pc, #460]	; (80024ac <Menu_Init+0x258>)
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	63d3      	str	r3, [r2, #60]	; 0x3c
	items[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80022e4:	4a71      	ldr	r2, [pc, #452]	; (80024ac <Menu_Init+0x258>)
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	6413      	str	r3, [r2, #64]	; 0x40
	items[1].makeAction = 0;
 80022ea:	4b70      	ldr	r3, [pc, #448]	; (80024ac <Menu_Init+0x258>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44

	items[2].up = &items[1];
 80022f0:	4b6e      	ldr	r3, [pc, #440]	; (80024ac <Menu_Init+0x258>)
 80022f2:	4a6f      	ldr	r2, [pc, #444]	; (80024b0 <Menu_Init+0x25c>)
 80022f4:	649a      	str	r2, [r3, #72]	; 0x48
	items[2].down = 0;
 80022f6:	4b6d      	ldr	r3, [pc, #436]	; (80024ac <Menu_Init+0x258>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	64da      	str	r2, [r3, #76]	; 0x4c
	items[2].child = &items_menu_3[0];
 80022fc:	4b6b      	ldr	r3, [pc, #428]	; (80024ac <Menu_Init+0x258>)
 80022fe:	4a72      	ldr	r2, [pc, #456]	; (80024c8 <Menu_Init+0x274>)
 8002300:	651a      	str	r2, [r3, #80]	; 0x50
	items[2].parent = 0;
 8002302:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <Menu_Init+0x258>)
 8002304:	2200      	movs	r2, #0
 8002306:	655a      	str	r2, [r3, #84]	; 0x54
	items[2].id = 3;
 8002308:	4b68      	ldr	r3, [pc, #416]	; (80024ac <Menu_Init+0x258>)
 800230a:	2203      	movs	r2, #3
 800230c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items[2].name = "AM2302 sensor";
 8002310:	4b66      	ldr	r3, [pc, #408]	; (80024ac <Menu_Init+0x258>)
 8002312:	4a6e      	ldr	r2, [pc, #440]	; (80024cc <Menu_Init+0x278>)
 8002314:	65da      	str	r2, [r3, #92]	; 0x5c
	items[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8002316:	4a65      	ldr	r2, [pc, #404]	; (80024ac <Menu_Init+0x258>)
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	6613      	str	r3, [r2, #96]	; 0x60
	items[2].updateScreen_down = p_print_rows_on_oled_if_down;
 800231c:	4a63      	ldr	r2, [pc, #396]	; (80024ac <Menu_Init+0x258>)
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	6653      	str	r3, [r2, #100]	; 0x64
	items[2].makeAction = 0;
 8002322:	4b62      	ldr	r3, [pc, #392]	; (80024ac <Menu_Init+0x258>)
 8002324:	2200      	movs	r2, #0
 8002326:	669a      	str	r2, [r3, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating LoRa menu
	items_menu_1[0].up = 0;
 8002328:	4b62      	ldr	r3, [pc, #392]	; (80024b4 <Menu_Init+0x260>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
	items_menu_1[0].down = &items_menu_1[1];
 800232e:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <Menu_Init+0x260>)
 8002330:	4a67      	ldr	r2, [pc, #412]	; (80024d0 <Menu_Init+0x27c>)
 8002332:	605a      	str	r2, [r3, #4]
	items_menu_1[0].id = 1;
 8002334:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <Menu_Init+0x260>)
 8002336:	2201      	movs	r2, #1
 8002338:	741a      	strb	r2, [r3, #16]
	items_menu_1[0].child = 0;
 800233a:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <Menu_Init+0x260>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
	items_menu_1[0].parent = &items[0];
 8002340:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <Menu_Init+0x260>)
 8002342:	4a5a      	ldr	r2, [pc, #360]	; (80024ac <Menu_Init+0x258>)
 8002344:	60da      	str	r2, [r3, #12]
	items_menu_1[0].name = "LoRa RX";
 8002346:	4b5b      	ldr	r3, [pc, #364]	; (80024b4 <Menu_Init+0x260>)
 8002348:	4a62      	ldr	r2, [pc, #392]	; (80024d4 <Menu_Init+0x280>)
 800234a:	615a      	str	r2, [r3, #20]
	items_menu_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 800234c:	4a59      	ldr	r2, [pc, #356]	; (80024b4 <Menu_Init+0x260>)
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	6193      	str	r3, [r2, #24]
	items_menu_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8002352:	4a58      	ldr	r2, [pc, #352]	; (80024b4 <Menu_Init+0x260>)
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	61d3      	str	r3, [r2, #28]
	items_menu_1[0].makeAction = p_lora_rx_mode;
 8002358:	4a56      	ldr	r2, [pc, #344]	; (80024b4 <Menu_Init+0x260>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	6213      	str	r3, [r2, #32]

	items_menu_1[1].up = &items_menu_1[0];
 800235e:	4b55      	ldr	r3, [pc, #340]	; (80024b4 <Menu_Init+0x260>)
 8002360:	4a54      	ldr	r2, [pc, #336]	; (80024b4 <Menu_Init+0x260>)
 8002362:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1[1].down = &items_menu_1[2];
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <Menu_Init+0x260>)
 8002366:	4a5c      	ldr	r2, [pc, #368]	; (80024d8 <Menu_Init+0x284>)
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1[1].child = 0;
 800236a:	4b52      	ldr	r3, [pc, #328]	; (80024b4 <Menu_Init+0x260>)
 800236c:	2200      	movs	r2, #0
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1[1].parent = &items[0];
 8002370:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <Menu_Init+0x260>)
 8002372:	4a4e      	ldr	r2, [pc, #312]	; (80024ac <Menu_Init+0x258>)
 8002374:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1[1].id = 2;
 8002376:	4b4f      	ldr	r3, [pc, #316]	; (80024b4 <Menu_Init+0x260>)
 8002378:	2202      	movs	r2, #2
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1[1].name = "LoRa TX";
 800237e:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <Menu_Init+0x260>)
 8002380:	4a56      	ldr	r2, [pc, #344]	; (80024dc <Menu_Init+0x288>)
 8002382:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8002384:	4a4b      	ldr	r2, [pc, #300]	; (80024b4 <Menu_Init+0x260>)
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 800238a:	4a4a      	ldr	r2, [pc, #296]	; (80024b4 <Menu_Init+0x260>)
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1[1].makeAction = p_lora_tx_mode;
 8002390:	4a48      	ldr	r2, [pc, #288]	; (80024b4 <Menu_Init+0x260>)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_1[2].up = &items_menu_1[1];
 8002396:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <Menu_Init+0x260>)
 8002398:	4a4d      	ldr	r2, [pc, #308]	; (80024d0 <Menu_Init+0x27c>)
 800239a:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1[2].down = 0;
 800239c:	4b45      	ldr	r3, [pc, #276]	; (80024b4 <Menu_Init+0x260>)
 800239e:	2200      	movs	r2, #0
 80023a0:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1[2].child = 0;
 80023a2:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <Menu_Init+0x260>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1[2].parent = &items[0];
 80023a8:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <Menu_Init+0x260>)
 80023aa:	4a40      	ldr	r2, [pc, #256]	; (80024ac <Menu_Init+0x258>)
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1[2].id = 3;
 80023ae:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <Menu_Init+0x260>)
 80023b0:	2203      	movs	r2, #3
 80023b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1[2].name = "EXIT";						// Name of item
 80023b6:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <Menu_Init+0x260>)
 80023b8:	4a49      	ldr	r2, [pc, #292]	; (80024e0 <Menu_Init+0x28c>)
 80023ba:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80023bc:	4a3d      	ldr	r2, [pc, #244]	; (80024b4 <Menu_Init+0x260>)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80023c2:	4a3c      	ldr	r2, [pc, #240]	; (80024b4 <Menu_Init+0x260>)
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1[2].makeAction = p_return_from_menu;
 80023c8:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <Menu_Init+0x260>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating NRF menu
	items_menu_2[0].up = 0;
 80023ce:	4b3c      	ldr	r3, [pc, #240]	; (80024c0 <Menu_Init+0x26c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
	items_menu_2[0].down = &items_menu_2[1];
 80023d4:	4b3a      	ldr	r3, [pc, #232]	; (80024c0 <Menu_Init+0x26c>)
 80023d6:	4a43      	ldr	r2, [pc, #268]	; (80024e4 <Menu_Init+0x290>)
 80023d8:	605a      	str	r2, [r3, #4]
	items_menu_2[0].child = 0;
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <Menu_Init+0x26c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
	items_menu_2[0].parent = &items[1];
 80023e0:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <Menu_Init+0x26c>)
 80023e2:	4a33      	ldr	r2, [pc, #204]	; (80024b0 <Menu_Init+0x25c>)
 80023e4:	60da      	str	r2, [r3, #12]
	items_menu_2[0].id = 1;
 80023e6:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <Menu_Init+0x26c>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	741a      	strb	r2, [r3, #16]
	items_menu_2[0].name = "NRF RX";						// Name of item
 80023ec:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <Menu_Init+0x26c>)
 80023ee:	4a3e      	ldr	r2, [pc, #248]	; (80024e8 <Menu_Init+0x294>)
 80023f0:	615a      	str	r2, [r3, #20]
	items_menu_2[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80023f2:	4a33      	ldr	r2, [pc, #204]	; (80024c0 <Menu_Init+0x26c>)
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	6193      	str	r3, [r2, #24]
	items_menu_2[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80023f8:	4a31      	ldr	r2, [pc, #196]	; (80024c0 <Menu_Init+0x26c>)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	61d3      	str	r3, [r2, #28]
	items_menu_2[0].makeAction = p_nrf_rx_mode;
 80023fe:	4a30      	ldr	r2, [pc, #192]	; (80024c0 <Menu_Init+0x26c>)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6213      	str	r3, [r2, #32]

	items_menu_2[1].up = &items_menu_2[0];
 8002404:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <Menu_Init+0x26c>)
 8002406:	4a2e      	ldr	r2, [pc, #184]	; (80024c0 <Menu_Init+0x26c>)
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2[1].down = &items_menu_2[2];
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <Menu_Init+0x26c>)
 800240c:	4a37      	ldr	r2, [pc, #220]	; (80024ec <Menu_Init+0x298>)
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2[1].child = 0;
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <Menu_Init+0x26c>)
 8002412:	2200      	movs	r2, #0
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2[1].parent = &items[1];
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <Menu_Init+0x26c>)
 8002418:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <Menu_Init+0x25c>)
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2[1].id = 2;
 800241c:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <Menu_Init+0x26c>)
 800241e:	2202      	movs	r2, #2
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2[1].name = "NRF TX";						// Name of item
 8002424:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <Menu_Init+0x26c>)
 8002426:	4a32      	ldr	r2, [pc, #200]	; (80024f0 <Menu_Init+0x29c>)
 8002428:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2[1].updateScreen_up = p_print_rows_on_oled_if_up;
 800242a:	4a25      	ldr	r2, [pc, #148]	; (80024c0 <Menu_Init+0x26c>)
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8002430:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <Menu_Init+0x26c>)
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2[1].makeAction = p_nrf_tx_mode;
 8002436:	4a22      	ldr	r2, [pc, #136]	; (80024c0 <Menu_Init+0x26c>)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_2[2].up = &items_menu_2[1];
 800243c:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <Menu_Init+0x26c>)
 800243e:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <Menu_Init+0x290>)
 8002440:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2[2].down = 0;
 8002442:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <Menu_Init+0x26c>)
 8002444:	2200      	movs	r2, #0
 8002446:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2[2].child = 0;
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <Menu_Init+0x26c>)
 800244a:	2200      	movs	r2, #0
 800244c:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2[2].parent = &items[1];
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <Menu_Init+0x26c>)
 8002450:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <Menu_Init+0x25c>)
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2[2].id = 3;
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <Menu_Init+0x26c>)
 8002456:	2203      	movs	r2, #3
 8002458:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2[2].name = "EXIT";						// Name of item
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <Menu_Init+0x26c>)
 800245e:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <Menu_Init+0x28c>)
 8002460:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8002462:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <Menu_Init+0x26c>)
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8002468:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <Menu_Init+0x26c>)
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2[2].makeAction = p_return_from_menu;
 800246e:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <Menu_Init+0x26c>)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating sensor menu
	items_menu_3[0].up = 0;
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <Menu_Init+0x274>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
	items_menu_3[0].down = &items_menu_3[1];
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <Menu_Init+0x274>)
 800247c:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <Menu_Init+0x2a0>)
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	e03a      	b.n	80024f8 <Menu_Init+0x2a4>
 8002482:	bf00      	nop
 8002484:	0800286d 	.word	0x0800286d
 8002488:	08002965 	.word	0x08002965
 800248c:	08002cd1 	.word	0x08002cd1
 8002490:	08002d25 	.word	0x08002d25
 8002494:	08002dc1 	.word	0x08002dc1
 8002498:	08002f0d 	.word	0x08002f0d
 800249c:	08002e5d 	.word	0x08002e5d
 80024a0:	08002fe5 	.word	0x08002fe5
 80024a4:	080030a1 	.word	0x080030a1
 80024a8:	08003161 	.word	0x08003161
 80024ac:	2000083c 	.word	0x2000083c
 80024b0:	20000860 	.word	0x20000860
 80024b4:	20000788 	.word	0x20000788
 80024b8:	080072b8 	.word	0x080072b8
 80024bc:	20000884 	.word	0x20000884
 80024c0:	2000071c 	.word	0x2000071c
 80024c4:	080072c4 	.word	0x080072c4
 80024c8:	200007f4 	.word	0x200007f4
 80024cc:	080072d0 	.word	0x080072d0
 80024d0:	200007ac 	.word	0x200007ac
 80024d4:	080072e0 	.word	0x080072e0
 80024d8:	200007d0 	.word	0x200007d0
 80024dc:	080072e8 	.word	0x080072e8
 80024e0:	080072f0 	.word	0x080072f0
 80024e4:	20000740 	.word	0x20000740
 80024e8:	080072f8 	.word	0x080072f8
 80024ec:	20000764 	.word	0x20000764
 80024f0:	08007300 	.word	0x08007300
 80024f4:	20000818 	.word	0x20000818
	items_menu_3[0].child = 0;
 80024f8:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <Menu_Init+0x310>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
	items_menu_3[0].parent = &items[2];
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <Menu_Init+0x310>)
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <Menu_Init+0x314>)
 8002502:	60da      	str	r2, [r3, #12]
	items_menu_3[0].id = 1;
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <Menu_Init+0x310>)
 8002506:	2201      	movs	r2, #1
 8002508:	741a      	strb	r2, [r3, #16]
	items_menu_3[0].name = "Measure T & H";						// Name of item
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <Menu_Init+0x310>)
 800250c:	4a17      	ldr	r2, [pc, #92]	; (800256c <Menu_Init+0x318>)
 800250e:	615a      	str	r2, [r3, #20]
	items_menu_3[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <Menu_Init+0x310>)
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	6193      	str	r3, [r2, #24]
	items_menu_3[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8002516:	4a13      	ldr	r2, [pc, #76]	; (8002564 <Menu_Init+0x310>)
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	61d3      	str	r3, [r2, #28]
	items_menu_3[0].makeAction = p_do_it_function_menu_3;
 800251c:	4a11      	ldr	r2, [pc, #68]	; (8002564 <Menu_Init+0x310>)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6213      	str	r3, [r2, #32]

	items_menu_3[1].up = &items_menu_3[0];
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <Menu_Init+0x310>)
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <Menu_Init+0x310>)
 8002526:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_3[1].down = 0;
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <Menu_Init+0x310>)
 800252a:	2200      	movs	r2, #0
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_3[1].child = 0;
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <Menu_Init+0x310>)
 8002530:	2200      	movs	r2, #0
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_3[1].parent = &items[2];
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <Menu_Init+0x310>)
 8002536:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <Menu_Init+0x314>)
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_3[1].id = 2;
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <Menu_Init+0x310>)
 800253c:	2202      	movs	r2, #2
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_3[1].name = "EXIT";						// Name of item
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <Menu_Init+0x310>)
 8002544:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <Menu_Init+0x31c>)
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_3[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8002548:	4a06      	ldr	r2, [pc, #24]	; (8002564 <Menu_Init+0x310>)
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_3[1].updateScreen_down = p_print_rows_on_oled_if_down;
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <Menu_Init+0x310>)
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_3[1].makeAction = p_return_from_menu;
 8002554:	4a03      	ldr	r2, [pc, #12]	; (8002564 <Menu_Init+0x310>)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	6453      	str	r3, [r2, #68]	; 0x44
}
 800255a:	bf00      	nop
 800255c:	372c      	adds	r7, #44	; 0x2c
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	200007f4 	.word	0x200007f4
 8002568:	20000884 	.word	0x20000884
 800256c:	08007308 	.word	0x08007308
 8002570:	080072f0 	.word	0x080072f0

08002574 <menu>:

// ----------------------------------------------------------------------------------------
void menu(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
	Menu_Init();									// Init all structures
 8002578:	f7ff fe6c 	bl	8002254 <Menu_Init>
	print_menu_init();								// Print start menu and scrolingbar
 800257c:	f000 fa74 	bl	8002a68 <print_menu_init>
	HAL_Delay(10);
 8002580:	200a      	movs	r0, #10
 8002582:	f000 fee9 	bl	8003358 <HAL_Delay>

	while(1)
	{
		if(button_processed_status == 1)			// If buttons was pressed
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <menu+0x50>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d1fb      	bne.n	8002586 <menu+0x12>
		{

			button_processed_status = 1;
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <menu+0x50>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]
			switch (button_status)
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <menu+0x54>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d00c      	beq.n	80025b6 <menu+0x42>
 800259c:	2b03      	cmp	r3, #3
 800259e:	dc0d      	bgt.n	80025bc <menu+0x48>
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d002      	beq.n	80025aa <menu+0x36>
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d003      	beq.n	80025b0 <menu+0x3c>
 80025a8:	e008      	b.n	80025bc <menu+0x48>
			{
				case BOTTON_UP:
					up();
 80025aa:	f000 f80f 	bl	80025cc <up>
					break;
 80025ae:	e005      	b.n	80025bc <menu+0x48>
				case BUTTON_ENTER:
					enter();
 80025b0:	f000 f840 	bl	8002634 <enter>
					break;
 80025b4:	e002      	b.n	80025bc <menu+0x48>
				case BUTTON_DOWN:
					down();
 80025b6:	f000 f823 	bl	8002600 <down>
					break;
 80025ba:	bf00      	nop
			}
			button_status = BOTTON_DOESENT_PRESS;
 80025bc:	4b02      	ldr	r3, [pc, #8]	; (80025c8 <menu+0x54>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
		if(button_processed_status == 1)			// If buttons was pressed
 80025c2:	e7e0      	b.n	8002586 <menu+0x12>
 80025c4:	20000020 	.word	0x20000020
 80025c8:	20000595 	.word	0x20000595

080025cc <up>:
		}
	}
}
// ----------------------------------------------------------------------------------------
void up(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
	if (currentItem->up)
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <up+0x30>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <up+0x2a>
	{
	    currentItem = currentItem->up;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <up+0x30>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a06      	ldr	r2, [pc, #24]	; (80025fc <up+0x30>)
 80025e2:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_up )
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <up+0x30>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <up+0x2a>
	    {
	        currentItem->updateScreen_up();
 80025ee:	4b03      	ldr	r3, [pc, #12]	; (80025fc <up+0x30>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4798      	blx	r3
	    }
	}
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000028 	.word	0x20000028

08002600 <down>:
// ----------------------------------------------------------------------------------------
void down(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	if (currentItem->down)
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <down+0x30>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00d      	beq.n	800262a <down+0x2a>
	{
	    currentItem = currentItem->down;
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <down+0x30>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a06      	ldr	r2, [pc, #24]	; (8002630 <down+0x30>)
 8002616:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_down )
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <down+0x30>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <down+0x2a>
	    {
	        currentItem->updateScreen_down();
 8002622:	4b03      	ldr	r3, [pc, #12]	; (8002630 <down+0x30>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	4798      	blx	r3
	    }
	}
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000028 	.word	0x20000028

08002634 <enter>:
// ----------------------------------------------------------------------------------------
void enter(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
	bool status = true;
 800263a:	2301      	movs	r3, #1
 800263c:	71fb      	strb	r3, [r7, #7]
	// Якщо є функція "makeAction" тоді виконати її
	if (currentItem->makeAction)
 800263e:	4b0f      	ldr	r3, [pc, #60]	; (800267c <enter+0x48>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <enter+0x20>
	{
		currentItem->makeAction();
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <enter+0x48>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4798      	blx	r3
		status = false;
 8002650:	2300      	movs	r3, #0
 8002652:	71fb      	strb	r3, [r7, #7]
	}
	// Якщо є перехід на  "child" і "makeAction" не була виконана, тоді виконати перехід
	if((currentItem->child) && (status == true))
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <enter+0x48>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <enter+0x3e>
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d006      	beq.n	8002672 <enter+0x3e>
	{
		currentItem = currentItem->child;
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <enter+0x48>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	4a04      	ldr	r2, [pc, #16]	; (800267c <enter+0x48>)
 800266c:	6013      	str	r3, [r2, #0]
		print_menu_items();
 800266e:	f000 fa91 	bl	8002b94 <print_menu_items>
	}
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000028 	.word	0x20000028

08002680 <scroll_bar>:
// ----------------------------------------------------------------------------------------
/*
This function print scrollbar on right part of OLED.
 */
void scroll_bar(void)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af02      	add	r7, sp, #8
	// Work size scrollbar
	uint16_t start_x_scrollbar = 124;
 8002686:	237c      	movs	r3, #124	; 0x7c
 8002688:	81fb      	strh	r3, [r7, #14]
	uint16_t start_y_scrollbar = 17;
 800268a:	2311      	movs	r3, #17
 800268c:	81bb      	strh	r3, [r7, #12]
	uint16_t active_width = 3;
 800268e:	2303      	movs	r3, #3
 8002690:	817b      	strh	r3, [r7, #10]
	uint16_t lenght_all_scrollbar = 48;
 8002692:	2330      	movs	r3, #48	; 0x30
 8002694:	813b      	strh	r3, [r7, #8]

	uint8_t menu_items_counter = 1;
 8002696:	2301      	movs	r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
	// 1. Скопіювати показник на меню в буффер.
	// 2. Піднятися до першого елемента меню.
	// 3. Опускатися вниз до останнього пункту меню і інкрементувати лічильник елементів меню.
	// 4. Використати лічильник пунктів меню для вираховування довжини полоси прокрутки і її координат.

	MenuItem_t * currentItem_buff = currentItem;
 800269a:	4b32      	ldr	r3, [pc, #200]	; (8002764 <scroll_bar+0xe4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	613b      	str	r3, [r7, #16]

	if ((currentItem_buff -> up) != 0)							// Step up if existing up
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d006      	beq.n	80026b6 <scroll_bar+0x36>
	{
		do{
			currentItem_buff = currentItem_buff -> up;			// Step up to the top of menu
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	613b      	str	r3, [r7, #16]
		}
		while ((currentItem_buff -> up) != 0);					// If the top of item doesen't found
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f8      	bne.n	80026a8 <scroll_bar+0x28>
	}

	if ((currentItem_buff -> up) == 0)							// If found top of menu item
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <scroll_bar+0x52>
	{
		do{
			currentItem_buff = currentItem_buff -> down;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	613b      	str	r3, [r7, #16]
			menu_items_counter++;								// Count how many list on menu
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	3301      	adds	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
		}
		while ((currentItem_buff -> down) != 0);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f5      	bne.n	80026be <scroll_bar+0x3e>
	}
	 // Очистити частину керану де є скролбар
	ssd1306FillRect(start_x_scrollbar, start_y_scrollbar, active_width, lenght_all_scrollbar - 2, Black);
 80026d2:	89fb      	ldrh	r3, [r7, #14]
 80026d4:	b2d8      	uxtb	r0, r3
 80026d6:	89bb      	ldrh	r3, [r7, #12]
 80026d8:	b2d9      	uxtb	r1, r3
 80026da:	897b      	ldrh	r3, [r7, #10]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	893b      	ldrh	r3, [r7, #8]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	3b02      	subs	r3, #2
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2400      	movs	r4, #0
 80026e8:	9400      	str	r4, [sp, #0]
 80026ea:	f7ff f800 	bl	80016ee <ssd1306FillRect>

	// Вивести подовгастий квадрат на край екрану
	ssd1306_DrawRectangle(start_x_scrollbar - 1, start_y_scrollbar - 1, start_x_scrollbar + active_width, 63, White);
 80026ee:	89fb      	ldrh	r3, [r7, #14]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b2d8      	uxtb	r0, r3
 80026f6:	89bb      	ldrh	r3, [r7, #12]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b2d9      	uxtb	r1, r3
 80026fe:	89fb      	ldrh	r3, [r7, #14]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4413      	add	r3, r2
 8002708:	b2da      	uxtb	r2, r3
 800270a:	2301      	movs	r3, #1
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	233f      	movs	r3, #63	; 0x3f
 8002710:	f7fe ffb6 	bl	8001680 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8002714:	f7fe fdfa 	bl	800130c <ssd1306_UpdateScreen>

	 // Print scroling line
	int id_for_line = currentItem -> id;				// Скопіювати порядковий номер меню (Для того щоб взнати на якому пункті меню зараз стоїмо)
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <scroll_bar+0xe4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	7c1b      	ldrb	r3, [r3, #16]
 800271e:	607b      	str	r3, [r7, #4]
	// Print scroling line
	uint16_t line_lenght = (lenght_all_scrollbar/menu_items_counter + 1);					   	// Довжина лінії яка відповідає одному меню
 8002720:	893a      	ldrh	r2, [r7, #8]
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	fb92 f3f3 	sdiv	r3, r2, r3
 8002728:	b29b      	uxth	r3, r3
 800272a:	3301      	adds	r3, #1
 800272c:	807b      	strh	r3, [r7, #2]
	uint16_t start_lenght = 16 + ((id_for_line - 1)*line_lenght);								// Початок лінії
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3b01      	subs	r3, #1
 8002732:	b29b      	uxth	r3, r3
 8002734:	887a      	ldrh	r2, [r7, #2]
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	b29b      	uxth	r3, r3
 800273c:	3310      	adds	r3, #16
 800273e:	803b      	strh	r3, [r7, #0]
	// Print active scrollbar part (line)
	ssd1306FillRect(start_x_scrollbar, start_lenght, active_width, line_lenght, White);
 8002740:	89fb      	ldrh	r3, [r7, #14]
 8002742:	b2d8      	uxtb	r0, r3
 8002744:	883b      	ldrh	r3, [r7, #0]
 8002746:	b2d9      	uxtb	r1, r3
 8002748:	897b      	ldrh	r3, [r7, #10]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	887b      	ldrh	r3, [r7, #2]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2401      	movs	r4, #1
 8002752:	9400      	str	r4, [sp, #0]
 8002754:	f7fe ffcb 	bl	80016ee <ssd1306FillRect>

	ssd1306_UpdateScreen();
 8002758:	f7fe fdd8 	bl	800130c <ssd1306_UpdateScreen>
}
 800275c:	bf00      	nop
 800275e:	371c      	adds	r7, #28
 8002760:	46bd      	mov	sp, r7
 8002762:	bd90      	pop	{r4, r7, pc}
 8002764:	20000028 	.word	0x20000028

08002768 <print_rectangle_on_head>:
// ----------------------------------------------------------------------------------------
void print_rectangle_on_head(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(0, 0, 127 , 15, White);
 800276e:	2301      	movs	r3, #1
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	230f      	movs	r3, #15
 8002774:	227f      	movs	r2, #127	; 0x7f
 8002776:	2100      	movs	r1, #0
 8002778:	2000      	movs	r0, #0
 800277a:	f7fe ff81 	bl	8001680 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 800277e:	f7fe fdc5 	bl	800130c <ssd1306_UpdateScreen>
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <clear_menu_items>:
// ----------------------------------------------------------------------------------------
// Clear some menu items.
void clear_menu_items (bool first, bool second, bool third, bool fourth)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	4604      	mov	r4, r0
 8002790:	4608      	mov	r0, r1
 8002792:	4611      	mov	r1, r2
 8002794:	461a      	mov	r2, r3
 8002796:	4623      	mov	r3, r4
 8002798:	71fb      	strb	r3, [r7, #7]
 800279a:	4603      	mov	r3, r0
 800279c:	71bb      	strb	r3, [r7, #6]
 800279e:	460b      	mov	r3, r1
 80027a0:	717b      	strb	r3, [r7, #5]
 80027a2:	4613      	mov	r3, r2
 80027a4:	713b      	strb	r3, [r7, #4]
	uint8_t start_row_x = 15;
 80027a6:	230f      	movs	r3, #15
 80027a8:	77fb      	strb	r3, [r7, #31]
	char str[16] = "               ";   						// Must be 15
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <clear_menu_items+0xcc>)
 80027ac:	f107 040c 	add.w	r4, r7, #12
 80027b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(first == true)
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00e      	beq.n	80027da <clear_menu_items+0x52>
	{
		ssd1306_SetCursor(start_row_x, first_menu_row);
 80027bc:	4b26      	ldr	r3, [pc, #152]	; (8002858 <clear_menu_items+0xd0>)
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	7ffb      	ldrb	r3, [r7, #31]
 80027c4:	4611      	mov	r1, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fed6 	bl	8001578 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80027cc:	4a23      	ldr	r2, [pc, #140]	; (800285c <clear_menu_items+0xd4>)
 80027ce:	f107 000c 	add.w	r0, r7, #12
 80027d2:	2301      	movs	r3, #1
 80027d4:	ca06      	ldmia	r2, {r1, r2}
 80027d6:	f7fe fea9 	bl	800152c <ssd1306_WriteString>
	}
	if(second == true)
 80027da:	79bb      	ldrb	r3, [r7, #6]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00e      	beq.n	80027fe <clear_menu_items+0x76>
	{
		ssd1306_SetCursor(start_row_x, second_menu_row);
 80027e0:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <clear_menu_items+0xd8>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	7ffb      	ldrb	r3, [r7, #31]
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fec4 	bl	8001578 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80027f0:	4a1a      	ldr	r2, [pc, #104]	; (800285c <clear_menu_items+0xd4>)
 80027f2:	f107 000c 	add.w	r0, r7, #12
 80027f6:	2301      	movs	r3, #1
 80027f8:	ca06      	ldmia	r2, {r1, r2}
 80027fa:	f7fe fe97 	bl	800152c <ssd1306_WriteString>
	}
	if(first == true)
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00e      	beq.n	8002822 <clear_menu_items+0x9a>
	{
		ssd1306_SetCursor(start_row_x, third_menu_row);
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <clear_menu_items+0xdc>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	7ffb      	ldrb	r3, [r7, #31]
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe feb2 	bl	8001578 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002814:	4a11      	ldr	r2, [pc, #68]	; (800285c <clear_menu_items+0xd4>)
 8002816:	f107 000c 	add.w	r0, r7, #12
 800281a:	2301      	movs	r3, #1
 800281c:	ca06      	ldmia	r2, {r1, r2}
 800281e:	f7fe fe85 	bl	800152c <ssd1306_WriteString>
	}
	if(fourth == true)
 8002822:	793b      	ldrb	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00e      	beq.n	8002846 <clear_menu_items+0xbe>
	{
		ssd1306_SetCursor(start_row_x, fourth_menu_row);
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <clear_menu_items+0xe0>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	7ffb      	ldrb	r3, [r7, #31]
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fea0 	bl	8001578 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002838:	4a08      	ldr	r2, [pc, #32]	; (800285c <clear_menu_items+0xd4>)
 800283a:	f107 000c 	add.w	r0, r7, #12
 800283e:	2301      	movs	r3, #1
 8002840:	ca06      	ldmia	r2, {r1, r2}
 8002842:	f7fe fe73 	bl	800152c <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8002846:	f7fe fd61 	bl	800130c <ssd1306_UpdateScreen>
}
 800284a:	bf00      	nop
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd90      	pop	{r4, r7, pc}
 8002852:	bf00      	nop
 8002854:	08007318 	.word	0x08007318
 8002858:	20000030 	.word	0x20000030
 800285c:	20000014 	.word	0x20000014
 8002860:	20000032 	.word	0x20000032
 8002864:	20000034 	.word	0x20000034
 8002868:	20000036 	.word	0x20000036

0800286c <print_rows_on_oled_if_up>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_up(void)								// print text menu items
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8002872:	2300      	movs	r3, #0
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
	clear_menu_items (true , true , true , true );
 8002880:	2301      	movs	r3, #1
 8002882:	2201      	movs	r2, #1
 8002884:	2101      	movs	r1, #1
 8002886:	2001      	movs	r0, #1
 8002888:	f7ff ff7e 	bl	8002788 <clear_menu_items>
	print_rectangle_on_head();
 800288c:	f7ff ff6c 	bl	8002768 <print_rectangle_on_head>
	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8002890:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <print_rows_on_oled_if_up+0xd8>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	4619      	mov	r1, r3
 8002898:	2000      	movs	r0, #0
 800289a:	f7fe fe6d 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 800289e:	4a2a      	ldr	r2, [pc, #168]	; (8002948 <print_rows_on_oled_if_up+0xdc>)
 80028a0:	2301      	movs	r3, #1
 80028a2:	ca06      	ldmia	r2, {r1, r2}
 80028a4:	4829      	ldr	r0, [pc, #164]	; (800294c <print_rows_on_oled_if_up+0xe0>)
 80028a6:	f7fe fe41 	bl	800152c <ssd1306_WriteString>

	MenuItem_t * currentItem_buff_up = currentItem;				// Create buffer on selected current item pointer.
 80028aa:	4b29      	ldr	r3, [pc, #164]	; (8002950 <print_rows_on_oled_if_up+0xe4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80028b0:	4b24      	ldr	r3, [pc, #144]	; (8002944 <print_rows_on_oled_if_up+0xd8>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	74fb      	strb	r3, [r7, #19]
 80028b6:	e035      	b.n	8002924 <print_rows_on_oled_if_up+0xb8>
	{
		// Fill in OLED buffer
		// Print number of menu item
		itoa(currentItem_buff_up -> id, str, 10);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	7c1b      	ldrb	r3, [r3, #16]
 80028bc:	4618      	mov	r0, r3
 80028be:	463b      	mov	r3, r7
 80028c0:	220a      	movs	r2, #10
 80028c2:	4619      	mov	r1, r3
 80028c4:	f004 f802 	bl	80068cc <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <print_rows_on_oled_if_up+0xe8>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	7cfa      	ldrb	r2, [r7, #19]
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fe50 	bl	8001578 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80028d8:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <print_rows_on_oled_if_up+0xdc>)
 80028da:	4638      	mov	r0, r7
 80028dc:	2301      	movs	r3, #1
 80028de:	ca06      	ldmia	r2, {r1, r2}
 80028e0:	f7fe fe24 	bl	800152c <ssd1306_WriteString>

		// Print name of menu item
		strncpy(str, currentItem_buff_up -> name, 15);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	6959      	ldr	r1, [r3, #20]
 80028e8:	463b      	mov	r3, r7
 80028ea:	220f      	movs	r2, #15
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 f8f2 	bl	8006ad6 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <print_rows_on_oled_if_up+0xec>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	7cfa      	ldrb	r2, [r7, #19]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe fe3b 	bl	8001578 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002902:	4a11      	ldr	r2, [pc, #68]	; (8002948 <print_rows_on_oled_if_up+0xdc>)
 8002904:	4638      	mov	r0, r7
 8002906:	2301      	movs	r3, #1
 8002908:	ca06      	ldmia	r2, {r1, r2}
 800290a:	f7fe fe0f 	bl	800152c <ssd1306_WriteString>

		currentItem_buff_up = currentItem_buff_up -> down;		// Make a step down
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	617b      	str	r3, [r7, #20]

		// Print only existing items
		if(currentItem_buff_up == 0)							// If no next item
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <print_rows_on_oled_if_up+0xc6>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <print_rows_on_oled_if_up+0xf0>)
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	4413      	add	r3, r2
 8002922:	74fb      	strb	r3, [r7, #19]
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	b29a      	uxth	r2, r3
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <print_rows_on_oled_if_up+0xf4>)
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d9c3      	bls.n	80028b8 <print_rows_on_oled_if_up+0x4c>
 8002930:	e000      	b.n	8002934 <print_rows_on_oled_if_up+0xc8>
		{
			break;
 8002932:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 8002934:	f7fe fcea 	bl	800130c <ssd1306_UpdateScreen>
	scroll_bar();
 8002938:	f7ff fea2 	bl	8002680 <scroll_bar>
}
 800293c:	bf00      	nop
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000030 	.word	0x20000030
 8002948:	20000014 	.word	0x20000014
 800294c:	2000002c 	.word	0x2000002c
 8002950:	20000028 	.word	0x20000028
 8002954:	2000003a 	.word	0x2000003a
 8002958:	2000003c 	.word	0x2000003c
 800295c:	20000038 	.word	0x20000038
 8002960:	20000036 	.word	0x20000036

08002964 <print_rows_on_oled_if_down>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_down(void)							// print text menu items
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
	char str[16] = {0};
 800296a:	2300      	movs	r3, #0
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
	clear_menu_items (true , true , true , true );
 8002978:	2301      	movs	r3, #1
 800297a:	2201      	movs	r2, #1
 800297c:	2101      	movs	r1, #1
 800297e:	2001      	movs	r0, #1
 8002980:	f7ff ff02 	bl	8002788 <clear_menu_items>
	print_rectangle_on_head();
 8002984:	f7ff fef0 	bl	8002768 <print_rectangle_on_head>
	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8002988:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <print_rows_on_oled_if_down+0xe4>)
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	4619      	mov	r1, r3
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe fdf1 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8002996:	4a2d      	ldr	r2, [pc, #180]	; (8002a4c <print_rows_on_oled_if_down+0xe8>)
 8002998:	2301      	movs	r3, #1
 800299a:	ca06      	ldmia	r2, {r1, r2}
 800299c:	482c      	ldr	r0, [pc, #176]	; (8002a50 <print_rows_on_oled_if_down+0xec>)
 800299e:	f7fe fdc5 	bl	800152c <ssd1306_WriteString>

	MenuItem_t * currentItem_buff = currentItem;				// Create buffer on selected current item pointer.
 80029a2:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <print_rows_on_oled_if_down+0xf0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80029a8:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <print_rows_on_oled_if_down+0xe4>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	74fb      	strb	r3, [r7, #19]
 80029ae:	e03b      	b.n	8002a28 <print_rows_on_oled_if_down+0xc4>
	{
		// Fill in OLED buffer
		// Print number of menu item
        itoa(currentItem_buff -> id, str, 10);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	7c1b      	ldrb	r3, [r3, #16]
 80029b4:	4618      	mov	r0, r3
 80029b6:	463b      	mov	r3, r7
 80029b8:	220a      	movs	r2, #10
 80029ba:	4619      	mov	r1, r3
 80029bc:	f003 ff86 	bl	80068cc <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80029c0:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <print_rows_on_oled_if_down+0xf4>)
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	7cfa      	ldrb	r2, [r7, #19]
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fdd4 	bl	8001578 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80029d0:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <print_rows_on_oled_if_down+0xe8>)
 80029d2:	4638      	mov	r0, r7
 80029d4:	2301      	movs	r3, #1
 80029d6:	ca06      	ldmia	r2, {r1, r2}
 80029d8:	f7fe fda8 	bl	800152c <ssd1306_WriteString>

		// Print name of menu item
		memset(str, 0, sizeof(str));
 80029dc:	463b      	mov	r3, r7
 80029de:	2210      	movs	r2, #16
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f003 ff82 	bl	80068ec <memset>
	    strncpy(str, currentItem_buff -> name, 15);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	6959      	ldr	r1, [r3, #20]
 80029ec:	463b      	mov	r3, r7
 80029ee:	220f      	movs	r2, #15
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 f870 	bl	8006ad6 <strncpy>
	    ssd1306_SetCursor(start_print_name_menu_x, row);
 80029f6:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <print_rows_on_oled_if_down+0xf8>)
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	7cfa      	ldrb	r2, [r7, #19]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe fdb9 	bl	8001578 <ssd1306_SetCursor>
	    ssd1306_WriteString(str,  Font_7x10, White);
 8002a06:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <print_rows_on_oled_if_down+0xe8>)
 8002a08:	4638      	mov	r0, r7
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	ca06      	ldmia	r2, {r1, r2}
 8002a0e:	f7fe fd8d 	bl	800152c <ssd1306_WriteString>

	    currentItem_buff = currentItem_buff -> down;			// Make a step down
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	617b      	str	r3, [r7, #20]

	    // Print only existing items
	    if(currentItem_buff == 0)		 						// If no next item
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <print_rows_on_oled_if_down+0xd2>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <print_rows_on_oled_if_down+0xfc>)
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	4413      	add	r3, r2
 8002a26:	74fb      	strb	r3, [r7, #19]
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <print_rows_on_oled_if_down+0x100>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d9bd      	bls.n	80029b0 <print_rows_on_oled_if_down+0x4c>
 8002a34:	e000      	b.n	8002a38 <print_rows_on_oled_if_down+0xd4>
	    {
	    	break;
 8002a36:	bf00      	nop
	    }
	 }
	 ssd1306_UpdateScreen();
 8002a38:	f7fe fc68 	bl	800130c <ssd1306_UpdateScreen>
	 scroll_bar();
 8002a3c:	f7ff fe20 	bl	8002680 <scroll_bar>
}
 8002a40:	bf00      	nop
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000030 	.word	0x20000030
 8002a4c:	20000014 	.word	0x20000014
 8002a50:	2000002c 	.word	0x2000002c
 8002a54:	20000028 	.word	0x20000028
 8002a58:	2000003a 	.word	0x2000003a
 8002a5c:	2000003c 	.word	0x2000003c
 8002a60:	20000038 	.word	0x20000038
 8002a64:	20000036 	.word	0x20000036

08002a68 <print_menu_init>:
// ----------------------------------------------------------------------------------------
// Print first 4 items of menu (only first time)
void print_menu_init(void)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
	MenuItem_t * currentItem_buff = currentItem;		// Create buffer on selected current item pointer.
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <print_menu_init+0x10c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	61fb      	str	r3, [r7, #28]
	print_rectangle_on_head();
 8002a74:	f7ff fe78 	bl	8002768 <print_rectangle_on_head>

	// Print ">> MAIN MENU <<" on head of OLED
	char str[20] = ">> MAIN MENU <<";
 8002a78:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <print_menu_init+0x110>)
 8002a7a:	1d3c      	adds	r4, r7, #4
 8002a7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8002a86:	2103      	movs	r1, #3
 8002a88:	200a      	movs	r0, #10
 8002a8a:	f7fe fd75 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002a8e:	4a3b      	ldr	r2, [pc, #236]	; (8002b7c <print_menu_init+0x114>)
 8002a90:	1d38      	adds	r0, r7, #4
 8002a92:	2301      	movs	r3, #1
 8002a94:	ca06      	ldmia	r2, {r1, r2}
 8002a96:	f7fe fd49 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002a9a:	f7fe fc37 	bl	800130c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	2214      	movs	r2, #20
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 ff21 	bl	80068ec <memset>

	for(uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002aaa:	4b35      	ldr	r3, [pc, #212]	; (8002b80 <print_menu_init+0x118>)
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	76fb      	strb	r3, [r7, #27]
 8002ab0:	e051      	b.n	8002b56 <print_menu_init+0xee>
	{
		if(row == first_menu_row)
 8002ab2:	7efb      	ldrb	r3, [r7, #27]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	4b32      	ldr	r3, [pc, #200]	; (8002b80 <print_menu_init+0x118>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d10d      	bne.n	8002ada <print_menu_init+0x72>
		{
			// Print pointer on menu (On top)
			char str_pointer[4] = "->";
 8002abe:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8002ac2:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8002ac4:	7efb      	ldrb	r3, [r7, #27]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fe fd55 	bl	8001578 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8002ace:	4a2b      	ldr	r2, [pc, #172]	; (8002b7c <print_menu_init+0x114>)
 8002ad0:	4638      	mov	r0, r7
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	ca06      	ldmia	r2, {r1, r2}
 8002ad6:	f7fe fd29 	bl	800152c <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	7c1b      	ldrb	r3, [r3, #16]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	220a      	movs	r2, #10
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f003 fef1 	bl	80068cc <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8002aea:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <print_menu_init+0x11c>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	7efa      	ldrb	r2, [r7, #27]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe fd3f 	bl	8001578 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002afa:	4a20      	ldr	r2, [pc, #128]	; (8002b7c <print_menu_init+0x114>)
 8002afc:	1d38      	adds	r0, r7, #4
 8002afe:	2301      	movs	r3, #1
 8002b00:	ca06      	ldmia	r2, {r1, r2}
 8002b02:	f7fe fd13 	bl	800152c <ssd1306_WriteString>
		memset(str, 0, sizeof(str));
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	2214      	movs	r2, #20
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f003 feed 	bl	80068ec <memset>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	6959      	ldr	r1, [r3, #20]
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	220f      	movs	r2, #15
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 ffdb 	bl	8006ad6 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <print_menu_init+0x120>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	7efa      	ldrb	r2, [r7, #27]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fd24 	bl	8001578 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002b30:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <print_menu_init+0x114>)
 8002b32:	1d38      	adds	r0, r7, #4
 8002b34:	2301      	movs	r3, #1
 8002b36:	ca06      	ldmia	r2, {r1, r2}
 8002b38:	f7fe fcf8 	bl	800152c <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8002b3c:	f7fe fbe6 	bl	800130c <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <print_menu_init+0xfc>
	for(uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <print_menu_init+0x124>)
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	7efb      	ldrb	r3, [r7, #27]
 8002b52:	4413      	add	r3, r2
 8002b54:	76fb      	strb	r3, [r7, #27]
 8002b56:	7efb      	ldrb	r3, [r7, #27]
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <print_menu_init+0x128>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d9a7      	bls.n	8002ab2 <print_menu_init+0x4a>
 8002b62:	e000      	b.n	8002b66 <print_menu_init+0xfe>
		{
			break;
 8002b64:	bf00      	nop
		}
	}
	scroll_bar();
 8002b66:	f7ff fd8b 	bl	8002680 <scroll_bar>
}
 8002b6a:	bf00      	nop
 8002b6c:	3724      	adds	r7, #36	; 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd90      	pop	{r4, r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000028 	.word	0x20000028
 8002b78:	08007328 	.word	0x08007328
 8002b7c:	20000014 	.word	0x20000014
 8002b80:	20000030 	.word	0x20000030
 8002b84:	2000003a 	.word	0x2000003a
 8002b88:	2000003c 	.word	0x2000003c
 8002b8c:	20000038 	.word	0x20000038
 8002b90:	20000036 	.word	0x20000036

08002b94 <print_menu_items>:
// ----------------------------------------------------------------------------------------
// print pointers of menu
void print_menu_items(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	609a      	str	r2, [r3, #8]
	clearn_oled();
 8002baa:	f7fe faff 	bl	80011ac <clearn_oled>
	print_rectangle_on_head();
 8002bae:	f7ff fddb 	bl	8002768 <print_rectangle_on_head>

	//Print selected name of menu on top of OLED (in rectangle)
	MenuItem_t * currentItem_buff_parent = currentItem;
 8002bb2:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <print_menu_items+0x120>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	617b      	str	r3, [r7, #20]
	currentItem_buff_parent = currentItem_buff_parent -> parent;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	617b      	str	r3, [r7, #20]

	strncpy(str, currentItem_buff_parent -> name, 15);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	6959      	ldr	r1, [r3, #20]
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 ff85 	bl	8006ad6 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002bcc:	2103      	movs	r1, #3
 8002bce:	200a      	movs	r0, #10
 8002bd0:	f7fe fcd2 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002bd4:	4a38      	ldr	r2, [pc, #224]	; (8002cb8 <print_menu_items+0x124>)
 8002bd6:	1d38      	adds	r0, r7, #4
 8002bd8:	2301      	movs	r3, #1
 8002bda:	ca06      	ldmia	r2, {r1, r2}
 8002bdc:	f7fe fca6 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002be0:	f7fe fb94 	bl	800130c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2210      	movs	r2, #16
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 fe7e 	bl	80068ec <memset>

	MenuItem_t * currentItem_buff = currentItem;
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <print_menu_items+0x120>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	61fb      	str	r3, [r7, #28]

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <print_menu_items+0x128>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	76fb      	strb	r3, [r7, #27]
 8002bfc:	e04b      	b.n	8002c96 <print_menu_items+0x102>
	{
		if(row == first_menu_row)
 8002bfe:	7efb      	ldrb	r3, [r7, #27]
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <print_menu_items+0x128>)
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d10d      	bne.n	8002c26 <print_menu_items+0x92>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 8002c0a:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8002c0e:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8002c10:	7efb      	ldrb	r3, [r7, #27]
 8002c12:	4619      	mov	r1, r3
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fe fcaf 	bl	8001578 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8002c1a:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <print_menu_items+0x124>)
 8002c1c:	4638      	mov	r0, r7
 8002c1e:	2301      	movs	r3, #1
 8002c20:	ca06      	ldmia	r2, {r1, r2}
 8002c22:	f7fe fc83 	bl	800152c <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	7c1b      	ldrb	r3, [r3, #16]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	220a      	movs	r2, #10
 8002c30:	4619      	mov	r1, r3
 8002c32:	f003 fe4b 	bl	80068cc <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <print_menu_items+0x12c>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	7efa      	ldrb	r2, [r7, #27]
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe fc99 	bl	8001578 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <print_menu_items+0x124>)
 8002c48:	1d38      	adds	r0, r7, #4
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	ca06      	ldmia	r2, {r1, r2}
 8002c4e:	f7fe fc6d 	bl	800152c <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	6959      	ldr	r1, [r3, #20]
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	220f      	movs	r2, #15
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 ff3b 	bl	8006ad6 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8002c60:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <print_menu_items+0x130>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	7efa      	ldrb	r2, [r7, #27]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fc84 	bl	8001578 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002c70:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <print_menu_items+0x124>)
 8002c72:	1d38      	adds	r0, r7, #4
 8002c74:	2301      	movs	r3, #1
 8002c76:	ca06      	ldmia	r2, {r1, r2}
 8002c78:	f7fe fc58 	bl	800152c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8002c7c:	f7fe fb46 	bl	800130c <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00b      	beq.n	8002ca4 <print_menu_items+0x110>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <print_menu_items+0x134>)
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	7efb      	ldrb	r3, [r7, #27]
 8002c92:	4413      	add	r3, r2
 8002c94:	76fb      	strb	r3, [r7, #27]
 8002c96:	7efb      	ldrb	r3, [r7, #27]
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <print_menu_items+0x138>)
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d9ad      	bls.n	8002bfe <print_menu_items+0x6a>
 8002ca2:	e000      	b.n	8002ca6 <print_menu_items+0x112>
		{
			break;
 8002ca4:	bf00      	nop
		}
	}
	scroll_bar();
 8002ca6:	f7ff fceb 	bl	8002680 <scroll_bar>
}
 8002caa:	bf00      	nop
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000028 	.word	0x20000028
 8002cb8:	20000014 	.word	0x20000014
 8002cbc:	20000030 	.word	0x20000030
 8002cc0:	2000003a 	.word	0x2000003a
 8002cc4:	2000003c 	.word	0x2000003c
 8002cc8:	20000038 	.word	0x20000038
 8002ccc:	20000036 	.word	0x20000036

08002cd0 <return_from_menu>:
// ----------------------------------------------------------------------------------------
void return_from_menu(void)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
	currentItem = &items[0];											// Jump to main menu
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <return_from_menu+0x44>)
 8002cd8:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <return_from_menu+0x48>)
 8002cda:	601a      	str	r2, [r3, #0]
	clearn_oled();
 8002cdc:	f7fe fa66 	bl	80011ac <clearn_oled>

	// Print "MAIN MENU:"
	char str[20] = ">> MAIN MENU <<";
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <return_from_menu+0x4c>)
 8002ce2:	1d3c      	adds	r4, r7, #4
 8002ce4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ce6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8002cee:	2103      	movs	r1, #3
 8002cf0:	200a      	movs	r0, #10
 8002cf2:	f7fe fc41 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <return_from_menu+0x50>)
 8002cf8:	1d38      	adds	r0, r7, #4
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	ca06      	ldmia	r2, {r1, r2}
 8002cfe:	f7fe fc15 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002d02:	f7fe fb03 	bl	800130c <ssd1306_UpdateScreen>

	print_menu_init();													// Print all start menu
 8002d06:	f7ff feaf 	bl	8002a68 <print_menu_init>
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd90      	pop	{r4, r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000028 	.word	0x20000028
 8002d18:	2000083c 	.word	0x2000083c
 8002d1c:	08007328 	.word	0x08007328
 8002d20:	20000014 	.word	0x20000014

08002d24 <lora_rx_mode>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// LORA FUNCTIONS
void lora_rx_mode(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
	clearn_oled();
 8002d2a:	f7fe fa3f 	bl	80011ac <clearn_oled>
	print_rectangle_on_head();
 8002d2e:	f7ff fd1b 	bl	8002768 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8002d32:	2300      	movs	r3, #0
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002d40:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <lora_rx_mode+0x88>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6959      	ldr	r1, [r3, #20]
 8002d46:	463b      	mov	r3, r7
 8002d48:	220f      	movs	r2, #15
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 fec3 	bl	8006ad6 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002d50:	2103      	movs	r1, #3
 8002d52:	200a      	movs	r0, #10
 8002d54:	f7fe fc10 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002d58:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <lora_rx_mode+0x8c>)
 8002d5a:	4638      	mov	r0, r7
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	ca06      	ldmia	r2, {r1, r2}
 8002d60:	f7fe fbe4 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002d64:	f7fe fad2 	bl	800130c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002d68:	463b      	mov	r3, r7
 8002d6a:	2210      	movs	r2, #16
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 fdbc 	bl	80068ec <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <lora_rx_mode+0x90>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <lora_rx_mode+0x94>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_RX(true);
 8002d80:	2001      	movs	r0, #1
 8002d82:	f7fd f9e3 	bl	800014c <LoRa_RX>
	}while (button_status != BUTTON_ENTER);
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <lora_rx_mode+0x90>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d1f8      	bne.n	8002d80 <lora_rx_mode+0x5c>
	LoRa_RX(false);
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f7fd f9dc 	bl	800014c <LoRa_RX>

	block_interrupt_form_up_and_down_buttons = false;
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <lora_rx_mode+0x94>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8002d9a:	4b04      	ldr	r3, [pc, #16]	; (8002dac <lora_rx_mode+0x88>)
 8002d9c:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <lora_rx_mode+0x98>)
 8002d9e:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8002da0:	f7ff fef8 	bl	8002b94 <print_menu_items>
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000028 	.word	0x20000028
 8002db0:	20000014 	.word	0x20000014
 8002db4:	20000595 	.word	0x20000595
 8002db8:	20000594 	.word	0x20000594
 8002dbc:	20000788 	.word	0x20000788

08002dc0 <lora_tx_mode>:
// ----------------------------------------------------------------------------------------
void lora_tx_mode(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
	clearn_oled();
 8002dc6:	f7fe f9f1 	bl	80011ac <clearn_oled>
	print_rectangle_on_head();
 8002dca:	f7ff fccd 	bl	8002768 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8002dce:	2300      	movs	r3, #0
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <lora_tx_mode+0x88>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6959      	ldr	r1, [r3, #20]
 8002de2:	463b      	mov	r3, r7
 8002de4:	220f      	movs	r2, #15
 8002de6:	4618      	mov	r0, r3
 8002de8:	f003 fe75 	bl	8006ad6 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002dec:	2103      	movs	r1, #3
 8002dee:	200a      	movs	r0, #10
 8002df0:	f7fe fbc2 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002df4:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <lora_tx_mode+0x8c>)
 8002df6:	4638      	mov	r0, r7
 8002df8:	2301      	movs	r3, #1
 8002dfa:	ca06      	ldmia	r2, {r1, r2}
 8002dfc:	f7fe fb96 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002e00:	f7fe fa84 	bl	800130c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002e04:	463b      	mov	r3, r7
 8002e06:	2210      	movs	r2, #16
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f003 fd6e 	bl	80068ec <memset>


	button_status = BOTTON_DOESENT_PRESS;
 8002e10:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <lora_tx_mode+0x90>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002e16:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <lora_tx_mode+0x94>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_TX(true);
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	f7fd fa37 	bl	8000290 <LoRa_TX>

	}while (button_status != BUTTON_ENTER);
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <lora_tx_mode+0x90>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d1f8      	bne.n	8002e1c <lora_tx_mode+0x5c>
	LoRa_TX(false);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fd fa30 	bl	8000290 <LoRa_TX>

	block_interrupt_form_up_and_down_buttons = false;
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <lora_tx_mode+0x94>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8002e36:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <lora_tx_mode+0x88>)
 8002e38:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <lora_tx_mode+0x98>)
 8002e3a:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8002e3c:	f7ff feaa 	bl	8002b94 <print_menu_items>
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000028 	.word	0x20000028
 8002e4c:	20000014 	.word	0x20000014
 8002e50:	20000595 	.word	0x20000595
 8002e54:	20000594 	.word	0x20000594
 8002e58:	20000788 	.word	0x20000788

08002e5c <nrf_rx_mode>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// NRF FUNCTIONS
void nrf_rx_mode(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
	clearn_oled();
 8002e62:	f7fe f9a3 	bl	80011ac <clearn_oled>
	NRF24_init_RX_mode();
 8002e66:	f7fd fcd1 	bl	800080c <NRF24_init_RX_mode>
	print_rectangle_on_head();
 8002e6a:	f7ff fc7d 	bl	8002768 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8002e6e:	2300      	movs	r3, #0
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <nrf_rx_mode+0x98>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6959      	ldr	r1, [r3, #20]
 8002e82:	463b      	mov	r3, r7
 8002e84:	220f      	movs	r2, #15
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 fe25 	bl	8006ad6 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002e8c:	2103      	movs	r1, #3
 8002e8e:	200a      	movs	r0, #10
 8002e90:	f7fe fb72 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002e94:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <nrf_rx_mode+0x9c>)
 8002e96:	4638      	mov	r0, r7
 8002e98:	2301      	movs	r3, #1
 8002e9a:	ca06      	ldmia	r2, {r1, r2}
 8002e9c:	f7fe fb46 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002ea0:	f7fe fa34 	bl	800130c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f003 fd1e 	bl	80068ec <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <nrf_rx_mode+0xa0>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <nrf_rx_mode+0xa4>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		NRF24L01_Receive();
 8002ebc:	f7fd fc44 	bl	8000748 <NRF24L01_Receive>
	}while (button_status != BUTTON_ENTER);
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <nrf_rx_mode+0xa0>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d1f9      	bne.n	8002ebc <nrf_rx_mode+0x60>

	NRF24_WriteReg(CONFIG, 0x00); 										// STOP work with nrf module  (Power off)
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f7fd ffda 	bl	8000e84 <NRF24_WriteReg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				// Turn off GREEN LED
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ed6:	480b      	ldr	r0, [pc, #44]	; (8002f04 <nrf_rx_mode+0xa8>)
 8002ed8:	f000 fdbb 	bl	8003a52 <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <nrf_rx_mode+0xa4>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8002ee2:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <nrf_rx_mode+0x98>)
 8002ee4:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <nrf_rx_mode+0xac>)
 8002ee6:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8002ee8:	f7ff fe54 	bl	8002b94 <print_menu_items>
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000028 	.word	0x20000028
 8002ef8:	20000014 	.word	0x20000014
 8002efc:	20000595 	.word	0x20000595
 8002f00:	20000594 	.word	0x20000594
 8002f04:	40011000 	.word	0x40011000
 8002f08:	2000071c 	.word	0x2000071c

08002f0c <nrf_tx_mode>:
// ----------------------------------------------------------------------------------------
void nrf_tx_mode(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
	clearn_oled();
 8002f12:	f7fe f94b 	bl	80011ac <clearn_oled>
	NRF24_init_TX_mode();
 8002f16:	f7fd fd3d 	bl	8000994 <NRF24_init_TX_mode>
	print_rectangle_on_head();
 8002f1a:	f7ff fc25 	bl	8002768 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8002f1e:	2300      	movs	r3, #0
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002f2c:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <nrf_tx_mode+0xb0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6959      	ldr	r1, [r3, #20]
 8002f32:	463b      	mov	r3, r7
 8002f34:	220f      	movs	r2, #15
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 fdcd 	bl	8006ad6 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002f3c:	2103      	movs	r1, #3
 8002f3e:	200a      	movs	r0, #10
 8002f40:	f7fe fb1a 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <nrf_tx_mode+0xb4>)
 8002f46:	4638      	mov	r0, r7
 8002f48:	2301      	movs	r3, #1
 8002f4a:	ca06      	ldmia	r2, {r1, r2}
 8002f4c:	f7fe faee 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002f50:	f7fe f9dc 	bl	800130c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002f54:	463b      	mov	r3, r7
 8002f56:	2210      	movs	r2, #16
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f003 fcc6 	bl	80068ec <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8002f60:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <nrf_tx_mode+0xb8>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <nrf_tx_mode+0xbc>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		NRF24L01_Transmission();
 8002f6c:	f7fd fe20 	bl	8000bb0 <NRF24L01_Transmission>
	}while (button_status != BUTTON_ENTER);
 8002f70:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <nrf_tx_mode+0xb8>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d1f9      	bne.n	8002f6c <nrf_tx_mode+0x60>
	i = 1; 																// Counter transmitted data
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <nrf_tx_mode+0xc0>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
	test_data = 0;									  					// Init test data for transmit data
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <nrf_tx_mode+0xc4>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
	retr_cnt_full = 0;
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <nrf_tx_mode+0xc8>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
	cnt_lost = 0;
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <nrf_tx_mode+0xcc>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

	NRF24_WriteReg(CONFIG, 0x00); 										// STOP work with nrf module  (Power off)
 8002f90:	2100      	movs	r1, #0
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7fd ff76 	bl	8000e84 <NRF24_WriteReg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				// Turn off GREEN LED
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f9e:	480f      	ldr	r0, [pc, #60]	; (8002fdc <nrf_tx_mode+0xd0>)
 8002fa0:	f000 fd57 	bl	8003a52 <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <nrf_tx_mode+0xbc>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8002faa:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <nrf_tx_mode+0xb0>)
 8002fac:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <nrf_tx_mode+0xd4>)
 8002fae:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8002fb0:	f7ff fdf0 	bl	8002b94 <print_menu_items>
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000028 	.word	0x20000028
 8002fc0:	20000014 	.word	0x20000014
 8002fc4:	20000595 	.word	0x20000595
 8002fc8:	20000594 	.word	0x20000594
 8002fcc:	20000010 	.word	0x20000010
 8002fd0:	20000144 	.word	0x20000144
 8002fd4:	2000013c 	.word	0x2000013c
 8002fd8:	20000140 	.word	0x20000140
 8002fdc:	40011000 	.word	0x40011000
 8002fe0:	2000071c 	.word	0x2000071c

08002fe4 <items_menu_1_set_par_2>:
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
	print_menu_items();													// Print items on OLED
}
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_2(void)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
	clearn_oled();
 8002fea:	f7fe f8df 	bl	80011ac <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002fee:	2300      	movs	r3, #0
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002ffc:	4b21      	ldr	r3, [pc, #132]	; (8003084 <items_menu_1_set_par_2+0xa0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6959      	ldr	r1, [r3, #20]
 8003002:	463b      	mov	r3, r7
 8003004:	220f      	movs	r2, #15
 8003006:	4618      	mov	r0, r3
 8003008:	f003 fd65 	bl	8006ad6 <strncpy>
	ssd1306_SetCursor(10, 3);
 800300c:	2103      	movs	r1, #3
 800300e:	200a      	movs	r0, #10
 8003010:	f7fe fab2 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003014:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <items_menu_1_set_par_2+0xa4>)
 8003016:	4638      	mov	r0, r7
 8003018:	2301      	movs	r3, #1
 800301a:	ca06      	ldmia	r2, {r1, r2}
 800301c:	f7fe fa86 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003020:	f7fe f974 	bl	800130c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8003024:	463b      	mov	r3, r7
 8003026:	2210      	movs	r2, #16
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f003 fc5e 	bl	80068ec <memset>

	strncpy(str, "Set parameter 2", sizeof(str));
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <items_menu_1_set_par_2+0xa8>)
 8003032:	463c      	mov	r4, r7
 8003034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <items_menu_1_set_par_2+0xac>)
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4619      	mov	r1, r3
 8003042:	2000      	movs	r0, #0
 8003044:	f7fe fa98 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003048:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <items_menu_1_set_par_2+0xa4>)
 800304a:	4638      	mov	r0, r7
 800304c:	2301      	movs	r3, #1
 800304e:	ca06      	ldmia	r2, {r1, r2}
 8003050:	f7fe fa6c 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003054:	f7fe f95a 	bl	800130c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <items_menu_1_set_par_2+0xb0>)
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <items_menu_1_set_par_2+0xb4>)
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <items_menu_1_set_par_2+0xb0>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d1fb      	bne.n	8003064 <items_menu_1_set_par_2+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 800306c:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <items_menu_1_set_par_2+0xb4>)
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <items_menu_1_set_par_2+0xa0>)
 8003074:	4a09      	ldr	r2, [pc, #36]	; (800309c <items_menu_1_set_par_2+0xb8>)
 8003076:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8003078:	f7ff fd8c 	bl	8002b94 <print_menu_items>
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bd90      	pop	{r4, r7, pc}
 8003084:	20000028 	.word	0x20000028
 8003088:	20000014 	.word	0x20000014
 800308c:	0800734c 	.word	0x0800734c
 8003090:	20000030 	.word	0x20000030
 8003094:	20000595 	.word	0x20000595
 8003098:	20000594 	.word	0x20000594
 800309c:	20000788 	.word	0x20000788

080030a0 <items_menu_2_set_par_1>:
//	currentItem = &items_menu_2[0];										// Set global pointer on first menu
//	print_menu_items();													// Print items on OLED
//}
// ----------------------------------------------------------------------------------------
void items_menu_2_set_par_1(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
	clearn_oled();
 80030a6:	f7fe f881 	bl	80011ac <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80030aa:	2300      	movs	r3, #0
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80030b8:	4b22      	ldr	r3, [pc, #136]	; (8003144 <items_menu_2_set_par_1+0xa4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6959      	ldr	r1, [r3, #20]
 80030be:	463b      	mov	r3, r7
 80030c0:	220f      	movs	r2, #15
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 fd07 	bl	8006ad6 <strncpy>
	ssd1306_SetCursor(10, 3);
 80030c8:	2103      	movs	r1, #3
 80030ca:	200a      	movs	r0, #10
 80030cc:	f7fe fa54 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80030d0:	4a1d      	ldr	r2, [pc, #116]	; (8003148 <items_menu_2_set_par_1+0xa8>)
 80030d2:	4638      	mov	r0, r7
 80030d4:	2301      	movs	r3, #1
 80030d6:	ca06      	ldmia	r2, {r1, r2}
 80030d8:	f7fe fa28 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80030dc:	f7fe f916 	bl	800130c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80030e0:	463b      	mov	r3, r7
 80030e2:	2210      	movs	r2, #16
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fc00 	bl	80068ec <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 80030ec:	463b      	mov	r3, r7
 80030ee:	2210      	movs	r2, #16
 80030f0:	4916      	ldr	r1, [pc, #88]	; (800314c <items_menu_2_set_par_1+0xac>)
 80030f2:	4618      	mov	r0, r3
 80030f4:	f003 fcef 	bl	8006ad6 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80030f8:	4b15      	ldr	r3, [pc, #84]	; (8003150 <items_menu_2_set_par_1+0xb0>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	4619      	mov	r1, r3
 8003100:	2000      	movs	r0, #0
 8003102:	f7fe fa39 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003106:	4a10      	ldr	r2, [pc, #64]	; (8003148 <items_menu_2_set_par_1+0xa8>)
 8003108:	4638      	mov	r0, r7
 800310a:	2301      	movs	r3, #1
 800310c:	ca06      	ldmia	r2, {r1, r2}
 800310e:	f7fe fa0d 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003112:	f7fe f8fb 	bl	800130c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <items_menu_2_set_par_1+0xb4>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <items_menu_2_set_par_1+0xb8>)
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <items_menu_2_set_par_1+0xb4>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d1fb      	bne.n	8003122 <items_menu_2_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <items_menu_2_set_par_1+0xb8>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <items_menu_2_set_par_1+0xa4>)
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <items_menu_2_set_par_1+0xbc>)
 8003134:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8003136:	f7ff fd2d 	bl	8002b94 <print_menu_items>
}
 800313a:	bf00      	nop
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000028 	.word	0x20000028
 8003148:	20000014 	.word	0x20000014
 800314c:	0800735c 	.word	0x0800735c
 8003150:	20000030 	.word	0x20000030
 8003154:	20000595 	.word	0x20000595
 8003158:	20000594 	.word	0x20000594
 800315c:	2000071c 	.word	0x2000071c

08003160 <do_it_function_menu_3>:
// ----------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_3(void)        // Print T and H
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
	clearn_oled();
 8003166:	f7fe f821 	bl	80011ac <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 800316a:	2300      	movs	r3, #0
 800316c:	603b      	str	r3, [r7, #0]
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8003178:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <do_it_function_menu_3+0xc8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6959      	ldr	r1, [r3, #20]
 800317e:	463b      	mov	r3, r7
 8003180:	220f      	movs	r2, #15
 8003182:	4618      	mov	r0, r3
 8003184:	f003 fca7 	bl	8006ad6 <strncpy>
	ssd1306_SetCursor(10, 3);
 8003188:	2103      	movs	r1, #3
 800318a:	200a      	movs	r0, #10
 800318c:	f7fe f9f4 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003190:	4a26      	ldr	r2, [pc, #152]	; (800322c <do_it_function_menu_3+0xcc>)
 8003192:	4638      	mov	r0, r7
 8003194:	2301      	movs	r3, #1
 8003196:	ca06      	ldmia	r2, {r1, r2}
 8003198:	f7fe f9c8 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800319c:	f7fe f8b6 	bl	800130c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80031a0:	463b      	mov	r3, r7
 80031a2:	2210      	movs	r2, #16
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f003 fba0 	bl	80068ec <memset>

	strncpy(str, "Doing something 3", sizeof(str));
 80031ac:	4b20      	ldr	r3, [pc, #128]	; (8003230 <do_it_function_menu_3+0xd0>)
 80031ae:	463c      	mov	r4, r7
 80031b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 80031b6:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <do_it_function_menu_3+0xd4>)
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	4619      	mov	r1, r3
 80031be:	2000      	movs	r0, #0
 80031c0:	f7fe f9da 	bl	8001578 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <do_it_function_menu_3+0xcc>)
 80031c6:	4638      	mov	r0, r7
 80031c8:	2301      	movs	r3, #1
 80031ca:	ca06      	ldmia	r2, {r1, r2}
 80031cc:	f7fe f9ae 	bl	800152c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80031d0:	f7fe f89c 	bl	800130c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <do_it_function_menu_3+0xd8>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80031da:	4b18      	ldr	r3, [pc, #96]	; (800323c <do_it_function_menu_3+0xdc>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80031e0:	2200      	movs	r2, #0
 80031e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031e6:	4816      	ldr	r0, [pc, #88]	; (8003240 <do_it_function_menu_3+0xe0>)
 80031e8:	f000 fc33 	bl	8003a52 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80031ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031f0:	f000 f8b2 	bl	8003358 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80031f4:	2201      	movs	r2, #1
 80031f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031fa:	4811      	ldr	r0, [pc, #68]	; (8003240 <do_it_function_menu_3+0xe0>)
 80031fc:	f000 fc29 	bl	8003a52 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003200:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003204:	f000 f8a8 	bl	8003358 <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <do_it_function_menu_3+0xd8>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d1e7      	bne.n	80031e0 <do_it_function_menu_3+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <do_it_function_menu_3+0xdc>)
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <do_it_function_menu_3+0xc8>)
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <do_it_function_menu_3+0xe4>)
 800321a:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 800321c:	f7ff fcba 	bl	8002b94 <print_menu_items>
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	bd90      	pop	{r4, r7, pc}
 8003228:	20000028 	.word	0x20000028
 800322c:	20000014 	.word	0x20000014
 8003230:	0800736c 	.word	0x0800736c
 8003234:	20000030 	.word	0x20000030
 8003238:	20000595 	.word	0x20000595
 800323c:	20000594 	.word	0x20000594
 8003240:	40011000 	.word	0x40011000
 8003244:	200007f4 	.word	0x200007f4

08003248 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003248:	480c      	ldr	r0, [pc, #48]	; (800327c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800324a:	490d      	ldr	r1, [pc, #52]	; (8003280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800324c:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003250:	e002      	b.n	8003258 <LoopCopyDataInit>

08003252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003256:	3304      	adds	r3, #4

08003258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800325a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800325c:	d3f9      	bcc.n	8003252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003260:	4c0a      	ldr	r4, [pc, #40]	; (800328c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003264:	e001      	b.n	800326a <LoopFillZerobss>

08003266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003268:	3204      	adds	r2, #4

0800326a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800326a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800326c:	d3fb      	bcc.n	8003266 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800326e:	f7fe ffeb 	bl	8002248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003272:	f003 faef 	bl	8006854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003276:	f7fe fa71 	bl	800175c <main>
  bx lr
 800327a:	4770      	bx	lr
  ldr r0, =_sdata
 800327c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003280:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8003284:	08007b74 	.word	0x08007b74
  ldr r2, =_sbss
 8003288:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800328c:	200008bc 	.word	0x200008bc

08003290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003290:	e7fe      	b.n	8003290 <ADC1_2_IRQHandler>
	...

08003294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_Init+0x28>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a07      	ldr	r2, [pc, #28]	; (80032bc <HAL_Init+0x28>)
 800329e:	f043 0310 	orr.w	r3, r3, #16
 80032a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a4:	2003      	movs	r0, #3
 80032a6:	f000 f947 	bl	8003538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f000 f808 	bl	80032c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032b0:	f7fe fcfc 	bl	8001cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40022000 	.word	0x40022000

080032c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032c8:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_InitTick+0x54>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_InitTick+0x58>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4619      	mov	r1, r3
 80032d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f95f 	bl	80035a2 <HAL_SYSTICK_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00e      	b.n	800330c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b0f      	cmp	r3, #15
 80032f2:	d80a      	bhi.n	800330a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032f4:	2200      	movs	r2, #0
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032fc:	f000 f927 	bl	800354e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003300:	4a06      	ldr	r2, [pc, #24]	; (800331c <HAL_InitTick+0x5c>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	e000      	b.n	800330c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000024 	.word	0x20000024
 8003318:	20000044 	.word	0x20000044
 800331c:	20000040 	.word	0x20000040

08003320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_IncTick+0x1c>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_IncTick+0x20>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4413      	add	r3, r2
 8003330:	4a03      	ldr	r2, [pc, #12]	; (8003340 <HAL_IncTick+0x20>)
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	20000044 	.word	0x20000044
 8003340:	200008a8 	.word	0x200008a8

08003344 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return uwTick;
 8003348:	4b02      	ldr	r3, [pc, #8]	; (8003354 <HAL_GetTick+0x10>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	200008a8 	.word	0x200008a8

08003358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003360:	f7ff fff0 	bl	8003344 <HAL_GetTick>
 8003364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003370:	d005      	beq.n	800337e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_Delay+0x44>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800337e:	bf00      	nop
 8003380:	f7ff ffe0 	bl	8003344 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	429a      	cmp	r2, r3
 800338e:	d8f7      	bhi.n	8003380 <HAL_Delay+0x28>
  {
  }
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000044 	.word	0x20000044

080033a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033bc:	4013      	ands	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	60d3      	str	r3, [r2, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <__NVIC_GetPriorityGrouping+0x18>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	f003 0307 	and.w	r3, r3, #7
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db0b      	blt.n	800342e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	4906      	ldr	r1, [pc, #24]	; (8003438 <__NVIC_EnableIRQ+0x34>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2001      	movs	r0, #1
 8003426:	fa00 f202 	lsl.w	r2, r0, r2
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	e000e100 	.word	0xe000e100

0800343c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	6039      	str	r1, [r7, #0]
 8003446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344c:	2b00      	cmp	r3, #0
 800344e:	db0a      	blt.n	8003466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	490c      	ldr	r1, [pc, #48]	; (8003488 <__NVIC_SetPriority+0x4c>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	0112      	lsls	r2, r2, #4
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	440b      	add	r3, r1
 8003460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003464:	e00a      	b.n	800347c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4908      	ldr	r1, [pc, #32]	; (800348c <__NVIC_SetPriority+0x50>)
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	3b04      	subs	r3, #4
 8003474:	0112      	lsls	r2, r2, #4
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	440b      	add	r3, r1
 800347a:	761a      	strb	r2, [r3, #24]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000e100 	.word	0xe000e100
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003490:	b480      	push	{r7}
 8003492:	b089      	sub	sp, #36	; 0x24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f1c3 0307 	rsb	r3, r3, #7
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	bf28      	it	cs
 80034ae:	2304      	movcs	r3, #4
 80034b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3304      	adds	r3, #4
 80034b6:	2b06      	cmp	r3, #6
 80034b8:	d902      	bls.n	80034c0 <NVIC_EncodePriority+0x30>
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3b03      	subs	r3, #3
 80034be:	e000      	b.n	80034c2 <NVIC_EncodePriority+0x32>
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43da      	mvns	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	401a      	ands	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	43d9      	mvns	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	4313      	orrs	r3, r2
         );
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3724      	adds	r7, #36	; 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3b01      	subs	r3, #1
 8003500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003504:	d301      	bcc.n	800350a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003506:	2301      	movs	r3, #1
 8003508:	e00f      	b.n	800352a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800350a:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <SysTick_Config+0x40>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003512:	210f      	movs	r1, #15
 8003514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003518:	f7ff ff90 	bl	800343c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <SysTick_Config+0x40>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003522:	4b04      	ldr	r3, [pc, #16]	; (8003534 <SysTick_Config+0x40>)
 8003524:	2207      	movs	r2, #7
 8003526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	e000e010 	.word	0xe000e010

08003538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff2d 	bl	80033a0 <__NVIC_SetPriorityGrouping>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800354e:	b580      	push	{r7, lr}
 8003550:	b086      	sub	sp, #24
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003560:	f7ff ff42 	bl	80033e8 <__NVIC_GetPriorityGrouping>
 8003564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	6978      	ldr	r0, [r7, #20]
 800356c:	f7ff ff90 	bl	8003490 <NVIC_EncodePriority>
 8003570:	4602      	mov	r2, r0
 8003572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff5f 	bl	800343c <__NVIC_SetPriority>
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff35 	bl	8003404 <__NVIC_EnableIRQ>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ffa2 	bl	80034f4 <SysTick_Config>
 80035b0:	4603      	mov	r3, r0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d008      	beq.n	80035e2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2204      	movs	r2, #4
 80035d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e020      	b.n	8003624 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 020e 	bic.w	r2, r2, #14
 80035f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f202 	lsl.w	r2, r1, r2
 8003610:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003622:	7bfb      	ldrb	r3, [r7, #15]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
	...

08003630 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003642:	2b02      	cmp	r3, #2
 8003644:	d005      	beq.n	8003652 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2204      	movs	r2, #4
 800364a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
 8003650:	e051      	b.n	80036f6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 020e 	bic.w	r2, r2, #14
 8003660:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a22      	ldr	r2, [pc, #136]	; (8003700 <HAL_DMA_Abort_IT+0xd0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d029      	beq.n	80036d0 <HAL_DMA_Abort_IT+0xa0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a20      	ldr	r2, [pc, #128]	; (8003704 <HAL_DMA_Abort_IT+0xd4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_DMA_Abort_IT+0x9c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1f      	ldr	r2, [pc, #124]	; (8003708 <HAL_DMA_Abort_IT+0xd8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01a      	beq.n	80036c6 <HAL_DMA_Abort_IT+0x96>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1d      	ldr	r2, [pc, #116]	; (800370c <HAL_DMA_Abort_IT+0xdc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d012      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x90>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <HAL_DMA_Abort_IT+0xe0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00a      	beq.n	80036ba <HAL_DMA_Abort_IT+0x8a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <HAL_DMA_Abort_IT+0xe4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d102      	bne.n	80036b4 <HAL_DMA_Abort_IT+0x84>
 80036ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036b2:	e00e      	b.n	80036d2 <HAL_DMA_Abort_IT+0xa2>
 80036b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036b8:	e00b      	b.n	80036d2 <HAL_DMA_Abort_IT+0xa2>
 80036ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036be:	e008      	b.n	80036d2 <HAL_DMA_Abort_IT+0xa2>
 80036c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036c4:	e005      	b.n	80036d2 <HAL_DMA_Abort_IT+0xa2>
 80036c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ca:	e002      	b.n	80036d2 <HAL_DMA_Abort_IT+0xa2>
 80036cc:	2310      	movs	r3, #16
 80036ce:	e000      	b.n	80036d2 <HAL_DMA_Abort_IT+0xa2>
 80036d0:	2301      	movs	r3, #1
 80036d2:	4a11      	ldr	r2, [pc, #68]	; (8003718 <HAL_DMA_Abort_IT+0xe8>)
 80036d4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
    } 
  }
  return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40020008 	.word	0x40020008
 8003704:	4002001c 	.word	0x4002001c
 8003708:	40020030 	.word	0x40020030
 800370c:	40020044 	.word	0x40020044
 8003710:	40020058 	.word	0x40020058
 8003714:	4002006c 	.word	0x4002006c
 8003718:	40020000 	.word	0x40020000

0800371c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800371c:	b480      	push	{r7}
 800371e:	b08b      	sub	sp, #44	; 0x2c
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800372a:	2300      	movs	r3, #0
 800372c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800372e:	e169      	b.n	8003a04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003730:	2201      	movs	r2, #1
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	429a      	cmp	r2, r3
 800374a:	f040 8158 	bne.w	80039fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4a9a      	ldr	r2, [pc, #616]	; (80039bc <HAL_GPIO_Init+0x2a0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d05e      	beq.n	8003816 <HAL_GPIO_Init+0xfa>
 8003758:	4a98      	ldr	r2, [pc, #608]	; (80039bc <HAL_GPIO_Init+0x2a0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d875      	bhi.n	800384a <HAL_GPIO_Init+0x12e>
 800375e:	4a98      	ldr	r2, [pc, #608]	; (80039c0 <HAL_GPIO_Init+0x2a4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d058      	beq.n	8003816 <HAL_GPIO_Init+0xfa>
 8003764:	4a96      	ldr	r2, [pc, #600]	; (80039c0 <HAL_GPIO_Init+0x2a4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d86f      	bhi.n	800384a <HAL_GPIO_Init+0x12e>
 800376a:	4a96      	ldr	r2, [pc, #600]	; (80039c4 <HAL_GPIO_Init+0x2a8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d052      	beq.n	8003816 <HAL_GPIO_Init+0xfa>
 8003770:	4a94      	ldr	r2, [pc, #592]	; (80039c4 <HAL_GPIO_Init+0x2a8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d869      	bhi.n	800384a <HAL_GPIO_Init+0x12e>
 8003776:	4a94      	ldr	r2, [pc, #592]	; (80039c8 <HAL_GPIO_Init+0x2ac>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d04c      	beq.n	8003816 <HAL_GPIO_Init+0xfa>
 800377c:	4a92      	ldr	r2, [pc, #584]	; (80039c8 <HAL_GPIO_Init+0x2ac>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d863      	bhi.n	800384a <HAL_GPIO_Init+0x12e>
 8003782:	4a92      	ldr	r2, [pc, #584]	; (80039cc <HAL_GPIO_Init+0x2b0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d046      	beq.n	8003816 <HAL_GPIO_Init+0xfa>
 8003788:	4a90      	ldr	r2, [pc, #576]	; (80039cc <HAL_GPIO_Init+0x2b0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d85d      	bhi.n	800384a <HAL_GPIO_Init+0x12e>
 800378e:	2b12      	cmp	r3, #18
 8003790:	d82a      	bhi.n	80037e8 <HAL_GPIO_Init+0xcc>
 8003792:	2b12      	cmp	r3, #18
 8003794:	d859      	bhi.n	800384a <HAL_GPIO_Init+0x12e>
 8003796:	a201      	add	r2, pc, #4	; (adr r2, 800379c <HAL_GPIO_Init+0x80>)
 8003798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379c:	08003817 	.word	0x08003817
 80037a0:	080037f1 	.word	0x080037f1
 80037a4:	08003803 	.word	0x08003803
 80037a8:	08003845 	.word	0x08003845
 80037ac:	0800384b 	.word	0x0800384b
 80037b0:	0800384b 	.word	0x0800384b
 80037b4:	0800384b 	.word	0x0800384b
 80037b8:	0800384b 	.word	0x0800384b
 80037bc:	0800384b 	.word	0x0800384b
 80037c0:	0800384b 	.word	0x0800384b
 80037c4:	0800384b 	.word	0x0800384b
 80037c8:	0800384b 	.word	0x0800384b
 80037cc:	0800384b 	.word	0x0800384b
 80037d0:	0800384b 	.word	0x0800384b
 80037d4:	0800384b 	.word	0x0800384b
 80037d8:	0800384b 	.word	0x0800384b
 80037dc:	0800384b 	.word	0x0800384b
 80037e0:	080037f9 	.word	0x080037f9
 80037e4:	0800380d 	.word	0x0800380d
 80037e8:	4a79      	ldr	r2, [pc, #484]	; (80039d0 <HAL_GPIO_Init+0x2b4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037ee:	e02c      	b.n	800384a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	623b      	str	r3, [r7, #32]
          break;
 80037f6:	e029      	b.n	800384c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	3304      	adds	r3, #4
 80037fe:	623b      	str	r3, [r7, #32]
          break;
 8003800:	e024      	b.n	800384c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	3308      	adds	r3, #8
 8003808:	623b      	str	r3, [r7, #32]
          break;
 800380a:	e01f      	b.n	800384c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	330c      	adds	r3, #12
 8003812:	623b      	str	r3, [r7, #32]
          break;
 8003814:	e01a      	b.n	800384c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800381e:	2304      	movs	r3, #4
 8003820:	623b      	str	r3, [r7, #32]
          break;
 8003822:	e013      	b.n	800384c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d105      	bne.n	8003838 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800382c:	2308      	movs	r3, #8
 800382e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	611a      	str	r2, [r3, #16]
          break;
 8003836:	e009      	b.n	800384c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003838:	2308      	movs	r3, #8
 800383a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	615a      	str	r2, [r3, #20]
          break;
 8003842:	e003      	b.n	800384c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003844:	2300      	movs	r3, #0
 8003846:	623b      	str	r3, [r7, #32]
          break;
 8003848:	e000      	b.n	800384c <HAL_GPIO_Init+0x130>
          break;
 800384a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2bff      	cmp	r3, #255	; 0xff
 8003850:	d801      	bhi.n	8003856 <HAL_GPIO_Init+0x13a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	e001      	b.n	800385a <HAL_GPIO_Init+0x13e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2bff      	cmp	r3, #255	; 0xff
 8003860:	d802      	bhi.n	8003868 <HAL_GPIO_Init+0x14c>
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	e002      	b.n	800386e <HAL_GPIO_Init+0x152>
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	3b08      	subs	r3, #8
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	210f      	movs	r1, #15
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	fa01 f303 	lsl.w	r3, r1, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	401a      	ands	r2, r3
 8003880:	6a39      	ldr	r1, [r7, #32]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	fa01 f303 	lsl.w	r3, r1, r3
 8003888:	431a      	orrs	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80b1 	beq.w	80039fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800389c:	4b4d      	ldr	r3, [pc, #308]	; (80039d4 <HAL_GPIO_Init+0x2b8>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	4a4c      	ldr	r2, [pc, #304]	; (80039d4 <HAL_GPIO_Init+0x2b8>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6193      	str	r3, [r2, #24]
 80038a8:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_GPIO_Init+0x2b8>)
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038b4:	4a48      	ldr	r2, [pc, #288]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	3302      	adds	r3, #2
 80038bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	220f      	movs	r2, #15
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a40      	ldr	r2, [pc, #256]	; (80039dc <HAL_GPIO_Init+0x2c0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_GPIO_Init+0x1ec>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a3f      	ldr	r2, [pc, #252]	; (80039e0 <HAL_GPIO_Init+0x2c4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00d      	beq.n	8003904 <HAL_GPIO_Init+0x1e8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a3e      	ldr	r2, [pc, #248]	; (80039e4 <HAL_GPIO_Init+0x2c8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d007      	beq.n	8003900 <HAL_GPIO_Init+0x1e4>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a3d      	ldr	r2, [pc, #244]	; (80039e8 <HAL_GPIO_Init+0x2cc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d101      	bne.n	80038fc <HAL_GPIO_Init+0x1e0>
 80038f8:	2303      	movs	r3, #3
 80038fa:	e006      	b.n	800390a <HAL_GPIO_Init+0x1ee>
 80038fc:	2304      	movs	r3, #4
 80038fe:	e004      	b.n	800390a <HAL_GPIO_Init+0x1ee>
 8003900:	2302      	movs	r3, #2
 8003902:	e002      	b.n	800390a <HAL_GPIO_Init+0x1ee>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_GPIO_Init+0x1ee>
 8003908:	2300      	movs	r3, #0
 800390a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390c:	f002 0203 	and.w	r2, r2, #3
 8003910:	0092      	lsls	r2, r2, #2
 8003912:	4093      	lsls	r3, r2
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800391a:	492f      	ldr	r1, [pc, #188]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	3302      	adds	r3, #2
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d006      	beq.n	8003942 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	492c      	ldr	r1, [pc, #176]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	4313      	orrs	r3, r2
 800393e:	600b      	str	r3, [r1, #0]
 8003940:	e006      	b.n	8003950 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003942:	4b2a      	ldr	r3, [pc, #168]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	43db      	mvns	r3, r3
 800394a:	4928      	ldr	r1, [pc, #160]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 800394c:	4013      	ands	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800395c:	4b23      	ldr	r3, [pc, #140]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	4922      	ldr	r1, [pc, #136]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
 8003968:	e006      	b.n	8003978 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	43db      	mvns	r3, r3
 8003972:	491e      	ldr	r1, [pc, #120]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003974:	4013      	ands	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	4918      	ldr	r1, [pc, #96]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	608b      	str	r3, [r1, #8]
 8003990:	e006      	b.n	80039a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003992:	4b16      	ldr	r3, [pc, #88]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	43db      	mvns	r3, r3
 800399a:	4914      	ldr	r1, [pc, #80]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 800399c:	4013      	ands	r3, r2
 800399e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d021      	beq.n	80039f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	490e      	ldr	r1, [pc, #56]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60cb      	str	r3, [r1, #12]
 80039b8:	e021      	b.n	80039fe <HAL_GPIO_Init+0x2e2>
 80039ba:	bf00      	nop
 80039bc:	10320000 	.word	0x10320000
 80039c0:	10310000 	.word	0x10310000
 80039c4:	10220000 	.word	0x10220000
 80039c8:	10210000 	.word	0x10210000
 80039cc:	10120000 	.word	0x10120000
 80039d0:	10110000 	.word	0x10110000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40010800 	.word	0x40010800
 80039e0:	40010c00 	.word	0x40010c00
 80039e4:	40011000 	.word	0x40011000
 80039e8:	40011400 	.word	0x40011400
 80039ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_GPIO_Init+0x304>)
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	4909      	ldr	r1, [pc, #36]	; (8003a20 <HAL_GPIO_Init+0x304>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	3301      	adds	r3, #1
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f47f ae8e 	bne.w	8003730 <HAL_GPIO_Init+0x14>
  }
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	372c      	adds	r7, #44	; 0x2c
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	40010400 	.word	0x40010400

08003a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	887b      	ldrh	r3, [r7, #2]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
 8003a40:	e001      	b.n	8003a46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	807b      	strh	r3, [r7, #2]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a62:	787b      	ldrb	r3, [r7, #1]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a68:	887a      	ldrh	r2, [r7, #2]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a6e:	e003      	b.n	8003a78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a70:	887b      	ldrh	r3, [r7, #2]
 8003a72:	041a      	lsls	r2, r3, #16
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	611a      	str	r2, [r3, #16]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr

08003a82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b085      	sub	sp, #20
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a94:	887a      	ldrh	r2, [r7, #2]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	041a      	lsls	r2, r3, #16
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	43d9      	mvns	r1, r3
 8003aa0:	887b      	ldrh	r3, [r7, #2]
 8003aa2:	400b      	ands	r3, r1
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	611a      	str	r2, [r3, #16]
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003abe:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d006      	beq.n	8003ad8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aca:	4a05      	ldr	r2, [pc, #20]	; (8003ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe f890 	bl	8001bf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40010400 	.word	0x40010400

08003ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e12b      	b.n	8003d4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fe f900 	bl	8001d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2224      	movs	r2, #36	; 0x24
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b48:	f000 fffa 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 8003b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4a81      	ldr	r2, [pc, #516]	; (8003d58 <HAL_I2C_Init+0x274>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d807      	bhi.n	8003b68 <HAL_I2C_Init+0x84>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a80      	ldr	r2, [pc, #512]	; (8003d5c <HAL_I2C_Init+0x278>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	bf94      	ite	ls
 8003b60:	2301      	movls	r3, #1
 8003b62:	2300      	movhi	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e006      	b.n	8003b76 <HAL_I2C_Init+0x92>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a7d      	ldr	r2, [pc, #500]	; (8003d60 <HAL_I2C_Init+0x27c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	bf94      	ite	ls
 8003b70:	2301      	movls	r3, #1
 8003b72:	2300      	movhi	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0e7      	b.n	8003d4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a78      	ldr	r2, [pc, #480]	; (8003d64 <HAL_I2C_Init+0x280>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	0c9b      	lsrs	r3, r3, #18
 8003b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4a6a      	ldr	r2, [pc, #424]	; (8003d58 <HAL_I2C_Init+0x274>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d802      	bhi.n	8003bb8 <HAL_I2C_Init+0xd4>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	e009      	b.n	8003bcc <HAL_I2C_Init+0xe8>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	4a69      	ldr	r2, [pc, #420]	; (8003d68 <HAL_I2C_Init+0x284>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	099b      	lsrs	r3, r3, #6
 8003bca:	3301      	adds	r3, #1
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	495c      	ldr	r1, [pc, #368]	; (8003d58 <HAL_I2C_Init+0x274>)
 8003be8:	428b      	cmp	r3, r1
 8003bea:	d819      	bhi.n	8003c20 <HAL_I2C_Init+0x13c>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e59      	subs	r1, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bfa:	1c59      	adds	r1, r3, #1
 8003bfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c00:	400b      	ands	r3, r1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_I2C_Init+0x138>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1e59      	subs	r1, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c14:	3301      	adds	r3, #1
 8003c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1a:	e051      	b.n	8003cc0 <HAL_I2C_Init+0x1dc>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	e04f      	b.n	8003cc0 <HAL_I2C_Init+0x1dc>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d111      	bne.n	8003c4c <HAL_I2C_Init+0x168>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1e58      	subs	r0, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	440b      	add	r3, r1
 8003c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	e012      	b.n	8003c72 <HAL_I2C_Init+0x18e>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	0099      	lsls	r1, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c62:	3301      	adds	r3, #1
 8003c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Init+0x196>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e022      	b.n	8003cc0 <HAL_I2C_Init+0x1dc>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10e      	bne.n	8003ca0 <HAL_I2C_Init+0x1bc>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1e58      	subs	r0, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6859      	ldr	r1, [r3, #4]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	440b      	add	r3, r1
 8003c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c94:	3301      	adds	r3, #1
 8003c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9e:	e00f      	b.n	8003cc0 <HAL_I2C_Init+0x1dc>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1e58      	subs	r0, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6859      	ldr	r1, [r3, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	0099      	lsls	r1, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	6809      	ldr	r1, [r1, #0]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69da      	ldr	r2, [r3, #28]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6911      	ldr	r1, [r2, #16]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68d2      	ldr	r2, [r2, #12]
 8003cfa:	4311      	orrs	r1, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	000186a0 	.word	0x000186a0
 8003d5c:	001e847f 	.word	0x001e847f
 8003d60:	003d08ff 	.word	0x003d08ff
 8003d64:	431bde83 	.word	0x431bde83
 8003d68:	10624dd3 	.word	0x10624dd3

08003d6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	4608      	mov	r0, r1
 8003d76:	4611      	mov	r1, r2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	817b      	strh	r3, [r7, #10]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	813b      	strh	r3, [r7, #8]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d86:	f7ff fadd 	bl	8003344 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	f040 80d9 	bne.w	8003f4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2319      	movs	r3, #25
 8003da0:	2201      	movs	r2, #1
 8003da2:	496d      	ldr	r1, [pc, #436]	; (8003f58 <HAL_I2C_Mem_Write+0x1ec>)
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f971 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
 8003db2:	e0cc      	b.n	8003f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_I2C_Mem_Write+0x56>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e0c5      	b.n	8003f4e <HAL_I2C_Mem_Write+0x1e2>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d007      	beq.n	8003de8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2221      	movs	r2, #33	; 0x21
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2240      	movs	r2, #64	; 0x40
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a3a      	ldr	r2, [r7, #32]
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a4d      	ldr	r2, [pc, #308]	; (8003f5c <HAL_I2C_Mem_Write+0x1f0>)
 8003e28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e2a:	88f8      	ldrh	r0, [r7, #6]
 8003e2c:	893a      	ldrh	r2, [r7, #8]
 8003e2e:	8979      	ldrh	r1, [r7, #10]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	4603      	mov	r3, r0
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f890 	bl	8003f60 <I2C_RequestMemoryWrite>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d052      	beq.n	8003eec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e081      	b.n	8003f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f9f2 	bl	8004238 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00d      	beq.n	8003e76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d107      	bne.n	8003e72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e06b      	b.n	8003f4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d11b      	bne.n	8003eec <HAL_I2C_Mem_Write+0x180>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d017      	beq.n	8003eec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	781a      	ldrb	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1aa      	bne.n	8003e4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f9de 	bl	80042ba <I2C_WaitOnBTFFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00d      	beq.n	8003f20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d107      	bne.n	8003f1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e016      	b.n	8003f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e000      	b.n	8003f4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
  }
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	00100002 	.word	0x00100002
 8003f5c:	ffff0000 	.word	0xffff0000

08003f60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	4608      	mov	r0, r1
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	817b      	strh	r3, [r7, #10]
 8003f72:	460b      	mov	r3, r1
 8003f74:	813b      	strh	r3, [r7, #8]
 8003f76:	4613      	mov	r3, r2
 8003f78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f878 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb0:	d103      	bne.n	8003fba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e05f      	b.n	800407e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fbe:	897b      	ldrh	r3, [r7, #10]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	492d      	ldr	r1, [pc, #180]	; (8004088 <I2C_RequestMemoryWrite+0x128>)
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 f8b0 	bl	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e04c      	b.n	800407e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffc:	6a39      	ldr	r1, [r7, #32]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f91a 	bl	8004238 <I2C_WaitOnTXEFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	2b04      	cmp	r3, #4
 8004010:	d107      	bne.n	8004022 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004020:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e02b      	b.n	800407e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d105      	bne.n	8004038 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800402c:	893b      	ldrh	r3, [r7, #8]
 800402e:	b2da      	uxtb	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	611a      	str	r2, [r3, #16]
 8004036:	e021      	b.n	800407c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004038:	893b      	ldrh	r3, [r7, #8]
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	b29b      	uxth	r3, r3
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004048:	6a39      	ldr	r1, [r7, #32]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f8f4 	bl	8004238 <I2C_WaitOnTXEFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	2b04      	cmp	r3, #4
 800405c:	d107      	bne.n	800406e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e005      	b.n	800407e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004072:	893b      	ldrh	r3, [r7, #8]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	00010002 	.word	0x00010002

0800408c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800409c:	e025      	b.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a4:	d021      	beq.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a6:	f7ff f94d 	bl	8003344 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d116      	bne.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f043 0220 	orr.w	r2, r3, #32
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e023      	b.n	8004132 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10d      	bne.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	43da      	mvns	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	e00c      	b.n	800412a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	43da      	mvns	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4013      	ands	r3, r2
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	bf0c      	ite	eq
 8004122:	2301      	moveq	r3, #1
 8004124:	2300      	movne	r3, #0
 8004126:	b2db      	uxtb	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	429a      	cmp	r2, r3
 800412e:	d0b6      	beq.n	800409e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
 8004146:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004148:	e051      	b.n	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004158:	d123      	bne.n	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004168:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004172:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f043 0204 	orr.w	r2, r3, #4
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e046      	b.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a8:	d021      	beq.n	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7ff f8cb 	bl	8003344 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d116      	bne.n	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f043 0220 	orr.w	r2, r3, #32
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e020      	b.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d10c      	bne.n	8004212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	43da      	mvns	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4013      	ands	r3, r2
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	e00b      	b.n	800422a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	43da      	mvns	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4013      	ands	r3, r2
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d18d      	bne.n	800414a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004244:	e02d      	b.n	80042a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f878 	bl	800433c <I2C_IsAcknowledgeFailed>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e02d      	b.n	80042b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800425c:	d021      	beq.n	80042a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425e:	f7ff f871 	bl	8003344 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	429a      	cmp	r2, r3
 800426c:	d302      	bcc.n	8004274 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d116      	bne.n	80042a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e007      	b.n	80042b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d1ca      	bne.n	8004246 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042c6:	e02d      	b.n	8004324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f837 	bl	800433c <I2C_IsAcknowledgeFailed>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e02d      	b.n	8004334 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042de:	d021      	beq.n	8004324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e0:	f7ff f830 	bl	8003344 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d116      	bne.n	8004324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f043 0220 	orr.w	r2, r3, #32
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e007      	b.n	8004334 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b04      	cmp	r3, #4
 8004330:	d1ca      	bne.n	80042c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004352:	d11b      	bne.n	800438c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800435c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	f043 0204 	orr.w	r2, r3, #4
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e26c      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8087 	beq.w	80044c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043b8:	4b92      	ldr	r3, [pc, #584]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d00c      	beq.n	80043de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043c4:	4b8f      	ldr	r3, [pc, #572]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 030c 	and.w	r3, r3, #12
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d112      	bne.n	80043f6 <HAL_RCC_OscConfig+0x5e>
 80043d0:	4b8c      	ldr	r3, [pc, #560]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043dc:	d10b      	bne.n	80043f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043de:	4b89      	ldr	r3, [pc, #548]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d06c      	beq.n	80044c4 <HAL_RCC_OscConfig+0x12c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d168      	bne.n	80044c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e246      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fe:	d106      	bne.n	800440e <HAL_RCC_OscConfig+0x76>
 8004400:	4b80      	ldr	r3, [pc, #512]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a7f      	ldr	r2, [pc, #508]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	e02e      	b.n	800446c <HAL_RCC_OscConfig+0xd4>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0x98>
 8004416:	4b7b      	ldr	r3, [pc, #492]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a7a      	ldr	r2, [pc, #488]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 800441c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b78      	ldr	r3, [pc, #480]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a77      	ldr	r2, [pc, #476]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e01d      	b.n	800446c <HAL_RCC_OscConfig+0xd4>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004438:	d10c      	bne.n	8004454 <HAL_RCC_OscConfig+0xbc>
 800443a:	4b72      	ldr	r3, [pc, #456]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a71      	ldr	r2, [pc, #452]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	4b6f      	ldr	r3, [pc, #444]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a6e      	ldr	r2, [pc, #440]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e00b      	b.n	800446c <HAL_RCC_OscConfig+0xd4>
 8004454:	4b6b      	ldr	r3, [pc, #428]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a6a      	ldr	r2, [pc, #424]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 800445a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	4b68      	ldr	r3, [pc, #416]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a67      	ldr	r2, [pc, #412]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800446a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d013      	beq.n	800449c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fe ff66 	bl	8003344 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800447c:	f7fe ff62 	bl	8003344 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b64      	cmp	r3, #100	; 0x64
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e1fa      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448e:	4b5d      	ldr	r3, [pc, #372]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCC_OscConfig+0xe4>
 800449a:	e014      	b.n	80044c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449c:	f7fe ff52 	bl	8003344 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a4:	f7fe ff4e 	bl	8003344 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b64      	cmp	r3, #100	; 0x64
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e1e6      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b6:	4b53      	ldr	r3, [pc, #332]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f0      	bne.n	80044a4 <HAL_RCC_OscConfig+0x10c>
 80044c2:	e000      	b.n	80044c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d063      	beq.n	800459a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044d2:	4b4c      	ldr	r3, [pc, #304]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00b      	beq.n	80044f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044de:	4b49      	ldr	r3, [pc, #292]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d11c      	bne.n	8004524 <HAL_RCC_OscConfig+0x18c>
 80044ea:	4b46      	ldr	r3, [pc, #280]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d116      	bne.n	8004524 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f6:	4b43      	ldr	r3, [pc, #268]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <HAL_RCC_OscConfig+0x176>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d001      	beq.n	800450e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e1ba      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450e:	4b3d      	ldr	r3, [pc, #244]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4939      	ldr	r1, [pc, #228]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004522:	e03a      	b.n	800459a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d020      	beq.n	800456e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800452c:	4b36      	ldr	r3, [pc, #216]	; (8004608 <HAL_RCC_OscConfig+0x270>)
 800452e:	2201      	movs	r2, #1
 8004530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004532:	f7fe ff07 	bl	8003344 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453a:	f7fe ff03 	bl	8003344 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e19b      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800454c:	4b2d      	ldr	r3, [pc, #180]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004558:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4927      	ldr	r1, [pc, #156]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]
 800456c:	e015      	b.n	800459a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800456e:	4b26      	ldr	r3, [pc, #152]	; (8004608 <HAL_RCC_OscConfig+0x270>)
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004574:	f7fe fee6 	bl	8003344 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457c:	f7fe fee2 	bl	8003344 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e17a      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458e:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d03a      	beq.n	800461c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d019      	beq.n	80045e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ae:	4b17      	ldr	r3, [pc, #92]	; (800460c <HAL_RCC_OscConfig+0x274>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b4:	f7fe fec6 	bl	8003344 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045bc:	f7fe fec2 	bl	8003344 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e15a      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045da:	2001      	movs	r0, #1
 80045dc:	f000 fad8 	bl	8004b90 <RCC_Delay>
 80045e0:	e01c      	b.n	800461c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e2:	4b0a      	ldr	r3, [pc, #40]	; (800460c <HAL_RCC_OscConfig+0x274>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e8:	f7fe feac 	bl	8003344 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ee:	e00f      	b.n	8004610 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f0:	f7fe fea8 	bl	8003344 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d908      	bls.n	8004610 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e140      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000
 8004608:	42420000 	.word	0x42420000
 800460c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004610:	4b9e      	ldr	r3, [pc, #632]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e9      	bne.n	80045f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80a6 	beq.w	8004776 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800462a:	2300      	movs	r3, #0
 800462c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462e:	4b97      	ldr	r3, [pc, #604]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10d      	bne.n	8004656 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463a:	4b94      	ldr	r3, [pc, #592]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	4a93      	ldr	r2, [pc, #588]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	61d3      	str	r3, [r2, #28]
 8004646:	4b91      	ldr	r3, [pc, #580]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004652:	2301      	movs	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	4b8e      	ldr	r3, [pc, #568]	; (8004890 <HAL_RCC_OscConfig+0x4f8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d118      	bne.n	8004694 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004662:	4b8b      	ldr	r3, [pc, #556]	; (8004890 <HAL_RCC_OscConfig+0x4f8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a8a      	ldr	r2, [pc, #552]	; (8004890 <HAL_RCC_OscConfig+0x4f8>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466e:	f7fe fe69 	bl	8003344 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004676:	f7fe fe65 	bl	8003344 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b64      	cmp	r3, #100	; 0x64
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e0fd      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004688:	4b81      	ldr	r3, [pc, #516]	; (8004890 <HAL_RCC_OscConfig+0x4f8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x312>
 800469c:	4b7b      	ldr	r3, [pc, #492]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	4a7a      	ldr	r2, [pc, #488]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6213      	str	r3, [r2, #32]
 80046a8:	e02d      	b.n	8004706 <HAL_RCC_OscConfig+0x36e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x334>
 80046b2:	4b76      	ldr	r3, [pc, #472]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	4a75      	ldr	r2, [pc, #468]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	6213      	str	r3, [r2, #32]
 80046be:	4b73      	ldr	r3, [pc, #460]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	4a72      	ldr	r2, [pc, #456]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80046c4:	f023 0304 	bic.w	r3, r3, #4
 80046c8:	6213      	str	r3, [r2, #32]
 80046ca:	e01c      	b.n	8004706 <HAL_RCC_OscConfig+0x36e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b05      	cmp	r3, #5
 80046d2:	d10c      	bne.n	80046ee <HAL_RCC_OscConfig+0x356>
 80046d4:	4b6d      	ldr	r3, [pc, #436]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	4a6c      	ldr	r2, [pc, #432]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80046da:	f043 0304 	orr.w	r3, r3, #4
 80046de:	6213      	str	r3, [r2, #32]
 80046e0:	4b6a      	ldr	r3, [pc, #424]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	4a69      	ldr	r2, [pc, #420]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	6213      	str	r3, [r2, #32]
 80046ec:	e00b      	b.n	8004706 <HAL_RCC_OscConfig+0x36e>
 80046ee:	4b67      	ldr	r3, [pc, #412]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	4a66      	ldr	r2, [pc, #408]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80046f4:	f023 0301 	bic.w	r3, r3, #1
 80046f8:	6213      	str	r3, [r2, #32]
 80046fa:	4b64      	ldr	r3, [pc, #400]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	4a63      	ldr	r2, [pc, #396]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 8004700:	f023 0304 	bic.w	r3, r3, #4
 8004704:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d015      	beq.n	800473a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470e:	f7fe fe19 	bl	8003344 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004714:	e00a      	b.n	800472c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004716:	f7fe fe15 	bl	8003344 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f241 3288 	movw	r2, #5000	; 0x1388
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e0ab      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472c:	4b57      	ldr	r3, [pc, #348]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0ee      	beq.n	8004716 <HAL_RCC_OscConfig+0x37e>
 8004738:	e014      	b.n	8004764 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473a:	f7fe fe03 	bl	8003344 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004740:	e00a      	b.n	8004758 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004742:	f7fe fdff 	bl	8003344 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004750:	4293      	cmp	r3, r2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e095      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004758:	4b4c      	ldr	r3, [pc, #304]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ee      	bne.n	8004742 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d105      	bne.n	8004776 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800476a:	4b48      	ldr	r3, [pc, #288]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	4a47      	ldr	r2, [pc, #284]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 8004770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004774:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8081 	beq.w	8004882 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004780:	4b42      	ldr	r3, [pc, #264]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 030c 	and.w	r3, r3, #12
 8004788:	2b08      	cmp	r3, #8
 800478a:	d061      	beq.n	8004850 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d146      	bne.n	8004822 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004794:	4b3f      	ldr	r3, [pc, #252]	; (8004894 <HAL_RCC_OscConfig+0x4fc>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479a:	f7fe fdd3 	bl	8003344 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a2:	f7fe fdcf 	bl	8003344 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e067      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b4:	4b35      	ldr	r3, [pc, #212]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f0      	bne.n	80047a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c8:	d108      	bne.n	80047dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047ca:	4b30      	ldr	r3, [pc, #192]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	492d      	ldr	r1, [pc, #180]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047dc:	4b2b      	ldr	r3, [pc, #172]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a19      	ldr	r1, [r3, #32]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	430b      	orrs	r3, r1
 80047ee:	4927      	ldr	r1, [pc, #156]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f4:	4b27      	ldr	r3, [pc, #156]	; (8004894 <HAL_RCC_OscConfig+0x4fc>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fa:	f7fe fda3 	bl	8003344 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004802:	f7fe fd9f 	bl	8003344 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e037      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004814:	4b1d      	ldr	r3, [pc, #116]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <HAL_RCC_OscConfig+0x46a>
 8004820:	e02f      	b.n	8004882 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004822:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <HAL_RCC_OscConfig+0x4fc>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004828:	f7fe fd8c 	bl	8003344 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004830:	f7fe fd88 	bl	8003344 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e020      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x498>
 800484e:	e018      	b.n	8004882 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e013      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_RCC_OscConfig+0x4f4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	429a      	cmp	r2, r3
 800486e:	d106      	bne.n	800487e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d001      	beq.n	8004882 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40021000 	.word	0x40021000
 8004890:	40007000 	.word	0x40007000
 8004894:	42420060 	.word	0x42420060

08004898 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0d0      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ac:	4b6a      	ldr	r3, [pc, #424]	; (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d910      	bls.n	80048dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b67      	ldr	r3, [pc, #412]	; (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f023 0207 	bic.w	r2, r3, #7
 80048c2:	4965      	ldr	r1, [pc, #404]	; (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b63      	ldr	r3, [pc, #396]	; (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0b8      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f4:	4b59      	ldr	r3, [pc, #356]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4a58      	ldr	r2, [pc, #352]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 80048fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800490c:	4b53      	ldr	r3, [pc, #332]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4a52      	ldr	r2, [pc, #328]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004912:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004916:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004918:	4b50      	ldr	r3, [pc, #320]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	494d      	ldr	r1, [pc, #308]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d040      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d107      	bne.n	800494e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d115      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e07f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d107      	bne.n	8004966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004956:	4b41      	ldr	r3, [pc, #260]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e073      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004966:	4b3d      	ldr	r3, [pc, #244]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e06b      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004976:	4b39      	ldr	r3, [pc, #228]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f023 0203 	bic.w	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4936      	ldr	r1, [pc, #216]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	4313      	orrs	r3, r2
 8004986:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004988:	f7fe fcdc 	bl	8003344 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004990:	f7fe fcd8 	bl	8003344 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	; 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e053      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a6:	4b2d      	ldr	r3, [pc, #180]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f003 020c 	and.w	r2, r3, #12
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d1eb      	bne.n	8004990 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049b8:	4b27      	ldr	r3, [pc, #156]	; (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d210      	bcs.n	80049e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f023 0207 	bic.w	r2, r3, #7
 80049ce:	4922      	ldr	r1, [pc, #136]	; (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d6:	4b20      	ldr	r3, [pc, #128]	; (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e032      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f4:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4916      	ldr	r1, [pc, #88]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a12:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	490e      	ldr	r1, [pc, #56]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a26:	f000 f821 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	490a      	ldr	r1, [pc, #40]	; (8004a60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a38:	5ccb      	ldrb	r3, [r1, r3]
 8004a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <HAL_RCC_ClockConfig+0x1cc>)
 8004a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a42:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <HAL_RCC_ClockConfig+0x1d0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fc3a 	bl	80032c0 <HAL_InitTick>

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40022000 	.word	0x40022000
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	08007afc 	.word	0x08007afc
 8004a64:	20000024 	.word	0x20000024
 8004a68:	20000040 	.word	0x20000040

08004a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a6c:	b490      	push	{r4, r7}
 8004a6e:	b08a      	sub	sp, #40	; 0x28
 8004a70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a72:	4b2a      	ldr	r3, [pc, #168]	; (8004b1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a74:	1d3c      	adds	r4, r7, #4
 8004a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a7c:	f240 2301 	movw	r3, #513	; 0x201
 8004a80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	2300      	movs	r3, #0
 8004a88:	61bb      	str	r3, [r7, #24]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a96:	4b22      	ldr	r3, [pc, #136]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d002      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0x40>
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d003      	beq.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x46>
 8004aaa:	e02d      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004aac:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aae:	623b      	str	r3, [r7, #32]
      break;
 8004ab0:	e02d      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	0c9b      	lsrs	r3, r3, #18
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004abe:	4413      	add	r3, r2
 8004ac0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ac4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d013      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ad0:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	0c5b      	lsrs	r3, r3, #17
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ade:	4413      	add	r3, r2
 8004ae0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ae4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	4a0e      	ldr	r2, [pc, #56]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aea:	fb02 f203 	mul.w	r2, r2, r3
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
 8004af6:	e004      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	4a0b      	ldr	r2, [pc, #44]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	623b      	str	r3, [r7, #32]
      break;
 8004b06:	e002      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b0a:	623b      	str	r3, [r7, #32]
      break;
 8004b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3728      	adds	r7, #40	; 0x28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc90      	pop	{r4, r7}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	08007380 	.word	0x08007380
 8004b20:	40021000 	.word	0x40021000
 8004b24:	007a1200 	.word	0x007a1200
 8004b28:	003d0900 	.word	0x003d0900

08004b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b30:	4b02      	ldr	r3, [pc, #8]	; (8004b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8004b32:	681b      	ldr	r3, [r3, #0]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr
 8004b3c:	20000024 	.word	0x20000024

08004b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b44:	f7ff fff2 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4903      	ldr	r1, [pc, #12]	; (8004b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40021000 	.word	0x40021000
 8004b64:	08007b0c 	.word	0x08007b0c

08004b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b6c:	f7ff ffde 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b70:	4602      	mov	r2, r0
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	0adb      	lsrs	r3, r3, #11
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	4903      	ldr	r1, [pc, #12]	; (8004b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b7e:	5ccb      	ldrb	r3, [r1, r3]
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	08007b0c 	.word	0x08007b0c

08004b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <RCC_Delay+0x34>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <RCC_Delay+0x38>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	0a5b      	lsrs	r3, r3, #9
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bac:	bf00      	nop
  }
  while (Delay --);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1e5a      	subs	r2, r3, #1
 8004bb2:	60fa      	str	r2, [r7, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1f9      	bne.n	8004bac <RCC_Delay+0x1c>
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	20000024 	.word	0x20000024
 8004bc8:	10624dd3 	.word	0x10624dd3

08004bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e076      	b.n	8004ccc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d108      	bne.n	8004bf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bee:	d009      	beq.n	8004c04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	61da      	str	r2, [r3, #28]
 8004bf6:	e005      	b.n	8004c04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fd f8b4 	bl	8001d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c88:	ea42 0103 	orr.w	r1, r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	0c1a      	lsrs	r2, r3, #16
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f002 0204 	and.w	r2, r2, #4
 8004caa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69da      	ldr	r2, [r3, #28]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_SPI_Transmit+0x22>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e126      	b.n	8004f44 <HAL_SPI_Transmit+0x270>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cfe:	f7fe fb21 	bl	8003344 <HAL_GetTick>
 8004d02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d002      	beq.n	8004d1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d14:	2302      	movs	r3, #2
 8004d16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d18:	e10b      	b.n	8004f32 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_SPI_Transmit+0x52>
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d2a:	e102      	b.n	8004f32 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2203      	movs	r2, #3
 8004d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	88fa      	ldrh	r2, [r7, #6]
 8004d4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d72:	d10f      	bne.n	8004d94 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d007      	beq.n	8004db2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dba:	d14b      	bne.n	8004e54 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_SPI_Transmit+0xf6>
 8004dc4:	8afb      	ldrh	r3, [r7, #22]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d13e      	bne.n	8004e48 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	881a      	ldrh	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	1c9a      	adds	r2, r3, #2
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dee:	e02b      	b.n	8004e48 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d112      	bne.n	8004e24 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	881a      	ldrh	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	1c9a      	adds	r2, r3, #2
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e22:	e011      	b.n	8004e48 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e24:	f7fe fa8e 	bl	8003344 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d803      	bhi.n	8004e3c <HAL_SPI_Transmit+0x168>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e3a:	d102      	bne.n	8004e42 <HAL_SPI_Transmit+0x16e>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e46:	e074      	b.n	8004f32 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1ce      	bne.n	8004df0 <HAL_SPI_Transmit+0x11c>
 8004e52:	e04c      	b.n	8004eee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_SPI_Transmit+0x18e>
 8004e5c:	8afb      	ldrh	r3, [r7, #22]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d140      	bne.n	8004ee4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e88:	e02c      	b.n	8004ee4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d113      	bne.n	8004ec0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	7812      	ldrb	r2, [r2, #0]
 8004ea4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ebe:	e011      	b.n	8004ee4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ec0:	f7fe fa40 	bl	8003344 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d803      	bhi.n	8004ed8 <HAL_SPI_Transmit+0x204>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ed6:	d102      	bne.n	8004ede <HAL_SPI_Transmit+0x20a>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d102      	bne.n	8004ee4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ee2:	e026      	b.n	8004f32 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1cd      	bne.n	8004e8a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	6839      	ldr	r1, [r7, #0]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fbb8 	bl	8005668 <SPI_EndRxTxTransaction>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	77fb      	strb	r3, [r7, #31]
 8004f2e:	e000      	b.n	8004f32 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f42:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f68:	d112      	bne.n	8004f90 <HAL_SPI_Receive+0x44>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10e      	bne.n	8004f90 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2204      	movs	r2, #4
 8004f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	4613      	mov	r3, r2
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f8f1 	bl	800516e <HAL_SPI_TransmitReceive>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	e0ea      	b.n	8005166 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_SPI_Receive+0x52>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e0e3      	b.n	8005166 <HAL_SPI_Receive+0x21a>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fa6:	f7fe f9cd 	bl	8003344 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d002      	beq.n	8004fbe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fbc:	e0ca      	b.n	8005154 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_SPI_Receive+0x7e>
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fce:	e0c1      	b.n	8005154 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	88fa      	ldrh	r2, [r7, #6]
 8004fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	88fa      	ldrh	r2, [r7, #6]
 8004fee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005016:	d10f      	bne.n	8005038 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005026:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005036:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d007      	beq.n	8005056 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005054:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d162      	bne.n	8005124 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800505e:	e02e      	b.n	80050be <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b01      	cmp	r3, #1
 800506c:	d115      	bne.n	800509a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f103 020c 	add.w	r2, r3, #12
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	7812      	ldrb	r2, [r2, #0]
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005098:	e011      	b.n	80050be <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800509a:	f7fe f953 	bl	8003344 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d803      	bhi.n	80050b2 <HAL_SPI_Receive+0x166>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b0:	d102      	bne.n	80050b8 <HAL_SPI_Receive+0x16c>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d102      	bne.n	80050be <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050bc:	e04a      	b.n	8005154 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1cb      	bne.n	8005060 <HAL_SPI_Receive+0x114>
 80050c8:	e031      	b.n	800512e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d113      	bne.n	8005100 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	b292      	uxth	r2, r2
 80050e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	1c9a      	adds	r2, r3, #2
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050fe:	e011      	b.n	8005124 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005100:	f7fe f920 	bl	8003344 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d803      	bhi.n	8005118 <HAL_SPI_Receive+0x1cc>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005116:	d102      	bne.n	800511e <HAL_SPI_Receive+0x1d2>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d102      	bne.n	8005124 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005122:	e017      	b.n	8005154 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1cd      	bne.n	80050ca <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	6839      	ldr	r1, [r7, #0]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 fa46 	bl	80055c4 <SPI_EndRxTransaction>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
 8005150:	e000      	b.n	8005154 <HAL_SPI_Receive+0x208>
  }

error :
 8005152:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005164:	7dfb      	ldrb	r3, [r7, #23]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b08c      	sub	sp, #48	; 0x30
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
 800517a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800517c:	2301      	movs	r3, #1
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_SPI_TransmitReceive+0x26>
 8005190:	2302      	movs	r3, #2
 8005192:	e18a      	b.n	80054aa <HAL_SPI_TransmitReceive+0x33c>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800519c:	f7fe f8d2 	bl	8003344 <HAL_GetTick>
 80051a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80051b2:	887b      	ldrh	r3, [r7, #2]
 80051b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d00f      	beq.n	80051de <HAL_SPI_TransmitReceive+0x70>
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051c4:	d107      	bne.n	80051d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <HAL_SPI_TransmitReceive+0x68>
 80051ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d003      	beq.n	80051de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
 80051d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051dc:	e15b      	b.n	8005496 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_SPI_TransmitReceive+0x82>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_SPI_TransmitReceive+0x82>
 80051ea:	887b      	ldrh	r3, [r7, #2]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051f6:	e14e      	b.n	8005496 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b04      	cmp	r3, #4
 8005202:	d003      	beq.n	800520c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2205      	movs	r2, #5
 8005208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	887a      	ldrh	r2, [r7, #2]
 800521c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	887a      	ldrh	r2, [r7, #2]
 8005222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	887a      	ldrh	r2, [r7, #2]
 800522e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	887a      	ldrh	r2, [r7, #2]
 8005234:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d007      	beq.n	8005260 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800525e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005268:	d178      	bne.n	800535c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_SPI_TransmitReceive+0x10a>
 8005272:	8b7b      	ldrh	r3, [r7, #26]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d166      	bne.n	8005346 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	881a      	ldrh	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	1c9a      	adds	r2, r3, #2
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800529c:	e053      	b.n	8005346 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d11b      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x176>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d016      	beq.n	80052e4 <HAL_SPI_TransmitReceive+0x176>
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d113      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	881a      	ldrh	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	1c9a      	adds	r2, r3, #2
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d119      	bne.n	8005326 <HAL_SPI_TransmitReceive+0x1b8>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d014      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	b292      	uxth	r2, r2
 8005308:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	1c9a      	adds	r2, r3, #2
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005322:	2301      	movs	r3, #1
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005326:	f7fe f80d 	bl	8003344 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005332:	429a      	cmp	r2, r3
 8005334:	d807      	bhi.n	8005346 <HAL_SPI_TransmitReceive+0x1d8>
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800533c:	d003      	beq.n	8005346 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005344:	e0a7      	b.n	8005496 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1a6      	bne.n	800529e <HAL_SPI_TransmitReceive+0x130>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1a1      	bne.n	800529e <HAL_SPI_TransmitReceive+0x130>
 800535a:	e07c      	b.n	8005456 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_SPI_TransmitReceive+0x1fc>
 8005364:	8b7b      	ldrh	r3, [r7, #26]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d16b      	bne.n	8005442 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	330c      	adds	r3, #12
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005390:	e057      	b.n	8005442 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b02      	cmp	r3, #2
 800539e:	d11c      	bne.n	80053da <HAL_SPI_TransmitReceive+0x26c>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d017      	beq.n	80053da <HAL_SPI_TransmitReceive+0x26c>
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d114      	bne.n	80053da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d119      	bne.n	800541c <HAL_SPI_TransmitReceive+0x2ae>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d014      	beq.n	800541c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800540e:	b29b      	uxth	r3, r3
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005418:	2301      	movs	r3, #1
 800541a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800541c:	f7fd ff92 	bl	8003344 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005428:	429a      	cmp	r2, r3
 800542a:	d803      	bhi.n	8005434 <HAL_SPI_TransmitReceive+0x2c6>
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005432:	d102      	bne.n	800543a <HAL_SPI_TransmitReceive+0x2cc>
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	2b00      	cmp	r3, #0
 8005438:	d103      	bne.n	8005442 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005440:	e029      	b.n	8005496 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1a2      	bne.n	8005392 <HAL_SPI_TransmitReceive+0x224>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d19d      	bne.n	8005392 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005458:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 f904 	bl	8005668 <SPI_EndRxTxTransaction>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d006      	beq.n	8005474 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005472:	e010      	b.n	8005496 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10b      	bne.n	8005494 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	e000      	b.n	8005496 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005494:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3730      	adds	r7, #48	; 0x30
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054c4:	f7fd ff3e 	bl	8003344 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	4413      	add	r3, r2
 80054d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054d4:	f7fd ff36 	bl	8003344 <HAL_GetTick>
 80054d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054da:	4b39      	ldr	r3, [pc, #228]	; (80055c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	015b      	lsls	r3, r3, #5
 80054e0:	0d1b      	lsrs	r3, r3, #20
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	fb02 f303 	mul.w	r3, r2, r3
 80054e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ea:	e054      	b.n	8005596 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f2:	d050      	beq.n	8005596 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054f4:	f7fd ff26 	bl	8003344 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	429a      	cmp	r2, r3
 8005502:	d902      	bls.n	800550a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d13d      	bne.n	8005586 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005518:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005522:	d111      	bne.n	8005548 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800552c:	d004      	beq.n	8005538 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005536:	d107      	bne.n	8005548 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005546:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005550:	d10f      	bne.n	8005572 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005570:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e017      	b.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	3b01      	subs	r3, #1
 8005594:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4013      	ands	r3, r2
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	bf0c      	ite	eq
 80055a6:	2301      	moveq	r3, #1
 80055a8:	2300      	movne	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d19b      	bne.n	80054ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000024 	.word	0x20000024

080055c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055d8:	d111      	bne.n	80055fe <SPI_EndRxTransaction+0x3a>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e2:	d004      	beq.n	80055ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ec:	d107      	bne.n	80055fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055fc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005606:	d117      	bne.n	8005638 <SPI_EndRxTransaction+0x74>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005610:	d112      	bne.n	8005638 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2200      	movs	r2, #0
 800561a:	2101      	movs	r1, #1
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7ff ff49 	bl	80054b4 <SPI_WaitFlagStateUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01a      	beq.n	800565e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562c:	f043 0220 	orr.w	r2, r3, #32
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e013      	b.n	8005660 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	2180      	movs	r1, #128	; 0x80
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7ff ff36 	bl	80054b4 <SPI_WaitFlagStateUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	f043 0220 	orr.w	r2, r3, #32
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e000      	b.n	8005660 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2200      	movs	r2, #0
 800567c:	2180      	movs	r1, #128	; 0x80
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7ff ff18 	bl	80054b4 <SPI_WaitFlagStateUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d007      	beq.n	800569a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568e:	f043 0220 	orr.w	r2, r3, #32
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e000      	b.n	800569c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e041      	b.n	800573a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fc fba8 	bl	8001e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3304      	adds	r3, #4
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f000 faa8 	bl	8005c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d001      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e03a      	b.n	80057d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a18      	ldr	r2, [pc, #96]	; (80057dc <HAL_TIM_Base_Start_IT+0x98>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00e      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x58>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005786:	d009      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x58>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a14      	ldr	r2, [pc, #80]	; (80057e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x58>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d111      	bne.n	80057c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b06      	cmp	r3, #6
 80057ac:	d010      	beq.n	80057d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0201 	orr.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057be:	e007      	b.n	80057d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40000800 	.word	0x40000800

080057e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0201 	bic.w	r2, r2, #1
 80057fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	f241 1311 	movw	r3, #4369	; 0x1111
 800580a:	4013      	ands	r3, r2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10f      	bne.n	8005830 <HAL_TIM_Base_Stop_IT+0x48>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6a1a      	ldr	r2, [r3, #32]
 8005816:	f240 4344 	movw	r3, #1092	; 0x444
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d107      	bne.n	8005830 <HAL_TIM_Base_Stop_IT+0x48>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr

08005844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b02      	cmp	r3, #2
 8005858:	d122      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b02      	cmp	r3, #2
 8005866:	d11b      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0202 	mvn.w	r2, #2
 8005870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f9ba 	bl	8005c00 <HAL_TIM_IC_CaptureCallback>
 800588c:	e005      	b.n	800589a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9ad 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f9bc 	bl	8005c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d122      	bne.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d11b      	bne.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0204 	mvn.w	r2, #4
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f990 	bl	8005c00 <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f983 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f992 	bl	8005c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d122      	bne.n	8005948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b08      	cmp	r3, #8
 800590e:	d11b      	bne.n	8005948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0208 	mvn.w	r2, #8
 8005918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2204      	movs	r2, #4
 800591e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f966 	bl	8005c00 <HAL_TIM_IC_CaptureCallback>
 8005934:	e005      	b.n	8005942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f959 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f968 	bl	8005c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	2b10      	cmp	r3, #16
 8005954:	d122      	bne.n	800599c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	2b10      	cmp	r3, #16
 8005962:	d11b      	bne.n	800599c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0210 	mvn.w	r2, #16
 800596c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2208      	movs	r2, #8
 8005972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f93c 	bl	8005c00 <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f92f 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f93e 	bl	8005c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10e      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d107      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0201 	mvn.w	r2, #1
 80059c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f90a 	bl	8005bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d2:	2b80      	cmp	r3, #128	; 0x80
 80059d4:	d10e      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e0:	2b80      	cmp	r3, #128	; 0x80
 80059e2:	d107      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fa81 	bl	8005ef6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	d10e      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d107      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f902 	bl	8005c24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d10e      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d107      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0220 	mvn.w	r2, #32
 8005a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fa4c 	bl	8005ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_TIM_ConfigClockSource+0x18>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e0b3      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x180>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa4:	d03e      	beq.n	8005b24 <HAL_TIM_ConfigClockSource+0xd0>
 8005aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aaa:	f200 8087 	bhi.w	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab2:	f000 8085 	beq.w	8005bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aba:	d87f      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005abc:	2b70      	cmp	r3, #112	; 0x70
 8005abe:	d01a      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0xa2>
 8005ac0:	2b70      	cmp	r3, #112	; 0x70
 8005ac2:	d87b      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005ac4:	2b60      	cmp	r3, #96	; 0x60
 8005ac6:	d050      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x116>
 8005ac8:	2b60      	cmp	r3, #96	; 0x60
 8005aca:	d877      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005acc:	2b50      	cmp	r3, #80	; 0x50
 8005ace:	d03c      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0xf6>
 8005ad0:	2b50      	cmp	r3, #80	; 0x50
 8005ad2:	d873      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d058      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x136>
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d86f      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005adc:	2b30      	cmp	r3, #48	; 0x30
 8005ade:	d064      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x156>
 8005ae0:	2b30      	cmp	r3, #48	; 0x30
 8005ae2:	d86b      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d060      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x156>
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d867      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d05c      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x156>
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d05a      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005af4:	e062      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6899      	ldr	r1, [r3, #8]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f000 f970 	bl	8005dea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	609a      	str	r2, [r3, #8]
      break;
 8005b22:	e04e      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	6899      	ldr	r1, [r3, #8]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f000 f959 	bl	8005dea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b46:	609a      	str	r2, [r3, #8]
      break;
 8005b48:	e03b      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6859      	ldr	r1, [r3, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f000 f8d0 	bl	8005cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2150      	movs	r1, #80	; 0x50
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 f927 	bl	8005db6 <TIM_ITRx_SetConfig>
      break;
 8005b68:	e02b      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6859      	ldr	r1, [r3, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f000 f8ee 	bl	8005d58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2160      	movs	r1, #96	; 0x60
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f917 	bl	8005db6 <TIM_ITRx_SetConfig>
      break;
 8005b88:	e01b      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	6859      	ldr	r1, [r3, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f000 f8b0 	bl	8005cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2140      	movs	r1, #64	; 0x40
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f907 	bl	8005db6 <TIM_ITRx_SetConfig>
      break;
 8005ba8:	e00b      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f000 f8fe 	bl	8005db6 <TIM_ITRx_SetConfig>
        break;
 8005bba:	e002      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bbc:	bf00      	nop
 8005bbe:	e000      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr
	...

08005c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a29      	ldr	r2, [pc, #164]	; (8005cf0 <TIM_Base_SetConfig+0xb8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00b      	beq.n	8005c68 <TIM_Base_SetConfig+0x30>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c56:	d007      	beq.n	8005c68 <TIM_Base_SetConfig+0x30>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a26      	ldr	r2, [pc, #152]	; (8005cf4 <TIM_Base_SetConfig+0xbc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d003      	beq.n	8005c68 <TIM_Base_SetConfig+0x30>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a25      	ldr	r2, [pc, #148]	; (8005cf8 <TIM_Base_SetConfig+0xc0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d108      	bne.n	8005c7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a1c      	ldr	r2, [pc, #112]	; (8005cf0 <TIM_Base_SetConfig+0xb8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00b      	beq.n	8005c9a <TIM_Base_SetConfig+0x62>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c88:	d007      	beq.n	8005c9a <TIM_Base_SetConfig+0x62>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a19      	ldr	r2, [pc, #100]	; (8005cf4 <TIM_Base_SetConfig+0xbc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_Base_SetConfig+0x62>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <TIM_Base_SetConfig+0xc0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d108      	bne.n	8005cac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a07      	ldr	r2, [pc, #28]	; (8005cf0 <TIM_Base_SetConfig+0xb8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d103      	bne.n	8005ce0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	615a      	str	r2, [r3, #20]
}
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800

08005cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f023 0201 	bic.w	r2, r3, #1
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f023 030a 	bic.w	r3, r3, #10
 8005d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bc80      	pop	{r7}
 8005d56:	4770      	bx	lr

08005d58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f023 0210 	bic.w	r2, r3, #16
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	031b      	lsls	r3, r3, #12
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	621a      	str	r2, [r3, #32]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bc80      	pop	{r7}
 8005db4:	4770      	bx	lr

08005db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f043 0307 	orr.w	r3, r3, #7
 8005dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	609a      	str	r2, [r3, #8]
}
 8005de0:	bf00      	nop
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr

08005dea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b087      	sub	sp, #28
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	021a      	lsls	r2, r3, #8
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	609a      	str	r2, [r3, #8]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e046      	b.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a16      	ldr	r2, [pc, #88]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8c:	d009      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a12      	ldr	r2, [pc, #72]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a10      	ldr	r2, [pc, #64]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10c      	bne.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr
 8005ed8:	40012c00 	.word	0x40012c00
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40000800 	.word	0x40000800

08005ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e03f      	b.n	8005f9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fb ff9c 	bl	8001e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2224      	movs	r2, #36	; 0x24
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fbed 	bl	800672c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695a      	ldr	r2, [r3, #20]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	4613      	mov	r3, r2
 8005fae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d130      	bne.n	800601e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <HAL_UART_Transmit_IT+0x26>
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e029      	b.n	8006020 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_UART_Transmit_IT+0x38>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e022      	b.n	8006020 <HAL_UART_Transmit_IT+0x7e>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	88fa      	ldrh	r2, [r7, #6]
 8005fec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	88fa      	ldrh	r2, [r7, #6]
 8005ff2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2221      	movs	r2, #33	; 0x21
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006018:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	e000      	b.n	8006020 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800601e:	2302      	movs	r3, #2
  }
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr

0800602a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	4613      	mov	r3, r2
 8006036:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b20      	cmp	r3, #32
 8006042:	d11d      	bne.n	8006080 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_UART_Receive_IT+0x26>
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e016      	b.n	8006082 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_UART_Receive_IT+0x38>
 800605e:	2302      	movs	r3, #2
 8006060:	e00f      	b.n	8006082 <HAL_UART_Receive_IT+0x58>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	461a      	mov	r2, r3
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f9cf 	bl	800641a <UART_Start_Receive_IT>
 800607c:	4603      	mov	r3, r0
 800607e:	e000      	b.n	8006082 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006080:	2302      	movs	r3, #2
  }
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10d      	bne.n	80060de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <HAL_UART_IRQHandler+0x52>
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa7f 	bl	80065da <UART_Receive_IT>
      return;
 80060dc:	e17b      	b.n	80063d6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 80b1 	beq.w	8006248 <HAL_UART_IRQHandler+0x1bc>
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d105      	bne.n	80060fc <HAL_UART_IRQHandler+0x70>
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80a6 	beq.w	8006248 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_UART_IRQHandler+0x90>
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	f043 0201 	orr.w	r2, r3, #1
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <HAL_UART_IRQHandler+0xb0>
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d005      	beq.n	800613c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	f043 0202 	orr.w	r2, r3, #2
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <HAL_UART_IRQHandler+0xd0>
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	f043 0204 	orr.w	r2, r3, #4
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00f      	beq.n	8006186 <HAL_UART_IRQHandler+0xfa>
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b00      	cmp	r3, #0
 800616e:	d104      	bne.n	800617a <HAL_UART_IRQHandler+0xee>
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	f043 0208 	orr.w	r2, r3, #8
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 811e 	beq.w	80063cc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <HAL_UART_IRQHandler+0x11e>
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fa18 	bl	80065da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bf14      	ite	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	2300      	moveq	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d102      	bne.n	80061d2 <HAL_UART_IRQHandler+0x146>
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d031      	beq.n	8006236 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f95a 	bl	800648c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d023      	beq.n	800622e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d013      	beq.n	8006226 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	4a76      	ldr	r2, [pc, #472]	; (80063dc <HAL_UART_IRQHandler+0x350>)
 8006204:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	4618      	mov	r0, r3
 800620c:	f7fd fa10 	bl	8003630 <HAL_DMA_Abort_IT>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d016      	beq.n	8006244 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006220:	4610      	mov	r0, r2
 8006222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006224:	e00e      	b.n	8006244 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f8e3 	bl	80063f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	e00a      	b.n	8006244 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f8df 	bl	80063f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	e006      	b.n	8006244 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f8db 	bl	80063f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006242:	e0c3      	b.n	80063cc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006244:	bf00      	nop
    return;
 8006246:	e0c1      	b.n	80063cc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624c:	2b01      	cmp	r3, #1
 800624e:	f040 80a1 	bne.w	8006394 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 809b 	beq.w	8006394 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8095 	beq.w	8006394 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	d04e      	beq.n	800632c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006298:	8a3b      	ldrh	r3, [r7, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8098 	beq.w	80063d0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062a4:	8a3a      	ldrh	r2, [r7, #16]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	f080 8092 	bcs.w	80063d0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8a3a      	ldrh	r2, [r7, #16]
 80062b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d02b      	beq.n	8006314 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062ca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	695a      	ldr	r2, [r3, #20]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0201 	bic.w	r2, r2, #1
 80062da:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0210 	bic.w	r2, r2, #16
 8006308:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	4618      	mov	r0, r3
 8006310:	f7fd f953 	bl	80035ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800631c:	b29b      	uxth	r3, r3
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	b29b      	uxth	r3, r3
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f86d 	bl	8006404 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800632a:	e051      	b.n	80063d0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006334:	b29b      	uxth	r3, r3
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d047      	beq.n	80063d4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006344:	8a7b      	ldrh	r3, [r7, #18]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d044      	beq.n	80063d4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006358:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0201 	bic.w	r2, r2, #1
 8006368:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0210 	bic.w	r2, r2, #16
 8006386:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006388:	8a7b      	ldrh	r3, [r7, #18]
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f839 	bl	8006404 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006392:	e01f      	b.n	80063d4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <HAL_UART_IRQHandler+0x324>
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f8af 	bl	800650c <UART_Transmit_IT>
    return;
 80063ae:	e012      	b.n	80063d6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00d      	beq.n	80063d6 <HAL_UART_IRQHandler+0x34a>
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d008      	beq.n	80063d6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f8f0 	bl	80065aa <UART_EndTransmit_IT>
    return;
 80063ca:	e004      	b.n	80063d6 <HAL_UART_IRQHandler+0x34a>
    return;
 80063cc:	bf00      	nop
 80063ce:	e002      	b.n	80063d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80063d0:	bf00      	nop
 80063d2:	e000      	b.n	80063d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80063d4:	bf00      	nop
  }
}
 80063d6:	3728      	adds	r7, #40	; 0x28
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	080064e5 	.word	0x080064e5

080063e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr

080063f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr

08006404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	bc80      	pop	{r7}
 8006418:	4770      	bx	lr

0800641a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	4613      	mov	r3, r2
 8006426:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	88fa      	ldrh	r2, [r7, #6]
 8006432:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2222      	movs	r2, #34	; 0x22
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800645e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695a      	ldr	r2, [r3, #20]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0220 	orr.w	r2, r2, #32
 800647e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	bc80      	pop	{r7}
 800648a:	4770      	bx	lr

0800648c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695a      	ldr	r2, [r3, #20]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0201 	bic.w	r2, r2, #1
 80064b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d107      	bne.n	80064cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0210 	bic.w	r2, r2, #16
 80064ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr

080064e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f7ff ff77 	bl	80063f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006504:	bf00      	nop
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b21      	cmp	r3, #33	; 0x21
 800651e:	d13e      	bne.n	800659e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006528:	d114      	bne.n	8006554 <UART_Transmit_IT+0x48>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d110      	bne.n	8006554 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006546:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	621a      	str	r2, [r3, #32]
 8006552:	e008      	b.n	8006566 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	1c59      	adds	r1, r3, #1
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6211      	str	r1, [r2, #32]
 800655e:	781a      	ldrb	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29b      	uxth	r3, r3
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	4619      	mov	r1, r3
 8006574:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10f      	bne.n	800659a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006588:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006598:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	e000      	b.n	80065a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800659e:	2302      	movs	r3, #2
  }
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b082      	sub	sp, #8
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff ff08 	bl	80063e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b086      	sub	sp, #24
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b22      	cmp	r3, #34	; 0x22
 80065ec:	f040 8099 	bne.w	8006722 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f8:	d117      	bne.n	800662a <UART_Receive_IT+0x50>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d113      	bne.n	800662a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006618:	b29a      	uxth	r2, r3
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	1c9a      	adds	r2, r3, #2
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	629a      	str	r2, [r3, #40]	; 0x28
 8006628:	e026      	b.n	8006678 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006630:	2300      	movs	r3, #0
 8006632:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663c:	d007      	beq.n	800664e <UART_Receive_IT+0x74>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10a      	bne.n	800665c <UART_Receive_IT+0x82>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	b2da      	uxtb	r2, r3
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	e008      	b.n	800666e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006668:	b2da      	uxtb	r2, r3
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	b29b      	uxth	r3, r3
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	4619      	mov	r1, r3
 8006686:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006688:	2b00      	cmp	r3, #0
 800668a:	d148      	bne.n	800671e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0220 	bic.w	r2, r2, #32
 800669a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695a      	ldr	r2, [r3, #20]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0201 	bic.w	r2, r2, #1
 80066ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d123      	bne.n	8006714 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0210 	bic.w	r2, r2, #16
 80066e0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b10      	cmp	r3, #16
 80066ee:	d10a      	bne.n	8006706 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff fe79 	bl	8006404 <HAL_UARTEx_RxEventCallback>
 8006712:	e002      	b.n	800671a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fb fa89 	bl	8001c2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	e002      	b.n	8006724 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	e000      	b.n	8006724 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006722:	2302      	movs	r3, #2
  }
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006766:	f023 030c 	bic.w	r3, r3, #12
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6812      	ldr	r2, [r2, #0]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	430b      	orrs	r3, r1
 8006772:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2c      	ldr	r2, [pc, #176]	; (8006840 <UART_SetConfig+0x114>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d103      	bne.n	800679c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006794:	f7fe f9e8 	bl	8004b68 <HAL_RCC_GetPCLK2Freq>
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	e002      	b.n	80067a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800679c:	f7fe f9d0 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 80067a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	009a      	lsls	r2, r3, #2
 80067ac:	441a      	add	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b8:	4a22      	ldr	r2, [pc, #136]	; (8006844 <UART_SetConfig+0x118>)
 80067ba:	fba2 2303 	umull	r2, r3, r2, r3
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	0119      	lsls	r1, r3, #4
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009a      	lsls	r2, r3, #2
 80067cc:	441a      	add	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067d8:	4b1a      	ldr	r3, [pc, #104]	; (8006844 <UART_SetConfig+0x118>)
 80067da:	fba3 0302 	umull	r0, r3, r3, r2
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	2064      	movs	r0, #100	; 0x64
 80067e2:	fb00 f303 	mul.w	r3, r0, r3
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	3332      	adds	r3, #50	; 0x32
 80067ec:	4a15      	ldr	r2, [pc, #84]	; (8006844 <UART_SetConfig+0x118>)
 80067ee:	fba2 2303 	umull	r2, r3, r2, r3
 80067f2:	095b      	lsrs	r3, r3, #5
 80067f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067f8:	4419      	add	r1, r3
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	009a      	lsls	r2, r3, #2
 8006804:	441a      	add	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006810:	4b0c      	ldr	r3, [pc, #48]	; (8006844 <UART_SetConfig+0x118>)
 8006812:	fba3 0302 	umull	r0, r3, r3, r2
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	2064      	movs	r0, #100	; 0x64
 800681a:	fb00 f303 	mul.w	r3, r0, r3
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	3332      	adds	r3, #50	; 0x32
 8006824:	4a07      	ldr	r2, [pc, #28]	; (8006844 <UART_SetConfig+0x118>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	f003 020f 	and.w	r2, r3, #15
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	440a      	add	r2, r1
 8006836:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	40013800 	.word	0x40013800
 8006844:	51eb851f 	.word	0x51eb851f

08006848 <__errno>:
 8006848:	4b01      	ldr	r3, [pc, #4]	; (8006850 <__errno+0x8>)
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20000048 	.word	0x20000048

08006854 <__libc_init_array>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	2600      	movs	r6, #0
 8006858:	4d0c      	ldr	r5, [pc, #48]	; (800688c <__libc_init_array+0x38>)
 800685a:	4c0d      	ldr	r4, [pc, #52]	; (8006890 <__libc_init_array+0x3c>)
 800685c:	1b64      	subs	r4, r4, r5
 800685e:	10a4      	asrs	r4, r4, #2
 8006860:	42a6      	cmp	r6, r4
 8006862:	d109      	bne.n	8006878 <__libc_init_array+0x24>
 8006864:	f000 fce2 	bl	800722c <_init>
 8006868:	2600      	movs	r6, #0
 800686a:	4d0a      	ldr	r5, [pc, #40]	; (8006894 <__libc_init_array+0x40>)
 800686c:	4c0a      	ldr	r4, [pc, #40]	; (8006898 <__libc_init_array+0x44>)
 800686e:	1b64      	subs	r4, r4, r5
 8006870:	10a4      	asrs	r4, r4, #2
 8006872:	42a6      	cmp	r6, r4
 8006874:	d105      	bne.n	8006882 <__libc_init_array+0x2e>
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	f855 3b04 	ldr.w	r3, [r5], #4
 800687c:	4798      	blx	r3
 800687e:	3601      	adds	r6, #1
 8006880:	e7ee      	b.n	8006860 <__libc_init_array+0xc>
 8006882:	f855 3b04 	ldr.w	r3, [r5], #4
 8006886:	4798      	blx	r3
 8006888:	3601      	adds	r6, #1
 800688a:	e7f2      	b.n	8006872 <__libc_init_array+0x1e>
 800688c:	08007b6c 	.word	0x08007b6c
 8006890:	08007b6c 	.word	0x08007b6c
 8006894:	08007b6c 	.word	0x08007b6c
 8006898:	08007b70 	.word	0x08007b70

0800689c <__itoa>:
 800689c:	1e93      	subs	r3, r2, #2
 800689e:	2b22      	cmp	r3, #34	; 0x22
 80068a0:	b510      	push	{r4, lr}
 80068a2:	460c      	mov	r4, r1
 80068a4:	d904      	bls.n	80068b0 <__itoa+0x14>
 80068a6:	2300      	movs	r3, #0
 80068a8:	461c      	mov	r4, r3
 80068aa:	700b      	strb	r3, [r1, #0]
 80068ac:	4620      	mov	r0, r4
 80068ae:	bd10      	pop	{r4, pc}
 80068b0:	2a0a      	cmp	r2, #10
 80068b2:	d109      	bne.n	80068c8 <__itoa+0x2c>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	da07      	bge.n	80068c8 <__itoa+0x2c>
 80068b8:	232d      	movs	r3, #45	; 0x2d
 80068ba:	700b      	strb	r3, [r1, #0]
 80068bc:	2101      	movs	r1, #1
 80068be:	4240      	negs	r0, r0
 80068c0:	4421      	add	r1, r4
 80068c2:	f000 f91b 	bl	8006afc <__utoa>
 80068c6:	e7f1      	b.n	80068ac <__itoa+0x10>
 80068c8:	2100      	movs	r1, #0
 80068ca:	e7f9      	b.n	80068c0 <__itoa+0x24>

080068cc <itoa>:
 80068cc:	f7ff bfe6 	b.w	800689c <__itoa>

080068d0 <memcpy>:
 80068d0:	440a      	add	r2, r1
 80068d2:	4291      	cmp	r1, r2
 80068d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80068d8:	d100      	bne.n	80068dc <memcpy+0xc>
 80068da:	4770      	bx	lr
 80068dc:	b510      	push	{r4, lr}
 80068de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e2:	4291      	cmp	r1, r2
 80068e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068e8:	d1f9      	bne.n	80068de <memcpy+0xe>
 80068ea:	bd10      	pop	{r4, pc}

080068ec <memset>:
 80068ec:	4603      	mov	r3, r0
 80068ee:	4402      	add	r2, r0
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d100      	bne.n	80068f6 <memset+0xa>
 80068f4:	4770      	bx	lr
 80068f6:	f803 1b01 	strb.w	r1, [r3], #1
 80068fa:	e7f9      	b.n	80068f0 <memset+0x4>

080068fc <_free_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4605      	mov	r5, r0
 8006900:	2900      	cmp	r1, #0
 8006902:	d043      	beq.n	800698c <_free_r+0x90>
 8006904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006908:	1f0c      	subs	r4, r1, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	bfb8      	it	lt
 800690e:	18e4      	addlt	r4, r4, r3
 8006910:	f000 f936 	bl	8006b80 <__malloc_lock>
 8006914:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <_free_r+0x94>)
 8006916:	6813      	ldr	r3, [r2, #0]
 8006918:	4610      	mov	r0, r2
 800691a:	b933      	cbnz	r3, 800692a <_free_r+0x2e>
 800691c:	6063      	str	r3, [r4, #4]
 800691e:	6014      	str	r4, [r2, #0]
 8006920:	4628      	mov	r0, r5
 8006922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006926:	f000 b931 	b.w	8006b8c <__malloc_unlock>
 800692a:	42a3      	cmp	r3, r4
 800692c:	d90a      	bls.n	8006944 <_free_r+0x48>
 800692e:	6821      	ldr	r1, [r4, #0]
 8006930:	1862      	adds	r2, r4, r1
 8006932:	4293      	cmp	r3, r2
 8006934:	bf01      	itttt	eq
 8006936:	681a      	ldreq	r2, [r3, #0]
 8006938:	685b      	ldreq	r3, [r3, #4]
 800693a:	1852      	addeq	r2, r2, r1
 800693c:	6022      	streq	r2, [r4, #0]
 800693e:	6063      	str	r3, [r4, #4]
 8006940:	6004      	str	r4, [r0, #0]
 8006942:	e7ed      	b.n	8006920 <_free_r+0x24>
 8006944:	461a      	mov	r2, r3
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	b10b      	cbz	r3, 800694e <_free_r+0x52>
 800694a:	42a3      	cmp	r3, r4
 800694c:	d9fa      	bls.n	8006944 <_free_r+0x48>
 800694e:	6811      	ldr	r1, [r2, #0]
 8006950:	1850      	adds	r0, r2, r1
 8006952:	42a0      	cmp	r0, r4
 8006954:	d10b      	bne.n	800696e <_free_r+0x72>
 8006956:	6820      	ldr	r0, [r4, #0]
 8006958:	4401      	add	r1, r0
 800695a:	1850      	adds	r0, r2, r1
 800695c:	4283      	cmp	r3, r0
 800695e:	6011      	str	r1, [r2, #0]
 8006960:	d1de      	bne.n	8006920 <_free_r+0x24>
 8006962:	6818      	ldr	r0, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	4401      	add	r1, r0
 8006968:	6011      	str	r1, [r2, #0]
 800696a:	6053      	str	r3, [r2, #4]
 800696c:	e7d8      	b.n	8006920 <_free_r+0x24>
 800696e:	d902      	bls.n	8006976 <_free_r+0x7a>
 8006970:	230c      	movs	r3, #12
 8006972:	602b      	str	r3, [r5, #0]
 8006974:	e7d4      	b.n	8006920 <_free_r+0x24>
 8006976:	6820      	ldr	r0, [r4, #0]
 8006978:	1821      	adds	r1, r4, r0
 800697a:	428b      	cmp	r3, r1
 800697c:	bf01      	itttt	eq
 800697e:	6819      	ldreq	r1, [r3, #0]
 8006980:	685b      	ldreq	r3, [r3, #4]
 8006982:	1809      	addeq	r1, r1, r0
 8006984:	6021      	streq	r1, [r4, #0]
 8006986:	6063      	str	r3, [r4, #4]
 8006988:	6054      	str	r4, [r2, #4]
 800698a:	e7c9      	b.n	8006920 <_free_r+0x24>
 800698c:	bd38      	pop	{r3, r4, r5, pc}
 800698e:	bf00      	nop
 8006990:	20000598 	.word	0x20000598

08006994 <_malloc_r>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	1ccd      	adds	r5, r1, #3
 8006998:	f025 0503 	bic.w	r5, r5, #3
 800699c:	3508      	adds	r5, #8
 800699e:	2d0c      	cmp	r5, #12
 80069a0:	bf38      	it	cc
 80069a2:	250c      	movcc	r5, #12
 80069a4:	2d00      	cmp	r5, #0
 80069a6:	4606      	mov	r6, r0
 80069a8:	db01      	blt.n	80069ae <_malloc_r+0x1a>
 80069aa:	42a9      	cmp	r1, r5
 80069ac:	d903      	bls.n	80069b6 <_malloc_r+0x22>
 80069ae:	230c      	movs	r3, #12
 80069b0:	6033      	str	r3, [r6, #0]
 80069b2:	2000      	movs	r0, #0
 80069b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b6:	f000 f8e3 	bl	8006b80 <__malloc_lock>
 80069ba:	4921      	ldr	r1, [pc, #132]	; (8006a40 <_malloc_r+0xac>)
 80069bc:	680a      	ldr	r2, [r1, #0]
 80069be:	4614      	mov	r4, r2
 80069c0:	b99c      	cbnz	r4, 80069ea <_malloc_r+0x56>
 80069c2:	4f20      	ldr	r7, [pc, #128]	; (8006a44 <_malloc_r+0xb0>)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	b923      	cbnz	r3, 80069d2 <_malloc_r+0x3e>
 80069c8:	4621      	mov	r1, r4
 80069ca:	4630      	mov	r0, r6
 80069cc:	f000 f83c 	bl	8006a48 <_sbrk_r>
 80069d0:	6038      	str	r0, [r7, #0]
 80069d2:	4629      	mov	r1, r5
 80069d4:	4630      	mov	r0, r6
 80069d6:	f000 f837 	bl	8006a48 <_sbrk_r>
 80069da:	1c43      	adds	r3, r0, #1
 80069dc:	d123      	bne.n	8006a26 <_malloc_r+0x92>
 80069de:	230c      	movs	r3, #12
 80069e0:	4630      	mov	r0, r6
 80069e2:	6033      	str	r3, [r6, #0]
 80069e4:	f000 f8d2 	bl	8006b8c <__malloc_unlock>
 80069e8:	e7e3      	b.n	80069b2 <_malloc_r+0x1e>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	1b5b      	subs	r3, r3, r5
 80069ee:	d417      	bmi.n	8006a20 <_malloc_r+0x8c>
 80069f0:	2b0b      	cmp	r3, #11
 80069f2:	d903      	bls.n	80069fc <_malloc_r+0x68>
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	441c      	add	r4, r3
 80069f8:	6025      	str	r5, [r4, #0]
 80069fa:	e004      	b.n	8006a06 <_malloc_r+0x72>
 80069fc:	6863      	ldr	r3, [r4, #4]
 80069fe:	42a2      	cmp	r2, r4
 8006a00:	bf0c      	ite	eq
 8006a02:	600b      	streq	r3, [r1, #0]
 8006a04:	6053      	strne	r3, [r2, #4]
 8006a06:	4630      	mov	r0, r6
 8006a08:	f000 f8c0 	bl	8006b8c <__malloc_unlock>
 8006a0c:	f104 000b 	add.w	r0, r4, #11
 8006a10:	1d23      	adds	r3, r4, #4
 8006a12:	f020 0007 	bic.w	r0, r0, #7
 8006a16:	1ac2      	subs	r2, r0, r3
 8006a18:	d0cc      	beq.n	80069b4 <_malloc_r+0x20>
 8006a1a:	1a1b      	subs	r3, r3, r0
 8006a1c:	50a3      	str	r3, [r4, r2]
 8006a1e:	e7c9      	b.n	80069b4 <_malloc_r+0x20>
 8006a20:	4622      	mov	r2, r4
 8006a22:	6864      	ldr	r4, [r4, #4]
 8006a24:	e7cc      	b.n	80069c0 <_malloc_r+0x2c>
 8006a26:	1cc4      	adds	r4, r0, #3
 8006a28:	f024 0403 	bic.w	r4, r4, #3
 8006a2c:	42a0      	cmp	r0, r4
 8006a2e:	d0e3      	beq.n	80069f8 <_malloc_r+0x64>
 8006a30:	1a21      	subs	r1, r4, r0
 8006a32:	4630      	mov	r0, r6
 8006a34:	f000 f808 	bl	8006a48 <_sbrk_r>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d1dd      	bne.n	80069f8 <_malloc_r+0x64>
 8006a3c:	e7cf      	b.n	80069de <_malloc_r+0x4a>
 8006a3e:	bf00      	nop
 8006a40:	20000598 	.word	0x20000598
 8006a44:	2000059c 	.word	0x2000059c

08006a48 <_sbrk_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4d05      	ldr	r5, [pc, #20]	; (8006a64 <_sbrk_r+0x1c>)
 8006a4e:	4604      	mov	r4, r0
 8006a50:	4608      	mov	r0, r1
 8006a52:	602b      	str	r3, [r5, #0]
 8006a54:	f7fb fbc2 	bl	80021dc <_sbrk>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d102      	bne.n	8006a62 <_sbrk_r+0x1a>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	b103      	cbz	r3, 8006a62 <_sbrk_r+0x1a>
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	200008ac 	.word	0x200008ac

08006a68 <siprintf>:
 8006a68:	b40e      	push	{r1, r2, r3}
 8006a6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a6e:	b500      	push	{lr}
 8006a70:	b09c      	sub	sp, #112	; 0x70
 8006a72:	ab1d      	add	r3, sp, #116	; 0x74
 8006a74:	9002      	str	r0, [sp, #8]
 8006a76:	9006      	str	r0, [sp, #24]
 8006a78:	9107      	str	r1, [sp, #28]
 8006a7a:	9104      	str	r1, [sp, #16]
 8006a7c:	4808      	ldr	r0, [pc, #32]	; (8006aa0 <siprintf+0x38>)
 8006a7e:	4909      	ldr	r1, [pc, #36]	; (8006aa4 <siprintf+0x3c>)
 8006a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a84:	9105      	str	r1, [sp, #20]
 8006a86:	6800      	ldr	r0, [r0, #0]
 8006a88:	a902      	add	r1, sp, #8
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	f000 f8e0 	bl	8006c50 <_svfiprintf_r>
 8006a90:	2200      	movs	r2, #0
 8006a92:	9b02      	ldr	r3, [sp, #8]
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	b01c      	add	sp, #112	; 0x70
 8006a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a9c:	b003      	add	sp, #12
 8006a9e:	4770      	bx	lr
 8006aa0:	20000048 	.word	0x20000048
 8006aa4:	ffff0208 	.word	0xffff0208

08006aa8 <strcat>:
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	7814      	ldrb	r4, [r2, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	3201      	adds	r2, #1
 8006ab2:	2c00      	cmp	r4, #0
 8006ab4:	d1fa      	bne.n	8006aac <strcat+0x4>
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006abc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	d1f9      	bne.n	8006ab8 <strcat+0x10>
 8006ac4:	bd10      	pop	{r4, pc}

08006ac6 <strcpy>:
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006acc:	f803 2b01 	strb.w	r2, [r3], #1
 8006ad0:	2a00      	cmp	r2, #0
 8006ad2:	d1f9      	bne.n	8006ac8 <strcpy+0x2>
 8006ad4:	4770      	bx	lr

08006ad6 <strncpy>:
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	3901      	subs	r1, #1
 8006adc:	b132      	cbz	r2, 8006aec <strncpy+0x16>
 8006ade:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ae2:	3a01      	subs	r2, #1
 8006ae4:	f803 4b01 	strb.w	r4, [r3], #1
 8006ae8:	2c00      	cmp	r4, #0
 8006aea:	d1f7      	bne.n	8006adc <strncpy+0x6>
 8006aec:	2100      	movs	r1, #0
 8006aee:	441a      	add	r2, r3
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d100      	bne.n	8006af6 <strncpy+0x20>
 8006af4:	bd10      	pop	{r4, pc}
 8006af6:	f803 1b01 	strb.w	r1, [r3], #1
 8006afa:	e7f9      	b.n	8006af0 <strncpy+0x1a>

08006afc <__utoa>:
 8006afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006afe:	b08b      	sub	sp, #44	; 0x2c
 8006b00:	4605      	mov	r5, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	466e      	mov	r6, sp
 8006b06:	4c1d      	ldr	r4, [pc, #116]	; (8006b7c <__utoa+0x80>)
 8006b08:	f104 0c20 	add.w	ip, r4, #32
 8006b0c:	4637      	mov	r7, r6
 8006b0e:	6820      	ldr	r0, [r4, #0]
 8006b10:	6861      	ldr	r1, [r4, #4]
 8006b12:	3408      	adds	r4, #8
 8006b14:	c703      	stmia	r7!, {r0, r1}
 8006b16:	4564      	cmp	r4, ip
 8006b18:	463e      	mov	r6, r7
 8006b1a:	d1f7      	bne.n	8006b0c <__utoa+0x10>
 8006b1c:	7921      	ldrb	r1, [r4, #4]
 8006b1e:	6820      	ldr	r0, [r4, #0]
 8006b20:	7139      	strb	r1, [r7, #4]
 8006b22:	1e91      	subs	r1, r2, #2
 8006b24:	2922      	cmp	r1, #34	; 0x22
 8006b26:	6038      	str	r0, [r7, #0]
 8006b28:	f04f 0100 	mov.w	r1, #0
 8006b2c:	d904      	bls.n	8006b38 <__utoa+0x3c>
 8006b2e:	7019      	strb	r1, [r3, #0]
 8006b30:	460b      	mov	r3, r1
 8006b32:	4618      	mov	r0, r3
 8006b34:	b00b      	add	sp, #44	; 0x2c
 8006b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b38:	1e58      	subs	r0, r3, #1
 8006b3a:	4684      	mov	ip, r0
 8006b3c:	fbb5 f7f2 	udiv	r7, r5, r2
 8006b40:	fb02 5617 	mls	r6, r2, r7, r5
 8006b44:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006b48:	4476      	add	r6, lr
 8006b4a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006b4e:	460c      	mov	r4, r1
 8006b50:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006b54:	462e      	mov	r6, r5
 8006b56:	42b2      	cmp	r2, r6
 8006b58:	463d      	mov	r5, r7
 8006b5a:	f101 0101 	add.w	r1, r1, #1
 8006b5e:	d9ed      	bls.n	8006b3c <__utoa+0x40>
 8006b60:	2200      	movs	r2, #0
 8006b62:	545a      	strb	r2, [r3, r1]
 8006b64:	1919      	adds	r1, r3, r4
 8006b66:	1aa5      	subs	r5, r4, r2
 8006b68:	42aa      	cmp	r2, r5
 8006b6a:	dae2      	bge.n	8006b32 <__utoa+0x36>
 8006b6c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006b70:	780e      	ldrb	r6, [r1, #0]
 8006b72:	3201      	adds	r2, #1
 8006b74:	7006      	strb	r6, [r0, #0]
 8006b76:	f801 5901 	strb.w	r5, [r1], #-1
 8006b7a:	e7f4      	b.n	8006b66 <__utoa+0x6a>
 8006b7c:	08007b14 	.word	0x08007b14

08006b80 <__malloc_lock>:
 8006b80:	4801      	ldr	r0, [pc, #4]	; (8006b88 <__malloc_lock+0x8>)
 8006b82:	f000 bafb 	b.w	800717c <__retarget_lock_acquire_recursive>
 8006b86:	bf00      	nop
 8006b88:	200008b4 	.word	0x200008b4

08006b8c <__malloc_unlock>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	; (8006b94 <__malloc_unlock+0x8>)
 8006b8e:	f000 baf6 	b.w	800717e <__retarget_lock_release_recursive>
 8006b92:	bf00      	nop
 8006b94:	200008b4 	.word	0x200008b4

08006b98 <__ssputs_r>:
 8006b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b9c:	688e      	ldr	r6, [r1, #8]
 8006b9e:	4682      	mov	sl, r0
 8006ba0:	429e      	cmp	r6, r3
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	4690      	mov	r8, r2
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	d838      	bhi.n	8006c1c <__ssputs_r+0x84>
 8006baa:	898a      	ldrh	r2, [r1, #12]
 8006bac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bb0:	d032      	beq.n	8006c18 <__ssputs_r+0x80>
 8006bb2:	6825      	ldr	r5, [r4, #0]
 8006bb4:	6909      	ldr	r1, [r1, #16]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	eba5 0901 	sub.w	r9, r5, r1
 8006bbc:	6965      	ldr	r5, [r4, #20]
 8006bbe:	444b      	add	r3, r9
 8006bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bc8:	106d      	asrs	r5, r5, #1
 8006bca:	429d      	cmp	r5, r3
 8006bcc:	bf38      	it	cc
 8006bce:	461d      	movcc	r5, r3
 8006bd0:	0553      	lsls	r3, r2, #21
 8006bd2:	d531      	bpl.n	8006c38 <__ssputs_r+0xa0>
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	f7ff fedd 	bl	8006994 <_malloc_r>
 8006bda:	4606      	mov	r6, r0
 8006bdc:	b950      	cbnz	r0, 8006bf4 <__ssputs_r+0x5c>
 8006bde:	230c      	movs	r3, #12
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006be4:	f8ca 3000 	str.w	r3, [sl]
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf4:	464a      	mov	r2, r9
 8006bf6:	6921      	ldr	r1, [r4, #16]
 8006bf8:	f7ff fe6a 	bl	80068d0 <memcpy>
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	6126      	str	r6, [r4, #16]
 8006c0a:	444e      	add	r6, r9
 8006c0c:	6026      	str	r6, [r4, #0]
 8006c0e:	463e      	mov	r6, r7
 8006c10:	6165      	str	r5, [r4, #20]
 8006c12:	eba5 0509 	sub.w	r5, r5, r9
 8006c16:	60a5      	str	r5, [r4, #8]
 8006c18:	42be      	cmp	r6, r7
 8006c1a:	d900      	bls.n	8006c1e <__ssputs_r+0x86>
 8006c1c:	463e      	mov	r6, r7
 8006c1e:	4632      	mov	r2, r6
 8006c20:	4641      	mov	r1, r8
 8006c22:	6820      	ldr	r0, [r4, #0]
 8006c24:	f000 faba 	bl	800719c <memmove>
 8006c28:	68a3      	ldr	r3, [r4, #8]
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	1b9b      	subs	r3, r3, r6
 8006c2e:	4432      	add	r2, r6
 8006c30:	2000      	movs	r0, #0
 8006c32:	60a3      	str	r3, [r4, #8]
 8006c34:	6022      	str	r2, [r4, #0]
 8006c36:	e7db      	b.n	8006bf0 <__ssputs_r+0x58>
 8006c38:	462a      	mov	r2, r5
 8006c3a:	f000 fac9 	bl	80071d0 <_realloc_r>
 8006c3e:	4606      	mov	r6, r0
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d1e1      	bne.n	8006c08 <__ssputs_r+0x70>
 8006c44:	4650      	mov	r0, sl
 8006c46:	6921      	ldr	r1, [r4, #16]
 8006c48:	f7ff fe58 	bl	80068fc <_free_r>
 8006c4c:	e7c7      	b.n	8006bde <__ssputs_r+0x46>
	...

08006c50 <_svfiprintf_r>:
 8006c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c54:	4698      	mov	r8, r3
 8006c56:	898b      	ldrh	r3, [r1, #12]
 8006c58:	4607      	mov	r7, r0
 8006c5a:	061b      	lsls	r3, r3, #24
 8006c5c:	460d      	mov	r5, r1
 8006c5e:	4614      	mov	r4, r2
 8006c60:	b09d      	sub	sp, #116	; 0x74
 8006c62:	d50e      	bpl.n	8006c82 <_svfiprintf_r+0x32>
 8006c64:	690b      	ldr	r3, [r1, #16]
 8006c66:	b963      	cbnz	r3, 8006c82 <_svfiprintf_r+0x32>
 8006c68:	2140      	movs	r1, #64	; 0x40
 8006c6a:	f7ff fe93 	bl	8006994 <_malloc_r>
 8006c6e:	6028      	str	r0, [r5, #0]
 8006c70:	6128      	str	r0, [r5, #16]
 8006c72:	b920      	cbnz	r0, 8006c7e <_svfiprintf_r+0x2e>
 8006c74:	230c      	movs	r3, #12
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c7c:	e0d1      	b.n	8006e22 <_svfiprintf_r+0x1d2>
 8006c7e:	2340      	movs	r3, #64	; 0x40
 8006c80:	616b      	str	r3, [r5, #20]
 8006c82:	2300      	movs	r3, #0
 8006c84:	9309      	str	r3, [sp, #36]	; 0x24
 8006c86:	2320      	movs	r3, #32
 8006c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c8c:	2330      	movs	r3, #48	; 0x30
 8006c8e:	f04f 0901 	mov.w	r9, #1
 8006c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e3c <_svfiprintf_r+0x1ec>
 8006c9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	469a      	mov	sl, r3
 8006ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca6:	b10a      	cbz	r2, 8006cac <_svfiprintf_r+0x5c>
 8006ca8:	2a25      	cmp	r2, #37	; 0x25
 8006caa:	d1f9      	bne.n	8006ca0 <_svfiprintf_r+0x50>
 8006cac:	ebba 0b04 	subs.w	fp, sl, r4
 8006cb0:	d00b      	beq.n	8006cca <_svfiprintf_r+0x7a>
 8006cb2:	465b      	mov	r3, fp
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f7ff ff6d 	bl	8006b98 <__ssputs_r>
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	f000 80aa 	beq.w	8006e18 <_svfiprintf_r+0x1c8>
 8006cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc6:	445a      	add	r2, fp
 8006cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8006cca:	f89a 3000 	ldrb.w	r3, [sl]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 80a2 	beq.w	8006e18 <_svfiprintf_r+0x1c8>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cde:	f10a 0a01 	add.w	sl, sl, #1
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	9307      	str	r3, [sp, #28]
 8006ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cea:	931a      	str	r3, [sp, #104]	; 0x68
 8006cec:	4654      	mov	r4, sl
 8006cee:	2205      	movs	r2, #5
 8006cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf4:	4851      	ldr	r0, [pc, #324]	; (8006e3c <_svfiprintf_r+0x1ec>)
 8006cf6:	f000 fa43 	bl	8007180 <memchr>
 8006cfa:	9a04      	ldr	r2, [sp, #16]
 8006cfc:	b9d8      	cbnz	r0, 8006d36 <_svfiprintf_r+0xe6>
 8006cfe:	06d0      	lsls	r0, r2, #27
 8006d00:	bf44      	itt	mi
 8006d02:	2320      	movmi	r3, #32
 8006d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d08:	0711      	lsls	r1, r2, #28
 8006d0a:	bf44      	itt	mi
 8006d0c:	232b      	movmi	r3, #43	; 0x2b
 8006d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d12:	f89a 3000 	ldrb.w	r3, [sl]
 8006d16:	2b2a      	cmp	r3, #42	; 0x2a
 8006d18:	d015      	beq.n	8006d46 <_svfiprintf_r+0xf6>
 8006d1a:	4654      	mov	r4, sl
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	f04f 0c0a 	mov.w	ip, #10
 8006d22:	9a07      	ldr	r2, [sp, #28]
 8006d24:	4621      	mov	r1, r4
 8006d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d2a:	3b30      	subs	r3, #48	; 0x30
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	d94e      	bls.n	8006dce <_svfiprintf_r+0x17e>
 8006d30:	b1b0      	cbz	r0, 8006d60 <_svfiprintf_r+0x110>
 8006d32:	9207      	str	r2, [sp, #28]
 8006d34:	e014      	b.n	8006d60 <_svfiprintf_r+0x110>
 8006d36:	eba0 0308 	sub.w	r3, r0, r8
 8006d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	46a2      	mov	sl, r4
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	e7d2      	b.n	8006cec <_svfiprintf_r+0x9c>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	1d19      	adds	r1, r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	9103      	str	r1, [sp, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfbb      	ittet	lt
 8006d52:	425b      	neglt	r3, r3
 8006d54:	f042 0202 	orrlt.w	r2, r2, #2
 8006d58:	9307      	strge	r3, [sp, #28]
 8006d5a:	9307      	strlt	r3, [sp, #28]
 8006d5c:	bfb8      	it	lt
 8006d5e:	9204      	strlt	r2, [sp, #16]
 8006d60:	7823      	ldrb	r3, [r4, #0]
 8006d62:	2b2e      	cmp	r3, #46	; 0x2e
 8006d64:	d10c      	bne.n	8006d80 <_svfiprintf_r+0x130>
 8006d66:	7863      	ldrb	r3, [r4, #1]
 8006d68:	2b2a      	cmp	r3, #42	; 0x2a
 8006d6a:	d135      	bne.n	8006dd8 <_svfiprintf_r+0x188>
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	3402      	adds	r4, #2
 8006d70:	1d1a      	adds	r2, r3, #4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	9203      	str	r2, [sp, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bfb8      	it	lt
 8006d7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d7e:	9305      	str	r3, [sp, #20]
 8006d80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e4c <_svfiprintf_r+0x1fc>
 8006d84:	2203      	movs	r2, #3
 8006d86:	4650      	mov	r0, sl
 8006d88:	7821      	ldrb	r1, [r4, #0]
 8006d8a:	f000 f9f9 	bl	8007180 <memchr>
 8006d8e:	b140      	cbz	r0, 8006da2 <_svfiprintf_r+0x152>
 8006d90:	2340      	movs	r3, #64	; 0x40
 8006d92:	eba0 000a 	sub.w	r0, r0, sl
 8006d96:	fa03 f000 	lsl.w	r0, r3, r0
 8006d9a:	9b04      	ldr	r3, [sp, #16]
 8006d9c:	3401      	adds	r4, #1
 8006d9e:	4303      	orrs	r3, r0
 8006da0:	9304      	str	r3, [sp, #16]
 8006da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da6:	2206      	movs	r2, #6
 8006da8:	4825      	ldr	r0, [pc, #148]	; (8006e40 <_svfiprintf_r+0x1f0>)
 8006daa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dae:	f000 f9e7 	bl	8007180 <memchr>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d038      	beq.n	8006e28 <_svfiprintf_r+0x1d8>
 8006db6:	4b23      	ldr	r3, [pc, #140]	; (8006e44 <_svfiprintf_r+0x1f4>)
 8006db8:	bb1b      	cbnz	r3, 8006e02 <_svfiprintf_r+0x1b2>
 8006dba:	9b03      	ldr	r3, [sp, #12]
 8006dbc:	3307      	adds	r3, #7
 8006dbe:	f023 0307 	bic.w	r3, r3, #7
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	9303      	str	r3, [sp, #12]
 8006dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc8:	4433      	add	r3, r6
 8006dca:	9309      	str	r3, [sp, #36]	; 0x24
 8006dcc:	e767      	b.n	8006c9e <_svfiprintf_r+0x4e>
 8006dce:	460c      	mov	r4, r1
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dd6:	e7a5      	b.n	8006d24 <_svfiprintf_r+0xd4>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f04f 0c0a 	mov.w	ip, #10
 8006dde:	4619      	mov	r1, r3
 8006de0:	3401      	adds	r4, #1
 8006de2:	9305      	str	r3, [sp, #20]
 8006de4:	4620      	mov	r0, r4
 8006de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dea:	3a30      	subs	r2, #48	; 0x30
 8006dec:	2a09      	cmp	r2, #9
 8006dee:	d903      	bls.n	8006df8 <_svfiprintf_r+0x1a8>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d0c5      	beq.n	8006d80 <_svfiprintf_r+0x130>
 8006df4:	9105      	str	r1, [sp, #20]
 8006df6:	e7c3      	b.n	8006d80 <_svfiprintf_r+0x130>
 8006df8:	4604      	mov	r4, r0
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e00:	e7f0      	b.n	8006de4 <_svfiprintf_r+0x194>
 8006e02:	ab03      	add	r3, sp, #12
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	462a      	mov	r2, r5
 8006e08:	4638      	mov	r0, r7
 8006e0a:	4b0f      	ldr	r3, [pc, #60]	; (8006e48 <_svfiprintf_r+0x1f8>)
 8006e0c:	a904      	add	r1, sp, #16
 8006e0e:	f3af 8000 	nop.w
 8006e12:	1c42      	adds	r2, r0, #1
 8006e14:	4606      	mov	r6, r0
 8006e16:	d1d6      	bne.n	8006dc6 <_svfiprintf_r+0x176>
 8006e18:	89ab      	ldrh	r3, [r5, #12]
 8006e1a:	065b      	lsls	r3, r3, #25
 8006e1c:	f53f af2c 	bmi.w	8006c78 <_svfiprintf_r+0x28>
 8006e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e22:	b01d      	add	sp, #116	; 0x74
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e28:	ab03      	add	r3, sp, #12
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	462a      	mov	r2, r5
 8006e2e:	4638      	mov	r0, r7
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <_svfiprintf_r+0x1f8>)
 8006e32:	a904      	add	r1, sp, #16
 8006e34:	f000 f87c 	bl	8006f30 <_printf_i>
 8006e38:	e7eb      	b.n	8006e12 <_svfiprintf_r+0x1c2>
 8006e3a:	bf00      	nop
 8006e3c:	08007b39 	.word	0x08007b39
 8006e40:	08007b43 	.word	0x08007b43
 8006e44:	00000000 	.word	0x00000000
 8006e48:	08006b99 	.word	0x08006b99
 8006e4c:	08007b3f 	.word	0x08007b3f

08006e50 <_printf_common>:
 8006e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e54:	4616      	mov	r6, r2
 8006e56:	4699      	mov	r9, r3
 8006e58:	688a      	ldr	r2, [r1, #8]
 8006e5a:	690b      	ldr	r3, [r1, #16]
 8006e5c:	4607      	mov	r7, r0
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	bfb8      	it	lt
 8006e62:	4613      	movlt	r3, r2
 8006e64:	6033      	str	r3, [r6, #0]
 8006e66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e70:	b10a      	cbz	r2, 8006e76 <_printf_common+0x26>
 8006e72:	3301      	adds	r3, #1
 8006e74:	6033      	str	r3, [r6, #0]
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	0699      	lsls	r1, r3, #26
 8006e7a:	bf42      	ittt	mi
 8006e7c:	6833      	ldrmi	r3, [r6, #0]
 8006e7e:	3302      	addmi	r3, #2
 8006e80:	6033      	strmi	r3, [r6, #0]
 8006e82:	6825      	ldr	r5, [r4, #0]
 8006e84:	f015 0506 	ands.w	r5, r5, #6
 8006e88:	d106      	bne.n	8006e98 <_printf_common+0x48>
 8006e8a:	f104 0a19 	add.w	sl, r4, #25
 8006e8e:	68e3      	ldr	r3, [r4, #12]
 8006e90:	6832      	ldr	r2, [r6, #0]
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	42ab      	cmp	r3, r5
 8006e96:	dc28      	bgt.n	8006eea <_printf_common+0x9a>
 8006e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e9c:	1e13      	subs	r3, r2, #0
 8006e9e:	6822      	ldr	r2, [r4, #0]
 8006ea0:	bf18      	it	ne
 8006ea2:	2301      	movne	r3, #1
 8006ea4:	0692      	lsls	r2, r2, #26
 8006ea6:	d42d      	bmi.n	8006f04 <_printf_common+0xb4>
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	4638      	mov	r0, r7
 8006eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006eb0:	47c0      	blx	r8
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d020      	beq.n	8006ef8 <_printf_common+0xa8>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	68e5      	ldr	r5, [r4, #12]
 8006eba:	f003 0306 	and.w	r3, r3, #6
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	bf18      	it	ne
 8006ec2:	2500      	movne	r5, #0
 8006ec4:	6832      	ldr	r2, [r6, #0]
 8006ec6:	f04f 0600 	mov.w	r6, #0
 8006eca:	68a3      	ldr	r3, [r4, #8]
 8006ecc:	bf08      	it	eq
 8006ece:	1aad      	subeq	r5, r5, r2
 8006ed0:	6922      	ldr	r2, [r4, #16]
 8006ed2:	bf08      	it	eq
 8006ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	bfc4      	itt	gt
 8006edc:	1a9b      	subgt	r3, r3, r2
 8006ede:	18ed      	addgt	r5, r5, r3
 8006ee0:	341a      	adds	r4, #26
 8006ee2:	42b5      	cmp	r5, r6
 8006ee4:	d11a      	bne.n	8006f1c <_printf_common+0xcc>
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	e008      	b.n	8006efc <_printf_common+0xac>
 8006eea:	2301      	movs	r3, #1
 8006eec:	4652      	mov	r2, sl
 8006eee:	4649      	mov	r1, r9
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	47c0      	blx	r8
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d103      	bne.n	8006f00 <_printf_common+0xb0>
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f00:	3501      	adds	r5, #1
 8006f02:	e7c4      	b.n	8006e8e <_printf_common+0x3e>
 8006f04:	2030      	movs	r0, #48	; 0x30
 8006f06:	18e1      	adds	r1, r4, r3
 8006f08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f12:	4422      	add	r2, r4
 8006f14:	3302      	adds	r3, #2
 8006f16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f1a:	e7c5      	b.n	8006ea8 <_printf_common+0x58>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4622      	mov	r2, r4
 8006f20:	4649      	mov	r1, r9
 8006f22:	4638      	mov	r0, r7
 8006f24:	47c0      	blx	r8
 8006f26:	3001      	adds	r0, #1
 8006f28:	d0e6      	beq.n	8006ef8 <_printf_common+0xa8>
 8006f2a:	3601      	adds	r6, #1
 8006f2c:	e7d9      	b.n	8006ee2 <_printf_common+0x92>
	...

08006f30 <_printf_i>:
 8006f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	460c      	mov	r4, r1
 8006f36:	7e27      	ldrb	r7, [r4, #24]
 8006f38:	4691      	mov	r9, r2
 8006f3a:	2f78      	cmp	r7, #120	; 0x78
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	469a      	mov	sl, r3
 8006f40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f46:	d807      	bhi.n	8006f58 <_printf_i+0x28>
 8006f48:	2f62      	cmp	r7, #98	; 0x62
 8006f4a:	d80a      	bhi.n	8006f62 <_printf_i+0x32>
 8006f4c:	2f00      	cmp	r7, #0
 8006f4e:	f000 80d9 	beq.w	8007104 <_printf_i+0x1d4>
 8006f52:	2f58      	cmp	r7, #88	; 0x58
 8006f54:	f000 80a4 	beq.w	80070a0 <_printf_i+0x170>
 8006f58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f60:	e03a      	b.n	8006fd8 <_printf_i+0xa8>
 8006f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f66:	2b15      	cmp	r3, #21
 8006f68:	d8f6      	bhi.n	8006f58 <_printf_i+0x28>
 8006f6a:	a001      	add	r0, pc, #4	; (adr r0, 8006f70 <_printf_i+0x40>)
 8006f6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f70:	08006fc9 	.word	0x08006fc9
 8006f74:	08006fdd 	.word	0x08006fdd
 8006f78:	08006f59 	.word	0x08006f59
 8006f7c:	08006f59 	.word	0x08006f59
 8006f80:	08006f59 	.word	0x08006f59
 8006f84:	08006f59 	.word	0x08006f59
 8006f88:	08006fdd 	.word	0x08006fdd
 8006f8c:	08006f59 	.word	0x08006f59
 8006f90:	08006f59 	.word	0x08006f59
 8006f94:	08006f59 	.word	0x08006f59
 8006f98:	08006f59 	.word	0x08006f59
 8006f9c:	080070eb 	.word	0x080070eb
 8006fa0:	0800700d 	.word	0x0800700d
 8006fa4:	080070cd 	.word	0x080070cd
 8006fa8:	08006f59 	.word	0x08006f59
 8006fac:	08006f59 	.word	0x08006f59
 8006fb0:	0800710d 	.word	0x0800710d
 8006fb4:	08006f59 	.word	0x08006f59
 8006fb8:	0800700d 	.word	0x0800700d
 8006fbc:	08006f59 	.word	0x08006f59
 8006fc0:	08006f59 	.word	0x08006f59
 8006fc4:	080070d5 	.word	0x080070d5
 8006fc8:	680b      	ldr	r3, [r1, #0]
 8006fca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006fce:	1d1a      	adds	r2, r3, #4
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	600a      	str	r2, [r1, #0]
 8006fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e0a4      	b.n	8007126 <_printf_i+0x1f6>
 8006fdc:	6825      	ldr	r5, [r4, #0]
 8006fde:	6808      	ldr	r0, [r1, #0]
 8006fe0:	062e      	lsls	r6, r5, #24
 8006fe2:	f100 0304 	add.w	r3, r0, #4
 8006fe6:	d50a      	bpl.n	8006ffe <_printf_i+0xce>
 8006fe8:	6805      	ldr	r5, [r0, #0]
 8006fea:	600b      	str	r3, [r1, #0]
 8006fec:	2d00      	cmp	r5, #0
 8006fee:	da03      	bge.n	8006ff8 <_printf_i+0xc8>
 8006ff0:	232d      	movs	r3, #45	; 0x2d
 8006ff2:	426d      	negs	r5, r5
 8006ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff8:	230a      	movs	r3, #10
 8006ffa:	485e      	ldr	r0, [pc, #376]	; (8007174 <_printf_i+0x244>)
 8006ffc:	e019      	b.n	8007032 <_printf_i+0x102>
 8006ffe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007002:	6805      	ldr	r5, [r0, #0]
 8007004:	600b      	str	r3, [r1, #0]
 8007006:	bf18      	it	ne
 8007008:	b22d      	sxthne	r5, r5
 800700a:	e7ef      	b.n	8006fec <_printf_i+0xbc>
 800700c:	680b      	ldr	r3, [r1, #0]
 800700e:	6825      	ldr	r5, [r4, #0]
 8007010:	1d18      	adds	r0, r3, #4
 8007012:	6008      	str	r0, [r1, #0]
 8007014:	0628      	lsls	r0, r5, #24
 8007016:	d501      	bpl.n	800701c <_printf_i+0xec>
 8007018:	681d      	ldr	r5, [r3, #0]
 800701a:	e002      	b.n	8007022 <_printf_i+0xf2>
 800701c:	0669      	lsls	r1, r5, #25
 800701e:	d5fb      	bpl.n	8007018 <_printf_i+0xe8>
 8007020:	881d      	ldrh	r5, [r3, #0]
 8007022:	2f6f      	cmp	r7, #111	; 0x6f
 8007024:	bf0c      	ite	eq
 8007026:	2308      	moveq	r3, #8
 8007028:	230a      	movne	r3, #10
 800702a:	4852      	ldr	r0, [pc, #328]	; (8007174 <_printf_i+0x244>)
 800702c:	2100      	movs	r1, #0
 800702e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007032:	6866      	ldr	r6, [r4, #4]
 8007034:	2e00      	cmp	r6, #0
 8007036:	bfa8      	it	ge
 8007038:	6821      	ldrge	r1, [r4, #0]
 800703a:	60a6      	str	r6, [r4, #8]
 800703c:	bfa4      	itt	ge
 800703e:	f021 0104 	bicge.w	r1, r1, #4
 8007042:	6021      	strge	r1, [r4, #0]
 8007044:	b90d      	cbnz	r5, 800704a <_printf_i+0x11a>
 8007046:	2e00      	cmp	r6, #0
 8007048:	d04d      	beq.n	80070e6 <_printf_i+0x1b6>
 800704a:	4616      	mov	r6, r2
 800704c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007050:	fb03 5711 	mls	r7, r3, r1, r5
 8007054:	5dc7      	ldrb	r7, [r0, r7]
 8007056:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800705a:	462f      	mov	r7, r5
 800705c:	42bb      	cmp	r3, r7
 800705e:	460d      	mov	r5, r1
 8007060:	d9f4      	bls.n	800704c <_printf_i+0x11c>
 8007062:	2b08      	cmp	r3, #8
 8007064:	d10b      	bne.n	800707e <_printf_i+0x14e>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	07df      	lsls	r7, r3, #31
 800706a:	d508      	bpl.n	800707e <_printf_i+0x14e>
 800706c:	6923      	ldr	r3, [r4, #16]
 800706e:	6861      	ldr	r1, [r4, #4]
 8007070:	4299      	cmp	r1, r3
 8007072:	bfde      	ittt	le
 8007074:	2330      	movle	r3, #48	; 0x30
 8007076:	f806 3c01 	strble.w	r3, [r6, #-1]
 800707a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800707e:	1b92      	subs	r2, r2, r6
 8007080:	6122      	str	r2, [r4, #16]
 8007082:	464b      	mov	r3, r9
 8007084:	4621      	mov	r1, r4
 8007086:	4640      	mov	r0, r8
 8007088:	f8cd a000 	str.w	sl, [sp]
 800708c:	aa03      	add	r2, sp, #12
 800708e:	f7ff fedf 	bl	8006e50 <_printf_common>
 8007092:	3001      	adds	r0, #1
 8007094:	d14c      	bne.n	8007130 <_printf_i+0x200>
 8007096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800709a:	b004      	add	sp, #16
 800709c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a0:	4834      	ldr	r0, [pc, #208]	; (8007174 <_printf_i+0x244>)
 80070a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80070a6:	680e      	ldr	r6, [r1, #0]
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80070ae:	061f      	lsls	r7, r3, #24
 80070b0:	600e      	str	r6, [r1, #0]
 80070b2:	d514      	bpl.n	80070de <_printf_i+0x1ae>
 80070b4:	07d9      	lsls	r1, r3, #31
 80070b6:	bf44      	itt	mi
 80070b8:	f043 0320 	orrmi.w	r3, r3, #32
 80070bc:	6023      	strmi	r3, [r4, #0]
 80070be:	b91d      	cbnz	r5, 80070c8 <_printf_i+0x198>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	f023 0320 	bic.w	r3, r3, #32
 80070c6:	6023      	str	r3, [r4, #0]
 80070c8:	2310      	movs	r3, #16
 80070ca:	e7af      	b.n	800702c <_printf_i+0xfc>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	f043 0320 	orr.w	r3, r3, #32
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	2378      	movs	r3, #120	; 0x78
 80070d6:	4828      	ldr	r0, [pc, #160]	; (8007178 <_printf_i+0x248>)
 80070d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070dc:	e7e3      	b.n	80070a6 <_printf_i+0x176>
 80070de:	065e      	lsls	r6, r3, #25
 80070e0:	bf48      	it	mi
 80070e2:	b2ad      	uxthmi	r5, r5
 80070e4:	e7e6      	b.n	80070b4 <_printf_i+0x184>
 80070e6:	4616      	mov	r6, r2
 80070e8:	e7bb      	b.n	8007062 <_printf_i+0x132>
 80070ea:	680b      	ldr	r3, [r1, #0]
 80070ec:	6826      	ldr	r6, [r4, #0]
 80070ee:	1d1d      	adds	r5, r3, #4
 80070f0:	6960      	ldr	r0, [r4, #20]
 80070f2:	600d      	str	r5, [r1, #0]
 80070f4:	0635      	lsls	r5, r6, #24
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	d501      	bpl.n	80070fe <_printf_i+0x1ce>
 80070fa:	6018      	str	r0, [r3, #0]
 80070fc:	e002      	b.n	8007104 <_printf_i+0x1d4>
 80070fe:	0671      	lsls	r1, r6, #25
 8007100:	d5fb      	bpl.n	80070fa <_printf_i+0x1ca>
 8007102:	8018      	strh	r0, [r3, #0]
 8007104:	2300      	movs	r3, #0
 8007106:	4616      	mov	r6, r2
 8007108:	6123      	str	r3, [r4, #16]
 800710a:	e7ba      	b.n	8007082 <_printf_i+0x152>
 800710c:	680b      	ldr	r3, [r1, #0]
 800710e:	1d1a      	adds	r2, r3, #4
 8007110:	600a      	str	r2, [r1, #0]
 8007112:	681e      	ldr	r6, [r3, #0]
 8007114:	2100      	movs	r1, #0
 8007116:	4630      	mov	r0, r6
 8007118:	6862      	ldr	r2, [r4, #4]
 800711a:	f000 f831 	bl	8007180 <memchr>
 800711e:	b108      	cbz	r0, 8007124 <_printf_i+0x1f4>
 8007120:	1b80      	subs	r0, r0, r6
 8007122:	6060      	str	r0, [r4, #4]
 8007124:	6863      	ldr	r3, [r4, #4]
 8007126:	6123      	str	r3, [r4, #16]
 8007128:	2300      	movs	r3, #0
 800712a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800712e:	e7a8      	b.n	8007082 <_printf_i+0x152>
 8007130:	4632      	mov	r2, r6
 8007132:	4649      	mov	r1, r9
 8007134:	4640      	mov	r0, r8
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	47d0      	blx	sl
 800713a:	3001      	adds	r0, #1
 800713c:	d0ab      	beq.n	8007096 <_printf_i+0x166>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	079b      	lsls	r3, r3, #30
 8007142:	d413      	bmi.n	800716c <_printf_i+0x23c>
 8007144:	68e0      	ldr	r0, [r4, #12]
 8007146:	9b03      	ldr	r3, [sp, #12]
 8007148:	4298      	cmp	r0, r3
 800714a:	bfb8      	it	lt
 800714c:	4618      	movlt	r0, r3
 800714e:	e7a4      	b.n	800709a <_printf_i+0x16a>
 8007150:	2301      	movs	r3, #1
 8007152:	4632      	mov	r2, r6
 8007154:	4649      	mov	r1, r9
 8007156:	4640      	mov	r0, r8
 8007158:	47d0      	blx	sl
 800715a:	3001      	adds	r0, #1
 800715c:	d09b      	beq.n	8007096 <_printf_i+0x166>
 800715e:	3501      	adds	r5, #1
 8007160:	68e3      	ldr	r3, [r4, #12]
 8007162:	9903      	ldr	r1, [sp, #12]
 8007164:	1a5b      	subs	r3, r3, r1
 8007166:	42ab      	cmp	r3, r5
 8007168:	dcf2      	bgt.n	8007150 <_printf_i+0x220>
 800716a:	e7eb      	b.n	8007144 <_printf_i+0x214>
 800716c:	2500      	movs	r5, #0
 800716e:	f104 0619 	add.w	r6, r4, #25
 8007172:	e7f5      	b.n	8007160 <_printf_i+0x230>
 8007174:	08007b4a 	.word	0x08007b4a
 8007178:	08007b5b 	.word	0x08007b5b

0800717c <__retarget_lock_acquire_recursive>:
 800717c:	4770      	bx	lr

0800717e <__retarget_lock_release_recursive>:
 800717e:	4770      	bx	lr

08007180 <memchr>:
 8007180:	4603      	mov	r3, r0
 8007182:	b510      	push	{r4, lr}
 8007184:	b2c9      	uxtb	r1, r1
 8007186:	4402      	add	r2, r0
 8007188:	4293      	cmp	r3, r2
 800718a:	4618      	mov	r0, r3
 800718c:	d101      	bne.n	8007192 <memchr+0x12>
 800718e:	2000      	movs	r0, #0
 8007190:	e003      	b.n	800719a <memchr+0x1a>
 8007192:	7804      	ldrb	r4, [r0, #0]
 8007194:	3301      	adds	r3, #1
 8007196:	428c      	cmp	r4, r1
 8007198:	d1f6      	bne.n	8007188 <memchr+0x8>
 800719a:	bd10      	pop	{r4, pc}

0800719c <memmove>:
 800719c:	4288      	cmp	r0, r1
 800719e:	b510      	push	{r4, lr}
 80071a0:	eb01 0402 	add.w	r4, r1, r2
 80071a4:	d902      	bls.n	80071ac <memmove+0x10>
 80071a6:	4284      	cmp	r4, r0
 80071a8:	4623      	mov	r3, r4
 80071aa:	d807      	bhi.n	80071bc <memmove+0x20>
 80071ac:	1e43      	subs	r3, r0, #1
 80071ae:	42a1      	cmp	r1, r4
 80071b0:	d008      	beq.n	80071c4 <memmove+0x28>
 80071b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071ba:	e7f8      	b.n	80071ae <memmove+0x12>
 80071bc:	4601      	mov	r1, r0
 80071be:	4402      	add	r2, r0
 80071c0:	428a      	cmp	r2, r1
 80071c2:	d100      	bne.n	80071c6 <memmove+0x2a>
 80071c4:	bd10      	pop	{r4, pc}
 80071c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071ce:	e7f7      	b.n	80071c0 <memmove+0x24>

080071d0 <_realloc_r>:
 80071d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d2:	4607      	mov	r7, r0
 80071d4:	4614      	mov	r4, r2
 80071d6:	460e      	mov	r6, r1
 80071d8:	b921      	cbnz	r1, 80071e4 <_realloc_r+0x14>
 80071da:	4611      	mov	r1, r2
 80071dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071e0:	f7ff bbd8 	b.w	8006994 <_malloc_r>
 80071e4:	b922      	cbnz	r2, 80071f0 <_realloc_r+0x20>
 80071e6:	f7ff fb89 	bl	80068fc <_free_r>
 80071ea:	4625      	mov	r5, r4
 80071ec:	4628      	mov	r0, r5
 80071ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071f0:	f000 f814 	bl	800721c <_malloc_usable_size_r>
 80071f4:	42a0      	cmp	r0, r4
 80071f6:	d20f      	bcs.n	8007218 <_realloc_r+0x48>
 80071f8:	4621      	mov	r1, r4
 80071fa:	4638      	mov	r0, r7
 80071fc:	f7ff fbca 	bl	8006994 <_malloc_r>
 8007200:	4605      	mov	r5, r0
 8007202:	2800      	cmp	r0, #0
 8007204:	d0f2      	beq.n	80071ec <_realloc_r+0x1c>
 8007206:	4631      	mov	r1, r6
 8007208:	4622      	mov	r2, r4
 800720a:	f7ff fb61 	bl	80068d0 <memcpy>
 800720e:	4631      	mov	r1, r6
 8007210:	4638      	mov	r0, r7
 8007212:	f7ff fb73 	bl	80068fc <_free_r>
 8007216:	e7e9      	b.n	80071ec <_realloc_r+0x1c>
 8007218:	4635      	mov	r5, r6
 800721a:	e7e7      	b.n	80071ec <_realloc_r+0x1c>

0800721c <_malloc_usable_size_r>:
 800721c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007220:	1f18      	subs	r0, r3, #4
 8007222:	2b00      	cmp	r3, #0
 8007224:	bfbc      	itt	lt
 8007226:	580b      	ldrlt	r3, [r1, r0]
 8007228:	18c0      	addlt	r0, r0, r3
 800722a:	4770      	bx	lr

0800722c <_init>:
 800722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722e:	bf00      	nop
 8007230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007232:	bc08      	pop	{r3}
 8007234:	469e      	mov	lr, r3
 8007236:	4770      	bx	lr

08007238 <_fini>:
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	bf00      	nop
 800723c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723e:	bc08      	pop	{r3}
 8007240:	469e      	mov	lr, r3
 8007242:	4770      	bx	lr
