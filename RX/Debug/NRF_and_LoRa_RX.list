
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005068  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a28  08005a28  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08005a28  08005a28  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a28  08005a28  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08005a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  20000024  08005a54  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  08005a54  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014992  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a2f  00000000  00000000  000349df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00037410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00038648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d2a  00000000  00000000  000397e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016464  00000000  00000000  0003c50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f329  00000000  00000000  0005296e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1c97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d2c  00000000  00000000  000e1cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	0800515c 	.word	0x0800515c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	0800515c 	.word	0x0800515c

0800014c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000018 	.word	0x20000018
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001a4:	f002 f887 	bl	80022b6 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001b8:	f003 fc0b 	bl	80039d2 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001d8:	f003 fbfb 	bl	80039d2 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001e2:	f002 f868 	bl	80022b6 <HAL_GPIO_WritePin>
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	20000758 	.word	0x20000758

080001f8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
 8000218:	f002 f84d 	bl	80022b6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
 8000226:	f003 f987 	bl	8003538 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
 8000234:	f003 f980 	bl	8003538 <HAL_SPI_Transmit>
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
 800023e:	f002 f83a 	bl	80022b6 <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	20000758 	.word	0x20000758

08000254 <NRF24_Read_Buf>:
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
  CS_OFF;
}
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	4613      	mov	r3, r2
 8000262:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000264:	2200      	movs	r2, #0
 8000266:	2110      	movs	r1, #16
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <NRF24_Read_Buf+0x4c>)
 800026a:	f002 f824 	bl	80022b6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800026e:	1df9      	adds	r1, r7, #7
 8000270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000274:	2201      	movs	r2, #1
 8000276:	480b      	ldr	r0, [pc, #44]	; (80002a4 <NRF24_Read_Buf+0x50>)
 8000278:	f003 f95e 	bl	8003538 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 800027c:	79bb      	ldrb	r3, [r7, #6]
 800027e:	b29a      	uxth	r2, r3
 8000280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000284:	6839      	ldr	r1, [r7, #0]
 8000286:	4807      	ldr	r0, [pc, #28]	; (80002a4 <NRF24_Read_Buf+0x50>)
 8000288:	f003 fa92 	bl	80037b0 <HAL_SPI_Receive>
  CS_OFF;
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_Read_Buf+0x4c>)
 8000292:	f002 f810 	bl	80022b6 <HAL_GPIO_WritePin>
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000758 	.word	0x20000758

080002a8 <IRQ_Callback>:
	status = read_config_registers();
	return status;
}
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 80002ae:	2301      	movs	r3, #1
 80002b0:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ba:	4814      	ldr	r0, [pc, #80]	; (800030c <IRQ_Callback+0x64>)
 80002bc:	f002 f813 	bl	80022e6 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80002c0:	200a      	movs	r0, #10
 80002c2:	f7ff ff43 	bl	800014c <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 80002c6:	2007      	movs	r0, #7
 80002c8:	f7ff ff62 	bl	8000190 <NRF24_ReadReg>
 80002cc:	4603      	mov	r3, r0
 80002ce:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d013      	beq.n	8000302 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	085b      	lsrs	r3, r3, #1
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	f003 0307 	and.w	r3, r3, #7
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <IRQ_Callback+0x68>)
 80002e8:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80002ea:	220a      	movs	r2, #10
 80002ec:	4909      	ldr	r1, [pc, #36]	; (8000314 <IRQ_Callback+0x6c>)
 80002ee:	2061      	movs	r0, #97	; 0x61
 80002f0:	f7ff ffb0 	bl	8000254 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 80002f4:	2140      	movs	r1, #64	; 0x40
 80002f6:	2007      	movs	r0, #7
 80002f8:	f7ff ff7e 	bl	80001f8 <NRF24_WriteReg>
		rx_flag = 1;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <IRQ_Callback+0x70>)
 80002fe:	2201      	movs	r2, #1
 8000300:	701a      	strb	r2, [r3, #0]
	}
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40011000 	.word	0x40011000
 8000310:	2000004b 	.word	0x2000004b
 8000314:	20000040 	.word	0x20000040
 8000318:	2000004a 	.word	0x2000004a

0800031c <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8000320:	2000      	movs	r0, #0
 8000322:	f000 f889 	bl	8000438 <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 8000326:	f000 f8a9 	bl	800047c <ssd1306_UpdateScreen>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af04      	add	r7, sp, #16
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800033a:	230a      	movs	r3, #10
 800033c:	9302      	str	r3, [sp, #8]
 800033e:	2301      	movs	r3, #1
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2301      	movs	r3, #1
 8000348:	2200      	movs	r2, #0
 800034a:	2178      	movs	r1, #120	; 0x78
 800034c:	4803      	ldr	r0, [pc, #12]	; (800035c <ssd1306_WriteCommand+0x2c>)
 800034e:	f002 f93f 	bl	80025d0 <HAL_I2C_Mem_Write>
}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000678 	.word	0x20000678

08000360 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000364:	2064      	movs	r0, #100	; 0x64
 8000366:	f001 fc29 	bl	8001bbc <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800036a:	20ae      	movs	r0, #174	; 0xae
 800036c:	f7ff ffe0 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000370:	2020      	movs	r0, #32
 8000372:	f7ff ffdd 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000376:	2010      	movs	r0, #16
 8000378:	f7ff ffda 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800037c:	20b0      	movs	r0, #176	; 0xb0
 800037e:	f7ff ffd7 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000382:	20c8      	movs	r0, #200	; 0xc8
 8000384:	f7ff ffd4 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000388:	2000      	movs	r0, #0
 800038a:	f7ff ffd1 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800038e:	2010      	movs	r0, #16
 8000390:	f7ff ffce 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000394:	2040      	movs	r0, #64	; 0x40
 8000396:	f7ff ffcb 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800039a:	2081      	movs	r0, #129	; 0x81
 800039c:	f7ff ffc8 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80003a0:	20ff      	movs	r0, #255	; 0xff
 80003a2:	f7ff ffc5 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80003a6:	20a1      	movs	r0, #161	; 0xa1
 80003a8:	f7ff ffc2 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80003ac:	20a6      	movs	r0, #166	; 0xa6
 80003ae:	f7ff ffbf 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80003b2:	20a8      	movs	r0, #168	; 0xa8
 80003b4:	f7ff ffbc 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80003b8:	203f      	movs	r0, #63	; 0x3f
 80003ba:	f7ff ffb9 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80003be:	20a4      	movs	r0, #164	; 0xa4
 80003c0:	f7ff ffb6 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80003c4:	20d3      	movs	r0, #211	; 0xd3
 80003c6:	f7ff ffb3 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff ffb0 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80003d0:	20d5      	movs	r0, #213	; 0xd5
 80003d2:	f7ff ffad 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80003d6:	20f0      	movs	r0, #240	; 0xf0
 80003d8:	f7ff ffaa 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80003dc:	20d9      	movs	r0, #217	; 0xd9
 80003de:	f7ff ffa7 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80003e2:	2022      	movs	r0, #34	; 0x22
 80003e4:	f7ff ffa4 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80003e8:	20da      	movs	r0, #218	; 0xda
 80003ea:	f7ff ffa1 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80003ee:	2012      	movs	r0, #18
 80003f0:	f7ff ff9e 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80003f4:	20db      	movs	r0, #219	; 0xdb
 80003f6:	f7ff ff9b 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80003fa:	2020      	movs	r0, #32
 80003fc:	f7ff ff98 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000400:	208d      	movs	r0, #141	; 0x8d
 8000402:	f7ff ff95 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000406:	2014      	movs	r0, #20
 8000408:	f7ff ff92 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800040c:	20af      	movs	r0, #175	; 0xaf
 800040e:	f7ff ff8f 	bl	8000330 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000412:	2000      	movs	r0, #0
 8000414:	f000 f810 	bl	8000438 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000418:	f000 f830 	bl	800047c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <ssd1306_Init+0xd4>)
 800041e:	2200      	movs	r2, #0
 8000420:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <ssd1306_Init+0xd4>)
 8000424:	2200      	movs	r2, #0
 8000426:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000428:	4b02      	ldr	r3, [pc, #8]	; (8000434 <ssd1306_Init+0xd4>)
 800042a:	2201      	movs	r2, #1
 800042c:	715a      	strb	r2, [r3, #5]

	return 1;
 800042e:	2301      	movs	r3, #1
}
 8000430:	4618      	mov	r0, r3
 8000432:	bd80      	pop	{r7, pc}
 8000434:	2000044c 	.word	0x2000044c

08000438 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	e00d      	b.n	8000464 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d101      	bne.n	8000452 <ssd1306_Fill+0x1a>
 800044e:	2100      	movs	r1, #0
 8000450:	e000      	b.n	8000454 <ssd1306_Fill+0x1c>
 8000452:	21ff      	movs	r1, #255	; 0xff
 8000454:	4a08      	ldr	r2, [pc, #32]	; (8000478 <ssd1306_Fill+0x40>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	4413      	add	r3, r2
 800045a:	460a      	mov	r2, r1
 800045c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	3301      	adds	r3, #1
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800046a:	d3ed      	bcc.n	8000448 <ssd1306_Fill+0x10>
	}
}
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	2000004c 	.word	0x2000004c

0800047c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000482:	2300      	movs	r3, #0
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	e01d      	b.n	80004c4 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	3b50      	subs	r3, #80	; 0x50
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff4e 	bl	8000330 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000494:	2000      	movs	r0, #0
 8000496:	f7ff ff4b 	bl	8000330 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800049a:	2010      	movs	r0, #16
 800049c:	f7ff ff48 	bl	8000330 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	01db      	lsls	r3, r3, #7
 80004a4:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <ssd1306_UpdateScreen+0x58>)
 80004a6:	4413      	add	r3, r2
 80004a8:	2264      	movs	r2, #100	; 0x64
 80004aa:	9202      	str	r2, [sp, #8]
 80004ac:	2280      	movs	r2, #128	; 0x80
 80004ae:	9201      	str	r2, [sp, #4]
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	2301      	movs	r3, #1
 80004b4:	2240      	movs	r2, #64	; 0x40
 80004b6:	2178      	movs	r1, #120	; 0x78
 80004b8:	4807      	ldr	r0, [pc, #28]	; (80004d8 <ssd1306_UpdateScreen+0x5c>)
 80004ba:	f002 f889 	bl	80025d0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	3301      	adds	r3, #1
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	2b07      	cmp	r3, #7
 80004c8:	d9de      	bls.n	8000488 <ssd1306_UpdateScreen+0xc>
	}
}
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000004c 	.word	0x2000004c
 80004d8:	20000678 	.word	0x20000678

080004dc <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	460b      	mov	r3, r1
 80004e8:	71bb      	strb	r3, [r7, #6]
 80004ea:	4613      	mov	r3, r2
 80004ec:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80004ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	db48      	blt.n	8000588 <ssd1306_DrawPixel+0xac>
 80004f6:	79bb      	ldrb	r3, [r7, #6]
 80004f8:	2b3f      	cmp	r3, #63	; 0x3f
 80004fa:	d845      	bhi.n	8000588 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80004fc:	4b25      	ldr	r3, [pc, #148]	; (8000594 <ssd1306_DrawPixel+0xb8>)
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d006      	beq.n	8000512 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000504:	797b      	ldrb	r3, [r7, #5]
 8000506:	2b00      	cmp	r3, #0
 8000508:	bf0c      	ite	eq
 800050a:	2301      	moveq	r3, #1
 800050c:	2300      	movne	r3, #0
 800050e:	b2db      	uxtb	r3, r3
 8000510:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000512:	797b      	ldrb	r3, [r7, #5]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d11a      	bne.n	800054e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000518:	79fa      	ldrb	r2, [r7, #7]
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	08db      	lsrs	r3, r3, #3
 800051e:	b2d8      	uxtb	r0, r3
 8000520:	4603      	mov	r3, r0
 8000522:	01db      	lsls	r3, r3, #7
 8000524:	4413      	add	r3, r2
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 8000528:	5cd3      	ldrb	r3, [r2, r3]
 800052a:	b25a      	sxtb	r2, r3
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	f003 0307 	and.w	r3, r3, #7
 8000532:	2101      	movs	r1, #1
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	b25b      	sxtb	r3, r3
 800053a:	4313      	orrs	r3, r2
 800053c:	b259      	sxtb	r1, r3
 800053e:	79fa      	ldrb	r2, [r7, #7]
 8000540:	4603      	mov	r3, r0
 8000542:	01db      	lsls	r3, r3, #7
 8000544:	4413      	add	r3, r2
 8000546:	b2c9      	uxtb	r1, r1
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 800054a:	54d1      	strb	r1, [r2, r3]
 800054c:	e01d      	b.n	800058a <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	08db      	lsrs	r3, r3, #3
 8000554:	b2d8      	uxtb	r0, r3
 8000556:	4603      	mov	r3, r0
 8000558:	01db      	lsls	r3, r3, #7
 800055a:	4413      	add	r3, r2
 800055c:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 800055e:	5cd3      	ldrb	r3, [r2, r3]
 8000560:	b25a      	sxtb	r2, r3
 8000562:	79bb      	ldrb	r3, [r7, #6]
 8000564:	f003 0307 	and.w	r3, r3, #7
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	b25b      	sxtb	r3, r3
 8000570:	43db      	mvns	r3, r3
 8000572:	b25b      	sxtb	r3, r3
 8000574:	4013      	ands	r3, r2
 8000576:	b259      	sxtb	r1, r3
 8000578:	79fa      	ldrb	r2, [r7, #7]
 800057a:	4603      	mov	r3, r0
 800057c:	01db      	lsls	r3, r3, #7
 800057e:	4413      	add	r3, r2
 8000580:	b2c9      	uxtb	r1, r1
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 8000584:	54d1      	strb	r1, [r2, r3]
 8000586:	e000      	b.n	800058a <ssd1306_DrawPixel+0xae>
		return;
 8000588:	bf00      	nop
	}
}
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000044c 	.word	0x2000044c
 8000598:	2000004c 	.word	0x2000004c

0800059c <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b089      	sub	sp, #36	; 0x24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4604      	mov	r4, r0
 80005a4:	1d38      	adds	r0, r7, #4
 80005a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80005aa:	461a      	mov	r2, r3
 80005ac:	4623      	mov	r3, r4
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	4613      	mov	r3, r2
 80005b2:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80005b4:	4b38      	ldr	r3, [pc, #224]	; (8000698 <ssd1306_WriteChar+0xfc>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	793b      	ldrb	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	2b7f      	cmp	r3, #127	; 0x7f
 80005c0:	dc06      	bgt.n	80005d0 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80005c2:	4b35      	ldr	r3, [pc, #212]	; (8000698 <ssd1306_WriteChar+0xfc>)
 80005c4:	885b      	ldrh	r3, [r3, #2]
 80005c6:	461a      	mov	r2, r3
 80005c8:	797b      	ldrb	r3, [r7, #5]
 80005ca:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80005cc:	2b3f      	cmp	r3, #63	; 0x3f
 80005ce:	dd01      	ble.n	80005d4 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	e05d      	b.n	8000690 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
 80005d8:	e04c      	b.n	8000674 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	3b20      	subs	r3, #32
 80005e0:	7979      	ldrb	r1, [r7, #5]
 80005e2:	fb01 f303 	mul.w	r3, r1, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	440b      	add	r3, r1
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
 80005f8:	e034      	b.n	8000664 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000606:	2b00      	cmp	r3, #0
 8000608:	d012      	beq.n	8000630 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <ssd1306_WriteChar+0xfc>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4413      	add	r3, r2
 8000616:	b2d8      	uxtb	r0, r3
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <ssd1306_WriteChar+0xfc>)
 800061a:	885b      	ldrh	r3, [r3, #2]
 800061c:	b2da      	uxtb	r2, r3
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4413      	add	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	7bba      	ldrb	r2, [r7, #14]
 8000628:	4619      	mov	r1, r3
 800062a:	f7ff ff57 	bl	80004dc <ssd1306_DrawPixel>
 800062e:	e016      	b.n	800065e <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <ssd1306_WriteChar+0xfc>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4413      	add	r3, r2
 800063c:	b2d8      	uxtb	r0, r3
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <ssd1306_WriteChar+0xfc>)
 8000640:	885b      	ldrh	r3, [r3, #2]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4413      	add	r3, r2
 800064a:	b2d9      	uxtb	r1, r3
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	2b00      	cmp	r3, #0
 8000650:	bf0c      	ite	eq
 8000652:	2301      	moveq	r3, #1
 8000654:	2300      	movne	r3, #0
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	f7ff ff3f 	bl	80004dc <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	3301      	adds	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	793b      	ldrb	r3, [r7, #4]
 8000666:	461a      	mov	r2, r3
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4293      	cmp	r3, r2
 800066c:	d3c5      	bcc.n	80005fa <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	3301      	adds	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	797b      	ldrb	r3, [r7, #5]
 8000676:	461a      	mov	r2, r3
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	4293      	cmp	r3, r2
 800067c:	d3ad      	bcc.n	80005da <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <ssd1306_WriteChar+0xfc>)
 8000680:	881a      	ldrh	r2, [r3, #0]
 8000682:	793b      	ldrb	r3, [r7, #4]
 8000684:	b29b      	uxth	r3, r3
 8000686:	4413      	add	r3, r2
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b03      	ldr	r3, [pc, #12]	; (8000698 <ssd1306_WriteChar+0xfc>)
 800068c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3724      	adds	r7, #36	; 0x24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd90      	pop	{r4, r7, pc}
 8000698:	2000044c 	.word	0x2000044c

0800069c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	1d38      	adds	r0, r7, #4
 80006a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80006aa:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80006ac:	e012      	b.n	80006d4 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	7818      	ldrb	r0, [r3, #0]
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	1d3a      	adds	r2, r7, #4
 80006b6:	ca06      	ldmia	r2, {r1, r2}
 80006b8:	f7ff ff70 	bl	800059c <ssd1306_WriteChar>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d002      	beq.n	80006ce <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	e008      	b.n	80006e0 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
	while (*str)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1e8      	bne.n	80006ae <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	781b      	ldrb	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <ssd1306_SetCursor+0x2c>)
 80006fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <ssd1306_SetCursor+0x2c>)
 8000706:	805a      	strh	r2, [r3, #2]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	2000044c 	.word	0x2000044c

08000718 <clear_menu_items>:

char str_pointer[4] = "->";						// How look pointer on menu item

// ----------------------------------------------------------------------------------------
void clear_menu_items (bool first, bool second, bool third, bool fourth)
{
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	4604      	mov	r4, r0
 8000720:	4608      	mov	r0, r1
 8000722:	4611      	mov	r1, r2
 8000724:	461a      	mov	r2, r3
 8000726:	4623      	mov	r3, r4
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	4603      	mov	r3, r0
 800072c:	71bb      	strb	r3, [r7, #6]
 800072e:	460b      	mov	r3, r1
 8000730:	717b      	strb	r3, [r7, #5]
 8000732:	4613      	mov	r3, r2
 8000734:	713b      	strb	r3, [r7, #4]
	char str[30] = "                     ";
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <clear_menu_items+0xbc>)
 8000738:	f107 0408 	add.w	r4, r7, #8
 800073c:	461d      	mov	r5, r3
 800073e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000742:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000746:	6020      	str	r0, [r4, #0]
 8000748:	3404      	adds	r4, #4
 800074a:	8021      	strh	r1, [r4, #0]
 800074c:	f107 031e 	add.w	r3, r7, #30
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
	if(first == true)
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00a      	beq.n	8000772 <clear_menu_items+0x5a>
	{
		ssd1306_SetCursor(15, 16);
 800075c:	2110      	movs	r1, #16
 800075e:	200f      	movs	r0, #15
 8000760:	f7ff ffc2 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000764:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <clear_menu_items+0xc0>)
 8000766:	f107 0008 	add.w	r0, r7, #8
 800076a:	2301      	movs	r3, #1
 800076c:	ca06      	ldmia	r2, {r1, r2}
 800076e:	f7ff ff95 	bl	800069c <ssd1306_WriteString>
	}
	if(second == true)
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00a      	beq.n	800078e <clear_menu_items+0x76>
	{
		ssd1306_SetCursor(15, 28);
 8000778:	211c      	movs	r1, #28
 800077a:	200f      	movs	r0, #15
 800077c:	f7ff ffb4 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000780:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <clear_menu_items+0xc0>)
 8000782:	f107 0008 	add.w	r0, r7, #8
 8000786:	2301      	movs	r3, #1
 8000788:	ca06      	ldmia	r2, {r1, r2}
 800078a:	f7ff ff87 	bl	800069c <ssd1306_WriteString>
	}
	if(first == true)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00a      	beq.n	80007aa <clear_menu_items+0x92>
	{
		ssd1306_SetCursor(15, 40);
 8000794:	2128      	movs	r1, #40	; 0x28
 8000796:	200f      	movs	r0, #15
 8000798:	f7ff ffa6 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800079c:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <clear_menu_items+0xc0>)
 800079e:	f107 0008 	add.w	r0, r7, #8
 80007a2:	2301      	movs	r3, #1
 80007a4:	ca06      	ldmia	r2, {r1, r2}
 80007a6:	f7ff ff79 	bl	800069c <ssd1306_WriteString>
	}
	if(fourth == true)
 80007aa:	793b      	ldrb	r3, [r7, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00a      	beq.n	80007c6 <clear_menu_items+0xae>
	{
		ssd1306_SetCursor(15, 52);
 80007b0:	2134      	movs	r1, #52	; 0x34
 80007b2:	200f      	movs	r0, #15
 80007b4:	f7ff ff98 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <clear_menu_items+0xc0>)
 80007ba:	f107 0008 	add.w	r0, r7, #8
 80007be:	2301      	movs	r3, #1
 80007c0:	ca06      	ldmia	r2, {r1, r2}
 80007c2:	f7ff ff6b 	bl	800069c <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 80007c6:	f7ff fe59 	bl	800047c <ssd1306_UpdateScreen>

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bdb0      	pop	{r4, r5, r7, pc}
 80007d2:	bf00      	nop
 80007d4:	08005174 	.word	0x08005174
 80007d8:	20000000 	.word	0x20000000

080007dc <print_rows_on_oled_if_up>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_up(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
	char str[30] = {0};
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	831a      	strh	r2, [r3, #24]
	//clearn_oled();
	clear_menu_items (true , true , true , true );
 80007fa:	2301      	movs	r3, #1
 80007fc:	2201      	movs	r2, #1
 80007fe:	2101      	movs	r1, #1
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff ff89 	bl	8000718 <clear_menu_items>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, 16);
 8000806:	2110      	movs	r1, #16
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ff6d 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 800080e:	4a25      	ldr	r2, [pc, #148]	; (80008a4 <print_rows_on_oled_if_up+0xc8>)
 8000810:	2301      	movs	r3, #1
 8000812:	ca06      	ldmia	r2, {r1, r2}
 8000814:	4824      	ldr	r0, [pc, #144]	; (80008a8 <print_rows_on_oled_if_up+0xcc>)
 8000816:	f7ff ff41 	bl	800069c <ssd1306_WriteString>

	MenuItem_t * currentItem_buff_up = currentItem;
 800081a:	4b24      	ldr	r3, [pc, #144]	; (80008ac <print_rows_on_oled_if_up+0xd0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint8_t row = 16; row <= 52; row = row + 12)
 8000820:	2310      	movs	r3, #16
 8000822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000826:	e031      	b.n	800088c <print_rows_on_oled_if_up+0xb0>
	{
		// Print number of menu item
		itoa(currentItem_buff_up -> id, str, 10);
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	7a1b      	ldrb	r3, [r3, #8]
 800082c:	4618      	mov	r0, r3
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	220a      	movs	r2, #10
 8000832:	4619      	mov	r1, r3
 8000834:	f004 fc32 	bl	800509c <itoa>
		ssd1306_SetCursor(15, row);
 8000838:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800083c:	4619      	mov	r1, r3
 800083e:	200f      	movs	r0, #15
 8000840:	f7ff ff52 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000844:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <print_rows_on_oled_if_up+0xc8>)
 8000846:	1d38      	adds	r0, r7, #4
 8000848:	2301      	movs	r3, #1
 800084a:	ca06      	ldmia	r2, {r1, r2}
 800084c:	f7ff ff26 	bl	800069c <ssd1306_WriteString>

		// Print name of menu item
		strncpy(str, currentItem_buff_up -> name, 25);
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	68d9      	ldr	r1, [r3, #12]
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2219      	movs	r2, #25
 8000858:	4618      	mov	r0, r3
 800085a:	f004 fc29 	bl	80050b0 <strncpy>
		ssd1306_SetCursor(30, row);
 800085e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000862:	4619      	mov	r1, r3
 8000864:	201e      	movs	r0, #30
 8000866:	f7ff ff3f 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <print_rows_on_oled_if_up+0xc8>)
 800086c:	1d38      	adds	r0, r7, #4
 800086e:	2301      	movs	r3, #1
 8000870:	ca06      	ldmia	r2, {r1, r2}
 8000872:	f7ff ff13 	bl	800069c <ssd1306_WriteString>

		currentItem_buff_up = currentItem_buff_up -> down;
 8000876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
		if(currentItem_buff_up == 0)
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	2b00      	cmp	r3, #0
 8000880:	d009      	beq.n	8000896 <print_rows_on_oled_if_up+0xba>
	for (uint8_t row = 16; row <= 52; row = row + 12)
 8000882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000886:	330c      	adds	r3, #12
 8000888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800088c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000890:	2b34      	cmp	r3, #52	; 0x34
 8000892:	d9c9      	bls.n	8000828 <print_rows_on_oled_if_up+0x4c>
 8000894:	e000      	b.n	8000898 <print_rows_on_oled_if_up+0xbc>
		{
			break;
 8000896:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 8000898:	f7ff fdf0 	bl	800047c <ssd1306_UpdateScreen>
}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000000 	.word	0x20000000
 80008a8:	2000000c 	.word	0x2000000c
 80008ac:	20000008 	.word	0x20000008

080008b0 <print_rows_on_oled_if_down>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_down(void)	// print text menu item
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
	char str[30] = {0};
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	831a      	strh	r2, [r3, #24]

	clear_menu_items (true , true , true , true );
 80008ce:	2301      	movs	r3, #1
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff ff1f 	bl	8000718 <clear_menu_items>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, 16);
 80008da:	2110      	movs	r1, #16
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff ff03 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 80008e2:	4a28      	ldr	r2, [pc, #160]	; (8000984 <print_rows_on_oled_if_down+0xd4>)
 80008e4:	2301      	movs	r3, #1
 80008e6:	ca06      	ldmia	r2, {r1, r2}
 80008e8:	4827      	ldr	r0, [pc, #156]	; (8000988 <print_rows_on_oled_if_down+0xd8>)
 80008ea:	f7ff fed7 	bl	800069c <ssd1306_WriteString>

	MenuItem_t * currentItem_buff = currentItem;
 80008ee:	4b27      	ldr	r3, [pc, #156]	; (800098c <print_rows_on_oled_if_down+0xdc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint8_t row = 16; row <= 52; row = row + 12)
 80008f4:	2310      	movs	r3, #16
 80008f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80008fa:	e037      	b.n	800096c <print_rows_on_oled_if_down+0xbc>
	{
		// Print number of menu item
        itoa(currentItem_buff -> id, str, 10);
 80008fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fe:	7a1b      	ldrb	r3, [r3, #8]
 8000900:	4618      	mov	r0, r3
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	220a      	movs	r2, #10
 8000906:	4619      	mov	r1, r3
 8000908:	f004 fbc8 	bl	800509c <itoa>
		ssd1306_SetCursor(15, row);
 800090c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000910:	4619      	mov	r1, r3
 8000912:	200f      	movs	r0, #15
 8000914:	f7ff fee8 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000918:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <print_rows_on_oled_if_down+0xd4>)
 800091a:	1d38      	adds	r0, r7, #4
 800091c:	2301      	movs	r3, #1
 800091e:	ca06      	ldmia	r2, {r1, r2}
 8000920:	f7ff febc 	bl	800069c <ssd1306_WriteString>

		// Print name of menu item
		memset(str, 0, sizeof(str));
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	221e      	movs	r2, #30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f004 fbb8 	bl	80050a0 <memset>
	    strncpy(str, currentItem_buff -> name, 25);
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	68d9      	ldr	r1, [r3, #12]
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2219      	movs	r2, #25
 8000938:	4618      	mov	r0, r3
 800093a:	f004 fbb9 	bl	80050b0 <strncpy>
	    ssd1306_SetCursor(30, row);
 800093e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000942:	4619      	mov	r1, r3
 8000944:	201e      	movs	r0, #30
 8000946:	f7ff fecf 	bl	80006e8 <ssd1306_SetCursor>
	    ssd1306_WriteString(str,  Font_7x10, White);
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <print_rows_on_oled_if_down+0xd4>)
 800094c:	1d38      	adds	r0, r7, #4
 800094e:	2301      	movs	r3, #1
 8000950:	ca06      	ldmia	r2, {r1, r2}
 8000952:	f7ff fea3 	bl	800069c <ssd1306_WriteString>

	    currentItem_buff = currentItem_buff -> down;
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
	    if(currentItem_buff == 0)		// End of menu
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	2b00      	cmp	r3, #0
 8000960:	d009      	beq.n	8000976 <print_rows_on_oled_if_down+0xc6>
	for (uint8_t row = 16; row <= 52; row = row + 12)
 8000962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000966:	330c      	adds	r3, #12
 8000968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800096c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000970:	2b34      	cmp	r3, #52	; 0x34
 8000972:	d9c3      	bls.n	80008fc <print_rows_on_oled_if_down+0x4c>
 8000974:	e000      	b.n	8000978 <print_rows_on_oled_if_down+0xc8>
	    {
	    	break;
 8000976:	bf00      	nop
	    }
	 }
	 ssd1306_UpdateScreen();
 8000978:	f7ff fd80 	bl	800047c <ssd1306_UpdateScreen>
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000000 	.word	0x20000000
 8000988:	2000000c 	.word	0x2000000c
 800098c:	20000008 	.word	0x20000008

08000990 <print_menu_init>:
// ----------------------------------------------------------------------------------------
// Print first 4 items of menu (only first time)
void print_menu_init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
	//char str[30] = {0};
	MenuItem_t * currentItem_buff = currentItem;
 8000996:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <print_menu_init+0xf8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	627b      	str	r3, [r7, #36]	; 0x24

	//Print selected name of menu
	char str[30] = "MAIN MENU:";
 800099c:	4a3b      	ldr	r2, [pc, #236]	; (8000a8c <print_menu_init+0xfc>)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009a2:	c303      	stmia	r3!, {r0, r1}
 80009a4:	801a      	strh	r2, [r3, #0]
 80009a6:	3302      	adds	r3, #2
 80009a8:	0c12      	lsrs	r2, r2, #16
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	f107 030f 	add.w	r3, r7, #15
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	f8c3 200f 	str.w	r2, [r3, #15]
	ssd1306_SetCursor(30, 0);
 80009be:	2100      	movs	r1, #0
 80009c0:	201e      	movs	r0, #30
 80009c2:	f7ff fe91 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80009c6:	4a32      	ldr	r2, [pc, #200]	; (8000a90 <print_menu_init+0x100>)
 80009c8:	1d38      	adds	r0, r7, #4
 80009ca:	2301      	movs	r3, #1
 80009cc:	ca06      	ldmia	r2, {r1, r2}
 80009ce:	f7ff fe65 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80009d2:	f7ff fd53 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	221e      	movs	r2, #30
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fb5f 	bl	80050a0 <memset>

	for (uint8_t row = 16; row <= 52; row = row + 12)
 80009e2:	2310      	movs	r3, #16
 80009e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80009e8:	e045      	b.n	8000a76 <print_menu_init+0xe6>
	{
		if(row == 16)
 80009ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009ee:	2b10      	cmp	r3, #16
 80009f0:	d110      	bne.n	8000a14 <print_menu_init+0x84>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 80009f2:	f643 632d 	movw	r3, #15917	; 0x3e2d
 80009f6:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 80009f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009fc:	4619      	mov	r1, r3
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fe72 	bl	80006e8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8000a04:	4a22      	ldr	r2, [pc, #136]	; (8000a90 <print_menu_init+0x100>)
 8000a06:	4638      	mov	r0, r7
 8000a08:	2301      	movs	r3, #1
 8000a0a:	ca06      	ldmia	r2, {r1, r2}
 8000a0c:	f7ff fe46 	bl	800069c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000a10:	f7ff fd34 	bl	800047c <ssd1306_UpdateScreen>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	7a1b      	ldrb	r3, [r3, #8]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f004 fb3c 	bl	800509c <itoa>
		ssd1306_SetCursor(15, row);
 8000a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a28:	4619      	mov	r1, r3
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f7ff fe5c 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <print_menu_init+0x100>)
 8000a32:	1d38      	adds	r0, r7, #4
 8000a34:	2301      	movs	r3, #1
 8000a36:	ca06      	ldmia	r2, {r1, r2}
 8000a38:	f7ff fe30 	bl	800069c <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 25);
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	68d9      	ldr	r1, [r3, #12]
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2219      	movs	r2, #25
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 fb33 	bl	80050b0 <strncpy>
		ssd1306_SetCursor(30, row);
 8000a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a4e:	4619      	mov	r1, r3
 8000a50:	201e      	movs	r0, #30
 8000a52:	f7ff fe49 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <print_menu_init+0x100>)
 8000a58:	1d38      	adds	r0, r7, #4
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	ca06      	ldmia	r2, {r1, r2}
 8000a5e:	f7ff fe1d 	bl	800069c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000a62:	f7ff fd0b 	bl	800047c <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint8_t row = 16; row <= 52; row = row + 12)
 8000a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a70:	330c      	adds	r3, #12
 8000a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000a76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a7a:	2b34      	cmp	r3, #52	; 0x34
 8000a7c:	d9b5      	bls.n	80009ea <print_menu_init+0x5a>
	}
}
 8000a7e:	bf00      	nop
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	08005194 	.word	0x08005194
 8000a90:	20000000 	.word	0x20000000

08000a94 <action>:
// ----------------------------------------------------------------------------------------
void action(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
	clearn_oled();
 8000a9a:	f7ff fc3f 	bl	800031c <clearn_oled>

	 //Print selected name of menu
	char str[30] = {0};
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
 8000ab2:	615a      	str	r2, [r3, #20]
 8000ab4:	831a      	strh	r2, [r3, #24]
	strncpy(str, currentItem -> name, 25);
 8000ab6:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <action+0x110>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68d9      	ldr	r1, [r3, #12]
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2219      	movs	r2, #25
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f004 faf5 	bl	80050b0 <strncpy>
	ssd1306_SetCursor(0, 0);
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f7ff fe0d 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000ace:	4a36      	ldr	r2, [pc, #216]	; (8000ba8 <action+0x114>)
 8000ad0:	1d38      	adds	r0, r7, #4
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	ca06      	ldmia	r2, {r1, r2}
 8000ad6:	f7ff fde1 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000ada:	f7ff fccf 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	221e      	movs	r2, #30
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 fadb 	bl	80050a0 <memset>

	currentItem = &items_menu_1[0];	// Redefine pointer
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <action+0x110>)
 8000aec:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <action+0x118>)
 8000aee:	601a      	str	r2, [r3, #0]


	//char str[30] = {0};
	MenuItem_t * currentItem_buff = currentItem;
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <action+0x110>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t row = 16; row <= 52; row = row + 12)
 8000af6:	2310      	movs	r3, #16
 8000af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000afc:	e048      	b.n	8000b90 <action+0xfc>
	{
		if(row == 16)
 8000afe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b02:	2b10      	cmp	r3, #16
 8000b04:	d110      	bne.n	8000b28 <action+0x94>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 8000b06:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8000b0a:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8000b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b10:	4619      	mov	r1, r3
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff fde8 	bl	80006e8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8000b18:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <action+0x114>)
 8000b1a:	4638      	mov	r0, r7
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	ca06      	ldmia	r2, {r1, r2}
 8000b20:	f7ff fdbc 	bl	800069c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000b24:	f7ff fcaa 	bl	800047c <ssd1306_UpdateScreen>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	7a1b      	ldrb	r3, [r3, #8]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	220a      	movs	r2, #10
 8000b32:	4619      	mov	r1, r3
 8000b34:	f004 fab2 	bl	800509c <itoa>
		ssd1306_SetCursor(15, row);
 8000b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f7ff fdd2 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <action+0x114>)
 8000b46:	1d38      	adds	r0, r7, #4
 8000b48:	2301      	movs	r3, #1
 8000b4a:	ca06      	ldmia	r2, {r1, r2}
 8000b4c:	f7ff fda6 	bl	800069c <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 25);
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	68d9      	ldr	r1, [r3, #12]
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2219      	movs	r2, #25
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 faa9 	bl	80050b0 <strncpy>
		ssd1306_SetCursor(30, row);
 8000b5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b62:	4619      	mov	r1, r3
 8000b64:	201e      	movs	r0, #30
 8000b66:	f7ff fdbf 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <action+0x114>)
 8000b6c:	1d38      	adds	r0, r7, #4
 8000b6e:	2301      	movs	r3, #1
 8000b70:	ca06      	ldmia	r2, {r1, r2}
 8000b72:	f7ff fd93 	bl	800069c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000b76:	f7ff fc81 	bl	800047c <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
		if(currentItem_buff == 0)
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d009      	beq.n	8000b9a <action+0x106>
	for (uint8_t row = 16; row <= 52; row = row + 12)
 8000b86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b8a:	330c      	adds	r3, #12
 8000b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b94:	2b34      	cmp	r3, #52	; 0x34
 8000b96:	d9b2      	bls.n	8000afe <action+0x6a>
		{
			break;
		}
	}
}
 8000b98:	e000      	b.n	8000b9c <action+0x108>
			break;
 8000b9a:	bf00      	nop
}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	200004e4 	.word	0x200004e4

08000bb0 <return_from_menu>:
// ----------------------------------------------------------------------------------------
void return_from_menu(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
	currentItem = &items[0];		// Jump to main menu
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <return_from_menu+0x58>)
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <return_from_menu+0x5c>)
 8000bba:	601a      	str	r2, [r3, #0]
	clearn_oled();
 8000bbc:	f7ff fbae 	bl	800031c <clearn_oled>

	// Print "MAIN MENU:"
	char str[30] = "MAIN MENU:";
 8000bc0:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <return_from_menu+0x60>)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bc6:	c303      	stmia	r3!, {r0, r1}
 8000bc8:	801a      	strh	r2, [r3, #0]
 8000bca:	3302      	adds	r3, #2
 8000bcc:	0c12      	lsrs	r2, r2, #16
 8000bce:	701a      	strb	r2, [r3, #0]
 8000bd0:	f107 030b 	add.w	r3, r7, #11
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	f8c3 200f 	str.w	r2, [r3, #15]
	//strncpy(str, currentItem -> name, 25);
	ssd1306_SetCursor(30, 0);
 8000be2:	2100      	movs	r1, #0
 8000be4:	201e      	movs	r0, #30
 8000be6:	f7ff fd7f 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <return_from_menu+0x64>)
 8000bec:	4638      	mov	r0, r7
 8000bee:	2301      	movs	r3, #1
 8000bf0:	ca06      	ldmia	r2, {r1, r2}
 8000bf2:	f7ff fd53 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000bf6:	f7ff fc41 	bl	800047c <ssd1306_UpdateScreen>

	print_menu_init();
 8000bfa:	f7ff fec9 	bl	8000990 <print_menu_init>

}
 8000bfe:	bf00      	nop
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000570 	.word	0x20000570
 8000c10:	08005194 	.word	0x08005194
 8000c14:	20000000 	.word	0x20000000

08000c18 <Menu_Init>:

// ----------------------------------------------------------------------------------------
void Menu_Init (void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
	void (*p_print_rows_on_oled_if_up) (void);
	void (*p_print_rows_on_oled_if_down) (void);			// Create pointer on function
	void (*p_return_from_menu)(void);
	void (*p_action) (void);							// Create pointer on function
	//p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
	p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
 8000c1e:	4b92      	ldr	r3, [pc, #584]	; (8000e68 <Menu_Init+0x250>)
 8000c20:	60fb      	str	r3, [r7, #12]
	p_print_rows_on_oled_if_down = print_rows_on_oled_if_down;		// Save function print on pointer print_p
 8000c22:	4b92      	ldr	r3, [pc, #584]	; (8000e6c <Menu_Init+0x254>)
 8000c24:	60bb      	str	r3, [r7, #8]
	p_action = action;								// Save function action on pointer action_p
 8000c26:	4b92      	ldr	r3, [pc, #584]	; (8000e70 <Menu_Init+0x258>)
 8000c28:	607b      	str	r3, [r7, #4]
	p_return_from_menu = return_from_menu;
 8000c2a:	4b92      	ldr	r3, [pc, #584]	; (8000e74 <Menu_Init+0x25c>)
 8000c2c:	603b      	str	r3, [r7, #0]
	// Fill in elements(nodes) of list (7 items)
	// Main menu items
	/////////////////////////////////////////////////////////////////
	items[0].up = 0;
 8000c2e:	4b92      	ldr	r3, [pc, #584]	; (8000e78 <Menu_Init+0x260>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
	items[0].down = &items[1];
 8000c34:	4b90      	ldr	r3, [pc, #576]	; (8000e78 <Menu_Init+0x260>)
 8000c36:	4a91      	ldr	r2, [pc, #580]	; (8000e7c <Menu_Init+0x264>)
 8000c38:	605a      	str	r2, [r3, #4]
	items[0].id = 1;
 8000c3a:	4b8f      	ldr	r3, [pc, #572]	; (8000e78 <Menu_Init+0x260>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	721a      	strb	r2, [r3, #8]
	items[0].name = "LoRa E220 RX";						// Name of item
 8000c40:	4b8d      	ldr	r3, [pc, #564]	; (8000e78 <Menu_Init+0x260>)
 8000c42:	4a8f      	ldr	r2, [pc, #572]	; (8000e80 <Menu_Init+0x268>)
 8000c44:	60da      	str	r2, [r3, #12]
	items[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8000c46:	4a8c      	ldr	r2, [pc, #560]	; (8000e78 <Menu_Init+0x260>)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	6113      	str	r3, [r2, #16]
	items[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8000c4c:	4a8a      	ldr	r2, [pc, #552]	; (8000e78 <Menu_Init+0x260>)
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	6153      	str	r3, [r2, #20]
	items[0].makeAction = p_action;          // <-----------------------------  В функцію передати показник на потрібну структуру меню !!!!!
 8000c52:	4a89      	ldr	r2, [pc, #548]	; (8000e78 <Menu_Init+0x260>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6193      	str	r3, [r2, #24]

	items[1].up = &items[0];
 8000c58:	4b87      	ldr	r3, [pc, #540]	; (8000e78 <Menu_Init+0x260>)
 8000c5a:	4a87      	ldr	r2, [pc, #540]	; (8000e78 <Menu_Init+0x260>)
 8000c5c:	61da      	str	r2, [r3, #28]
	items[1].down = &items[2];
 8000c5e:	4b86      	ldr	r3, [pc, #536]	; (8000e78 <Menu_Init+0x260>)
 8000c60:	4a88      	ldr	r2, [pc, #544]	; (8000e84 <Menu_Init+0x26c>)
 8000c62:	621a      	str	r2, [r3, #32]
	items[1].id = 2;
 8000c64:	4b84      	ldr	r3, [pc, #528]	; (8000e78 <Menu_Init+0x260>)
 8000c66:	2202      	movs	r2, #2
 8000c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	items[1].name = "LoRa E220 TX";
 8000c6c:	4b82      	ldr	r3, [pc, #520]	; (8000e78 <Menu_Init+0x260>)
 8000c6e:	4a86      	ldr	r2, [pc, #536]	; (8000e88 <Menu_Init+0x270>)
 8000c70:	629a      	str	r2, [r3, #40]	; 0x28
	items[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8000c72:	4a81      	ldr	r2, [pc, #516]	; (8000e78 <Menu_Init+0x260>)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	62d3      	str	r3, [r2, #44]	; 0x2c
	items[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8000c78:	4a7f      	ldr	r2, [pc, #508]	; (8000e78 <Menu_Init+0x260>)
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
	items[1].makeAction = p_action;
 8000c7e:	4a7e      	ldr	r2, [pc, #504]	; (8000e78 <Menu_Init+0x260>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6353      	str	r3, [r2, #52]	; 0x34

	items[2].up = &items[1];
 8000c84:	4b7c      	ldr	r3, [pc, #496]	; (8000e78 <Menu_Init+0x260>)
 8000c86:	4a7d      	ldr	r2, [pc, #500]	; (8000e7c <Menu_Init+0x264>)
 8000c88:	639a      	str	r2, [r3, #56]	; 0x38
	items[2].down = &items[3];
 8000c8a:	4b7b      	ldr	r3, [pc, #492]	; (8000e78 <Menu_Init+0x260>)
 8000c8c:	4a7f      	ldr	r2, [pc, #508]	; (8000e8c <Menu_Init+0x274>)
 8000c8e:	63da      	str	r2, [r3, #60]	; 0x3c
	items[2].id = 3;
 8000c90:	4b79      	ldr	r3, [pc, #484]	; (8000e78 <Menu_Init+0x260>)
 8000c92:	2203      	movs	r2, #3
 8000c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	items[2].name = "NRF24L01 RX";
 8000c98:	4b77      	ldr	r3, [pc, #476]	; (8000e78 <Menu_Init+0x260>)
 8000c9a:	4a7d      	ldr	r2, [pc, #500]	; (8000e90 <Menu_Init+0x278>)
 8000c9c:	645a      	str	r2, [r3, #68]	; 0x44
	items[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8000c9e:	4a76      	ldr	r2, [pc, #472]	; (8000e78 <Menu_Init+0x260>)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6493      	str	r3, [r2, #72]	; 0x48
	items[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8000ca4:	4a74      	ldr	r2, [pc, #464]	; (8000e78 <Menu_Init+0x260>)
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
	items[2].makeAction = p_action;
 8000caa:	4a73      	ldr	r2, [pc, #460]	; (8000e78 <Menu_Init+0x260>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6513      	str	r3, [r2, #80]	; 0x50

	items[3].up = &items[2];
 8000cb0:	4b71      	ldr	r3, [pc, #452]	; (8000e78 <Menu_Init+0x260>)
 8000cb2:	4a74      	ldr	r2, [pc, #464]	; (8000e84 <Menu_Init+0x26c>)
 8000cb4:	655a      	str	r2, [r3, #84]	; 0x54
	items[3].down = &items[4];
 8000cb6:	4b70      	ldr	r3, [pc, #448]	; (8000e78 <Menu_Init+0x260>)
 8000cb8:	4a76      	ldr	r2, [pc, #472]	; (8000e94 <Menu_Init+0x27c>)
 8000cba:	659a      	str	r2, [r3, #88]	; 0x58
	items[3].id = 4;
 8000cbc:	4b6e      	ldr	r3, [pc, #440]	; (8000e78 <Menu_Init+0x260>)
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	items[3].name = "NRF24L01 RX";
 8000cc4:	4b6c      	ldr	r3, [pc, #432]	; (8000e78 <Menu_Init+0x260>)
 8000cc6:	4a72      	ldr	r2, [pc, #456]	; (8000e90 <Menu_Init+0x278>)
 8000cc8:	661a      	str	r2, [r3, #96]	; 0x60
	items[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8000cca:	4a6b      	ldr	r2, [pc, #428]	; (8000e78 <Menu_Init+0x260>)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6653      	str	r3, [r2, #100]	; 0x64
	items[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8000cd0:	4a69      	ldr	r2, [pc, #420]	; (8000e78 <Menu_Init+0x260>)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	6693      	str	r3, [r2, #104]	; 0x68
	items[3].makeAction = p_action;
 8000cd6:	4a68      	ldr	r2, [pc, #416]	; (8000e78 <Menu_Init+0x260>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	66d3      	str	r3, [r2, #108]	; 0x6c

	items[4].up = &items[3];
 8000cdc:	4b66      	ldr	r3, [pc, #408]	; (8000e78 <Menu_Init+0x260>)
 8000cde:	4a6b      	ldr	r2, [pc, #428]	; (8000e8c <Menu_Init+0x274>)
 8000ce0:	671a      	str	r2, [r3, #112]	; 0x70
	items[4].down = &items[5];
 8000ce2:	4b65      	ldr	r3, [pc, #404]	; (8000e78 <Menu_Init+0x260>)
 8000ce4:	4a6c      	ldr	r2, [pc, #432]	; (8000e98 <Menu_Init+0x280>)
 8000ce6:	675a      	str	r2, [r3, #116]	; 0x74
	items[4].id = 5;
 8000ce8:	4b63      	ldr	r3, [pc, #396]	; (8000e78 <Menu_Init+0x260>)
 8000cea:	2205      	movs	r2, #5
 8000cec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	items[4].name = "Item_5________";
 8000cf0:	4b61      	ldr	r3, [pc, #388]	; (8000e78 <Menu_Init+0x260>)
 8000cf2:	4a6a      	ldr	r2, [pc, #424]	; (8000e9c <Menu_Init+0x284>)
 8000cf4:	67da      	str	r2, [r3, #124]	; 0x7c
	items[4].updateScreen_up = p_print_rows_on_oled_if_up;
 8000cf6:	4a60      	ldr	r2, [pc, #384]	; (8000e78 <Menu_Init+0x260>)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	items[4].updateScreen_down = p_print_rows_on_oled_if_down;
 8000cfe:	4a5e      	ldr	r2, [pc, #376]	; (8000e78 <Menu_Init+0x260>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items[4].makeAction = p_action;
 8000d06:	4a5c      	ldr	r2, [pc, #368]	; (8000e78 <Menu_Init+0x260>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	items[5].up = &items[4];
 8000d0e:	4b5a      	ldr	r3, [pc, #360]	; (8000e78 <Menu_Init+0x260>)
 8000d10:	4a60      	ldr	r2, [pc, #384]	; (8000e94 <Menu_Init+0x27c>)
 8000d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	items[5].down = &items[6];
 8000d16:	4b58      	ldr	r3, [pc, #352]	; (8000e78 <Menu_Init+0x260>)
 8000d18:	4a61      	ldr	r2, [pc, #388]	; (8000ea0 <Menu_Init+0x288>)
 8000d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	items[5].id = 6;
 8000d1e:	4b56      	ldr	r3, [pc, #344]	; (8000e78 <Menu_Init+0x260>)
 8000d20:	2206      	movs	r2, #6
 8000d22:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	items[5].name = "Item_6________";
 8000d26:	4b54      	ldr	r3, [pc, #336]	; (8000e78 <Menu_Init+0x260>)
 8000d28:	4a5e      	ldr	r2, [pc, #376]	; (8000ea4 <Menu_Init+0x28c>)
 8000d2a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	items[5].updateScreen_up = p_print_rows_on_oled_if_up;
 8000d2e:	4a52      	ldr	r2, [pc, #328]	; (8000e78 <Menu_Init+0x260>)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	items[5].updateScreen_down = p_print_rows_on_oled_if_down;
 8000d36:	4a50      	ldr	r2, [pc, #320]	; (8000e78 <Menu_Init+0x260>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	items[5].makeAction  = p_action;
 8000d3e:	4a4e      	ldr	r2, [pc, #312]	; (8000e78 <Menu_Init+0x260>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

	items[6].up = &items[5];
 8000d46:	4b4c      	ldr	r3, [pc, #304]	; (8000e78 <Menu_Init+0x260>)
 8000d48:	4a53      	ldr	r2, [pc, #332]	; (8000e98 <Menu_Init+0x280>)
 8000d4a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	items[6].down = 0;
 8000d4e:	4b4a      	ldr	r3, [pc, #296]	; (8000e78 <Menu_Init+0x260>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	items[6].id = 7;
 8000d56:	4b48      	ldr	r3, [pc, #288]	; (8000e78 <Menu_Init+0x260>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	items[6].name = "Item_7________";
 8000d5e:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <Menu_Init+0x260>)
 8000d60:	4a51      	ldr	r2, [pc, #324]	; (8000ea8 <Menu_Init+0x290>)
 8000d62:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	items[6].updateScreen_up = p_print_rows_on_oled_if_up;
 8000d66:	4a44      	ldr	r2, [pc, #272]	; (8000e78 <Menu_Init+0x260>)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	items[6].updateScreen_down = p_print_rows_on_oled_if_down;
 8000d6e:	4a42      	ldr	r2, [pc, #264]	; (8000e78 <Menu_Init+0x260>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	items[6].makeAction  = p_action;
 8000d76:	4a40      	ldr	r2, [pc, #256]	; (8000e78 <Menu_Init+0x260>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

	///////////////////////////////////////////////////////////////////
	// Creating second menu
	items_menu_1[0].up = 0;
 8000d7e:	4b4b      	ldr	r3, [pc, #300]	; (8000eac <Menu_Init+0x294>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
	items_menu_1[0].down = &items_menu_1[1];
 8000d84:	4b49      	ldr	r3, [pc, #292]	; (8000eac <Menu_Init+0x294>)
 8000d86:	4a4a      	ldr	r2, [pc, #296]	; (8000eb0 <Menu_Init+0x298>)
 8000d88:	605a      	str	r2, [r3, #4]
	items_menu_1[0].id = 1;
 8000d8a:	4b48      	ldr	r3, [pc, #288]	; (8000eac <Menu_Init+0x294>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	721a      	strb	r2, [r3, #8]
	items_menu_1[0].name = "menu_1_1";						// Name of item
 8000d90:	4b46      	ldr	r3, [pc, #280]	; (8000eac <Menu_Init+0x294>)
 8000d92:	4a48      	ldr	r2, [pc, #288]	; (8000eb4 <Menu_Init+0x29c>)
 8000d94:	60da      	str	r2, [r3, #12]
	items_menu_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8000d96:	4a45      	ldr	r2, [pc, #276]	; (8000eac <Menu_Init+0x294>)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6113      	str	r3, [r2, #16]
	items_menu_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8000d9c:	4a43      	ldr	r2, [pc, #268]	; (8000eac <Menu_Init+0x294>)
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	6153      	str	r3, [r2, #20]
	items_menu_1[0].makeAction = p_action;
 8000da2:	4a42      	ldr	r2, [pc, #264]	; (8000eac <Menu_Init+0x294>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6193      	str	r3, [r2, #24]

	items_menu_1[1].up = &items_menu_1[0];
 8000da8:	4b40      	ldr	r3, [pc, #256]	; (8000eac <Menu_Init+0x294>)
 8000daa:	4a40      	ldr	r2, [pc, #256]	; (8000eac <Menu_Init+0x294>)
 8000dac:	61da      	str	r2, [r3, #28]
	items_menu_1[1].down = &items_menu_1[2];
 8000dae:	4b3f      	ldr	r3, [pc, #252]	; (8000eac <Menu_Init+0x294>)
 8000db0:	4a41      	ldr	r2, [pc, #260]	; (8000eb8 <Menu_Init+0x2a0>)
 8000db2:	621a      	str	r2, [r3, #32]
	items_menu_1[1].id = 2;
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <Menu_Init+0x294>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	items_menu_1[1].name = "menu_1_2";						// Name of item
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <Menu_Init+0x294>)
 8000dbe:	4a3f      	ldr	r2, [pc, #252]	; (8000ebc <Menu_Init+0x2a4>)
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8000dc2:	4a3a      	ldr	r2, [pc, #232]	; (8000eac <Menu_Init+0x294>)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
	items_menu_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8000dc8:	4a38      	ldr	r2, [pc, #224]	; (8000eac <Menu_Init+0x294>)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
	items_menu_1[1].makeAction = p_action;
 8000dce:	4a37      	ldr	r2, [pc, #220]	; (8000eac <Menu_Init+0x294>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6353      	str	r3, [r2, #52]	; 0x34

	items_menu_1[2].up = &items_menu_1[1];
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <Menu_Init+0x294>)
 8000dd6:	4a36      	ldr	r2, [pc, #216]	; (8000eb0 <Menu_Init+0x298>)
 8000dd8:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1[2].down = &items_menu_1[3];
 8000dda:	4b34      	ldr	r3, [pc, #208]	; (8000eac <Menu_Init+0x294>)
 8000ddc:	4a38      	ldr	r2, [pc, #224]	; (8000ec0 <Menu_Init+0x2a8>)
 8000dde:	63da      	str	r2, [r3, #60]	; 0x3c
	items_menu_1[2].id = 3;
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <Menu_Init+0x294>)
 8000de2:	2203      	movs	r2, #3
 8000de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	items_menu_1[2].name = "menu_1_3";						// Name of item
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <Menu_Init+0x294>)
 8000dea:	4a36      	ldr	r2, [pc, #216]	; (8000ec4 <Menu_Init+0x2ac>)
 8000dec:	645a      	str	r2, [r3, #68]	; 0x44
	items_menu_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8000dee:	4a2f      	ldr	r2, [pc, #188]	; (8000eac <Menu_Init+0x294>)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6493      	str	r3, [r2, #72]	; 0x48
	items_menu_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8000df4:	4a2d      	ldr	r2, [pc, #180]	; (8000eac <Menu_Init+0x294>)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
	items_menu_1[2].makeAction = p_action;
 8000dfa:	4a2c      	ldr	r2, [pc, #176]	; (8000eac <Menu_Init+0x294>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6513      	str	r3, [r2, #80]	; 0x50

	items_menu_1[3].up = &items_menu_1[2];
 8000e00:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <Menu_Init+0x294>)
 8000e02:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <Menu_Init+0x2a0>)
 8000e04:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1[3].down = &items_menu_1[4];
 8000e06:	4b29      	ldr	r3, [pc, #164]	; (8000eac <Menu_Init+0x294>)
 8000e08:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <Menu_Init+0x2b0>)
 8000e0a:	659a      	str	r2, [r3, #88]	; 0x58
	items_menu_1[3].id = 4;
 8000e0c:	4b27      	ldr	r3, [pc, #156]	; (8000eac <Menu_Init+0x294>)
 8000e0e:	2204      	movs	r2, #4
 8000e10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	items_menu_1[3].name = "menu_1_4";						// Name of item
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <Menu_Init+0x294>)
 8000e16:	4a2d      	ldr	r2, [pc, #180]	; (8000ecc <Menu_Init+0x2b4>)
 8000e18:	661a      	str	r2, [r3, #96]	; 0x60
	items_menu_1[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8000e1a:	4a24      	ldr	r2, [pc, #144]	; (8000eac <Menu_Init+0x294>)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8000e20:	4a22      	ldr	r2, [pc, #136]	; (8000eac <Menu_Init+0x294>)
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	6693      	str	r3, [r2, #104]	; 0x68
	items_menu_1[3].makeAction = p_action;
 8000e26:	4a21      	ldr	r2, [pc, #132]	; (8000eac <Menu_Init+0x294>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	66d3      	str	r3, [r2, #108]	; 0x6c

	items_menu_1[4].up = &items_menu_1[3];
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <Menu_Init+0x294>)
 8000e2e:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <Menu_Init+0x2a8>)
 8000e30:	671a      	str	r2, [r3, #112]	; 0x70
	items_menu_1[4].down = 0;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <Menu_Init+0x294>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	675a      	str	r2, [r3, #116]	; 0x74
	items_menu_1[4].id = 5;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <Menu_Init+0x294>)
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	items_menu_1[4].name = "EXIT";						// Name of item
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <Menu_Init+0x294>)
 8000e42:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <Menu_Init+0x2b8>)
 8000e44:	67da      	str	r2, [r3, #124]	; 0x7c
	items_menu_1[4].updateScreen_up = p_print_rows_on_oled_if_up;
 8000e46:	4a19      	ldr	r2, [pc, #100]	; (8000eac <Menu_Init+0x294>)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	items_menu_1[4].updateScreen_down = p_print_rows_on_oled_if_down;
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <Menu_Init+0x294>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items_menu_1[4].makeAction = p_return_from_menu;
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <Menu_Init+0x294>)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	///////////////////////////////////////////////////////////////////
	// Creating second menu
	items_menu_2[0].up = 0;
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <Menu_Init+0x2bc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	e038      	b.n	8000ed8 <Menu_Init+0x2c0>
 8000e66:	bf00      	nop
 8000e68:	080007dd 	.word	0x080007dd
 8000e6c:	080008b1 	.word	0x080008b1
 8000e70:	08000a95 	.word	0x08000a95
 8000e74:	08000bb1 	.word	0x08000bb1
 8000e78:	20000570 	.word	0x20000570
 8000e7c:	2000058c 	.word	0x2000058c
 8000e80:	080051b4 	.word	0x080051b4
 8000e84:	200005a8 	.word	0x200005a8
 8000e88:	080051c4 	.word	0x080051c4
 8000e8c:	200005c4 	.word	0x200005c4
 8000e90:	080051d4 	.word	0x080051d4
 8000e94:	200005e0 	.word	0x200005e0
 8000e98:	200005fc 	.word	0x200005fc
 8000e9c:	080051e0 	.word	0x080051e0
 8000ea0:	20000618 	.word	0x20000618
 8000ea4:	080051f0 	.word	0x080051f0
 8000ea8:	08005200 	.word	0x08005200
 8000eac:	200004e4 	.word	0x200004e4
 8000eb0:	20000500 	.word	0x20000500
 8000eb4:	08005210 	.word	0x08005210
 8000eb8:	2000051c 	.word	0x2000051c
 8000ebc:	0800521c 	.word	0x0800521c
 8000ec0:	20000538 	.word	0x20000538
 8000ec4:	08005228 	.word	0x08005228
 8000ec8:	20000554 	.word	0x20000554
 8000ecc:	08005234 	.word	0x08005234
 8000ed0:	08005240 	.word	0x08005240
 8000ed4:	20000490 	.word	0x20000490
	items_menu_2[0].down = &items_menu_2[1];
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <Menu_Init+0x348>)
 8000eda:	4a22      	ldr	r2, [pc, #136]	; (8000f64 <Menu_Init+0x34c>)
 8000edc:	605a      	str	r2, [r3, #4]
	items_menu_2[0].id = 1;
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <Menu_Init+0x348>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	721a      	strb	r2, [r3, #8]
	items_menu_2[0].name = "menu_2_1";						// Name of item
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <Menu_Init+0x348>)
 8000ee6:	4a20      	ldr	r2, [pc, #128]	; (8000f68 <Menu_Init+0x350>)
 8000ee8:	60da      	str	r2, [r3, #12]
	items_menu_2[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8000eea:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <Menu_Init+0x348>)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6113      	str	r3, [r2, #16]
	items_menu_2[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <Menu_Init+0x348>)
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	6153      	str	r3, [r2, #20]
	items_menu_2[0].makeAction = p_action;
 8000ef6:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <Menu_Init+0x348>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6193      	str	r3, [r2, #24]

	items_menu_2[1].up = &items_menu_2[0];
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <Menu_Init+0x348>)
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <Menu_Init+0x348>)
 8000f00:	61da      	str	r2, [r3, #28]
	items_menu_2[1].down = &items_menu_2[2];
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <Menu_Init+0x348>)
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <Menu_Init+0x354>)
 8000f06:	621a      	str	r2, [r3, #32]
	items_menu_2[1].id = 2;
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <Menu_Init+0x348>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	items_menu_2[1].name = "menu_2_2";						// Name of item
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <Menu_Init+0x348>)
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <Menu_Init+0x358>)
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <Menu_Init+0x348>)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	62d3      	str	r3, [r2, #44]	; 0x2c
	items_menu_2[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <Menu_Init+0x348>)
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
	items_menu_2[1].makeAction = p_action;
 8000f22:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <Menu_Init+0x348>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6353      	str	r3, [r2, #52]	; 0x34

	items_menu_2[2].up = &items_menu_2[1];
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <Menu_Init+0x348>)
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <Menu_Init+0x34c>)
 8000f2c:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2[2].down = 0;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <Menu_Init+0x348>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	63da      	str	r2, [r3, #60]	; 0x3c
	items_menu_2[2].id = 3;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <Menu_Init+0x348>)
 8000f36:	2203      	movs	r2, #3
 8000f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	items_menu_2[2].name = "menu_2_3";						// Name of item
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <Menu_Init+0x348>)
 8000f3e:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <Menu_Init+0x35c>)
 8000f40:	645a      	str	r2, [r3, #68]	; 0x44
	items_menu_2[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8000f42:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <Menu_Init+0x348>)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6493      	str	r3, [r2, #72]	; 0x48
	items_menu_2[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8000f48:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <Menu_Init+0x348>)
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
	items_menu_2[2].makeAction = p_action;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <Menu_Init+0x348>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6513      	str	r3, [r2, #80]	; 0x50


}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000490 	.word	0x20000490
 8000f64:	200004ac 	.word	0x200004ac
 8000f68:	08005248 	.word	0x08005248
 8000f6c:	200004c8 	.word	0x200004c8
 8000f70:	08005254 	.word	0x08005254
 8000f74:	08005260 	.word	0x08005260

08000f78 <up>:
// ----------------------------------------------------------------------------------------
void up(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	if (currentItem->up)
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <up+0x30>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00d      	beq.n	8000fa2 <up+0x2a>
	{
	    currentItem = currentItem->up;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <up+0x30>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <up+0x30>)
 8000f8e:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_up )
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <up+0x30>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <up+0x2a>
	    {
	        currentItem->updateScreen_up();
 8000f9a:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <up+0x30>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	4798      	blx	r3
	    }
	}
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008

08000fac <down>:
// ----------------------------------------------------------------------------------------
void down(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	if (currentItem->down)
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <down+0x30>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00d      	beq.n	8000fd6 <down+0x2a>
	{
	    currentItem = currentItem->down;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <down+0x30>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <down+0x30>)
 8000fc2:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_down )
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <down+0x30>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <down+0x2a>
	    {
	        currentItem->updateScreen_down();
 8000fce:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <down+0x30>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	4798      	blx	r3
	    }
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <enter>:
// ----------------------------------------------------------------------------------------
void enter(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	if (currentItem->makeAction)
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <enter+0x1c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <enter+0x16>
	{
		//currentItem = currentItem->makeAction();
		currentItem->makeAction();
 8000fee:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <enter+0x1c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4798      	blx	r3
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008

08001000 <simulation_navigation_on_menu>:
// ----------------------------------------------------------------------------------------
void simulation_navigation_on_menu(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	Menu_Init();
 8001004:	f7ff fe08 	bl	8000c18 <Menu_Init>

	print_menu_init();
 8001008:	f7ff fcc2 	bl	8000990 <print_menu_init>
	HAL_Delay(10);
 800100c:	200a      	movs	r0, #10
 800100e:	f000 fdd5 	bl	8001bbc <HAL_Delay>

	while(1)
	{
		if(button_processed_status == 1)	// If buttons was pressed
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <simulation_navigation_on_menu+0x50>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d1fb      	bne.n	8001012 <simulation_navigation_on_menu+0x12>
		{

			button_processed_status = 1;
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <simulation_navigation_on_menu+0x50>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
			switch (button)
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <simulation_navigation_on_menu+0x54>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b03      	cmp	r3, #3
 8001026:	d00c      	beq.n	8001042 <simulation_navigation_on_menu+0x42>
 8001028:	2b03      	cmp	r3, #3
 800102a:	dc0d      	bgt.n	8001048 <simulation_navigation_on_menu+0x48>
 800102c:	2b01      	cmp	r3, #1
 800102e:	d002      	beq.n	8001036 <simulation_navigation_on_menu+0x36>
 8001030:	2b02      	cmp	r3, #2
 8001032:	d003      	beq.n	800103c <simulation_navigation_on_menu+0x3c>
 8001034:	e008      	b.n	8001048 <simulation_navigation_on_menu+0x48>
			{
				case BOTTON_UP:
					up();
 8001036:	f7ff ff9f 	bl	8000f78 <up>
					break;
 800103a:	e005      	b.n	8001048 <simulation_navigation_on_menu+0x48>
				case BUTTON_ENTER:
					enter();
 800103c:	f7ff ffd0 	bl	8000fe0 <enter>
					break;
 8001040:	e002      	b.n	8001048 <simulation_navigation_on_menu+0x48>
				case BUTTON_DOWN:
					down();
 8001042:	f7ff ffb3 	bl	8000fac <down>
					break;
 8001046:	bf00      	nop
			}
			button = 0;
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <simulation_navigation_on_menu+0x54>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
		if(button_processed_status == 1)	// If buttons was pressed
 800104e:	e7e0      	b.n	8001012 <simulation_navigation_on_menu+0x12>
 8001050:	20000014 	.word	0x20000014
 8001054:	20000452 	.word	0x20000452

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 fd4c 	bl	8001af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f826 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 f972 	bl	800134c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001068:	f000 f868 	bl	800113c <MX_I2C1_Init>
  MX_SPI1_Init();
 800106c:	f000 f894 	bl	8001198 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001070:	f000 f918 	bl	80012a4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001074:	f000 f8c6 	bl	8001204 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001078:	f000 f93e 	bl	80012f8 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <main+0x54>)
 8001084:	f001 f917 	bl	80022b6 <HAL_GPIO_WritePin>

  // Init interrupp
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2025      	movs	r0, #37	; 0x25
 800108e:	f000 fe90 	bl	8001db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001092:	2025      	movs	r0, #37	; 0x25
 8001094:	f000 fea9 	bl	8001dea <HAL_NVIC_EnableIRQ>


  // OLED init
  ssd1306_Init();
 8001098:	f7ff f962 	bl	8000360 <ssd1306_Init>
  ssd1306_Fill(Black);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff f9cb 	bl	8000438 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80010a2:	f7ff f9eb 	bl	800047c <ssd1306_UpdateScreen>
//		state_machine();
//	}
    //////////////////////////////////////////////

	  //lists();
	  simulation_navigation_on_menu();
 80010a6:	f7ff ffab 	bl	8001000 <simulation_navigation_on_menu>
 80010aa:	e7fc      	b.n	80010a6 <main+0x4e>
 80010ac:	40011000 	.word	0x40011000

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b090      	sub	sp, #64	; 0x40
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	2228      	movs	r2, #40	; 0x28
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 ffee 	bl	80050a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e4:	2302      	movs	r3, #2
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80010ee:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fd7f 	bl	8002bfc <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001104:	f000 fa40 	bl	8001588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110c:	2302      	movs	r3, #2
 800110e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001118:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2102      	movs	r1, #2
 8001122:	4618      	mov	r0, r3
 8001124:	f001 ffea 	bl	80030fc <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800112e:	f000 fa2b 	bl	8001588 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3740      	adds	r7, #64	; 0x40
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_I2C1_Init+0x50>)
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <MX_I2C1_Init+0x54>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_I2C1_Init+0x50>)
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_I2C1_Init+0x58>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_I2C1_Init+0x50>)
 800115a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_I2C1_Init+0x50>)
 800117a:	f001 f8e5 	bl	8002348 <HAL_I2C_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001184:	f000 fa00 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000678 	.word	0x20000678
 8001190:	40005400 	.word	0x40005400
 8001194:	00061a80 	.word	0x00061a80

08001198 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_SPI1_Init+0x64>)
 800119e:	4a18      	ldr	r2, [pc, #96]	; (8001200 <MX_SPI1_Init+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_SPI1_Init+0x64>)
 80011a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_SPI1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_SPI1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_SPI1_Init+0x64>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_SPI1_Init+0x64>)
 80011cc:	2220      	movs	r2, #32
 80011ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_SPI1_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_SPI1_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_SPI1_Init+0x64>)
 80011e4:	220a      	movs	r2, #10
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_SPI1_Init+0x64>)
 80011ea:	f002 f921 	bl	8003430 <HAL_SPI_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f4:	f000 f9c8 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000758 	.word	0x20000758
 8001200:	40013000 	.word	0x40013000

08001204 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <MX_TIM1_Init+0x98>)
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <MX_TIM1_Init+0x9c>)
 8001224:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_TIM1_Init+0x98>)
 8001228:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800122c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_TIM1_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_TIM1_Init+0x98>)
 8001236:	2264      	movs	r2, #100	; 0x64
 8001238:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_TIM1_Init+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_TIM1_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_TIM1_Init+0x98>)
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <MX_TIM1_Init+0x98>)
 800124e:	f002 fe5b 	bl	8003f08 <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001258:	f000 f996 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <MX_TIM1_Init+0x98>)
 800126a:	f003 f825 	bl	80042b8 <HAL_TIM_ConfigClockSource>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001274:	f000 f988 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001278:	2310      	movs	r3, #16
 800127a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_TIM1_Init+0x98>)
 8001286:	f003 fa01 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001290:	f000 f97a 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000710 	.word	0x20000710
 80012a0:	40012c00 	.word	0x40012c00

080012a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_USART1_UART_Init+0x50>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012dc:	f003 fa46 	bl	800476c <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012e6:	f000 f94f 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200006cc 	.word	0x200006cc
 80012f4:	40013800 	.word	0x40013800

080012f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <MX_USART3_UART_Init+0x50>)
 8001300:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 8001304:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001308:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_USART3_UART_Init+0x4c>)
 8001330:	f003 fa1c 	bl	800476c <HAL_UART_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800133a:	f000 f925 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000634 	.word	0x20000634
 8001348:	40004800 	.word	0x40004800

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001360:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <MX_GPIO_Init+0x194>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a5e      	ldr	r2, [pc, #376]	; (80014e0 <MX_GPIO_Init+0x194>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <MX_GPIO_Init+0x194>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001378:	4b59      	ldr	r3, [pc, #356]	; (80014e0 <MX_GPIO_Init+0x194>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a58      	ldr	r2, [pc, #352]	; (80014e0 <MX_GPIO_Init+0x194>)
 800137e:	f043 0320 	orr.w	r3, r3, #32
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b56      	ldr	r3, [pc, #344]	; (80014e0 <MX_GPIO_Init+0x194>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <MX_GPIO_Init+0x194>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a52      	ldr	r2, [pc, #328]	; (80014e0 <MX_GPIO_Init+0x194>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <MX_GPIO_Init+0x194>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <MX_GPIO_Init+0x194>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a4c      	ldr	r2, [pc, #304]	; (80014e0 <MX_GPIO_Init+0x194>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <MX_GPIO_Init+0x194>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	4847      	ldr	r0, [pc, #284]	; (80014e4 <MX_GPIO_Init+0x198>)
 80013c8:	f000 ff75 	bl	80022b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2108      	movs	r1, #8
 80013d0:	4845      	ldr	r0, [pc, #276]	; (80014e8 <MX_GPIO_Init+0x19c>)
 80013d2:	f000 ff70 	bl	80022b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2110      	movs	r1, #16
 80013da:	4843      	ldr	r0, [pc, #268]	; (80014e8 <MX_GPIO_Init+0x19c>)
 80013dc:	f000 ff6b 	bl	80022b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f242 0101 	movw	r1, #8193	; 0x2001
 80013e6:	4841      	ldr	r0, [pc, #260]	; (80014ec <MX_GPIO_Init+0x1a0>)
 80013e8:	f000 ff65 	bl	80022b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	4837      	ldr	r0, [pc, #220]	; (80014e4 <MX_GPIO_Init+0x198>)
 8001406:	f000 fdbb 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800140a:	2304      	movs	r3, #4
 800140c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800140e:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <MX_GPIO_Init+0x1a4>)
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4619      	mov	r1, r3
 800141c:	4832      	ldr	r0, [pc, #200]	; (80014e8 <MX_GPIO_Init+0x19c>)
 800141e:	f000 fdaf 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001422:	2318      	movs	r3, #24
 8001424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4619      	mov	r1, r3
 8001438:	482b      	ldr	r0, [pc, #172]	; (80014e8 <MX_GPIO_Init+0x19c>)
 800143a:	f000 fda1 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 800143e:	f242 0301 	movw	r3, #8193	; 0x2001
 8001442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2302      	movs	r3, #2
 800144e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4619      	mov	r1, r3
 8001456:	4825      	ldr	r0, [pc, #148]	; (80014ec <MX_GPIO_Init+0x1a0>)
 8001458:	f000 fd92 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 800145c:	2302      	movs	r3, #2
 800145e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4619      	mov	r1, r3
 800146e:	481f      	ldr	r0, [pc, #124]	; (80014ec <MX_GPIO_Init+0x1a0>)
 8001470:	f000 fd86 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001474:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MX_GPIO_Init+0x1a4>)
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	4818      	ldr	r0, [pc, #96]	; (80014ec <MX_GPIO_Init+0x1a0>)
 800148a:	f000 fd79 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800148e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <MX_GPIO_Init+0x1a4>)
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	4619      	mov	r1, r3
 80014a2:	4811      	ldr	r0, [pc, #68]	; (80014e8 <MX_GPIO_Init+0x19c>)
 80014a4:	f000 fd6c 	bl	8001f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2008      	movs	r0, #8
 80014ae:	f000 fc80 	bl	8001db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80014b2:	2008      	movs	r0, #8
 80014b4:	f000 fc99 	bl	8001dea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2017      	movs	r0, #23
 80014be:	f000 fc78 	bl	8001db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014c2:	2017      	movs	r0, #23
 80014c4:	f000 fc91 	bl	8001dea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	2028      	movs	r0, #40	; 0x28
 80014ce:	f000 fc70 	bl	8001db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d2:	2028      	movs	r0, #40	; 0x28
 80014d4:	f000 fc89 	bl	8001dea <HAL_NVIC_EnableIRQ>

}
 80014d8:	bf00      	nop
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40011000 	.word	0x40011000
 80014e8:	40010800 	.word	0x40010800
 80014ec:	40010c00 	.word	0x40010c00
 80014f0:	10210000 	.word	0x10210000

080014f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d102      	bne.n	800150a <HAL_GPIO_EXTI_Callback+0x16>
  {
    IRQ_Callback();					// Call Callback
 8001504:	f7fe fed0 	bl	80002a8 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8001508:	e000      	b.n	800150c <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 800150a:	bf00      	nop
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_UART_RxCpltCallback>:

//----------------------------------------------------------------------------------------
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <HAL_UART_RxCpltCallback+0x60>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d123      	bne.n	800156c <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_UART_RxCpltCallback+0x64>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_UART_RxCpltCallback+0x20>
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_UART_RxCpltCallback+0x68>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b31      	cmp	r3, #49	; 0x31
 8001532:	d906      	bls.n	8001542 <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_UART_RxCpltCallback+0x6c>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_UART_RxCpltCallback+0x68>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8001540:	e014      	b.n	800156c <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_UART_RxCpltCallback+0x6c>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_UART_RxCpltCallback+0x68>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_UART_RxCpltCallback+0x64>)
 8001550:	7819      	ldrb	r1, [r3, #0]
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_UART_RxCpltCallback+0x70>)
 8001554:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8001556:	2201      	movs	r2, #1
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <HAL_UART_RxCpltCallback+0x64>)
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <HAL_UART_RxCpltCallback+0x60>)
 800155c:	f003 f953 	bl	8004806 <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_UART_RxCpltCallback+0x68>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_UART_RxCpltCallback+0x68>)
 800156a:	701a      	strb	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200006cc 	.word	0x200006cc
 8001578:	20000488 	.word	0x20000488
 800157c:	2000048a 	.word	0x2000048a
 8001580:	20000489 	.word	0x20000489
 8001584:	20000454 	.word	0x20000454

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
	...

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_MspInit+0x5c>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <HAL_MspInit+0x5c>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6193      	str	r3, [r2, #24]
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_MspInit+0x5c>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_MspInit+0x5c>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_MspInit+0x5c>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_MspInit+0x5c>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_MspInit+0x60>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <HAL_MspInit+0x60>)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010000 	.word	0x40010000

080015f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <HAL_I2C_MspInit+0x70>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d123      	bne.n	8001660 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_I2C_MspInit+0x74>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a13      	ldr	r2, [pc, #76]	; (800166c <HAL_I2C_MspInit+0x74>)
 800161e:	f043 0308 	orr.w	r3, r3, #8
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_I2C_MspInit+0x74>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001630:	23c0      	movs	r3, #192	; 0xc0
 8001632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001634:	2312      	movs	r3, #18
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4619      	mov	r1, r3
 8001642:	480b      	ldr	r0, [pc, #44]	; (8001670 <HAL_I2C_MspInit+0x78>)
 8001644:	f000 fc9c 	bl	8001f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_I2C_MspInit+0x74>)
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_I2C_MspInit+0x74>)
 800164e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001652:	61d3      	str	r3, [r2, #28]
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_I2C_MspInit+0x74>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40005400 	.word	0x40005400
 800166c:	40021000 	.word	0x40021000
 8001670:	40010c00 	.word	0x40010c00

08001674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <HAL_SPI_MspInit+0x88>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d12f      	bne.n	80016f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_SPI_MspInit+0x8c>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_SPI_MspInit+0x8c>)
 800169a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_SPI_MspInit+0x8c>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_SPI_MspInit+0x8c>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a13      	ldr	r2, [pc, #76]	; (8001700 <HAL_SPI_MspInit+0x8c>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_SPI_MspInit+0x8c>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016c4:	23a0      	movs	r3, #160	; 0xa0
 80016c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4619      	mov	r1, r3
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <HAL_SPI_MspInit+0x90>)
 80016d8:	f000 fc52 	bl	8001f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016dc:	2340      	movs	r3, #64	; 0x40
 80016de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <HAL_SPI_MspInit+0x90>)
 80016f0:	f000 fc46 	bl	8001f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40013000 	.word	0x40013000
 8001700:	40021000 	.word	0x40021000
 8001704:	40010800 	.word	0x40010800

08001708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_TIM_Base_MspInit+0x44>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d113      	bne.n	8001742 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_TIM_Base_MspInit+0x48>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <HAL_TIM_Base_MspInit+0x48>)
 8001720:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001724:	6193      	str	r3, [r2, #24]
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_TIM_Base_MspInit+0x48>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2019      	movs	r0, #25
 8001738:	f000 fb3b 	bl	8001db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800173c:	2019      	movs	r0, #25
 800173e:	f000 fb54 	bl	8001dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40012c00 	.word	0x40012c00
 8001750:	40021000 	.word	0x40021000

08001754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a3c      	ldr	r2, [pc, #240]	; (8001860 <HAL_UART_MspInit+0x10c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d13a      	bne.n	80017ea <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001774:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <HAL_UART_MspInit+0x110>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <HAL_UART_MspInit+0x110>)
 800177a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_UART_MspInit+0x110>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b35      	ldr	r3, [pc, #212]	; (8001864 <HAL_UART_MspInit+0x110>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a34      	ldr	r2, [pc, #208]	; (8001864 <HAL_UART_MspInit+0x110>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b32      	ldr	r3, [pc, #200]	; (8001864 <HAL_UART_MspInit+0x110>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0318 	add.w	r3, r7, #24
 80017b6:	4619      	mov	r1, r3
 80017b8:	482b      	ldr	r0, [pc, #172]	; (8001868 <HAL_UART_MspInit+0x114>)
 80017ba:	f000 fbe1 	bl	8001f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 0318 	add.w	r3, r7, #24
 80017d0:	4619      	mov	r1, r3
 80017d2:	4825      	ldr	r0, [pc, #148]	; (8001868 <HAL_UART_MspInit+0x114>)
 80017d4:	f000 fbd4 	bl	8001f80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2101      	movs	r1, #1
 80017dc:	2025      	movs	r0, #37	; 0x25
 80017de:	f000 fae8 	bl	8001db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017e2:	2025      	movs	r0, #37	; 0x25
 80017e4:	f000 fb01 	bl	8001dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017e8:	e036      	b.n	8001858 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1f      	ldr	r2, [pc, #124]	; (800186c <HAL_UART_MspInit+0x118>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d131      	bne.n	8001858 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_UART_MspInit+0x110>)
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	4a1a      	ldr	r2, [pc, #104]	; (8001864 <HAL_UART_MspInit+0x110>)
 80017fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017fe:	61d3      	str	r3, [r2, #28]
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_UART_MspInit+0x110>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_UART_MspInit+0x110>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <HAL_UART_MspInit+0x110>)
 8001812:	f043 0308 	orr.w	r3, r3, #8
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_UART_MspInit+0x110>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0318 	add.w	r3, r7, #24
 8001836:	4619      	mov	r1, r3
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <HAL_UART_MspInit+0x11c>)
 800183a:	f000 fba1 	bl	8001f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800183e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0318 	add.w	r3, r7, #24
 8001850:	4619      	mov	r1, r3
 8001852:	4807      	ldr	r0, [pc, #28]	; (8001870 <HAL_UART_MspInit+0x11c>)
 8001854:	f000 fb94 	bl	8001f80 <HAL_GPIO_Init>
}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40013800 	.word	0x40013800
 8001864:	40021000 	.word	0x40021000
 8001868:	40010800 	.word	0x40010800
 800186c:	40004800 	.word	0x40004800
 8001870:	40010c00 	.word	0x40010c00

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ba:	f000 f963 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80018c6:	2004      	movs	r0, #4
 80018c8:	f000 fd26 	bl	8002318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <EXTI9_5_IRQHandler+0x38>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00c      	beq.n	80018fa <EXTI9_5_IRQHandler+0x2a>
	{
		if(button_processed_status == doesent_detected)
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <EXTI9_5_IRQHandler+0x3c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <EXTI9_5_IRQHandler+0x40>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d105      	bne.n	80018fa <EXTI9_5_IRQHandler+0x2a>
		{
			HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 80018ee:	4809      	ldr	r0, [pc, #36]	; (8001914 <EXTI9_5_IRQHandler+0x44>)
 80018f0:	f002 fb5a 	bl	8003fa8 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <EXTI9_5_IRQHandler+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80018fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018fe:	f000 fd0b 	bl	8002318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40010400 	.word	0x40010400
 800190c:	20000010 	.word	0x20000010
 8001910:	20000014 	.word	0x20000014
 8001914:	20000710 	.word	0x20000710

08001918 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <TIM1_UP_IRQHandler+0xe4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d165      	bne.n	80019f0 <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 8001924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001928:	4835      	ldr	r0, [pc, #212]	; (8001a00 <TIM1_UP_IRQHandler+0xe8>)
 800192a:	f000 fcad 	bl	8002288 <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d118      	bne.n	8001966 <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 8001934:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 800193c:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 800193e:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <TIM1_UP_IRQHandler+0xf0>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	dc51      	bgt.n	80019f0 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <TIM1_UP_IRQHandler+0xe4>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8001952:	482e      	ldr	r0, [pc, #184]	; (8001a0c <TIM1_UP_IRQHandler+0xf4>)
 8001954:	f002 fb7a 	bl	800404c <HAL_TIM_Base_Stop_IT>

				button = BOTTON_UP;
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <TIM1_UP_IRQHandler+0xf8>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e044      	b.n	80019f0 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 8001966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196a:	482a      	ldr	r0, [pc, #168]	; (8001a14 <TIM1_UP_IRQHandler+0xfc>)
 800196c:	f000 fc8c 	bl	8002288 <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d118      	bne.n	80019a8 <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 8001976:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 800197e:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <TIM1_UP_IRQHandler+0xf0>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	dc30      	bgt.n	80019f0 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <TIM1_UP_IRQHandler+0xe4>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8001994:	481d      	ldr	r0, [pc, #116]	; (8001a0c <TIM1_UP_IRQHandler+0xf4>)
 8001996:	f002 fb59 	bl	800404c <HAL_TIM_Base_Stop_IT>

				button = BUTTON_DOWN;
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <TIM1_UP_IRQHandler+0xf8>)
 800199c:	2203      	movs	r2, #3
 800199e:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e023      	b.n	80019f0 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 80019a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ac:	4814      	ldr	r0, [pc, #80]	; (8001a00 <TIM1_UP_IRQHandler+0xe8>)
 80019ae:	f000 fc6b 	bl	8002288 <HAL_GPIO_ReadPin>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d118      	bne.n	80019ea <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 80019c0:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <TIM1_UP_IRQHandler+0xf0>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dc0f      	bgt.n	80019f0 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <TIM1_UP_IRQHandler+0xe4>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
				button = BUTTON_ENTER;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <TIM1_UP_IRQHandler+0xf8>)
 80019d8:	2202      	movs	r2, #2
 80019da:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80019e2:	480a      	ldr	r0, [pc, #40]	; (8001a0c <TIM1_UP_IRQHandler+0xf4>)
 80019e4:	f002 fb32 	bl	800404c <HAL_TIM_Base_Stop_IT>
 80019e8:	e002      	b.n	80019f0 <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <TIM1_UP_IRQHandler+0xec>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f0:	4806      	ldr	r0, [pc, #24]	; (8001a0c <TIM1_UP_IRQHandler+0xf4>)
 80019f2:	f002 fb59 	bl	80040a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000014 	.word	0x20000014
 8001a00:	40010c00 	.word	0x40010c00
 8001a04:	2000048c 	.word	0x2000048c
 8001a08:	20000011 	.word	0x20000011
 8001a0c:	20000710 	.word	0x20000710
 8001a10:	20000452 	.word	0x20000452
 8001a14:	40010800 	.word	0x40010800

08001a18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <USART1_IRQHandler+0x10>)
 8001a1e:	f002 ff23 	bl	8004868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200006cc 	.word	0x200006cc

08001a2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	// Detect "UP" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <EXTI15_10_IRQHandler+0x64>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00c      	beq.n	8001a56 <EXTI15_10_IRQHandler+0x2a>
	{
		if(button_processed_status == doesent_detected)
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <EXTI15_10_IRQHandler+0x68>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <EXTI15_10_IRQHandler+0x6c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d105      	bne.n	8001a56 <EXTI15_10_IRQHandler+0x2a>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001a4a:	4814      	ldr	r0, [pc, #80]	; (8001a9c <EXTI15_10_IRQHandler+0x70>)
 8001a4c:	f002 faac 	bl	8003fa8 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <EXTI15_10_IRQHandler+0x6c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <EXTI15_10_IRQHandler+0x64>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00c      	beq.n	8001a7c <EXTI15_10_IRQHandler+0x50>
	{
		if(button_processed_status == doesent_detected)
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <EXTI15_10_IRQHandler+0x68>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <EXTI15_10_IRQHandler+0x6c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d105      	bne.n	8001a7c <EXTI15_10_IRQHandler+0x50>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001a70:	480a      	ldr	r0, [pc, #40]	; (8001a9c <EXTI15_10_IRQHandler+0x70>)
 8001a72:	f002 fa99 	bl	8003fa8 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <EXTI15_10_IRQHandler+0x6c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
		}
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001a7c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a80:	f000 fc4a 	bl	8002318 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a88:	f000 fc46 	bl	8002318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40010400 	.word	0x40010400
 8001a94:	20000010 	.word	0x20000010
 8001a98:	20000014 	.word	0x20000014
 8001a9c:	20000710 	.word	0x20000710

08001aa0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	; (8001ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	; (8001af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ad2:	f7ff ffe5 	bl	8001aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f003 faa5 	bl	8005024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ada:	f7ff fabd 	bl	8001058 <main>
  bx lr
 8001ade:	4770      	bx	lr
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001ae8:	08005a30 	.word	0x08005a30
  ldr r2, =_sbss
 8001aec:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001af0:	200007b4 	.word	0x200007b4

08001af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC1_2_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_Init+0x28>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_Init+0x28>)
 8001b02:	f043 0310 	orr.w	r3, r3, #16
 8001b06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 f947 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f000 f808 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff fd3e 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f95f 	bl	8001e06 <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b60:	f000 f927 	bl	8001db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000018 	.word	0x20000018
 8001b7c:	20000020 	.word	0x20000020
 8001b80:	2000001c 	.word	0x2000001c

08001b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_IncTick+0x1c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a03      	ldr	r2, [pc, #12]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	20000020 	.word	0x20000020
 8001ba4:	200007b0 	.word	0x200007b0

08001ba8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <HAL_GetTick+0x10>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	200007b0 	.word	0x200007b0

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff fff0 	bl	8001ba8 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffe0 	bl	8001ba8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000020 	.word	0x20000020

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4906      	ldr	r1, [pc, #24]	; (8001c9c <__NVIC_EnableIRQ+0x34>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100

08001ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db0a      	blt.n	8001cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	490c      	ldr	r1, [pc, #48]	; (8001cec <__NVIC_SetPriority+0x4c>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc8:	e00a      	b.n	8001ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4908      	ldr	r1, [pc, #32]	; (8001cf0 <__NVIC_SetPriority+0x50>)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	440b      	add	r3, r1
 8001cde:	761a      	strb	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f1c3 0307 	rsb	r3, r3, #7
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	bf28      	it	cs
 8001d12:	2304      	movcs	r3, #4
 8001d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d902      	bls.n	8001d24 <NVIC_EncodePriority+0x30>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3b03      	subs	r3, #3
 8001d22:	e000      	b.n	8001d26 <NVIC_EncodePriority+0x32>
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	4313      	orrs	r3, r2
         );
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d68:	d301      	bcc.n	8001d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00f      	b.n	8001d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <SysTick_Config+0x40>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d76:	210f      	movs	r1, #15
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d7c:	f7ff ff90 	bl	8001ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <SysTick_Config+0x40>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <SysTick_Config+0x40>)
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff2d 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc4:	f7ff ff42 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff ff90 	bl	8001cf4 <NVIC_EncodePriority>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff5f 	bl	8001ca0 <__NVIC_SetPriority>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff35 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffa2 	bl	8001d58 <SysTick_Config>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d008      	beq.n	8001e46 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2204      	movs	r2, #4
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e020      	b.n	8001e88 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 020e 	bic.w	r2, r2, #14
 8001e54:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	2101      	movs	r1, #1
 8001e70:	fa01 f202 	lsl.w	r2, r1, r2
 8001e74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d005      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2204      	movs	r2, #4
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	e051      	b.n	8001f5a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 020e 	bic.w	r2, r2, #14
 8001ec4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <HAL_DMA_Abort_IT+0xd0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d029      	beq.n	8001f34 <HAL_DMA_Abort_IT+0xa0>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <HAL_DMA_Abort_IT+0xd4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d022      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x9c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1f      	ldr	r2, [pc, #124]	; (8001f6c <HAL_DMA_Abort_IT+0xd8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d01a      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x96>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_DMA_Abort_IT+0xdc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d012      	beq.n	8001f24 <HAL_DMA_Abort_IT+0x90>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <HAL_DMA_Abort_IT+0xe0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00a      	beq.n	8001f1e <HAL_DMA_Abort_IT+0x8a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1a      	ldr	r2, [pc, #104]	; (8001f78 <HAL_DMA_Abort_IT+0xe4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d102      	bne.n	8001f18 <HAL_DMA_Abort_IT+0x84>
 8001f12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f16:	e00e      	b.n	8001f36 <HAL_DMA_Abort_IT+0xa2>
 8001f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f1c:	e00b      	b.n	8001f36 <HAL_DMA_Abort_IT+0xa2>
 8001f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f22:	e008      	b.n	8001f36 <HAL_DMA_Abort_IT+0xa2>
 8001f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f28:	e005      	b.n	8001f36 <HAL_DMA_Abort_IT+0xa2>
 8001f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f2e:	e002      	b.n	8001f36 <HAL_DMA_Abort_IT+0xa2>
 8001f30:	2310      	movs	r3, #16
 8001f32:	e000      	b.n	8001f36 <HAL_DMA_Abort_IT+0xa2>
 8001f34:	2301      	movs	r3, #1
 8001f36:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_DMA_Abort_IT+0xe8>)
 8001f38:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4798      	blx	r3
    } 
  }
  return status;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40020008 	.word	0x40020008
 8001f68:	4002001c 	.word	0x4002001c
 8001f6c:	40020030 	.word	0x40020030
 8001f70:	40020044 	.word	0x40020044
 8001f74:	40020058 	.word	0x40020058
 8001f78:	4002006c 	.word	0x4002006c
 8001f7c:	40020000 	.word	0x40020000

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b08b      	sub	sp, #44	; 0x2c
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f92:	e169      	b.n	8002268 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f94:	2201      	movs	r2, #1
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	f040 8158 	bne.w	8002262 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4a9a      	ldr	r2, [pc, #616]	; (8002220 <HAL_GPIO_Init+0x2a0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d05e      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fbc:	4a98      	ldr	r2, [pc, #608]	; (8002220 <HAL_GPIO_Init+0x2a0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d875      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fc2:	4a98      	ldr	r2, [pc, #608]	; (8002224 <HAL_GPIO_Init+0x2a4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d058      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fc8:	4a96      	ldr	r2, [pc, #600]	; (8002224 <HAL_GPIO_Init+0x2a4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d86f      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fce:	4a96      	ldr	r2, [pc, #600]	; (8002228 <HAL_GPIO_Init+0x2a8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d052      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fd4:	4a94      	ldr	r2, [pc, #592]	; (8002228 <HAL_GPIO_Init+0x2a8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d869      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fda:	4a94      	ldr	r2, [pc, #592]	; (800222c <HAL_GPIO_Init+0x2ac>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d04c      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fe0:	4a92      	ldr	r2, [pc, #584]	; (800222c <HAL_GPIO_Init+0x2ac>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d863      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fe6:	4a92      	ldr	r2, [pc, #584]	; (8002230 <HAL_GPIO_Init+0x2b0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d046      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fec:	4a90      	ldr	r2, [pc, #576]	; (8002230 <HAL_GPIO_Init+0x2b0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d85d      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001ff2:	2b12      	cmp	r3, #18
 8001ff4:	d82a      	bhi.n	800204c <HAL_GPIO_Init+0xcc>
 8001ff6:	2b12      	cmp	r3, #18
 8001ff8:	d859      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001ffa:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <HAL_GPIO_Init+0x80>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	0800207b 	.word	0x0800207b
 8002004:	08002055 	.word	0x08002055
 8002008:	08002067 	.word	0x08002067
 800200c:	080020a9 	.word	0x080020a9
 8002010:	080020af 	.word	0x080020af
 8002014:	080020af 	.word	0x080020af
 8002018:	080020af 	.word	0x080020af
 800201c:	080020af 	.word	0x080020af
 8002020:	080020af 	.word	0x080020af
 8002024:	080020af 	.word	0x080020af
 8002028:	080020af 	.word	0x080020af
 800202c:	080020af 	.word	0x080020af
 8002030:	080020af 	.word	0x080020af
 8002034:	080020af 	.word	0x080020af
 8002038:	080020af 	.word	0x080020af
 800203c:	080020af 	.word	0x080020af
 8002040:	080020af 	.word	0x080020af
 8002044:	0800205d 	.word	0x0800205d
 8002048:	08002071 	.word	0x08002071
 800204c:	4a79      	ldr	r2, [pc, #484]	; (8002234 <HAL_GPIO_Init+0x2b4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002052:	e02c      	b.n	80020ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e029      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	3304      	adds	r3, #4
 8002062:	623b      	str	r3, [r7, #32]
          break;
 8002064:	e024      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	3308      	adds	r3, #8
 800206c:	623b      	str	r3, [r7, #32]
          break;
 800206e:	e01f      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	330c      	adds	r3, #12
 8002076:	623b      	str	r3, [r7, #32]
          break;
 8002078:	e01a      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002082:	2304      	movs	r3, #4
 8002084:	623b      	str	r3, [r7, #32]
          break;
 8002086:	e013      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002090:	2308      	movs	r3, #8
 8002092:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	611a      	str	r2, [r3, #16]
          break;
 800209a:	e009      	b.n	80020b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800209c:	2308      	movs	r3, #8
 800209e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	615a      	str	r2, [r3, #20]
          break;
 80020a6:	e003      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
          break;
 80020ac:	e000      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          break;
 80020ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2bff      	cmp	r3, #255	; 0xff
 80020b4:	d801      	bhi.n	80020ba <HAL_GPIO_Init+0x13a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	e001      	b.n	80020be <HAL_GPIO_Init+0x13e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2bff      	cmp	r3, #255	; 0xff
 80020c4:	d802      	bhi.n	80020cc <HAL_GPIO_Init+0x14c>
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	e002      	b.n	80020d2 <HAL_GPIO_Init+0x152>
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	3b08      	subs	r3, #8
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	210f      	movs	r1, #15
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	401a      	ands	r2, r3
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	431a      	orrs	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80b1 	beq.w	8002262 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002100:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <HAL_GPIO_Init+0x2b8>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a4c      	ldr	r2, [pc, #304]	; (8002238 <HAL_GPIO_Init+0x2b8>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <HAL_GPIO_Init+0x2b8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002118:	4a48      	ldr	r2, [pc, #288]	; (800223c <HAL_GPIO_Init+0x2bc>)
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a40      	ldr	r2, [pc, #256]	; (8002240 <HAL_GPIO_Init+0x2c0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <HAL_GPIO_Init+0x1ec>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3f      	ldr	r2, [pc, #252]	; (8002244 <HAL_GPIO_Init+0x2c4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d00d      	beq.n	8002168 <HAL_GPIO_Init+0x1e8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3e      	ldr	r2, [pc, #248]	; (8002248 <HAL_GPIO_Init+0x2c8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d007      	beq.n	8002164 <HAL_GPIO_Init+0x1e4>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3d      	ldr	r2, [pc, #244]	; (800224c <HAL_GPIO_Init+0x2cc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d101      	bne.n	8002160 <HAL_GPIO_Init+0x1e0>
 800215c:	2303      	movs	r3, #3
 800215e:	e006      	b.n	800216e <HAL_GPIO_Init+0x1ee>
 8002160:	2304      	movs	r3, #4
 8002162:	e004      	b.n	800216e <HAL_GPIO_Init+0x1ee>
 8002164:	2302      	movs	r3, #2
 8002166:	e002      	b.n	800216e <HAL_GPIO_Init+0x1ee>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_GPIO_Init+0x1ee>
 800216c:	2300      	movs	r3, #0
 800216e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002170:	f002 0203 	and.w	r2, r2, #3
 8002174:	0092      	lsls	r2, r2, #2
 8002176:	4093      	lsls	r3, r2
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800217e:	492f      	ldr	r1, [pc, #188]	; (800223c <HAL_GPIO_Init+0x2bc>)
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3302      	adds	r3, #2
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	492c      	ldr	r1, [pc, #176]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021a6:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	4928      	ldr	r1, [pc, #160]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021c0:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4922      	ldr	r1, [pc, #136]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
 80021cc:	e006      	b.n	80021dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	491e      	ldr	r1, [pc, #120]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 80021d8:	4013      	ands	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d006      	beq.n	80021f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	4918      	ldr	r1, [pc, #96]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]
 80021f4:	e006      	b.n	8002204 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	4914      	ldr	r1, [pc, #80]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 8002200:	4013      	ands	r3, r2
 8002202:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d021      	beq.n	8002254 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	490e      	ldr	r1, [pc, #56]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	60cb      	str	r3, [r1, #12]
 800221c:	e021      	b.n	8002262 <HAL_GPIO_Init+0x2e2>
 800221e:	bf00      	nop
 8002220:	10320000 	.word	0x10320000
 8002224:	10310000 	.word	0x10310000
 8002228:	10220000 	.word	0x10220000
 800222c:	10210000 	.word	0x10210000
 8002230:	10120000 	.word	0x10120000
 8002234:	10110000 	.word	0x10110000
 8002238:	40021000 	.word	0x40021000
 800223c:	40010000 	.word	0x40010000
 8002240:	40010800 	.word	0x40010800
 8002244:	40010c00 	.word	0x40010c00
 8002248:	40011000 	.word	0x40011000
 800224c:	40011400 	.word	0x40011400
 8002250:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_GPIO_Init+0x304>)
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	43db      	mvns	r3, r3
 800225c:	4909      	ldr	r1, [pc, #36]	; (8002284 <HAL_GPIO_Init+0x304>)
 800225e:	4013      	ands	r3, r2
 8002260:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	3301      	adds	r3, #1
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	fa22 f303 	lsr.w	r3, r2, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	f47f ae8e 	bne.w	8001f94 <HAL_GPIO_Init+0x14>
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	372c      	adds	r7, #44	; 0x2c
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	40010400 	.word	0x40010400

08002288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	887b      	ldrh	r3, [r7, #2]
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e001      	b.n	80022aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	807b      	strh	r3, [r7, #2]
 80022c2:	4613      	mov	r3, r2
 80022c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022c6:	787b      	ldrb	r3, [r7, #1]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022cc:	887a      	ldrh	r2, [r7, #2]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022d2:	e003      	b.n	80022dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	041a      	lsls	r2, r3, #16
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	611a      	str	r2, [r3, #16]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022f8:	887a      	ldrh	r2, [r7, #2]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4013      	ands	r3, r2
 80022fe:	041a      	lsls	r2, r3, #16
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43d9      	mvns	r1, r3
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	400b      	ands	r3, r1
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	611a      	str	r2, [r3, #16]
}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f8dc 	bl	80014f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40010400 	.word	0x40010400

08002348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e12b      	b.n	80025b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff f942 	bl	80015f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	; 0x24
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800239a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023ac:	f000 fffa 	bl	80033a4 <HAL_RCC_GetPCLK1Freq>
 80023b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a81      	ldr	r2, [pc, #516]	; (80025bc <HAL_I2C_Init+0x274>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d807      	bhi.n	80023cc <HAL_I2C_Init+0x84>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a80      	ldr	r2, [pc, #512]	; (80025c0 <HAL_I2C_Init+0x278>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bf94      	ite	ls
 80023c4:	2301      	movls	r3, #1
 80023c6:	2300      	movhi	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e006      	b.n	80023da <HAL_I2C_Init+0x92>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4a7d      	ldr	r2, [pc, #500]	; (80025c4 <HAL_I2C_Init+0x27c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	bf94      	ite	ls
 80023d4:	2301      	movls	r3, #1
 80023d6:	2300      	movhi	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0e7      	b.n	80025b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a78      	ldr	r2, [pc, #480]	; (80025c8 <HAL_I2C_Init+0x280>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0c9b      	lsrs	r3, r3, #18
 80023ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a6a      	ldr	r2, [pc, #424]	; (80025bc <HAL_I2C_Init+0x274>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d802      	bhi.n	800241c <HAL_I2C_Init+0xd4>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	3301      	adds	r3, #1
 800241a:	e009      	b.n	8002430 <HAL_I2C_Init+0xe8>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	4a69      	ldr	r2, [pc, #420]	; (80025cc <HAL_I2C_Init+0x284>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	099b      	lsrs	r3, r3, #6
 800242e:	3301      	adds	r3, #1
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	430b      	orrs	r3, r1
 8002436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	495c      	ldr	r1, [pc, #368]	; (80025bc <HAL_I2C_Init+0x274>)
 800244c:	428b      	cmp	r3, r1
 800244e:	d819      	bhi.n	8002484 <HAL_I2C_Init+0x13c>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1e59      	subs	r1, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fbb1 f3f3 	udiv	r3, r1, r3
 800245e:	1c59      	adds	r1, r3, #1
 8002460:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002464:	400b      	ands	r3, r1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_I2C_Init+0x138>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1e59      	subs	r1, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fbb1 f3f3 	udiv	r3, r1, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247e:	e051      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002480:	2304      	movs	r3, #4
 8002482:	e04f      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d111      	bne.n	80024b0 <HAL_I2C_Init+0x168>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e58      	subs	r0, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	440b      	add	r3, r1
 800249a:	fbb0 f3f3 	udiv	r3, r0, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e012      	b.n	80024d6 <HAL_I2C_Init+0x18e>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1e58      	subs	r0, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	0099      	lsls	r1, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Init+0x196>
 80024da:	2301      	movs	r3, #1
 80024dc:	e022      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10e      	bne.n	8002504 <HAL_I2C_Init+0x1bc>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e58      	subs	r0, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	440b      	add	r3, r1
 80024f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002502:	e00f      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e58      	subs	r0, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	0099      	lsls	r1, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	6809      	ldr	r1, [r1, #0]
 8002528:	4313      	orrs	r3, r2
 800252a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6911      	ldr	r1, [r2, #16]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68d2      	ldr	r2, [r2, #12]
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	430b      	orrs	r3, r1
 8002566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	000186a0 	.word	0x000186a0
 80025c0:	001e847f 	.word	0x001e847f
 80025c4:	003d08ff 	.word	0x003d08ff
 80025c8:	431bde83 	.word	0x431bde83
 80025cc:	10624dd3 	.word	0x10624dd3

080025d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	817b      	strh	r3, [r7, #10]
 80025e2:	460b      	mov	r3, r1
 80025e4:	813b      	strh	r3, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ea:	f7ff fadd 	bl	8001ba8 <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	f040 80d9 	bne.w	80027b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2319      	movs	r3, #25
 8002604:	2201      	movs	r2, #1
 8002606:	496d      	ldr	r1, [pc, #436]	; (80027bc <HAL_I2C_Mem_Write+0x1ec>)
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f971 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
 8002616:	e0cc      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_I2C_Mem_Write+0x56>
 8002622:	2302      	movs	r3, #2
 8002624:	e0c5      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d007      	beq.n	800264c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2221      	movs	r2, #33	; 0x21
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a3a      	ldr	r2, [r7, #32]
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800267c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a4d      	ldr	r2, [pc, #308]	; (80027c0 <HAL_I2C_Mem_Write+0x1f0>)
 800268c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800268e:	88f8      	ldrh	r0, [r7, #6]
 8002690:	893a      	ldrh	r2, [r7, #8]
 8002692:	8979      	ldrh	r1, [r7, #10]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4603      	mov	r3, r0
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f890 	bl	80027c4 <I2C_RequestMemoryWrite>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d052      	beq.n	8002750 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e081      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f9f2 	bl	8002a9c <I2C_WaitOnTXEFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00d      	beq.n	80026da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d107      	bne.n	80026d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06b      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b04      	cmp	r3, #4
 8002716:	d11b      	bne.n	8002750 <HAL_I2C_Mem_Write+0x180>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d017      	beq.n	8002750 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1aa      	bne.n	80026ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f9de 	bl	8002b1e <I2C_WaitOnBTFFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	2b04      	cmp	r3, #4
 800276e:	d107      	bne.n	8002780 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e016      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	00100002 	.word	0x00100002
 80027c0:	ffff0000 	.word	0xffff0000

080027c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	460b      	mov	r3, r1
 80027d8:	813b      	strh	r3, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f878 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00d      	beq.n	8002822 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002814:	d103      	bne.n	800281e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e05f      	b.n	80028e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002822:	897b      	ldrh	r3, [r7, #10]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	6a3a      	ldr	r2, [r7, #32]
 8002836:	492d      	ldr	r1, [pc, #180]	; (80028ec <I2C_RequestMemoryWrite+0x128>)
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f8b0 	bl	800299e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e04c      	b.n	80028e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	6a39      	ldr	r1, [r7, #32]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f91a 	bl	8002a9c <I2C_WaitOnTXEFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00d      	beq.n	800288a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	2b04      	cmp	r3, #4
 8002874:	d107      	bne.n	8002886 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e02b      	b.n	80028e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002890:	893b      	ldrh	r3, [r7, #8]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	611a      	str	r2, [r3, #16]
 800289a:	e021      	b.n	80028e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800289c:	893b      	ldrh	r3, [r7, #8]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	6a39      	ldr	r1, [r7, #32]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f8f4 	bl	8002a9c <I2C_WaitOnTXEFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00d      	beq.n	80028d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d107      	bne.n	80028d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e005      	b.n	80028e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028d6:	893b      	ldrh	r3, [r7, #8]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	00010002 	.word	0x00010002

080028f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002900:	e025      	b.n	800294e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002908:	d021      	beq.n	800294e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290a:	f7ff f94d 	bl	8001ba8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x30>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d116      	bne.n	800294e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e023      	b.n	8002996 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10d      	bne.n	8002974 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4013      	ands	r3, r2
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf0c      	ite	eq
 800296a:	2301      	moveq	r3, #1
 800296c:	2300      	movne	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	e00c      	b.n	800298e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	429a      	cmp	r2, r3
 8002992:	d0b6      	beq.n	8002902 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029ac:	e051      	b.n	8002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029bc:	d123      	bne.n	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e046      	b.n	8002a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a0c:	d021      	beq.n	8002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0e:	f7ff f8cb 	bl	8001ba8 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d302      	bcc.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d116      	bne.n	8002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f043 0220 	orr.w	r2, r3, #32
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e020      	b.n	8002a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d10c      	bne.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	43da      	mvns	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4013      	ands	r3, r2
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	e00b      	b.n	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d18d      	bne.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aa8:	e02d      	b.n	8002b06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f878 	bl	8002ba0 <I2C_IsAcknowledgeFailed>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e02d      	b.n	8002b16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ac0:	d021      	beq.n	8002b06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac2:	f7ff f871 	bl	8001ba8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d302      	bcc.n	8002ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d116      	bne.n	8002b06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f043 0220 	orr.w	r2, r3, #32
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e007      	b.n	8002b16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b10:	2b80      	cmp	r3, #128	; 0x80
 8002b12:	d1ca      	bne.n	8002aaa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b2a:	e02d      	b.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f837 	bl	8002ba0 <I2C_IsAcknowledgeFailed>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e02d      	b.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b42:	d021      	beq.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b44:	f7ff f830 	bl	8001ba8 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d302      	bcc.n	8002b5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d116      	bne.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f043 0220 	orr.w	r2, r3, #32
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e007      	b.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d1ca      	bne.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb6:	d11b      	bne.n	8002bf0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f043 0204 	orr.w	r2, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e26c      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8087 	beq.w	8002d2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c1c:	4b92      	ldr	r3, [pc, #584]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d00c      	beq.n	8002c42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c28:	4b8f      	ldr	r3, [pc, #572]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d112      	bne.n	8002c5a <HAL_RCC_OscConfig+0x5e>
 8002c34:	4b8c      	ldr	r3, [pc, #560]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c40:	d10b      	bne.n	8002c5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c42:	4b89      	ldr	r3, [pc, #548]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d06c      	beq.n	8002d28 <HAL_RCC_OscConfig+0x12c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d168      	bne.n	8002d28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e246      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x76>
 8002c64:	4b80      	ldr	r3, [pc, #512]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a7f      	ldr	r2, [pc, #508]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	e02e      	b.n	8002cd0 <HAL_RCC_OscConfig+0xd4>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x98>
 8002c7a:	4b7b      	ldr	r3, [pc, #492]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a7a      	ldr	r2, [pc, #488]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b78      	ldr	r3, [pc, #480]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a77      	ldr	r2, [pc, #476]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e01d      	b.n	8002cd0 <HAL_RCC_OscConfig+0xd4>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xbc>
 8002c9e:	4b72      	ldr	r3, [pc, #456]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a71      	ldr	r2, [pc, #452]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b6f      	ldr	r3, [pc, #444]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6e      	ldr	r2, [pc, #440]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCC_OscConfig+0xd4>
 8002cb8:	4b6b      	ldr	r3, [pc, #428]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a6a      	ldr	r2, [pc, #424]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	4b68      	ldr	r3, [pc, #416]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a67      	ldr	r2, [pc, #412]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d013      	beq.n	8002d00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7fe ff66 	bl	8001ba8 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fe ff62 	bl	8001ba8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1fa      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b5d      	ldr	r3, [pc, #372]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0xe4>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fe ff52 	bl	8001ba8 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe ff4e 	bl	8001ba8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e1e6      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1a:	4b53      	ldr	r3, [pc, #332]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x10c>
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d063      	beq.n	8002dfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d36:	4b4c      	ldr	r3, [pc, #304]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d42:	4b49      	ldr	r3, [pc, #292]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d11c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x18c>
 8002d4e:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d116      	bne.n	8002d88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	4b43      	ldr	r3, [pc, #268]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_RCC_OscConfig+0x176>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e1ba      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4939      	ldr	r1, [pc, #228]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d86:	e03a      	b.n	8002dfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d90:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <HAL_RCC_OscConfig+0x270>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fe ff07 	bl	8001ba8 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7fe ff03 	bl	8001ba8 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e19b      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4927      	ldr	r1, [pc, #156]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
 8002dd0:	e015      	b.n	8002dfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd2:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <HAL_RCC_OscConfig+0x270>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fee6 	bl	8001ba8 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de0:	f7fe fee2 	bl	8001ba8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e17a      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d03a      	beq.n	8002e80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d019      	beq.n	8002e46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e18:	f7fe fec6 	bl	8001ba8 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e20:	f7fe fec2 	bl	8001ba8 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e15a      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e32:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f000 fad8 	bl	80033f4 <RCC_Delay>
 8002e44:	e01c      	b.n	8002e80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4c:	f7fe feac 	bl	8001ba8 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e52:	e00f      	b.n	8002e74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e54:	f7fe fea8 	bl	8001ba8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d908      	bls.n	8002e74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e140      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	42420000 	.word	0x42420000
 8002e70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e74:	4b9e      	ldr	r3, [pc, #632]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e9      	bne.n	8002e54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80a6 	beq.w	8002fda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e92:	4b97      	ldr	r3, [pc, #604]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10d      	bne.n	8002eba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9e:	4b94      	ldr	r3, [pc, #592]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4a93      	ldr	r2, [pc, #588]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	61d3      	str	r3, [r2, #28]
 8002eaa:	4b91      	ldr	r3, [pc, #580]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b8e      	ldr	r3, [pc, #568]	; (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d118      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec6:	4b8b      	ldr	r3, [pc, #556]	; (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a8a      	ldr	r2, [pc, #552]	; (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fe69 	bl	8001ba8 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eda:	f7fe fe65 	bl	8001ba8 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b64      	cmp	r3, #100	; 0x64
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e0fd      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	4b81      	ldr	r3, [pc, #516]	; (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_OscConfig+0x312>
 8002f00:	4b7b      	ldr	r3, [pc, #492]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a7a      	ldr	r2, [pc, #488]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	e02d      	b.n	8002f6a <HAL_RCC_OscConfig+0x36e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x334>
 8002f16:	4b76      	ldr	r3, [pc, #472]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a75      	ldr	r2, [pc, #468]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	6213      	str	r3, [r2, #32]
 8002f22:	4b73      	ldr	r3, [pc, #460]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4a72      	ldr	r2, [pc, #456]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	f023 0304 	bic.w	r3, r3, #4
 8002f2c:	6213      	str	r3, [r2, #32]
 8002f2e:	e01c      	b.n	8002f6a <HAL_RCC_OscConfig+0x36e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d10c      	bne.n	8002f52 <HAL_RCC_OscConfig+0x356>
 8002f38:	4b6d      	ldr	r3, [pc, #436]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4a6c      	ldr	r2, [pc, #432]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	6213      	str	r3, [r2, #32]
 8002f44:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4a69      	ldr	r2, [pc, #420]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6213      	str	r3, [r2, #32]
 8002f50:	e00b      	b.n	8002f6a <HAL_RCC_OscConfig+0x36e>
 8002f52:	4b67      	ldr	r3, [pc, #412]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	4a66      	ldr	r2, [pc, #408]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	6213      	str	r3, [r2, #32]
 8002f5e:	4b64      	ldr	r3, [pc, #400]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4a63      	ldr	r2, [pc, #396]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d015      	beq.n	8002f9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f72:	f7fe fe19 	bl	8001ba8 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fe fe15 	bl	8001ba8 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e0ab      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f90:	4b57      	ldr	r3, [pc, #348]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ee      	beq.n	8002f7a <HAL_RCC_OscConfig+0x37e>
 8002f9c:	e014      	b.n	8002fc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe fe03 	bl	8001ba8 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa6:	f7fe fdff 	bl	8001ba8 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e095      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbc:	4b4c      	ldr	r3, [pc, #304]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ee      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d105      	bne.n	8002fda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4b48      	ldr	r3, [pc, #288]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4a47      	ldr	r2, [pc, #284]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8081 	beq.w	80030e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe4:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d061      	beq.n	80030b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d146      	bne.n	8003086 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff8:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <HAL_RCC_OscConfig+0x4fc>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fdd3 	bl	8001ba8 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003006:	f7fe fdcf 	bl	8001ba8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e067      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003018:	4b35      	ldr	r3, [pc, #212]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f0      	bne.n	8003006 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302c:	d108      	bne.n	8003040 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	492d      	ldr	r1, [pc, #180]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003040:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a19      	ldr	r1, [r3, #32]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	430b      	orrs	r3, r1
 8003052:	4927      	ldr	r1, [pc, #156]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003058:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <HAL_RCC_OscConfig+0x4fc>)
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305e:	f7fe fda3 	bl	8001ba8 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003066:	f7fe fd9f 	bl	8001ba8 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e037      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x46a>
 8003084:	e02f      	b.n	80030e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <HAL_RCC_OscConfig+0x4fc>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fe fd8c 	bl	8001ba8 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003094:	f7fe fd88 	bl	8001ba8 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e020      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x498>
 80030b2:	e018      	b.n	80030e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e013      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_OscConfig+0x4f4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d001      	beq.n	80030e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40007000 	.word	0x40007000
 80030f8:	42420060 	.word	0x42420060

080030fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0d0      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003110:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d910      	bls.n	8003140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b67      	ldr	r3, [pc, #412]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 0207 	bic.w	r2, r3, #7
 8003126:	4965      	ldr	r1, [pc, #404]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003162:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800317a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d040      	beq.n	800321c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d115      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ba:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e073      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ca:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e06b      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4936      	ldr	r1, [pc, #216]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ec:	f7fe fcdc 	bl	8001ba8 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	e00a      	b.n	800320a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7fe fcd8 	bl	8001ba8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e053      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 020c 	and.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	429a      	cmp	r2, r3
 800321a:	d1eb      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800321c:	4b27      	ldr	r3, [pc, #156]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d210      	bcs.n	800324c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b24      	ldr	r3, [pc, #144]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 0207 	bic.w	r2, r3, #7
 8003232:	4922      	ldr	r1, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800328a:	f000 f821 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490a      	ldr	r1, [pc, #40]	; (80032c4 <HAL_RCC_ClockConfig+0x1c8>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1cc>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1d0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fc3a 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40021000 	.word	0x40021000
 80032c4:	080059e8 	.word	0x080059e8
 80032c8:	20000018 	.word	0x20000018
 80032cc:	2000001c 	.word	0x2000001c

080032d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	b490      	push	{r4, r7}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032d6:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032d8:	1d3c      	adds	r4, r7, #4
 80032da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032e0:	f240 2301 	movw	r3, #513	; 0x201
 80032e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	2300      	movs	r3, #0
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b04      	cmp	r3, #4
 8003308:	d002      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x40>
 800330a:	2b08      	cmp	r3, #8
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x46>
 800330e:	e02d      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003312:	623b      	str	r3, [r7, #32]
      break;
 8003314:	e02d      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	0c9b      	lsrs	r3, r3, #18
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003322:	4413      	add	r3, r2
 8003324:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003328:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d013      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0c5b      	lsrs	r3, r3, #17
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003342:	4413      	add	r3, r2
 8003344:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003348:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	4a0e      	ldr	r2, [pc, #56]	; (8003388 <HAL_RCC_GetSysClockFreq+0xb8>)
 800334e:	fb02 f203 	mul.w	r2, r2, r3
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
 800335a:	e004      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	4a0b      	ldr	r2, [pc, #44]	; (800338c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003360:	fb02 f303 	mul.w	r3, r2, r3
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	623b      	str	r3, [r7, #32]
      break;
 800336a:	e002      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_RCC_GetSysClockFreq+0xb8>)
 800336e:	623b      	str	r3, [r7, #32]
      break;
 8003370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003372:	6a3b      	ldr	r3, [r7, #32]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3728      	adds	r7, #40	; 0x28
 8003378:	46bd      	mov	sp, r7
 800337a:	bc90      	pop	{r4, r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	0800526c 	.word	0x0800526c
 8003384:	40021000 	.word	0x40021000
 8003388:	007a1200 	.word	0x007a1200
 800338c:	003d0900 	.word	0x003d0900

08003390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003394:	4b02      	ldr	r3, [pc, #8]	; (80033a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	20000018 	.word	0x20000018

080033a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033a8:	f7ff fff2 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	4903      	ldr	r1, [pc, #12]	; (80033c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000
 80033c8:	080059f8 	.word	0x080059f8

080033cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033d0:	f7ff ffde 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033d4:	4602      	mov	r2, r0
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	0adb      	lsrs	r3, r3, #11
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	4903      	ldr	r1, [pc, #12]	; (80033f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000
 80033f0:	080059f8 	.word	0x080059f8

080033f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <RCC_Delay+0x34>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0a      	ldr	r2, [pc, #40]	; (800342c <RCC_Delay+0x38>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0a5b      	lsrs	r3, r3, #9
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003410:	bf00      	nop
  }
  while (Delay --);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1e5a      	subs	r2, r3, #1
 8003416:	60fa      	str	r2, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f9      	bne.n	8003410 <RCC_Delay+0x1c>
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	20000018 	.word	0x20000018
 800342c:	10624dd3 	.word	0x10624dd3

08003430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e076      	b.n	8003530 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d108      	bne.n	800345c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003452:	d009      	beq.n	8003468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
 800345a:	e005      	b.n	8003468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fe f8f6 	bl	8001674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	ea42 0103 	orr.w	r1, r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	0c1a      	lsrs	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f002 0204 	and.w	r2, r2, #4
 800350e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800351e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_SPI_Transmit+0x22>
 8003556:	2302      	movs	r3, #2
 8003558:	e126      	b.n	80037a8 <HAL_SPI_Transmit+0x270>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003562:	f7fe fb21 	bl	8001ba8 <HAL_GetTick>
 8003566:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d002      	beq.n	800357e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003578:	2302      	movs	r3, #2
 800357a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800357c:	e10b      	b.n	8003796 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_SPI_Transmit+0x52>
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800358e:	e102      	b.n	8003796 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2203      	movs	r2, #3
 8003594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d6:	d10f      	bne.n	80035f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d007      	beq.n	8003616 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003614:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800361e:	d14b      	bne.n	80036b8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <HAL_SPI_Transmit+0xf6>
 8003628:	8afb      	ldrh	r3, [r7, #22]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d13e      	bne.n	80036ac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	881a      	ldrh	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	1c9a      	adds	r2, r3, #2
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003652:	e02b      	b.n	80036ac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d112      	bne.n	8003688 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	881a      	ldrh	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	1c9a      	adds	r2, r3, #2
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	86da      	strh	r2, [r3, #54]	; 0x36
 8003686:	e011      	b.n	80036ac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003688:	f7fe fa8e 	bl	8001ba8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d803      	bhi.n	80036a0 <HAL_SPI_Transmit+0x168>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800369e:	d102      	bne.n	80036a6 <HAL_SPI_Transmit+0x16e>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036aa:	e074      	b.n	8003796 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1ce      	bne.n	8003654 <HAL_SPI_Transmit+0x11c>
 80036b6:	e04c      	b.n	8003752 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_SPI_Transmit+0x18e>
 80036c0:	8afb      	ldrh	r3, [r7, #22]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d140      	bne.n	8003748 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	330c      	adds	r3, #12
 80036d0:	7812      	ldrb	r2, [r2, #0]
 80036d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036ec:	e02c      	b.n	8003748 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d113      	bne.n	8003724 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	7812      	ldrb	r2, [r2, #0]
 8003708:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	86da      	strh	r2, [r3, #54]	; 0x36
 8003722:	e011      	b.n	8003748 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003724:	f7fe fa40 	bl	8001ba8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d803      	bhi.n	800373c <HAL_SPI_Transmit+0x204>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800373a:	d102      	bne.n	8003742 <HAL_SPI_Transmit+0x20a>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003746:	e026      	b.n	8003796 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1cd      	bne.n	80036ee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fbb8 	bl	8003ecc <SPI_EndRxTxTransaction>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	e000      	b.n	8003796 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003794:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037cc:	d112      	bne.n	80037f4 <HAL_SPI_Receive+0x44>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10e      	bne.n	80037f4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2204      	movs	r2, #4
 80037da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f8f1 	bl	80039d2 <HAL_SPI_TransmitReceive>
 80037f0:	4603      	mov	r3, r0
 80037f2:	e0ea      	b.n	80039ca <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_SPI_Receive+0x52>
 80037fe:	2302      	movs	r3, #2
 8003800:	e0e3      	b.n	80039ca <HAL_SPI_Receive+0x21a>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800380a:	f7fe f9cd 	bl	8001ba8 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d002      	beq.n	8003822 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800381c:	2302      	movs	r3, #2
 800381e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003820:	e0ca      	b.n	80039b8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_SPI_Receive+0x7e>
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d102      	bne.n	8003834 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003832:	e0c1      	b.n	80039b8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2204      	movs	r2, #4
 8003838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387a:	d10f      	bne.n	800389c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800389a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d007      	beq.n	80038ba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d162      	bne.n	8003988 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038c2:	e02e      	b.n	8003922 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d115      	bne.n	80038fe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f103 020c 	add.w	r2, r3, #12
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038fc:	e011      	b.n	8003922 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038fe:	f7fe f953 	bl	8001ba8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d803      	bhi.n	8003916 <HAL_SPI_Receive+0x166>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003914:	d102      	bne.n	800391c <HAL_SPI_Receive+0x16c>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003920:	e04a      	b.n	80039b8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1cb      	bne.n	80038c4 <HAL_SPI_Receive+0x114>
 800392c:	e031      	b.n	8003992 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d113      	bne.n	8003964 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	b292      	uxth	r2, r2
 8003948:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	1c9a      	adds	r2, r3, #2
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003962:	e011      	b.n	8003988 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003964:	f7fe f920 	bl	8001ba8 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d803      	bhi.n	800397c <HAL_SPI_Receive+0x1cc>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800397a:	d102      	bne.n	8003982 <HAL_SPI_Receive+0x1d2>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003986:	e017      	b.n	80039b8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1cd      	bne.n	800392e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fa46 	bl	8003e28 <SPI_EndRxTransaction>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	75fb      	strb	r3, [r7, #23]
 80039b4:	e000      	b.n	80039b8 <HAL_SPI_Receive+0x208>
  }

error :
 80039b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b08c      	sub	sp, #48	; 0x30
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039e0:	2301      	movs	r3, #1
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x26>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e18a      	b.n	8003d0e <HAL_SPI_TransmitReceive+0x33c>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a00:	f7fe f8d2 	bl	8001ba8 <HAL_GetTick>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a16:	887b      	ldrh	r3, [r7, #2]
 8003a18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d00f      	beq.n	8003a42 <HAL_SPI_TransmitReceive+0x70>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a28:	d107      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x68>
 8003a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d003      	beq.n	8003a42 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a40:	e15b      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x82>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x82>
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d103      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a5a:	e14e      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d003      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2205      	movs	r2, #5
 8003a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	887a      	ldrh	r2, [r7, #2]
 8003a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	887a      	ldrh	r2, [r7, #2]
 8003a92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d007      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003acc:	d178      	bne.n	8003bc0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_TransmitReceive+0x10a>
 8003ad6:	8b7b      	ldrh	r3, [r7, #26]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d166      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	881a      	ldrh	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	1c9a      	adds	r2, r3, #2
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b00:	e053      	b.n	8003baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d11b      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x176>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <HAL_SPI_TransmitReceive+0x176>
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d113      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	881a      	ldrh	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	1c9a      	adds	r2, r3, #2
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d119      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x1b8>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d014      	beq.n	8003b8a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	b292      	uxth	r2, r2
 8003b6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	1c9a      	adds	r2, r3, #2
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b86:	2301      	movs	r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b8a:	f7fe f80d 	bl	8001ba8 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d807      	bhi.n	8003baa <HAL_SPI_TransmitReceive+0x1d8>
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ba0:	d003      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ba8:	e0a7      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1a6      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x130>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1a1      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x130>
 8003bbe:	e07c      	b.n	8003cba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_SPI_TransmitReceive+0x1fc>
 8003bc8:	8b7b      	ldrh	r3, [r7, #26]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d16b      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	7812      	ldrb	r2, [r2, #0]
 8003bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf4:	e057      	b.n	8003ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d11c      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x26c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d017      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x26c>
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d114      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d119      	bne.n	8003c80 <HAL_SPI_TransmitReceive+0x2ae>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d014      	beq.n	8003c80 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c80:	f7fd ff92 	bl	8001ba8 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d803      	bhi.n	8003c98 <HAL_SPI_TransmitReceive+0x2c6>
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c96:	d102      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x2cc>
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ca4:	e029      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1a2      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x224>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d19d      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f904 	bl	8003ecc <SPI_EndRxTxTransaction>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d006      	beq.n	8003cd8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cd6:	e010      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	e000      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3730      	adds	r7, #48	; 0x30
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d28:	f7fd ff3e 	bl	8001ba8 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d38:	f7fd ff36 	bl	8001ba8 <HAL_GetTick>
 8003d3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d3e:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	015b      	lsls	r3, r3, #5
 8003d44:	0d1b      	lsrs	r3, r3, #20
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d4e:	e054      	b.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d56:	d050      	beq.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d58:	f7fd ff26 	bl	8001ba8 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d902      	bls.n	8003d6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d13d      	bne.n	8003dea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d86:	d111      	bne.n	8003dac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d90:	d004      	beq.n	8003d9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d107      	bne.n	8003dac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	d10f      	bne.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e017      	b.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d19b      	bne.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000018 	.word	0x20000018

08003e28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3c:	d111      	bne.n	8003e62 <SPI_EndRxTransaction+0x3a>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e46:	d004      	beq.n	8003e52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e50:	d107      	bne.n	8003e62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e60:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d117      	bne.n	8003e9c <SPI_EndRxTransaction+0x74>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e74:	d112      	bne.n	8003e9c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2101      	movs	r1, #1
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff ff49 	bl	8003d18 <SPI_WaitFlagStateUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01a      	beq.n	8003ec2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	f043 0220 	orr.w	r2, r3, #32
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e013      	b.n	8003ec4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2180      	movs	r1, #128	; 0x80
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff ff36 	bl	8003d18 <SPI_WaitFlagStateUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	f043 0220 	orr.w	r2, r3, #32
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e000      	b.n	8003ec4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af02      	add	r7, sp, #8
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2180      	movs	r1, #128	; 0x80
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f7ff ff18 	bl	8003d18 <SPI_WaitFlagStateUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e000      	b.n	8003f00 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e041      	b.n	8003f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fd fbea 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f000 faa8 	bl	800449c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d001      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e03a      	b.n	8004036 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a18      	ldr	r2, [pc, #96]	; (8004040 <HAL_TIM_Base_Start_IT+0x98>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00e      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0x58>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fea:	d009      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0x58>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a14      	ldr	r2, [pc, #80]	; (8004044 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d004      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0x58>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a13      	ldr	r2, [pc, #76]	; (8004048 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d111      	bne.n	8004024 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b06      	cmp	r3, #6
 8004010:	d010      	beq.n	8004034 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0201 	orr.w	r2, r2, #1
 8004020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004022:	e007      	b.n	8004034 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800

0800404c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6a1a      	ldr	r2, [r3, #32]
 800406a:	f241 1311 	movw	r3, #4369	; 0x1111
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10f      	bne.n	8004094 <HAL_TIM_Base_Stop_IT+0x48>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6a1a      	ldr	r2, [r3, #32]
 800407a:	f240 4344 	movw	r3, #1092	; 0x444
 800407e:	4013      	ands	r3, r2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d107      	bne.n	8004094 <HAL_TIM_Base_Stop_IT+0x48>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d122      	bne.n	8004104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d11b      	bne.n	8004104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0202 	mvn.w	r2, #2
 80040d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f9ba 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 80040f0:	e005      	b.n	80040fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f9ad 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f9bc 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b04      	cmp	r3, #4
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0204 	mvn.w	r2, #4
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f990 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f983 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f992 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	d122      	bne.n	80041ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b08      	cmp	r3, #8
 8004172:	d11b      	bne.n	80041ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0208 	mvn.w	r2, #8
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2204      	movs	r2, #4
 8004182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f966 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f959 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f968 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b10      	cmp	r3, #16
 80041b8:	d122      	bne.n	8004200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d11b      	bne.n	8004200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0210 	mvn.w	r2, #16
 80041d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2208      	movs	r2, #8
 80041d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f93c 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 80041ec:	e005      	b.n	80041fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f92f 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f93e 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d10e      	bne.n	800422c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d107      	bne.n	800422c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0201 	mvn.w	r2, #1
 8004224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f90a 	bl	8004440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d10e      	bne.n	8004258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b80      	cmp	r3, #128	; 0x80
 8004246:	d107      	bne.n	8004258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fa81 	bl	800475a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d10e      	bne.n	8004284 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	d107      	bne.n	8004284 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f902 	bl	8004488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b20      	cmp	r3, #32
 8004290:	d10e      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b20      	cmp	r3, #32
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0220 	mvn.w	r2, #32
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fa4c 	bl	8004748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_TIM_ConfigClockSource+0x18>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e0b3      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x180>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004308:	d03e      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0xd0>
 800430a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430e:	f200 8087 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x168>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	f000 8085 	beq.w	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431e:	d87f      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x168>
 8004320:	2b70      	cmp	r3, #112	; 0x70
 8004322:	d01a      	beq.n	800435a <HAL_TIM_ConfigClockSource+0xa2>
 8004324:	2b70      	cmp	r3, #112	; 0x70
 8004326:	d87b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x168>
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d050      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x116>
 800432c:	2b60      	cmp	r3, #96	; 0x60
 800432e:	d877      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x168>
 8004330:	2b50      	cmp	r3, #80	; 0x50
 8004332:	d03c      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0xf6>
 8004334:	2b50      	cmp	r3, #80	; 0x50
 8004336:	d873      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x168>
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d058      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x136>
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d86f      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x168>
 8004340:	2b30      	cmp	r3, #48	; 0x30
 8004342:	d064      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x156>
 8004344:	2b30      	cmp	r3, #48	; 0x30
 8004346:	d86b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x168>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d060      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x156>
 800434c:	2b20      	cmp	r3, #32
 800434e:	d867      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x168>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d05c      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x156>
 8004354:	2b10      	cmp	r3, #16
 8004356:	d05a      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004358:	e062      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f000 f970 	bl	800464e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800437c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	609a      	str	r2, [r3, #8]
      break;
 8004386:	e04e      	b.n	8004426 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6899      	ldr	r1, [r3, #8]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f000 f959 	bl	800464e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043aa:	609a      	str	r2, [r3, #8]
      break;
 80043ac:	e03b      	b.n	8004426 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 f8d0 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2150      	movs	r1, #80	; 0x50
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f927 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 80043cc:	e02b      	b.n	8004426 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 f8ee 	bl	80045bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2160      	movs	r1, #96	; 0x60
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f917 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 80043ec:	e01b      	b.n	8004426 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 f8b0 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2140      	movs	r1, #64	; 0x40
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f907 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 800440c:	e00b      	b.n	8004426 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f000 f8fe 	bl	800461a <TIM_ITRx_SetConfig>
        break;
 800441e:	e002      	b.n	8004426 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004420:	bf00      	nop
 8004422:	e000      	b.n	8004426 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004424:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr

08004452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
	...

0800449c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a29      	ldr	r2, [pc, #164]	; (8004554 <TIM_Base_SetConfig+0xb8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00b      	beq.n	80044cc <TIM_Base_SetConfig+0x30>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ba:	d007      	beq.n	80044cc <TIM_Base_SetConfig+0x30>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a26      	ldr	r2, [pc, #152]	; (8004558 <TIM_Base_SetConfig+0xbc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_Base_SetConfig+0x30>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a25      	ldr	r2, [pc, #148]	; (800455c <TIM_Base_SetConfig+0xc0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d108      	bne.n	80044de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <TIM_Base_SetConfig+0xb8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_Base_SetConfig+0x62>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ec:	d007      	beq.n	80044fe <TIM_Base_SetConfig+0x62>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a19      	ldr	r2, [pc, #100]	; (8004558 <TIM_Base_SetConfig+0xbc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_Base_SetConfig+0x62>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a18      	ldr	r2, [pc, #96]	; (800455c <TIM_Base_SetConfig+0xc0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d108      	bne.n	8004510 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a07      	ldr	r2, [pc, #28]	; (8004554 <TIM_Base_SetConfig+0xb8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d103      	bne.n	8004544 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	615a      	str	r2, [r3, #20]
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800

08004560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800458a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 030a 	bic.w	r3, r3, #10
 800459c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f023 0210 	bic.w	r2, r3, #16
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	031b      	lsls	r3, r3, #12
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	f043 0307 	orr.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800464e:	b480      	push	{r7}
 8004650:	b087      	sub	sp, #28
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004668:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	431a      	orrs	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4313      	orrs	r3, r2
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	609a      	str	r2, [r3, #8]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr

0800468c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e046      	b.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a16      	ldr	r2, [pc, #88]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f0:	d009      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a12      	ldr	r2, [pc, #72]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a10      	ldr	r2, [pc, #64]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d10c      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4313      	orrs	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800

08004748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr

0800475a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e03f      	b.n	80047fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fc ffde 	bl	8001754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2224      	movs	r2, #36	; 0x24
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fba9 	bl	8004f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	4613      	mov	r3, r2
 8004812:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b20      	cmp	r3, #32
 800481e:	d11d      	bne.n	800485c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_UART_Receive_IT+0x26>
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e016      	b.n	800485e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_UART_Receive_IT+0x38>
 800483a:	2302      	movs	r3, #2
 800483c:	e00f      	b.n	800485e <HAL_UART_Receive_IT+0x58>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	461a      	mov	r2, r3
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f9cf 	bl	8004bf6 <UART_Start_Receive_IT>
 8004858:	4603      	mov	r3, r0
 800485a:	e000      	b.n	800485e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
  }
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004888:	2300      	movs	r3, #0
 800488a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10d      	bne.n	80048ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_UART_IRQHandler+0x52>
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fa7f 	bl	8004db6 <UART_Receive_IT>
      return;
 80048b8:	e17b      	b.n	8004bb2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80b1 	beq.w	8004a24 <HAL_UART_IRQHandler+0x1bc>
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d105      	bne.n	80048d8 <HAL_UART_IRQHandler+0x70>
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80a6 	beq.w	8004a24 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_UART_IRQHandler+0x90>
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	f043 0201 	orr.w	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_UART_IRQHandler+0xb0>
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f043 0202 	orr.w	r2, r3, #2
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_UART_IRQHandler+0xd0>
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	f043 0204 	orr.w	r2, r3, #4
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00f      	beq.n	8004962 <HAL_UART_IRQHandler+0xfa>
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <HAL_UART_IRQHandler+0xee>
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f043 0208 	orr.w	r2, r3, #8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 811e 	beq.w	8004ba8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_UART_IRQHandler+0x11e>
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fa18 	bl	8004db6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <HAL_UART_IRQHandler+0x146>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d031      	beq.n	8004a12 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f95a 	bl	8004c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d023      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d013      	beq.n	8004a02 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	4a76      	ldr	r2, [pc, #472]	; (8004bb8 <HAL_UART_IRQHandler+0x350>)
 80049e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd fa54 	bl	8001e94 <HAL_DMA_Abort_IT>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d016      	beq.n	8004a20 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049fc:	4610      	mov	r0, r2
 80049fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	e00e      	b.n	8004a20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f8e3 	bl	8004bce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a08:	e00a      	b.n	8004a20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8df 	bl	8004bce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	e006      	b.n	8004a20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f8db 	bl	8004bce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a1e:	e0c3      	b.n	8004ba8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a20:	bf00      	nop
    return;
 8004a22:	e0c1      	b.n	8004ba8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	f040 80a1 	bne.w	8004b70 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 809b 	beq.w	8004b70 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f003 0310 	and.w	r3, r3, #16
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8095 	beq.w	8004b70 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d04e      	beq.n	8004b08 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004a74:	8a3b      	ldrh	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 8098 	beq.w	8004bac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a80:	8a3a      	ldrh	r2, [r7, #16]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	f080 8092 	bcs.w	8004bac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8a3a      	ldrh	r2, [r7, #16]
 8004a8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d02b      	beq.n	8004af0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aa6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695a      	ldr	r2, [r3, #20]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0210 	bic.w	r2, r2, #16
 8004ae4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fd f997 	bl	8001e1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f86d 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b06:	e051      	b.n	8004bac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d047      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004b20:	8a7b      	ldrh	r3, [r7, #18]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d044      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b34:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695a      	ldr	r2, [r3, #20]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0210 	bic.w	r2, r2, #16
 8004b62:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b64:	8a7b      	ldrh	r3, [r7, #18]
 8004b66:	4619      	mov	r1, r3
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f839 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b6e:	e01f      	b.n	8004bb0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <HAL_UART_IRQHandler+0x324>
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f8af 	bl	8004ce8 <UART_Transmit_IT>
    return;
 8004b8a:	e012      	b.n	8004bb2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00d      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x34a>
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f8f0 	bl	8004d86 <UART_EndTransmit_IT>
    return;
 8004ba6:	e004      	b.n	8004bb2 <HAL_UART_IRQHandler+0x34a>
    return;
 8004ba8:	bf00      	nop
 8004baa:	e002      	b.n	8004bb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004bac:	bf00      	nop
 8004bae:	e000      	b.n	8004bb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004bb0:	bf00      	nop
  }
}
 8004bb2:	3728      	adds	r7, #40	; 0x28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	08004cc1 	.word	0x08004cc1

08004bbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr

08004be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr

08004bf6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	4613      	mov	r3, r2
 8004c02:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	88fa      	ldrh	r2, [r7, #6]
 8004c0e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	88fa      	ldrh	r2, [r7, #6]
 8004c14:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2222      	movs	r2, #34	; 0x22
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0220 	orr.w	r2, r2, #32
 8004c5a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0201 	bic.w	r2, r2, #1
 8004c8e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d107      	bne.n	8004ca8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0210 	bic.w	r2, r2, #16
 8004ca6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7ff ff77 	bl	8004bce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b21      	cmp	r3, #33	; 0x21
 8004cfa:	d13e      	bne.n	8004d7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d04:	d114      	bne.n	8004d30 <UART_Transmit_IT+0x48>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d110      	bne.n	8004d30 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	1c9a      	adds	r2, r3, #2
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	621a      	str	r2, [r3, #32]
 8004d2e:	e008      	b.n	8004d42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	1c59      	adds	r1, r3, #1
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6211      	str	r1, [r2, #32]
 8004d3a:	781a      	ldrb	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10f      	bne.n	8004d76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e000      	b.n	8004d7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
  }
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr

08004d86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff ff08 	bl	8004bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b086      	sub	sp, #24
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b22      	cmp	r3, #34	; 0x22
 8004dc8:	f040 8099 	bne.w	8004efe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd4:	d117      	bne.n	8004e06 <UART_Receive_IT+0x50>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d113      	bne.n	8004e06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	1c9a      	adds	r2, r3, #2
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28
 8004e04:	e026      	b.n	8004e54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e18:	d007      	beq.n	8004e2a <UART_Receive_IT+0x74>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <UART_Receive_IT+0x82>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	e008      	b.n	8004e4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	4619      	mov	r1, r3
 8004e62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d148      	bne.n	8004efa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0220 	bic.w	r2, r2, #32
 8004e76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d123      	bne.n	8004ef0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0210 	bic.w	r2, r2, #16
 8004ebc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	d10a      	bne.n	8004ee2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff fe79 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
 8004eee:	e002      	b.n	8004ef6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7fc fb0f 	bl	8001514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e002      	b.n	8004f00 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	e000      	b.n	8004f00 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004efe:	2302      	movs	r3, #2
  }
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f42:	f023 030c 	bic.w	r3, r3, #12
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699a      	ldr	r2, [r3, #24]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a2c      	ldr	r2, [pc, #176]	; (800501c <UART_SetConfig+0x114>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d103      	bne.n	8004f78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f70:	f7fe fa2c 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	e002      	b.n	8004f7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f78:	f7fe fa14 	bl	80033a4 <HAL_RCC_GetPCLK1Freq>
 8004f7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	009a      	lsls	r2, r3, #2
 8004f88:	441a      	add	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f94:	4a22      	ldr	r2, [pc, #136]	; (8005020 <UART_SetConfig+0x118>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	0119      	lsls	r1, r3, #4
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009a      	lsls	r2, r3, #2
 8004fa8:	441a      	add	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <UART_SetConfig+0x118>)
 8004fb6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	2064      	movs	r0, #100	; 0x64
 8004fbe:	fb00 f303 	mul.w	r3, r0, r3
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	3332      	adds	r3, #50	; 0x32
 8004fc8:	4a15      	ldr	r2, [pc, #84]	; (8005020 <UART_SetConfig+0x118>)
 8004fca:	fba2 2303 	umull	r2, r3, r2, r3
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fd4:	4419      	add	r1, r3
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009a      	lsls	r2, r3, #2
 8004fe0:	441a      	add	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <UART_SetConfig+0x118>)
 8004fee:	fba3 0302 	umull	r0, r3, r3, r2
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	2064      	movs	r0, #100	; 0x64
 8004ff6:	fb00 f303 	mul.w	r3, r0, r3
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	3332      	adds	r3, #50	; 0x32
 8005000:	4a07      	ldr	r2, [pc, #28]	; (8005020 <UART_SetConfig+0x118>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	f003 020f 	and.w	r2, r3, #15
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	440a      	add	r2, r1
 8005012:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40013800 	.word	0x40013800
 8005020:	51eb851f 	.word	0x51eb851f

08005024 <__libc_init_array>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	2600      	movs	r6, #0
 8005028:	4d0c      	ldr	r5, [pc, #48]	; (800505c <__libc_init_array+0x38>)
 800502a:	4c0d      	ldr	r4, [pc, #52]	; (8005060 <__libc_init_array+0x3c>)
 800502c:	1b64      	subs	r4, r4, r5
 800502e:	10a4      	asrs	r4, r4, #2
 8005030:	42a6      	cmp	r6, r4
 8005032:	d109      	bne.n	8005048 <__libc_init_array+0x24>
 8005034:	f000 f892 	bl	800515c <_init>
 8005038:	2600      	movs	r6, #0
 800503a:	4d0a      	ldr	r5, [pc, #40]	; (8005064 <__libc_init_array+0x40>)
 800503c:	4c0a      	ldr	r4, [pc, #40]	; (8005068 <__libc_init_array+0x44>)
 800503e:	1b64      	subs	r4, r4, r5
 8005040:	10a4      	asrs	r4, r4, #2
 8005042:	42a6      	cmp	r6, r4
 8005044:	d105      	bne.n	8005052 <__libc_init_array+0x2e>
 8005046:	bd70      	pop	{r4, r5, r6, pc}
 8005048:	f855 3b04 	ldr.w	r3, [r5], #4
 800504c:	4798      	blx	r3
 800504e:	3601      	adds	r6, #1
 8005050:	e7ee      	b.n	8005030 <__libc_init_array+0xc>
 8005052:	f855 3b04 	ldr.w	r3, [r5], #4
 8005056:	4798      	blx	r3
 8005058:	3601      	adds	r6, #1
 800505a:	e7f2      	b.n	8005042 <__libc_init_array+0x1e>
 800505c:	08005a28 	.word	0x08005a28
 8005060:	08005a28 	.word	0x08005a28
 8005064:	08005a28 	.word	0x08005a28
 8005068:	08005a2c 	.word	0x08005a2c

0800506c <__itoa>:
 800506c:	1e93      	subs	r3, r2, #2
 800506e:	2b22      	cmp	r3, #34	; 0x22
 8005070:	b510      	push	{r4, lr}
 8005072:	460c      	mov	r4, r1
 8005074:	d904      	bls.n	8005080 <__itoa+0x14>
 8005076:	2300      	movs	r3, #0
 8005078:	461c      	mov	r4, r3
 800507a:	700b      	strb	r3, [r1, #0]
 800507c:	4620      	mov	r0, r4
 800507e:	bd10      	pop	{r4, pc}
 8005080:	2a0a      	cmp	r2, #10
 8005082:	d109      	bne.n	8005098 <__itoa+0x2c>
 8005084:	2800      	cmp	r0, #0
 8005086:	da07      	bge.n	8005098 <__itoa+0x2c>
 8005088:	232d      	movs	r3, #45	; 0x2d
 800508a:	700b      	strb	r3, [r1, #0]
 800508c:	2101      	movs	r1, #1
 800508e:	4240      	negs	r0, r0
 8005090:	4421      	add	r1, r4
 8005092:	f000 f821 	bl	80050d8 <__utoa>
 8005096:	e7f1      	b.n	800507c <__itoa+0x10>
 8005098:	2100      	movs	r1, #0
 800509a:	e7f9      	b.n	8005090 <__itoa+0x24>

0800509c <itoa>:
 800509c:	f7ff bfe6 	b.w	800506c <__itoa>

080050a0 <memset>:
 80050a0:	4603      	mov	r3, r0
 80050a2:	4402      	add	r2, r0
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d100      	bne.n	80050aa <memset+0xa>
 80050a8:	4770      	bx	lr
 80050aa:	f803 1b01 	strb.w	r1, [r3], #1
 80050ae:	e7f9      	b.n	80050a4 <memset+0x4>

080050b0 <strncpy>:
 80050b0:	4603      	mov	r3, r0
 80050b2:	b510      	push	{r4, lr}
 80050b4:	3901      	subs	r1, #1
 80050b6:	b132      	cbz	r2, 80050c6 <strncpy+0x16>
 80050b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80050bc:	3a01      	subs	r2, #1
 80050be:	f803 4b01 	strb.w	r4, [r3], #1
 80050c2:	2c00      	cmp	r4, #0
 80050c4:	d1f7      	bne.n	80050b6 <strncpy+0x6>
 80050c6:	2100      	movs	r1, #0
 80050c8:	441a      	add	r2, r3
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d100      	bne.n	80050d0 <strncpy+0x20>
 80050ce:	bd10      	pop	{r4, pc}
 80050d0:	f803 1b01 	strb.w	r1, [r3], #1
 80050d4:	e7f9      	b.n	80050ca <strncpy+0x1a>
	...

080050d8 <__utoa>:
 80050d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050da:	b08b      	sub	sp, #44	; 0x2c
 80050dc:	4605      	mov	r5, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	466e      	mov	r6, sp
 80050e2:	4c1d      	ldr	r4, [pc, #116]	; (8005158 <__utoa+0x80>)
 80050e4:	f104 0c20 	add.w	ip, r4, #32
 80050e8:	4637      	mov	r7, r6
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	6861      	ldr	r1, [r4, #4]
 80050ee:	3408      	adds	r4, #8
 80050f0:	c703      	stmia	r7!, {r0, r1}
 80050f2:	4564      	cmp	r4, ip
 80050f4:	463e      	mov	r6, r7
 80050f6:	d1f7      	bne.n	80050e8 <__utoa+0x10>
 80050f8:	7921      	ldrb	r1, [r4, #4]
 80050fa:	6820      	ldr	r0, [r4, #0]
 80050fc:	7139      	strb	r1, [r7, #4]
 80050fe:	1e91      	subs	r1, r2, #2
 8005100:	2922      	cmp	r1, #34	; 0x22
 8005102:	6038      	str	r0, [r7, #0]
 8005104:	f04f 0100 	mov.w	r1, #0
 8005108:	d904      	bls.n	8005114 <__utoa+0x3c>
 800510a:	7019      	strb	r1, [r3, #0]
 800510c:	460b      	mov	r3, r1
 800510e:	4618      	mov	r0, r3
 8005110:	b00b      	add	sp, #44	; 0x2c
 8005112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005114:	1e58      	subs	r0, r3, #1
 8005116:	4684      	mov	ip, r0
 8005118:	fbb5 f7f2 	udiv	r7, r5, r2
 800511c:	fb02 5617 	mls	r6, r2, r7, r5
 8005120:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005124:	4476      	add	r6, lr
 8005126:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800512a:	460c      	mov	r4, r1
 800512c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005130:	462e      	mov	r6, r5
 8005132:	42b2      	cmp	r2, r6
 8005134:	463d      	mov	r5, r7
 8005136:	f101 0101 	add.w	r1, r1, #1
 800513a:	d9ed      	bls.n	8005118 <__utoa+0x40>
 800513c:	2200      	movs	r2, #0
 800513e:	545a      	strb	r2, [r3, r1]
 8005140:	1919      	adds	r1, r3, r4
 8005142:	1aa5      	subs	r5, r4, r2
 8005144:	42aa      	cmp	r2, r5
 8005146:	dae2      	bge.n	800510e <__utoa+0x36>
 8005148:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800514c:	780e      	ldrb	r6, [r1, #0]
 800514e:	3201      	adds	r2, #1
 8005150:	7006      	strb	r6, [r0, #0]
 8005152:	f801 5901 	strb.w	r5, [r1], #-1
 8005156:	e7f4      	b.n	8005142 <__utoa+0x6a>
 8005158:	08005a00 	.word	0x08005a00

0800515c <_init>:
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	bf00      	nop
 8005160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005162:	bc08      	pop	{r3}
 8005164:	469e      	mov	lr, r3
 8005166:	4770      	bx	lr

08005168 <_fini>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr
