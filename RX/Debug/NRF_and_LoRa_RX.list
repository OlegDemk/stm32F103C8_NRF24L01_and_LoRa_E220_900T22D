
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000556c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e84  08005e84  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005e84  08005e84  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e84  08005e84  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000080  08005f0c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  08005f0c  000206cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001708d  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9b  00000000  00000000  00037136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00039fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197cb  00000000  00000000  0003c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001741f  00000000  00000000  00055ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090301  00000000  00000000  0006d0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd3c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  000fd418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08005660 	.word	0x08005660

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08005660 	.word	0x08005660

0800014c <lora_transmit_data>:

//bool init_lora_RX(void);

//----------------------------------------------------------------------------------------
int lora_transmit_data(void)    // Rename
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	static int transmit_count = 0;			// Variable for transmit
	static uint8_t data[10] = {0};

	transmit_count++;
 8000150:	4b4d      	ldr	r3, [pc, #308]	; (8000288 <lora_transmit_data+0x13c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	4a4c      	ldr	r2, [pc, #304]	; (8000288 <lora_transmit_data+0x13c>)
 8000158:	6013      	str	r3, [r2, #0]

	data[5] = '0' + transmit_count%10;
 800015a:	4b4b      	ldr	r3, [pc, #300]	; (8000288 <lora_transmit_data+0x13c>)
 800015c:	681a      	ldr	r2, [r3, #0]
 800015e:	4b4b      	ldr	r3, [pc, #300]	; (800028c <lora_transmit_data+0x140>)
 8000160:	fb83 1302 	smull	r1, r3, r3, r2
 8000164:	1099      	asrs	r1, r3, #2
 8000166:	17d3      	asrs	r3, r2, #31
 8000168:	1ac9      	subs	r1, r1, r3
 800016a:	460b      	mov	r3, r1
 800016c:	009b      	lsls	r3, r3, #2
 800016e:	440b      	add	r3, r1
 8000170:	005b      	lsls	r3, r3, #1
 8000172:	1ad1      	subs	r1, r2, r3
 8000174:	b2cb      	uxtb	r3, r1
 8000176:	3330      	adds	r3, #48	; 0x30
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4b45      	ldr	r3, [pc, #276]	; (8000290 <lora_transmit_data+0x144>)
 800017c:	715a      	strb	r2, [r3, #5]
	data[4] = '0' + (transmit_count/10) % 10;
 800017e:	4b42      	ldr	r3, [pc, #264]	; (8000288 <lora_transmit_data+0x13c>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4a42      	ldr	r2, [pc, #264]	; (800028c <lora_transmit_data+0x140>)
 8000184:	fb82 1203 	smull	r1, r2, r2, r3
 8000188:	1092      	asrs	r2, r2, #2
 800018a:	17db      	asrs	r3, r3, #31
 800018c:	1ad2      	subs	r2, r2, r3
 800018e:	4b3f      	ldr	r3, [pc, #252]	; (800028c <lora_transmit_data+0x140>)
 8000190:	fb83 1302 	smull	r1, r3, r3, r2
 8000194:	1099      	asrs	r1, r3, #2
 8000196:	17d3      	asrs	r3, r2, #31
 8000198:	1ac9      	subs	r1, r1, r3
 800019a:	460b      	mov	r3, r1
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	440b      	add	r3, r1
 80001a0:	005b      	lsls	r3, r3, #1
 80001a2:	1ad1      	subs	r1, r2, r3
 80001a4:	b2cb      	uxtb	r3, r1
 80001a6:	3330      	adds	r3, #48	; 0x30
 80001a8:	b2da      	uxtb	r2, r3
 80001aa:	4b39      	ldr	r3, [pc, #228]	; (8000290 <lora_transmit_data+0x144>)
 80001ac:	711a      	strb	r2, [r3, #4]
	data[3] = '0' + (transmit_count/100) % 10;
 80001ae:	4b36      	ldr	r3, [pc, #216]	; (8000288 <lora_transmit_data+0x13c>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a38      	ldr	r2, [pc, #224]	; (8000294 <lora_transmit_data+0x148>)
 80001b4:	fb82 1203 	smull	r1, r2, r2, r3
 80001b8:	1152      	asrs	r2, r2, #5
 80001ba:	17db      	asrs	r3, r3, #31
 80001bc:	1ad2      	subs	r2, r2, r3
 80001be:	4b33      	ldr	r3, [pc, #204]	; (800028c <lora_transmit_data+0x140>)
 80001c0:	fb83 1302 	smull	r1, r3, r3, r2
 80001c4:	1099      	asrs	r1, r3, #2
 80001c6:	17d3      	asrs	r3, r2, #31
 80001c8:	1ac9      	subs	r1, r1, r3
 80001ca:	460b      	mov	r3, r1
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	440b      	add	r3, r1
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	1ad1      	subs	r1, r2, r3
 80001d4:	b2cb      	uxtb	r3, r1
 80001d6:	3330      	adds	r3, #48	; 0x30
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	4b2d      	ldr	r3, [pc, #180]	; (8000290 <lora_transmit_data+0x144>)
 80001dc:	70da      	strb	r2, [r3, #3]
	data[2] = '0' + (transmit_count/1000) % 10;
 80001de:	4b2a      	ldr	r3, [pc, #168]	; (8000288 <lora_transmit_data+0x13c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a2d      	ldr	r2, [pc, #180]	; (8000298 <lora_transmit_data+0x14c>)
 80001e4:	fb82 1203 	smull	r1, r2, r2, r3
 80001e8:	1192      	asrs	r2, r2, #6
 80001ea:	17db      	asrs	r3, r3, #31
 80001ec:	1ad2      	subs	r2, r2, r3
 80001ee:	4b27      	ldr	r3, [pc, #156]	; (800028c <lora_transmit_data+0x140>)
 80001f0:	fb83 1302 	smull	r1, r3, r3, r2
 80001f4:	1099      	asrs	r1, r3, #2
 80001f6:	17d3      	asrs	r3, r2, #31
 80001f8:	1ac9      	subs	r1, r1, r3
 80001fa:	460b      	mov	r3, r1
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	440b      	add	r3, r1
 8000200:	005b      	lsls	r3, r3, #1
 8000202:	1ad1      	subs	r1, r2, r3
 8000204:	b2cb      	uxtb	r3, r1
 8000206:	3330      	adds	r3, #48	; 0x30
 8000208:	b2da      	uxtb	r2, r3
 800020a:	4b21      	ldr	r3, [pc, #132]	; (8000290 <lora_transmit_data+0x144>)
 800020c:	709a      	strb	r2, [r3, #2]
	data[1] = '0' + (transmit_count/10000) % 10;
 800020e:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <lora_transmit_data+0x13c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a22      	ldr	r2, [pc, #136]	; (800029c <lora_transmit_data+0x150>)
 8000214:	fb82 1203 	smull	r1, r2, r2, r3
 8000218:	1312      	asrs	r2, r2, #12
 800021a:	17db      	asrs	r3, r3, #31
 800021c:	1ad2      	subs	r2, r2, r3
 800021e:	4b1b      	ldr	r3, [pc, #108]	; (800028c <lora_transmit_data+0x140>)
 8000220:	fb83 1302 	smull	r1, r3, r3, r2
 8000224:	1099      	asrs	r1, r3, #2
 8000226:	17d3      	asrs	r3, r2, #31
 8000228:	1ac9      	subs	r1, r1, r3
 800022a:	460b      	mov	r3, r1
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	440b      	add	r3, r1
 8000230:	005b      	lsls	r3, r3, #1
 8000232:	1ad1      	subs	r1, r2, r3
 8000234:	b2cb      	uxtb	r3, r1
 8000236:	3330      	adds	r3, #48	; 0x30
 8000238:	b2da      	uxtb	r2, r3
 800023a:	4b15      	ldr	r3, [pc, #84]	; (8000290 <lora_transmit_data+0x144>)
 800023c:	705a      	strb	r2, [r3, #1]
	data[0] = '0' + (transmit_count/100000) % 10;
 800023e:	4b12      	ldr	r3, [pc, #72]	; (8000288 <lora_transmit_data+0x13c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a17      	ldr	r2, [pc, #92]	; (80002a0 <lora_transmit_data+0x154>)
 8000244:	fb82 1203 	smull	r1, r2, r2, r3
 8000248:	1352      	asrs	r2, r2, #13
 800024a:	17db      	asrs	r3, r3, #31
 800024c:	1ad2      	subs	r2, r2, r3
 800024e:	4b0f      	ldr	r3, [pc, #60]	; (800028c <lora_transmit_data+0x140>)
 8000250:	fb83 1302 	smull	r1, r3, r3, r2
 8000254:	1099      	asrs	r1, r3, #2
 8000256:	17d3      	asrs	r3, r2, #31
 8000258:	1ac9      	subs	r1, r1, r3
 800025a:	460b      	mov	r3, r1
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	440b      	add	r3, r1
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	1ad1      	subs	r1, r2, r3
 8000264:	b2cb      	uxtb	r3, r1
 8000266:	3330      	adds	r3, #48	; 0x30
 8000268:	b2da      	uxtb	r2, r3
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <lora_transmit_data+0x144>)
 800026c:	701a      	strb	r2, [r3, #0]
	data[6] = '\0';
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <lora_transmit_data+0x144>)
 8000270:	2200      	movs	r2, #0
 8000272:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit_IT(&huart1, data, 7);
 8000274:	2207      	movs	r2, #7
 8000276:	4906      	ldr	r1, [pc, #24]	; (8000290 <lora_transmit_data+0x144>)
 8000278:	480a      	ldr	r0, [pc, #40]	; (80002a4 <lora_transmit_data+0x158>)
 800027a:	f004 f92a 	bl	80044d2 <HAL_UART_Transmit_IT>

	return transmit_count;
 800027e:	4b02      	ldr	r3, [pc, #8]	; (8000288 <lora_transmit_data+0x13c>)
 8000280:	681b      	ldr	r3, [r3, #0]
}
 8000282:	4618      	mov	r0, r3
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	2000009c 	.word	0x2000009c
 800028c:	66666667 	.word	0x66666667
 8000290:	200000a0 	.word	0x200000a0
 8000294:	51eb851f 	.word	0x51eb851f
 8000298:	10624dd3 	.word	0x10624dd3
 800029c:	68db8bad 	.word	0x68db8bad
 80002a0:	14f8b589 	.word	0x14f8b589
 80002a4:	200005d4 	.word	0x200005d4

080002a8 <read_all_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_all_settings_from_module(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 80002ac:	f000 f8c8 	bl	8000440 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 80002b0:	200a      	movs	r0, #10
 80002b2:	f001 fae9 	bl	8001888 <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;			// 0xC1 - Read register command
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <read_all_settings_from_module+0x34>)
 80002b8:	22c1      	movs	r2, #193	; 0xc1
 80002ba:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;			// Number of register for read
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <read_all_settings_from_module+0x34>)
 80002be:	2200      	movs	r2, #0
 80002c0:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;			// How many registers must be read
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <read_all_settings_from_module+0x34>)
 80002c4:	2208      	movs	r2, #8
 80002c6:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 80002c8:	2203      	movs	r2, #3
 80002ca:	4904      	ldr	r1, [pc, #16]	; (80002dc <read_all_settings_from_module+0x34>)
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <read_all_settings_from_module+0x38>)
 80002ce:	f004 f900 	bl	80044d2 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80002d2:	2064      	movs	r0, #100	; 0x64
 80002d4:	f001 fad8 	bl	8001888 <HAL_Delay>

	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200000ac 	.word	0x200000ac
 80002e0:	200005d4 	.word	0x200005d4

080002e4 <init_lora_TX>:
//----------------------------------------------------------------------------------------
bool init_lora_TX(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	// з зчитаними даними конфіг регістрів. Якщо співпадає повністю, тоді записати в
	// глобальну змінну що модуль ініціалізований нормально

	static uint8_t data[10] = {0};

	set_config_deep_sleep_mode();
 80002e8:	f000 f8aa 	bl	8000440 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 80002ec:	2064      	movs	r0, #100	; 0x64
 80002ee:	f001 facb 	bl	8001888 <HAL_Delay>

	// Init module
	// Descripe settings structure
	data[0] = 0xC0;		// 0xC0 - Set register command
 80002f2:	4b1e      	ldr	r3, [pc, #120]	; (800036c <init_lora_TX+0x88>)
 80002f4:	22c0      	movs	r2, #192	; 0xc0
 80002f6:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 80002f8:	4b1c      	ldr	r3, [pc, #112]	; (800036c <init_lora_TX+0x88>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 80002fe:	4b1b      	ldr	r3, [pc, #108]	; (800036c <init_lora_TX+0x88>)
 8000300:	2203      	movs	r2, #3
 8000302:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 8000304:	4b19      	ldr	r3, [pc, #100]	; (800036c <init_lora_TX+0x88>)
 8000306:	2212      	movs	r2, #18
 8000308:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 800030a:	4b18      	ldr	r3, [pc, #96]	; (800036c <init_lora_TX+0x88>)
 800030c:	2234      	movs	r2, #52	; 0x34
 800030e:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register (see in Datasheet)
 8000310:	4b16      	ldr	r3, [pc, #88]	; (800036c <init_lora_TX+0x88>)
 8000312:	2262      	movs	r2, #98	; 0x62
 8000314:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 8000316:	2206      	movs	r2, #6
 8000318:	4914      	ldr	r1, [pc, #80]	; (800036c <init_lora_TX+0x88>)
 800031a:	4815      	ldr	r0, [pc, #84]	; (8000370 <init_lora_TX+0x8c>)
 800031c:	f004 f8d9 	bl	80044d2 <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 8000320:	200a      	movs	r0, #10
 8000322:	f001 fab1 	bl	8001888 <HAL_Delay>

	memset(data, 0, sizeof(data));
 8000326:	220a      	movs	r2, #10
 8000328:	2100      	movs	r1, #0
 800032a:	4810      	ldr	r0, [pc, #64]	; (800036c <init_lora_TX+0x88>)
 800032c:	f004 fd5c 	bl	8004de8 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <init_lora_TX+0x88>)
 8000332:	22c0      	movs	r2, #192	; 0xc0
 8000334:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <init_lora_TX+0x88>)
 8000338:	2205      	movs	r2, #5
 800033a:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <init_lora_TX+0x88>)
 800033e:	2201      	movs	r2, #1
 8000340:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <init_lora_TX+0x88>)
 8000344:	2200      	movs	r2, #0
 8000346:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8000348:	2204      	movs	r2, #4
 800034a:	4908      	ldr	r1, [pc, #32]	; (800036c <init_lora_TX+0x88>)
 800034c:	4808      	ldr	r0, [pc, #32]	; (8000370 <init_lora_TX+0x8c>)
 800034e:	f004 f8c0 	bl	80044d2 <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 8000352:	200a      	movs	r0, #10
 8000354:	f001 fa98 	bl	8001888 <HAL_Delay>
	///////////////

	read_all_settings_from_module();
 8000358:	f7ff ffa6 	bl	80002a8 <read_all_settings_from_module>
	set_WOR_TX_mode();
 800035c:	f000 f894 	bl	8000488 <set_WOR_TX_mode>
	HAL_Delay(100);
 8000360:	2064      	movs	r0, #100	; 0x64
 8000362:	f001 fa91 	bl	8001888 <HAL_Delay>
}
 8000366:	bf00      	nop
 8000368:	4618      	mov	r0, r3
 800036a:	bd80      	pop	{r7, pc}
 800036c:	200000b8 	.word	0x200000b8
 8000370:	200005d4 	.word	0x200005d4

08000374 <init_lora_RX>:
//----------------------------------------------------------------------------------------
bool init_lora_RX(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	static uint8_t data[10] = {0};
	set_config_deep_sleep_mode();
 8000378:	f000 f862 	bl	8000440 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 800037c:	2064      	movs	r0, #100	; 0x64
 800037e:	f001 fa83 	bl	8001888 <HAL_Delay>

	data[0] = 0xC0;
 8000382:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <init_lora_RX+0x88>)
 8000384:	22c0      	movs	r2, #192	; 0xc0
 8000386:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <init_lora_RX+0x88>)
 800038a:	2200      	movs	r2, #0
 800038c:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 800038e:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <init_lora_RX+0x88>)
 8000390:	2203      	movs	r2, #3
 8000392:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 8000394:	4b19      	ldr	r3, [pc, #100]	; (80003fc <init_lora_RX+0x88>)
 8000396:	2212      	movs	r2, #18
 8000398:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 800039a:	4b18      	ldr	r3, [pc, #96]	; (80003fc <init_lora_RX+0x88>)
 800039c:	2234      	movs	r2, #52	; 0x34
 800039e:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register ()
 80003a0:	4b16      	ldr	r3, [pc, #88]	; (80003fc <init_lora_RX+0x88>)
 80003a2:	2262      	movs	r2, #98	; 0x62
 80003a4:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 80003a6:	2206      	movs	r2, #6
 80003a8:	4914      	ldr	r1, [pc, #80]	; (80003fc <init_lora_RX+0x88>)
 80003aa:	4815      	ldr	r0, [pc, #84]	; (8000400 <init_lora_RX+0x8c>)
 80003ac:	f004 f891 	bl	80044d2 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80003b0:	2064      	movs	r0, #100	; 0x64
 80003b2:	f001 fa69 	bl	8001888 <HAL_Delay>

	memset(data, 0, sizeof(data));
 80003b6:	220a      	movs	r2, #10
 80003b8:	2100      	movs	r1, #0
 80003ba:	4810      	ldr	r0, [pc, #64]	; (80003fc <init_lora_RX+0x88>)
 80003bc:	f004 fd14 	bl	8004de8 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 80003c0:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <init_lora_RX+0x88>)
 80003c2:	22c0      	movs	r2, #192	; 0xc0
 80003c4:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <init_lora_RX+0x88>)
 80003c8:	2205      	movs	r2, #5
 80003ca:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <init_lora_RX+0x88>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 80003d2:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <init_lora_RX+0x88>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 80003d8:	2204      	movs	r2, #4
 80003da:	4908      	ldr	r1, [pc, #32]	; (80003fc <init_lora_RX+0x88>)
 80003dc:	4808      	ldr	r0, [pc, #32]	; (8000400 <init_lora_RX+0x8c>)
 80003de:	f004 f878 	bl	80044d2 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80003e2:	2064      	movs	r0, #100	; 0x64
 80003e4:	f001 fa50 	bl	8001888 <HAL_Delay>

	read_settings_from_module();
 80003e8:	f000 f80c 	bl	8000404 <read_settings_from_module>

	set_WOR_RX_mode();
 80003ec:	f000 f83a 	bl	8000464 <set_WOR_RX_mode>

	HAL_Delay(100);
 80003f0:	2064      	movs	r0, #100	; 0x64
 80003f2:	f001 fa49 	bl	8001888 <HAL_Delay>
}
 80003f6:	bf00      	nop
 80003f8:	4618      	mov	r0, r3
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	200000c4 	.word	0x200000c4
 8000400:	200005d4 	.word	0x200005d4

08000404 <read_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_settings_from_module(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 8000408:	f000 f81a 	bl	8000440 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 800040c:	200a      	movs	r0, #10
 800040e:	f001 fa3b 	bl	8001888 <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <read_settings_from_module+0x34>)
 8000414:	22c1      	movs	r2, #193	; 0xc1
 8000416:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <read_settings_from_module+0x34>)
 800041a:	2200      	movs	r2, #0
 800041c:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <read_settings_from_module+0x34>)
 8000420:	2208      	movs	r2, #8
 8000422:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 8000424:	2203      	movs	r2, #3
 8000426:	4904      	ldr	r1, [pc, #16]	; (8000438 <read_settings_from_module+0x34>)
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <read_settings_from_module+0x38>)
 800042a:	f004 f852 	bl	80044d2 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 800042e:	2064      	movs	r0, #100	; 0x64
 8000430:	f001 fa2a 	bl	8001888 <HAL_Delay>
	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate

	return true;
 8000434:	bf00      	nop
}
 8000436:	bd80      	pop	{r7, pc}
 8000438:	200000d0 	.word	0x200000d0
 800043c:	200005d4 	.word	0x200005d4

08000440 <set_config_deep_sleep_mode>:
//-------------------------------------------------------------------------------------------------
void set_config_deep_sleep_mode (void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	// Function use for go to deep sleep and configuration mode
	// Set M0 and M1 PINs
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 8000444:	2201      	movs	r2, #1
 8000446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <set_config_deep_sleep_mode+0x20>)
 800044c:	f001 fd99 	bl	8001f82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	4802      	ldr	r0, [pc, #8]	; (8000460 <set_config_deep_sleep_mode+0x20>)
 8000456:	f001 fd94 	bl	8001f82 <HAL_GPIO_WritePin>
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40010c00 	.word	0x40010c00

08000464 <set_WOR_RX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_RX_mode (void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Receiving mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <set_WOR_RX_mode+0x20>)
 8000470:	f001 fd87 	bl	8001f82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2101      	movs	r1, #1
 8000478:	4802      	ldr	r0, [pc, #8]	; (8000484 <set_WOR_RX_mode+0x20>)
 800047a:	f001 fd82 	bl	8001f82 <HAL_GPIO_WritePin>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40010c00 	.word	0x40010c00

08000488 <set_WOR_TX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_TX_mode (void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Transmitting mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <set_WOR_TX_mode+0x20>)
 8000494:	f001 fd75 	bl	8001f82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2101      	movs	r1, #1
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <set_WOR_TX_mode+0x20>)
 800049e:	f001 fd70 	bl	8001f82 <HAL_GPIO_WritePin>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010c00 	.word	0x40010c00

080004ac <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <DelayMicro+0x3c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <DelayMicro+0x3c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <DelayMicro+0x40>)
 80004c0:	fba2 2303 	umull	r2, r3, r2, r3
 80004c4:	0ddb      	lsrs	r3, r3, #23
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	fb02 f303 	mul.w	r3, r2, r3
 80004cc:	607b      	str	r3, [r7, #4]
	while (micros--);
 80004ce:	bf00      	nop
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	1e5a      	subs	r2, r3, #1
 80004d4:	607a      	str	r2, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d1fa      	bne.n	80004d0 <DelayMicro+0x24>
}
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000010 	.word	0x20000010
 80004ec:	ffa71ee7 	.word	0xffa71ee7

080004f0 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af02      	add	r7, sp, #8
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 80004fa:	2300      	movs	r3, #0
 80004fc:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 80004fe:	2200      	movs	r2, #0
 8000500:	2110      	movs	r1, #16
 8000502:	4813      	ldr	r0, [pc, #76]	; (8000550 <NRF24_ReadReg+0x60>)
 8000504:	f001 fd3d 	bl	8001f82 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8000508:	f107 020f 	add.w	r2, r7, #15
 800050c:	1df9      	adds	r1, r7, #7
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2301      	movs	r3, #1
 8000516:	480f      	ldr	r0, [pc, #60]	; (8000554 <NRF24_ReadReg+0x64>)
 8000518:	f003 f8c1 	bl	800369e <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2b07      	cmp	r3, #7
 8000520:	d00c      	beq.n	800053c <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 8000522:	23ff      	movs	r3, #255	; 0xff
 8000524:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8000526:	f107 020f 	add.w	r2, r7, #15
 800052a:	f107 010e 	add.w	r1, r7, #14
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2301      	movs	r3, #1
 8000536:	4807      	ldr	r0, [pc, #28]	; (8000554 <NRF24_ReadReg+0x64>)
 8000538:	f003 f8b1 	bl	800369e <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 800053c:	2201      	movs	r2, #1
 800053e:	2110      	movs	r1, #16
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <NRF24_ReadReg+0x60>)
 8000542:	f001 fd1e 	bl	8001f82 <HAL_GPIO_WritePin>
  return dt;
 8000546:	7bfb      	ldrb	r3, [r7, #15]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40010800 	.word	0x40010800
 8000554:	20000660 	.word	0x20000660

08000558 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	460a      	mov	r2, r1
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	4613      	mov	r3, r2
 8000566:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	f043 0320 	orr.w	r3, r3, #32
 800056e:	b2db      	uxtb	r3, r3
 8000570:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000572:	2200      	movs	r2, #0
 8000574:	2110      	movs	r1, #16
 8000576:	480d      	ldr	r0, [pc, #52]	; (80005ac <NRF24_WriteReg+0x54>)
 8000578:	f001 fd03 	bl	8001f82 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800057c:	1df9      	adds	r1, r7, #7
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	2201      	movs	r2, #1
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <NRF24_WriteReg+0x58>)
 8000586:	f002 fe3d 	bl	8003204 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800058a:	1db9      	adds	r1, r7, #6
 800058c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000590:	2201      	movs	r2, #1
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <NRF24_WriteReg+0x58>)
 8000594:	f002 fe36 	bl	8003204 <HAL_SPI_Transmit>
  CS_OFF;
 8000598:	2201      	movs	r2, #1
 800059a:	2110      	movs	r1, #16
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <NRF24_WriteReg+0x54>)
 800059e:	f001 fcf0 	bl	8001f82 <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40010800 	.word	0x40010800
 80005b0:	20000660 	.word	0x20000660

080005b4 <NRF24_Read_Buf>:
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
  CS_OFF;
}
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 80005c4:	2200      	movs	r2, #0
 80005c6:	2110      	movs	r1, #16
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <NRF24_Read_Buf+0x4c>)
 80005ca:	f001 fcda 	bl	8001f82 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80005ce:	1df9      	adds	r1, r7, #7
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	2201      	movs	r2, #1
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <NRF24_Read_Buf+0x50>)
 80005d8:	f002 fe14 	bl	8003204 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e4:	6839      	ldr	r1, [r7, #0]
 80005e6:	4807      	ldr	r0, [pc, #28]	; (8000604 <NRF24_Read_Buf+0x50>)
 80005e8:	f002 ff48 	bl	800347c <HAL_SPI_Receive>
  CS_OFF;
 80005ec:	2201      	movs	r2, #1
 80005ee:	2110      	movs	r1, #16
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <NRF24_Read_Buf+0x4c>)
 80005f2:	f001 fcc6 	bl	8001f82 <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40010800 	.word	0x40010800
 8000604:	20000660 	.word	0x20000660

08000608 <IRQ_Callback>:
	status = read_config_registers();
	return status;
}
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 800060e:	2301      	movs	r3, #1
 8000610:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 8000612:	2300      	movs	r3, #0
 8000614:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	4814      	ldr	r0, [pc, #80]	; (800066c <IRQ_Callback+0x64>)
 800061c:	f001 fcc9 	bl	8001fb2 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 8000620:	200a      	movs	r0, #10
 8000622:	f7ff ff43 	bl	80004ac <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 8000626:	2007      	movs	r0, #7
 8000628:	f7ff ff62 	bl	80004f0 <NRF24_ReadReg>
 800062c:	4603      	mov	r3, r0
 800062e:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000636:	2b00      	cmp	r3, #0
 8000638:	d013      	beq.n	8000662 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	085b      	lsrs	r3, r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f003 0307 	and.w	r3, r3, #7
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <IRQ_Callback+0x68>)
 8000648:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 800064a:	220a      	movs	r2, #10
 800064c:	4909      	ldr	r1, [pc, #36]	; (8000674 <IRQ_Callback+0x6c>)
 800064e:	2061      	movs	r0, #97	; 0x61
 8000650:	f7ff ffb0 	bl	80005b4 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 8000654:	2140      	movs	r1, #64	; 0x40
 8000656:	2007      	movs	r0, #7
 8000658:	f7ff ff7e 	bl	8000558 <NRF24_WriteReg>
		rx_flag = 1;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <IRQ_Callback+0x70>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
	}
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40011000 	.word	0x40011000
 8000670:	200000e7 	.word	0x200000e7
 8000674:	200000dc 	.word	0x200000dc
 8000678:	200000e6 	.word	0x200000e6

0800067c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af04      	add	r7, sp, #16
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8000686:	230a      	movs	r3, #10
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	2301      	movs	r3, #1
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	2200      	movs	r2, #0
 8000696:	2178      	movs	r1, #120	; 0x78
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <ssd1306_WriteCommand+0x2c>)
 800069a:	f001 fdff 	bl	800229c <HAL_I2C_Mem_Write>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000580 	.word	0x20000580

080006ac <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80006b0:	2064      	movs	r0, #100	; 0x64
 80006b2:	f001 f8e9 	bl	8001888 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80006b6:	20ae      	movs	r0, #174	; 0xae
 80006b8:	f7ff ffe0 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80006bc:	2020      	movs	r0, #32
 80006be:	f7ff ffdd 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80006c2:	2010      	movs	r0, #16
 80006c4:	f7ff ffda 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80006c8:	20b0      	movs	r0, #176	; 0xb0
 80006ca:	f7ff ffd7 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80006ce:	20c8      	movs	r0, #200	; 0xc8
 80006d0:	f7ff ffd4 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff ffd1 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80006da:	2010      	movs	r0, #16
 80006dc:	f7ff ffce 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80006e0:	2040      	movs	r0, #64	; 0x40
 80006e2:	f7ff ffcb 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80006e6:	2081      	movs	r0, #129	; 0x81
 80006e8:	f7ff ffc8 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80006ec:	20ff      	movs	r0, #255	; 0xff
 80006ee:	f7ff ffc5 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80006f2:	20a1      	movs	r0, #161	; 0xa1
 80006f4:	f7ff ffc2 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80006f8:	20a6      	movs	r0, #166	; 0xa6
 80006fa:	f7ff ffbf 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80006fe:	20a8      	movs	r0, #168	; 0xa8
 8000700:	f7ff ffbc 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8000704:	203f      	movs	r0, #63	; 0x3f
 8000706:	f7ff ffb9 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800070a:	20a4      	movs	r0, #164	; 0xa4
 800070c:	f7ff ffb6 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000710:	20d3      	movs	r0, #211	; 0xd3
 8000712:	f7ff ffb3 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff ffb0 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800071c:	20d5      	movs	r0, #213	; 0xd5
 800071e:	f7ff ffad 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000722:	20f0      	movs	r0, #240	; 0xf0
 8000724:	f7ff ffaa 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000728:	20d9      	movs	r0, #217	; 0xd9
 800072a:	f7ff ffa7 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800072e:	2022      	movs	r0, #34	; 0x22
 8000730:	f7ff ffa4 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000734:	20da      	movs	r0, #218	; 0xda
 8000736:	f7ff ffa1 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800073a:	2012      	movs	r0, #18
 800073c:	f7ff ff9e 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000740:	20db      	movs	r0, #219	; 0xdb
 8000742:	f7ff ff9b 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000746:	2020      	movs	r0, #32
 8000748:	f7ff ff98 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800074c:	208d      	movs	r0, #141	; 0x8d
 800074e:	f7ff ff95 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000752:	2014      	movs	r0, #20
 8000754:	f7ff ff92 	bl	800067c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000758:	20af      	movs	r0, #175	; 0xaf
 800075a:	f7ff ff8f 	bl	800067c <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f810 	bl	8000784 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000764:	f000 f830 	bl	80007c8 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <ssd1306_Init+0xd4>)
 800076a:	2200      	movs	r2, #0
 800076c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <ssd1306_Init+0xd4>)
 8000770:	2200      	movs	r2, #0
 8000772:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000774:	4b02      	ldr	r3, [pc, #8]	; (8000780 <ssd1306_Init+0xd4>)
 8000776:	2201      	movs	r2, #1
 8000778:	715a      	strb	r2, [r3, #5]

	return 1;
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200004e8 	.word	0x200004e8

08000784 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	e00d      	b.n	80007b0 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <ssd1306_Fill+0x1a>
 800079a:	2100      	movs	r1, #0
 800079c:	e000      	b.n	80007a0 <ssd1306_Fill+0x1c>
 800079e:	21ff      	movs	r1, #255	; 0xff
 80007a0:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <ssd1306_Fill+0x40>)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	4413      	add	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	3301      	adds	r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007b6:	d3ed      	bcc.n	8000794 <ssd1306_Fill+0x10>
	}
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	200000e8 	.word	0x200000e8

080007c8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 80007ce:	2300      	movs	r3, #0
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	e01d      	b.n	8000810 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	3b50      	subs	r3, #80	; 0x50
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff4e 	bl	800067c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff4b 	bl	800067c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80007e6:	2010      	movs	r0, #16
 80007e8:	f7ff ff48 	bl	800067c <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	01db      	lsls	r3, r3, #7
 80007f0:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <ssd1306_UpdateScreen+0x58>)
 80007f2:	4413      	add	r3, r2
 80007f4:	2264      	movs	r2, #100	; 0x64
 80007f6:	9202      	str	r2, [sp, #8]
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	9201      	str	r2, [sp, #4]
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	2240      	movs	r2, #64	; 0x40
 8000802:	2178      	movs	r1, #120	; 0x78
 8000804:	4807      	ldr	r0, [pc, #28]	; (8000824 <ssd1306_UpdateScreen+0x5c>)
 8000806:	f001 fd49 	bl	800229c <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	3301      	adds	r3, #1
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b07      	cmp	r3, #7
 8000814:	d9de      	bls.n	80007d4 <ssd1306_UpdateScreen+0xc>
	}
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000e8 	.word	0x200000e8
 8000824:	20000580 	.word	0x20000580

08000828 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	460b      	mov	r3, r1
 8000834:	71bb      	strb	r3, [r7, #6]
 8000836:	4613      	mov	r3, r2
 8000838:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	2b00      	cmp	r3, #0
 8000840:	db48      	blt.n	80008d4 <ssd1306_DrawPixel+0xac>
 8000842:	79bb      	ldrb	r3, [r7, #6]
 8000844:	2b3f      	cmp	r3, #63	; 0x3f
 8000846:	d845      	bhi.n	80008d4 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <ssd1306_DrawPixel+0xb8>)
 800084a:	791b      	ldrb	r3, [r3, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d006      	beq.n	800085e <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000850:	797b      	ldrb	r3, [r7, #5]
 8000852:	2b00      	cmp	r3, #0
 8000854:	bf0c      	ite	eq
 8000856:	2301      	moveq	r3, #1
 8000858:	2300      	movne	r3, #0
 800085a:	b2db      	uxtb	r3, r3
 800085c:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 800085e:	797b      	ldrb	r3, [r7, #5]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d11a      	bne.n	800089a <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000864:	79fa      	ldrb	r2, [r7, #7]
 8000866:	79bb      	ldrb	r3, [r7, #6]
 8000868:	08db      	lsrs	r3, r3, #3
 800086a:	b2d8      	uxtb	r0, r3
 800086c:	4603      	mov	r3, r0
 800086e:	01db      	lsls	r3, r3, #7
 8000870:	4413      	add	r3, r2
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <ssd1306_DrawPixel+0xbc>)
 8000874:	5cd3      	ldrb	r3, [r2, r3]
 8000876:	b25a      	sxtb	r2, r3
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	2101      	movs	r1, #1
 8000880:	fa01 f303 	lsl.w	r3, r1, r3
 8000884:	b25b      	sxtb	r3, r3
 8000886:	4313      	orrs	r3, r2
 8000888:	b259      	sxtb	r1, r3
 800088a:	79fa      	ldrb	r2, [r7, #7]
 800088c:	4603      	mov	r3, r0
 800088e:	01db      	lsls	r3, r3, #7
 8000890:	4413      	add	r3, r2
 8000892:	b2c9      	uxtb	r1, r1
 8000894:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <ssd1306_DrawPixel+0xbc>)
 8000896:	54d1      	strb	r1, [r2, r3]
 8000898:	e01d      	b.n	80008d6 <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	08db      	lsrs	r3, r3, #3
 80008a0:	b2d8      	uxtb	r0, r3
 80008a2:	4603      	mov	r3, r0
 80008a4:	01db      	lsls	r3, r3, #7
 80008a6:	4413      	add	r3, r2
 80008a8:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <ssd1306_DrawPixel+0xbc>)
 80008aa:	5cd3      	ldrb	r3, [r2, r3]
 80008ac:	b25a      	sxtb	r2, r3
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	f003 0307 	and.w	r3, r3, #7
 80008b4:	2101      	movs	r1, #1
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	4013      	ands	r3, r2
 80008c2:	b259      	sxtb	r1, r3
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	4603      	mov	r3, r0
 80008c8:	01db      	lsls	r3, r3, #7
 80008ca:	4413      	add	r3, r2
 80008cc:	b2c9      	uxtb	r1, r1
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <ssd1306_DrawPixel+0xbc>)
 80008d0:	54d1      	strb	r1, [r2, r3]
 80008d2:	e000      	b.n	80008d6 <ssd1306_DrawPixel+0xae>
		return;
 80008d4:	bf00      	nop
	}
}
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	200004e8 	.word	0x200004e8
 80008e4:	200000e8 	.word	0x200000e8

080008e8 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4604      	mov	r4, r0
 80008f0:	1d38      	adds	r0, r7, #4
 80008f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80008f6:	461a      	mov	r2, r3
 80008f8:	4623      	mov	r3, r4
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	4613      	mov	r3, r2
 80008fe:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000900:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <ssd1306_WriteChar+0xfc>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	793b      	ldrb	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	2b7f      	cmp	r3, #127	; 0x7f
 800090c:	dc06      	bgt.n	800091c <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800090e:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <ssd1306_WriteChar+0xfc>)
 8000910:	885b      	ldrh	r3, [r3, #2]
 8000912:	461a      	mov	r2, r3
 8000914:	797b      	ldrb	r3, [r7, #5]
 8000916:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000918:	2b3f      	cmp	r3, #63	; 0x3f
 800091a:	dd01      	ble.n	8000920 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 800091c:	2300      	movs	r3, #0
 800091e:	e05d      	b.n	80009dc <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
 8000924:	e04c      	b.n	80009c0 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	3b20      	subs	r3, #32
 800092c:	7979      	ldrb	r1, [r7, #5]
 800092e:	fb01 f303 	mul.w	r3, r1, r3
 8000932:	4619      	mov	r1, r3
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	440b      	add	r3, r1
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	e034      	b.n	80009b0 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d012      	beq.n	800097c <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <ssd1306_WriteChar+0xfc>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4413      	add	r3, r2
 8000962:	b2d8      	uxtb	r0, r3
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <ssd1306_WriteChar+0xfc>)
 8000966:	885b      	ldrh	r3, [r3, #2]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	4413      	add	r3, r2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	7bba      	ldrb	r2, [r7, #14]
 8000974:	4619      	mov	r1, r3
 8000976:	f7ff ff57 	bl	8000828 <ssd1306_DrawPixel>
 800097a:	e016      	b.n	80009aa <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <ssd1306_WriteChar+0xfc>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4413      	add	r3, r2
 8000988:	b2d8      	uxtb	r0, r3
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <ssd1306_WriteChar+0xfc>)
 800098c:	885b      	ldrh	r3, [r3, #2]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4413      	add	r3, r2
 8000996:	b2d9      	uxtb	r1, r3
 8000998:	7bbb      	ldrb	r3, [r7, #14]
 800099a:	2b00      	cmp	r3, #0
 800099c:	bf0c      	ite	eq
 800099e:	2301      	moveq	r3, #1
 80009a0:	2300      	movne	r3, #0
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	f7ff ff3f 	bl	8000828 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	3301      	adds	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	793b      	ldrb	r3, [r7, #4]
 80009b2:	461a      	mov	r2, r3
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d3c5      	bcc.n	8000946 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3301      	adds	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
 80009c0:	797b      	ldrb	r3, [r7, #5]
 80009c2:	461a      	mov	r2, r3
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d3ad      	bcc.n	8000926 <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <ssd1306_WriteChar+0xfc>)
 80009cc:	881a      	ldrh	r2, [r3, #0]
 80009ce:	793b      	ldrb	r3, [r7, #4]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	4413      	add	r3, r2
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <ssd1306_WriteChar+0xfc>)
 80009d8:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 80009da:	7bfb      	ldrb	r3, [r7, #15]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3724      	adds	r7, #36	; 0x24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	200004e8 	.word	0x200004e8

080009e8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	1d38      	adds	r0, r7, #4
 80009f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80009f6:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80009f8:	e012      	b.n	8000a20 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	7818      	ldrb	r0, [r3, #0]
 80009fe:	78fb      	ldrb	r3, [r7, #3]
 8000a00:	1d3a      	adds	r2, r7, #4
 8000a02:	ca06      	ldmia	r2, {r1, r2}
 8000a04:	f7ff ff70 	bl	80008e8 <ssd1306_WriteChar>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d002      	beq.n	8000a1a <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	e008      	b.n	8000a2c <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1e8      	bne.n	80009fa <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	4613      	mov	r3, r2
 8000a42:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <ssd1306_SetCursor+0x2c>)
 8000a4a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <ssd1306_SetCursor+0x2c>)
 8000a52:	805a      	strh	r2, [r3, #2]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	200004e8 	.word	0x200004e8

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b092      	sub	sp, #72	; 0x48
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6a:	f000 feab 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6e:	f000 f93d 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a72:	f000 fa89 	bl	8000f88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a76:	f000 f97f 	bl	8000d78 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a7a:	f000 f9ab 	bl	8000dd4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a7e:	f000 fa2f 	bl	8000ee0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000a82:	f000 f9dd 	bl	8000e40 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000a86:	f000 fa55 	bl	8000f34 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a90:	4889      	ldr	r0, [pc, #548]	; (8000cb8 <main+0x254>)
 8000a92:	f001 fa76 	bl	8001f82 <HAL_GPIO_WritePin>

  // Init interrupp
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2025      	movs	r0, #37	; 0x25
 8000a9c:	f000 ffef 	bl	8001a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aa0:	2025      	movs	r0, #37	; 0x25
 8000aa2:	f001 f808 	bl	8001ab6 <HAL_NVIC_EnableIRQ>


  // OLED init
  ssd1306_Init();
 8000aa6:	f7ff fe01 	bl	80006ac <ssd1306_Init>
  ssd1306_Fill(Black);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fe6a 	bl	8000784 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000ab0:	f7ff fe8a 	bl	80007c8 <ssd1306_UpdateScreen>
	  nrf_communication_test();      // Main function LORA
	#endif

	#if lora_on_off

	uint8_t rx_or_rx = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if(rx_or_rx == 1)				// RX mode
 8000aba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	f040 808c 	bne.w	8000bdc <main+0x178>
	{
		ssd1306_SetCursor(0, 0);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff ffb4 	bl	8000a34 <ssd1306_SetCursor>
		char test_main[50] = {0};
 8000acc:	2300      	movs	r3, #0
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	222e      	movs	r2, #46	; 0x2e
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f004 f986 	bl	8004de8 <memset>
		strcpy(test_main, "LoRa RX");
 8000adc:	463b      	mov	r3, r7
 8000ade:	4a77      	ldr	r2, [pc, #476]	; (8000cbc <main+0x258>)
 8000ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae4:	e883 0003 	stmia.w	r3, {r0, r1}
		ssd1306_WriteString(test_main,  Font_7x10, White);
 8000ae8:	4a75      	ldr	r2, [pc, #468]	; (8000cc0 <main+0x25c>)
 8000aea:	4638      	mov	r0, r7
 8000aec:	2301      	movs	r3, #1
 8000aee:	ca06      	ldmia	r2, {r1, r2}
 8000af0:	f7ff ff7a 	bl	80009e8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000af4:	f7ff fe68 	bl	80007c8 <ssd1306_UpdateScreen>
		// state_machine
		HAL_Delay(1000);
 8000af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afc:	f000 fec4 	bl	8001888 <HAL_Delay>
		init_lora_RX();
 8000b00:	f7ff fc38 	bl	8000374 <init_lora_RX>
		HAL_Delay(1000);
 8000b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b08:	f000 febe 	bl	8001888 <HAL_Delay>

		ssd1306_SetCursor(65, 0);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2041      	movs	r0, #65	; 0x41
 8000b10:	f7ff ff90 	bl	8000a34 <ssd1306_SetCursor>
		strcpy(test_main, "Ready");
 8000b14:	463b      	mov	r3, r7
 8000b16:	4a6b      	ldr	r2, [pc, #428]	; (8000cc4 <main+0x260>)
 8000b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b1c:	6018      	str	r0, [r3, #0]
 8000b1e:	3304      	adds	r3, #4
 8000b20:	8019      	strh	r1, [r3, #0]
		ssd1306_WriteString(test_main,  Font_7x10, White);
 8000b22:	4a67      	ldr	r2, [pc, #412]	; (8000cc0 <main+0x25c>)
 8000b24:	4638      	mov	r0, r7
 8000b26:	2301      	movs	r3, #1
 8000b28:	ca06      	ldmia	r2, {r1, r2}
 8000b2a:	f7ff ff5d 	bl	80009e8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000b2e:	f7ff fe4b 	bl	80007c8 <ssd1306_UpdateScreen>

		ssd1306_SetCursor(0, 16);
 8000b32:	2110      	movs	r1, #16
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff ff7d 	bl	8000a34 <ssd1306_SetCursor>
		strcpy(test_main, "RX data: ");
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4a62      	ldr	r2, [pc, #392]	; (8000cc8 <main+0x264>)
 8000b3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b40:	c303      	stmia	r3!, {r0, r1}
 8000b42:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(test_main,  Font_7x10, White);
 8000b44:	4a5e      	ldr	r2, [pc, #376]	; (8000cc0 <main+0x25c>)
 8000b46:	4638      	mov	r0, r7
 8000b48:	2301      	movs	r3, #1
 8000b4a:	ca06      	ldmia	r2, {r1, r2}
 8000b4c:	f7ff ff4c 	bl	80009e8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000b50:	f7ff fe3a 	bl	80007c8 <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	495d      	ldr	r1, [pc, #372]	; (8000ccc <main+0x268>)
 8000b58:	485d      	ldr	r0, [pc, #372]	; (8000cd0 <main+0x26c>)
 8000b5a:	f003 fcfe 	bl	800455a <HAL_UART_Receive_IT>
		memset(test_main, 0, sizeof(test_main));
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2232      	movs	r2, #50	; 0x32
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f004 f93f 	bl	8004de8 <memset>

		while(1)
		{
			if(flag_command_received == true)			// If data is ready
 8000b6a:	4b5a      	ldr	r3, [pc, #360]	; (8000cd4 <main+0x270>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0fb      	beq.n	8000b6a <main+0x106>
			{
				// Data received

				//   Print on OLED
				char clearn_array[10] = "         ";
 8000b72:	4a59      	ldr	r2, [pc, #356]	; (8000cd8 <main+0x274>)
 8000b74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b7a:	c303      	stmia	r3!, {r0, r1}
 8000b7c:	801a      	strh	r2, [r3, #0]
				ssd1306_SetCursor(60, 16);
 8000b7e:	2110      	movs	r1, #16
 8000b80:	203c      	movs	r0, #60	; 0x3c
 8000b82:	f7ff ff57 	bl	8000a34 <ssd1306_SetCursor>

				ssd1306_WriteString(clearn_array,  Font_7x10, White);
 8000b86:	4a4e      	ldr	r2, [pc, #312]	; (8000cc0 <main+0x25c>)
 8000b88:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	ca06      	ldmia	r2, {r1, r2}
 8000b90:	f7ff ff2a 	bl	80009e8 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8000b94:	f7ff fe18 	bl	80007c8 <ssd1306_UpdateScreen>

				ssd1306_SetCursor(60, 16);
 8000b98:	2110      	movs	r1, #16
 8000b9a:	203c      	movs	r0, #60	; 0x3c
 8000b9c:	f7ff ff4a 	bl	8000a34 <ssd1306_SetCursor>
				strcpy(test_main, uart_rx_data);
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	494e      	ldr	r1, [pc, #312]	; (8000cdc <main+0x278>)
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 f9fd 	bl	8004fa4 <strcpy>

				ssd1306_WriteString(test_main,  Font_7x10, White);
 8000baa:	4a45      	ldr	r2, [pc, #276]	; (8000cc0 <main+0x25c>)
 8000bac:	4638      	mov	r0, r7
 8000bae:	2301      	movs	r3, #1
 8000bb0:	ca06      	ldmia	r2, {r1, r2}
 8000bb2:	f7ff ff19 	bl	80009e8 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8000bb6:	f7ff fe07 	bl	80007c8 <ssd1306_UpdateScreen>

				HAL_Delay(100);
 8000bba:	2064      	movs	r0, #100	; 0x64
 8000bbc:	f000 fe64 	bl	8001888 <HAL_Delay>
				memset(uart_rx_data, 0, sizeof(uart_rx_data));
 8000bc0:	2232      	movs	r2, #50	; 0x32
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4845      	ldr	r0, [pc, #276]	; (8000cdc <main+0x278>)
 8000bc6:	f004 f90f 	bl	8004de8 <memset>
				flag_command_received = false;
 8000bca:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <main+0x270>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]

				HAL_UART_Receive_IT(&huart1, str, 1);		// Start interrupt again
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	493e      	ldr	r1, [pc, #248]	; (8000ccc <main+0x268>)
 8000bd4:	483e      	ldr	r0, [pc, #248]	; (8000cd0 <main+0x26c>)
 8000bd6:	f003 fcc0 	bl	800455a <HAL_UART_Receive_IT>
			if(flag_command_received == true)			// If data is ready
 8000bda:	e7c6      	b.n	8000b6a <main+0x106>
			}
		}

		 }
		 if(rx_or_rx == 0)		// TX mode
 8000bdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f47f af67 	bne.w	8000ab4 <main+0x50>
		 {
			 ssd1306_SetCursor(0, 0);
 8000be6:	2100      	movs	r1, #0
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff ff23 	bl	8000a34 <ssd1306_SetCursor>
			 char test_main[50] = {0};
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	222e      	movs	r2, #46	; 0x2e
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f004 f8f5 	bl	8004de8 <memset>
			 strcpy(test_main, "LoRa TX:");
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4a37      	ldr	r2, [pc, #220]	; (8000ce0 <main+0x27c>)
 8000c02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c04:	c303      	stmia	r3!, {r0, r1}
 8000c06:	701a      	strb	r2, [r3, #0]
			 ssd1306_WriteString(test_main,  Font_7x10, White);
 8000c08:	4a2d      	ldr	r2, [pc, #180]	; (8000cc0 <main+0x25c>)
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	ca06      	ldmia	r2, {r1, r2}
 8000c10:	f7ff feea 	bl	80009e8 <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 8000c14:	f7ff fdd8 	bl	80007c8 <ssd1306_UpdateScreen>

			 HAL_Delay(1000);
 8000c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c1c:	f000 fe34 	bl	8001888 <HAL_Delay>
			 init_lora_TX();
 8000c20:	f7ff fb60 	bl	80002e4 <init_lora_TX>

			 ssd1306_SetCursor(65, 0);
 8000c24:	2100      	movs	r1, #0
 8000c26:	2041      	movs	r0, #65	; 0x41
 8000c28:	f7ff ff04 	bl	8000a34 <ssd1306_SetCursor>
			 strcpy(test_main, "Ready");
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	4a25      	ldr	r2, [pc, #148]	; (8000cc4 <main+0x260>)
 8000c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c34:	6018      	str	r0, [r3, #0]
 8000c36:	3304      	adds	r3, #4
 8000c38:	8019      	strh	r1, [r3, #0]
			 ssd1306_WriteString(test_main,  Font_7x10, White);
 8000c3a:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <main+0x25c>)
 8000c3c:	4638      	mov	r0, r7
 8000c3e:	2301      	movs	r3, #1
 8000c40:	ca06      	ldmia	r2, {r1, r2}
 8000c42:	f7ff fed1 	bl	80009e8 <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 8000c46:	f7ff fdbf 	bl	80007c8 <ssd1306_UpdateScreen>

			 ssd1306_SetCursor(0, 16);
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fef1 	bl	8000a34 <ssd1306_SetCursor>
			 strcpy(test_main, "TX data: ");
 8000c52:	463b      	mov	r3, r7
 8000c54:	4a23      	ldr	r2, [pc, #140]	; (8000ce4 <main+0x280>)
 8000c56:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c58:	c303      	stmia	r3!, {r0, r1}
 8000c5a:	801a      	strh	r2, [r3, #0]
			 ssd1306_WriteString(test_main,  Font_7x10, White);
 8000c5c:	4a18      	ldr	r2, [pc, #96]	; (8000cc0 <main+0x25c>)
 8000c5e:	4638      	mov	r0, r7
 8000c60:	2301      	movs	r3, #1
 8000c62:	ca06      	ldmia	r2, {r1, r2}
 8000c64:	f7ff fec0 	bl	80009e8 <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 8000c68:	f7ff fdae 	bl	80007c8 <ssd1306_UpdateScreen>

			 HAL_UART_Receive_IT(&huart1, str, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4917      	ldr	r1, [pc, #92]	; (8000ccc <main+0x268>)
 8000c70:	4817      	ldr	r0, [pc, #92]	; (8000cd0 <main+0x26c>)
 8000c72:	f003 fc72 	bl	800455a <HAL_UART_Receive_IT>

			 while(1)
			 {
				 int count = lora_transmit_data();
 8000c76:	f7ff fa69 	bl	800014c <lora_transmit_data>
 8000c7a:	6438      	str	r0, [r7, #64]	; 0x40
				 // Print transmeeting data
				 memset(test_main, 0, sizeof(test_main));
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2232      	movs	r2, #50	; 0x32
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f004 f8b0 	bl	8004de8 <memset>
				 ssd1306_SetCursor(60, 16);
 8000c88:	2110      	movs	r1, #16
 8000c8a:	203c      	movs	r0, #60	; 0x3c
 8000c8c:	f7ff fed2 	bl	8000a34 <ssd1306_SetCursor>
				 sprintf(test_main, "%d", count);
 8000c90:	463b      	mov	r3, r7
 8000c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c94:	4914      	ldr	r1, [pc, #80]	; (8000ce8 <main+0x284>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f004 f964 	bl	8004f64 <siprintf>
				 ssd1306_WriteString(test_main,  Font_7x10, White);
 8000c9c:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <main+0x25c>)
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	ca06      	ldmia	r2, {r1, r2}
 8000ca4:	f7ff fea0 	bl	80009e8 <ssd1306_WriteString>
				 ssd1306_UpdateScreen();
 8000ca8:	f7ff fd8e 	bl	80007c8 <ssd1306_UpdateScreen>

				 HAL_Delay(2000);			// Must be more than 1.5 sec
 8000cac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cb0:	f000 fdea 	bl	8001888 <HAL_Delay>
			 {
 8000cb4:	e7df      	b.n	8000c76 <main+0x212>
 8000cb6:	bf00      	nop
 8000cb8:	40011000 	.word	0x40011000
 8000cbc:	08005678 	.word	0x08005678
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	08005680 	.word	0x08005680
 8000cc8:	08005688 	.word	0x08005688
 8000ccc:	20000524 	.word	0x20000524
 8000cd0:	200005d4 	.word	0x200005d4
 8000cd4:	20000525 	.word	0x20000525
 8000cd8:	080056b0 	.word	0x080056b0
 8000cdc:	200004f0 	.word	0x200004f0
 8000ce0:	08005694 	.word	0x08005694
 8000ce4:	080056a0 	.word	0x080056a0
 8000ce8:	080056ac 	.word	0x080056ac

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b090      	sub	sp, #64	; 0x40
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 0318 	add.w	r3, r7, #24
 8000cf6:	2228      	movs	r2, #40	; 0x28
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 f874 	bl	8004de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d20:	2302      	movs	r3, #2
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000d2a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d30:	f107 0318 	add.w	r3, r7, #24
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 fdc7 	bl	80028c8 <HAL_RCC_OscConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d40:	f000 fa40 	bl	80011c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d44:	230f      	movs	r3, #15
 8000d46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 f832 	bl	8002dc8 <HAL_RCC_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d6a:	f000 fa2b 	bl	80011c4 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3740      	adds	r7, #64	; 0x40
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000d7e:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <MX_I2C1_Init+0x54>)
 8000d80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000d84:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <MX_I2C1_Init+0x58>)
 8000d86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000db6:	f001 f92d 	bl	8002014 <HAL_I2C_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dc0:	f000 fa00 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000580 	.word	0x20000580
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	00061a80 	.word	0x00061a80

08000dd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000dda:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <MX_SPI1_Init+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000de0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000de4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e08:	2220      	movs	r2, #32
 8000e0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e20:	220a      	movs	r2, #10
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e26:	f002 f969 	bl	80030fc <HAL_SPI_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e30:	f000 f9c8 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000660 	.word	0x20000660
 8000e3c:	40013000 	.word	0x40013000

08000e40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_TIM1_Init+0x98>)
 8000e5e:	4a1f      	ldr	r2, [pc, #124]	; (8000edc <MX_TIM1_Init+0x9c>)
 8000e60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <MX_TIM1_Init+0x98>)
 8000e64:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000e68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_TIM1_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_TIM1_Init+0x98>)
 8000e72:	2264      	movs	r2, #100	; 0x64
 8000e74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_TIM1_Init+0x98>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_TIM1_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_TIM1_Init+0x98>)
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e88:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <MX_TIM1_Init+0x98>)
 8000e8a:	f002 fea3 	bl	8003bd4 <HAL_TIM_Base_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e94:	f000 f996 	bl	80011c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_TIM1_Init+0x98>)
 8000ea6:	f003 f86d 	bl	8003f84 <HAL_TIM_ConfigClockSource>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000eb0:	f000 f988 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_TIM1_Init+0x98>)
 8000ec2:	f003 fa49 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ecc:	f000 f97a 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000618 	.word	0x20000618
 8000edc:	40012c00 	.word	0x40012c00

08000ee0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <MX_USART1_UART_Init+0x50>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000eec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f18:	f003 fa8e 	bl	8004438 <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f22:	f000 f94f 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200005d4 	.word	0x200005d4
 8000f30:	40013800 	.word	0x40013800

08000f34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <MX_USART3_UART_Init+0x50>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_USART3_UART_Init+0x4c>)
 8000f6c:	f003 fa64 	bl	8004438 <HAL_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f76:	f000 f925 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000053c 	.word	0x2000053c
 8000f84:	40004800 	.word	0x40004800

08000f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	4b5f      	ldr	r3, [pc, #380]	; (800111c <MX_GPIO_Init+0x194>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a5e      	ldr	r2, [pc, #376]	; (800111c <MX_GPIO_Init+0x194>)
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b5c      	ldr	r3, [pc, #368]	; (800111c <MX_GPIO_Init+0x194>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0310 	and.w	r3, r3, #16
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb4:	4b59      	ldr	r3, [pc, #356]	; (800111c <MX_GPIO_Init+0x194>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a58      	ldr	r2, [pc, #352]	; (800111c <MX_GPIO_Init+0x194>)
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b56      	ldr	r3, [pc, #344]	; (800111c <MX_GPIO_Init+0x194>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0320 	and.w	r3, r3, #32
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b53      	ldr	r3, [pc, #332]	; (800111c <MX_GPIO_Init+0x194>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a52      	ldr	r2, [pc, #328]	; (800111c <MX_GPIO_Init+0x194>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b50      	ldr	r3, [pc, #320]	; (800111c <MX_GPIO_Init+0x194>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b4d      	ldr	r3, [pc, #308]	; (800111c <MX_GPIO_Init+0x194>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	; (800111c <MX_GPIO_Init+0x194>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	; (800111c <MX_GPIO_Init+0x194>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001002:	4847      	ldr	r0, [pc, #284]	; (8001120 <MX_GPIO_Init+0x198>)
 8001004:	f000 ffbd 	bl	8001f82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2108      	movs	r1, #8
 800100c:	4845      	ldr	r0, [pc, #276]	; (8001124 <MX_GPIO_Init+0x19c>)
 800100e:	f000 ffb8 	bl	8001f82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2110      	movs	r1, #16
 8001016:	4843      	ldr	r0, [pc, #268]	; (8001124 <MX_GPIO_Init+0x19c>)
 8001018:	f000 ffb3 	bl	8001f82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f242 0101 	movw	r1, #8193	; 0x2001
 8001022:	4841      	ldr	r0, [pc, #260]	; (8001128 <MX_GPIO_Init+0x1a0>)
 8001024:	f000 ffad 	bl	8001f82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2302      	movs	r3, #2
 8001038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4619      	mov	r1, r3
 8001040:	4837      	ldr	r0, [pc, #220]	; (8001120 <MX_GPIO_Init+0x198>)
 8001042:	f000 fe03 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001046:	2304      	movs	r3, #4
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <MX_GPIO_Init+0x1a4>)
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4619      	mov	r1, r3
 8001058:	4832      	ldr	r0, [pc, #200]	; (8001124 <MX_GPIO_Init+0x19c>)
 800105a:	f000 fdf7 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800105e:	2318      	movs	r3, #24
 8001060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	4619      	mov	r1, r3
 8001074:	482b      	ldr	r0, [pc, #172]	; (8001124 <MX_GPIO_Init+0x19c>)
 8001076:	f000 fde9 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 800107a:	f242 0301 	movw	r3, #8193	; 0x2001
 800107e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2302      	movs	r3, #2
 800108a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4619      	mov	r1, r3
 8001092:	4825      	ldr	r0, [pc, #148]	; (8001128 <MX_GPIO_Init+0x1a0>)
 8001094:	f000 fdda 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8001098:	2302      	movs	r3, #2
 800109a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4619      	mov	r1, r3
 80010aa:	481f      	ldr	r0, [pc, #124]	; (8001128 <MX_GPIO_Init+0x1a0>)
 80010ac:	f000 fdce 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_GPIO_Init+0x1a4>)
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4619      	mov	r1, r3
 80010c4:	4818      	ldr	r0, [pc, #96]	; (8001128 <MX_GPIO_Init+0x1a0>)
 80010c6:	f000 fdc1 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_GPIO_Init+0x1a4>)
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	4811      	ldr	r0, [pc, #68]	; (8001124 <MX_GPIO_Init+0x19c>)
 80010e0:	f000 fdb4 	bl	8001c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2008      	movs	r0, #8
 80010ea:	f000 fcc8 	bl	8001a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010ee:	2008      	movs	r0, #8
 80010f0:	f000 fce1 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2017      	movs	r0, #23
 80010fa:	f000 fcc0 	bl	8001a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010fe:	2017      	movs	r0, #23
 8001100:	f000 fcd9 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2028      	movs	r0, #40	; 0x28
 800110a:	f000 fcb8 	bl	8001a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800110e:	2028      	movs	r0, #40	; 0x28
 8001110:	f000 fcd1 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	40011000 	.word	0x40011000
 8001124:	40010800 	.word	0x40010800
 8001128:	40010c00 	.word	0x40010c00
 800112c:	10210000 	.word	0x10210000

08001130 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d102      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x16>
  {
    IRQ_Callback();					// Call Callback
 8001140:	f7ff fa62 	bl	8000608 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8001144:	e000      	b.n	8001148 <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8001146:	bf00      	nop
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_UART_RxCpltCallback>:

//----------------------------------------------------------------------------------------
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <HAL_UART_RxCpltCallback+0x60>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d123      	bne.n	80011a8 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <HAL_UART_RxCpltCallback+0x64>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_UART_RxCpltCallback+0x20>
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_UART_RxCpltCallback+0x68>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b31      	cmp	r3, #49	; 0x31
 800116e:	d906      	bls.n	800117e <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_UART_RxCpltCallback+0x6c>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <HAL_UART_RxCpltCallback+0x68>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 800117c:	e014      	b.n	80011a8 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_UART_RxCpltCallback+0x6c>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_UART_RxCpltCallback+0x68>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_UART_RxCpltCallback+0x64>)
 800118c:	7819      	ldrb	r1, [r3, #0]
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_UART_RxCpltCallback+0x70>)
 8001190:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8001192:	2201      	movs	r2, #1
 8001194:	4907      	ldr	r1, [pc, #28]	; (80011b4 <HAL_UART_RxCpltCallback+0x64>)
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <HAL_UART_RxCpltCallback+0x60>)
 8001198:	f003 f9df 	bl	800455a <HAL_UART_Receive_IT>
			rx_data_counter ++;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_UART_RxCpltCallback+0x68>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <HAL_UART_RxCpltCallback+0x68>)
 80011a6:	701a      	strb	r2, [r3, #0]
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200005d4 	.word	0x200005d4
 80011b4:	20000524 	.word	0x20000524
 80011b8:	20000526 	.word	0x20000526
 80011bc:	20000525 	.word	0x20000525
 80011c0:	200004f0 	.word	0x200004f0

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	e7fe      	b.n	80011cc <Error_Handler+0x8>
	...

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_MspInit+0x5c>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_MspInit+0x5c>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6193      	str	r3, [r2, #24]
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_MspInit+0x5c>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_MspInit+0x5c>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_MspInit+0x5c>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_MspInit+0x5c>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_MspInit+0x60>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_MspInit+0x60>)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000

08001234 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <HAL_I2C_MspInit+0x70>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d123      	bne.n	800129c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_I2C_MspInit+0x74>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <HAL_I2C_MspInit+0x74>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_I2C_MspInit+0x74>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800126c:	23c0      	movs	r3, #192	; 0xc0
 800126e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001270:	2312      	movs	r3, #18
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4619      	mov	r1, r3
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <HAL_I2C_MspInit+0x78>)
 8001280:	f000 fce4 	bl	8001c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_I2C_MspInit+0x74>)
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_I2C_MspInit+0x74>)
 800128a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128e:	61d3      	str	r3, [r2, #28]
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_I2C_MspInit+0x74>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40005400 	.word	0x40005400
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010c00 	.word	0x40010c00

080012b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <HAL_SPI_MspInit+0x88>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d12f      	bne.n	8001330 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <HAL_SPI_MspInit+0x8c>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a19      	ldr	r2, [pc, #100]	; (800133c <HAL_SPI_MspInit+0x8c>)
 80012d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_SPI_MspInit+0x8c>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_SPI_MspInit+0x8c>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a13      	ldr	r2, [pc, #76]	; (800133c <HAL_SPI_MspInit+0x8c>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_SPI_MspInit+0x8c>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001300:	23a0      	movs	r3, #160	; 0xa0
 8001302:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_SPI_MspInit+0x90>)
 8001314:	f000 fc9a 	bl	8001c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001318:	2340      	movs	r3, #64	; 0x40
 800131a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_SPI_MspInit+0x90>)
 800132c:	f000 fc8e 	bl	8001c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40013000 	.word	0x40013000
 800133c:	40021000 	.word	0x40021000
 8001340:	40010800 	.word	0x40010800

08001344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <HAL_TIM_Base_MspInit+0x44>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d113      	bne.n	800137e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_TIM_Base_MspInit+0x48>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a0c      	ldr	r2, [pc, #48]	; (800138c <HAL_TIM_Base_MspInit+0x48>)
 800135c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_TIM_Base_MspInit+0x48>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2019      	movs	r0, #25
 8001374:	f000 fb83 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001378:	2019      	movs	r0, #25
 800137a:	f000 fb9c 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40012c00 	.word	0x40012c00
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0318 	add.w	r3, r7, #24
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a3c      	ldr	r2, [pc, #240]	; (800149c <HAL_UART_MspInit+0x10c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d13a      	bne.n	8001426 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013b0:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <HAL_UART_MspInit+0x110>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a3a      	ldr	r2, [pc, #232]	; (80014a0 <HAL_UART_MspInit+0x110>)
 80013b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <HAL_UART_MspInit+0x110>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <HAL_UART_MspInit+0x110>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a34      	ldr	r2, [pc, #208]	; (80014a0 <HAL_UART_MspInit+0x110>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <HAL_UART_MspInit+0x110>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0318 	add.w	r3, r7, #24
 80013f2:	4619      	mov	r1, r3
 80013f4:	482b      	ldr	r0, [pc, #172]	; (80014a4 <HAL_UART_MspInit+0x114>)
 80013f6:	f000 fc29 	bl	8001c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0318 	add.w	r3, r7, #24
 800140c:	4619      	mov	r1, r3
 800140e:	4825      	ldr	r0, [pc, #148]	; (80014a4 <HAL_UART_MspInit+0x114>)
 8001410:	f000 fc1c 	bl	8001c4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2101      	movs	r1, #1
 8001418:	2025      	movs	r0, #37	; 0x25
 800141a:	f000 fb30 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800141e:	2025      	movs	r0, #37	; 0x25
 8001420:	f000 fb49 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001424:	e036      	b.n	8001494 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <HAL_UART_MspInit+0x118>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d131      	bne.n	8001494 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_UART_MspInit+0x110>)
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <HAL_UART_MspInit+0x110>)
 8001436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800143a:	61d3      	str	r3, [r2, #28]
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_UART_MspInit+0x110>)
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_UART_MspInit+0x110>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <HAL_UART_MspInit+0x110>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_UART_MspInit+0x110>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0318 	add.w	r3, r7, #24
 8001472:	4619      	mov	r1, r3
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <HAL_UART_MspInit+0x11c>)
 8001476:	f000 fbe9 	bl	8001c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800147a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	4619      	mov	r1, r3
 800148e:	4807      	ldr	r0, [pc, #28]	; (80014ac <HAL_UART_MspInit+0x11c>)
 8001490:	f000 fbdc 	bl	8001c4c <HAL_GPIO_Init>
}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40013800 	.word	0x40013800
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40004800 	.word	0x40004800
 80014ac:	40010c00 	.word	0x40010c00

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr

080014f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f6:	f000 f9ab 	bl	8001850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}

080014fe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001502:	2004      	movs	r0, #4
 8001504:	f000 fd6e 	bl	8001fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <EXTI9_5_IRQHandler+0x44>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f083 0301 	eor.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d012      	beq.n	8001544 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <EXTI9_5_IRQHandler+0x48>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00c      	beq.n	8001544 <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <EXTI9_5_IRQHandler+0x4c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <EXTI9_5_IRQHandler+0x50>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d105      	bne.n	8001544 <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <EXTI9_5_IRQHandler+0x54>)
 800153a:	f002 fb9b 	bl	8003c74 <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <EXTI9_5_IRQHandler+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001544:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001548:	f000 fd4c 	bl	8001fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000530 	.word	0x20000530
 8001554:	40010400 	.word	0x40010400
 8001558:	20000008 	.word	0x20000008
 800155c:	2000000c 	.word	0x2000000c
 8001560:	20000618 	.word	0x20000618

08001564 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8001568:	4b37      	ldr	r3, [pc, #220]	; (8001648 <TIM1_UP_IRQHandler+0xe4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d165      	bne.n	800163c <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 8001570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001574:	4835      	ldr	r0, [pc, #212]	; (800164c <TIM1_UP_IRQHandler+0xe8>)
 8001576:	f000 fced 	bl	8001f54 <HAL_GPIO_ReadPin>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d118      	bne.n	80015b2 <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 8001580:	4b33      	ldr	r3, [pc, #204]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	4a32      	ldr	r2, [pc, #200]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 8001588:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 800158a:	4b32      	ldr	r3, [pc, #200]	; (8001654 <TIM1_UP_IRQHandler+0xf0>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	dc51      	bgt.n	800163c <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <TIM1_UP_IRQHandler+0xe4>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800159e:	482e      	ldr	r0, [pc, #184]	; (8001658 <TIM1_UP_IRQHandler+0xf4>)
 80015a0:	f002 fbba 	bl	8003d18 <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <TIM1_UP_IRQHandler+0xf8>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e044      	b.n	800163c <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 80015b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b6:	482a      	ldr	r0, [pc, #168]	; (8001660 <TIM1_UP_IRQHandler+0xfc>)
 80015b8:	f000 fccc 	bl	8001f54 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d118      	bne.n	80015f4 <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a21      	ldr	r2, [pc, #132]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 80015ca:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <TIM1_UP_IRQHandler+0xf0>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dc30      	bgt.n	800163c <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <TIM1_UP_IRQHandler+0xe4>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80015e0:	481d      	ldr	r0, [pc, #116]	; (8001658 <TIM1_UP_IRQHandler+0xf4>)
 80015e2:	f002 fb99 	bl	8003d18 <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <TIM1_UP_IRQHandler+0xf8>)
 80015e8:	2203      	movs	r2, #3
 80015ea:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e023      	b.n	800163c <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 80015f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f8:	4814      	ldr	r0, [pc, #80]	; (800164c <TIM1_UP_IRQHandler+0xe8>)
 80015fa:	f000 fcab 	bl	8001f54 <HAL_GPIO_ReadPin>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d118      	bne.n	8001636 <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	4a11      	ldr	r2, [pc, #68]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 800160c:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <TIM1_UP_IRQHandler+0xf0>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	dc0f      	bgt.n	800163c <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <TIM1_UP_IRQHandler+0xe4>)
 800161e:	2201      	movs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <TIM1_UP_IRQHandler+0xf8>)
 8001624:	2202      	movs	r2, #2
 8001626:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800162e:	480a      	ldr	r0, [pc, #40]	; (8001658 <TIM1_UP_IRQHandler+0xf4>)
 8001630:	f002 fb72 	bl	8003d18 <HAL_TIM_Base_Stop_IT>
 8001634:	e002      	b.n	800163c <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <TIM1_UP_IRQHandler+0xec>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800163c:	4806      	ldr	r0, [pc, #24]	; (8001658 <TIM1_UP_IRQHandler+0xf4>)
 800163e:	f002 fb99 	bl	8003d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000000c 	.word	0x2000000c
 800164c:	40010c00 	.word	0x40010c00
 8001650:	20000528 	.word	0x20000528
 8001654:	20000009 	.word	0x20000009
 8001658:	20000618 	.word	0x20000618
 800165c:	20000531 	.word	0x20000531
 8001660:	40010800 	.word	0x40010800

08001664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <USART1_IRQHandler+0x10>)
 800166a:	f002 ffa7 	bl	80045bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200005d4 	.word	0x200005d4

08001678 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <EXTI15_10_IRQHandler+0x74>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	f083 0301 	eor.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d012      	beq.n	80016b0 <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <EXTI15_10_IRQHandler+0x78>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00c      	beq.n	80016b0 <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <EXTI15_10_IRQHandler+0x7c>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <EXTI15_10_IRQHandler+0x80>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d105      	bne.n	80016b0 <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 80016a4:	4815      	ldr	r0, [pc, #84]	; (80016fc <EXTI15_10_IRQHandler+0x84>)
 80016a6:	f002 fae5 	bl	8003c74 <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <EXTI15_10_IRQHandler+0x80>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <EXTI15_10_IRQHandler+0x78>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00c      	beq.n	80016d6 <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <EXTI15_10_IRQHandler+0x7c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <EXTI15_10_IRQHandler+0x80>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d105      	bne.n	80016d6 <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 80016ca:	480c      	ldr	r0, [pc, #48]	; (80016fc <EXTI15_10_IRQHandler+0x84>)
 80016cc:	f002 fad2 	bl	8003c74 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <EXTI15_10_IRQHandler+0x80>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80016d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016da:	f000 fc83 	bl	8001fe4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80016de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016e2:	f000 fc7f 	bl	8001fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000530 	.word	0x20000530
 80016f0:	40010400 	.word	0x40010400
 80016f4:	20000008 	.word	0x20000008
 80016f8:	2000000c 	.word	0x2000000c
 80016fc:	20000618 	.word	0x20000618

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f003 fb22 	bl	8004d78 <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20005000 	.word	0x20005000
 8001760:	00000400 	.word	0x00000400
 8001764:	2000052c 	.word	0x2000052c
 8001768:	200006d0 	.word	0x200006d0

0800176c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800177a:	490d      	ldr	r1, [pc, #52]	; (80017b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001790:	4c0a      	ldr	r4, [pc, #40]	; (80017bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800179e:	f7ff ffe5 	bl	800176c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a2:	f003 faef 	bl	8004d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017a6:	f7ff f95d 	bl	8000a64 <main>
  bx lr
 80017aa:	4770      	bx	lr
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80017b4:	08005e8c 	.word	0x08005e8c
  ldr r2, =_sbss
 80017b8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80017bc:	200006cc 	.word	0x200006cc

080017c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC1_2_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_Init+0x28>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_Init+0x28>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 f947 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017da:	2000      	movs	r0, #0
 80017dc:	f000 f808 	bl	80017f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e0:	f7ff fcf6 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40022000 	.word	0x40022000

080017f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_InitTick+0x54>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_InitTick+0x58>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001806:	fbb3 f3f1 	udiv	r3, r3, r1
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f95f 	bl	8001ad2 <HAL_SYSTICK_Config>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e00e      	b.n	800183c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b0f      	cmp	r3, #15
 8001822:	d80a      	bhi.n	800183a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001824:	2200      	movs	r2, #0
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800182c:	f000 f927 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001830:	4a06      	ldr	r2, [pc, #24]	; (800184c <HAL_InitTick+0x5c>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e000      	b.n	800183c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000010 	.word	0x20000010
 8001848:	20000018 	.word	0x20000018
 800184c:	20000014 	.word	0x20000014

08001850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_IncTick+0x1c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_IncTick+0x20>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	4a03      	ldr	r2, [pc, #12]	; (8001870 <HAL_IncTick+0x20>)
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000018 	.word	0x20000018
 8001870:	200006b8 	.word	0x200006b8

08001874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b02      	ldr	r3, [pc, #8]	; (8001884 <HAL_GetTick+0x10>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	200006b8 	.word	0x200006b8

08001888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff fff0 	bl	8001874 <HAL_GetTick>
 8001894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018a0:	d005      	beq.n	80018ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_Delay+0x44>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ae:	bf00      	nop
 80018b0:	f7ff ffe0 	bl	8001874 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d8f7      	bhi.n	80018b0 <HAL_Delay+0x28>
  {
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000018 	.word	0x20000018

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4906      	ldr	r1, [pc, #24]	; (8001968 <__NVIC_EnableIRQ+0x34>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a48:	f7ff ff90 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff2d 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff42 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff90 	bl	80019c0 <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5f 	bl	800196c <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff35 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d008      	beq.n	8001b12 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2204      	movs	r2, #4
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e020      	b.n	8001b54 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 020e 	bic.w	r2, r2, #14
 8001b20:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0201 	bic.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d005      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2204      	movs	r2, #4
 8001b7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e051      	b.n	8001c26 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 020e 	bic.w	r2, r2, #14
 8001b90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a22      	ldr	r2, [pc, #136]	; (8001c30 <HAL_DMA_Abort_IT+0xd0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d029      	beq.n	8001c00 <HAL_DMA_Abort_IT+0xa0>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <HAL_DMA_Abort_IT+0xd4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d022      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x9c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_DMA_Abort_IT+0xd8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d01a      	beq.n	8001bf6 <HAL_DMA_Abort_IT+0x96>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_DMA_Abort_IT+0xdc>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d012      	beq.n	8001bf0 <HAL_DMA_Abort_IT+0x90>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <HAL_DMA_Abort_IT+0xe0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00a      	beq.n	8001bea <HAL_DMA_Abort_IT+0x8a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1a      	ldr	r2, [pc, #104]	; (8001c44 <HAL_DMA_Abort_IT+0xe4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d102      	bne.n	8001be4 <HAL_DMA_Abort_IT+0x84>
 8001bde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001be2:	e00e      	b.n	8001c02 <HAL_DMA_Abort_IT+0xa2>
 8001be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001be8:	e00b      	b.n	8001c02 <HAL_DMA_Abort_IT+0xa2>
 8001bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bee:	e008      	b.n	8001c02 <HAL_DMA_Abort_IT+0xa2>
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	e005      	b.n	8001c02 <HAL_DMA_Abort_IT+0xa2>
 8001bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfa:	e002      	b.n	8001c02 <HAL_DMA_Abort_IT+0xa2>
 8001bfc:	2310      	movs	r3, #16
 8001bfe:	e000      	b.n	8001c02 <HAL_DMA_Abort_IT+0xa2>
 8001c00:	2301      	movs	r3, #1
 8001c02:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_DMA_Abort_IT+0xe8>)
 8001c04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
    } 
  }
  return status;
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40020008 	.word	0x40020008
 8001c34:	4002001c 	.word	0x4002001c
 8001c38:	40020030 	.word	0x40020030
 8001c3c:	40020044 	.word	0x40020044
 8001c40:	40020058 	.word	0x40020058
 8001c44:	4002006c 	.word	0x4002006c
 8001c48:	40020000 	.word	0x40020000

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b08b      	sub	sp, #44	; 0x2c
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5e:	e169      	b.n	8001f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c60:	2201      	movs	r2, #1
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 8158 	bne.w	8001f2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4a9a      	ldr	r2, [pc, #616]	; (8001eec <HAL_GPIO_Init+0x2a0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d05e      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001c88:	4a98      	ldr	r2, [pc, #608]	; (8001eec <HAL_GPIO_Init+0x2a0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d875      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001c8e:	4a98      	ldr	r2, [pc, #608]	; (8001ef0 <HAL_GPIO_Init+0x2a4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d058      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001c94:	4a96      	ldr	r2, [pc, #600]	; (8001ef0 <HAL_GPIO_Init+0x2a4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d86f      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001c9a:	4a96      	ldr	r2, [pc, #600]	; (8001ef4 <HAL_GPIO_Init+0x2a8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d052      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001ca0:	4a94      	ldr	r2, [pc, #592]	; (8001ef4 <HAL_GPIO_Init+0x2a8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d869      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001ca6:	4a94      	ldr	r2, [pc, #592]	; (8001ef8 <HAL_GPIO_Init+0x2ac>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d04c      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001cac:	4a92      	ldr	r2, [pc, #584]	; (8001ef8 <HAL_GPIO_Init+0x2ac>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d863      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001cb2:	4a92      	ldr	r2, [pc, #584]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d046      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001cb8:	4a90      	ldr	r2, [pc, #576]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d85d      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001cbe:	2b12      	cmp	r3, #18
 8001cc0:	d82a      	bhi.n	8001d18 <HAL_GPIO_Init+0xcc>
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d859      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001cc6:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <HAL_GPIO_Init+0x80>)
 8001cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ccc:	08001d47 	.word	0x08001d47
 8001cd0:	08001d21 	.word	0x08001d21
 8001cd4:	08001d33 	.word	0x08001d33
 8001cd8:	08001d75 	.word	0x08001d75
 8001cdc:	08001d7b 	.word	0x08001d7b
 8001ce0:	08001d7b 	.word	0x08001d7b
 8001ce4:	08001d7b 	.word	0x08001d7b
 8001ce8:	08001d7b 	.word	0x08001d7b
 8001cec:	08001d7b 	.word	0x08001d7b
 8001cf0:	08001d7b 	.word	0x08001d7b
 8001cf4:	08001d7b 	.word	0x08001d7b
 8001cf8:	08001d7b 	.word	0x08001d7b
 8001cfc:	08001d7b 	.word	0x08001d7b
 8001d00:	08001d7b 	.word	0x08001d7b
 8001d04:	08001d7b 	.word	0x08001d7b
 8001d08:	08001d7b 	.word	0x08001d7b
 8001d0c:	08001d7b 	.word	0x08001d7b
 8001d10:	08001d29 	.word	0x08001d29
 8001d14:	08001d3d 	.word	0x08001d3d
 8001d18:	4a79      	ldr	r2, [pc, #484]	; (8001f00 <HAL_GPIO_Init+0x2b4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d1e:	e02c      	b.n	8001d7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	623b      	str	r3, [r7, #32]
          break;
 8001d26:	e029      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	623b      	str	r3, [r7, #32]
          break;
 8001d30:	e024      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	3308      	adds	r3, #8
 8001d38:	623b      	str	r3, [r7, #32]
          break;
 8001d3a:	e01f      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	330c      	adds	r3, #12
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e01a      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	623b      	str	r3, [r7, #32]
          break;
 8001d52:	e013      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	611a      	str	r2, [r3, #16]
          break;
 8001d66:	e009      	b.n	8001d7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	615a      	str	r2, [r3, #20]
          break;
 8001d72:	e003      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
          break;
 8001d78:	e000      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          break;
 8001d7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2bff      	cmp	r3, #255	; 0xff
 8001d80:	d801      	bhi.n	8001d86 <HAL_GPIO_Init+0x13a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	e001      	b.n	8001d8a <HAL_GPIO_Init+0x13e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2bff      	cmp	r3, #255	; 0xff
 8001d90:	d802      	bhi.n	8001d98 <HAL_GPIO_Init+0x14c>
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	e002      	b.n	8001d9e <HAL_GPIO_Init+0x152>
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	3b08      	subs	r3, #8
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	210f      	movs	r1, #15
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	401a      	ands	r2, r3
 8001db0:	6a39      	ldr	r1, [r7, #32]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	431a      	orrs	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80b1 	beq.w	8001f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dcc:	4b4d      	ldr	r3, [pc, #308]	; (8001f04 <HAL_GPIO_Init+0x2b8>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a4c      	ldr	r2, [pc, #304]	; (8001f04 <HAL_GPIO_Init+0x2b8>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b4a      	ldr	r3, [pc, #296]	; (8001f04 <HAL_GPIO_Init+0x2b8>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001de4:	4a48      	ldr	r2, [pc, #288]	; (8001f08 <HAL_GPIO_Init+0x2bc>)
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a40      	ldr	r2, [pc, #256]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d013      	beq.n	8001e38 <HAL_GPIO_Init+0x1ec>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3f      	ldr	r2, [pc, #252]	; (8001f10 <HAL_GPIO_Init+0x2c4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00d      	beq.n	8001e34 <HAL_GPIO_Init+0x1e8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3e      	ldr	r2, [pc, #248]	; (8001f14 <HAL_GPIO_Init+0x2c8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <HAL_GPIO_Init+0x1e4>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a3d      	ldr	r2, [pc, #244]	; (8001f18 <HAL_GPIO_Init+0x2cc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d101      	bne.n	8001e2c <HAL_GPIO_Init+0x1e0>
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e006      	b.n	8001e3a <HAL_GPIO_Init+0x1ee>
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	e004      	b.n	8001e3a <HAL_GPIO_Init+0x1ee>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e002      	b.n	8001e3a <HAL_GPIO_Init+0x1ee>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <HAL_GPIO_Init+0x1ee>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3c:	f002 0203 	and.w	r2, r2, #3
 8001e40:	0092      	lsls	r2, r2, #2
 8001e42:	4093      	lsls	r3, r2
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e4a:	492f      	ldr	r1, [pc, #188]	; (8001f08 <HAL_GPIO_Init+0x2bc>)
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	492c      	ldr	r1, [pc, #176]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e72:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4928      	ldr	r1, [pc, #160]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e8c:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	4922      	ldr	r1, [pc, #136]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	491e      	ldr	r1, [pc, #120]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d006      	beq.n	8001ec2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eb4:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	4918      	ldr	r1, [pc, #96]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	608b      	str	r3, [r1, #8]
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	4914      	ldr	r1, [pc, #80]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d021      	beq.n	8001f20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	490e      	ldr	r1, [pc, #56]	; (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	60cb      	str	r3, [r1, #12]
 8001ee8:	e021      	b.n	8001f2e <HAL_GPIO_Init+0x2e2>
 8001eea:	bf00      	nop
 8001eec:	10320000 	.word	0x10320000
 8001ef0:	10310000 	.word	0x10310000
 8001ef4:	10220000 	.word	0x10220000
 8001ef8:	10210000 	.word	0x10210000
 8001efc:	10120000 	.word	0x10120000
 8001f00:	10110000 	.word	0x10110000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	40010800 	.word	0x40010800
 8001f10:	40010c00 	.word	0x40010c00
 8001f14:	40011000 	.word	0x40011000
 8001f18:	40011400 	.word	0x40011400
 8001f1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	4909      	ldr	r1, [pc, #36]	; (8001f50 <HAL_GPIO_Init+0x304>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	3301      	adds	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f47f ae8e 	bne.w	8001c60 <HAL_GPIO_Init+0x14>
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	372c      	adds	r7, #44	; 0x2c
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	40010400 	.word	0x40010400

08001f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	887b      	ldrh	r3, [r7, #2]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e001      	b.n	8001f76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	807b      	strh	r3, [r7, #2]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f92:	787b      	ldrb	r3, [r7, #1]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f98:	887a      	ldrh	r2, [r7, #2]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f9e:	e003      	b.n	8001fa8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	041a      	lsls	r2, r3, #16
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	611a      	str	r2, [r3, #16]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b085      	sub	sp, #20
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fc4:	887a      	ldrh	r2, [r7, #2]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	041a      	lsls	r2, r3, #16
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	43d9      	mvns	r1, r3
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f894 	bl	8001130 <HAL_GPIO_EXTI_Callback>
  }
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40010400 	.word	0x40010400

08002014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e12b      	b.n	800227e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff f8fa 	bl	8001234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2224      	movs	r2, #36	; 0x24
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002078:	f000 fffa 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 800207c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a81      	ldr	r2, [pc, #516]	; (8002288 <HAL_I2C_Init+0x274>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d807      	bhi.n	8002098 <HAL_I2C_Init+0x84>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a80      	ldr	r2, [pc, #512]	; (800228c <HAL_I2C_Init+0x278>)
 800208c:	4293      	cmp	r3, r2
 800208e:	bf94      	ite	ls
 8002090:	2301      	movls	r3, #1
 8002092:	2300      	movhi	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	e006      	b.n	80020a6 <HAL_I2C_Init+0x92>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4a7d      	ldr	r2, [pc, #500]	; (8002290 <HAL_I2C_Init+0x27c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	bf94      	ite	ls
 80020a0:	2301      	movls	r3, #1
 80020a2:	2300      	movhi	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0e7      	b.n	800227e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a78      	ldr	r2, [pc, #480]	; (8002294 <HAL_I2C_Init+0x280>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0c9b      	lsrs	r3, r3, #18
 80020b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a6a      	ldr	r2, [pc, #424]	; (8002288 <HAL_I2C_Init+0x274>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d802      	bhi.n	80020e8 <HAL_I2C_Init+0xd4>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3301      	adds	r3, #1
 80020e6:	e009      	b.n	80020fc <HAL_I2C_Init+0xe8>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	4a69      	ldr	r2, [pc, #420]	; (8002298 <HAL_I2C_Init+0x284>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	3301      	adds	r3, #1
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	430b      	orrs	r3, r1
 8002102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800210e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	495c      	ldr	r1, [pc, #368]	; (8002288 <HAL_I2C_Init+0x274>)
 8002118:	428b      	cmp	r3, r1
 800211a:	d819      	bhi.n	8002150 <HAL_I2C_Init+0x13c>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e59      	subs	r1, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fbb1 f3f3 	udiv	r3, r1, r3
 800212a:	1c59      	adds	r1, r3, #1
 800212c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002130:	400b      	ands	r3, r1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_I2C_Init+0x138>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1e59      	subs	r1, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fbb1 f3f3 	udiv	r3, r1, r3
 8002144:	3301      	adds	r3, #1
 8002146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214a:	e051      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 800214c:	2304      	movs	r3, #4
 800214e:	e04f      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d111      	bne.n	800217c <HAL_I2C_Init+0x168>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1e58      	subs	r0, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	440b      	add	r3, r1
 8002166:	fbb0 f3f3 	udiv	r3, r0, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	e012      	b.n	80021a2 <HAL_I2C_Init+0x18e>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1e58      	subs	r0, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	0099      	lsls	r1, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002192:	3301      	adds	r3, #1
 8002194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_Init+0x196>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e022      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10e      	bne.n	80021d0 <HAL_I2C_Init+0x1bc>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1e58      	subs	r0, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	440b      	add	r3, r1
 80021c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ce:	e00f      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	0099      	lsls	r1, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	6809      	ldr	r1, [r1, #0]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69da      	ldr	r2, [r3, #28]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800221e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6911      	ldr	r1, [r2, #16]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68d2      	ldr	r2, [r2, #12]
 800222a:	4311      	orrs	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	430b      	orrs	r3, r1
 8002232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	000186a0 	.word	0x000186a0
 800228c:	001e847f 	.word	0x001e847f
 8002290:	003d08ff 	.word	0x003d08ff
 8002294:	431bde83 	.word	0x431bde83
 8002298:	10624dd3 	.word	0x10624dd3

0800229c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	4608      	mov	r0, r1
 80022a6:	4611      	mov	r1, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	817b      	strh	r3, [r7, #10]
 80022ae:	460b      	mov	r3, r1
 80022b0:	813b      	strh	r3, [r7, #8]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022b6:	f7ff fadd 	bl	8001874 <HAL_GetTick>
 80022ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	f040 80d9 	bne.w	800247c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2319      	movs	r3, #25
 80022d0:	2201      	movs	r2, #1
 80022d2:	496d      	ldr	r1, [pc, #436]	; (8002488 <HAL_I2C_Mem_Write+0x1ec>)
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f971 	bl	80025bc <I2C_WaitOnFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
 80022e2:	e0cc      	b.n	800247e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_I2C_Mem_Write+0x56>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e0c5      	b.n	800247e <HAL_I2C_Mem_Write+0x1e2>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d007      	beq.n	8002318 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2221      	movs	r2, #33	; 0x21
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002348:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4a4d      	ldr	r2, [pc, #308]	; (800248c <HAL_I2C_Mem_Write+0x1f0>)
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800235a:	88f8      	ldrh	r0, [r7, #6]
 800235c:	893a      	ldrh	r2, [r7, #8]
 800235e:	8979      	ldrh	r1, [r7, #10]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	4603      	mov	r3, r0
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 f890 	bl	8002490 <I2C_RequestMemoryWrite>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d052      	beq.n	800241c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e081      	b.n	800247e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f9f2 	bl	8002768 <I2C_WaitOnTXEFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00d      	beq.n	80023a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b04      	cmp	r3, #4
 8002390:	d107      	bne.n	80023a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e06b      	b.n	800247e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	781a      	ldrb	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d11b      	bne.n	800241c <HAL_I2C_Mem_Write+0x180>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d017      	beq.n	800241c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1aa      	bne.n	800237a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f9de 	bl	80027ea <I2C_WaitOnBTFFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00d      	beq.n	8002450 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	2b04      	cmp	r3, #4
 800243a:	d107      	bne.n	800244c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e016      	b.n	800247e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	e000      	b.n	800247e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800247c:	2302      	movs	r3, #2
  }
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	00100002 	.word	0x00100002
 800248c:	ffff0000 	.word	0xffff0000

08002490 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	4608      	mov	r0, r1
 800249a:	4611      	mov	r1, r2
 800249c:	461a      	mov	r2, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	817b      	strh	r3, [r7, #10]
 80024a2:	460b      	mov	r3, r1
 80024a4:	813b      	strh	r3, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f878 	bl	80025bc <I2C_WaitOnFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00d      	beq.n	80024ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e0:	d103      	bne.n	80024ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e05f      	b.n	80025ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	492d      	ldr	r1, [pc, #180]	; (80025b8 <I2C_RequestMemoryWrite+0x128>)
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f8b0 	bl	800266a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e04c      	b.n	80025ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	6a39      	ldr	r1, [r7, #32]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f91a 	bl	8002768 <I2C_WaitOnTXEFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00d      	beq.n	8002556 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b04      	cmp	r3, #4
 8002540:	d107      	bne.n	8002552 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002550:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e02b      	b.n	80025ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800255c:	893b      	ldrh	r3, [r7, #8]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	611a      	str	r2, [r3, #16]
 8002566:	e021      	b.n	80025ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002568:	893b      	ldrh	r3, [r7, #8]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	b29b      	uxth	r3, r3
 800256e:	b2da      	uxtb	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002578:	6a39      	ldr	r1, [r7, #32]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f8f4 	bl	8002768 <I2C_WaitOnTXEFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00d      	beq.n	80025a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2b04      	cmp	r3, #4
 800258c:	d107      	bne.n	800259e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e005      	b.n	80025ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025a2:	893b      	ldrh	r3, [r7, #8]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	00010002 	.word	0x00010002

080025bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025cc:	e025      	b.n	800261a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d4:	d021      	beq.n	800261a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d6:	f7ff f94d 	bl	8001874 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d302      	bcc.n	80025ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d116      	bne.n	800261a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e023      	b.n	8002662 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10d      	bne.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4013      	ands	r3, r2
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf0c      	ite	eq
 8002636:	2301      	moveq	r3, #1
 8002638:	2300      	movne	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	e00c      	b.n	800265a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	429a      	cmp	r2, r3
 800265e:	d0b6      	beq.n	80025ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002678:	e051      	b.n	800271e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002688:	d123      	bne.n	80026d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002698:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f043 0204 	orr.w	r2, r3, #4
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e046      	b.n	8002760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d8:	d021      	beq.n	800271e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7ff f8cb 	bl	8001874 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d116      	bne.n	800271e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f043 0220 	orr.w	r2, r3, #32
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e020      	b.n	8002760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d10c      	bne.n	8002742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4013      	ands	r3, r2
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf14      	ite	ne
 800273a:	2301      	movne	r3, #1
 800273c:	2300      	moveq	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	e00b      	b.n	800275a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	43da      	mvns	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4013      	ands	r3, r2
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d18d      	bne.n	800267a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002774:	e02d      	b.n	80027d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f878 	bl	800286c <I2C_IsAcknowledgeFailed>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e02d      	b.n	80027e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800278c:	d021      	beq.n	80027d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278e:	f7ff f871 	bl	8001874 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	429a      	cmp	r2, r3
 800279c:	d302      	bcc.n	80027a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d116      	bne.n	80027d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f043 0220 	orr.w	r2, r3, #32
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e007      	b.n	80027e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	2b80      	cmp	r3, #128	; 0x80
 80027de:	d1ca      	bne.n	8002776 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027f6:	e02d      	b.n	8002854 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f837 	bl	800286c <I2C_IsAcknowledgeFailed>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e02d      	b.n	8002864 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800280e:	d021      	beq.n	8002854 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002810:	f7ff f830 	bl	8001874 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	429a      	cmp	r2, r3
 800281e:	d302      	bcc.n	8002826 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d116      	bne.n	8002854 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b04      	cmp	r3, #4
 8002860:	d1ca      	bne.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002882:	d11b      	bne.n	80028bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800288c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f043 0204 	orr.w	r2, r3, #4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e26c      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8087 	beq.w	80029f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e8:	4b92      	ldr	r3, [pc, #584]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d00c      	beq.n	800290e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028f4:	4b8f      	ldr	r3, [pc, #572]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d112      	bne.n	8002926 <HAL_RCC_OscConfig+0x5e>
 8002900:	4b8c      	ldr	r3, [pc, #560]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d10b      	bne.n	8002926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290e:	4b89      	ldr	r3, [pc, #548]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d06c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x12c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d168      	bne.n	80029f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e246      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x76>
 8002930:	4b80      	ldr	r3, [pc, #512]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a7f      	ldr	r2, [pc, #508]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	e02e      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x98>
 8002946:	4b7b      	ldr	r3, [pc, #492]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a7a      	ldr	r2, [pc, #488]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 800294c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b78      	ldr	r3, [pc, #480]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a77      	ldr	r2, [pc, #476]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e01d      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0xbc>
 800296a:	4b72      	ldr	r3, [pc, #456]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a71      	ldr	r2, [pc, #452]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b6f      	ldr	r3, [pc, #444]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a6e      	ldr	r2, [pc, #440]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 8002984:	4b6b      	ldr	r3, [pc, #428]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a6a      	ldr	r2, [pc, #424]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 800298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b68      	ldr	r3, [pc, #416]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a67      	ldr	r2, [pc, #412]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe ff66 	bl	8001874 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ac:	f7fe ff62 	bl	8001874 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1fa      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b5d      	ldr	r3, [pc, #372]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0xe4>
 80029ca:	e014      	b.n	80029f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe ff52 	bl	8001874 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fe ff4e 	bl	8001874 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e1e6      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e6:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x10c>
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d063      	beq.n	8002aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a02:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a0e:	4b49      	ldr	r3, [pc, #292]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d11c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x18c>
 8002a1a:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d116      	bne.n	8002a54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a26:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_RCC_OscConfig+0x176>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e1ba      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4939      	ldr	r1, [pc, #228]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a52:	e03a      	b.n	8002aca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a5c:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fe ff07 	bl	8001874 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6a:	f7fe ff03 	bl	8001874 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e19b      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a88:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4927      	ldr	r1, [pc, #156]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]
 8002a9c:	e015      	b.n	8002aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9e:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fee6 	bl	8001874 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aac:	f7fe fee2 	bl	8001874 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e17a      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d03a      	beq.n	8002b4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d019      	beq.n	8002b12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <HAL_RCC_OscConfig+0x274>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fec6 	bl	8001874 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aec:	f7fe fec2 	bl	8001874 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e15a      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f000 fad8 	bl	80030c0 <RCC_Delay>
 8002b10:	e01c      	b.n	8002b4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_RCC_OscConfig+0x274>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b18:	f7fe feac 	bl	8001874 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1e:	e00f      	b.n	8002b40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b20:	f7fe fea8 	bl	8001874 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d908      	bls.n	8002b40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e140      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	42420000 	.word	0x42420000
 8002b3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	4b9e      	ldr	r3, [pc, #632]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e9      	bne.n	8002b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80a6 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5e:	4b97      	ldr	r3, [pc, #604]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10d      	bne.n	8002b86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	4b94      	ldr	r3, [pc, #592]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	4a93      	ldr	r2, [pc, #588]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b74:	61d3      	str	r3, [r2, #28]
 8002b76:	4b91      	ldr	r3, [pc, #580]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b86:	4b8e      	ldr	r3, [pc, #568]	; (8002dc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d118      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b92:	4b8b      	ldr	r3, [pc, #556]	; (8002dc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a8a      	ldr	r2, [pc, #552]	; (8002dc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9e:	f7fe fe69 	bl	8001874 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba6:	f7fe fe65 	bl	8001874 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0fd      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb8:	4b81      	ldr	r3, [pc, #516]	; (8002dc0 <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x312>
 8002bcc:	4b7b      	ldr	r3, [pc, #492]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4a7a      	ldr	r2, [pc, #488]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6213      	str	r3, [r2, #32]
 8002bd8:	e02d      	b.n	8002c36 <HAL_RCC_OscConfig+0x36e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x334>
 8002be2:	4b76      	ldr	r3, [pc, #472]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4a75      	ldr	r2, [pc, #468]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6213      	str	r3, [r2, #32]
 8002bee:	4b73      	ldr	r3, [pc, #460]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4a72      	ldr	r2, [pc, #456]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	6213      	str	r3, [r2, #32]
 8002bfa:	e01c      	b.n	8002c36 <HAL_RCC_OscConfig+0x36e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d10c      	bne.n	8002c1e <HAL_RCC_OscConfig+0x356>
 8002c04:	4b6d      	ldr	r3, [pc, #436]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4a6c      	ldr	r2, [pc, #432]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c0a:	f043 0304 	orr.w	r3, r3, #4
 8002c0e:	6213      	str	r3, [r2, #32]
 8002c10:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4a69      	ldr	r2, [pc, #420]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6213      	str	r3, [r2, #32]
 8002c1c:	e00b      	b.n	8002c36 <HAL_RCC_OscConfig+0x36e>
 8002c1e:	4b67      	ldr	r3, [pc, #412]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4a66      	ldr	r2, [pc, #408]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6213      	str	r3, [r2, #32]
 8002c2a:	4b64      	ldr	r3, [pc, #400]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4a63      	ldr	r2, [pc, #396]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d015      	beq.n	8002c6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fe19 	bl	8001874 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe fe15 	bl	8001874 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0ab      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	4b57      	ldr	r3, [pc, #348]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ee      	beq.n	8002c46 <HAL_RCC_OscConfig+0x37e>
 8002c68:	e014      	b.n	8002c94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fe03 	bl	8001874 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7fe fdff 	bl	8001874 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e095      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c88:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ee      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d105      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9a:	4b48      	ldr	r3, [pc, #288]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4a47      	ldr	r2, [pc, #284]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8081 	beq.w	8002db2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb0:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d061      	beq.n	8002d80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d146      	bne.n	8002d52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc4:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCC_OscConfig+0x4fc>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fe fdd3 	bl	8001874 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7fe fdcf 	bl	8001874 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e067      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f0      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf8:	d108      	bne.n	8002d0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cfa:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	492d      	ldr	r1, [pc, #180]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a19      	ldr	r1, [r3, #32]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	4927      	ldr	r1, [pc, #156]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d24:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <HAL_RCC_OscConfig+0x4fc>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fda3 	bl	8001874 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fe fd9f 	bl	8001874 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e037      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d44:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x46a>
 8002d50:	e02f      	b.n	8002db2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <HAL_RCC_OscConfig+0x4fc>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fe fd8c 	bl	8001874 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fe fd88 	bl	8001874 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e020      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x498>
 8002d7e:	e018      	b.n	8002db2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e013      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	42420060 	.word	0x42420060

08002dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0d0      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d910      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b67      	ldr	r3, [pc, #412]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 0207 	bic.w	r2, r3, #7
 8002df2:	4965      	ldr	r1, [pc, #404]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0b8      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e24:	4b59      	ldr	r3, [pc, #356]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a58      	ldr	r2, [pc, #352]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e3c:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a52      	ldr	r2, [pc, #328]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e48:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	494d      	ldr	r1, [pc, #308]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d040      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b47      	ldr	r3, [pc, #284]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d115      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e07f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e073      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e06b      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea6:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4936      	ldr	r1, [pc, #216]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb8:	f7fe fcdc 	bl	8001874 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7fe fcd8 	bl	8001874 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e053      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d210      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 0207 	bic.w	r2, r3, #7
 8002efe:	4922      	ldr	r1, [pc, #136]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4916      	ldr	r1, [pc, #88]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	490e      	ldr	r1, [pc, #56]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f56:	f000 f821 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	490a      	ldr	r1, [pc, #40]	; (8002f90 <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	5ccb      	ldrb	r3, [r1, r3]
 8002f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1cc>)
 8002f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1d0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe fc3a 	bl	80017f0 <HAL_InitTick>

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08005e38 	.word	0x08005e38
 8002f94:	20000010 	.word	0x20000010
 8002f98:	20000014 	.word	0x20000014

08002f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	b490      	push	{r4, r7}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	; (800304c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fa4:	1d3c      	adds	r4, r7, #4
 8002fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fac:	f240 2301 	movw	r3, #513	; 0x201
 8002fb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fc6:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d002      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x40>
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x46>
 8002fda:	e02d      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fde:	623b      	str	r3, [r7, #32]
      break;
 8002fe0:	e02d      	b.n	800303e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	0c9b      	lsrs	r3, r3, #18
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fee:	4413      	add	r3, r2
 8002ff0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ff4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	0c5b      	lsrs	r3, r3, #17
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800300e:	4413      	add	r3, r2
 8003010:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003014:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <HAL_RCC_GetSysClockFreq+0xb8>)
 800301a:	fb02 f203 	mul.w	r2, r2, r3
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	e004      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <HAL_RCC_GetSysClockFreq+0xbc>)
 800302c:	fb02 f303 	mul.w	r3, r2, r3
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	623b      	str	r3, [r7, #32]
      break;
 8003036:	e002      	b.n	800303e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_RCC_GetSysClockFreq+0xb8>)
 800303a:	623b      	str	r3, [r7, #32]
      break;
 800303c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800303e:	6a3b      	ldr	r3, [r7, #32]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3728      	adds	r7, #40	; 0x28
 8003044:	46bd      	mov	sp, r7
 8003046:	bc90      	pop	{r4, r7}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	080056bc 	.word	0x080056bc
 8003050:	40021000 	.word	0x40021000
 8003054:	007a1200 	.word	0x007a1200
 8003058:	003d0900 	.word	0x003d0900

0800305c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b02      	ldr	r3, [pc, #8]	; (800306c <HAL_RCC_GetHCLKFreq+0x10>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	20000010 	.word	0x20000010

08003070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003074:	f7ff fff2 	bl	800305c <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4903      	ldr	r1, [pc, #12]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	08005e48 	.word	0x08005e48

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800309c:	f7ff ffde 	bl	800305c <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	0adb      	lsrs	r3, r3, #11
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4903      	ldr	r1, [pc, #12]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	08005e48 	.word	0x08005e48

080030c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030c8:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <RCC_Delay+0x34>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <RCC_Delay+0x38>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0a5b      	lsrs	r3, r3, #9
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030dc:	bf00      	nop
  }
  while (Delay --);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1e5a      	subs	r2, r3, #1
 80030e2:	60fa      	str	r2, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f9      	bne.n	80030dc <RCC_Delay+0x1c>
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	20000010 	.word	0x20000010
 80030f8:	10624dd3 	.word	0x10624dd3

080030fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e076      	b.n	80031fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2b00      	cmp	r3, #0
 8003114:	d108      	bne.n	8003128 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800311e:	d009      	beq.n	8003134 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
 8003126:	e005      	b.n	8003134 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fe f8ae 	bl	80012b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	ea42 0103 	orr.w	r1, r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	0c1a      	lsrs	r2, r3, #16
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f002 0204 	and.w	r2, r2, #4
 80031da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_SPI_Transmit+0x22>
 8003222:	2302      	movs	r3, #2
 8003224:	e126      	b.n	8003474 <HAL_SPI_Transmit+0x270>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800322e:	f7fe fb21 	bl	8001874 <HAL_GetTick>
 8003232:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d002      	beq.n	800324a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003244:	2302      	movs	r3, #2
 8003246:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003248:	e10b      	b.n	8003462 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <HAL_SPI_Transmit+0x52>
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d102      	bne.n	800325c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	77fb      	strb	r3, [r7, #31]
    goto error;
 800325a:	e102      	b.n	8003462 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2203      	movs	r2, #3
 8003260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	88fa      	ldrh	r2, [r7, #6]
 800327a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a2:	d10f      	bne.n	80032c4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b40      	cmp	r3, #64	; 0x40
 80032d0:	d007      	beq.n	80032e2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ea:	d14b      	bne.n	8003384 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HAL_SPI_Transmit+0xf6>
 80032f4:	8afb      	ldrh	r3, [r7, #22]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d13e      	bne.n	8003378 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	881a      	ldrh	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	1c9a      	adds	r2, r3, #2
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800331e:	e02b      	b.n	8003378 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b02      	cmp	r3, #2
 800332c:	d112      	bne.n	8003354 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	881a      	ldrh	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	1c9a      	adds	r2, r3, #2
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	86da      	strh	r2, [r3, #54]	; 0x36
 8003352:	e011      	b.n	8003378 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003354:	f7fe fa8e 	bl	8001874 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d803      	bhi.n	800336c <HAL_SPI_Transmit+0x168>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800336a:	d102      	bne.n	8003372 <HAL_SPI_Transmit+0x16e>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003376:	e074      	b.n	8003462 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1ce      	bne.n	8003320 <HAL_SPI_Transmit+0x11c>
 8003382:	e04c      	b.n	800341e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_SPI_Transmit+0x18e>
 800338c:	8afb      	ldrh	r3, [r7, #22]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d140      	bne.n	8003414 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	7812      	ldrb	r2, [r2, #0]
 800339e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033b8:	e02c      	b.n	8003414 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d113      	bne.n	80033f0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	330c      	adds	r3, #12
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80033ee:	e011      	b.n	8003414 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033f0:	f7fe fa40 	bl	8001874 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d803      	bhi.n	8003408 <HAL_SPI_Transmit+0x204>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003406:	d102      	bne.n	800340e <HAL_SPI_Transmit+0x20a>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003412:	e026      	b.n	8003462 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1cd      	bne.n	80033ba <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fbb8 	bl	8003b98 <SPI_EndRxTxTransaction>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	77fb      	strb	r3, [r7, #31]
 800345e:	e000      	b.n	8003462 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003460:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003472:	7ffb      	ldrb	r3, [r7, #31]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003498:	d112      	bne.n	80034c0 <HAL_SPI_Receive+0x44>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10e      	bne.n	80034c0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2204      	movs	r2, #4
 80034a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034aa:	88fa      	ldrh	r2, [r7, #6]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f8f1 	bl	800369e <HAL_SPI_TransmitReceive>
 80034bc:	4603      	mov	r3, r0
 80034be:	e0ea      	b.n	8003696 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_SPI_Receive+0x52>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e0e3      	b.n	8003696 <HAL_SPI_Receive+0x21a>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034d6:	f7fe f9cd 	bl	8001874 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d002      	beq.n	80034ee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034e8:	2302      	movs	r3, #2
 80034ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034ec:	e0ca      	b.n	8003684 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_SPI_Receive+0x7e>
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034fe:	e0c1      	b.n	8003684 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2204      	movs	r2, #4
 8003504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	88fa      	ldrh	r2, [r7, #6]
 8003518:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	88fa      	ldrh	r2, [r7, #6]
 800351e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003546:	d10f      	bne.n	8003568 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003556:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d007      	beq.n	8003586 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003584:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d162      	bne.n	8003654 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800358e:	e02e      	b.n	80035ee <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d115      	bne.n	80035ca <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f103 020c 	add.w	r2, r3, #12
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	7812      	ldrb	r2, [r2, #0]
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035c8:	e011      	b.n	80035ee <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ca:	f7fe f953 	bl	8001874 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d803      	bhi.n	80035e2 <HAL_SPI_Receive+0x166>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e0:	d102      	bne.n	80035e8 <HAL_SPI_Receive+0x16c>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035ec:	e04a      	b.n	8003684 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1cb      	bne.n	8003590 <HAL_SPI_Receive+0x114>
 80035f8:	e031      	b.n	800365e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d113      	bne.n	8003630 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	b292      	uxth	r2, r2
 8003614:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	1c9a      	adds	r2, r3, #2
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800362e:	e011      	b.n	8003654 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003630:	f7fe f920 	bl	8001874 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d803      	bhi.n	8003648 <HAL_SPI_Receive+0x1cc>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003646:	d102      	bne.n	800364e <HAL_SPI_Receive+0x1d2>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003652:	e017      	b.n	8003684 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1cd      	bne.n	80035fa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	6839      	ldr	r1, [r7, #0]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fa46 	bl	8003af4 <SPI_EndRxTransaction>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	75fb      	strb	r3, [r7, #23]
 8003680:	e000      	b.n	8003684 <HAL_SPI_Receive+0x208>
  }

error :
 8003682:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003694:	7dfb      	ldrb	r3, [r7, #23]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b08c      	sub	sp, #48	; 0x30
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036ac:	2301      	movs	r3, #1
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_SPI_TransmitReceive+0x26>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e18a      	b.n	80039da <HAL_SPI_TransmitReceive+0x33c>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036cc:	f7fe f8d2 	bl	8001874 <HAL_GetTick>
 80036d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036e2:	887b      	ldrh	r3, [r7, #2]
 80036e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d00f      	beq.n	800370e <HAL_SPI_TransmitReceive+0x70>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f4:	d107      	bne.n	8003706 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <HAL_SPI_TransmitReceive+0x68>
 80036fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003702:	2b04      	cmp	r3, #4
 8003704:	d003      	beq.n	800370e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003706:	2302      	movs	r3, #2
 8003708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800370c:	e15b      	b.n	80039c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x82>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x82>
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d103      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003726:	e14e      	b.n	80039c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b04      	cmp	r3, #4
 8003732:	d003      	beq.n	800373c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2205      	movs	r2, #5
 8003738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	887a      	ldrh	r2, [r7, #2]
 800374c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	887a      	ldrh	r2, [r7, #2]
 8003752:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	887a      	ldrh	r2, [r7, #2]
 800375e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d007      	beq.n	8003790 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800378e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003798:	d178      	bne.n	800388c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_SPI_TransmitReceive+0x10a>
 80037a2:	8b7b      	ldrh	r3, [r7, #26]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d166      	bne.n	8003876 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	881a      	ldrh	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037cc:	e053      	b.n	8003876 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d11b      	bne.n	8003814 <HAL_SPI_TransmitReceive+0x176>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d016      	beq.n	8003814 <HAL_SPI_TransmitReceive+0x176>
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d113      	bne.n	8003814 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	881a      	ldrh	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	1c9a      	adds	r2, r3, #2
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d119      	bne.n	8003856 <HAL_SPI_TransmitReceive+0x1b8>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d014      	beq.n	8003856 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	b292      	uxth	r2, r2
 8003838:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	1c9a      	adds	r2, r3, #2
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003852:	2301      	movs	r3, #1
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003856:	f7fe f80d 	bl	8001874 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003862:	429a      	cmp	r2, r3
 8003864:	d807      	bhi.n	8003876 <HAL_SPI_TransmitReceive+0x1d8>
 8003866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800386c:	d003      	beq.n	8003876 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003874:	e0a7      	b.n	80039c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1a6      	bne.n	80037ce <HAL_SPI_TransmitReceive+0x130>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1a1      	bne.n	80037ce <HAL_SPI_TransmitReceive+0x130>
 800388a:	e07c      	b.n	8003986 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_SPI_TransmitReceive+0x1fc>
 8003894:	8b7b      	ldrh	r3, [r7, #26]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d16b      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	7812      	ldrb	r2, [r2, #0]
 80038a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038c0:	e057      	b.n	8003972 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d11c      	bne.n	800390a <HAL_SPI_TransmitReceive+0x26c>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d017      	beq.n	800390a <HAL_SPI_TransmitReceive+0x26c>
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d114      	bne.n	800390a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	7812      	ldrb	r2, [r2, #0]
 80038ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	d119      	bne.n	800394c <HAL_SPI_TransmitReceive+0x2ae>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d014      	beq.n	800394c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003948:	2301      	movs	r3, #1
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800394c:	f7fd ff92 	bl	8001874 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003958:	429a      	cmp	r2, r3
 800395a:	d803      	bhi.n	8003964 <HAL_SPI_TransmitReceive+0x2c6>
 800395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003962:	d102      	bne.n	800396a <HAL_SPI_TransmitReceive+0x2cc>
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	2b00      	cmp	r3, #0
 8003968:	d103      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003970:	e029      	b.n	80039c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1a2      	bne.n	80038c2 <HAL_SPI_TransmitReceive+0x224>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d19d      	bne.n	80038c2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003988:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f904 	bl	8003b98 <SPI_EndRxTxTransaction>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d006      	beq.n	80039a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80039a2:	e010      	b.n	80039c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	e000      	b.n	80039c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80039c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3730      	adds	r7, #48	; 0x30
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039f4:	f7fd ff3e 	bl	8001874 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	4413      	add	r3, r2
 8003a02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a04:	f7fd ff36 	bl	8001874 <HAL_GetTick>
 8003a08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a0a:	4b39      	ldr	r3, [pc, #228]	; (8003af0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	015b      	lsls	r3, r3, #5
 8003a10:	0d1b      	lsrs	r3, r3, #20
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a1a:	e054      	b.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a22:	d050      	beq.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a24:	f7fd ff26 	bl	8001874 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d902      	bls.n	8003a3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d13d      	bne.n	8003ab6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a52:	d111      	bne.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5c:	d004      	beq.n	8003a68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a66:	d107      	bne.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a80:	d10f      	bne.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e017      	b.n	8003ae6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d19b      	bne.n	8003a1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000010 	.word	0x20000010

08003af4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b08:	d111      	bne.n	8003b2e <SPI_EndRxTransaction+0x3a>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b12:	d004      	beq.n	8003b1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1c:	d107      	bne.n	8003b2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b2c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b36:	d117      	bne.n	8003b68 <SPI_EndRxTransaction+0x74>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b40:	d112      	bne.n	8003b68 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f7ff ff49 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01a      	beq.n	8003b8e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e013      	b.n	8003b90 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f7ff ff36 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	f043 0220 	orr.w	r2, r3, #32
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e000      	b.n	8003b90 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2200      	movs	r2, #0
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff ff18 	bl	80039e4 <SPI_WaitFlagStateUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbe:	f043 0220 	orr.w	r2, r3, #32
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e000      	b.n	8003bcc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e041      	b.n	8003c6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd fba2 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f000 faa8 	bl	8004168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d001      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e03a      	b.n	8003d02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <HAL_TIM_Base_Start_IT+0x98>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00e      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x58>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb6:	d009      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x58>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d004      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x58>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <HAL_TIM_Base_Start_IT+0xa0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d111      	bne.n	8003cf0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d010      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0201 	orr.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cee:	e007      	b.n	8003d00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40000400 	.word	0x40000400
 8003d14:	40000800 	.word	0x40000800

08003d18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6a1a      	ldr	r2, [r3, #32]
 8003d36:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10f      	bne.n	8003d60 <HAL_TIM_Base_Stop_IT+0x48>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6a1a      	ldr	r2, [r3, #32]
 8003d46:	f240 4344 	movw	r3, #1092	; 0x444
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d107      	bne.n	8003d60 <HAL_TIM_Base_Stop_IT+0x48>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d122      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d11b      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0202 	mvn.w	r2, #2
 8003da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9ba 	bl	8004130 <HAL_TIM_IC_CaptureCallback>
 8003dbc:	e005      	b.n	8003dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9ad 	bl	800411e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f9bc 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d122      	bne.n	8003e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d11b      	bne.n	8003e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0204 	mvn.w	r2, #4
 8003df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f990 	bl	8004130 <HAL_TIM_IC_CaptureCallback>
 8003e10:	e005      	b.n	8003e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f983 	bl	800411e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f992 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d122      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d11b      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0208 	mvn.w	r2, #8
 8003e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f966 	bl	8004130 <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f959 	bl	800411e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f968 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b10      	cmp	r3, #16
 8003e84:	d122      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d11b      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0210 	mvn.w	r2, #16
 8003e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f93c 	bl	8004130 <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f92f 	bl	800411e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f93e 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0201 	mvn.w	r2, #1
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f90a 	bl	800410c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b80      	cmp	r3, #128	; 0x80
 8003f04:	d10e      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f10:	2b80      	cmp	r3, #128	; 0x80
 8003f12:	d107      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa81 	bl	8004426 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d10e      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d107      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f902 	bl	8004154 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d10e      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d107      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0220 	mvn.w	r2, #32
 8003f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fa4c 	bl	8004414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_TIM_ConfigClockSource+0x18>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e0b3      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x180>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd4:	d03e      	beq.n	8004054 <HAL_TIM_ConfigClockSource+0xd0>
 8003fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fda:	f200 8087 	bhi.w	80040ec <HAL_TIM_ConfigClockSource+0x168>
 8003fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe2:	f000 8085 	beq.w	80040f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fea:	d87f      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x168>
 8003fec:	2b70      	cmp	r3, #112	; 0x70
 8003fee:	d01a      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0xa2>
 8003ff0:	2b70      	cmp	r3, #112	; 0x70
 8003ff2:	d87b      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x168>
 8003ff4:	2b60      	cmp	r3, #96	; 0x60
 8003ff6:	d050      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x116>
 8003ff8:	2b60      	cmp	r3, #96	; 0x60
 8003ffa:	d877      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x168>
 8003ffc:	2b50      	cmp	r3, #80	; 0x50
 8003ffe:	d03c      	beq.n	800407a <HAL_TIM_ConfigClockSource+0xf6>
 8004000:	2b50      	cmp	r3, #80	; 0x50
 8004002:	d873      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x168>
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d058      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x136>
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d86f      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x168>
 800400c:	2b30      	cmp	r3, #48	; 0x30
 800400e:	d064      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x156>
 8004010:	2b30      	cmp	r3, #48	; 0x30
 8004012:	d86b      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x168>
 8004014:	2b20      	cmp	r3, #32
 8004016:	d060      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x156>
 8004018:	2b20      	cmp	r3, #32
 800401a:	d867      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x168>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05c      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x156>
 8004020:	2b10      	cmp	r3, #16
 8004022:	d05a      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004024:	e062      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6899      	ldr	r1, [r3, #8]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f000 f970 	bl	800431a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004048:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	609a      	str	r2, [r3, #8]
      break;
 8004052:	e04e      	b.n	80040f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	6899      	ldr	r1, [r3, #8]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f000 f959 	bl	800431a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004076:	609a      	str	r2, [r3, #8]
      break;
 8004078:	e03b      	b.n	80040f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	461a      	mov	r2, r3
 8004088:	f000 f8d0 	bl	800422c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2150      	movs	r1, #80	; 0x50
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f927 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 8004098:	e02b      	b.n	80040f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f000 f8ee 	bl	8004288 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2160      	movs	r1, #96	; 0x60
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f917 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 80040b8:	e01b      	b.n	80040f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f000 f8b0 	bl	800422c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2140      	movs	r1, #64	; 0x40
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f907 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 80040d8:	e00b      	b.n	80040f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f000 f8fe 	bl	80042e6 <TIM_ITRx_SetConfig>
        break;
 80040ea:	e002      	b.n	80040f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040ec:	bf00      	nop
 80040ee:	e000      	b.n	80040f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr
	...

08004168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a29      	ldr	r2, [pc, #164]	; (8004220 <TIM_Base_SetConfig+0xb8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d00b      	beq.n	8004198 <TIM_Base_SetConfig+0x30>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004186:	d007      	beq.n	8004198 <TIM_Base_SetConfig+0x30>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a26      	ldr	r2, [pc, #152]	; (8004224 <TIM_Base_SetConfig+0xbc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d003      	beq.n	8004198 <TIM_Base_SetConfig+0x30>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a25      	ldr	r2, [pc, #148]	; (8004228 <TIM_Base_SetConfig+0xc0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d108      	bne.n	80041aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a1c      	ldr	r2, [pc, #112]	; (8004220 <TIM_Base_SetConfig+0xb8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00b      	beq.n	80041ca <TIM_Base_SetConfig+0x62>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d007      	beq.n	80041ca <TIM_Base_SetConfig+0x62>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a19      	ldr	r2, [pc, #100]	; (8004224 <TIM_Base_SetConfig+0xbc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <TIM_Base_SetConfig+0x62>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a18      	ldr	r2, [pc, #96]	; (8004228 <TIM_Base_SetConfig+0xc0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d108      	bne.n	80041dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a07      	ldr	r2, [pc, #28]	; (8004220 <TIM_Base_SetConfig+0xb8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d103      	bne.n	8004210 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	615a      	str	r2, [r3, #20]
}
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40000400 	.word	0x40000400
 8004228:	40000800 	.word	0x40000800

0800422c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0201 	bic.w	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f023 030a 	bic.w	r3, r3, #10
 8004268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f023 0210 	bic.w	r2, r3, #16
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	031b      	lsls	r3, r3, #12
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	621a      	str	r2, [r3, #32]
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr

080042e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	f043 0307 	orr.w	r3, r3, #7
 8004308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	609a      	str	r2, [r3, #8]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr

0800431a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800431a:	b480      	push	{r7}
 800431c:	b087      	sub	sp, #28
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004334:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	021a      	lsls	r2, r3, #8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	431a      	orrs	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4313      	orrs	r3, r2
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	609a      	str	r2, [r3, #8]
}
 800434e:	bf00      	nop
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr

08004358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800436c:	2302      	movs	r3, #2
 800436e:	e046      	b.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a16      	ldr	r2, [pc, #88]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00e      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043bc:	d009      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a12      	ldr	r2, [pc, #72]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a10      	ldr	r2, [pc, #64]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10c      	bne.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800

08004414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e03f      	b.n	80044ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc ff96 	bl	8001390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2224      	movs	r2, #36	; 0x24
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800447a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fbed 	bl	8004c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004490:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695a      	ldr	r2, [r3, #20]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b085      	sub	sp, #20
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	4613      	mov	r3, r2
 80044de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d130      	bne.n	800454e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_UART_Transmit_IT+0x26>
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e029      	b.n	8004550 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_UART_Transmit_IT+0x38>
 8004506:	2302      	movs	r3, #2
 8004508:	e022      	b.n	8004550 <HAL_UART_Transmit_IT+0x7e>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	88fa      	ldrh	r2, [r7, #6]
 8004522:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2221      	movs	r2, #33	; 0x21
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004548:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	4613      	mov	r3, r2
 8004566:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b20      	cmp	r3, #32
 8004572:	d11d      	bne.n	80045b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_UART_Receive_IT+0x26>
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e016      	b.n	80045b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_UART_Receive_IT+0x38>
 800458e:	2302      	movs	r3, #2
 8004590:	e00f      	b.n	80045b2 <HAL_UART_Receive_IT+0x58>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80045a0:	88fb      	ldrh	r3, [r7, #6]
 80045a2:	461a      	mov	r2, r3
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f9cf 	bl	800494a <UART_Start_Receive_IT>
 80045ac:	4603      	mov	r3, r0
 80045ae:	e000      	b.n	80045b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	; 0x28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80045dc:	2300      	movs	r3, #0
 80045de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_UART_IRQHandler+0x52>
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa7f 	bl	8004b0a <UART_Receive_IT>
      return;
 800460c:	e17b      	b.n	8004906 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80b1 	beq.w	8004778 <HAL_UART_IRQHandler+0x1bc>
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d105      	bne.n	800462c <HAL_UART_IRQHandler+0x70>
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80a6 	beq.w	8004778 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_UART_IRQHandler+0x90>
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	f043 0201 	orr.w	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_UART_IRQHandler+0xb0>
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	f043 0202 	orr.w	r2, r3, #2
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_UART_IRQHandler+0xd0>
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f043 0204 	orr.w	r2, r3, #4
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00f      	beq.n	80046b6 <HAL_UART_IRQHandler+0xfa>
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <HAL_UART_IRQHandler+0xee>
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f043 0208 	orr.w	r2, r3, #8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 811e 	beq.w	80048fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <HAL_UART_IRQHandler+0x11e>
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fa18 	bl	8004b0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d102      	bne.n	8004702 <HAL_UART_IRQHandler+0x146>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d031      	beq.n	8004766 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f95a 	bl	80049bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d023      	beq.n	800475e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004724:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	2b00      	cmp	r3, #0
 800472c:	d013      	beq.n	8004756 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	4a76      	ldr	r2, [pc, #472]	; (800490c <HAL_UART_IRQHandler+0x350>)
 8004734:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd fa10 	bl	8001b60 <HAL_DMA_Abort_IT>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d016      	beq.n	8004774 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004750:	4610      	mov	r0, r2
 8004752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004754:	e00e      	b.n	8004774 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f8e3 	bl	8004922 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475c:	e00a      	b.n	8004774 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f8df 	bl	8004922 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004764:	e006      	b.n	8004774 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f8db 	bl	8004922 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004772:	e0c3      	b.n	80048fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	bf00      	nop
    return;
 8004776:	e0c1      	b.n	80048fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	2b01      	cmp	r3, #1
 800477e:	f040 80a1 	bne.w	80048c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 809b 	beq.w	80048c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8095 	beq.w	80048c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d04e      	beq.n	800485c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80047c8:	8a3b      	ldrh	r3, [r7, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8098 	beq.w	8004900 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047d4:	8a3a      	ldrh	r2, [r7, #16]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	f080 8092 	bcs.w	8004900 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8a3a      	ldrh	r2, [r7, #16]
 80047e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d02b      	beq.n	8004844 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0210 	bic.w	r2, r2, #16
 8004838:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd f953 	bl	8001aea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800484c:	b29b      	uxth	r3, r3
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	b29b      	uxth	r3, r3
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f86d 	bl	8004934 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800485a:	e051      	b.n	8004900 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004864:	b29b      	uxth	r3, r3
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d047      	beq.n	8004904 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004874:	8a7b      	ldrh	r3, [r7, #18]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d044      	beq.n	8004904 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004888:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695a      	ldr	r2, [r3, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0210 	bic.w	r2, r2, #16
 80048b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048b8:	8a7b      	ldrh	r3, [r7, #18]
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f839 	bl	8004934 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80048c2:	e01f      	b.n	8004904 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_UART_IRQHandler+0x324>
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f8af 	bl	8004a3c <UART_Transmit_IT>
    return;
 80048de:	e012      	b.n	8004906 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00d      	beq.n	8004906 <HAL_UART_IRQHandler+0x34a>
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f8f0 	bl	8004ada <UART_EndTransmit_IT>
    return;
 80048fa:	e004      	b.n	8004906 <HAL_UART_IRQHandler+0x34a>
    return;
 80048fc:	bf00      	nop
 80048fe:	e002      	b.n	8004906 <HAL_UART_IRQHandler+0x34a>
      return;
 8004900:	bf00      	nop
 8004902:	e000      	b.n	8004906 <HAL_UART_IRQHandler+0x34a>
      return;
 8004904:	bf00      	nop
  }
}
 8004906:	3728      	adds	r7, #40	; 0x28
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	08004a15 	.word	0x08004a15

08004910 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr

08004922 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr

08004934 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr

0800494a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	4613      	mov	r3, r2
 8004956:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	88fa      	ldrh	r2, [r7, #6]
 8004962:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	88fa      	ldrh	r2, [r7, #6]
 8004968:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2222      	movs	r2, #34	; 0x22
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800498e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0220 	orr.w	r2, r2, #32
 80049ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695a      	ldr	r2, [r3, #20]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d107      	bne.n	80049fc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0210 	bic.w	r2, r2, #16
 80049fa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff ff77 	bl	8004922 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b21      	cmp	r3, #33	; 0x21
 8004a4e:	d13e      	bne.n	8004ace <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a58:	d114      	bne.n	8004a84 <UART_Transmit_IT+0x48>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d110      	bne.n	8004a84 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	1c9a      	adds	r2, r3, #2
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	621a      	str	r2, [r3, #32]
 8004a82:	e008      	b.n	8004a96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	1c59      	adds	r1, r3, #1
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6211      	str	r1, [r2, #32]
 8004a8e:	781a      	ldrb	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ab8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
  }
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff ff08 	bl	8004910 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b086      	sub	sp, #24
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b22      	cmp	r3, #34	; 0x22
 8004b1c:	f040 8099 	bne.w	8004c52 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b28:	d117      	bne.n	8004b5a <UART_Receive_IT+0x50>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d113      	bne.n	8004b5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	629a      	str	r2, [r3, #40]	; 0x28
 8004b58:	e026      	b.n	8004ba8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6c:	d007      	beq.n	8004b7e <UART_Receive_IT+0x74>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <UART_Receive_IT+0x82>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e008      	b.n	8004b9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d148      	bne.n	8004c4e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0220 	bic.w	r2, r2, #32
 8004bca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695a      	ldr	r2, [r3, #20]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d123      	bne.n	8004c44 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0210 	bic.w	r2, r2, #16
 8004c10:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d10a      	bne.n	8004c36 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff fe79 	bl	8004934 <HAL_UARTEx_RxEventCallback>
 8004c42:	e002      	b.n	8004c4a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7fc fa83 	bl	8001150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e002      	b.n	8004c54 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e000      	b.n	8004c54 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c52:	2302      	movs	r3, #2
  }
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c96:	f023 030c 	bic.w	r3, r3, #12
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a2c      	ldr	r2, [pc, #176]	; (8004d70 <UART_SetConfig+0x114>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d103      	bne.n	8004ccc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cc4:	f7fe f9e8 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	e002      	b.n	8004cd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ccc:	f7fe f9d0 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 8004cd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009a      	lsls	r2, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <UART_SetConfig+0x118>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	0119      	lsls	r1, r3, #4
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009a      	lsls	r2, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d08:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <UART_SetConfig+0x118>)
 8004d0a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	2064      	movs	r0, #100	; 0x64
 8004d12:	fb00 f303 	mul.w	r3, r0, r3
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	3332      	adds	r3, #50	; 0x32
 8004d1c:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <UART_SetConfig+0x118>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d28:	4419      	add	r1, r3
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <UART_SetConfig+0x118>)
 8004d42:	fba3 0302 	umull	r0, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2064      	movs	r0, #100	; 0x64
 8004d4a:	fb00 f303 	mul.w	r3, r0, r3
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	3332      	adds	r3, #50	; 0x32
 8004d54:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <UART_SetConfig+0x118>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	f003 020f 	and.w	r2, r3, #15
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	440a      	add	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40013800 	.word	0x40013800
 8004d74:	51eb851f 	.word	0x51eb851f

08004d78 <__errno>:
 8004d78:	4b01      	ldr	r3, [pc, #4]	; (8004d80 <__errno+0x8>)
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	2000001c 	.word	0x2000001c

08004d84 <__libc_init_array>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	2600      	movs	r6, #0
 8004d88:	4d0c      	ldr	r5, [pc, #48]	; (8004dbc <__libc_init_array+0x38>)
 8004d8a:	4c0d      	ldr	r4, [pc, #52]	; (8004dc0 <__libc_init_array+0x3c>)
 8004d8c:	1b64      	subs	r4, r4, r5
 8004d8e:	10a4      	asrs	r4, r4, #2
 8004d90:	42a6      	cmp	r6, r4
 8004d92:	d109      	bne.n	8004da8 <__libc_init_array+0x24>
 8004d94:	f000 fc64 	bl	8005660 <_init>
 8004d98:	2600      	movs	r6, #0
 8004d9a:	4d0a      	ldr	r5, [pc, #40]	; (8004dc4 <__libc_init_array+0x40>)
 8004d9c:	4c0a      	ldr	r4, [pc, #40]	; (8004dc8 <__libc_init_array+0x44>)
 8004d9e:	1b64      	subs	r4, r4, r5
 8004da0:	10a4      	asrs	r4, r4, #2
 8004da2:	42a6      	cmp	r6, r4
 8004da4:	d105      	bne.n	8004db2 <__libc_init_array+0x2e>
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
 8004da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dac:	4798      	blx	r3
 8004dae:	3601      	adds	r6, #1
 8004db0:	e7ee      	b.n	8004d90 <__libc_init_array+0xc>
 8004db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db6:	4798      	blx	r3
 8004db8:	3601      	adds	r6, #1
 8004dba:	e7f2      	b.n	8004da2 <__libc_init_array+0x1e>
 8004dbc:	08005e84 	.word	0x08005e84
 8004dc0:	08005e84 	.word	0x08005e84
 8004dc4:	08005e84 	.word	0x08005e84
 8004dc8:	08005e88 	.word	0x08005e88

08004dcc <memcpy>:
 8004dcc:	440a      	add	r2, r1
 8004dce:	4291      	cmp	r1, r2
 8004dd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004dd4:	d100      	bne.n	8004dd8 <memcpy+0xc>
 8004dd6:	4770      	bx	lr
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dde:	4291      	cmp	r1, r2
 8004de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004de4:	d1f9      	bne.n	8004dda <memcpy+0xe>
 8004de6:	bd10      	pop	{r4, pc}

08004de8 <memset>:
 8004de8:	4603      	mov	r3, r0
 8004dea:	4402      	add	r2, r0
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d100      	bne.n	8004df2 <memset+0xa>
 8004df0:	4770      	bx	lr
 8004df2:	f803 1b01 	strb.w	r1, [r3], #1
 8004df6:	e7f9      	b.n	8004dec <memset+0x4>

08004df8 <_free_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	d043      	beq.n	8004e88 <_free_r+0x90>
 8004e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e04:	1f0c      	subs	r4, r1, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bfb8      	it	lt
 8004e0a:	18e4      	addlt	r4, r4, r3
 8004e0c:	f000 f8d2 	bl	8004fb4 <__malloc_lock>
 8004e10:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <_free_r+0x94>)
 8004e12:	6813      	ldr	r3, [r2, #0]
 8004e14:	4610      	mov	r0, r2
 8004e16:	b933      	cbnz	r3, 8004e26 <_free_r+0x2e>
 8004e18:	6063      	str	r3, [r4, #4]
 8004e1a:	6014      	str	r4, [r2, #0]
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e22:	f000 b8cd 	b.w	8004fc0 <__malloc_unlock>
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	d90a      	bls.n	8004e40 <_free_r+0x48>
 8004e2a:	6821      	ldr	r1, [r4, #0]
 8004e2c:	1862      	adds	r2, r4, r1
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	bf01      	itttt	eq
 8004e32:	681a      	ldreq	r2, [r3, #0]
 8004e34:	685b      	ldreq	r3, [r3, #4]
 8004e36:	1852      	addeq	r2, r2, r1
 8004e38:	6022      	streq	r2, [r4, #0]
 8004e3a:	6063      	str	r3, [r4, #4]
 8004e3c:	6004      	str	r4, [r0, #0]
 8004e3e:	e7ed      	b.n	8004e1c <_free_r+0x24>
 8004e40:	461a      	mov	r2, r3
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	b10b      	cbz	r3, 8004e4a <_free_r+0x52>
 8004e46:	42a3      	cmp	r3, r4
 8004e48:	d9fa      	bls.n	8004e40 <_free_r+0x48>
 8004e4a:	6811      	ldr	r1, [r2, #0]
 8004e4c:	1850      	adds	r0, r2, r1
 8004e4e:	42a0      	cmp	r0, r4
 8004e50:	d10b      	bne.n	8004e6a <_free_r+0x72>
 8004e52:	6820      	ldr	r0, [r4, #0]
 8004e54:	4401      	add	r1, r0
 8004e56:	1850      	adds	r0, r2, r1
 8004e58:	4283      	cmp	r3, r0
 8004e5a:	6011      	str	r1, [r2, #0]
 8004e5c:	d1de      	bne.n	8004e1c <_free_r+0x24>
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4401      	add	r1, r0
 8004e64:	6011      	str	r1, [r2, #0]
 8004e66:	6053      	str	r3, [r2, #4]
 8004e68:	e7d8      	b.n	8004e1c <_free_r+0x24>
 8004e6a:	d902      	bls.n	8004e72 <_free_r+0x7a>
 8004e6c:	230c      	movs	r3, #12
 8004e6e:	602b      	str	r3, [r5, #0]
 8004e70:	e7d4      	b.n	8004e1c <_free_r+0x24>
 8004e72:	6820      	ldr	r0, [r4, #0]
 8004e74:	1821      	adds	r1, r4, r0
 8004e76:	428b      	cmp	r3, r1
 8004e78:	bf01      	itttt	eq
 8004e7a:	6819      	ldreq	r1, [r3, #0]
 8004e7c:	685b      	ldreq	r3, [r3, #4]
 8004e7e:	1809      	addeq	r1, r1, r0
 8004e80:	6021      	streq	r1, [r4, #0]
 8004e82:	6063      	str	r3, [r4, #4]
 8004e84:	6054      	str	r4, [r2, #4]
 8004e86:	e7c9      	b.n	8004e1c <_free_r+0x24>
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000534 	.word	0x20000534

08004e90 <_malloc_r>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	1ccd      	adds	r5, r1, #3
 8004e94:	f025 0503 	bic.w	r5, r5, #3
 8004e98:	3508      	adds	r5, #8
 8004e9a:	2d0c      	cmp	r5, #12
 8004e9c:	bf38      	it	cc
 8004e9e:	250c      	movcc	r5, #12
 8004ea0:	2d00      	cmp	r5, #0
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	db01      	blt.n	8004eaa <_malloc_r+0x1a>
 8004ea6:	42a9      	cmp	r1, r5
 8004ea8:	d903      	bls.n	8004eb2 <_malloc_r+0x22>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	6033      	str	r3, [r6, #0]
 8004eae:	2000      	movs	r0, #0
 8004eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb2:	f000 f87f 	bl	8004fb4 <__malloc_lock>
 8004eb6:	4921      	ldr	r1, [pc, #132]	; (8004f3c <_malloc_r+0xac>)
 8004eb8:	680a      	ldr	r2, [r1, #0]
 8004eba:	4614      	mov	r4, r2
 8004ebc:	b99c      	cbnz	r4, 8004ee6 <_malloc_r+0x56>
 8004ebe:	4f20      	ldr	r7, [pc, #128]	; (8004f40 <_malloc_r+0xb0>)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	b923      	cbnz	r3, 8004ece <_malloc_r+0x3e>
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f000 f83c 	bl	8004f44 <_sbrk_r>
 8004ecc:	6038      	str	r0, [r7, #0]
 8004ece:	4629      	mov	r1, r5
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f000 f837 	bl	8004f44 <_sbrk_r>
 8004ed6:	1c43      	adds	r3, r0, #1
 8004ed8:	d123      	bne.n	8004f22 <_malloc_r+0x92>
 8004eda:	230c      	movs	r3, #12
 8004edc:	4630      	mov	r0, r6
 8004ede:	6033      	str	r3, [r6, #0]
 8004ee0:	f000 f86e 	bl	8004fc0 <__malloc_unlock>
 8004ee4:	e7e3      	b.n	8004eae <_malloc_r+0x1e>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	1b5b      	subs	r3, r3, r5
 8004eea:	d417      	bmi.n	8004f1c <_malloc_r+0x8c>
 8004eec:	2b0b      	cmp	r3, #11
 8004eee:	d903      	bls.n	8004ef8 <_malloc_r+0x68>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	441c      	add	r4, r3
 8004ef4:	6025      	str	r5, [r4, #0]
 8004ef6:	e004      	b.n	8004f02 <_malloc_r+0x72>
 8004ef8:	6863      	ldr	r3, [r4, #4]
 8004efa:	42a2      	cmp	r2, r4
 8004efc:	bf0c      	ite	eq
 8004efe:	600b      	streq	r3, [r1, #0]
 8004f00:	6053      	strne	r3, [r2, #4]
 8004f02:	4630      	mov	r0, r6
 8004f04:	f000 f85c 	bl	8004fc0 <__malloc_unlock>
 8004f08:	f104 000b 	add.w	r0, r4, #11
 8004f0c:	1d23      	adds	r3, r4, #4
 8004f0e:	f020 0007 	bic.w	r0, r0, #7
 8004f12:	1ac2      	subs	r2, r0, r3
 8004f14:	d0cc      	beq.n	8004eb0 <_malloc_r+0x20>
 8004f16:	1a1b      	subs	r3, r3, r0
 8004f18:	50a3      	str	r3, [r4, r2]
 8004f1a:	e7c9      	b.n	8004eb0 <_malloc_r+0x20>
 8004f1c:	4622      	mov	r2, r4
 8004f1e:	6864      	ldr	r4, [r4, #4]
 8004f20:	e7cc      	b.n	8004ebc <_malloc_r+0x2c>
 8004f22:	1cc4      	adds	r4, r0, #3
 8004f24:	f024 0403 	bic.w	r4, r4, #3
 8004f28:	42a0      	cmp	r0, r4
 8004f2a:	d0e3      	beq.n	8004ef4 <_malloc_r+0x64>
 8004f2c:	1a21      	subs	r1, r4, r0
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f000 f808 	bl	8004f44 <_sbrk_r>
 8004f34:	3001      	adds	r0, #1
 8004f36:	d1dd      	bne.n	8004ef4 <_malloc_r+0x64>
 8004f38:	e7cf      	b.n	8004eda <_malloc_r+0x4a>
 8004f3a:	bf00      	nop
 8004f3c:	20000534 	.word	0x20000534
 8004f40:	20000538 	.word	0x20000538

08004f44 <_sbrk_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	2300      	movs	r3, #0
 8004f48:	4d05      	ldr	r5, [pc, #20]	; (8004f60 <_sbrk_r+0x1c>)
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	602b      	str	r3, [r5, #0]
 8004f50:	f7fc fbd6 	bl	8001700 <_sbrk>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d102      	bne.n	8004f5e <_sbrk_r+0x1a>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	b103      	cbz	r3, 8004f5e <_sbrk_r+0x1a>
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	200006bc 	.word	0x200006bc

08004f64 <siprintf>:
 8004f64:	b40e      	push	{r1, r2, r3}
 8004f66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f6a:	b500      	push	{lr}
 8004f6c:	b09c      	sub	sp, #112	; 0x70
 8004f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004f70:	9002      	str	r0, [sp, #8]
 8004f72:	9006      	str	r0, [sp, #24]
 8004f74:	9107      	str	r1, [sp, #28]
 8004f76:	9104      	str	r1, [sp, #16]
 8004f78:	4808      	ldr	r0, [pc, #32]	; (8004f9c <siprintf+0x38>)
 8004f7a:	4909      	ldr	r1, [pc, #36]	; (8004fa0 <siprintf+0x3c>)
 8004f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f80:	9105      	str	r1, [sp, #20]
 8004f82:	6800      	ldr	r0, [r0, #0]
 8004f84:	a902      	add	r1, sp, #8
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	f000 f87c 	bl	8005084 <_svfiprintf_r>
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	9b02      	ldr	r3, [sp, #8]
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	b01c      	add	sp, #112	; 0x70
 8004f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f98:	b003      	add	sp, #12
 8004f9a:	4770      	bx	lr
 8004f9c:	2000001c 	.word	0x2000001c
 8004fa0:	ffff0208 	.word	0xffff0208

08004fa4 <strcpy>:
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004faa:	f803 2b01 	strb.w	r2, [r3], #1
 8004fae:	2a00      	cmp	r2, #0
 8004fb0:	d1f9      	bne.n	8004fa6 <strcpy+0x2>
 8004fb2:	4770      	bx	lr

08004fb4 <__malloc_lock>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__malloc_lock+0x8>)
 8004fb6:	f000 bafb 	b.w	80055b0 <__retarget_lock_acquire_recursive>
 8004fba:	bf00      	nop
 8004fbc:	200006c4 	.word	0x200006c4

08004fc0 <__malloc_unlock>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__malloc_unlock+0x8>)
 8004fc2:	f000 baf6 	b.w	80055b2 <__retarget_lock_release_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	200006c4 	.word	0x200006c4

08004fcc <__ssputs_r>:
 8004fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd0:	688e      	ldr	r6, [r1, #8]
 8004fd2:	4682      	mov	sl, r0
 8004fd4:	429e      	cmp	r6, r3
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	4690      	mov	r8, r2
 8004fda:	461f      	mov	r7, r3
 8004fdc:	d838      	bhi.n	8005050 <__ssputs_r+0x84>
 8004fde:	898a      	ldrh	r2, [r1, #12]
 8004fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fe4:	d032      	beq.n	800504c <__ssputs_r+0x80>
 8004fe6:	6825      	ldr	r5, [r4, #0]
 8004fe8:	6909      	ldr	r1, [r1, #16]
 8004fea:	3301      	adds	r3, #1
 8004fec:	eba5 0901 	sub.w	r9, r5, r1
 8004ff0:	6965      	ldr	r5, [r4, #20]
 8004ff2:	444b      	add	r3, r9
 8004ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ffc:	106d      	asrs	r5, r5, #1
 8004ffe:	429d      	cmp	r5, r3
 8005000:	bf38      	it	cc
 8005002:	461d      	movcc	r5, r3
 8005004:	0553      	lsls	r3, r2, #21
 8005006:	d531      	bpl.n	800506c <__ssputs_r+0xa0>
 8005008:	4629      	mov	r1, r5
 800500a:	f7ff ff41 	bl	8004e90 <_malloc_r>
 800500e:	4606      	mov	r6, r0
 8005010:	b950      	cbnz	r0, 8005028 <__ssputs_r+0x5c>
 8005012:	230c      	movs	r3, #12
 8005014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005018:	f8ca 3000 	str.w	r3, [sl]
 800501c:	89a3      	ldrh	r3, [r4, #12]
 800501e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005022:	81a3      	strh	r3, [r4, #12]
 8005024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005028:	464a      	mov	r2, r9
 800502a:	6921      	ldr	r1, [r4, #16]
 800502c:	f7ff fece 	bl	8004dcc <memcpy>
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503a:	81a3      	strh	r3, [r4, #12]
 800503c:	6126      	str	r6, [r4, #16]
 800503e:	444e      	add	r6, r9
 8005040:	6026      	str	r6, [r4, #0]
 8005042:	463e      	mov	r6, r7
 8005044:	6165      	str	r5, [r4, #20]
 8005046:	eba5 0509 	sub.w	r5, r5, r9
 800504a:	60a5      	str	r5, [r4, #8]
 800504c:	42be      	cmp	r6, r7
 800504e:	d900      	bls.n	8005052 <__ssputs_r+0x86>
 8005050:	463e      	mov	r6, r7
 8005052:	4632      	mov	r2, r6
 8005054:	4641      	mov	r1, r8
 8005056:	6820      	ldr	r0, [r4, #0]
 8005058:	f000 faba 	bl	80055d0 <memmove>
 800505c:	68a3      	ldr	r3, [r4, #8]
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	1b9b      	subs	r3, r3, r6
 8005062:	4432      	add	r2, r6
 8005064:	2000      	movs	r0, #0
 8005066:	60a3      	str	r3, [r4, #8]
 8005068:	6022      	str	r2, [r4, #0]
 800506a:	e7db      	b.n	8005024 <__ssputs_r+0x58>
 800506c:	462a      	mov	r2, r5
 800506e:	f000 fac9 	bl	8005604 <_realloc_r>
 8005072:	4606      	mov	r6, r0
 8005074:	2800      	cmp	r0, #0
 8005076:	d1e1      	bne.n	800503c <__ssputs_r+0x70>
 8005078:	4650      	mov	r0, sl
 800507a:	6921      	ldr	r1, [r4, #16]
 800507c:	f7ff febc 	bl	8004df8 <_free_r>
 8005080:	e7c7      	b.n	8005012 <__ssputs_r+0x46>
	...

08005084 <_svfiprintf_r>:
 8005084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005088:	4698      	mov	r8, r3
 800508a:	898b      	ldrh	r3, [r1, #12]
 800508c:	4607      	mov	r7, r0
 800508e:	061b      	lsls	r3, r3, #24
 8005090:	460d      	mov	r5, r1
 8005092:	4614      	mov	r4, r2
 8005094:	b09d      	sub	sp, #116	; 0x74
 8005096:	d50e      	bpl.n	80050b6 <_svfiprintf_r+0x32>
 8005098:	690b      	ldr	r3, [r1, #16]
 800509a:	b963      	cbnz	r3, 80050b6 <_svfiprintf_r+0x32>
 800509c:	2140      	movs	r1, #64	; 0x40
 800509e:	f7ff fef7 	bl	8004e90 <_malloc_r>
 80050a2:	6028      	str	r0, [r5, #0]
 80050a4:	6128      	str	r0, [r5, #16]
 80050a6:	b920      	cbnz	r0, 80050b2 <_svfiprintf_r+0x2e>
 80050a8:	230c      	movs	r3, #12
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050b0:	e0d1      	b.n	8005256 <_svfiprintf_r+0x1d2>
 80050b2:	2340      	movs	r3, #64	; 0x40
 80050b4:	616b      	str	r3, [r5, #20]
 80050b6:	2300      	movs	r3, #0
 80050b8:	9309      	str	r3, [sp, #36]	; 0x24
 80050ba:	2320      	movs	r3, #32
 80050bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050c0:	2330      	movs	r3, #48	; 0x30
 80050c2:	f04f 0901 	mov.w	r9, #1
 80050c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005270 <_svfiprintf_r+0x1ec>
 80050ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050d2:	4623      	mov	r3, r4
 80050d4:	469a      	mov	sl, r3
 80050d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050da:	b10a      	cbz	r2, 80050e0 <_svfiprintf_r+0x5c>
 80050dc:	2a25      	cmp	r2, #37	; 0x25
 80050de:	d1f9      	bne.n	80050d4 <_svfiprintf_r+0x50>
 80050e0:	ebba 0b04 	subs.w	fp, sl, r4
 80050e4:	d00b      	beq.n	80050fe <_svfiprintf_r+0x7a>
 80050e6:	465b      	mov	r3, fp
 80050e8:	4622      	mov	r2, r4
 80050ea:	4629      	mov	r1, r5
 80050ec:	4638      	mov	r0, r7
 80050ee:	f7ff ff6d 	bl	8004fcc <__ssputs_r>
 80050f2:	3001      	adds	r0, #1
 80050f4:	f000 80aa 	beq.w	800524c <_svfiprintf_r+0x1c8>
 80050f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050fa:	445a      	add	r2, fp
 80050fc:	9209      	str	r2, [sp, #36]	; 0x24
 80050fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 80a2 	beq.w	800524c <_svfiprintf_r+0x1c8>
 8005108:	2300      	movs	r3, #0
 800510a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800510e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005112:	f10a 0a01 	add.w	sl, sl, #1
 8005116:	9304      	str	r3, [sp, #16]
 8005118:	9307      	str	r3, [sp, #28]
 800511a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800511e:	931a      	str	r3, [sp, #104]	; 0x68
 8005120:	4654      	mov	r4, sl
 8005122:	2205      	movs	r2, #5
 8005124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005128:	4851      	ldr	r0, [pc, #324]	; (8005270 <_svfiprintf_r+0x1ec>)
 800512a:	f000 fa43 	bl	80055b4 <memchr>
 800512e:	9a04      	ldr	r2, [sp, #16]
 8005130:	b9d8      	cbnz	r0, 800516a <_svfiprintf_r+0xe6>
 8005132:	06d0      	lsls	r0, r2, #27
 8005134:	bf44      	itt	mi
 8005136:	2320      	movmi	r3, #32
 8005138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800513c:	0711      	lsls	r1, r2, #28
 800513e:	bf44      	itt	mi
 8005140:	232b      	movmi	r3, #43	; 0x2b
 8005142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005146:	f89a 3000 	ldrb.w	r3, [sl]
 800514a:	2b2a      	cmp	r3, #42	; 0x2a
 800514c:	d015      	beq.n	800517a <_svfiprintf_r+0xf6>
 800514e:	4654      	mov	r4, sl
 8005150:	2000      	movs	r0, #0
 8005152:	f04f 0c0a 	mov.w	ip, #10
 8005156:	9a07      	ldr	r2, [sp, #28]
 8005158:	4621      	mov	r1, r4
 800515a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800515e:	3b30      	subs	r3, #48	; 0x30
 8005160:	2b09      	cmp	r3, #9
 8005162:	d94e      	bls.n	8005202 <_svfiprintf_r+0x17e>
 8005164:	b1b0      	cbz	r0, 8005194 <_svfiprintf_r+0x110>
 8005166:	9207      	str	r2, [sp, #28]
 8005168:	e014      	b.n	8005194 <_svfiprintf_r+0x110>
 800516a:	eba0 0308 	sub.w	r3, r0, r8
 800516e:	fa09 f303 	lsl.w	r3, r9, r3
 8005172:	4313      	orrs	r3, r2
 8005174:	46a2      	mov	sl, r4
 8005176:	9304      	str	r3, [sp, #16]
 8005178:	e7d2      	b.n	8005120 <_svfiprintf_r+0x9c>
 800517a:	9b03      	ldr	r3, [sp, #12]
 800517c:	1d19      	adds	r1, r3, #4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	9103      	str	r1, [sp, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	bfbb      	ittet	lt
 8005186:	425b      	neglt	r3, r3
 8005188:	f042 0202 	orrlt.w	r2, r2, #2
 800518c:	9307      	strge	r3, [sp, #28]
 800518e:	9307      	strlt	r3, [sp, #28]
 8005190:	bfb8      	it	lt
 8005192:	9204      	strlt	r2, [sp, #16]
 8005194:	7823      	ldrb	r3, [r4, #0]
 8005196:	2b2e      	cmp	r3, #46	; 0x2e
 8005198:	d10c      	bne.n	80051b4 <_svfiprintf_r+0x130>
 800519a:	7863      	ldrb	r3, [r4, #1]
 800519c:	2b2a      	cmp	r3, #42	; 0x2a
 800519e:	d135      	bne.n	800520c <_svfiprintf_r+0x188>
 80051a0:	9b03      	ldr	r3, [sp, #12]
 80051a2:	3402      	adds	r4, #2
 80051a4:	1d1a      	adds	r2, r3, #4
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	9203      	str	r2, [sp, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bfb8      	it	lt
 80051ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80051b2:	9305      	str	r3, [sp, #20]
 80051b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005280 <_svfiprintf_r+0x1fc>
 80051b8:	2203      	movs	r2, #3
 80051ba:	4650      	mov	r0, sl
 80051bc:	7821      	ldrb	r1, [r4, #0]
 80051be:	f000 f9f9 	bl	80055b4 <memchr>
 80051c2:	b140      	cbz	r0, 80051d6 <_svfiprintf_r+0x152>
 80051c4:	2340      	movs	r3, #64	; 0x40
 80051c6:	eba0 000a 	sub.w	r0, r0, sl
 80051ca:	fa03 f000 	lsl.w	r0, r3, r0
 80051ce:	9b04      	ldr	r3, [sp, #16]
 80051d0:	3401      	adds	r4, #1
 80051d2:	4303      	orrs	r3, r0
 80051d4:	9304      	str	r3, [sp, #16]
 80051d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051da:	2206      	movs	r2, #6
 80051dc:	4825      	ldr	r0, [pc, #148]	; (8005274 <_svfiprintf_r+0x1f0>)
 80051de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051e2:	f000 f9e7 	bl	80055b4 <memchr>
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d038      	beq.n	800525c <_svfiprintf_r+0x1d8>
 80051ea:	4b23      	ldr	r3, [pc, #140]	; (8005278 <_svfiprintf_r+0x1f4>)
 80051ec:	bb1b      	cbnz	r3, 8005236 <_svfiprintf_r+0x1b2>
 80051ee:	9b03      	ldr	r3, [sp, #12]
 80051f0:	3307      	adds	r3, #7
 80051f2:	f023 0307 	bic.w	r3, r3, #7
 80051f6:	3308      	adds	r3, #8
 80051f8:	9303      	str	r3, [sp, #12]
 80051fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051fc:	4433      	add	r3, r6
 80051fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005200:	e767      	b.n	80050d2 <_svfiprintf_r+0x4e>
 8005202:	460c      	mov	r4, r1
 8005204:	2001      	movs	r0, #1
 8005206:	fb0c 3202 	mla	r2, ip, r2, r3
 800520a:	e7a5      	b.n	8005158 <_svfiprintf_r+0xd4>
 800520c:	2300      	movs	r3, #0
 800520e:	f04f 0c0a 	mov.w	ip, #10
 8005212:	4619      	mov	r1, r3
 8005214:	3401      	adds	r4, #1
 8005216:	9305      	str	r3, [sp, #20]
 8005218:	4620      	mov	r0, r4
 800521a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800521e:	3a30      	subs	r2, #48	; 0x30
 8005220:	2a09      	cmp	r2, #9
 8005222:	d903      	bls.n	800522c <_svfiprintf_r+0x1a8>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0c5      	beq.n	80051b4 <_svfiprintf_r+0x130>
 8005228:	9105      	str	r1, [sp, #20]
 800522a:	e7c3      	b.n	80051b4 <_svfiprintf_r+0x130>
 800522c:	4604      	mov	r4, r0
 800522e:	2301      	movs	r3, #1
 8005230:	fb0c 2101 	mla	r1, ip, r1, r2
 8005234:	e7f0      	b.n	8005218 <_svfiprintf_r+0x194>
 8005236:	ab03      	add	r3, sp, #12
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	462a      	mov	r2, r5
 800523c:	4638      	mov	r0, r7
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <_svfiprintf_r+0x1f8>)
 8005240:	a904      	add	r1, sp, #16
 8005242:	f3af 8000 	nop.w
 8005246:	1c42      	adds	r2, r0, #1
 8005248:	4606      	mov	r6, r0
 800524a:	d1d6      	bne.n	80051fa <_svfiprintf_r+0x176>
 800524c:	89ab      	ldrh	r3, [r5, #12]
 800524e:	065b      	lsls	r3, r3, #25
 8005250:	f53f af2c 	bmi.w	80050ac <_svfiprintf_r+0x28>
 8005254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005256:	b01d      	add	sp, #116	; 0x74
 8005258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525c:	ab03      	add	r3, sp, #12
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	462a      	mov	r2, r5
 8005262:	4638      	mov	r0, r7
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <_svfiprintf_r+0x1f8>)
 8005266:	a904      	add	r1, sp, #16
 8005268:	f000 f87c 	bl	8005364 <_printf_i>
 800526c:	e7eb      	b.n	8005246 <_svfiprintf_r+0x1c2>
 800526e:	bf00      	nop
 8005270:	08005e50 	.word	0x08005e50
 8005274:	08005e5a 	.word	0x08005e5a
 8005278:	00000000 	.word	0x00000000
 800527c:	08004fcd 	.word	0x08004fcd
 8005280:	08005e56 	.word	0x08005e56

08005284 <_printf_common>:
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	4616      	mov	r6, r2
 800528a:	4699      	mov	r9, r3
 800528c:	688a      	ldr	r2, [r1, #8]
 800528e:	690b      	ldr	r3, [r1, #16]
 8005290:	4607      	mov	r7, r0
 8005292:	4293      	cmp	r3, r2
 8005294:	bfb8      	it	lt
 8005296:	4613      	movlt	r3, r2
 8005298:	6033      	str	r3, [r6, #0]
 800529a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800529e:	460c      	mov	r4, r1
 80052a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a4:	b10a      	cbz	r2, 80052aa <_printf_common+0x26>
 80052a6:	3301      	adds	r3, #1
 80052a8:	6033      	str	r3, [r6, #0]
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	0699      	lsls	r1, r3, #26
 80052ae:	bf42      	ittt	mi
 80052b0:	6833      	ldrmi	r3, [r6, #0]
 80052b2:	3302      	addmi	r3, #2
 80052b4:	6033      	strmi	r3, [r6, #0]
 80052b6:	6825      	ldr	r5, [r4, #0]
 80052b8:	f015 0506 	ands.w	r5, r5, #6
 80052bc:	d106      	bne.n	80052cc <_printf_common+0x48>
 80052be:	f104 0a19 	add.w	sl, r4, #25
 80052c2:	68e3      	ldr	r3, [r4, #12]
 80052c4:	6832      	ldr	r2, [r6, #0]
 80052c6:	1a9b      	subs	r3, r3, r2
 80052c8:	42ab      	cmp	r3, r5
 80052ca:	dc28      	bgt.n	800531e <_printf_common+0x9a>
 80052cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052d0:	1e13      	subs	r3, r2, #0
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	bf18      	it	ne
 80052d6:	2301      	movne	r3, #1
 80052d8:	0692      	lsls	r2, r2, #26
 80052da:	d42d      	bmi.n	8005338 <_printf_common+0xb4>
 80052dc:	4649      	mov	r1, r9
 80052de:	4638      	mov	r0, r7
 80052e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052e4:	47c0      	blx	r8
 80052e6:	3001      	adds	r0, #1
 80052e8:	d020      	beq.n	800532c <_printf_common+0xa8>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	68e5      	ldr	r5, [r4, #12]
 80052ee:	f003 0306 	and.w	r3, r3, #6
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	bf18      	it	ne
 80052f6:	2500      	movne	r5, #0
 80052f8:	6832      	ldr	r2, [r6, #0]
 80052fa:	f04f 0600 	mov.w	r6, #0
 80052fe:	68a3      	ldr	r3, [r4, #8]
 8005300:	bf08      	it	eq
 8005302:	1aad      	subeq	r5, r5, r2
 8005304:	6922      	ldr	r2, [r4, #16]
 8005306:	bf08      	it	eq
 8005308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800530c:	4293      	cmp	r3, r2
 800530e:	bfc4      	itt	gt
 8005310:	1a9b      	subgt	r3, r3, r2
 8005312:	18ed      	addgt	r5, r5, r3
 8005314:	341a      	adds	r4, #26
 8005316:	42b5      	cmp	r5, r6
 8005318:	d11a      	bne.n	8005350 <_printf_common+0xcc>
 800531a:	2000      	movs	r0, #0
 800531c:	e008      	b.n	8005330 <_printf_common+0xac>
 800531e:	2301      	movs	r3, #1
 8005320:	4652      	mov	r2, sl
 8005322:	4649      	mov	r1, r9
 8005324:	4638      	mov	r0, r7
 8005326:	47c0      	blx	r8
 8005328:	3001      	adds	r0, #1
 800532a:	d103      	bne.n	8005334 <_printf_common+0xb0>
 800532c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005334:	3501      	adds	r5, #1
 8005336:	e7c4      	b.n	80052c2 <_printf_common+0x3e>
 8005338:	2030      	movs	r0, #48	; 0x30
 800533a:	18e1      	adds	r1, r4, r3
 800533c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005346:	4422      	add	r2, r4
 8005348:	3302      	adds	r3, #2
 800534a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800534e:	e7c5      	b.n	80052dc <_printf_common+0x58>
 8005350:	2301      	movs	r3, #1
 8005352:	4622      	mov	r2, r4
 8005354:	4649      	mov	r1, r9
 8005356:	4638      	mov	r0, r7
 8005358:	47c0      	blx	r8
 800535a:	3001      	adds	r0, #1
 800535c:	d0e6      	beq.n	800532c <_printf_common+0xa8>
 800535e:	3601      	adds	r6, #1
 8005360:	e7d9      	b.n	8005316 <_printf_common+0x92>
	...

08005364 <_printf_i>:
 8005364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	460c      	mov	r4, r1
 800536a:	7e27      	ldrb	r7, [r4, #24]
 800536c:	4691      	mov	r9, r2
 800536e:	2f78      	cmp	r7, #120	; 0x78
 8005370:	4680      	mov	r8, r0
 8005372:	469a      	mov	sl, r3
 8005374:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800537a:	d807      	bhi.n	800538c <_printf_i+0x28>
 800537c:	2f62      	cmp	r7, #98	; 0x62
 800537e:	d80a      	bhi.n	8005396 <_printf_i+0x32>
 8005380:	2f00      	cmp	r7, #0
 8005382:	f000 80d9 	beq.w	8005538 <_printf_i+0x1d4>
 8005386:	2f58      	cmp	r7, #88	; 0x58
 8005388:	f000 80a4 	beq.w	80054d4 <_printf_i+0x170>
 800538c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005394:	e03a      	b.n	800540c <_printf_i+0xa8>
 8005396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800539a:	2b15      	cmp	r3, #21
 800539c:	d8f6      	bhi.n	800538c <_printf_i+0x28>
 800539e:	a001      	add	r0, pc, #4	; (adr r0, 80053a4 <_printf_i+0x40>)
 80053a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053a4:	080053fd 	.word	0x080053fd
 80053a8:	08005411 	.word	0x08005411
 80053ac:	0800538d 	.word	0x0800538d
 80053b0:	0800538d 	.word	0x0800538d
 80053b4:	0800538d 	.word	0x0800538d
 80053b8:	0800538d 	.word	0x0800538d
 80053bc:	08005411 	.word	0x08005411
 80053c0:	0800538d 	.word	0x0800538d
 80053c4:	0800538d 	.word	0x0800538d
 80053c8:	0800538d 	.word	0x0800538d
 80053cc:	0800538d 	.word	0x0800538d
 80053d0:	0800551f 	.word	0x0800551f
 80053d4:	08005441 	.word	0x08005441
 80053d8:	08005501 	.word	0x08005501
 80053dc:	0800538d 	.word	0x0800538d
 80053e0:	0800538d 	.word	0x0800538d
 80053e4:	08005541 	.word	0x08005541
 80053e8:	0800538d 	.word	0x0800538d
 80053ec:	08005441 	.word	0x08005441
 80053f0:	0800538d 	.word	0x0800538d
 80053f4:	0800538d 	.word	0x0800538d
 80053f8:	08005509 	.word	0x08005509
 80053fc:	680b      	ldr	r3, [r1, #0]
 80053fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005402:	1d1a      	adds	r2, r3, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	600a      	str	r2, [r1, #0]
 8005408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800540c:	2301      	movs	r3, #1
 800540e:	e0a4      	b.n	800555a <_printf_i+0x1f6>
 8005410:	6825      	ldr	r5, [r4, #0]
 8005412:	6808      	ldr	r0, [r1, #0]
 8005414:	062e      	lsls	r6, r5, #24
 8005416:	f100 0304 	add.w	r3, r0, #4
 800541a:	d50a      	bpl.n	8005432 <_printf_i+0xce>
 800541c:	6805      	ldr	r5, [r0, #0]
 800541e:	600b      	str	r3, [r1, #0]
 8005420:	2d00      	cmp	r5, #0
 8005422:	da03      	bge.n	800542c <_printf_i+0xc8>
 8005424:	232d      	movs	r3, #45	; 0x2d
 8005426:	426d      	negs	r5, r5
 8005428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800542c:	230a      	movs	r3, #10
 800542e:	485e      	ldr	r0, [pc, #376]	; (80055a8 <_printf_i+0x244>)
 8005430:	e019      	b.n	8005466 <_printf_i+0x102>
 8005432:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005436:	6805      	ldr	r5, [r0, #0]
 8005438:	600b      	str	r3, [r1, #0]
 800543a:	bf18      	it	ne
 800543c:	b22d      	sxthne	r5, r5
 800543e:	e7ef      	b.n	8005420 <_printf_i+0xbc>
 8005440:	680b      	ldr	r3, [r1, #0]
 8005442:	6825      	ldr	r5, [r4, #0]
 8005444:	1d18      	adds	r0, r3, #4
 8005446:	6008      	str	r0, [r1, #0]
 8005448:	0628      	lsls	r0, r5, #24
 800544a:	d501      	bpl.n	8005450 <_printf_i+0xec>
 800544c:	681d      	ldr	r5, [r3, #0]
 800544e:	e002      	b.n	8005456 <_printf_i+0xf2>
 8005450:	0669      	lsls	r1, r5, #25
 8005452:	d5fb      	bpl.n	800544c <_printf_i+0xe8>
 8005454:	881d      	ldrh	r5, [r3, #0]
 8005456:	2f6f      	cmp	r7, #111	; 0x6f
 8005458:	bf0c      	ite	eq
 800545a:	2308      	moveq	r3, #8
 800545c:	230a      	movne	r3, #10
 800545e:	4852      	ldr	r0, [pc, #328]	; (80055a8 <_printf_i+0x244>)
 8005460:	2100      	movs	r1, #0
 8005462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005466:	6866      	ldr	r6, [r4, #4]
 8005468:	2e00      	cmp	r6, #0
 800546a:	bfa8      	it	ge
 800546c:	6821      	ldrge	r1, [r4, #0]
 800546e:	60a6      	str	r6, [r4, #8]
 8005470:	bfa4      	itt	ge
 8005472:	f021 0104 	bicge.w	r1, r1, #4
 8005476:	6021      	strge	r1, [r4, #0]
 8005478:	b90d      	cbnz	r5, 800547e <_printf_i+0x11a>
 800547a:	2e00      	cmp	r6, #0
 800547c:	d04d      	beq.n	800551a <_printf_i+0x1b6>
 800547e:	4616      	mov	r6, r2
 8005480:	fbb5 f1f3 	udiv	r1, r5, r3
 8005484:	fb03 5711 	mls	r7, r3, r1, r5
 8005488:	5dc7      	ldrb	r7, [r0, r7]
 800548a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800548e:	462f      	mov	r7, r5
 8005490:	42bb      	cmp	r3, r7
 8005492:	460d      	mov	r5, r1
 8005494:	d9f4      	bls.n	8005480 <_printf_i+0x11c>
 8005496:	2b08      	cmp	r3, #8
 8005498:	d10b      	bne.n	80054b2 <_printf_i+0x14e>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	07df      	lsls	r7, r3, #31
 800549e:	d508      	bpl.n	80054b2 <_printf_i+0x14e>
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	6861      	ldr	r1, [r4, #4]
 80054a4:	4299      	cmp	r1, r3
 80054a6:	bfde      	ittt	le
 80054a8:	2330      	movle	r3, #48	; 0x30
 80054aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054ae:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80054b2:	1b92      	subs	r2, r2, r6
 80054b4:	6122      	str	r2, [r4, #16]
 80054b6:	464b      	mov	r3, r9
 80054b8:	4621      	mov	r1, r4
 80054ba:	4640      	mov	r0, r8
 80054bc:	f8cd a000 	str.w	sl, [sp]
 80054c0:	aa03      	add	r2, sp, #12
 80054c2:	f7ff fedf 	bl	8005284 <_printf_common>
 80054c6:	3001      	adds	r0, #1
 80054c8:	d14c      	bne.n	8005564 <_printf_i+0x200>
 80054ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054ce:	b004      	add	sp, #16
 80054d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d4:	4834      	ldr	r0, [pc, #208]	; (80055a8 <_printf_i+0x244>)
 80054d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054da:	680e      	ldr	r6, [r1, #0]
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	f856 5b04 	ldr.w	r5, [r6], #4
 80054e2:	061f      	lsls	r7, r3, #24
 80054e4:	600e      	str	r6, [r1, #0]
 80054e6:	d514      	bpl.n	8005512 <_printf_i+0x1ae>
 80054e8:	07d9      	lsls	r1, r3, #31
 80054ea:	bf44      	itt	mi
 80054ec:	f043 0320 	orrmi.w	r3, r3, #32
 80054f0:	6023      	strmi	r3, [r4, #0]
 80054f2:	b91d      	cbnz	r5, 80054fc <_printf_i+0x198>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	f023 0320 	bic.w	r3, r3, #32
 80054fa:	6023      	str	r3, [r4, #0]
 80054fc:	2310      	movs	r3, #16
 80054fe:	e7af      	b.n	8005460 <_printf_i+0xfc>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	f043 0320 	orr.w	r3, r3, #32
 8005506:	6023      	str	r3, [r4, #0]
 8005508:	2378      	movs	r3, #120	; 0x78
 800550a:	4828      	ldr	r0, [pc, #160]	; (80055ac <_printf_i+0x248>)
 800550c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005510:	e7e3      	b.n	80054da <_printf_i+0x176>
 8005512:	065e      	lsls	r6, r3, #25
 8005514:	bf48      	it	mi
 8005516:	b2ad      	uxthmi	r5, r5
 8005518:	e7e6      	b.n	80054e8 <_printf_i+0x184>
 800551a:	4616      	mov	r6, r2
 800551c:	e7bb      	b.n	8005496 <_printf_i+0x132>
 800551e:	680b      	ldr	r3, [r1, #0]
 8005520:	6826      	ldr	r6, [r4, #0]
 8005522:	1d1d      	adds	r5, r3, #4
 8005524:	6960      	ldr	r0, [r4, #20]
 8005526:	600d      	str	r5, [r1, #0]
 8005528:	0635      	lsls	r5, r6, #24
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	d501      	bpl.n	8005532 <_printf_i+0x1ce>
 800552e:	6018      	str	r0, [r3, #0]
 8005530:	e002      	b.n	8005538 <_printf_i+0x1d4>
 8005532:	0671      	lsls	r1, r6, #25
 8005534:	d5fb      	bpl.n	800552e <_printf_i+0x1ca>
 8005536:	8018      	strh	r0, [r3, #0]
 8005538:	2300      	movs	r3, #0
 800553a:	4616      	mov	r6, r2
 800553c:	6123      	str	r3, [r4, #16]
 800553e:	e7ba      	b.n	80054b6 <_printf_i+0x152>
 8005540:	680b      	ldr	r3, [r1, #0]
 8005542:	1d1a      	adds	r2, r3, #4
 8005544:	600a      	str	r2, [r1, #0]
 8005546:	681e      	ldr	r6, [r3, #0]
 8005548:	2100      	movs	r1, #0
 800554a:	4630      	mov	r0, r6
 800554c:	6862      	ldr	r2, [r4, #4]
 800554e:	f000 f831 	bl	80055b4 <memchr>
 8005552:	b108      	cbz	r0, 8005558 <_printf_i+0x1f4>
 8005554:	1b80      	subs	r0, r0, r6
 8005556:	6060      	str	r0, [r4, #4]
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	6123      	str	r3, [r4, #16]
 800555c:	2300      	movs	r3, #0
 800555e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005562:	e7a8      	b.n	80054b6 <_printf_i+0x152>
 8005564:	4632      	mov	r2, r6
 8005566:	4649      	mov	r1, r9
 8005568:	4640      	mov	r0, r8
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	47d0      	blx	sl
 800556e:	3001      	adds	r0, #1
 8005570:	d0ab      	beq.n	80054ca <_printf_i+0x166>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	079b      	lsls	r3, r3, #30
 8005576:	d413      	bmi.n	80055a0 <_printf_i+0x23c>
 8005578:	68e0      	ldr	r0, [r4, #12]
 800557a:	9b03      	ldr	r3, [sp, #12]
 800557c:	4298      	cmp	r0, r3
 800557e:	bfb8      	it	lt
 8005580:	4618      	movlt	r0, r3
 8005582:	e7a4      	b.n	80054ce <_printf_i+0x16a>
 8005584:	2301      	movs	r3, #1
 8005586:	4632      	mov	r2, r6
 8005588:	4649      	mov	r1, r9
 800558a:	4640      	mov	r0, r8
 800558c:	47d0      	blx	sl
 800558e:	3001      	adds	r0, #1
 8005590:	d09b      	beq.n	80054ca <_printf_i+0x166>
 8005592:	3501      	adds	r5, #1
 8005594:	68e3      	ldr	r3, [r4, #12]
 8005596:	9903      	ldr	r1, [sp, #12]
 8005598:	1a5b      	subs	r3, r3, r1
 800559a:	42ab      	cmp	r3, r5
 800559c:	dcf2      	bgt.n	8005584 <_printf_i+0x220>
 800559e:	e7eb      	b.n	8005578 <_printf_i+0x214>
 80055a0:	2500      	movs	r5, #0
 80055a2:	f104 0619 	add.w	r6, r4, #25
 80055a6:	e7f5      	b.n	8005594 <_printf_i+0x230>
 80055a8:	08005e61 	.word	0x08005e61
 80055ac:	08005e72 	.word	0x08005e72

080055b0 <__retarget_lock_acquire_recursive>:
 80055b0:	4770      	bx	lr

080055b2 <__retarget_lock_release_recursive>:
 80055b2:	4770      	bx	lr

080055b4 <memchr>:
 80055b4:	4603      	mov	r3, r0
 80055b6:	b510      	push	{r4, lr}
 80055b8:	b2c9      	uxtb	r1, r1
 80055ba:	4402      	add	r2, r0
 80055bc:	4293      	cmp	r3, r2
 80055be:	4618      	mov	r0, r3
 80055c0:	d101      	bne.n	80055c6 <memchr+0x12>
 80055c2:	2000      	movs	r0, #0
 80055c4:	e003      	b.n	80055ce <memchr+0x1a>
 80055c6:	7804      	ldrb	r4, [r0, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	428c      	cmp	r4, r1
 80055cc:	d1f6      	bne.n	80055bc <memchr+0x8>
 80055ce:	bd10      	pop	{r4, pc}

080055d0 <memmove>:
 80055d0:	4288      	cmp	r0, r1
 80055d2:	b510      	push	{r4, lr}
 80055d4:	eb01 0402 	add.w	r4, r1, r2
 80055d8:	d902      	bls.n	80055e0 <memmove+0x10>
 80055da:	4284      	cmp	r4, r0
 80055dc:	4623      	mov	r3, r4
 80055de:	d807      	bhi.n	80055f0 <memmove+0x20>
 80055e0:	1e43      	subs	r3, r0, #1
 80055e2:	42a1      	cmp	r1, r4
 80055e4:	d008      	beq.n	80055f8 <memmove+0x28>
 80055e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055ee:	e7f8      	b.n	80055e2 <memmove+0x12>
 80055f0:	4601      	mov	r1, r0
 80055f2:	4402      	add	r2, r0
 80055f4:	428a      	cmp	r2, r1
 80055f6:	d100      	bne.n	80055fa <memmove+0x2a>
 80055f8:	bd10      	pop	{r4, pc}
 80055fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005602:	e7f7      	b.n	80055f4 <memmove+0x24>

08005604 <_realloc_r>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	4607      	mov	r7, r0
 8005608:	4614      	mov	r4, r2
 800560a:	460e      	mov	r6, r1
 800560c:	b921      	cbnz	r1, 8005618 <_realloc_r+0x14>
 800560e:	4611      	mov	r1, r2
 8005610:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005614:	f7ff bc3c 	b.w	8004e90 <_malloc_r>
 8005618:	b922      	cbnz	r2, 8005624 <_realloc_r+0x20>
 800561a:	f7ff fbed 	bl	8004df8 <_free_r>
 800561e:	4625      	mov	r5, r4
 8005620:	4628      	mov	r0, r5
 8005622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005624:	f000 f814 	bl	8005650 <_malloc_usable_size_r>
 8005628:	42a0      	cmp	r0, r4
 800562a:	d20f      	bcs.n	800564c <_realloc_r+0x48>
 800562c:	4621      	mov	r1, r4
 800562e:	4638      	mov	r0, r7
 8005630:	f7ff fc2e 	bl	8004e90 <_malloc_r>
 8005634:	4605      	mov	r5, r0
 8005636:	2800      	cmp	r0, #0
 8005638:	d0f2      	beq.n	8005620 <_realloc_r+0x1c>
 800563a:	4631      	mov	r1, r6
 800563c:	4622      	mov	r2, r4
 800563e:	f7ff fbc5 	bl	8004dcc <memcpy>
 8005642:	4631      	mov	r1, r6
 8005644:	4638      	mov	r0, r7
 8005646:	f7ff fbd7 	bl	8004df8 <_free_r>
 800564a:	e7e9      	b.n	8005620 <_realloc_r+0x1c>
 800564c:	4635      	mov	r5, r6
 800564e:	e7e7      	b.n	8005620 <_realloc_r+0x1c>

08005650 <_malloc_usable_size_r>:
 8005650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005654:	1f18      	subs	r0, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	bfbc      	itt	lt
 800565a:	580b      	ldrlt	r3, [r1, r0]
 800565c:	18c0      	addlt	r0, r0, r3
 800565e:	4770      	bx	lr

08005660 <_init>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	bf00      	nop
 8005664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005666:	bc08      	pop	{r3}
 8005668:	469e      	mov	lr, r3
 800566a:	4770      	bx	lr

0800566c <_fini>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr
