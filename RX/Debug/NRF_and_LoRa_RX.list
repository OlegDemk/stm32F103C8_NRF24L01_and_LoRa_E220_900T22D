
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e4  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a70  08009a70  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08009a70  08009a70  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a70  08009a70  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a70  08009a70  00019a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a74  08009a74  00019a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08009a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  200000b4  08009b2c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a3c  08009b2c  00020a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a1f  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003385  00000000  00000000  00038afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003be88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003d268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bd5  00000000  00000000  0003e530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e81  00000000  00000000  00058105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009070c  00000000  00000000  00070f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005964  00000000  00000000  001016e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08009074 	.word	0x08009074

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08009074 	.word	0x08009074

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_d2f>:
 80004d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004dc:	bf24      	itt	cs
 80004de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004e6:	d90d      	bls.n	8000504 <__aeabi_d2f+0x30>
 80004e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004fc:	bf08      	it	eq
 80004fe:	f020 0001 	biceq.w	r0, r0, #1
 8000502:	4770      	bx	lr
 8000504:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000508:	d121      	bne.n	800054e <__aeabi_d2f+0x7a>
 800050a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800050e:	bfbc      	itt	lt
 8000510:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000514:	4770      	bxlt	lr
 8000516:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800051a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800051e:	f1c2 0218 	rsb	r2, r2, #24
 8000522:	f1c2 0c20 	rsb	ip, r2, #32
 8000526:	fa10 f30c 	lsls.w	r3, r0, ip
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	bf18      	it	ne
 8000530:	f040 0001 	orrne.w	r0, r0, #1
 8000534:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000538:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800053c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000540:	ea40 000c 	orr.w	r0, r0, ip
 8000544:	fa23 f302 	lsr.w	r3, r3, r2
 8000548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800054c:	e7cc      	b.n	80004e8 <__aeabi_d2f+0x14>
 800054e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000552:	d107      	bne.n	8000564 <__aeabi_d2f+0x90>
 8000554:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000558:	bf1e      	ittt	ne
 800055a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800055e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000562:	4770      	bxne	lr
 8000564:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000568:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800056c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__aeabi_frsub>:
 8000574:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000578:	e002      	b.n	8000580 <__addsf3>
 800057a:	bf00      	nop

0800057c <__aeabi_fsub>:
 800057c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000580 <__addsf3>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	bf1f      	itttt	ne
 8000584:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000588:	ea92 0f03 	teqne	r2, r3
 800058c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000590:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000594:	d06a      	beq.n	800066c <__addsf3+0xec>
 8000596:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800059a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800059e:	bfc1      	itttt	gt
 80005a0:	18d2      	addgt	r2, r2, r3
 80005a2:	4041      	eorgt	r1, r0
 80005a4:	4048      	eorgt	r0, r1
 80005a6:	4041      	eorgt	r1, r0
 80005a8:	bfb8      	it	lt
 80005aa:	425b      	neglt	r3, r3
 80005ac:	2b19      	cmp	r3, #25
 80005ae:	bf88      	it	hi
 80005b0:	4770      	bxhi	lr
 80005b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005be:	bf18      	it	ne
 80005c0:	4240      	negne	r0, r0
 80005c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ce:	bf18      	it	ne
 80005d0:	4249      	negne	r1, r1
 80005d2:	ea92 0f03 	teq	r2, r3
 80005d6:	d03f      	beq.n	8000658 <__addsf3+0xd8>
 80005d8:	f1a2 0201 	sub.w	r2, r2, #1
 80005dc:	fa41 fc03 	asr.w	ip, r1, r3
 80005e0:	eb10 000c 	adds.w	r0, r0, ip
 80005e4:	f1c3 0320 	rsb	r3, r3, #32
 80005e8:	fa01 f103 	lsl.w	r1, r1, r3
 80005ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005f0:	d502      	bpl.n	80005f8 <__addsf3+0x78>
 80005f2:	4249      	negs	r1, r1
 80005f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005fc:	d313      	bcc.n	8000626 <__addsf3+0xa6>
 80005fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000602:	d306      	bcc.n	8000612 <__addsf3+0x92>
 8000604:	0840      	lsrs	r0, r0, #1
 8000606:	ea4f 0131 	mov.w	r1, r1, rrx
 800060a:	f102 0201 	add.w	r2, r2, #1
 800060e:	2afe      	cmp	r2, #254	; 0xfe
 8000610:	d251      	bcs.n	80006b6 <__addsf3+0x136>
 8000612:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000616:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800061a:	bf08      	it	eq
 800061c:	f020 0001 	biceq.w	r0, r0, #1
 8000620:	ea40 0003 	orr.w	r0, r0, r3
 8000624:	4770      	bx	lr
 8000626:	0049      	lsls	r1, r1, #1
 8000628:	eb40 0000 	adc.w	r0, r0, r0
 800062c:	3a01      	subs	r2, #1
 800062e:	bf28      	it	cs
 8000630:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000634:	d2ed      	bcs.n	8000612 <__addsf3+0x92>
 8000636:	fab0 fc80 	clz	ip, r0
 800063a:	f1ac 0c08 	sub.w	ip, ip, #8
 800063e:	ebb2 020c 	subs.w	r2, r2, ip
 8000642:	fa00 f00c 	lsl.w	r0, r0, ip
 8000646:	bfaa      	itet	ge
 8000648:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800064c:	4252      	neglt	r2, r2
 800064e:	4318      	orrge	r0, r3
 8000650:	bfbc      	itt	lt
 8000652:	40d0      	lsrlt	r0, r2
 8000654:	4318      	orrlt	r0, r3
 8000656:	4770      	bx	lr
 8000658:	f092 0f00 	teq	r2, #0
 800065c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000660:	bf06      	itte	eq
 8000662:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000666:	3201      	addeq	r2, #1
 8000668:	3b01      	subne	r3, #1
 800066a:	e7b5      	b.n	80005d8 <__addsf3+0x58>
 800066c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000670:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000674:	bf18      	it	ne
 8000676:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800067a:	d021      	beq.n	80006c0 <__addsf3+0x140>
 800067c:	ea92 0f03 	teq	r2, r3
 8000680:	d004      	beq.n	800068c <__addsf3+0x10c>
 8000682:	f092 0f00 	teq	r2, #0
 8000686:	bf08      	it	eq
 8000688:	4608      	moveq	r0, r1
 800068a:	4770      	bx	lr
 800068c:	ea90 0f01 	teq	r0, r1
 8000690:	bf1c      	itt	ne
 8000692:	2000      	movne	r0, #0
 8000694:	4770      	bxne	lr
 8000696:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800069a:	d104      	bne.n	80006a6 <__addsf3+0x126>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	bf28      	it	cs
 80006a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006a4:	4770      	bx	lr
 80006a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006aa:	bf3c      	itt	cc
 80006ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006b0:	4770      	bxcc	lr
 80006b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006be:	4770      	bx	lr
 80006c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006c4:	bf16      	itet	ne
 80006c6:	4608      	movne	r0, r1
 80006c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006cc:	4601      	movne	r1, r0
 80006ce:	0242      	lsls	r2, r0, #9
 80006d0:	bf06      	itte	eq
 80006d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006d6:	ea90 0f01 	teqeq	r0, r1
 80006da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006de:	4770      	bx	lr

080006e0 <__aeabi_ui2f>:
 80006e0:	f04f 0300 	mov.w	r3, #0
 80006e4:	e004      	b.n	80006f0 <__aeabi_i2f+0x8>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2f>:
 80006e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006ec:	bf48      	it	mi
 80006ee:	4240      	negmi	r0, r0
 80006f0:	ea5f 0c00 	movs.w	ip, r0
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006fc:	4601      	mov	r1, r0
 80006fe:	f04f 0000 	mov.w	r0, #0
 8000702:	e01c      	b.n	800073e <__aeabi_l2f+0x2a>

08000704 <__aeabi_ul2f>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	f04f 0300 	mov.w	r3, #0
 8000710:	e00a      	b.n	8000728 <__aeabi_l2f+0x14>
 8000712:	bf00      	nop

08000714 <__aeabi_l2f>:
 8000714:	ea50 0201 	orrs.w	r2, r0, r1
 8000718:	bf08      	it	eq
 800071a:	4770      	bxeq	lr
 800071c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000720:	d502      	bpl.n	8000728 <__aeabi_l2f+0x14>
 8000722:	4240      	negs	r0, r0
 8000724:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000728:	ea5f 0c01 	movs.w	ip, r1
 800072c:	bf02      	ittt	eq
 800072e:	4684      	moveq	ip, r0
 8000730:	4601      	moveq	r1, r0
 8000732:	2000      	moveq	r0, #0
 8000734:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000738:	bf08      	it	eq
 800073a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800073e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000742:	fabc f28c 	clz	r2, ip
 8000746:	3a08      	subs	r2, #8
 8000748:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800074c:	db10      	blt.n	8000770 <__aeabi_l2f+0x5c>
 800074e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000752:	4463      	add	r3, ip
 8000754:	fa00 fc02 	lsl.w	ip, r0, r2
 8000758:	f1c2 0220 	rsb	r2, r2, #32
 800075c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000760:	fa20 f202 	lsr.w	r2, r0, r2
 8000764:	eb43 0002 	adc.w	r0, r3, r2
 8000768:	bf08      	it	eq
 800076a:	f020 0001 	biceq.w	r0, r0, #1
 800076e:	4770      	bx	lr
 8000770:	f102 0220 	add.w	r2, r2, #32
 8000774:	fa01 fc02 	lsl.w	ip, r1, r2
 8000778:	f1c2 0220 	rsb	r2, r2, #32
 800077c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000780:	fa21 f202 	lsr.w	r2, r1, r2
 8000784:	eb43 0002 	adc.w	r0, r3, r2
 8000788:	bf08      	it	eq
 800078a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800078e:	4770      	bx	lr

08000790 <__aeabi_fmul>:
 8000790:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000794:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000798:	bf1e      	ittt	ne
 800079a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800079e:	ea92 0f0c 	teqne	r2, ip
 80007a2:	ea93 0f0c 	teqne	r3, ip
 80007a6:	d06f      	beq.n	8000888 <__aeabi_fmul+0xf8>
 80007a8:	441a      	add	r2, r3
 80007aa:	ea80 0c01 	eor.w	ip, r0, r1
 80007ae:	0240      	lsls	r0, r0, #9
 80007b0:	bf18      	it	ne
 80007b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007b6:	d01e      	beq.n	80007f6 <__aeabi_fmul+0x66>
 80007b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007c4:	fba0 3101 	umull	r3, r1, r0, r1
 80007c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007d0:	bf3e      	ittt	cc
 80007d2:	0049      	lslcc	r1, r1, #1
 80007d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007d8:	005b      	lslcc	r3, r3, #1
 80007da:	ea40 0001 	orr.w	r0, r0, r1
 80007de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007e2:	2afd      	cmp	r2, #253	; 0xfd
 80007e4:	d81d      	bhi.n	8000822 <__aeabi_fmul+0x92>
 80007e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ee:	bf08      	it	eq
 80007f0:	f020 0001 	biceq.w	r0, r0, #1
 80007f4:	4770      	bx	lr
 80007f6:	f090 0f00 	teq	r0, #0
 80007fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007fe:	bf08      	it	eq
 8000800:	0249      	lsleq	r1, r1, #9
 8000802:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000806:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800080a:	3a7f      	subs	r2, #127	; 0x7f
 800080c:	bfc2      	ittt	gt
 800080e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000812:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000816:	4770      	bxgt	lr
 8000818:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	3a01      	subs	r2, #1
 8000822:	dc5d      	bgt.n	80008e0 <__aeabi_fmul+0x150>
 8000824:	f112 0f19 	cmn.w	r2, #25
 8000828:	bfdc      	itt	le
 800082a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800082e:	4770      	bxle	lr
 8000830:	f1c2 0200 	rsb	r2, r2, #0
 8000834:	0041      	lsls	r1, r0, #1
 8000836:	fa21 f102 	lsr.w	r1, r1, r2
 800083a:	f1c2 0220 	rsb	r2, r2, #32
 800083e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000842:	ea5f 0031 	movs.w	r0, r1, rrx
 8000846:	f140 0000 	adc.w	r0, r0, #0
 800084a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800084e:	bf08      	it	eq
 8000850:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000854:	4770      	bx	lr
 8000856:	f092 0f00 	teq	r2, #0
 800085a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800085e:	bf02      	ittt	eq
 8000860:	0040      	lsleq	r0, r0, #1
 8000862:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000866:	3a01      	subeq	r2, #1
 8000868:	d0f9      	beq.n	800085e <__aeabi_fmul+0xce>
 800086a:	ea40 000c 	orr.w	r0, r0, ip
 800086e:	f093 0f00 	teq	r3, #0
 8000872:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000876:	bf02      	ittt	eq
 8000878:	0049      	lsleq	r1, r1, #1
 800087a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800087e:	3b01      	subeq	r3, #1
 8000880:	d0f9      	beq.n	8000876 <__aeabi_fmul+0xe6>
 8000882:	ea41 010c 	orr.w	r1, r1, ip
 8000886:	e78f      	b.n	80007a8 <__aeabi_fmul+0x18>
 8000888:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800088c:	ea92 0f0c 	teq	r2, ip
 8000890:	bf18      	it	ne
 8000892:	ea93 0f0c 	teqne	r3, ip
 8000896:	d00a      	beq.n	80008ae <__aeabi_fmul+0x11e>
 8000898:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800089c:	bf18      	it	ne
 800089e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008a2:	d1d8      	bne.n	8000856 <__aeabi_fmul+0xc6>
 80008a4:	ea80 0001 	eor.w	r0, r0, r1
 80008a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008ac:	4770      	bx	lr
 80008ae:	f090 0f00 	teq	r0, #0
 80008b2:	bf17      	itett	ne
 80008b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008b8:	4608      	moveq	r0, r1
 80008ba:	f091 0f00 	teqne	r1, #0
 80008be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008c2:	d014      	beq.n	80008ee <__aeabi_fmul+0x15e>
 80008c4:	ea92 0f0c 	teq	r2, ip
 80008c8:	d101      	bne.n	80008ce <__aeabi_fmul+0x13e>
 80008ca:	0242      	lsls	r2, r0, #9
 80008cc:	d10f      	bne.n	80008ee <__aeabi_fmul+0x15e>
 80008ce:	ea93 0f0c 	teq	r3, ip
 80008d2:	d103      	bne.n	80008dc <__aeabi_fmul+0x14c>
 80008d4:	024b      	lsls	r3, r1, #9
 80008d6:	bf18      	it	ne
 80008d8:	4608      	movne	r0, r1
 80008da:	d108      	bne.n	80008ee <__aeabi_fmul+0x15e>
 80008dc:	ea80 0001 	eor.w	r0, r0, r1
 80008e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008ec:	4770      	bx	lr
 80008ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008f6:	4770      	bx	lr

080008f8 <__aeabi_fdiv>:
 80008f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000900:	bf1e      	ittt	ne
 8000902:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000906:	ea92 0f0c 	teqne	r2, ip
 800090a:	ea93 0f0c 	teqne	r3, ip
 800090e:	d069      	beq.n	80009e4 <__aeabi_fdiv+0xec>
 8000910:	eba2 0203 	sub.w	r2, r2, r3
 8000914:	ea80 0c01 	eor.w	ip, r0, r1
 8000918:	0249      	lsls	r1, r1, #9
 800091a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800091e:	d037      	beq.n	8000990 <__aeabi_fdiv+0x98>
 8000920:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000924:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000928:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800092c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000930:	428b      	cmp	r3, r1
 8000932:	bf38      	it	cc
 8000934:	005b      	lslcc	r3, r3, #1
 8000936:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800093a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800093e:	428b      	cmp	r3, r1
 8000940:	bf24      	itt	cs
 8000942:	1a5b      	subcs	r3, r3, r1
 8000944:	ea40 000c 	orrcs.w	r0, r0, ip
 8000948:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800094c:	bf24      	itt	cs
 800094e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000952:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000956:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800095a:	bf24      	itt	cs
 800095c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000968:	bf24      	itt	cs
 800096a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800096e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	bf18      	it	ne
 8000976:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800097a:	d1e0      	bne.n	800093e <__aeabi_fdiv+0x46>
 800097c:	2afd      	cmp	r2, #253	; 0xfd
 800097e:	f63f af50 	bhi.w	8000822 <__aeabi_fmul+0x92>
 8000982:	428b      	cmp	r3, r1
 8000984:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000988:	bf08      	it	eq
 800098a:	f020 0001 	biceq.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000994:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000998:	327f      	adds	r2, #127	; 0x7f
 800099a:	bfc2      	ittt	gt
 800099c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009a4:	4770      	bxgt	lr
 80009a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	3a01      	subs	r2, #1
 80009b0:	e737      	b.n	8000822 <__aeabi_fmul+0x92>
 80009b2:	f092 0f00 	teq	r2, #0
 80009b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ba:	bf02      	ittt	eq
 80009bc:	0040      	lsleq	r0, r0, #1
 80009be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009c2:	3a01      	subeq	r2, #1
 80009c4:	d0f9      	beq.n	80009ba <__aeabi_fdiv+0xc2>
 80009c6:	ea40 000c 	orr.w	r0, r0, ip
 80009ca:	f093 0f00 	teq	r3, #0
 80009ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d2:	bf02      	ittt	eq
 80009d4:	0049      	lsleq	r1, r1, #1
 80009d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009da:	3b01      	subeq	r3, #1
 80009dc:	d0f9      	beq.n	80009d2 <__aeabi_fdiv+0xda>
 80009de:	ea41 010c 	orr.w	r1, r1, ip
 80009e2:	e795      	b.n	8000910 <__aeabi_fdiv+0x18>
 80009e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009e8:	ea92 0f0c 	teq	r2, ip
 80009ec:	d108      	bne.n	8000a00 <__aeabi_fdiv+0x108>
 80009ee:	0242      	lsls	r2, r0, #9
 80009f0:	f47f af7d 	bne.w	80008ee <__aeabi_fmul+0x15e>
 80009f4:	ea93 0f0c 	teq	r3, ip
 80009f8:	f47f af70 	bne.w	80008dc <__aeabi_fmul+0x14c>
 80009fc:	4608      	mov	r0, r1
 80009fe:	e776      	b.n	80008ee <__aeabi_fmul+0x15e>
 8000a00:	ea93 0f0c 	teq	r3, ip
 8000a04:	d104      	bne.n	8000a10 <__aeabi_fdiv+0x118>
 8000a06:	024b      	lsls	r3, r1, #9
 8000a08:	f43f af4c 	beq.w	80008a4 <__aeabi_fmul+0x114>
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	e76e      	b.n	80008ee <__aeabi_fmul+0x15e>
 8000a10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a14:	bf18      	it	ne
 8000a16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a1a:	d1ca      	bne.n	80009b2 <__aeabi_fdiv+0xba>
 8000a1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a20:	f47f af5c 	bne.w	80008dc <__aeabi_fmul+0x14c>
 8000a24:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a28:	f47f af3c 	bne.w	80008a4 <__aeabi_fmul+0x114>
 8000a2c:	e75f      	b.n	80008ee <__aeabi_fmul+0x15e>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_f2iz>:
 8000a30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a38:	d30f      	bcc.n	8000a5a <__aeabi_f2iz+0x2a>
 8000a3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a42:	d90d      	bls.n	8000a60 <__aeabi_f2iz+0x30>
 8000a44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a50:	fa23 f002 	lsr.w	r0, r3, r2
 8000a54:	bf18      	it	ne
 8000a56:	4240      	negne	r0, r0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0000 	mov.w	r0, #0
 8000a5e:	4770      	bx	lr
 8000a60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a64:	d101      	bne.n	8000a6a <__aeabi_f2iz+0x3a>
 8000a66:	0242      	lsls	r2, r0, #9
 8000a68:	d105      	bne.n	8000a76 <__aeabi_f2iz+0x46>
 8000a6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a6e:	bf08      	it	eq
 8000a70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <LoRa_RX>:

//----------------------------------------------------------------------------------------
// for receiving data from LoRa module using one function
// "flag" needed for start or stop this function
void LoRa_RX(bool flag)
{
 8000a7c:	b5b0      	push	{r4, r5, r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	char str_1[25] = {0};
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	751a      	strb	r2, [r3, #20]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init LoRa RX )
 8000a9c:	4b4f      	ldr	r3, [pc, #316]	; (8000bdc <LoRa_RX+0x160>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d02f      	beq.n	8000b04 <LoRa_RX+0x88>
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d02c      	beq.n	8000b04 <LoRa_RX+0x88>
	{
		HAL_Delay(100);
 8000aaa:	2064      	movs	r0, #100	; 0x64
 8000aac:	f004 fac4 	bl	8005038 <HAL_Delay>
		init_lora_RX();
 8000ab0:	f000 fbf6 	bl	80012a0 <init_lora_RX>
		HAL_Delay(500);
 8000ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab8:	f004 fabe 	bl	8005038 <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000abc:	2110      	movs	r1, #16
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f001 fd2a 	bl	8002518 <ssd1306_SetCursor>
		strcpy(str_1, "Receiving data:");
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	4a45      	ldr	r2, [pc, #276]	; (8000be0 <LoRa_RX+0x164>)
 8000aca:	461c      	mov	r4, r3
 8000acc:	4613      	mov	r3, r2
 8000ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000ad4:	4a43      	ldr	r2, [pc, #268]	; (8000be4 <LoRa_RX+0x168>)
 8000ad6:	f107 0008 	add.w	r0, r7, #8
 8000ada:	2301      	movs	r3, #1
 8000adc:	ca06      	ldmia	r2, {r1, r2}
 8000ade:	f001 fcf5 	bl	80024cc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000ae2:	f001 fbe3 	bl	80022ac <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);						// Refresh interrupt
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	493f      	ldr	r1, [pc, #252]	; (8000be8 <LoRa_RX+0x16c>)
 8000aea:	4840      	ldr	r0, [pc, #256]	; (8000bec <LoRa_RX+0x170>)
 8000aec:	f007 f9c9 	bl	8007e82 <HAL_UART_Receive_IT>
		memset(str_1, 0, sizeof(str_1));
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2219      	movs	r2, #25
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f007 fe15 	bl	8008728 <memset>
		flag_first_time = false;
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <LoRa_RX+0x160>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Do it when data was received
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <LoRa_RX+0x160>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	f083 0301 	eor.w	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d057      	beq.n	8000bc2 <LoRa_RX+0x146>
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d054      	beq.n	8000bc2 <LoRa_RX+0x146>
	{
		if(flag_command_received == true)							// If data is ready
 8000b18:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <LoRa_RX+0x174>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d050      	beq.n	8000bc2 <LoRa_RX+0x146>
		{
			// Clean data place on OLED
			strcpy(str_1, "                       ");
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4a33      	ldr	r2, [pc, #204]	; (8000bf4 <LoRa_RX+0x178>)
 8000b26:	461c      	mov	r4, r3
 8000b28:	4615      	mov	r5, r2
 8000b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b32:	e884 0003 	stmia.w	r4, {r0, r1}
			ssd1306_SetCursor(0, 28);
 8000b36:	211c      	movs	r1, #28
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f001 fced 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str_1,  Font_7x10, White);
 8000b3e:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <LoRa_RX+0x168>)
 8000b40:	f107 0008 	add.w	r0, r7, #8
 8000b44:	2301      	movs	r3, #1
 8000b46:	ca06      	ldmia	r2, {r1, r2}
 8000b48:	f001 fcc0 	bl	80024cc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000b4c:	f001 fbae 	bl	80022ac <ssd1306_UpdateScreen>

			// Print received data
			// Delete first element of array (because sometimes first element of array can be '\0' it will break down ssd1306_WriteString function)
			ssd1306_SetCursor(0, 28);
 8000b50:	211c      	movs	r1, #28
 8000b52:	2000      	movs	r0, #0
 8000b54:	f001 fce0 	bl	8002518 <ssd1306_SetCursor>
			int i = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 0; i <= sizeof(str_1); i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b60:	e013      	b.n	8000b8a <LoRa_RX+0x10e>
			{
				if(i == 0)								// Delay first element of array
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <LoRa_RX+0xf2>
				{
					i++;
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
				}
				str_1[i-1] = uart_rx_data[i];
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	3b01      	subs	r3, #1
 8000b72:	4921      	ldr	r1, [pc, #132]	; (8000bf8 <LoRa_RX+0x17c>)
 8000b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b76:	440a      	add	r2, r1
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b7e:	440b      	add	r3, r1
 8000b80:	f803 2c20 	strb.w	r2, [r3, #-32]
			for(i = 0; i <= sizeof(str_1); i++)
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	3301      	adds	r3, #1
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	2b19      	cmp	r3, #25
 8000b8e:	d9e8      	bls.n	8000b62 <LoRa_RX+0xe6>
			}
			ssd1306_WriteString(str_1,  Font_7x10, White);
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <LoRa_RX+0x168>)
 8000b92:	f107 0008 	add.w	r0, r7, #8
 8000b96:	2301      	movs	r3, #1
 8000b98:	ca06      	ldmia	r2, {r1, r2}
 8000b9a:	f001 fc97 	bl	80024cc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000b9e:	f001 fb85 	bl	80022ac <ssd1306_UpdateScreen>

			HAL_Delay(100);
 8000ba2:	2064      	movs	r0, #100	; 0x64
 8000ba4:	f004 fa48 	bl	8005038 <HAL_Delay>
			flag_command_received = false;							// Set flag. Set show? that data was printed
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <LoRa_RX+0x174>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
			memset(uart_rx_data, 0, sizeof(uart_rx_data));			// Cleaning buffer where was received data (From HAL_UART_RxCpltCallback)
 8000bae:	2232      	movs	r2, #50	; 0x32
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <LoRa_RX+0x17c>)
 8000bb4:	f007 fdb8 	bl	8008728 <memset>
			HAL_UART_Receive_IT(&huart1, str, 1);					// Start interrupt again
 8000bb8:	2201      	movs	r2, #1
 8000bba:	490b      	ldr	r1, [pc, #44]	; (8000be8 <LoRa_RX+0x16c>)
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <LoRa_RX+0x170>)
 8000bbe:	f007 f960 	bl	8007e82 <HAL_UART_Receive_IT>
		}
	}
	if(flag == false)												// Stop function
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f083 0301 	eor.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <LoRa_RX+0x158>
	{
		flag_first_time = true;
 8000bce:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <LoRa_RX+0x160>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bdb0      	pop	{r4, r5, r7, pc}
 8000bdc:	20000004 	.word	0x20000004
 8000be0:	0800908c 	.word	0x0800908c
 8000be4:	2000001c 	.word	0x2000001c
 8000be8:	20000588 	.word	0x20000588
 8000bec:	20000650 	.word	0x20000650
 8000bf0:	20000589 	.word	0x20000589
 8000bf4:	0800909c 	.word	0x0800909c
 8000bf8:	20000554 	.word	0x20000554

08000bfc <LoRa_TX_send_test_number>:
// -------------------------------------------------------------------------------
// Sent test one test number and increment it every time. tx_lora_data
void LoRa_TX_send_test_number(bool flag)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	char str_1[20] = {0};
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init)
 8000c18:	4b59      	ldr	r3, [pc, #356]	; (8000d80 <LoRa_TX_send_test_number+0x184>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d047      	beq.n	8000cb0 <LoRa_TX_send_test_number+0xb4>
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d044      	beq.n	8000cb0 <LoRa_TX_send_test_number+0xb4>
	{
		memset(uart_rx_data, 0, sizeof(uart_rx_data)); 				// Clean buf
 8000c26:	2232      	movs	r2, #50	; 0x32
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4856      	ldr	r0, [pc, #344]	; (8000d84 <LoRa_TX_send_test_number+0x188>)
 8000c2c:	f007 fd7c 	bl	8008728 <memset>

		HAL_Delay(100);
 8000c30:	2064      	movs	r0, #100	; 0x64
 8000c32:	f004 fa01 	bl	8005038 <HAL_Delay>
		init_lora_TX();
 8000c36:	f000 faeb 	bl	8001210 <init_lora_TX>
		HAL_Delay(500);
 8000c3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c3e:	f004 f9fb 	bl	8005038 <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000c42:	2110      	movs	r1, #16
 8000c44:	2000      	movs	r0, #0
 8000c46:	f001 fc67 	bl	8002518 <ssd1306_SetCursor>
		strcpy(str_1, "TX count:");
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4a4e      	ldr	r2, [pc, #312]	; (8000d88 <LoRa_TX_send_test_number+0x18c>)
 8000c50:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c52:	c303      	stmia	r3!, {r0, r1}
 8000c54:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000c56:	4a4d      	ldr	r2, [pc, #308]	; (8000d8c <LoRa_TX_send_test_number+0x190>)
 8000c58:	f107 000c 	add.w	r0, r7, #12
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	ca06      	ldmia	r2, {r1, r2}
 8000c60:	f001 fc34 	bl	80024cc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000c64:	f001 fb22 	bl	80022ac <ssd1306_UpdateScreen>

		memset(str_1, 0, sizeof(str_1));
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2214      	movs	r2, #20
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f007 fd59 	bl	8008728 <memset>
		ssd1306_SetCursor(0, 28);
 8000c76:	211c      	movs	r1, #28
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f001 fc4d 	bl	8002518 <ssd1306_SetCursor>
		strcpy(str_1, "Data:");
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4a43      	ldr	r2, [pc, #268]	; (8000d90 <LoRa_TX_send_test_number+0x194>)
 8000c84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c88:	6018      	str	r0, [r3, #0]
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	8019      	strh	r1, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000c8e:	4a3f      	ldr	r2, [pc, #252]	; (8000d8c <LoRa_TX_send_test_number+0x190>)
 8000c90:	f107 000c 	add.w	r0, r7, #12
 8000c94:	2301      	movs	r3, #1
 8000c96:	ca06      	ldmia	r2, {r1, r2}
 8000c98:	f001 fc18 	bl	80024cc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000c9c:	f001 fb06 	bl	80022ac <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	493c      	ldr	r1, [pc, #240]	; (8000d94 <LoRa_TX_send_test_number+0x198>)
 8000ca4:	483c      	ldr	r0, [pc, #240]	; (8000d98 <LoRa_TX_send_test_number+0x19c>)
 8000ca6:	f007 f8ec 	bl	8007e82 <HAL_UART_Receive_IT>
		flag_first_time = false;
 8000caa:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <LoRa_TX_send_test_number+0x184>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Repeat it part for transmit data
 8000cb0:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <LoRa_TX_send_test_number+0x184>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f083 0301 	eor.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d04d      	beq.n	8000d5a <LoRa_TX_send_test_number+0x15e>
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d04a      	beq.n	8000d5a <LoRa_TX_send_test_number+0x15e>
	{
		lora_transmit_data(tx_lora_data);
 8000cc4:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f86d 	bl	8000da8 <lora_transmit_data>


		// Print transmitter counter
		memset(str_1, 0, sizeof(str_1));
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2214      	movs	r2, #20
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f007 fd26 	bl	8008728 <memset>
		ssd1306_SetCursor(70, 16);
 8000cdc:	2110      	movs	r1, #16
 8000cde:	2046      	movs	r0, #70	; 0x46
 8000ce0:	f001 fc1a 	bl	8002518 <ssd1306_SetCursor>
		sprintf(str_1, "%d", transmit_count);
 8000ce4:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <LoRa_TX_send_test_number+0x1a4>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	492d      	ldr	r1, [pc, #180]	; (8000da4 <LoRa_TX_send_test_number+0x1a8>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f007 fd22 	bl	8008738 <siprintf>
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000cf4:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <LoRa_TX_send_test_number+0x190>)
 8000cf6:	f107 000c 	add.w	r0, r7, #12
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	ca06      	ldmia	r2, {r1, r2}
 8000cfe:	f001 fbe5 	bl	80024cc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000d02:	f001 fad3 	bl	80022ac <ssd1306_UpdateScreen>

		// Print transmitter data
		memset(str_1, 0, sizeof(str_1));
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2214      	movs	r2, #20
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f007 fd0a 	bl	8008728 <memset>
		ssd1306_SetCursor(35, 28);
 8000d14:	211c      	movs	r1, #28
 8000d16:	2023      	movs	r0, #35	; 0x23
 8000d18:	f001 fbfe 	bl	8002518 <ssd1306_SetCursor>
		sprintf(str_1, "%d", tx_lora_data);
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	491f      	ldr	r1, [pc, #124]	; (8000da4 <LoRa_TX_send_test_number+0x1a8>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f007 fd06 	bl	8008738 <siprintf>
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000d2c:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <LoRa_TX_send_test_number+0x190>)
 8000d2e:	f107 000c 	add.w	r0, r7, #12
 8000d32:	2301      	movs	r3, #1
 8000d34:	ca06      	ldmia	r2, {r1, r2}
 8000d36:	f001 fbc9 	bl	80024cc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000d3a:	f001 fab7 	bl	80022ac <ssd1306_UpdateScreen>

		tx_lora_data++;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000d46:	6013      	str	r3, [r2, #0]
		transmit_count++;											// Increment test data
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <LoRa_TX_send_test_number+0x1a4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <LoRa_TX_send_test_number+0x1a4>)
 8000d50:	6013      	str	r3, [r2, #0]
		HAL_Delay(2000);											// Must be more than 1.5 sec
 8000d52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d56:	f004 f96f 	bl	8005038 <HAL_Delay>
	}
	if(flag == false)
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d008      	beq.n	8000d78 <LoRa_TX_send_test_number+0x17c>
	{
		flag_first_time = true;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <LoRa_TX_send_test_number+0x184>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
		transmit_count = 1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <LoRa_TX_send_test_number+0x1a4>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
		tx_lora_data = 0;											// Every time count will be start from 1
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
	}
}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000005 	.word	0x20000005
 8000d84:	20000554 	.word	0x20000554
 8000d88:	080090b4 	.word	0x080090b4
 8000d8c:	2000001c 	.word	0x2000001c
 8000d90:	080090c0 	.word	0x080090c0
 8000d94:	20000588 	.word	0x20000588
 8000d98:	20000650 	.word	0x20000650
 8000d9c:	200000d0 	.word	0x200000d0
 8000da0:	20000000 	.word	0x20000000
 8000da4:	080090c8 	.word	0x080090c8

08000da8 <lora_transmit_data>:
//----------------------------------------------------------------------------------------
void lora_transmit_data(int transmit_count)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	static uint8_t data[10] = {0};

	data[5] = '0' + transmit_count%10;
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4b47      	ldr	r3, [pc, #284]	; (8000ed0 <lora_transmit_data+0x128>)
 8000db4:	fb83 1302 	smull	r1, r3, r3, r2
 8000db8:	1099      	asrs	r1, r3, #2
 8000dba:	17d3      	asrs	r3, r2, #31
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	1ad1      	subs	r1, r2, r3
 8000dc8:	b2cb      	uxtb	r3, r1
 8000dca:	3330      	adds	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000dd0:	715a      	strb	r2, [r3, #5]
	data[4] = '0' + (transmit_count/10) % 10;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a3e      	ldr	r2, [pc, #248]	; (8000ed0 <lora_transmit_data+0x128>)
 8000dd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dda:	1092      	asrs	r2, r2, #2
 8000ddc:	17db      	asrs	r3, r3, #31
 8000dde:	1ad2      	subs	r2, r2, r3
 8000de0:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <lora_transmit_data+0x128>)
 8000de2:	fb83 1302 	smull	r1, r3, r3, r2
 8000de6:	1099      	asrs	r1, r3, #2
 8000de8:	17d3      	asrs	r3, r2, #31
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	460b      	mov	r3, r1
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	1ad1      	subs	r1, r2, r3
 8000df6:	b2cb      	uxtb	r3, r1
 8000df8:	3330      	adds	r3, #48	; 0x30
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000dfe:	711a      	strb	r2, [r3, #4]
	data[3] = '0' + (transmit_count/100) % 10;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a35      	ldr	r2, [pc, #212]	; (8000ed8 <lora_transmit_data+0x130>)
 8000e04:	fb82 1203 	smull	r1, r2, r2, r3
 8000e08:	1152      	asrs	r2, r2, #5
 8000e0a:	17db      	asrs	r3, r3, #31
 8000e0c:	1ad2      	subs	r2, r2, r3
 8000e0e:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <lora_transmit_data+0x128>)
 8000e10:	fb83 1302 	smull	r1, r3, r3, r2
 8000e14:	1099      	asrs	r1, r3, #2
 8000e16:	17d3      	asrs	r3, r2, #31
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	1ad1      	subs	r1, r2, r3
 8000e24:	b2cb      	uxtb	r3, r1
 8000e26:	3330      	adds	r3, #48	; 0x30
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000e2c:	70da      	strb	r2, [r3, #3]
	data[2] = '0' + (transmit_count/1000) % 10;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a2a      	ldr	r2, [pc, #168]	; (8000edc <lora_transmit_data+0x134>)
 8000e32:	fb82 1203 	smull	r1, r2, r2, r3
 8000e36:	1192      	asrs	r2, r2, #6
 8000e38:	17db      	asrs	r3, r3, #31
 8000e3a:	1ad2      	subs	r2, r2, r3
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <lora_transmit_data+0x128>)
 8000e3e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e42:	1099      	asrs	r1, r3, #2
 8000e44:	17d3      	asrs	r3, r2, #31
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	460b      	mov	r3, r1
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	1ad1      	subs	r1, r2, r3
 8000e52:	b2cb      	uxtb	r3, r1
 8000e54:	3330      	adds	r3, #48	; 0x30
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000e5a:	709a      	strb	r2, [r3, #2]
	data[1] = '0' + (transmit_count/10000) % 10;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <lora_transmit_data+0x138>)
 8000e60:	fb82 1203 	smull	r1, r2, r2, r3
 8000e64:	1312      	asrs	r2, r2, #12
 8000e66:	17db      	asrs	r3, r3, #31
 8000e68:	1ad2      	subs	r2, r2, r3
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <lora_transmit_data+0x128>)
 8000e6c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e70:	1099      	asrs	r1, r3, #2
 8000e72:	17d3      	asrs	r3, r2, #31
 8000e74:	1ac9      	subs	r1, r1, r3
 8000e76:	460b      	mov	r3, r1
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	1ad1      	subs	r1, r2, r3
 8000e80:	b2cb      	uxtb	r3, r1
 8000e82:	3330      	adds	r3, #48	; 0x30
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000e88:	705a      	strb	r2, [r3, #1]
	data[0] = '0' + (transmit_count/100000) % 10;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <lora_transmit_data+0x13c>)
 8000e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e92:	1352      	asrs	r2, r2, #13
 8000e94:	17db      	asrs	r3, r3, #31
 8000e96:	1ad2      	subs	r2, r2, r3
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <lora_transmit_data+0x128>)
 8000e9a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e9e:	1099      	asrs	r1, r3, #2
 8000ea0:	17d3      	asrs	r3, r2, #31
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	1ad1      	subs	r1, r2, r3
 8000eae:	b2cb      	uxtb	r3, r1
 8000eb0:	3330      	adds	r3, #48	; 0x30
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	data[6] = '\n';
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000eba:	220a      	movs	r2, #10
 8000ebc:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit_IT(&huart1, data, 7);
 8000ebe:	2207      	movs	r2, #7
 8000ec0:	4904      	ldr	r1, [pc, #16]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000ec2:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <lora_transmit_data+0x140>)
 8000ec4:	f006 ff99 	bl	8007dfa <HAL_UART_Transmit_IT>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	66666667 	.word	0x66666667
 8000ed4:	200000d4 	.word	0x200000d4
 8000ed8:	51eb851f 	.word	0x51eb851f
 8000edc:	10624dd3 	.word	0x10624dd3
 8000ee0:	68db8bad 	.word	0x68db8bad
 8000ee4:	14f8b589 	.word	0x14f8b589
 8000ee8:	20000650 	.word	0x20000650

08000eec <LoRa_TX_send_T_and_H>:
// -------------------------------------------------------------------------------
void LoRa_TX_send_T_and_H(bool flag)   // Зробити пересилання стрінги !!!!
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	//static int transmit_count = 0;									// Variable for transmit
	char str_1[20] = {0};
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000efa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init)
 8000f08:	4ba3      	ldr	r3, [pc, #652]	; (8001198 <LoRa_TX_send_T_and_H+0x2ac>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d04c      	beq.n	8000faa <LoRa_TX_send_T_and_H+0xbe>
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d049      	beq.n	8000faa <LoRa_TX_send_T_and_H+0xbe>
	{
		memset(uart_rx_data, 0, sizeof(uart_rx_data));//uart_rx_data[50]
 8000f16:	2232      	movs	r2, #50	; 0x32
 8000f18:	2100      	movs	r1, #0
 8000f1a:	48a0      	ldr	r0, [pc, #640]	; (800119c <LoRa_TX_send_T_and_H+0x2b0>)
 8000f1c:	f007 fc04 	bl	8008728 <memset>

		HAL_Delay(100);
 8000f20:	2064      	movs	r0, #100	; 0x64
 8000f22:	f004 f889 	bl	8005038 <HAL_Delay>
		init_lora_TX();
 8000f26:	f000 f973 	bl	8001210 <init_lora_TX>
		HAL_Delay(500);
 8000f2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2e:	f004 f883 	bl	8005038 <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000f32:	2110      	movs	r1, #16
 8000f34:	2000      	movs	r0, #0
 8000f36:	f001 faef 	bl	8002518 <ssd1306_SetCursor>
		strcpy(str_1, "TX count:");
 8000f3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f3e:	4a98      	ldr	r2, [pc, #608]	; (80011a0 <LoRa_TX_send_T_and_H+0x2b4>)
 8000f40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f42:	c303      	stmia	r3!, {r0, r1}
 8000f44:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000f46:	4a97      	ldr	r2, [pc, #604]	; (80011a4 <LoRa_TX_send_T_and_H+0x2b8>)
 8000f48:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	ca06      	ldmia	r2, {r1, r2}
 8000f50:	f001 fabc 	bl	80024cc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000f54:	f001 f9aa 	bl	80022ac <ssd1306_UpdateScreen>

		memset(str_1, 0, sizeof(str_1));
 8000f58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f5c:	2214      	movs	r2, #20
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f007 fbe1 	bl	8008728 <memset>
		ssd1306_SetCursor(0, 28);
 8000f66:	211c      	movs	r1, #28
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f001 fad5 	bl	8002518 <ssd1306_SetCursor>
		strcpy(str_1, "Transmitting data:");
 8000f6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f72:	4a8d      	ldr	r2, [pc, #564]	; (80011a8 <LoRa_TX_send_T_and_H+0x2bc>)
 8000f74:	461c      	mov	r4, r3
 8000f76:	4615      	mov	r5, r2
 8000f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	8022      	strh	r2, [r4, #0]
 8000f82:	3402      	adds	r4, #2
 8000f84:	0c1b      	lsrs	r3, r3, #16
 8000f86:	7023      	strb	r3, [r4, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000f88:	4a86      	ldr	r2, [pc, #536]	; (80011a4 <LoRa_TX_send_T_and_H+0x2b8>)
 8000f8a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000f8e:	2301      	movs	r3, #1
 8000f90:	ca06      	ldmia	r2, {r1, r2}
 8000f92:	f001 fa9b 	bl	80024cc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000f96:	f001 f989 	bl	80022ac <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4983      	ldr	r1, [pc, #524]	; (80011ac <LoRa_TX_send_T_and_H+0x2c0>)
 8000f9e:	4884      	ldr	r0, [pc, #528]	; (80011b0 <LoRa_TX_send_T_and_H+0x2c4>)
 8000fa0:	f006 ff6f 	bl	8007e82 <HAL_UART_Receive_IT>
		flag_first_time = false;
 8000fa4:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <LoRa_TX_send_T_and_H+0x2ac>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Repeat it part for transmit data
 8000faa:	4b7b      	ldr	r3, [pc, #492]	; (8001198 <LoRa_TX_send_T_and_H+0x2ac>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f083 0301 	eor.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80df 	beq.w	8001178 <LoRa_TX_send_T_and_H+0x28c>
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80db 	beq.w	8001178 <LoRa_TX_send_T_and_H+0x28c>
	{
		// Message look like this:
		// counter| T = 25C H = 55%'\n'
		char str_main_buf[35] = {0};
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	221f      	movs	r2, #31
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f007 fbaa 	bl	8008728 <memset>
		char str_buf[10] = {0};
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8000fd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	809a      	strh	r2, [r3, #4]
		// Add counter to string
		itoa(transmit_count, str_buf, 10);
 8000fe2:	4b74      	ldr	r3, [pc, #464]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000fea:	220a      	movs	r2, #10
 8000fec:	4618      	mov	r0, r3
 8000fee:	f007 fb99 	bl	8008724 <itoa>
		strcat(str_main_buf, str_buf);
 8000ff2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f007 fbbb 	bl	8008778 <strcat>
		memset(str_buf, 0, sizeof(str_buf));
 8001002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001006:	220a      	movs	r2, #10
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f007 fb8c 	bl	8008728 <memset>
		// Add temperature to string
		strcat(str_main_buf, "| T=");
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f899 	bl	800014c <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4413      	add	r3, r2
 8001024:	4a64      	ldr	r2, [pc, #400]	; (80011b8 <LoRa_TX_send_T_and_H+0x2cc>)
 8001026:	6810      	ldr	r0, [r2, #0]
 8001028:	6018      	str	r0, [r3, #0]
 800102a:	7912      	ldrb	r2, [r2, #4]
 800102c:	711a      	strb	r2, [r3, #4]
		itoa(am3202_sensor.temterature, str_buf, 10);
 800102e:	4b63      	ldr	r3, [pc, #396]	; (80011bc <LoRa_TX_send_T_and_H+0x2d0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001036:	220a      	movs	r2, #10
 8001038:	4618      	mov	r0, r3
 800103a:	f007 fb73 	bl	8008724 <itoa>
		strcat(str_main_buf, str_buf);
 800103e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f007 fb95 	bl	8008778 <strcat>
		memset(str_buf, 0, sizeof(str_buf));
 800104e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001052:	220a      	movs	r2, #10
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f007 fb66 	bl	8008728 <memset>
		strcat(str_main_buf, "C");
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f873 	bl	800014c <strlen>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4413      	add	r3, r2
 8001070:	4953      	ldr	r1, [pc, #332]	; (80011c0 <LoRa_TX_send_T_and_H+0x2d4>)
 8001072:	461a      	mov	r2, r3
 8001074:	460b      	mov	r3, r1
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	8013      	strh	r3, [r2, #0]
		// Add humidity to string
		strcat(str_main_buf, " H=");
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f864 	bl	800014c <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4413      	add	r3, r2
 800108e:	4a4d      	ldr	r2, [pc, #308]	; (80011c4 <LoRa_TX_send_T_and_H+0x2d8>)
 8001090:	6810      	ldr	r0, [r2, #0]
 8001092:	6018      	str	r0, [r3, #0]
		itoa(am3202_sensor.humidity, str_buf, 10);
 8001094:	4b49      	ldr	r3, [pc, #292]	; (80011bc <LoRa_TX_send_T_and_H+0x2d0>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800109c:	220a      	movs	r2, #10
 800109e:	4618      	mov	r0, r3
 80010a0:	f007 fb40 	bl	8008724 <itoa>
		strcat(str_main_buf, str_buf);
 80010a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f007 fb62 	bl	8008778 <strcat>
		memset(str_buf, 0, sizeof(str_buf));
 80010b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b8:	220a      	movs	r2, #10
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f007 fb33 	bl	8008728 <memset>
		strcat(str_main_buf, "%");
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f840 	bl	800014c <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	4413      	add	r3, r2
 80010d6:	493c      	ldr	r1, [pc, #240]	; (80011c8 <LoRa_TX_send_T_and_H+0x2dc>)
 80010d8:	461a      	mov	r2, r3
 80010da:	460b      	mov	r3, r1
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	8013      	strh	r3, [r2, #0]

		// Print transmitter data
		ssd1306_SetCursor(0, 40);
 80010e0:	2128      	movs	r1, #40	; 0x28
 80010e2:	2000      	movs	r0, #0
 80010e4:	f001 fa18 	bl	8002518 <ssd1306_SetCursor>
		ssd1306_WriteString(str_main_buf,  Font_7x10, White);
 80010e8:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <LoRa_TX_send_T_and_H+0x2b8>)
 80010ea:	f107 000c 	add.w	r0, r7, #12
 80010ee:	2301      	movs	r3, #1
 80010f0:	ca06      	ldmia	r2, {r1, r2}
 80010f2:	f001 f9eb 	bl	80024cc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80010f6:	f001 f8d9 	bl	80022ac <ssd1306_UpdateScreen>

		// Add end of line to string
		strcat(str_main_buf, "\n");				// Add stop
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f824 	bl	800014c <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4413      	add	r3, r2
 800110e:	492f      	ldr	r1, [pc, #188]	; (80011cc <LoRa_TX_send_T_and_H+0x2e0>)
 8001110:	461a      	mov	r2, r3
 8001112:	460b      	mov	r3, r1
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	8013      	strh	r3, [r2, #0]

		HAL_UART_Transmit_IT(&huart1, str_main_buf, sizeof(str_main_buf));				// Transmitting over LoRa module
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2223      	movs	r2, #35	; 0x23
 800111e:	4619      	mov	r1, r3
 8001120:	4823      	ldr	r0, [pc, #140]	; (80011b0 <LoRa_TX_send_T_and_H+0x2c4>)
 8001122:	f006 fe6a 	bl	8007dfa <HAL_UART_Transmit_IT>
		HAL_Delay(2000);
 8001126:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800112a:	f003 ff85 	bl	8005038 <HAL_Delay>

		// Print transmitter counter
		memset(str_1, 0, sizeof(str_1));
 800112e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001132:	2214      	movs	r2, #20
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f007 faf6 	bl	8008728 <memset>
		ssd1306_SetCursor(70, 16);
 800113c:	2110      	movs	r1, #16
 800113e:	2046      	movs	r0, #70	; 0x46
 8001140:	f001 f9ea 	bl	8002518 <ssd1306_SetCursor>
		sprintf(str_1, "%d", transmit_count);
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800114c:	4920      	ldr	r1, [pc, #128]	; (80011d0 <LoRa_TX_send_T_and_H+0x2e4>)
 800114e:	4618      	mov	r0, r3
 8001150:	f007 faf2 	bl	8008738 <siprintf>
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <LoRa_TX_send_T_and_H+0x2b8>)
 8001156:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800115a:	2301      	movs	r3, #1
 800115c:	ca06      	ldmia	r2, {r1, r2}
 800115e:	f001 f9b5 	bl	80024cc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001162:	f001 f8a3 	bl	80022ac <ssd1306_UpdateScreen>

		transmit_count++;											// Increment test data
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 800116e:	6013      	str	r3, [r2, #0]
		HAL_Delay(2000);											// Must be more than 1.5 sec
 8001170:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001174:	f003 ff60 	bl	8005038 <HAL_Delay>
	}
	if(flag == false)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f083 0301 	eor.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <LoRa_TX_send_T_and_H+0x2a4>
	{
		flag_first_time = true;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <LoRa_TX_send_T_and_H+0x2ac>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
		transmit_count = 1;
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
	}
}
 8001190:	bf00      	nop
 8001192:	3750      	adds	r7, #80	; 0x50
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	20000006 	.word	0x20000006
 800119c:	20000554 	.word	0x20000554
 80011a0:	080090b4 	.word	0x080090b4
 80011a4:	2000001c 	.word	0x2000001c
 80011a8:	080090cc 	.word	0x080090cc
 80011ac:	20000588 	.word	0x20000588
 80011b0:	20000650 	.word	0x20000650
 80011b4:	20000000 	.word	0x20000000
 80011b8:	080090e0 	.word	0x080090e0
 80011bc:	200005ac 	.word	0x200005ac
 80011c0:	080090e8 	.word	0x080090e8
 80011c4:	080090ec 	.word	0x080090ec
 80011c8:	080090f0 	.word	0x080090f0
 80011cc:	080090f4 	.word	0x080090f4
 80011d0:	080090c8 	.word	0x080090c8

080011d4 <read_all_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_all_settings_from_module(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 80011d8:	f000 f8aa 	bl	8001330 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f003 ff2b 	bl	8005038 <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;			// 0xC1 - Read register command
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <read_all_settings_from_module+0x34>)
 80011e4:	22c1      	movs	r2, #193	; 0xc1
 80011e6:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;			// Number of register for read
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <read_all_settings_from_module+0x34>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;			// How many registers must be read
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <read_all_settings_from_module+0x34>)
 80011f0:	2208      	movs	r2, #8
 80011f2:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 80011f4:	2203      	movs	r2, #3
 80011f6:	4904      	ldr	r1, [pc, #16]	; (8001208 <read_all_settings_from_module+0x34>)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <read_all_settings_from_module+0x38>)
 80011fa:	f006 fdfe 	bl	8007dfa <HAL_UART_Transmit_IT>

	HAL_Delay(100);
 80011fe:	2064      	movs	r0, #100	; 0x64
 8001200:	f003 ff1a 	bl	8005038 <HAL_Delay>

	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200000e0 	.word	0x200000e0
 800120c:	20000650 	.word	0x20000650

08001210 <init_lora_TX>:
//----------------------------------------------------------------------------------------
bool init_lora_TX(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	// з зчитаними даними конфіг регістрів. Якщо співпадає повністю, тоді записати в
	// глобальну змінну що модуль ініціалізований нормально

	static uint8_t data[10] = {0};

	set_config_deep_sleep_mode();
 8001214:	f000 f88c 	bl	8001330 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 8001218:	2064      	movs	r0, #100	; 0x64
 800121a:	f003 ff0d 	bl	8005038 <HAL_Delay>

	// Init module
	// Descripe settings structure
	data[0] = 0xC0;		// 0xC0 - Set register command
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <init_lora_TX+0x88>)
 8001220:	22c0      	movs	r2, #192	; 0xc0
 8001222:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <init_lora_TX+0x88>)
 8001226:	2200      	movs	r2, #0
 8001228:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <init_lora_TX+0x88>)
 800122c:	2203      	movs	r2, #3
 800122e:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <init_lora_TX+0x88>)
 8001232:	2212      	movs	r2, #18
 8001234:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <init_lora_TX+0x88>)
 8001238:	2234      	movs	r2, #52	; 0x34
 800123a:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register (see in Datasheet)
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <init_lora_TX+0x88>)
 800123e:	2262      	movs	r2, #98	; 0x62
 8001240:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 8001242:	2206      	movs	r2, #6
 8001244:	4914      	ldr	r1, [pc, #80]	; (8001298 <init_lora_TX+0x88>)
 8001246:	4815      	ldr	r0, [pc, #84]	; (800129c <init_lora_TX+0x8c>)
 8001248:	f006 fdd7 	bl	8007dfa <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 800124c:	200a      	movs	r0, #10
 800124e:	f003 fef3 	bl	8005038 <HAL_Delay>

	memset(data, 0, sizeof(data));
 8001252:	220a      	movs	r2, #10
 8001254:	2100      	movs	r1, #0
 8001256:	4810      	ldr	r0, [pc, #64]	; (8001298 <init_lora_TX+0x88>)
 8001258:	f007 fa66 	bl	8008728 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <init_lora_TX+0x88>)
 800125e:	22c0      	movs	r2, #192	; 0xc0
 8001260:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <init_lora_TX+0x88>)
 8001264:	2205      	movs	r2, #5
 8001266:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <init_lora_TX+0x88>)
 800126a:	2201      	movs	r2, #1
 800126c:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <init_lora_TX+0x88>)
 8001270:	2200      	movs	r2, #0
 8001272:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8001274:	2204      	movs	r2, #4
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <init_lora_TX+0x88>)
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <init_lora_TX+0x8c>)
 800127a:	f006 fdbe 	bl	8007dfa <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 800127e:	200a      	movs	r0, #10
 8001280:	f003 feda 	bl	8005038 <HAL_Delay>
	///////////////

	read_all_settings_from_module();
 8001284:	f7ff ffa6 	bl	80011d4 <read_all_settings_from_module>
	set_WOR_TX_mode();
 8001288:	f000 f876 	bl	8001378 <set_WOR_TX_mode>
	HAL_Delay(100);
 800128c:	2064      	movs	r0, #100	; 0x64
 800128e:	f003 fed3 	bl	8005038 <HAL_Delay>

	return true;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000ec 	.word	0x200000ec
 800129c:	20000650 	.word	0x20000650

080012a0 <init_lora_RX>:
//----------------------------------------------------------------------------------------
bool init_lora_RX(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	static uint8_t data[10] = {0};
	set_config_deep_sleep_mode();
 80012a4:	f000 f844 	bl	8001330 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 80012a8:	2064      	movs	r0, #100	; 0x64
 80012aa:	f003 fec5 	bl	8005038 <HAL_Delay>

	data[0] = 0xC0;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <init_lora_RX+0x88>)
 80012b0:	22c0      	movs	r2, #192	; 0xc0
 80012b2:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <init_lora_RX+0x88>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <init_lora_RX+0x88>)
 80012bc:	2203      	movs	r2, #3
 80012be:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <init_lora_RX+0x88>)
 80012c2:	2212      	movs	r2, #18
 80012c4:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <init_lora_RX+0x88>)
 80012c8:	2234      	movs	r2, #52	; 0x34
 80012ca:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register ()
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <init_lora_RX+0x88>)
 80012ce:	2262      	movs	r2, #98	; 0x62
 80012d0:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 80012d2:	2206      	movs	r2, #6
 80012d4:	4914      	ldr	r1, [pc, #80]	; (8001328 <init_lora_RX+0x88>)
 80012d6:	4815      	ldr	r0, [pc, #84]	; (800132c <init_lora_RX+0x8c>)
 80012d8:	f006 fd8f 	bl	8007dfa <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f003 feab 	bl	8005038 <HAL_Delay>

	memset(data, 0, sizeof(data));
 80012e2:	220a      	movs	r2, #10
 80012e4:	2100      	movs	r1, #0
 80012e6:	4810      	ldr	r0, [pc, #64]	; (8001328 <init_lora_RX+0x88>)
 80012e8:	f007 fa1e 	bl	8008728 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <init_lora_RX+0x88>)
 80012ee:	22c0      	movs	r2, #192	; 0xc0
 80012f0:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <init_lora_RX+0x88>)
 80012f4:	2205      	movs	r2, #5
 80012f6:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <init_lora_RX+0x88>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <init_lora_RX+0x88>)
 8001300:	2200      	movs	r2, #0
 8001302:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8001304:	2204      	movs	r2, #4
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <init_lora_RX+0x88>)
 8001308:	4808      	ldr	r0, [pc, #32]	; (800132c <init_lora_RX+0x8c>)
 800130a:	f006 fd76 	bl	8007dfa <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 800130e:	2064      	movs	r0, #100	; 0x64
 8001310:	f003 fe92 	bl	8005038 <HAL_Delay>

	read_all_settings_from_module();
 8001314:	f7ff ff5e 	bl	80011d4 <read_all_settings_from_module>
	set_WOR_RX_mode();
 8001318:	f000 f81c 	bl	8001354 <set_WOR_RX_mode>
	HAL_Delay(100);
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	f003 fe8b 	bl	8005038 <HAL_Delay>

	return true;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200000f8 	.word	0x200000f8
 800132c:	20000650 	.word	0x20000650

08001330 <set_config_deep_sleep_mode>:
//-------------------------------------------------------------------------------------------------
void set_config_deep_sleep_mode (void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	// Function use for go to deep sleep and configuration mode
	// Set M0 and M1 PINs
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <set_config_deep_sleep_mode+0x20>)
 800133c:	f004 fab5 	bl	80058aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2101      	movs	r1, #1
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <set_config_deep_sleep_mode+0x20>)
 8001346:	f004 fab0 	bl	80058aa <HAL_GPIO_WritePin>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010c00 	.word	0x40010c00

08001354 <set_WOR_RX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_RX_mode (void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Receiving mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <set_WOR_RX_mode+0x20>)
 8001360:	f004 faa3 	bl	80058aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2101      	movs	r1, #1
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <set_WOR_RX_mode+0x20>)
 800136a:	f004 fa9e 	bl	80058aa <HAL_GPIO_WritePin>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40010c00 	.word	0x40010c00

08001378 <set_WOR_TX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_TX_mode (void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Transmitting mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <set_WOR_TX_mode+0x20>)
 8001384:	f004 fa91 	bl	80058aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2101      	movs	r1, #1
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <set_WOR_TX_mode+0x20>)
 800138e:	f004 fa8c 	bl	80058aa <HAL_GPIO_WritePin>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40010c00 	.word	0x40010c00

0800139c <NRF24L01_RX_Mode>:
		NRF24L01_Receive();
	}
}
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 fd08 	bl	8001dbc <NRF24_ReadReg>
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP) | (1<<PRIM_RX);    	// Power up module. Write PWR_UP and PRIM_RX bits
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f043 0303 	orr.w	r3, r3, #3
 80013b6:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4619      	mov	r1, r3
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 fd31 	bl	8001e24 <NRF24_WriteReg>
  NRF24_WriteReg(CONFIG, 0x33);     		//  IRQ WORK  ~ 130 us
 80013c2:	2133      	movs	r1, #51	; 0x33
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 fd2d 	bl	8001e24 <NRF24_WriteReg>
  CE_SET;
 80013ca:	2201      	movs	r2, #1
 80013cc:	2108      	movs	r1, #8
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <NRF24L01_RX_Mode+0x50>)
 80013d0:	f004 fa6b 	bl	80058aa <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 80013d4:	2096      	movs	r0, #150	; 0x96
 80013d6:	f000 fccf 	bl	8001d78 <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 80013da:	f000 fdd7 	bl	8001f8c <NRF24_FlushRX>
  NRF24_FlushTX();
 80013de:	f000 fdf7 	bl	8001fd0 <NRF24_FlushTX>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40010800 	.word	0x40010800

080013f0 <NRF24L01_Receive>:
//----------------------------------------------------------------------------------------
// Function waite Low IRQ signal from NRF module
bool NRF24L01_Receive(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08e      	sub	sp, #56	; 0x38
 80013f4:	af00      	add	r7, sp, #0
	if(rx_flag == 1)
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <NRF24L01_Receive+0xbc>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d150      	bne.n	80014a2 <NRF24L01_Receive+0xb2>
	{
		// Detect what's pipes data come from
		if(pipe == 0)
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <NRF24L01_Receive+0xc0>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d123      	bne.n	8001450 <NRF24L01_Receive+0x60>
		{
			ssd1306_SetCursor(0, 16);
 8001408:	2110      	movs	r1, #16
 800140a:	2000      	movs	r0, #0
 800140c:	f001 f884 	bl	8002518 <ssd1306_SetCursor>
			char str_rx_oled_buffer_pipe_0[25] = {0};
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	751a      	strb	r2, [r3, #20]
			strcpy(str_rx_oled_buffer_pipe_0, "P0: ");
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <NRF24L01_Receive+0xc4>)
 800142c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001430:	6018      	str	r0, [r3, #0]
 8001432:	3304      	adds	r3, #4
 8001434:	7019      	strb	r1, [r3, #0]
			strcat(str_rx_oled_buffer_pipe_0, RX_BUF);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	491f      	ldr	r1, [pc, #124]	; (80014b8 <NRF24L01_Receive+0xc8>)
 800143c:	4618      	mov	r0, r3
 800143e:	f007 f99b 	bl	8008778 <strcat>
			ssd1306_WriteString(str_rx_oled_buffer_pipe_0,  Font_7x10, White);
 8001442:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <NRF24L01_Receive+0xcc>)
 8001444:	f107 001c 	add.w	r0, r7, #28
 8001448:	2301      	movs	r3, #1
 800144a:	ca06      	ldmia	r2, {r1, r2}
 800144c:	f001 f83e 	bl	80024cc <ssd1306_WriteString>
		}
		if(pipe == 1)
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <NRF24L01_Receive+0xc0>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d11f      	bne.n	8001498 <NRF24L01_Receive+0xa8>
		{
			ssd1306_SetCursor(0, 26);
 8001458:	211a      	movs	r1, #26
 800145a:	2000      	movs	r0, #0
 800145c:	f001 f85c 	bl	8002518 <ssd1306_SetCursor>
			char str_rx_oled_buffer_pipe_1[25] = {0};
 8001460:	2300      	movs	r3, #0
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
 8001472:	751a      	strb	r2, [r3, #20]
			strcpy(str_rx_oled_buffer_pipe_1, "P1: ");
 8001474:	463b      	mov	r3, r7
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <NRF24L01_Receive+0xd0>)
 8001478:	e892 0003 	ldmia.w	r2, {r0, r1}
 800147c:	6018      	str	r0, [r3, #0]
 800147e:	3304      	adds	r3, #4
 8001480:	7019      	strb	r1, [r3, #0]
			strcat(str_rx_oled_buffer_pipe_1, RX_BUF);
 8001482:	463b      	mov	r3, r7
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <NRF24L01_Receive+0xc8>)
 8001486:	4618      	mov	r0, r3
 8001488:	f007 f976 	bl	8008778 <strcat>
			ssd1306_WriteString(str_rx_oled_buffer_pipe_1,  Font_7x10, White);
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <NRF24L01_Receive+0xcc>)
 800148e:	4638      	mov	r0, r7
 8001490:	2301      	movs	r3, #1
 8001492:	ca06      	ldmia	r2, {r1, r2}
 8001494:	f001 f81a 	bl	80024cc <ssd1306_WriteString>
		}
		// Print RX data on OLED
		ssd1306_UpdateScreen();
 8001498:	f000 ff08 	bl	80022ac <ssd1306_UpdateScreen>
		rx_flag = 0;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <NRF24L01_Receive+0xbc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
	}
}
 80014a2:	bf00      	nop
 80014a4:	4618      	mov	r0, r3
 80014a6:	3738      	adds	r7, #56	; 0x38
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000113 	.word	0x20000113
 80014b0:	20000138 	.word	0x20000138
 80014b4:	080090f8 	.word	0x080090f8
 80014b8:	20000104 	.word	0x20000104
 80014bc:	2000001c 	.word	0x2000001c
 80014c0:	08009100 	.word	0x08009100

080014c4 <NRF24_init_RX_mode>:
//----------------------------------------------------------------------------------------
void NRF24_init_RX_mode(void)                  // RECEIVE
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	reset_nrf24l01();				// RESET module settings
 80014c8:	f000 fde4 	bl	8002094 <reset_nrf24l01>
	tx_or_rx_mode = rx_mode;		// For block interrupt HAL_GPIO_EXTI_Callback
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <NRF24_init_RX_mode+0xb4>)
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <NRF24_init_RX_mode+0xb8>)
 80014d2:	701a      	strb	r2, [r3, #0]

	CE_RESET;
 80014d4:	2200      	movs	r2, #0
 80014d6:	2108      	movs	r1, #8
 80014d8:	4829      	ldr	r0, [pc, #164]	; (8001580 <NRF24_init_RX_mode+0xbc>)
 80014da:	f004 f9e6 	bl	80058aa <HAL_GPIO_WritePin>
	DelayMicro(5000);
 80014de:	f241 3088 	movw	r0, #5000	; 0x1388
 80014e2:	f000 fc49 	bl	8001d78 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter) 0b 0000 1010
 80014e6:	210a      	movs	r1, #10
 80014e8:	2000      	movs	r0, #0
 80014ea:	f000 fc9b 	bl	8001e24 <NRF24_WriteReg>

	DelayMicro(5000);
 80014ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80014f2:	f000 fc41 	bl	8001d78 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x03); 			// Enable Pipe0 and Pipe1
 80014f6:	2103      	movs	r1, #3
 80014f8:	2001      	movs	r0, #1
 80014fa:	f000 fc93 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x03); 		// Enable Pipe0 and Pipe1
 80014fe:	2103      	movs	r1, #3
 8001500:	2002      	movs	r0, #2
 8001502:	f000 fc8f 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8001506:	2101      	movs	r1, #1
 8001508:	2003      	movs	r0, #3
 800150a:	f000 fc8b 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 800150e:	215f      	movs	r1, #95	; 0x5f
 8001510:	2004      	movs	r0, #4
 8001512:	f000 fc87 	bl	8001e24 <NRF24_WriteReg>
	NRF24_ToggleFeatures();					// Send activated command
 8001516:	f000 fcb3 	bl	8001e80 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);				// Turn off all FEATURE register
 800151a:	2100      	movs	r1, #0
 800151c:	201d      	movs	r0, #29
 800151e:	f000 fc81 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0); 				// Turn off all payload length data pipe
 8001522:	2100      	movs	r1, #0
 8001524:	201c      	movs	r0, #28
 8001526:	f000 fc7d 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800152a:	2170      	movs	r1, #112	; 0x70
 800152c:	2007      	movs	r0, #7
 800152e:	f000 fc79 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz  // was 76
 8001532:	214c      	movs	r1, #76	; 0x4c
 8001534:	2005      	movs	r0, #5
 8001536:	f000 fc75 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26); 	    // TX_PWR:0dBm, Datarate:250kbps
 800153a:	2126      	movs	r1, #38	; 0x26
 800153c:	2006      	movs	r0, #6
 800153e:	f000 fc71 	bl	8001e24 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_0, TX_ADR_WIDTH);		//	set up Transmit address. Used for a PTX device only.
 8001542:	2203      	movs	r2, #3
 8001544:	490f      	ldr	r1, [pc, #60]	; (8001584 <NRF24_init_RX_mode+0xc0>)
 8001546:	2010      	movs	r0, #16
 8001548:	f000 fcee 	bl	8001f28 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_0, TX_ADR_WIDTH);    // Set up pipe 0 address
 800154c:	2203      	movs	r2, #3
 800154e:	490d      	ldr	r1, [pc, #52]	; (8001584 <NRF24_init_RX_mode+0xc0>)
 8001550:	200a      	movs	r0, #10
 8001552:	f000 fce9 	bl	8001f28 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS_1, TX_ADR_WIDTH);    // Set up pipe 1 address
 8001556:	2203      	movs	r2, #3
 8001558:	490b      	ldr	r1, [pc, #44]	; (8001588 <NRF24_init_RX_mode+0xc4>)
 800155a:	200b      	movs	r0, #11
 800155c:	f000 fce4 	bl	8001f28 <NRF24_Write_Buf>

	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 0
 8001560:	210f      	movs	r1, #15
 8001562:	2011      	movs	r0, #17
 8001564:	f000 fc5e 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 1
 8001568:	210f      	movs	r1, #15
 800156a:	2012      	movs	r0, #18
 800156c:	f000 fc5a 	bl	8001e24 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 8001570:	f7ff ff14 	bl	800139c <NRF24L01_RX_Mode>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000102 	.word	0x20000102
 800157c:	20000008 	.word	0x20000008
 8001580:	40010800 	.word	0x40010800
 8001584:	2000000c 	.word	0x2000000c
 8001588:	20000010 	.word	0x20000010

0800158c <IRQ_Callback>:

//----------------------------------------------------------------------------------------
// Callback generate when stm32 get falling  signal from IRQ pin (NRF module show that it has data in buffer)
void IRQ_Callback(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 8001592:	2301      	movs	r3, #1
 8001594:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 8001596:	2300      	movs	r3, #0
 8001598:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800159a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159e:	4814      	ldr	r0, [pc, #80]	; (80015f0 <IRQ_Callback+0x64>)
 80015a0:	f004 f99b 	bl	80058da <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80015a4:	200a      	movs	r0, #10
 80015a6:	f000 fbe7 	bl	8001d78 <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 80015aa:	2007      	movs	r0, #7
 80015ac:	f000 fc06 	bl	8001dbc <NRF24_ReadReg>
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d013      	beq.n	80015e6 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	085b      	lsrs	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <IRQ_Callback+0x68>)
 80015cc:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80015ce:	220f      	movs	r2, #15
 80015d0:	4909      	ldr	r1, [pc, #36]	; (80015f8 <IRQ_Callback+0x6c>)
 80015d2:	2061      	movs	r0, #97	; 0x61
 80015d4:	f000 fc7e 	bl	8001ed4 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 80015d8:	2140      	movs	r1, #64	; 0x40
 80015da:	2007      	movs	r0, #7
 80015dc:	f000 fc22 	bl	8001e24 <NRF24_WriteReg>
		rx_flag = 1;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <IRQ_Callback+0x70>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
	}
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40011000 	.word	0x40011000
 80015f4:	20000138 	.word	0x20000138
 80015f8:	20000104 	.word	0x20000104
 80015fc:	20000113 	.word	0x20000113

08001600 <NRF24L01_RX_Mode_for_TX_mode>:
		NRF24L01_Transmission_counter();
	}
}
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode_for_TX_mode(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 8001606:	2300      	movs	r3, #0
 8001608:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 800160a:	2000      	movs	r0, #0
 800160c:	f000 fbd6 	bl	8001dbc <NRF24_ReadReg>
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f043 0303 	orr.w	r3, r3, #3
 800161a:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	4619      	mov	r1, r3
 8001620:	2000      	movs	r0, #0
 8001622:	f000 fbff 	bl	8001e24 <NRF24_WriteReg>
  CE_SET;
 8001626:	2201      	movs	r2, #1
 8001628:	2108      	movs	r1, #8
 800162a:	4807      	ldr	r0, [pc, #28]	; (8001648 <NRF24L01_RX_Mode_for_TX_mode+0x48>)
 800162c:	f004 f93d 	bl	80058aa <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 8001630:	2096      	movs	r0, #150	; 0x96
 8001632:	f000 fba1 	bl	8001d78 <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 8001636:	f000 fca9 	bl	8001f8c <NRF24_FlushRX>
  NRF24_FlushTX();
 800163a:	f000 fcc9 	bl	8001fd0 <NRF24_FlushTX>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40010800 	.word	0x40010800

0800164c <NRF24_init_TX_mode>:
//----------------------------------------------------------------------------------------
void NRF24_init_TX_mode(void)    // TRANSMITTER
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	reset_nrf24l01();				// RESET module settings
 8001650:	f000 fd20 	bl	8002094 <reset_nrf24l01>
	tx_or_rx_mode = tx_mode;		// For block interrupt HAL_GPIO_EXTI_Callback
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <NRF24_init_TX_mode+0xa8>)
 8001656:	781a      	ldrb	r2, [r3, #0]
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <NRF24_init_TX_mode+0xac>)
 800165a:	701a      	strb	r2, [r3, #0]

	CE_RESET;
 800165c:	2200      	movs	r2, #0
 800165e:	2108      	movs	r1, #8
 8001660:	4826      	ldr	r0, [pc, #152]	; (80016fc <NRF24_init_TX_mode+0xb0>)
 8001662:	f004 f922 	bl	80058aa <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8001666:	f241 3088 	movw	r0, #5000	; 0x1388
 800166a:	f000 fb85 	bl	8001d78 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800166e:	210a      	movs	r1, #10
 8001670:	2000      	movs	r0, #0
 8001672:	f000 fbd7 	bl	8001e24 <NRF24_WriteReg>

	DelayMicro(5000);
 8001676:	f241 3088 	movw	r0, #5000	; 0x1388
 800167a:	f000 fb7d 	bl	8001d78 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 800167e:	2101      	movs	r1, #1
 8001680:	2001      	movs	r0, #1
 8001682:	f000 fbcf 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8001686:	2101      	movs	r1, #1
 8001688:	2002      	movs	r0, #2
 800168a:	f000 fbcb 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800168e:	2101      	movs	r1, #1
 8001690:	2003      	movs	r0, #3
 8001692:	f000 fbc7 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8001696:	215f      	movs	r1, #95	; 0x5f
 8001698:	2004      	movs	r0, #4
 800169a:	f000 fbc3 	bl	8001e24 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 800169e:	f000 fbef 	bl	8001e80 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 80016a2:	2100      	movs	r1, #0
 80016a4:	201d      	movs	r0, #29
 80016a6:	f000 fbbd 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 80016aa:	2100      	movs	r1, #0
 80016ac:	201c      	movs	r0, #28
 80016ae:	f000 fbb9 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 80016b2:	2170      	movs	r1, #112	; 0x70
 80016b4:	2007      	movs	r0, #7
 80016b6:	f000 fbb5 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 80016ba:	214c      	movs	r1, #76	; 0x4c
 80016bc:	2005      	movs	r0, #5
 80016be:	f000 fbb1 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 80016c2:	2126      	movs	r1, #38	; 0x26
 80016c4:	2006      	movs	r0, #6
 80016c6:	f000 fbad 	bl	8001e24 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 80016ca:	2203      	movs	r2, #3
 80016cc:	490c      	ldr	r1, [pc, #48]	; (8001700 <NRF24_init_TX_mode+0xb4>)
 80016ce:	2010      	movs	r0, #16
 80016d0:	f000 fc2a 	bl	8001f28 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 80016d4:	2203      	movs	r2, #3
 80016d6:	490a      	ldr	r1, [pc, #40]	; (8001700 <NRF24_init_TX_mode+0xb4>)
 80016d8:	200a      	movs	r0, #10
 80016da:	f000 fc25 	bl	8001f28 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 80016de:	210f      	movs	r1, #15
 80016e0:	2011      	movs	r0, #17
 80016e2:	f000 fb9f 	bl	8001e24 <NRF24_WriteReg>

	NRF24L01_RX_Mode_for_TX_mode();
 80016e6:	f7ff ff8b 	bl	8001600 <NRF24L01_RX_Mode_for_TX_mode>

	read_config_registers();	// For debug
 80016ea:	f000 fc93 	bl	8002014 <read_config_registers>
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000007 	.word	0x20000007
 80016f8:	20000008 	.word	0x20000008
 80016fc:	40010800 	.word	0x40010800
 8001700:	20000014 	.word	0x20000014

08001704 <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 800170c:	2203      	movs	r2, #3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <NRF24L01_TX_Mode+0x2c>)
 8001710:	2010      	movs	r0, #16
 8001712:	f000 fc09 	bl	8001f28 <NRF24_Write_Buf>
  CE_RESET;
 8001716:	2200      	movs	r2, #0
 8001718:	2108      	movs	r1, #8
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <NRF24L01_TX_Mode+0x30>)
 800171c:	f004 f8c5 	bl	80058aa <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 8001720:	f000 fc34 	bl	8001f8c <NRF24_FlushRX>
  NRF24_FlushTX();
 8001724:	f000 fc54 	bl	8001fd0 <NRF24_FlushTX>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000014 	.word	0x20000014
 8001734:	40010800 	.word	0x40010800

08001738 <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	4613      	mov	r3, r2
 8001746:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 8001748:	2200      	movs	r2, #0
 800174a:	2108      	movs	r1, #8
 800174c:	4813      	ldr	r0, [pc, #76]	; (800179c <NRF24_Transmit+0x64>)
 800174e:	f004 f8ac 	bl	80058aa <HAL_GPIO_WritePin>
  CS_ON;
 8001752:	2200      	movs	r2, #0
 8001754:	2110      	movs	r1, #16
 8001756:	4811      	ldr	r0, [pc, #68]	; (800179c <NRF24_Transmit+0x64>)
 8001758:	f004 f8a7 	bl	80058aa <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 800175c:	1df9      	adds	r1, r7, #7
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	2201      	movs	r2, #1
 8001764:	480e      	ldr	r0, [pc, #56]	; (80017a0 <NRF24_Transmit+0x68>)
 8001766:	f005 f9e1 	bl	8006b2c <HAL_SPI_Transmit>
  DelayMicro(1);
 800176a:	2001      	movs	r0, #1
 800176c:	f000 fb04 	bl	8001d78 <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 8001770:	79bb      	ldrb	r3, [r7, #6]
 8001772:	b29a      	uxth	r2, r3
 8001774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001778:	6839      	ldr	r1, [r7, #0]
 800177a:	4809      	ldr	r0, [pc, #36]	; (80017a0 <NRF24_Transmit+0x68>)
 800177c:	f005 f9d6 	bl	8006b2c <HAL_SPI_Transmit>
  CS_OFF;
 8001780:	2201      	movs	r2, #1
 8001782:	2110      	movs	r1, #16
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <NRF24_Transmit+0x64>)
 8001786:	f004 f890 	bl	80058aa <HAL_GPIO_WritePin>
  CE_SET;
 800178a:	2201      	movs	r2, #1
 800178c:	2108      	movs	r1, #8
 800178e:	4803      	ldr	r0, [pc, #12]	; (800179c <NRF24_Transmit+0x64>)
 8001790:	f004 f88b 	bl	80058aa <HAL_GPIO_WritePin>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40010800 	.word	0x40010800
 80017a0:	200006dc 	.word	0x200006dc

080017a4 <NRF24L01_Send>:
//----------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	2300      	movs	r3, #0
 80017b2:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ffa5 	bl	8001704 <NRF24L01_TX_Mode>

  regval = NRF24_ReadReg(CONFIG);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f000 fafe 	bl	8001dbc <NRF24_ReadReg>
 80017c0:	4603      	mov	r3, r0
 80017c2:	73bb      	strb	r3, [r7, #14]

  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 80017cc:	7bbb      	ldrb	r3, [r7, #14]
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 80017d4:	7bbb      	ldrb	r3, [r7, #14]
 80017d6:	4619      	mov	r1, r3
 80017d8:	2000      	movs	r0, #0
 80017da:	f000 fb23 	bl	8001e24 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 80017de:	2096      	movs	r0, #150	; 0x96
 80017e0:	f000 faca 	bl	8001d78 <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 80017e4:	220f      	movs	r2, #15
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	20a0      	movs	r0, #160	; 0xa0
 80017ea:	f7ff ffa5 	bl	8001738 <NRF24_Transmit>

  CE_SET;
 80017ee:	2201      	movs	r2, #1
 80017f0:	2108      	movs	r1, #8
 80017f2:	481c      	ldr	r0, [pc, #112]	; (8001864 <NRF24L01_Send+0xc0>)
 80017f4:	f004 f859 	bl	80058aa <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 80017f8:	200f      	movs	r0, #15
 80017fa:	f000 fabd 	bl	8001d78 <DelayMicro>
  CE_RESET;
 80017fe:	2200      	movs	r2, #0
 8001800:	2108      	movs	r1, #8
 8001802:	4818      	ldr	r0, [pc, #96]	; (8001864 <NRF24L01_Send+0xc0>)
 8001804:	f004 f851 	bl	80058aa <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 8001808:	bf00      	nop
 800180a:	2104      	movs	r1, #4
 800180c:	4815      	ldr	r0, [pc, #84]	; (8001864 <NRF24L01_Send+0xc0>)
 800180e:	f004 f835 	bl	800587c <HAL_GPIO_ReadPin>
 8001812:	4603      	mov	r3, r0
 8001814:	2b01      	cmp	r3, #1
 8001816:	d0f8      	beq.n	800180a <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 8001818:	2007      	movs	r0, #7
 800181a:	f000 facf 	bl	8001dbc <NRF24_ReadReg>
 800181e:	4603      	mov	r3, r0
 8001820:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 800182c:	2120      	movs	r1, #32
 800182e:	2007      	movs	r0, #7
 8001830:	f000 faf8 	bl	8001e24 <NRF24_WriteReg>
 8001834:	e00a      	b.n	800184c <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <NRF24L01_Send+0xa8>
  {
    NRF24_WriteReg(STATUS_NRF, 0x10);
 8001840:	2110      	movs	r1, #16
 8001842:	2007      	movs	r0, #7
 8001844:	f000 faee 	bl	8001e24 <NRF24_WriteReg>
    NRF24_FlushTX();
 8001848:	f000 fbc2 	bl	8001fd0 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 800184c:	2008      	movs	r0, #8
 800184e:	f000 fab5 	bl	8001dbc <NRF24_ReadReg>
 8001852:	4603      	mov	r3, r0
 8001854:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode_for_TX_mode();
 8001856:	f7ff fed3 	bl	8001600 <NRF24L01_RX_Mode_for_TX_mode>

  return regval;
 800185a:	7bbb      	ldrb	r3, [r7, #14]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40010800 	.word	0x40010800

08001868 <NRF24L01_Transmission_counter>:
//----------------------------------------------------------------------------------------
void NRF24L01_Transmission_counter(void)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b091      	sub	sp, #68	; 0x44
 800186c:	af00      	add	r7, sp, #0
	static uint8_t retr_cnt, dt = 0;
	//static int test_data = 0;							// Init test data for transmit
	uint8_t buf2[20]={0};
 800186e:	2300      	movs	r3, #0
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001872:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
	uint8_t test_i[10] = {0};
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	809a      	strh	r2, [r3, #4]
	uint8_t str_nrf[25] = {0};
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]
 80018a2:	751a      	strb	r2, [r3, #20]

	// Print transmit data
	ssd1306_SetCursor(0, 16);
 80018a4:	2110      	movs	r1, #16
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 fe36 	bl	8002518 <ssd1306_SetCursor>
	strcpy(str_nrf, "Data:");
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4a6c      	ldr	r2, [pc, #432]	; (8001a60 <NRF24L01_Transmission_counter+0x1f8>)
 80018b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b4:	6018      	str	r0, [r3, #0]
 80018b6:	3304      	adds	r3, #4
 80018b8:	8019      	strh	r1, [r3, #0]
	sprintf(buf2, "%d", test_data);
 80018ba:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <NRF24L01_Transmission_counter+0x1fc>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c2:	4969      	ldr	r1, [pc, #420]	; (8001a68 <NRF24L01_Transmission_counter+0x200>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f006 ff37 	bl	8008738 <siprintf>
	strcat(str_nrf, buf2);
 80018ca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f006 ff50 	bl	8008778 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 80018d8:	4a64      	ldr	r2, [pc, #400]	; (8001a6c <NRF24L01_Transmission_counter+0x204>)
 80018da:	1d38      	adds	r0, r7, #4
 80018dc:	2301      	movs	r3, #1
 80018de:	ca06      	ldmia	r2, {r1, r2}
 80018e0:	f000 fdf4 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80018e4:	f000 fce2 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str_nrf, 0, sizeof(str_nrf));
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2219      	movs	r2, #25
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f006 ff1a 	bl	8008728 <memset>

	dt = NRF24L01_Send(buf2);						// Transmit data
 80018f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff53 	bl	80017a4 <NRF24L01_Send>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	4b5b      	ldr	r3, [pc, #364]	; (8001a70 <NRF24L01_Transmission_counter+0x208>)
 8001904:	701a      	strb	r2, [r3, #0]

	// Calculation retransmitted packets
	retr_cnt = dt & 0xF;
 8001906:	4b5a      	ldr	r3, [pc, #360]	; (8001a70 <NRF24L01_Transmission_counter+0x208>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b58      	ldr	r3, [pc, #352]	; (8001a74 <NRF24L01_Transmission_counter+0x20c>)
 8001912:	701a      	strb	r2, [r3, #0]
	retr_cnt_full += retr_cnt;		// Counting retransmit packets
 8001914:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <NRF24L01_Transmission_counter+0x20c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <NRF24L01_Transmission_counter+0x210>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a55      	ldr	r2, [pc, #340]	; (8001a78 <NRF24L01_Transmission_counter+0x210>)
 8001922:	6013      	str	r3, [r2, #0]

	// Print transmit counter
	memset(test_i, 0, sizeof(test_i));
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	220a      	movs	r2, #10
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f006 fefb 	bl	8008728 <memset>
	ssd1306_SetCursor(0, 26);
 8001932:	211a      	movs	r1, #26
 8001934:	2000      	movs	r0, #0
 8001936:	f000 fdef 	bl	8002518 <ssd1306_SetCursor>
	strcpy(str_nrf, "Conut trans:");
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4a4f      	ldr	r2, [pc, #316]	; (8001a7c <NRF24L01_Transmission_counter+0x214>)
 800193e:	461c      	mov	r4, r3
 8001940:	4613      	mov	r3, r2
 8001942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001944:	c407      	stmia	r4!, {r0, r1, r2}
 8001946:	7023      	strb	r3, [r4, #0]
	itoa(i, test_i, 10);								// Convert number in string
 8001948:	4b4d      	ldr	r3, [pc, #308]	; (8001a80 <NRF24L01_Transmission_counter+0x218>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f107 0120 	add.w	r1, r7, #32
 8001950:	220a      	movs	r2, #10
 8001952:	4618      	mov	r0, r3
 8001954:	f006 fee6 	bl	8008724 <itoa>
	strcat(str_nrf, test_i);
 8001958:	f107 0220 	add.w	r2, r7, #32
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f006 ff09 	bl	8008778 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001966:	4a41      	ldr	r2, [pc, #260]	; (8001a6c <NRF24L01_Transmission_counter+0x204>)
 8001968:	1d38      	adds	r0, r7, #4
 800196a:	2301      	movs	r3, #1
 800196c:	ca06      	ldmia	r2, {r1, r2}
 800196e:	f000 fdad 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001972:	f000 fc9b 	bl	80022ac <ssd1306_UpdateScreen>

	// Print retransmeet counter
	memset(str_nrf, 0, sizeof(str_nrf));
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2219      	movs	r2, #25
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f006 fed3 	bl	8008728 <memset>
	memset(test_i, 0, sizeof(test_i));
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	220a      	movs	r2, #10
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f006 fecc 	bl	8008728 <memset>
	ssd1306_SetCursor(0, 36);
 8001990:	2124      	movs	r1, #36	; 0x24
 8001992:	2000      	movs	r0, #0
 8001994:	f000 fdc0 	bl	8002518 <ssd1306_SetCursor>
	strcpy(str_nrf, "Retransm:");
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4a3a      	ldr	r2, [pc, #232]	; (8001a84 <NRF24L01_Transmission_counter+0x21c>)
 800199c:	ca07      	ldmia	r2, {r0, r1, r2}
 800199e:	c303      	stmia	r3!, {r0, r1}
 80019a0:	801a      	strh	r2, [r3, #0]
	itoa(retr_cnt_full, test_i, 10);
 80019a2:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <NRF24L01_Transmission_counter+0x210>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f107 0120 	add.w	r1, r7, #32
 80019aa:	220a      	movs	r2, #10
 80019ac:	4618      	mov	r0, r3
 80019ae:	f006 feb9 	bl	8008724 <itoa>
	strcat(str_nrf, test_i);
 80019b2:	f107 0220 	add.w	r2, r7, #32
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f006 fedc 	bl	8008778 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 80019c0:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <NRF24L01_Transmission_counter+0x204>)
 80019c2:	1d38      	adds	r0, r7, #4
 80019c4:	2301      	movs	r3, #1
 80019c6:	ca06      	ldmia	r2, {r1, r2}
 80019c8:	f000 fd80 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80019cc:	f000 fc6e 	bl	80022ac <ssd1306_UpdateScreen>

	// Print lost packets
	memset(str_nrf, 0, sizeof(str_nrf));
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2219      	movs	r2, #25
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f006 fea6 	bl	8008728 <memset>
	memset(test_i, 0, sizeof(test_i));
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	220a      	movs	r2, #10
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f006 fe9f 	bl	8008728 <memset>

	cnt_lost = dt >> 4;
 80019ea:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <NRF24L01_Transmission_counter+0x208>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <NRF24L01_Transmission_counter+0x220>)
 80019f6:	601a      	str	r2, [r3, #0]

	ssd1306_SetCursor(0, 46);
 80019f8:	212e      	movs	r1, #46	; 0x2e
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 fd8c 	bl	8002518 <ssd1306_SetCursor>
	strcpy(str_nrf, "Lost:");
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <NRF24L01_Transmission_counter+0x224>)
 8001a04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a08:	6018      	str	r0, [r3, #0]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	8019      	strh	r1, [r3, #0]
	itoa(cnt_lost, test_i, 10);
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <NRF24L01_Transmission_counter+0x220>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f107 0120 	add.w	r1, r7, #32
 8001a16:	220a      	movs	r2, #10
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f006 fe83 	bl	8008724 <itoa>
	strcat(str_nrf, test_i);
 8001a1e:	f107 0220 	add.w	r2, r7, #32
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f006 fea6 	bl	8008778 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <NRF24L01_Transmission_counter+0x204>)
 8001a2e:	1d38      	adds	r0, r7, #4
 8001a30:	2301      	movs	r3, #1
 8001a32:	ca06      	ldmia	r2, {r1, r2}
 8001a34:	f000 fd4a 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a38:	f000 fc38 	bl	80022ac <ssd1306_UpdateScreen>

	test_data++;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <NRF24L01_Transmission_counter+0x1fc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <NRF24L01_Transmission_counter+0x1fc>)
 8001a44:	6013      	str	r3, [r2, #0]
	i++;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <NRF24L01_Transmission_counter+0x218>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <NRF24L01_Transmission_counter+0x218>)
 8001a4e:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 8001a50:	2064      	movs	r0, #100	; 0x64
 8001a52:	f003 faf1 	bl	8005038 <HAL_Delay>
}
 8001a56:	bf00      	nop
 8001a58:	3744      	adds	r7, #68	; 0x44
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd90      	pop	{r4, r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	08009108 	.word	0x08009108
 8001a64:	20000144 	.word	0x20000144
 8001a68:	08009110 	.word	0x08009110
 8001a6c:	2000001c 	.word	0x2000001c
 8001a70:	20000148 	.word	0x20000148
 8001a74:	20000149 	.word	0x20000149
 8001a78:	2000013c 	.word	0x2000013c
 8001a7c:	08009114 	.word	0x08009114
 8001a80:	20000018 	.word	0x20000018
 8001a84:	08009124 	.word	0x08009124
 8001a88:	20000140 	.word	0x20000140
 8001a8c:	08009130 	.word	0x08009130

08001a90 <NRF24L01_Transmission_t_and_h>:
//----------------------------------------------------------------------------------------
void NRF24L01_Transmission_t_and_h(void)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b093      	sub	sp, #76	; 0x4c
 8001a94:	af00      	add	r7, sp, #0
	static uint8_t retr_cnt, dt = 0;
	//static int test_data = 0;							// Init test data for transmit
	uint8_t buf2[20]={0};
 8001a96:	2300      	movs	r3, #0
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
 8001a9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
	uint8_t test_i[10] = {0};
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	809a      	strh	r2, [r3, #4]
	uint8_t str_nrf[25] = {0};
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	611a      	str	r2, [r3, #16]
 8001aca:	751a      	strb	r2, [r3, #20]
	char str_buf[10] = {0};
 8001acc:	2300      	movs	r3, #0
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	809a      	strh	r2, [r3, #4]
	// Print transmit data
	ssd1306_SetCursor(0, 16);
 8001ad8:	2110      	movs	r1, #16
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 fd1c 	bl	8002518 <ssd1306_SetCursor>
	strcat(str_nrf, "T=");
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fb31 	bl	800014c <strlen>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	4413      	add	r3, r2
 8001af4:	4a91      	ldr	r2, [pc, #580]	; (8001d3c <NRF24L01_Transmission_t_and_h+0x2ac>)
 8001af6:	8811      	ldrh	r1, [r2, #0]
 8001af8:	7892      	ldrb	r2, [r2, #2]
 8001afa:	8019      	strh	r1, [r3, #0]
 8001afc:	709a      	strb	r2, [r3, #2]
	itoa(am3202_sensor.temterature, str_buf, 10);
 8001afe:	4b90      	ldr	r3, [pc, #576]	; (8001d40 <NRF24L01_Transmission_t_and_h+0x2b0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4639      	mov	r1, r7
 8001b04:	220a      	movs	r2, #10
 8001b06:	4618      	mov	r0, r3
 8001b08:	f006 fe0c 	bl	8008724 <itoa>
	strcat(str_nrf, str_buf);
 8001b0c:	463a      	mov	r2, r7
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f006 fe2f 	bl	8008778 <strcat>
	strcat(str_nrf, "C ");
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fb14 	bl	800014c <strlen>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a85      	ldr	r2, [pc, #532]	; (8001d44 <NRF24L01_Transmission_t_and_h+0x2b4>)
 8001b30:	8811      	ldrh	r1, [r2, #0]
 8001b32:	7892      	ldrb	r2, [r2, #2]
 8001b34:	8019      	strh	r1, [r3, #0]
 8001b36:	709a      	strb	r2, [r3, #2]
	memset(str_buf, 0, sizeof(str_buf));
 8001b38:	463b      	mov	r3, r7
 8001b3a:	220a      	movs	r2, #10
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f006 fdf2 	bl	8008728 <memset>
	itoa(am3202_sensor.humidity, str_buf, 10);
 8001b44:	4b7e      	ldr	r3, [pc, #504]	; (8001d40 <NRF24L01_Transmission_t_and_h+0x2b0>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4639      	mov	r1, r7
 8001b4a:	220a      	movs	r2, #10
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f006 fde9 	bl	8008724 <itoa>
	strcat(str_nrf, "H=");
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe faf8 	bl	800014c <strlen>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	4413      	add	r3, r2
 8001b66:	4a78      	ldr	r2, [pc, #480]	; (8001d48 <NRF24L01_Transmission_t_and_h+0x2b8>)
 8001b68:	8811      	ldrh	r1, [r2, #0]
 8001b6a:	7892      	ldrb	r2, [r2, #2]
 8001b6c:	8019      	strh	r1, [r3, #0]
 8001b6e:	709a      	strb	r2, [r3, #2]
	strcat(str_nrf, str_buf);
 8001b70:	463a      	mov	r2, r7
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f006 fdfd 	bl	8008778 <strcat>
	strcat(str_nrf, "% ");
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fae2 	bl	800014c <strlen>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4413      	add	r3, r2
 8001b92:	4a6e      	ldr	r2, [pc, #440]	; (8001d4c <NRF24L01_Transmission_t_and_h+0x2bc>)
 8001b94:	8811      	ldrh	r1, [r2, #0]
 8001b96:	7892      	ldrb	r2, [r2, #2]
 8001b98:	8019      	strh	r1, [r3, #0]
 8001b9a:	709a      	strb	r2, [r3, #2]
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001b9c:	4a6c      	ldr	r2, [pc, #432]	; (8001d50 <NRF24L01_Transmission_t_and_h+0x2c0>)
 8001b9e:	f107 000c 	add.w	r0, r7, #12
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	ca06      	ldmia	r2, {r1, r2}
 8001ba6:	f000 fc91 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001baa:	f000 fb7f 	bl	80022ac <ssd1306_UpdateScreen>
	//memset(str_nrf, 0, sizeof(str_nrf));

	dt = NRF24L01_Send(str_nrf);						// Transmit data
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fdf6 	bl	80017a4 <NRF24L01_Send>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <NRF24L01_Transmission_t_and_h+0x2c4>)
 8001bbe:	701a      	strb	r2, [r3, #0]
	memset(str_nrf, 0, sizeof(str_nrf));
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	2219      	movs	r2, #25
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f006 fdad 	bl	8008728 <memset>
	// Calculation retransmitted packets
	retr_cnt = dt & 0xF;
 8001bce:	4b61      	ldr	r3, [pc, #388]	; (8001d54 <NRF24L01_Transmission_t_and_h+0x2c4>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b5f      	ldr	r3, [pc, #380]	; (8001d58 <NRF24L01_Transmission_t_and_h+0x2c8>)
 8001bda:	701a      	strb	r2, [r3, #0]
	retr_cnt_full += retr_cnt;		// Counting retransmit packets
 8001bdc:	4b5e      	ldr	r3, [pc, #376]	; (8001d58 <NRF24L01_Transmission_t_and_h+0x2c8>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b5e      	ldr	r3, [pc, #376]	; (8001d5c <NRF24L01_Transmission_t_and_h+0x2cc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a5c      	ldr	r2, [pc, #368]	; (8001d5c <NRF24L01_Transmission_t_and_h+0x2cc>)
 8001bea:	6013      	str	r3, [r2, #0]

	// Print transmit counter
	memset(test_i, 0, sizeof(test_i));
 8001bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf0:	220a      	movs	r2, #10
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f006 fd97 	bl	8008728 <memset>
	ssd1306_SetCursor(0, 26);
 8001bfa:	211a      	movs	r1, #26
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f000 fc8b 	bl	8002518 <ssd1306_SetCursor>
	strcpy(str_nrf, "Conut trans:");
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	4a56      	ldr	r2, [pc, #344]	; (8001d60 <NRF24L01_Transmission_t_and_h+0x2d0>)
 8001c08:	461c      	mov	r4, r3
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c0e:	c407      	stmia	r4!, {r0, r1, r2}
 8001c10:	7023      	strb	r3, [r4, #0]
	itoa(i, test_i, 10);								// Convert number in string
 8001c12:	4b54      	ldr	r3, [pc, #336]	; (8001d64 <NRF24L01_Transmission_t_and_h+0x2d4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c1a:	220a      	movs	r2, #10
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f006 fd81 	bl	8008724 <itoa>
	strcat(str_nrf, test_i);
 8001c22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f006 fda3 	bl	8008778 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001c32:	4a47      	ldr	r2, [pc, #284]	; (8001d50 <NRF24L01_Transmission_t_and_h+0x2c0>)
 8001c34:	f107 000c 	add.w	r0, r7, #12
 8001c38:	2301      	movs	r3, #1
 8001c3a:	ca06      	ldmia	r2, {r1, r2}
 8001c3c:	f000 fc46 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001c40:	f000 fb34 	bl	80022ac <ssd1306_UpdateScreen>

	// Print retransmeet counter
	memset(str_nrf, 0, sizeof(str_nrf));
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	2219      	movs	r2, #25
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f006 fd6b 	bl	8008728 <memset>
	memset(test_i, 0, sizeof(test_i));
 8001c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c56:	220a      	movs	r2, #10
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f006 fd64 	bl	8008728 <memset>
	ssd1306_SetCursor(0, 36);
 8001c60:	2124      	movs	r1, #36	; 0x24
 8001c62:	2000      	movs	r0, #0
 8001c64:	f000 fc58 	bl	8002518 <ssd1306_SetCursor>
	strcpy(str_nrf, "Retransm:");
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	4a3e      	ldr	r2, [pc, #248]	; (8001d68 <NRF24L01_Transmission_t_and_h+0x2d8>)
 8001c6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c70:	c303      	stmia	r3!, {r0, r1}
 8001c72:	801a      	strh	r2, [r3, #0]
	itoa(retr_cnt_full, test_i, 10);
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <NRF24L01_Transmission_t_and_h+0x2cc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c7c:	220a      	movs	r2, #10
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f006 fd50 	bl	8008724 <itoa>
	strcat(str_nrf, test_i);
 8001c84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f006 fd72 	bl	8008778 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001c94:	4a2e      	ldr	r2, [pc, #184]	; (8001d50 <NRF24L01_Transmission_t_and_h+0x2c0>)
 8001c96:	f107 000c 	add.w	r0, r7, #12
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	ca06      	ldmia	r2, {r1, r2}
 8001c9e:	f000 fc15 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001ca2:	f000 fb03 	bl	80022ac <ssd1306_UpdateScreen>

	// Print lost packets
	memset(str_nrf, 0, sizeof(str_nrf));
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	2219      	movs	r2, #25
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f006 fd3a 	bl	8008728 <memset>
	memset(test_i, 0, sizeof(test_i));
 8001cb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb8:	220a      	movs	r2, #10
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f006 fd33 	bl	8008728 <memset>

	cnt_lost = dt >> 4;
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <NRF24L01_Transmission_t_and_h+0x2c4>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <NRF24L01_Transmission_t_and_h+0x2dc>)
 8001cce:	601a      	str	r2, [r3, #0]

	ssd1306_SetCursor(0, 46);
 8001cd0:	212e      	movs	r1, #46	; 0x2e
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f000 fc20 	bl	8002518 <ssd1306_SetCursor>
	strcpy(str_nrf, "Lost:");
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4a24      	ldr	r2, [pc, #144]	; (8001d70 <NRF24L01_Transmission_t_and_h+0x2e0>)
 8001cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ce2:	6018      	str	r0, [r3, #0]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	8019      	strh	r1, [r3, #0]
	itoa(cnt_lost, test_i, 10);
 8001ce8:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <NRF24L01_Transmission_t_and_h+0x2dc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001cf0:	220a      	movs	r2, #10
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f006 fd16 	bl	8008724 <itoa>
	strcat(str_nrf, test_i);
 8001cf8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f006 fd38 	bl	8008778 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001d08:	4a11      	ldr	r2, [pc, #68]	; (8001d50 <NRF24L01_Transmission_t_and_h+0x2c0>)
 8001d0a:	f107 000c 	add.w	r0, r7, #12
 8001d0e:	2301      	movs	r3, #1
 8001d10:	ca06      	ldmia	r2, {r1, r2}
 8001d12:	f000 fbdb 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001d16:	f000 fac9 	bl	80022ac <ssd1306_UpdateScreen>

	test_data++;
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <NRF24L01_Transmission_t_and_h+0x2e4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <NRF24L01_Transmission_t_and_h+0x2e4>)
 8001d22:	6013      	str	r3, [r2, #0]
	i++;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <NRF24L01_Transmission_t_and_h+0x2d4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <NRF24L01_Transmission_t_and_h+0x2d4>)
 8001d2c:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 8001d2e:	2064      	movs	r0, #100	; 0x64
 8001d30:	f003 f982 	bl	8005038 <HAL_Delay>
}
 8001d34:	bf00      	nop
 8001d36:	374c      	adds	r7, #76	; 0x4c
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd90      	pop	{r4, r7, pc}
 8001d3c:	08009138 	.word	0x08009138
 8001d40:	200005ac 	.word	0x200005ac
 8001d44:	0800913c 	.word	0x0800913c
 8001d48:	08009140 	.word	0x08009140
 8001d4c:	08009144 	.word	0x08009144
 8001d50:	2000001c 	.word	0x2000001c
 8001d54:	2000014a 	.word	0x2000014a
 8001d58:	2000014b 	.word	0x2000014b
 8001d5c:	2000013c 	.word	0x2000013c
 8001d60:	08009114 	.word	0x08009114
 8001d64:	20000018 	.word	0x20000018
 8001d68:	08009124 	.word	0x08009124
 8001d6c:	20000140 	.word	0x20000140
 8001d70:	08009130 	.word	0x08009130
 8001d74:	20000144 	.word	0x20000144

08001d78 <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <DelayMicro+0x3c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <DelayMicro+0x3c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <DelayMicro+0x40>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	0ddb      	lsrs	r3, r3, #23
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	fb02 f303 	mul.w	r3, r2, r3
 8001d98:	607b      	str	r3, [r7, #4]
	while (micros--);
 8001d9a:	bf00      	nop
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1e5a      	subs	r2, r3, #1
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1fa      	bne.n	8001d9c <DelayMicro+0x24>
}
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	2000002c 	.word	0x2000002c
 8001db8:	ffa71ee7 	.word	0xffa71ee7

08001dbc <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2110      	movs	r1, #16
 8001dce:	4813      	ldr	r0, [pc, #76]	; (8001e1c <NRF24_ReadReg+0x60>)
 8001dd0:	f003 fd6b 	bl	80058aa <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8001dd4:	f107 020f 	add.w	r2, r7, #15
 8001dd8:	1df9      	adds	r1, r7, #7
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2301      	movs	r3, #1
 8001de2:	480f      	ldr	r0, [pc, #60]	; (8001e20 <NRF24_ReadReg+0x64>)
 8001de4:	f005 f8ef 	bl	8006fc6 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	2b07      	cmp	r3, #7
 8001dec:	d00c      	beq.n	8001e08 <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 8001dee:	23ff      	movs	r3, #255	; 0xff
 8001df0:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8001df2:	f107 020f 	add.w	r2, r7, #15
 8001df6:	f107 010e 	add.w	r1, r7, #14
 8001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2301      	movs	r3, #1
 8001e02:	4807      	ldr	r0, [pc, #28]	; (8001e20 <NRF24_ReadReg+0x64>)
 8001e04:	f005 f8df 	bl	8006fc6 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2110      	movs	r1, #16
 8001e0c:	4803      	ldr	r0, [pc, #12]	; (8001e1c <NRF24_ReadReg+0x60>)
 8001e0e:	f003 fd4c 	bl	80058aa <HAL_GPIO_WritePin>
  return dt;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40010800 	.word	0x40010800
 8001e20:	200006dc 	.word	0x200006dc

08001e24 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f043 0320 	orr.w	r3, r3, #32
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2110      	movs	r1, #16
 8001e42:	480d      	ldr	r0, [pc, #52]	; (8001e78 <NRF24_WriteReg+0x54>)
 8001e44:	f003 fd31 	bl	80058aa <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8001e48:	1df9      	adds	r1, r7, #7
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	2201      	movs	r2, #1
 8001e50:	480a      	ldr	r0, [pc, #40]	; (8001e7c <NRF24_WriteReg+0x58>)
 8001e52:	f004 fe6b 	bl	8006b2c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 8001e56:	1db9      	adds	r1, r7, #6
 8001e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4807      	ldr	r0, [pc, #28]	; (8001e7c <NRF24_WriteReg+0x58>)
 8001e60:	f004 fe64 	bl	8006b2c <HAL_SPI_Transmit>
  CS_OFF;
 8001e64:	2201      	movs	r2, #1
 8001e66:	2110      	movs	r1, #16
 8001e68:	4803      	ldr	r0, [pc, #12]	; (8001e78 <NRF24_WriteReg+0x54>)
 8001e6a:	f003 fd1e 	bl	80058aa <HAL_GPIO_WritePin>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40010800 	.word	0x40010800
 8001e7c:	200006dc 	.word	0x200006dc

08001e80 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 8001e86:	2350      	movs	r3, #80	; 0x50
 8001e88:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2110      	movs	r1, #16
 8001e8e:	480f      	ldr	r0, [pc, #60]	; (8001ecc <NRF24_ToggleFeatures+0x4c>)
 8001e90:	f003 fd0b 	bl	80058aa <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001e94:	1d39      	adds	r1, r7, #4
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <NRF24_ToggleFeatures+0x50>)
 8001e9e:	f004 fe45 	bl	8006b2c <HAL_SPI_Transmit>
  DelayMicro(1);
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f7ff ff68 	bl	8001d78 <DelayMicro>
  dt[0] = 0x73;
 8001ea8:	2373      	movs	r3, #115	; 0x73
 8001eaa:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001eac:	1d39      	adds	r1, r7, #4
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4806      	ldr	r0, [pc, #24]	; (8001ed0 <NRF24_ToggleFeatures+0x50>)
 8001eb6:	f004 fe39 	bl	8006b2c <HAL_SPI_Transmit>
  CS_OFF;
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	4803      	ldr	r0, [pc, #12]	; (8001ecc <NRF24_ToggleFeatures+0x4c>)
 8001ec0:	f003 fcf3 	bl	80058aa <HAL_GPIO_WritePin>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40010800 	.word	0x40010800
 8001ed0:	200006dc 	.word	0x200006dc

08001ed4 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <NRF24_Read_Buf+0x4c>)
 8001eea:	f003 fcde 	bl	80058aa <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8001eee:	1df9      	adds	r1, r7, #7
 8001ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	480b      	ldr	r0, [pc, #44]	; (8001f24 <NRF24_Read_Buf+0x50>)
 8001ef8:	f004 fe18 	bl	8006b2c <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f04:	6839      	ldr	r1, [r7, #0]
 8001f06:	4807      	ldr	r0, [pc, #28]	; (8001f24 <NRF24_Read_Buf+0x50>)
 8001f08:	f004 ff4c 	bl	8006da4 <HAL_SPI_Receive>
  CS_OFF;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2110      	movs	r1, #16
 8001f10:	4803      	ldr	r0, [pc, #12]	; (8001f20 <NRF24_Read_Buf+0x4c>)
 8001f12:	f003 fcca 	bl	80058aa <HAL_GPIO_WritePin>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40010800 	.word	0x40010800
 8001f24:	200006dc 	.word	0x200006dc

08001f28 <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
 8001f34:	4613      	mov	r3, r2
 8001f36:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	f043 0320 	orr.w	r3, r3, #32
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8001f42:	2200      	movs	r2, #0
 8001f44:	2110      	movs	r1, #16
 8001f46:	480f      	ldr	r0, [pc, #60]	; (8001f84 <NRF24_Write_Buf+0x5c>)
 8001f48:	f003 fcaf 	bl	80058aa <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8001f4c:	1df9      	adds	r1, r7, #7
 8001f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f52:	2201      	movs	r2, #1
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <NRF24_Write_Buf+0x60>)
 8001f56:	f004 fde9 	bl	8006b2c <HAL_SPI_Transmit>
  DelayMicro(1);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7ff ff0c 	bl	8001d78 <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8001f60:	79bb      	ldrb	r3, [r7, #6]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f68:	6839      	ldr	r1, [r7, #0]
 8001f6a:	4807      	ldr	r0, [pc, #28]	; (8001f88 <NRF24_Write_Buf+0x60>)
 8001f6c:	f004 fdde 	bl	8006b2c <HAL_SPI_Transmit>
  CS_OFF;
 8001f70:	2201      	movs	r2, #1
 8001f72:	2110      	movs	r1, #16
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <NRF24_Write_Buf+0x5c>)
 8001f76:	f003 fc98 	bl	80058aa <HAL_GPIO_WritePin>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40010800 	.word	0x40010800
 8001f88:	200006dc 	.word	0x200006dc

08001f8c <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8001f92:	23e2      	movs	r3, #226	; 0xe2
 8001f94:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8001f96:	2200      	movs	r2, #0
 8001f98:	2110      	movs	r1, #16
 8001f9a:	480b      	ldr	r0, [pc, #44]	; (8001fc8 <NRF24_FlushRX+0x3c>)
 8001f9c:	f003 fc85 	bl	80058aa <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001fa0:	1d39      	adds	r1, r7, #4
 8001fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4808      	ldr	r0, [pc, #32]	; (8001fcc <NRF24_FlushRX+0x40>)
 8001faa:	f004 fdbf 	bl	8006b2c <HAL_SPI_Transmit>
  DelayMicro(1);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff fee2 	bl	8001d78 <DelayMicro>
  CS_OFF;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2110      	movs	r1, #16
 8001fb8:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <NRF24_FlushRX+0x3c>)
 8001fba:	f003 fc76 	bl	80058aa <HAL_GPIO_WritePin>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	200006dc 	.word	0x200006dc

08001fd0 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 8001fd6:	23e1      	movs	r3, #225	; 0xe1
 8001fd8:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2110      	movs	r1, #16
 8001fde:	480b      	ldr	r0, [pc, #44]	; (800200c <NRF24_FlushTX+0x3c>)
 8001fe0:	f003 fc63 	bl	80058aa <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001fe4:	1d39      	adds	r1, r7, #4
 8001fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fea:	2201      	movs	r2, #1
 8001fec:	4808      	ldr	r0, [pc, #32]	; (8002010 <NRF24_FlushTX+0x40>)
 8001fee:	f004 fd9d 	bl	8006b2c <HAL_SPI_Transmit>
  DelayMicro(1);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f7ff fec0 	bl	8001d78 <DelayMicro>
  CS_OFF;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2110      	movs	r1, #16
 8001ffc:	4803      	ldr	r0, [pc, #12]	; (800200c <NRF24_FlushTX+0x3c>)
 8001ffe:	f003 fc54 	bl	80058aa <HAL_GPIO_WritePin>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40010800 	.word	0x40010800
 8002010:	200006dc 	.word	0x200006dc

08002014 <read_config_registers>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
bool read_config_registers(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8002018:	2064      	movs	r0, #100	; 0x64
 800201a:	f003 f80d 	bl	8005038 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff fecc 	bl	8001dbc <NRF24_ReadReg>
 8002024:	4603      	mov	r3, r0
 8002026:	461a      	mov	r2, r3
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <read_config_registers+0x78>)
 800202a:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 800202c:	2001      	movs	r0, #1
 800202e:	f7ff fec5 	bl	8001dbc <NRF24_ReadReg>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <read_config_registers+0x78>)
 8002038:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 800203a:	2002      	movs	r0, #2
 800203c:	f7ff febe 	bl	8001dbc <NRF24_ReadReg>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <read_config_registers+0x78>)
 8002046:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 8002048:	2007      	movs	r0, #7
 800204a:	f7ff feb7 	bl	8001dbc <NRF24_ReadReg>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <read_config_registers+0x78>)
 8002054:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 8002056:	2006      	movs	r0, #6
 8002058:	f7ff feb0 	bl	8001dbc <NRF24_ReadReg>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <read_config_registers+0x78>)
 8002062:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8002064:	2203      	movs	r2, #3
 8002066:	490a      	ldr	r1, [pc, #40]	; (8002090 <read_config_registers+0x7c>)
 8002068:	2010      	movs	r0, #16
 800206a:	f7ff ff33 	bl	8001ed4 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 800206e:	2203      	movs	r2, #3
 8002070:	4907      	ldr	r1, [pc, #28]	; (8002090 <read_config_registers+0x7c>)
 8002072:	200a      	movs	r0, #10
 8002074:	f7ff ff2e 	bl	8001ed4 <NRF24_Read_Buf>

	if(config_array[0] == 0)		// Data from nrf module was read
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <read_config_registers+0x78>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <read_config_registers+0x70>
	{
		return false;
 8002080:	2300      	movs	r3, #0
 8002082:	e000      	b.n	8002086 <read_config_registers+0x72>
	}
	else
	{
		return true;
 8002084:	2301      	movs	r3, #1
	}
}
 8002086:	4618      	mov	r0, r3
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000114 	.word	0x20000114
 8002090:	20000124 	.word	0x20000124

08002094 <reset_nrf24l01>:
//----------------------------------------------------------------------------------------
void reset_nrf24l01(void)   // reconfigure module
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
	CE_RESET;
 800209a:	2200      	movs	r2, #0
 800209c:	2108      	movs	r1, #8
 800209e:	4829      	ldr	r0, [pc, #164]	; (8002144 <reset_nrf24l01+0xb0>)
 80020a0:	f003 fc03 	bl	80058aa <HAL_GPIO_WritePin>
	DelayMicro(5000);
 80020a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80020a8:	f7ff fe66 	bl	8001d78 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 80020ac:	210a      	movs	r1, #10
 80020ae:	2000      	movs	r0, #0
 80020b0:	f7ff feb8 	bl	8001e24 <NRF24_WriteReg>

	DelayMicro(5000);
 80020b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80020b8:	f7ff fe5e 	bl	8001d78 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 80020bc:	2101      	movs	r1, #1
 80020be:	2001      	movs	r0, #1
 80020c0:	f7ff feb0 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 80020c4:	2101      	movs	r1, #1
 80020c6:	2002      	movs	r0, #2
 80020c8:	f7ff feac 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 80020cc:	2101      	movs	r1, #1
 80020ce:	2003      	movs	r0, #3
 80020d0:	f7ff fea8 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 80020d4:	215f      	movs	r1, #95	; 0x5f
 80020d6:	2004      	movs	r0, #4
 80020d8:	f7ff fea4 	bl	8001e24 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 80020dc:	f7ff fed0 	bl	8001e80 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 80020e0:	2100      	movs	r1, #0
 80020e2:	201d      	movs	r0, #29
 80020e4:	f7ff fe9e 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 80020e8:	2100      	movs	r1, #0
 80020ea:	201c      	movs	r0, #28
 80020ec:	f7ff fe9a 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x00); 		// Reset flags for IRQ   // WAS NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 80020f0:	2100      	movs	r1, #0
 80020f2:	2007      	movs	r0, #7
 80020f4:	f7ff fe96 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 80020f8:	214c      	movs	r1, #76	; 0x4c
 80020fa:	2005      	movs	r0, #5
 80020fc:	f7ff fe92 	bl	8001e24 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 8002100:	2126      	movs	r1, #38	; 0x26
 8002102:	2006      	movs	r0, #6
 8002104:	f7ff fe8e 	bl	8001e24 <NRF24_WriteReg>

	uint8_t TX_ADDRESS_RESET[TX_ADR_WIDTH] = {0x00,0x00,0x00};   // Address for pipe 0
 8002108:	4a0f      	ldr	r2, [pc, #60]	; (8002148 <reset_nrf24l01+0xb4>)
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	4611      	mov	r1, r2
 8002110:	8019      	strh	r1, [r3, #0]
 8002112:	3302      	adds	r3, #2
 8002114:	0c12      	lsrs	r2, r2, #16
 8002116:	701a      	strb	r2, [r3, #0]
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_RESET, TX_ADR_WIDTH);			// Write TX address
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	2203      	movs	r2, #3
 800211c:	4619      	mov	r1, r3
 800211e:	2010      	movs	r0, #16
 8002120:	f7ff ff02 	bl	8001f28 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_RESET, TX_ADR_WIDTH);		// Set up pipe 0 address
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2203      	movs	r2, #3
 8002128:	4619      	mov	r1, r3
 800212a:	200a      	movs	r0, #10
 800212c:	f7ff fefc 	bl	8001f28 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 8002130:	210f      	movs	r1, #15
 8002132:	2011      	movs	r0, #17
 8002134:	f7ff fe76 	bl	8001e24 <NRF24_WriteReg>

	NRF24L01_RX_Mode_for_TX_mode();
 8002138:	f7ff fa62 	bl	8001600 <NRF24L01_RX_Mode_for_TX_mode>
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40010800 	.word	0x40010800
 8002148:	08009148 	.word	0x08009148

0800214c <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8002150:	2000      	movs	r0, #0
 8002152:	f000 f889 	bl	8002268 <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 8002156:	f000 f8a9 	bl	80022ac <ssd1306_UpdateScreen>
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af04      	add	r7, sp, #16
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800216a:	230a      	movs	r3, #10
 800216c:	9302      	str	r3, [sp, #8]
 800216e:	2301      	movs	r3, #1
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	1dfb      	adds	r3, r7, #7
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2301      	movs	r3, #1
 8002178:	2200      	movs	r2, #0
 800217a:	2178      	movs	r1, #120	; 0x78
 800217c:	4803      	ldr	r0, [pc, #12]	; (800218c <ssd1306_WriteCommand+0x2c>)
 800217e:	f003 fd21 	bl	8005bc4 <HAL_I2C_Mem_Write>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200005fc 	.word	0x200005fc

08002190 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8002194:	2064      	movs	r0, #100	; 0x64
 8002196:	f002 ff4f 	bl	8005038 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800219a:	20ae      	movs	r0, #174	; 0xae
 800219c:	f7ff ffe0 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80021a0:	2020      	movs	r0, #32
 80021a2:	f7ff ffdd 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80021a6:	2010      	movs	r0, #16
 80021a8:	f7ff ffda 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80021ac:	20b0      	movs	r0, #176	; 0xb0
 80021ae:	f7ff ffd7 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80021b2:	20c8      	movs	r0, #200	; 0xc8
 80021b4:	f7ff ffd4 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff ffd1 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80021be:	2010      	movs	r0, #16
 80021c0:	f7ff ffce 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80021c4:	2040      	movs	r0, #64	; 0x40
 80021c6:	f7ff ffcb 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80021ca:	2081      	movs	r0, #129	; 0x81
 80021cc:	f7ff ffc8 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80021d0:	20ff      	movs	r0, #255	; 0xff
 80021d2:	f7ff ffc5 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80021d6:	20a1      	movs	r0, #161	; 0xa1
 80021d8:	f7ff ffc2 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80021dc:	20a6      	movs	r0, #166	; 0xa6
 80021de:	f7ff ffbf 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80021e2:	20a8      	movs	r0, #168	; 0xa8
 80021e4:	f7ff ffbc 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80021e8:	203f      	movs	r0, #63	; 0x3f
 80021ea:	f7ff ffb9 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80021ee:	20a4      	movs	r0, #164	; 0xa4
 80021f0:	f7ff ffb6 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80021f4:	20d3      	movs	r0, #211	; 0xd3
 80021f6:	f7ff ffb3 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff ffb0 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002200:	20d5      	movs	r0, #213	; 0xd5
 8002202:	f7ff ffad 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002206:	20f0      	movs	r0, #240	; 0xf0
 8002208:	f7ff ffaa 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800220c:	20d9      	movs	r0, #217	; 0xd9
 800220e:	f7ff ffa7 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8002212:	2022      	movs	r0, #34	; 0x22
 8002214:	f7ff ffa4 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8002218:	20da      	movs	r0, #218	; 0xda
 800221a:	f7ff ffa1 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800221e:	2012      	movs	r0, #18
 8002220:	f7ff ff9e 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8002224:	20db      	movs	r0, #219	; 0xdb
 8002226:	f7ff ff9b 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800222a:	2020      	movs	r0, #32
 800222c:	f7ff ff98 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002230:	208d      	movs	r0, #141	; 0x8d
 8002232:	f7ff ff95 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8002236:	2014      	movs	r0, #20
 8002238:	f7ff ff92 	bl	8002160 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800223c:	20af      	movs	r0, #175	; 0xaf
 800223e:	f7ff ff8f 	bl	8002160 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8002242:	2000      	movs	r0, #0
 8002244:	f000 f810 	bl	8002268 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8002248:	f000 f830 	bl	80022ac <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <ssd1306_Init+0xd4>)
 800224e:	2200      	movs	r2, #0
 8002250:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <ssd1306_Init+0xd4>)
 8002254:	2200      	movs	r2, #0
 8002256:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8002258:	4b02      	ldr	r3, [pc, #8]	; (8002264 <ssd1306_Init+0xd4>)
 800225a:	2201      	movs	r2, #1
 800225c:	715a      	strb	r2, [r3, #5]

	return 1;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	2000054c 	.word	0x2000054c

08002268 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	e00d      	b.n	8002294 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <ssd1306_Fill+0x1a>
 800227e:	2100      	movs	r1, #0
 8002280:	e000      	b.n	8002284 <ssd1306_Fill+0x1c>
 8002282:	21ff      	movs	r1, #255	; 0xff
 8002284:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <ssd1306_Fill+0x40>)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4413      	add	r3, r2
 800228a:	460a      	mov	r2, r1
 800228c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3301      	adds	r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229a:	d3ed      	bcc.n	8002278 <ssd1306_Fill+0x10>
	}
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	2000014c 	.word	0x2000014c

080022ac <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 80022b2:	2300      	movs	r3, #0
 80022b4:	71fb      	strb	r3, [r7, #7]
 80022b6:	e01d      	b.n	80022f4 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	3b50      	subs	r3, #80	; 0x50
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff4e 	bl	8002160 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7ff ff4b 	bl	8002160 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80022ca:	2010      	movs	r0, #16
 80022cc:	f7ff ff48 	bl	8002160 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	01db      	lsls	r3, r3, #7
 80022d4:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <ssd1306_UpdateScreen+0x58>)
 80022d6:	4413      	add	r3, r2
 80022d8:	2264      	movs	r2, #100	; 0x64
 80022da:	9202      	str	r2, [sp, #8]
 80022dc:	2280      	movs	r2, #128	; 0x80
 80022de:	9201      	str	r2, [sp, #4]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2301      	movs	r3, #1
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	2178      	movs	r1, #120	; 0x78
 80022e8:	4807      	ldr	r0, [pc, #28]	; (8002308 <ssd1306_UpdateScreen+0x5c>)
 80022ea:	f003 fc6b 	bl	8005bc4 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	3301      	adds	r3, #1
 80022f2:	71fb      	strb	r3, [r7, #7]
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2b07      	cmp	r3, #7
 80022f8:	d9de      	bls.n	80022b8 <ssd1306_UpdateScreen+0xc>
	}
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	2000014c 	.word	0x2000014c
 8002308:	200005fc 	.word	0x200005fc

0800230c <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
 8002316:	460b      	mov	r3, r1
 8002318:	71bb      	strb	r3, [r7, #6]
 800231a:	4613      	mov	r3, r2
 800231c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db48      	blt.n	80023b8 <ssd1306_DrawPixel+0xac>
 8002326:	79bb      	ldrb	r3, [r7, #6]
 8002328:	2b3f      	cmp	r3, #63	; 0x3f
 800232a:	d845      	bhi.n	80023b8 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <ssd1306_DrawPixel+0xb8>)
 800232e:	791b      	ldrb	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8002334:	797b      	ldrb	r3, [r7, #5]
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf0c      	ite	eq
 800233a:	2301      	moveq	r3, #1
 800233c:	2300      	movne	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8002342:	797b      	ldrb	r3, [r7, #5]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d11a      	bne.n	800237e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002348:	79fa      	ldrb	r2, [r7, #7]
 800234a:	79bb      	ldrb	r3, [r7, #6]
 800234c:	08db      	lsrs	r3, r3, #3
 800234e:	b2d8      	uxtb	r0, r3
 8002350:	4603      	mov	r3, r0
 8002352:	01db      	lsls	r3, r3, #7
 8002354:	4413      	add	r3, r2
 8002356:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <ssd1306_DrawPixel+0xbc>)
 8002358:	5cd3      	ldrb	r3, [r2, r3]
 800235a:	b25a      	sxtb	r2, r3
 800235c:	79bb      	ldrb	r3, [r7, #6]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	b25b      	sxtb	r3, r3
 800236a:	4313      	orrs	r3, r2
 800236c:	b259      	sxtb	r1, r3
 800236e:	79fa      	ldrb	r2, [r7, #7]
 8002370:	4603      	mov	r3, r0
 8002372:	01db      	lsls	r3, r3, #7
 8002374:	4413      	add	r3, r2
 8002376:	b2c9      	uxtb	r1, r1
 8002378:	4a13      	ldr	r2, [pc, #76]	; (80023c8 <ssd1306_DrawPixel+0xbc>)
 800237a:	54d1      	strb	r1, [r2, r3]
 800237c:	e01d      	b.n	80023ba <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800237e:	79fa      	ldrb	r2, [r7, #7]
 8002380:	79bb      	ldrb	r3, [r7, #6]
 8002382:	08db      	lsrs	r3, r3, #3
 8002384:	b2d8      	uxtb	r0, r3
 8002386:	4603      	mov	r3, r0
 8002388:	01db      	lsls	r3, r3, #7
 800238a:	4413      	add	r3, r2
 800238c:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <ssd1306_DrawPixel+0xbc>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	b25a      	sxtb	r2, r3
 8002392:	79bb      	ldrb	r3, [r7, #6]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	2101      	movs	r1, #1
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	b25b      	sxtb	r3, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	4013      	ands	r3, r2
 80023a6:	b259      	sxtb	r1, r3
 80023a8:	79fa      	ldrb	r2, [r7, #7]
 80023aa:	4603      	mov	r3, r0
 80023ac:	01db      	lsls	r3, r3, #7
 80023ae:	4413      	add	r3, r2
 80023b0:	b2c9      	uxtb	r1, r1
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <ssd1306_DrawPixel+0xbc>)
 80023b4:	54d1      	strb	r1, [r2, r3]
 80023b6:	e000      	b.n	80023ba <ssd1306_DrawPixel+0xae>
		return;
 80023b8:	bf00      	nop
	}
}
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	2000054c 	.word	0x2000054c
 80023c8:	2000014c 	.word	0x2000014c

080023cc <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4604      	mov	r4, r0
 80023d4:	1d38      	adds	r0, r7, #4
 80023d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80023da:	461a      	mov	r2, r3
 80023dc:	4623      	mov	r3, r4
 80023de:	73fb      	strb	r3, [r7, #15]
 80023e0:	4613      	mov	r3, r2
 80023e2:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80023e4:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <ssd1306_WriteChar+0xfc>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	793b      	ldrb	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	2b7f      	cmp	r3, #127	; 0x7f
 80023f0:	dc06      	bgt.n	8002400 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80023f2:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <ssd1306_WriteChar+0xfc>)
 80023f4:	885b      	ldrh	r3, [r3, #2]
 80023f6:	461a      	mov	r2, r3
 80023f8:	797b      	ldrb	r3, [r7, #5]
 80023fa:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80023fc:	2b3f      	cmp	r3, #63	; 0x3f
 80023fe:	dd01      	ble.n	8002404 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8002400:	2300      	movs	r3, #0
 8002402:	e05d      	b.n	80024c0 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	e04c      	b.n	80024a4 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	3b20      	subs	r3, #32
 8002410:	7979      	ldrb	r1, [r7, #5]
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	4619      	mov	r1, r3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	440b      	add	r3, r1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4413      	add	r3, r2
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	e034      	b.n	8002494 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d012      	beq.n	8002460 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800243a:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <ssd1306_WriteChar+0xfc>)
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	4413      	add	r3, r2
 8002446:	b2d8      	uxtb	r0, r3
 8002448:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <ssd1306_WriteChar+0xfc>)
 800244a:	885b      	ldrh	r3, [r3, #2]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	4413      	add	r3, r2
 8002454:	b2db      	uxtb	r3, r3
 8002456:	7bba      	ldrb	r2, [r7, #14]
 8002458:	4619      	mov	r1, r3
 800245a:	f7ff ff57 	bl	800230c <ssd1306_DrawPixel>
 800245e:	e016      	b.n	800248e <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <ssd1306_WriteChar+0xfc>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4413      	add	r3, r2
 800246c:	b2d8      	uxtb	r0, r3
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <ssd1306_WriteChar+0xfc>)
 8002470:	885b      	ldrh	r3, [r3, #2]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4413      	add	r3, r2
 800247a:	b2d9      	uxtb	r1, r3
 800247c:	7bbb      	ldrb	r3, [r7, #14]
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf0c      	ite	eq
 8002482:	2301      	moveq	r3, #1
 8002484:	2300      	movne	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	f7ff ff3f 	bl	800230c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3301      	adds	r3, #1
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	793b      	ldrb	r3, [r7, #4]
 8002496:	461a      	mov	r2, r3
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	4293      	cmp	r3, r2
 800249c:	d3c5      	bcc.n	800242a <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	797b      	ldrb	r3, [r7, #5]
 80024a6:	461a      	mov	r2, r3
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d3ad      	bcc.n	800240a <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <ssd1306_WriteChar+0xfc>)
 80024b0:	881a      	ldrh	r2, [r3, #0]
 80024b2:	793b      	ldrb	r3, [r7, #4]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <ssd1306_WriteChar+0xfc>)
 80024bc:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3724      	adds	r7, #36	; 0x24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}
 80024c8:	2000054c 	.word	0x2000054c

080024cc <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	1d38      	adds	r0, r7, #4
 80024d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80024da:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80024dc:	e012      	b.n	8002504 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	7818      	ldrb	r0, [r3, #0]
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	1d3a      	adds	r2, r7, #4
 80024e6:	ca06      	ldmia	r2, {r1, r2}
 80024e8:	f7ff ff70 	bl	80023cc <ssd1306_WriteChar>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d002      	beq.n	80024fe <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	e008      	b.n	8002510 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3301      	adds	r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
	while (*str)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e8      	bne.n	80024de <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	781b      	ldrb	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	460a      	mov	r2, r1
 8002522:	71fb      	strb	r3, [r7, #7]
 8002524:	4613      	mov	r3, r2
 8002526:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	b29a      	uxth	r2, r3
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <ssd1306_SetCursor+0x2c>)
 800252e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8002530:	79bb      	ldrb	r3, [r7, #6]
 8002532:	b29a      	uxth	r2, r3
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <ssd1306_SetCursor+0x2c>)
 8002536:	805a      	strh	r2, [r3, #2]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	2000054c 	.word	0x2000054c

08002548 <ssd1306_Line>:

void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	4604      	mov	r4, r0
 8002550:	4608      	mov	r0, r1
 8002552:	4611      	mov	r1, r2
 8002554:	461a      	mov	r2, r3
 8002556:	4623      	mov	r3, r4
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	4603      	mov	r3, r0
 800255c:	71bb      	strb	r3, [r7, #6]
 800255e:	460b      	mov	r3, r1
 8002560:	717b      	strb	r3, [r7, #5]
 8002562:	4613      	mov	r3, r2
 8002564:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8002566:	797a      	ldrb	r2, [r7, #5]
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	bfb8      	it	lt
 8002570:	425b      	neglt	r3, r3
 8002572:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8002574:	793a      	ldrb	r2, [r7, #4]
 8002576:	79bb      	ldrb	r3, [r7, #6]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	bfb8      	it	lt
 800257e:	425b      	neglt	r3, r3
 8002580:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8002582:	79fa      	ldrb	r2, [r7, #7]
 8002584:	797b      	ldrb	r3, [r7, #5]
 8002586:	429a      	cmp	r2, r3
 8002588:	d201      	bcs.n	800258e <ssd1306_Line+0x46>
 800258a:	2301      	movs	r3, #1
 800258c:	e001      	b.n	8002592 <ssd1306_Line+0x4a>
 800258e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002592:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8002594:	79ba      	ldrb	r2, [r7, #6]
 8002596:	793b      	ldrb	r3, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	d201      	bcs.n	80025a0 <ssd1306_Line+0x58>
 800259c:	2301      	movs	r3, #1
 800259e:	e001      	b.n	80025a4 <ssd1306_Line+0x5c>
 80025a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025a4:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 80025ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80025b2:	7939      	ldrb	r1, [r7, #4]
 80025b4:	797b      	ldrb	r3, [r7, #5]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fea8 	bl	800230c <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80025bc:	e024      	b.n	8002608 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80025be:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80025c2:	79b9      	ldrb	r1, [r7, #6]
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fea0 	bl	800230c <ssd1306_DrawPixel>
    error2 = error * 2;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	425b      	negs	r3, r3
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	429a      	cmp	r2, r3
 80025da:	dd08      	ble.n	80025ee <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	4413      	add	r3, r2
 80025ec:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	da08      	bge.n	8002608 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	4413      	add	r3, r2
 80025fc:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	79bb      	ldrb	r3, [r7, #6]
 8002604:	4413      	add	r3, r2
 8002606:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8002608:	79fa      	ldrb	r2, [r7, #7]
 800260a:	797b      	ldrb	r3, [r7, #5]
 800260c:	429a      	cmp	r2, r3
 800260e:	d1d6      	bne.n	80025be <ssd1306_Line+0x76>
 8002610:	79ba      	ldrb	r2, [r7, #6]
 8002612:	793b      	ldrb	r3, [r7, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	d1d2      	bne.n	80025be <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8002618:	bf00      	nop
}
 800261a:	3724      	adds	r7, #36	; 0x24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd90      	pop	{r4, r7, pc}

08002620 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b085      	sub	sp, #20
 8002624:	af02      	add	r7, sp, #8
 8002626:	4604      	mov	r4, r0
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4623      	mov	r3, r4
 8002630:	71fb      	strb	r3, [r7, #7]
 8002632:	4603      	mov	r3, r0
 8002634:	71bb      	strb	r3, [r7, #6]
 8002636:	460b      	mov	r3, r1
 8002638:	717b      	strb	r3, [r7, #5]
 800263a:	4613      	mov	r3, r2
 800263c:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 800263e:	79bc      	ldrb	r4, [r7, #6]
 8002640:	797a      	ldrb	r2, [r7, #5]
 8002642:	79b9      	ldrb	r1, [r7, #6]
 8002644:	79f8      	ldrb	r0, [r7, #7]
 8002646:	7e3b      	ldrb	r3, [r7, #24]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	4623      	mov	r3, r4
 800264c:	f7ff ff7c 	bl	8002548 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8002650:	793c      	ldrb	r4, [r7, #4]
 8002652:	797a      	ldrb	r2, [r7, #5]
 8002654:	79b9      	ldrb	r1, [r7, #6]
 8002656:	7978      	ldrb	r0, [r7, #5]
 8002658:	7e3b      	ldrb	r3, [r7, #24]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4623      	mov	r3, r4
 800265e:	f7ff ff73 	bl	8002548 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8002662:	793c      	ldrb	r4, [r7, #4]
 8002664:	79fa      	ldrb	r2, [r7, #7]
 8002666:	7939      	ldrb	r1, [r7, #4]
 8002668:	7978      	ldrb	r0, [r7, #5]
 800266a:	7e3b      	ldrb	r3, [r7, #24]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	4623      	mov	r3, r4
 8002670:	f7ff ff6a 	bl	8002548 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8002674:	79bc      	ldrb	r4, [r7, #6]
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	7939      	ldrb	r1, [r7, #4]
 800267a:	79f8      	ldrb	r0, [r7, #7]
 800267c:	7e3b      	ldrb	r3, [r7, #24]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	4623      	mov	r3, r4
 8002682:	f7ff ff61 	bl	8002548 <ssd1306_Line>

  return;
 8002686:	bf00      	nop
}
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bd90      	pop	{r4, r7, pc}

0800268e <ssd1306FillRect>:
void ssd1306FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
 800268e:	b590      	push	{r4, r7, lr}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	4604      	mov	r4, r0
 8002696:	4608      	mov	r0, r1
 8002698:	4611      	mov	r1, r2
 800269a:	461a      	mov	r2, r3
 800269c:	4623      	mov	r3, r4
 800269e:	71fb      	strb	r3, [r7, #7]
 80026a0:	4603      	mov	r3, r0
 80026a2:	71bb      	strb	r3, [r7, #6]
 80026a4:	460b      	mov	r3, r1
 80026a6:	717b      	strb	r3, [r7, #5]
 80026a8:	4613      	mov	r3, r2
 80026aa:	713b      	strb	r3, [r7, #4]
    uint8_t x0, x1, y1;

    x0 = x;
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	73fb      	strb	r3, [r7, #15]
    x1 = x + w;
 80026b0:	79fa      	ldrb	r2, [r7, #7]
 80026b2:	797b      	ldrb	r3, [r7, #5]
 80026b4:	4413      	add	r3, r2
 80026b6:	73bb      	strb	r3, [r7, #14]
    y1 = y + h;
 80026b8:	79ba      	ldrb	r2, [r7, #6]
 80026ba:	793b      	ldrb	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	737b      	strb	r3, [r7, #13]
    for(; y < y1; y++)
 80026c0:	e013      	b.n	80026ea <ssd1306FillRect+0x5c>
        for(x = x0; x < x1; x++)
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	71fb      	strb	r3, [r7, #7]
 80026c6:	e009      	b.n	80026dc <ssd1306FillRect+0x4e>
        	ssd1306_DrawPixel(x, y, color);
 80026c8:	8c3b      	ldrh	r3, [r7, #32]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	79b9      	ldrb	r1, [r7, #6]
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fe1b 	bl	800230c <ssd1306_DrawPixel>
        for(x = x0; x < x1; x++)
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	3301      	adds	r3, #1
 80026da:	71fb      	strb	r3, [r7, #7]
 80026dc:	79fa      	ldrb	r2, [r7, #7]
 80026de:	7bbb      	ldrb	r3, [r7, #14]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d3f1      	bcc.n	80026c8 <ssd1306FillRect+0x3a>
    for(; y < y1; y++)
 80026e4:	79bb      	ldrb	r3, [r7, #6]
 80026e6:	3301      	adds	r3, #1
 80026e8:	71bb      	strb	r3, [r7, #6]
 80026ea:	79ba      	ldrb	r2, [r7, #6]
 80026ec:	7b7b      	ldrb	r3, [r7, #13]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d3e7      	bcc.n	80026c2 <ssd1306FillRect+0x34>
            //ssd1306DrawPixel( x, y, color, layer);
}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd90      	pop	{r4, r7, pc}

080026fc <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <DelayMicro+0x3c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <DelayMicro+0x3c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <DelayMicro+0x40>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	0ddb      	lsrs	r3, r3, #23
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800271e:	bf00      	nop
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	1e5a      	subs	r2, r3, #1
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1fa      	bne.n	8002720 <DelayMicro+0x24>
}
 800272a:	bf00      	nop
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	2000002c 	.word	0x2000002c
 800273c:	ffa71ee7 	.word	0xffa71ee7

08002740 <am2302_measure>:
{
	HAL_Delay(2000); 							// First init must be 2 seconds delay
}
//----------------------------------------------------------------------------------------
void am2302_measure(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
 * __                ________________________
 * 	 \			    /				         \
 * 	  \____________/			              \_
 */

	bool get_data_status = false;
 8002746:	2300      	movs	r3, #0
 8002748:	76fb      	strb	r3, [r7, #27]
	int j = 0;   							// Counter bytes
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;								// Counter bits
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
	float temper, hum;						// Buffer variables

	// Init GPIO like output
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8002756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800275a:	4883      	ldr	r0, [pc, #524]	; (8002968 <am2302_measure+0x228>)
 800275c:	f002 ffd2 	bl	8005704 <HAL_GPIO_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};		// Make struct
 8002760:	463b      	mov	r3, r7
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800276c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002770:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	2301      	movs	r3, #1
 8002774:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002776:	2302      	movs	r3, #2
 8002778:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277a:	463b      	mov	r3, r7
 800277c:	4619      	mov	r1, r3
 800277e:	487a      	ldr	r0, [pc, #488]	; (8002968 <am2302_measure+0x228>)
 8002780:	f002 fe3c 	bl	80053fc <HAL_GPIO_Init>

	// Make output pin B12
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002784:	2200      	movs	r2, #0
 8002786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800278a:	4877      	ldr	r0, [pc, #476]	; (8002968 <am2302_measure+0x228>)
 800278c:	f003 f88d 	bl	80058aa <HAL_GPIO_WritePin>
	DelayMicro(18000);
 8002790:	f244 6050 	movw	r0, #18000	; 0x4650
 8002794:	f7ff ffb2 	bl	80026fc <DelayMicro>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002798:	2201      	movs	r2, #1
 800279a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800279e:	4872      	ldr	r0, [pc, #456]	; (8002968 <am2302_measure+0x228>)
 80027a0:	f003 f883 	bl	80058aa <HAL_GPIO_WritePin>
	DelayMicro(39);
 80027a4:	2027      	movs	r0, #39	; 0x27
 80027a6:	f7ff ffa9 	bl	80026fc <DelayMicro>

	// Make input pin B12
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 80027aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ae:	486e      	ldr	r0, [pc, #440]	; (8002968 <am2302_measure+0x228>)
 80027b0:	f002 ffa8 	bl	8005704 <HAL_GPIO_DeInit>
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027be:	2301      	movs	r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c2:	463b      	mov	r3, r7
 80027c4:	4619      	mov	r1, r3
 80027c6:	4868      	ldr	r0, [pc, #416]	; (8002968 <am2302_measure+0x228>)
 80027c8:	f002 fe18 	bl	80053fc <HAL_GPIO_Init>

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
 80027cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027d0:	4865      	ldr	r0, [pc, #404]	; (8002968 <am2302_measure+0x228>)
 80027d2:	f003 f853 	bl	800587c <HAL_GPIO_ReadPin>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <am2302_measure+0xa6>
	{
		am3202_sensor.status = error_state; 					// Error. Sensor not response
 80027dc:	4b63      	ldr	r3, [pc, #396]	; (800296c <am2302_measure+0x22c>)
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	4b63      	ldr	r3, [pc, #396]	; (8002970 <am2302_measure+0x230>)
 80027e2:	721a      	strb	r2, [r3, #8]
 80027e4:	e003      	b.n	80027ee <am2302_measure+0xae>
	}
	else
	{
		am3202_sensor.status = ready_to_work;
 80027e6:	4b63      	ldr	r3, [pc, #396]	; (8002974 <am2302_measure+0x234>)
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	4b61      	ldr	r3, [pc, #388]	; (8002970 <am2302_measure+0x230>)
 80027ec:	721a      	strb	r2, [r3, #8]
	}

	DelayMicro(80);
 80027ee:	2050      	movs	r0, #80	; 0x50
 80027f0:	f7ff ff84 	bl	80026fc <DelayMicro>
	if(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)))
 80027f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027f8:	485b      	ldr	r0, [pc, #364]	; (8002968 <am2302_measure+0x228>)
 80027fa:	f003 f83f 	bl	800587c <HAL_GPIO_ReadPin>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d104      	bne.n	800280e <am2302_measure+0xce>
	{
		am3202_sensor.status = error_state; 					// Error. Sensor not response
 8002804:	4b59      	ldr	r3, [pc, #356]	; (800296c <am2302_measure+0x22c>)
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	4b59      	ldr	r3, [pc, #356]	; (8002970 <am2302_measure+0x230>)
 800280a:	721a      	strb	r2, [r3, #8]
 800280c:	e003      	b.n	8002816 <am2302_measure+0xd6>
	}
	else
	{
		am3202_sensor.status = ready_to_work;
 800280e:	4b59      	ldr	r3, [pc, #356]	; (8002974 <am2302_measure+0x234>)
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	4b57      	ldr	r3, [pc, #348]	; (8002970 <am2302_measure+0x230>)
 8002814:	721a      	strb	r2, [r3, #8]
	}

	DelayMicro(80);
 8002816:	2050      	movs	r0, #80	; 0x50
 8002818:	f7ff ff70 	bl	80026fc <DelayMicro>

	if(am3202_sensor.status == ready_to_work)
 800281c:	4b54      	ldr	r3, [pc, #336]	; (8002970 <am2302_measure+0x230>)
 800281e:	7a1a      	ldrb	r2, [r3, #8]
 8002820:	4b54      	ldr	r3, [pc, #336]	; (8002974 <am2302_measure+0x234>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	f040 8096 	bne.w	8002956 <am2302_measure+0x216>
	{
		for(j = 0; j <5; j++)							// Reading 5 bytes
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
 800282e:	e04f      	b.n	80028d0 <am2302_measure+0x190>
		{
			data[4-j] = 0;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	f1c3 0304 	rsb	r3, r3, #4
 8002836:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800283a:	4413      	add	r3, r2
 800283c:	2200      	movs	r2, #0
 800283e:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(i = 0; i < 8; i++)						// Reading 8 bits
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
 8002846:	e03a      	b.n	80028be <am2302_measure+0x17e>
			{

				while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)));    // While signal is "0"
 8002848:	bf00      	nop
 800284a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800284e:	4846      	ldr	r0, [pc, #280]	; (8002968 <am2302_measure+0x228>)
 8002850:	f003 f814 	bl	800587c <HAL_GPIO_ReadPin>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f7      	beq.n	800284a <am2302_measure+0x10a>
				DelayMicro(30);
 800285a:	201e      	movs	r0, #30
 800285c:	f7ff ff4e 	bl	80026fc <DelayMicro>

				if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))   // If signal is high when wrute "1" in buffer (data[])
 8002860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002864:	4840      	ldr	r0, [pc, #256]	; (8002968 <am2302_measure+0x228>)
 8002866:	f003 f809 	bl	800587c <HAL_GPIO_ReadPin>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01a      	beq.n	80028a6 <am2302_measure+0x166>
				{
					data[4-j] |= (1 << (7 - i));        // Shift received bite
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	f1c3 0304 	rsb	r3, r3, #4
 8002876:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800287a:	4413      	add	r3, r2
 800287c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002880:	b25a      	sxtb	r2, r3
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	f1c3 0307 	rsb	r3, r3, #7
 8002888:	2101      	movs	r1, #1
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	b25b      	sxtb	r3, r3
 8002890:	4313      	orrs	r3, r2
 8002892:	b25a      	sxtb	r2, r3
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	f1c3 0304 	rsb	r3, r3, #4
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80028a0:	440b      	add	r3, r1
 80028a2:	f803 2c18 	strb.w	r2, [r3, #-24]
				}

				while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12));		// Wait end of "1" signal
 80028a6:	bf00      	nop
 80028a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028ac:	482e      	ldr	r0, [pc, #184]	; (8002968 <am2302_measure+0x228>)
 80028ae:	f002 ffe5 	bl	800587c <HAL_GPIO_ReadPin>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f7      	bne.n	80028a8 <am2302_measure+0x168>
			for(i = 0; i < 8; i++)						// Reading 8 bits
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	3301      	adds	r3, #1
 80028bc:	623b      	str	r3, [r7, #32]
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	2b07      	cmp	r3, #7
 80028c2:	ddc1      	ble.n	8002848 <am2302_measure+0x108>
			}
			am3202_sensor.status = true;										// Data was been written okay
 80028c4:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <am2302_measure+0x230>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	721a      	strb	r2, [r3, #8]
		for(j = 0; j <5; j++)							// Reading 5 bytes
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	3301      	adds	r3, #1
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	ddac      	ble.n	8002830 <am2302_measure+0xf0>
		}

		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 80028d6:	f107 0310 	add.w	r3, r7, #16
 80028da:	3301      	adds	r3, #1
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd ff00 	bl	80006e8 <__aeabi_i2f>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4923      	ldr	r1, [pc, #140]	; (8002978 <am2302_measure+0x238>)
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe f803 	bl	80008f8 <__aeabi_fdiv>
 80028f2:	4603      	mov	r3, r0
 80028f4:	61fb      	str	r3, [r7, #28]
		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 80028f6:	f107 0310 	add.w	r3, r7, #16
 80028fa:	3301      	adds	r3, #1
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b21b      	sxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	da0c      	bge.n	800291e <am2302_measure+0x1de>
 8002904:	69f8      	ldr	r0, [r7, #28]
 8002906:	f7fd fd8d 	bl	8000424 <__aeabi_f2d>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f7fd fddf 	bl	80004d4 <__aeabi_d2f>
 8002916:	4603      	mov	r3, r0
 8002918:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800291c:	61fb      	str	r3, [r7, #28]
		am3202_sensor.temterature = temper;
 800291e:	69f8      	ldr	r0, [r7, #28]
 8002920:	f7fe f886 	bl	8000a30 <__aeabi_f2iz>
 8002924:	4603      	mov	r3, r0
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <am2302_measure+0x230>)
 8002928:	6013      	str	r3, [r2, #0]

		hum = (float)(*(int16_t*)(data+3)) / 10;
 800292a:	f107 0310 	add.w	r3, r7, #16
 800292e:	3303      	adds	r3, #3
 8002930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fed7 	bl	80006e8 <__aeabi_i2f>
 800293a:	4603      	mov	r3, r0
 800293c:	490e      	ldr	r1, [pc, #56]	; (8002978 <am2302_measure+0x238>)
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd ffda 	bl	80008f8 <__aeabi_fdiv>
 8002944:	4603      	mov	r3, r0
 8002946:	617b      	str	r3, [r7, #20]
		am3202_sensor.humidity = hum;
 8002948:	6978      	ldr	r0, [r7, #20]
 800294a:	f7fe f871 	bl	8000a30 <__aeabi_f2iz>
 800294e:	4603      	mov	r3, r0
 8002950:	4a07      	ldr	r2, [pc, #28]	; (8002970 <am2302_measure+0x230>)
 8002952:	6053      	str	r3, [r2, #4]
	else
	{
		am3202_sensor.status = error_state;
		// PRINT MESSAGE ON OLLED <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}
}
 8002954:	e003      	b.n	800295e <am2302_measure+0x21e>
		am3202_sensor.status = error_state;
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <am2302_measure+0x22c>)
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <am2302_measure+0x230>)
 800295c:	721a      	strb	r2, [r3, #8]
}
 800295e:	bf00      	nop
 8002960:	3728      	adds	r7, #40	; 0x28
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40010c00 	.word	0x40010c00
 800296c:	20000552 	.word	0x20000552
 8002970:	200005ac 	.word	0x200005ac
 8002974:	20000024 	.word	0x20000024
 8002978:	41200000 	.word	0x41200000

0800297c <check_stack_size>:
extern uint32_t _ebss;
extern uint32_t _estack;

//-------------------------------------------------------------------------------
unsigned check_stack_size(void)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
	unsigned *addr = &_ebss;				// Create pointer on start heap
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <check_stack_size+0x50>)
 8002984:	60fb      	str	r3, [r7, #12]
	uint32_t item1, item2;

	unsigned TEST_estack = &_estack;		// Get adress
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <check_stack_size+0x54>)
 8002988:	60bb      	str	r3, [r7, #8]

	while (addr < (&_estack - 1))
 800298a:	e010      	b.n	80029ae <check_stack_size+0x32>
	{
	    item1 = *addr;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	607b      	str	r3, [r7, #4]
	    addr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3304      	adds	r3, #4
 8002996:	60fb      	str	r3, [r7, #12]
	    item2 = *addr;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	603b      	str	r3, [r7, #0]

	    if (item1 == STACK_CANARY_WORD && item2 != STACK_CANARY_WORD) {
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f1b3 3fca 	cmp.w	r3, #3402287818	; 0xcacacaca
 80029a4:	d103      	bne.n	80029ae <check_stack_size+0x32>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	f1b3 3fca 	cmp.w	r3, #3402287818	; 0xcacacaca
 80029ac:	d104      	bne.n	80029b8 <check_stack_size+0x3c>
	while (addr < (&_estack - 1))
 80029ae:	4a09      	ldr	r2, [pc, #36]	; (80029d4 <check_stack_size+0x58>)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d3ea      	bcc.n	800298c <check_stack_size+0x10>
 80029b6:	e000      	b.n	80029ba <check_stack_size+0x3e>
	      break;
 80029b8:	bf00      	nop
	    }
	 }

	 return ((unsigned)&_estack - (unsigned)addr);
 80029ba:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <check_stack_size+0x54>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000a3c 	.word	0x20000a3c
 80029d0:	20005000 	.word	0x20005000
 80029d4:	20004ffc 	.word	0x20004ffc

080029d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// --------------------------------------------------------------------
	volatile unsigned *top, *start;
	 __asm__ volatile ("mov %[top], sp" : [top] "=r" (top) : : );
 80029de:	466b      	mov	r3, sp
 80029e0:	60bb      	str	r3, [r7, #8]
	 start = &_ebss;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <main+0x80>)
 80029e4:	60fb      	str	r3, [r7, #12]
	 while (start < top)
 80029e6:	e005      	b.n	80029f4 <main+0x1c>
	 {
	  	*(start++) = STACK_CANARY_WORD;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1d1a      	adds	r2, r3, #4
 80029ec:	60fa      	str	r2, [r7, #12]
 80029ee:	f04f 32ca 	mov.w	r2, #3402287818	; 0xcacacaca
 80029f2:	601a      	str	r2, [r3, #0]
	 while (start < top)
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d3f5      	bcc.n	80029e8 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029fc:	f002 faba 	bl	8004f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a00:	f000 f82e 	bl	8002a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a04:	f000 f9c6 	bl	8002d94 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002a08:	f000 f870 	bl	8002aec <MX_I2C1_Init>
  MX_SPI1_Init();
 8002a0c:	f000 f89c 	bl	8002b48 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002a10:	f000 f96c 	bl	8002cec <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002a14:	f000 f8ce 	bl	8002bb4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8002a18:	f000 f992 	bl	8002d40 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002a1c:	f000 f91a 	bl	8002c54 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002a20:	2201      	movs	r2, #1
 8002a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a26:	480d      	ldr	r0, [pc, #52]	; (8002a5c <main+0x84>)
 8002a28:	f002 ff3f 	bl	80058aa <HAL_GPIO_WritePin>

  // Init interrupt (For LoRa)
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2100      	movs	r1, #0
 8002a30:	2025      	movs	r0, #37	; 0x25
 8002a32:	f002 fbfc 	bl	800522e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a36:	2025      	movs	r0, #37	; 0x25
 8002a38:	f002 fc15 	bl	8005266 <HAL_NVIC_EnableIRQ>

//  HAL_TIM_Base_Start_IT(&htim2);	// For sensor measure

  // OLED init
  ssd1306_Init();
 8002a3c:	f7ff fba8 	bl	8002190 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fc11 	bl	8002268 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8002a46:	f7ff fc31 	bl	80022ac <ssd1306_UpdateScreen>

  while (1)
  {
	 int stack_size_2 = check_stack_size();				// 10220
 8002a4a:	f7ff ff97 	bl	800297c <check_stack_size>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	607b      	str	r3, [r7, #4]
	 menu();
 8002a52:	f001 f8e5 	bl	8003c20 <menu>
  {
 8002a56:	e7f8      	b.n	8002a4a <main+0x72>
 8002a58:	20000a3c 	.word	0x20000a3c
 8002a5c:	40011000 	.word	0x40011000

08002a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b090      	sub	sp, #64	; 0x40
 8002a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a66:	f107 0318 	add.w	r3, r7, #24
 8002a6a:	2228      	movs	r2, #40	; 0x28
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f005 fe5a 	bl	8008728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a90:	2301      	movs	r3, #1
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a94:	2302      	movs	r3, #2
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002a9e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa4:	f107 0318 	add.w	r3, r7, #24
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 fba1 	bl	80061f0 <HAL_RCC_OscConfig>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002ab4:	f000 fa96 	bl	8002fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab8:	230f      	movs	r3, #15
 8002aba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002abc:	2302      	movs	r3, #2
 8002abe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f003 fe0c 	bl	80066f0 <HAL_RCC_ClockConfig>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002ade:	f000 fa81 	bl	8002fe4 <Error_Handler>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3740      	adds	r7, #64	; 0x40
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002af2:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <MX_I2C1_Init+0x54>)
 8002af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002af8:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <MX_I2C1_Init+0x58>)
 8002afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b28:	4804      	ldr	r0, [pc, #16]	; (8002b3c <MX_I2C1_Init+0x50>)
 8002b2a:	f002 ff07 	bl	800593c <HAL_I2C_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b34:	f000 fa56 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200005fc 	.word	0x200005fc
 8002b40:	40005400 	.word	0x40005400
 8002b44:	00061a80 	.word	0x00061a80

08002b48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b4c:	4b17      	ldr	r3, [pc, #92]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <MX_SPI1_Init+0x68>)
 8002b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b94:	220a      	movs	r2, #10
 8002b96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b98:	4804      	ldr	r0, [pc, #16]	; (8002bac <MX_SPI1_Init+0x64>)
 8002b9a:	f003 ff43 	bl	8006a24 <HAL_SPI_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ba4:	f000 fa1e 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	200006dc 	.word	0x200006dc
 8002bb0:	40013000 	.word	0x40013000

08002bb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bba:	f107 0308 	add.w	r3, r7, #8
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc8:	463b      	mov	r3, r7
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <MX_TIM1_Init+0x9c>)
 8002bd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bd8:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8002bdc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bde:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002be4:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002be6:	2264      	movs	r2, #100	; 0x64
 8002be8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bea:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bf0:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bfc:	4813      	ldr	r0, [pc, #76]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bfe:	f004 fc7d 	bl	80074fc <HAL_TIM_Base_Init>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002c08:	f000 f9ec 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	4619      	mov	r1, r3
 8002c18:	480c      	ldr	r0, [pc, #48]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002c1a:	f004 fe47 	bl	80078ac <HAL_TIM_ConfigClockSource>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002c24:	f000 f9de 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002c28:	2310      	movs	r3, #16
 8002c2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c30:	463b      	mov	r3, r7
 8002c32:	4619      	mov	r1, r3
 8002c34:	4805      	ldr	r0, [pc, #20]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002c36:	f005 f823 	bl	8007c80 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002c40:	f000 f9d0 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c44:	bf00      	nop
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000694 	.word	0x20000694
 8002c50:	40012c00 	.word	0x40012c00

08002c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c68:	463b      	mov	r3, r7
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c7a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8002c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c88:	2264      	movs	r2, #100	; 0x64
 8002c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c94:	2280      	movs	r2, #128	; 0x80
 8002c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c98:	4813      	ldr	r0, [pc, #76]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c9a:	f004 fc2f 	bl	80074fc <HAL_TIM_Base_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002ca4:	f000 f99e 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cae:	f107 0308 	add.w	r3, r7, #8
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002cb6:	f004 fdf9 	bl	80078ac <HAL_TIM_ConfigClockSource>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002cc0:	f000 f990 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ccc:	463b      	mov	r3, r7
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002cd2:	f004 ffd5 	bl	8007c80 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002cdc:	f000 f982 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ce0:	bf00      	nop
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000734 	.word	0x20000734

08002cec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002cf2:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <MX_USART1_UART_Init+0x50>)
 8002cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002cf8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d12:	220c      	movs	r2, #12
 8002d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d22:	4805      	ldr	r0, [pc, #20]	; (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d24:	f005 f81c 	bl	8007d60 <HAL_UART_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d2e:	f000 f959 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000650 	.word	0x20000650
 8002d3c:	40013800 	.word	0x40013800

08002d40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <MX_USART3_UART_Init+0x4c>)
 8002d46:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <MX_USART3_UART_Init+0x50>)
 8002d48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <MX_USART3_UART_Init+0x4c>)
 8002d4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d52:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <MX_USART3_UART_Init+0x4c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <MX_USART3_UART_Init+0x4c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <MX_USART3_UART_Init+0x4c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <MX_USART3_UART_Init+0x4c>)
 8002d66:	220c      	movs	r2, #12
 8002d68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <MX_USART3_UART_Init+0x4c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <MX_USART3_UART_Init+0x4c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <MX_USART3_UART_Init+0x4c>)
 8002d78:	f004 fff2 	bl	8007d60 <HAL_UART_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d82:	f000 f92f 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200005b8 	.word	0x200005b8
 8002d90:	40004800 	.word	0x40004800

08002d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da8:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <MX_GPIO_Init+0x194>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a5e      	ldr	r2, [pc, #376]	; (8002f28 <MX_GPIO_Init+0x194>)
 8002dae:	f043 0310 	orr.w	r3, r3, #16
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b5c      	ldr	r3, [pc, #368]	; (8002f28 <MX_GPIO_Init+0x194>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dc0:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <MX_GPIO_Init+0x194>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	4a58      	ldr	r2, [pc, #352]	; (8002f28 <MX_GPIO_Init+0x194>)
 8002dc6:	f043 0320 	orr.w	r3, r3, #32
 8002dca:	6193      	str	r3, [r2, #24]
 8002dcc:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <MX_GPIO_Init+0x194>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd8:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <MX_GPIO_Init+0x194>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4a52      	ldr	r2, [pc, #328]	; (8002f28 <MX_GPIO_Init+0x194>)
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	6193      	str	r3, [r2, #24]
 8002de4:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <MX_GPIO_Init+0x194>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df0:	4b4d      	ldr	r3, [pc, #308]	; (8002f28 <MX_GPIO_Init+0x194>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	4a4c      	ldr	r2, [pc, #304]	; (8002f28 <MX_GPIO_Init+0x194>)
 8002df6:	f043 0308 	orr.w	r3, r3, #8
 8002dfa:	6193      	str	r3, [r2, #24]
 8002dfc:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <MX_GPIO_Init+0x194>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e0e:	4847      	ldr	r0, [pc, #284]	; (8002f2c <MX_GPIO_Init+0x198>)
 8002e10:	f002 fd4b 	bl	80058aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8002e14:	2200      	movs	r2, #0
 8002e16:	2108      	movs	r1, #8
 8002e18:	4845      	ldr	r0, [pc, #276]	; (8002f30 <MX_GPIO_Init+0x19c>)
 8002e1a:	f002 fd46 	bl	80058aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002e1e:	2201      	movs	r2, #1
 8002e20:	2110      	movs	r1, #16
 8002e22:	4843      	ldr	r0, [pc, #268]	; (8002f30 <MX_GPIO_Init+0x19c>)
 8002e24:	f002 fd41 	bl	80058aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f242 0101 	movw	r1, #8193	; 0x2001
 8002e2e:	4841      	ldr	r0, [pc, #260]	; (8002f34 <MX_GPIO_Init+0x1a0>)
 8002e30:	f002 fd3b 	bl	80058aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	2302      	movs	r3, #2
 8002e44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e46:	f107 0310 	add.w	r3, r7, #16
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4837      	ldr	r0, [pc, #220]	; (8002f2c <MX_GPIO_Init+0x198>)
 8002e4e:	f002 fad5 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e52:	2304      	movs	r3, #4
 8002e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e56:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <MX_GPIO_Init+0x1a4>)
 8002e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	f107 0310 	add.w	r3, r7, #16
 8002e62:	4619      	mov	r1, r3
 8002e64:	4832      	ldr	r0, [pc, #200]	; (8002f30 <MX_GPIO_Init+0x19c>)
 8002e66:	f002 fac9 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002e6a:	2318      	movs	r3, #24
 8002e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e76:	2303      	movs	r3, #3
 8002e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7a:	f107 0310 	add.w	r3, r7, #16
 8002e7e:	4619      	mov	r1, r3
 8002e80:	482b      	ldr	r0, [pc, #172]	; (8002f30 <MX_GPIO_Init+0x19c>)
 8002e82:	f002 fabb 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8002e86:	f242 0301 	movw	r3, #8193	; 0x2001
 8002e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e94:	2302      	movs	r3, #2
 8002e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e98:	f107 0310 	add.w	r3, r7, #16
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4825      	ldr	r0, [pc, #148]	; (8002f34 <MX_GPIO_Init+0x1a0>)
 8002ea0:	f002 faac 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8002eb0:	f107 0310 	add.w	r3, r7, #16
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	481f      	ldr	r0, [pc, #124]	; (8002f34 <MX_GPIO_Init+0x1a0>)
 8002eb8:	f002 faa0 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002ebc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <MX_GPIO_Init+0x1a4>)
 8002ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4818      	ldr	r0, [pc, #96]	; (8002f34 <MX_GPIO_Init+0x1a0>)
 8002ed2:	f002 fa93 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002edc:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <MX_GPIO_Init+0x1a4>)
 8002ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4811      	ldr	r0, [pc, #68]	; (8002f30 <MX_GPIO_Init+0x19c>)
 8002eec:	f002 fa86 	bl	80053fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	2008      	movs	r0, #8
 8002ef6:	f002 f99a 	bl	800522e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002efa:	2008      	movs	r0, #8
 8002efc:	f002 f9b3 	bl	8005266 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f00:	2200      	movs	r2, #0
 8002f02:	2100      	movs	r1, #0
 8002f04:	2017      	movs	r0, #23
 8002f06:	f002 f992 	bl	800522e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f0a:	2017      	movs	r0, #23
 8002f0c:	f002 f9ab 	bl	8005266 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f10:	2200      	movs	r2, #0
 8002f12:	2100      	movs	r1, #0
 8002f14:	2028      	movs	r0, #40	; 0x28
 8002f16:	f002 f98a 	bl	800522e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f1a:	2028      	movs	r0, #40	; 0x28
 8002f1c:	f002 f9a3 	bl	8005266 <HAL_NVIC_EnableIRQ>

}
 8002f20:	bf00      	nop
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40011000 	.word	0x40011000
 8002f30:	40010800 	.word	0x40010800
 8002f34:	40010c00 	.word	0x40010c00
 8002f38:	10210000 	.word	0x10210000

08002f3c <HAL_GPIO_EXTI_Callback>:
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);

}
//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2   (IRQ from NRF module)
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d108      	bne.n	8002f5e <HAL_GPIO_EXTI_Callback+0x22>
  {
	  if(tx_or_rx_mode == rx_mode)
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002f4e:	781a      	ldrb	r2, [r3, #0]
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_GPIO_EXTI_Callback+0x30>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d103      	bne.n	8002f60 <HAL_GPIO_EXTI_Callback+0x24>
	  {
		  IRQ_Callback();					// Call Callback
 8002f58:	f7fe fb18 	bl	800158c <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8002f5c:	e000      	b.n	8002f60 <HAL_GPIO_EXTI_Callback+0x24>
    __NOP();
 8002f5e:	bf00      	nop
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000008 	.word	0x20000008
 8002f6c:	20000102 	.word	0x20000102

08002f70 <HAL_UART_RxCpltCallback>:
//----------------------------------------------------------------------------------------
// Receive data from LoRa module
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <HAL_UART_RxCpltCallback+0x60>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d123      	bne.n	8002fc8 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\n') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_UART_RxCpltCallback+0x64>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b0a      	cmp	r3, #10
 8002f86:	d003      	beq.n	8002f90 <HAL_UART_RxCpltCallback+0x20>
 8002f88:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <HAL_UART_RxCpltCallback+0x68>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b31      	cmp	r3, #49	; 0x31
 8002f8e:	d906      	bls.n	8002f9e <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                           // Data is ready
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_UART_RxCpltCallback+0x6c>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_UART_RxCpltCallback+0x68>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8002f9c:	e014      	b.n	8002fc8 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <HAL_UART_RxCpltCallback+0x6c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <HAL_UART_RxCpltCallback+0x68>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_UART_RxCpltCallback+0x64>)
 8002fac:	7819      	ldrb	r1, [r3, #0]
 8002fae:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <HAL_UART_RxCpltCallback+0x70>)
 8002fb0:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <HAL_UART_RxCpltCallback+0x64>)
 8002fb6:	4806      	ldr	r0, [pc, #24]	; (8002fd0 <HAL_UART_RxCpltCallback+0x60>)
 8002fb8:	f004 ff63 	bl	8007e82 <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_UART_RxCpltCallback+0x68>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <HAL_UART_RxCpltCallback+0x68>)
 8002fc6:	701a      	strb	r2, [r3, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000650 	.word	0x20000650
 8002fd4:	20000588 	.word	0x20000588
 8002fd8:	2000058a 	.word	0x2000058a
 8002fdc:	20000589 	.word	0x20000589
 8002fe0:	20000554 	.word	0x20000554

08002fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe8:	b672      	cpsid	i
}
 8002fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fec:	e7fe      	b.n	8002fec <Error_Handler+0x8>
	...

08002ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <HAL_MspInit+0x5c>)
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	4a14      	ldr	r2, [pc, #80]	; (800304c <HAL_MspInit+0x5c>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6193      	str	r3, [r2, #24]
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_MspInit+0x5c>)
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800300e:	4b0f      	ldr	r3, [pc, #60]	; (800304c <HAL_MspInit+0x5c>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	4a0e      	ldr	r2, [pc, #56]	; (800304c <HAL_MspInit+0x5c>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	61d3      	str	r3, [r2, #28]
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_MspInit+0x5c>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_MspInit+0x60>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <HAL_MspInit+0x60>)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	40021000 	.word	0x40021000
 8003050:	40010000 	.word	0x40010000

08003054 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305c:	f107 0310 	add.w	r3, r7, #16
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <HAL_I2C_MspInit+0x70>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d123      	bne.n	80030bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003074:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_I2C_MspInit+0x74>)
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <HAL_I2C_MspInit+0x74>)
 800307a:	f043 0308 	orr.w	r3, r3, #8
 800307e:	6193      	str	r3, [r2, #24]
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_I2C_MspInit+0x74>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800308c:	23c0      	movs	r3, #192	; 0xc0
 800308e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003090:	2312      	movs	r3, #18
 8003092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003094:	2303      	movs	r3, #3
 8003096:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	4619      	mov	r1, r3
 800309e:	480b      	ldr	r0, [pc, #44]	; (80030cc <HAL_I2C_MspInit+0x78>)
 80030a0:	f002 f9ac 	bl	80053fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030a4:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_I2C_MspInit+0x74>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	4a07      	ldr	r2, [pc, #28]	; (80030c8 <HAL_I2C_MspInit+0x74>)
 80030aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ae:	61d3      	str	r3, [r2, #28]
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_I2C_MspInit+0x74>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030bc:	bf00      	nop
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40005400 	.word	0x40005400
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40010c00 	.word	0x40010c00

080030d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 0310 	add.w	r3, r7, #16
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <HAL_SPI_MspInit+0x88>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d12f      	bne.n	8003150 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_SPI_MspInit+0x8c>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <HAL_SPI_MspInit+0x8c>)
 80030f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030fa:	6193      	str	r3, [r2, #24]
 80030fc:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_SPI_MspInit+0x8c>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_SPI_MspInit+0x8c>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <HAL_SPI_MspInit+0x8c>)
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	6193      	str	r3, [r2, #24]
 8003114:	4b11      	ldr	r3, [pc, #68]	; (800315c <HAL_SPI_MspInit+0x8c>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003120:	23a0      	movs	r3, #160	; 0xa0
 8003122:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003128:	2303      	movs	r3, #3
 800312a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	f107 0310 	add.w	r3, r7, #16
 8003130:	4619      	mov	r1, r3
 8003132:	480b      	ldr	r0, [pc, #44]	; (8003160 <HAL_SPI_MspInit+0x90>)
 8003134:	f002 f962 	bl	80053fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003138:	2340      	movs	r3, #64	; 0x40
 800313a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003144:	f107 0310 	add.w	r3, r7, #16
 8003148:	4619      	mov	r1, r3
 800314a:	4805      	ldr	r0, [pc, #20]	; (8003160 <HAL_SPI_MspInit+0x90>)
 800314c:	f002 f956 	bl	80053fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003150:	bf00      	nop
 8003152:	3720      	adds	r7, #32
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40013000 	.word	0x40013000
 800315c:	40021000 	.word	0x40021000
 8003160:	40010800 	.word	0x40010800

08003164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <HAL_TIM_Base_MspInit+0x78>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d114      	bne.n	80031a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003176:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <HAL_TIM_Base_MspInit+0x7c>)
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	4a19      	ldr	r2, [pc, #100]	; (80031e0 <HAL_TIM_Base_MspInit+0x7c>)
 800317c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003180:	6193      	str	r3, [r2, #24]
 8003182:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <HAL_TIM_Base_MspInit+0x7c>)
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2100      	movs	r1, #0
 8003192:	2019      	movs	r0, #25
 8003194:	f002 f84b 	bl	800522e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003198:	2019      	movs	r0, #25
 800319a:	f002 f864 	bl	8005266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800319e:	e018      	b.n	80031d2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a8:	d113      	bne.n	80031d2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <HAL_TIM_Base_MspInit+0x7c>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <HAL_TIM_Base_MspInit+0x7c>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	61d3      	str	r3, [r2, #28]
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_TIM_Base_MspInit+0x7c>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	201c      	movs	r0, #28
 80031c8:	f002 f831 	bl	800522e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031cc:	201c      	movs	r0, #28
 80031ce:	f002 f84a 	bl	8005266 <HAL_NVIC_EnableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40021000 	.word	0x40021000

080031e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	; 0x28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 0318 	add.w	r3, r7, #24
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a3c      	ldr	r2, [pc, #240]	; (80032f0 <HAL_UART_MspInit+0x10c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d13a      	bne.n	800327a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003204:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_UART_MspInit+0x110>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	4a3a      	ldr	r2, [pc, #232]	; (80032f4 <HAL_UART_MspInit+0x110>)
 800320a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320e:	6193      	str	r3, [r2, #24]
 8003210:	4b38      	ldr	r3, [pc, #224]	; (80032f4 <HAL_UART_MspInit+0x110>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321c:	4b35      	ldr	r3, [pc, #212]	; (80032f4 <HAL_UART_MspInit+0x110>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4a34      	ldr	r2, [pc, #208]	; (80032f4 <HAL_UART_MspInit+0x110>)
 8003222:	f043 0304 	orr.w	r3, r3, #4
 8003226:	6193      	str	r3, [r2, #24]
 8003228:	4b32      	ldr	r3, [pc, #200]	; (80032f4 <HAL_UART_MspInit+0x110>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323a:	2302      	movs	r3, #2
 800323c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800323e:	2303      	movs	r3, #3
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003242:	f107 0318 	add.w	r3, r7, #24
 8003246:	4619      	mov	r1, r3
 8003248:	482b      	ldr	r0, [pc, #172]	; (80032f8 <HAL_UART_MspInit+0x114>)
 800324a:	f002 f8d7 	bl	80053fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800324e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003254:	2300      	movs	r3, #0
 8003256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325c:	f107 0318 	add.w	r3, r7, #24
 8003260:	4619      	mov	r1, r3
 8003262:	4825      	ldr	r0, [pc, #148]	; (80032f8 <HAL_UART_MspInit+0x114>)
 8003264:	f002 f8ca 	bl	80053fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003268:	2200      	movs	r2, #0
 800326a:	2101      	movs	r1, #1
 800326c:	2025      	movs	r0, #37	; 0x25
 800326e:	f001 ffde 	bl	800522e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003272:	2025      	movs	r0, #37	; 0x25
 8003274:	f001 fff7 	bl	8005266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003278:	e036      	b.n	80032e8 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <HAL_UART_MspInit+0x118>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d131      	bne.n	80032e8 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <HAL_UART_MspInit+0x110>)
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <HAL_UART_MspInit+0x110>)
 800328a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800328e:	61d3      	str	r3, [r2, #28]
 8003290:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <HAL_UART_MspInit+0x110>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329c:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <HAL_UART_MspInit+0x110>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <HAL_UART_MspInit+0x110>)
 80032a2:	f043 0308 	orr.w	r3, r3, #8
 80032a6:	6193      	str	r3, [r2, #24]
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_UART_MspInit+0x110>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032be:	2303      	movs	r3, #3
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c2:	f107 0318 	add.w	r3, r7, #24
 80032c6:	4619      	mov	r1, r3
 80032c8:	480d      	ldr	r0, [pc, #52]	; (8003300 <HAL_UART_MspInit+0x11c>)
 80032ca:	f002 f897 	bl	80053fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80032ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032dc:	f107 0318 	add.w	r3, r7, #24
 80032e0:	4619      	mov	r1, r3
 80032e2:	4807      	ldr	r0, [pc, #28]	; (8003300 <HAL_UART_MspInit+0x11c>)
 80032e4:	f002 f88a 	bl	80053fc <HAL_GPIO_Init>
}
 80032e8:	bf00      	nop
 80032ea:	3728      	adds	r7, #40	; 0x28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40013800 	.word	0x40013800
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40010800 	.word	0x40010800
 80032fc:	40004800 	.word	0x40004800
 8003300:	40010c00 	.word	0x40010c00

08003304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003308:	e7fe      	b.n	8003308 <NMI_Handler+0x4>
	...

0800330c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b094      	sub	sp, #80	; 0x50
 8003310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	int stack_size_1 = check_stack_size();
 8003312:	f7ff fb33 	bl	800297c <check_stack_size>
 8003316:	64f8      	str	r0, [r7, #76]	; 0x4c
//	      : [ptr] "=r" (stack_ptr)
//	      );
	/////////////////////////////////////////////////////////////////////////////////////////////
	tFailureData failureData;

	failureData.ACTLR = (* ((volatile uint32_t *) (0xe000e008)));
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <HardFault_Handler+0x78>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	603b      	str	r3, [r7, #0]
	failureData.CPUID = (* ((volatile uint32_t *) (0xe000ed00)));
 800331e:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <HardFault_Handler+0x7c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	607b      	str	r3, [r7, #4]
	failureData.ICSR  = (* ((volatile uint32_t *) (0xe000ed04)));
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HardFault_Handler+0x80>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60bb      	str	r3, [r7, #8]
	failureData.VTOR  = (* ((volatile uint32_t *) (0xe000ed08)));
 800332a:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HardFault_Handler+0x84>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]
	failureData.AIRCR = (* ((volatile uint32_t *) (0xe000ed0c)));
 8003330:	4b18      	ldr	r3, [pc, #96]	; (8003394 <HardFault_Handler+0x88>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	613b      	str	r3, [r7, #16]
	failureData.SCR   = (* ((volatile uint32_t *) (0xe000ed10)));
 8003336:	4b18      	ldr	r3, [pc, #96]	; (8003398 <HardFault_Handler+0x8c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	617b      	str	r3, [r7, #20]
	failureData.CCR   = (* ((volatile uint32_t *) (0xe000ed14)));
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <HardFault_Handler+0x90>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61bb      	str	r3, [r7, #24]
	failureData.SHPR1 = (* ((volatile uint32_t *) (0xe000ed18)));
 8003342:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <HardFault_Handler+0x94>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	61fb      	str	r3, [r7, #28]
	failureData.SHPR2 = (* ((volatile uint32_t *) (0xe000ed1c)));
 8003348:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <HardFault_Handler+0x98>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	623b      	str	r3, [r7, #32]
	failureData.SHPR3 = (* ((volatile uint32_t *) (0xe000ed20)));
 800334e:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <HardFault_Handler+0x9c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
	failureData.SHCRS = (* ((volatile uint32_t *) (0xe000ed24)));
 8003354:	4b15      	ldr	r3, [pc, #84]	; (80033ac <HardFault_Handler+0xa0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
	failureData.CFSR.u32  = (* ((volatile uint32_t *) (0xe000ed28)));
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HardFault_Handler+0xa4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
	failureData.HFSR  = (* ((volatile uint32_t *) (0xe000ed2c)));
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <HardFault_Handler+0xa8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	633b      	str	r3, [r7, #48]	; 0x30
	failureData.MMAR  = (* ((volatile uint32_t *) (0xe000ed34)));
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <HardFault_Handler+0xac>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	637b      	str	r3, [r7, #52]	; 0x34
	failureData.BFAR  = (* ((volatile uint32_t *) (0xe000ed38)));
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HardFault_Handler+0xb0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	63bb      	str	r3, [r7, #56]	; 0x38
	failureData.AFSR  = (* ((volatile uint32_t *) (0xe000ed3c)));
 8003372:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <HardFault_Handler+0xb4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	63fb      	str	r3, [r7, #60]	; 0x3c

	failureData.DFSR = (* ((volatile uint32_t *) (0xe000ed30)));
 8003378:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HardFault_Handler+0xb8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	643b      	str	r3, [r7, #64]	; 0x40

	/////////////////////////////////////////////////////////////////////////////////////////////

	  int hhh = 99;
 800337e:	2363      	movs	r3, #99	; 0x63
 8003380:	64bb      	str	r3, [r7, #72]	; 0x48
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003382:	e7fe      	b.n	8003382 <HardFault_Handler+0x76>
 8003384:	e000e008 	.word	0xe000e008
 8003388:	e000ed00 	.word	0xe000ed00
 800338c:	e000ed04 	.word	0xe000ed04
 8003390:	e000ed08 	.word	0xe000ed08
 8003394:	e000ed0c 	.word	0xe000ed0c
 8003398:	e000ed10 	.word	0xe000ed10
 800339c:	e000ed14 	.word	0xe000ed14
 80033a0:	e000ed18 	.word	0xe000ed18
 80033a4:	e000ed1c 	.word	0xe000ed1c
 80033a8:	e000ed20 	.word	0xe000ed20
 80033ac:	e000ed24 	.word	0xe000ed24
 80033b0:	e000ed28 	.word	0xe000ed28
 80033b4:	e000ed2c 	.word	0xe000ed2c
 80033b8:	e000ed34 	.word	0xe000ed34
 80033bc:	e000ed38 	.word	0xe000ed38
 80033c0:	e000ed3c 	.word	0xe000ed3c
 80033c4:	e000ed30 	.word	0xe000ed30

080033c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <MemManage_Handler+0x4>

080033ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d2:	e7fe      	b.n	80033d2 <BusFault_Handler+0x4>

080033d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d8:	e7fe      	b.n	80033d8 <UsageFault_Handler+0x4>

080033da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003402:	f001 fdfd 	bl	8005000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}

0800340a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800340e:	2004      	movs	r0, #4
 8003410:	f002 fa7c 	bl	800590c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003414:	bf00      	nop
 8003416:	bd80      	pop	{r7, pc}

08003418 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <EXTI9_5_IRQHandler+0x44>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	f083 0301 	eor.w	r3, r3, #1
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d012      	beq.n	8003450 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <EXTI9_5_IRQHandler+0x48>)
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <EXTI9_5_IRQHandler+0x4c>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <EXTI9_5_IRQHandler+0x50>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d105      	bne.n	8003450 <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8003444:	4809      	ldr	r0, [pc, #36]	; (800346c <EXTI9_5_IRQHandler+0x54>)
 8003446:	f004 f8a9 	bl	800759c <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 800344a:	4b07      	ldr	r3, [pc, #28]	; (8003468 <EXTI9_5_IRQHandler+0x50>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003450:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003454:	f002 fa5a 	bl	800590c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003458:	bf00      	nop
 800345a:	bd80      	pop	{r7, pc}
 800345c:	200005a0 	.word	0x200005a0
 8003460:	40010400 	.word	0x40010400
 8003464:	20000025 	.word	0x20000025
 8003468:	20000028 	.word	0x20000028
 800346c:	20000694 	.word	0x20000694

08003470 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8003474:	4b37      	ldr	r3, [pc, #220]	; (8003554 <TIM1_UP_IRQHandler+0xe4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d165      	bne.n	8003548 <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 800347c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003480:	4835      	ldr	r0, [pc, #212]	; (8003558 <TIM1_UP_IRQHandler+0xe8>)
 8003482:	f002 f9fb 	bl	800587c <HAL_GPIO_ReadPin>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d118      	bne.n	80034be <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 800348c:	4b33      	ldr	r3, [pc, #204]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3301      	adds	r3, #1
 8003492:	4a32      	ldr	r2, [pc, #200]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 8003494:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8003496:	4b32      	ldr	r3, [pc, #200]	; (8003560 <TIM1_UP_IRQHandler+0xf0>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	4b2f      	ldr	r3, [pc, #188]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	dc51      	bgt.n	8003548 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 80034a4:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <TIM1_UP_IRQHandler+0xe4>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80034aa:	482e      	ldr	r0, [pc, #184]	; (8003564 <TIM1_UP_IRQHandler+0xf4>)
 80034ac:	f004 f8c8 	bl	8007640 <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <TIM1_UP_IRQHandler+0xf8>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e044      	b.n	8003548 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 80034be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034c2:	482a      	ldr	r0, [pc, #168]	; (800356c <TIM1_UP_IRQHandler+0xfc>)
 80034c4:	f002 f9da 	bl	800587c <HAL_GPIO_ReadPin>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d118      	bne.n	8003500 <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80034ce:	4b23      	ldr	r3, [pc, #140]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	4a21      	ldr	r2, [pc, #132]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 80034d6:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80034d8:	4b21      	ldr	r3, [pc, #132]	; (8003560 <TIM1_UP_IRQHandler+0xf0>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	4b1f      	ldr	r3, [pc, #124]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	dc30      	bgt.n	8003548 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 80034e6:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <TIM1_UP_IRQHandler+0xe4>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80034ec:	481d      	ldr	r0, [pc, #116]	; (8003564 <TIM1_UP_IRQHandler+0xf4>)
 80034ee:	f004 f8a7 	bl	8007640 <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <TIM1_UP_IRQHandler+0xf8>)
 80034f4:	2203      	movs	r2, #3
 80034f6:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80034f8:	4b18      	ldr	r3, [pc, #96]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e023      	b.n	8003548 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 8003500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003504:	4814      	ldr	r0, [pc, #80]	; (8003558 <TIM1_UP_IRQHandler+0xe8>)
 8003506:	f002 f9b9 	bl	800587c <HAL_GPIO_ReadPin>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d118      	bne.n	8003542 <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 8003510:	4b12      	ldr	r3, [pc, #72]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	4a11      	ldr	r2, [pc, #68]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 8003518:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <TIM1_UP_IRQHandler+0xf0>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	dc0f      	bgt.n	8003548 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <TIM1_UP_IRQHandler+0xe4>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <TIM1_UP_IRQHandler+0xf8>)
 8003530:	2202      	movs	r2, #2
 8003532:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800353a:	480a      	ldr	r0, [pc, #40]	; (8003564 <TIM1_UP_IRQHandler+0xf4>)
 800353c:	f004 f880 	bl	8007640 <HAL_TIM_Base_Stop_IT>
 8003540:	e002      	b.n	8003548 <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <TIM1_UP_IRQHandler+0xec>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003548:	4806      	ldr	r0, [pc, #24]	; (8003564 <TIM1_UP_IRQHandler+0xf4>)
 800354a:	f004 f8a7 	bl	800769c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000028 	.word	0x20000028
 8003558:	40010c00 	.word	0x40010c00
 800355c:	2000058c 	.word	0x2000058c
 8003560:	20000026 	.word	0x20000026
 8003564:	20000694 	.word	0x20000694
 8003568:	200005a1 	.word	0x200005a1
 800356c:	40010800 	.word	0x40010800

08003570 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	static int i = 0;
	if(i == 200)								// Do it every 2 seconds
 8003574:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <TIM2_IRQHandler+0x54>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2bc8      	cmp	r3, #200	; 0xc8
 800357a:	d118      	bne.n	80035ae <TIM2_IRQHandler+0x3e>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800357c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003580:	4811      	ldr	r0, [pc, #68]	; (80035c8 <TIM2_IRQHandler+0x58>)
 8003582:	f002 f9aa 	bl	80058da <HAL_GPIO_TogglePin>
		am2302_measure();
 8003586:	f7ff f8db 	bl	8002740 <am2302_measure>
		i = 0;
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <TIM2_IRQHandler+0x54>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
		am2302_ready = !am2302_ready;
 8003590:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <TIM2_IRQHandler+0x5c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f083 0301 	eor.w	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <TIM2_IRQHandler+0x5c>)
 80035ac:	701a      	strb	r2, [r3, #0]
	}
	i++;
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <TIM2_IRQHandler+0x54>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	4a03      	ldr	r2, [pc, #12]	; (80035c4 <TIM2_IRQHandler+0x54>)
 80035b6:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035b8:	4805      	ldr	r0, [pc, #20]	; (80035d0 <TIM2_IRQHandler+0x60>)
 80035ba:	f004 f86f 	bl	800769c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000594 	.word	0x20000594
 80035c8:	40011000 	.word	0x40011000
 80035cc:	20000590 	.word	0x20000590
 80035d0:	20000734 	.word	0x20000734

080035d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035d8:	4802      	ldr	r0, [pc, #8]	; (80035e4 <USART1_IRQHandler+0x10>)
 80035da:	f004 fc83 	bl	8007ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000650 	.word	0x20000650

080035e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 80035ec:	4b1b      	ldr	r3, [pc, #108]	; (800365c <EXTI15_10_IRQHandler+0x74>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	f083 0301 	eor.w	r3, r3, #1
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d012      	beq.n	8003620 <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 80035fa:	4b19      	ldr	r3, [pc, #100]	; (8003660 <EXTI15_10_IRQHandler+0x78>)
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 8003606:	4b17      	ldr	r3, [pc, #92]	; (8003664 <EXTI15_10_IRQHandler+0x7c>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <EXTI15_10_IRQHandler+0x80>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d105      	bne.n	8003620 <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8003614:	4815      	ldr	r0, [pc, #84]	; (800366c <EXTI15_10_IRQHandler+0x84>)
 8003616:	f003 ffc1 	bl	800759c <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 800361a:	4b13      	ldr	r3, [pc, #76]	; (8003668 <EXTI15_10_IRQHandler+0x80>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <EXTI15_10_IRQHandler+0x78>)
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00c      	beq.n	8003646 <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 800362c:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <EXTI15_10_IRQHandler+0x7c>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <EXTI15_10_IRQHandler+0x80>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d105      	bne.n	8003646 <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 800363a:	480c      	ldr	r0, [pc, #48]	; (800366c <EXTI15_10_IRQHandler+0x84>)
 800363c:	f003 ffae 	bl	800759c <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <EXTI15_10_IRQHandler+0x80>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003646:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800364a:	f002 f95f 	bl	800590c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800364e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003652:	f002 f95b 	bl	800590c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	200005a0 	.word	0x200005a0
 8003660:	40010400 	.word	0x40010400
 8003664:	20000025 	.word	0x20000025
 8003668:	20000028 	.word	0x20000028
 800366c:	20000694 	.word	0x20000694

08003670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003678:	4a14      	ldr	r2, [pc, #80]	; (80036cc <_sbrk+0x5c>)
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <_sbrk+0x60>)
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <_sbrk+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <_sbrk+0x64>)
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <_sbrk+0x68>)
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <_sbrk+0x64>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	429a      	cmp	r2, r3
 800369e:	d207      	bcs.n	80036b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036a0:	f004 fffe 	bl	80086a0 <__errno>
 80036a4:	4603      	mov	r3, r0
 80036a6:	220c      	movs	r2, #12
 80036a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036ae:	e009      	b.n	80036c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <_sbrk+0x64>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036b6:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <_sbrk+0x64>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <_sbrk+0x64>)
 80036c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036c2:	68fb      	ldr	r3, [r7, #12]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20005000 	.word	0x20005000
 80036d0:	00000400 	.word	0x00000400
 80036d4:	20000598 	.word	0x20000598
 80036d8:	20000a40 	.word	0x20000a40

080036dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <Menu_Init>:
void periodic_measurement_am2302_on(void);		// On Measure T and H using TIMER2 (Use it for TX data by NRF or LoRa)
void periodic_measurement_am2302_off(void);		// OFF Measure T and H using TIMER2

// ----------------------------------------------------------------------------------------
void Menu_Init (void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b08d      	sub	sp, #52	; 0x34
 80036ec:	af00      	add	r7, sp, #0
	// Make pointers on funsctions
	// Main functions
	void (*p_print_rows_on_oled_if_up) (void);
	p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
 80036ee:	4b8a      	ldr	r3, [pc, #552]	; (8003918 <Menu_Init+0x230>)
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	void (*p_print_rows_on_oled_if_down) (void);					// Create pointer on function
	p_print_rows_on_oled_if_down = print_rows_on_oled_if_down;		// Save function print on pointer print_p
 80036f2:	4b8a      	ldr	r3, [pc, #552]	; (800391c <Menu_Init+0x234>)
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
	void (*p_return_from_menu)(void);
	p_return_from_menu = return_from_menu;
 80036f6:	4b8a      	ldr	r3, [pc, #552]	; (8003920 <Menu_Init+0x238>)
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
	// ------------------------------------------------------

	// LoRa  menu functions
	void (*p_lora_rx_mode) (void);						// Function "Do it". Works when select it
	p_lora_rx_mode = lora_rx_mode;
 80036fa:	4b8a      	ldr	r3, [pc, #552]	; (8003924 <Menu_Init+0x23c>)
 80036fc:	623b      	str	r3, [r7, #32]
	void (*p_lora_tx_mode) (void);						// Function "Do it". Works when select it
	p_lora_tx_mode = lora_tx_mode;
 80036fe:	4b8a      	ldr	r3, [pc, #552]	; (8003928 <Menu_Init+0x240>)
 8003700:	61fb      	str	r3, [r7, #28]
	void (*p_lora_tx_mode_send_T_and_H) (void);
	p_lora_tx_mode_send_T_and_H = lora_tx_mode_send_T_and_H;
 8003702:	4b8a      	ldr	r3, [pc, #552]	; (800392c <Menu_Init+0x244>)
 8003704:	61bb      	str	r3, [r7, #24]


	// ------------------------------------------------------
	// NRF menu functions
	void (*p_nrf_tx_mode_send_test_number) (void);						// Function "Do it". Works when select it
	p_nrf_tx_mode_send_test_number = nrf_tx_mode_send_test_number;
 8003706:	4b8a      	ldr	r3, [pc, #552]	; (8003930 <Menu_Init+0x248>)
 8003708:	617b      	str	r3, [r7, #20]
	void (*p_nrf_tx_mode_send_T_and_H) (void);
	p_nrf_tx_mode_send_T_and_H = nrf_tx_mode_send_T_and_H;
 800370a:	4b8a      	ldr	r3, [pc, #552]	; (8003934 <Menu_Init+0x24c>)
 800370c:	613b      	str	r3, [r7, #16]
	void (*p_nrf_rx_mode) (void);						// Function "Do it". Works when select it
	p_nrf_rx_mode = nrf_rx_mode;
 800370e:	4b8a      	ldr	r3, [pc, #552]	; (8003938 <Menu_Init+0x250>)
 8003710:	60fb      	str	r3, [r7, #12]

	// ------------------------------------------------------
	// NRF menu functions
	void (*p_am2302_measure) (void);
	p_am2302_measure = am2302;
 8003712:	4b8a      	ldr	r3, [pc, #552]	; (800393c <Menu_Init+0x254>)
 8003714:	60bb      	str	r3, [r7, #8]
	// ------------------------------------------------------
	void (*p_periodic_measurement_am2302_on) (void);
	p_periodic_measurement_am2302_on = periodic_measurement_am2302_on;
 8003716:	4b8a      	ldr	r3, [pc, #552]	; (8003940 <Menu_Init+0x258>)
 8003718:	607b      	str	r3, [r7, #4]
	// ------------------------------------------------------
	void (*p_periodic_measurement_am2302_off) (void);
	p_periodic_measurement_am2302_off = periodic_measurement_am2302_off;
 800371a:	4b8a      	ldr	r3, [pc, #552]	; (8003944 <Menu_Init+0x25c>)
 800371c:	603b      	str	r3, [r7, #0]
	//Баг, коли виходити з NFR RX меню, якщо передавалися дані T і H    <<<<<<<<<<<>

	// Fill in elements(nodes) of list (7 items)
	// Main menu items
	/////////////////////////////////////////////////////////////////
	items[0].up = 0;
 800371e:	4b8a      	ldr	r3, [pc, #552]	; (8003948 <Menu_Init+0x260>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
	items[0].down = &items[1];
 8003724:	4b88      	ldr	r3, [pc, #544]	; (8003948 <Menu_Init+0x260>)
 8003726:	4a89      	ldr	r2, [pc, #548]	; (800394c <Menu_Init+0x264>)
 8003728:	605a      	str	r2, [r3, #4]
	items[0].child = &items_menu_1[0];
 800372a:	4b87      	ldr	r3, [pc, #540]	; (8003948 <Menu_Init+0x260>)
 800372c:	4a88      	ldr	r2, [pc, #544]	; (8003950 <Menu_Init+0x268>)
 800372e:	609a      	str	r2, [r3, #8]
	items[0].parent = 0;
 8003730:	4b85      	ldr	r3, [pc, #532]	; (8003948 <Menu_Init+0x260>)
 8003732:	2200      	movs	r2, #0
 8003734:	60da      	str	r2, [r3, #12]
	items[0].id = 1;
 8003736:	4b84      	ldr	r3, [pc, #528]	; (8003948 <Menu_Init+0x260>)
 8003738:	2201      	movs	r2, #1
 800373a:	741a      	strb	r2, [r3, #16]
	items[0].name = "LoRa E220";
 800373c:	4b82      	ldr	r3, [pc, #520]	; (8003948 <Menu_Init+0x260>)
 800373e:	4a85      	ldr	r2, [pc, #532]	; (8003954 <Menu_Init+0x26c>)
 8003740:	615a      	str	r2, [r3, #20]
	items[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8003742:	4a81      	ldr	r2, [pc, #516]	; (8003948 <Menu_Init+0x260>)
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	6193      	str	r3, [r2, #24]
	items[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8003748:	4a7f      	ldr	r2, [pc, #508]	; (8003948 <Menu_Init+0x260>)
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	61d3      	str	r3, [r2, #28]
	items[0].makeAction = 0;
 800374e:	4b7e      	ldr	r3, [pc, #504]	; (8003948 <Menu_Init+0x260>)
 8003750:	2200      	movs	r2, #0
 8003752:	621a      	str	r2, [r3, #32]

	items[1].up = &items[0];
 8003754:	4b7c      	ldr	r3, [pc, #496]	; (8003948 <Menu_Init+0x260>)
 8003756:	4a7c      	ldr	r2, [pc, #496]	; (8003948 <Menu_Init+0x260>)
 8003758:	625a      	str	r2, [r3, #36]	; 0x24
	items[1].down = &items[2];
 800375a:	4b7b      	ldr	r3, [pc, #492]	; (8003948 <Menu_Init+0x260>)
 800375c:	4a7e      	ldr	r2, [pc, #504]	; (8003958 <Menu_Init+0x270>)
 800375e:	629a      	str	r2, [r3, #40]	; 0x28
	items[1].child = &items_menu_2[0];
 8003760:	4b79      	ldr	r3, [pc, #484]	; (8003948 <Menu_Init+0x260>)
 8003762:	4a7e      	ldr	r2, [pc, #504]	; (800395c <Menu_Init+0x274>)
 8003764:	62da      	str	r2, [r3, #44]	; 0x2c
	items[1].parent = 0;
 8003766:	4b78      	ldr	r3, [pc, #480]	; (8003948 <Menu_Init+0x260>)
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
	items[1].id = 2;
 800376c:	4b76      	ldr	r3, [pc, #472]	; (8003948 <Menu_Init+0x260>)
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items[1].name = "NRF24L01";
 8003774:	4b74      	ldr	r3, [pc, #464]	; (8003948 <Menu_Init+0x260>)
 8003776:	4a7a      	ldr	r2, [pc, #488]	; (8003960 <Menu_Init+0x278>)
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
	items[1].updateScreen_up = p_print_rows_on_oled_if_up;
 800377a:	4a73      	ldr	r2, [pc, #460]	; (8003948 <Menu_Init+0x260>)
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	63d3      	str	r3, [r2, #60]	; 0x3c
	items[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8003780:	4a71      	ldr	r2, [pc, #452]	; (8003948 <Menu_Init+0x260>)
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
	items[1].makeAction = 0;
 8003786:	4b70      	ldr	r3, [pc, #448]	; (8003948 <Menu_Init+0x260>)
 8003788:	2200      	movs	r2, #0
 800378a:	645a      	str	r2, [r3, #68]	; 0x44

	items[2].up = &items[1];
 800378c:	4b6e      	ldr	r3, [pc, #440]	; (8003948 <Menu_Init+0x260>)
 800378e:	4a6f      	ldr	r2, [pc, #444]	; (800394c <Menu_Init+0x264>)
 8003790:	649a      	str	r2, [r3, #72]	; 0x48
	items[2].down = 0;
 8003792:	4b6d      	ldr	r3, [pc, #436]	; (8003948 <Menu_Init+0x260>)
 8003794:	2200      	movs	r2, #0
 8003796:	64da      	str	r2, [r3, #76]	; 0x4c
	items[2].child = &items_menu_3[0];
 8003798:	4b6b      	ldr	r3, [pc, #428]	; (8003948 <Menu_Init+0x260>)
 800379a:	4a72      	ldr	r2, [pc, #456]	; (8003964 <Menu_Init+0x27c>)
 800379c:	651a      	str	r2, [r3, #80]	; 0x50
	items[2].parent = 0;
 800379e:	4b6a      	ldr	r3, [pc, #424]	; (8003948 <Menu_Init+0x260>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54
	items[2].id = 3;
 80037a4:	4b68      	ldr	r3, [pc, #416]	; (8003948 <Menu_Init+0x260>)
 80037a6:	2203      	movs	r2, #3
 80037a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items[2].name = "AM2302 sensor";
 80037ac:	4b66      	ldr	r3, [pc, #408]	; (8003948 <Menu_Init+0x260>)
 80037ae:	4a6e      	ldr	r2, [pc, #440]	; (8003968 <Menu_Init+0x280>)
 80037b0:	65da      	str	r2, [r3, #92]	; 0x5c
	items[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80037b2:	4a65      	ldr	r2, [pc, #404]	; (8003948 <Menu_Init+0x260>)
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	6613      	str	r3, [r2, #96]	; 0x60
	items[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80037b8:	4a63      	ldr	r2, [pc, #396]	; (8003948 <Menu_Init+0x260>)
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	6653      	str	r3, [r2, #100]	; 0x64
	items[2].makeAction = 0;
 80037be:	4b62      	ldr	r3, [pc, #392]	; (8003948 <Menu_Init+0x260>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	669a      	str	r2, [r3, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating LoRa menu
	items_menu_1[0].up = 0;
 80037c4:	4b62      	ldr	r3, [pc, #392]	; (8003950 <Menu_Init+0x268>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
	items_menu_1[0].down = &items_menu_1[1];
 80037ca:	4b61      	ldr	r3, [pc, #388]	; (8003950 <Menu_Init+0x268>)
 80037cc:	4a67      	ldr	r2, [pc, #412]	; (800396c <Menu_Init+0x284>)
 80037ce:	605a      	str	r2, [r3, #4]
	items_menu_1[0].id = 1;
 80037d0:	4b5f      	ldr	r3, [pc, #380]	; (8003950 <Menu_Init+0x268>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	741a      	strb	r2, [r3, #16]
	items_menu_1[0].child = 0;
 80037d6:	4b5e      	ldr	r3, [pc, #376]	; (8003950 <Menu_Init+0x268>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
	items_menu_1[0].parent = &items[0];
 80037dc:	4b5c      	ldr	r3, [pc, #368]	; (8003950 <Menu_Init+0x268>)
 80037de:	4a5a      	ldr	r2, [pc, #360]	; (8003948 <Menu_Init+0x260>)
 80037e0:	60da      	str	r2, [r3, #12]
	items_menu_1[0].name = "LoRa RX";
 80037e2:	4b5b      	ldr	r3, [pc, #364]	; (8003950 <Menu_Init+0x268>)
 80037e4:	4a62      	ldr	r2, [pc, #392]	; (8003970 <Menu_Init+0x288>)
 80037e6:	615a      	str	r2, [r3, #20]
	items_menu_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80037e8:	4a59      	ldr	r2, [pc, #356]	; (8003950 <Menu_Init+0x268>)
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	6193      	str	r3, [r2, #24]
	items_menu_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80037ee:	4a58      	ldr	r2, [pc, #352]	; (8003950 <Menu_Init+0x268>)
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	61d3      	str	r3, [r2, #28]
	items_menu_1[0].makeAction = p_lora_rx_mode;
 80037f4:	4a56      	ldr	r2, [pc, #344]	; (8003950 <Menu_Init+0x268>)
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	6213      	str	r3, [r2, #32]

	items_menu_1[1].up = &items_menu_1[0];
 80037fa:	4b55      	ldr	r3, [pc, #340]	; (8003950 <Menu_Init+0x268>)
 80037fc:	4a54      	ldr	r2, [pc, #336]	; (8003950 <Menu_Init+0x268>)
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1[1].down = &items_menu_1[2];
 8003800:	4b53      	ldr	r3, [pc, #332]	; (8003950 <Menu_Init+0x268>)
 8003802:	4a5c      	ldr	r2, [pc, #368]	; (8003974 <Menu_Init+0x28c>)
 8003804:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1[1].child = &items_menu_1_1[0];
 8003806:	4b52      	ldr	r3, [pc, #328]	; (8003950 <Menu_Init+0x268>)
 8003808:	4a5b      	ldr	r2, [pc, #364]	; (8003978 <Menu_Init+0x290>)
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1[1].parent = &items[0];
 800380c:	4b50      	ldr	r3, [pc, #320]	; (8003950 <Menu_Init+0x268>)
 800380e:	4a4e      	ldr	r2, [pc, #312]	; (8003948 <Menu_Init+0x260>)
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1[1].id = 2;
 8003812:	4b4f      	ldr	r3, [pc, #316]	; (8003950 <Menu_Init+0x268>)
 8003814:	2202      	movs	r2, #2
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1[1].name = "LoRa TX";
 800381a:	4b4d      	ldr	r3, [pc, #308]	; (8003950 <Menu_Init+0x268>)
 800381c:	4a57      	ldr	r2, [pc, #348]	; (800397c <Menu_Init+0x294>)
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8003820:	4a4b      	ldr	r2, [pc, #300]	; (8003950 <Menu_Init+0x268>)
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8003826:	4a4a      	ldr	r2, [pc, #296]	; (8003950 <Menu_Init+0x268>)
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1[1].makeAction = 0;
 800382c:	4b48      	ldr	r3, [pc, #288]	; (8003950 <Menu_Init+0x268>)
 800382e:	2200      	movs	r2, #0
 8003830:	645a      	str	r2, [r3, #68]	; 0x44

	items_menu_1[2].up = &items_menu_1[1];
 8003832:	4b47      	ldr	r3, [pc, #284]	; (8003950 <Menu_Init+0x268>)
 8003834:	4a4d      	ldr	r2, [pc, #308]	; (800396c <Menu_Init+0x284>)
 8003836:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1[2].down = 0;
 8003838:	4b45      	ldr	r3, [pc, #276]	; (8003950 <Menu_Init+0x268>)
 800383a:	2200      	movs	r2, #0
 800383c:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1[2].child = 0;
 800383e:	4b44      	ldr	r3, [pc, #272]	; (8003950 <Menu_Init+0x268>)
 8003840:	2200      	movs	r2, #0
 8003842:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1[2].parent = &items[0];
 8003844:	4b42      	ldr	r3, [pc, #264]	; (8003950 <Menu_Init+0x268>)
 8003846:	4a40      	ldr	r2, [pc, #256]	; (8003948 <Menu_Init+0x260>)
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1[2].id = 3;
 800384a:	4b41      	ldr	r3, [pc, #260]	; (8003950 <Menu_Init+0x268>)
 800384c:	2203      	movs	r2, #3
 800384e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1[2].name = "EXIT";						// Name of item
 8003852:	4b3f      	ldr	r3, [pc, #252]	; (8003950 <Menu_Init+0x268>)
 8003854:	4a4a      	ldr	r2, [pc, #296]	; (8003980 <Menu_Init+0x298>)
 8003856:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8003858:	4a3d      	ldr	r2, [pc, #244]	; (8003950 <Menu_Init+0x268>)
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 800385e:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <Menu_Init+0x268>)
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1[2].makeAction = p_return_from_menu;
 8003864:	4a3a      	ldr	r2, [pc, #232]	; (8003950 <Menu_Init+0x268>)
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	6693      	str	r3, [r2, #104]	; 0x68


	// LoRa TX menu
	items_menu_1_1[0].up = 0;
 800386a:	4b43      	ldr	r3, [pc, #268]	; (8003978 <Menu_Init+0x290>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
	items_menu_1_1[0].down = &items_menu_1_1[1];
 8003870:	4b41      	ldr	r3, [pc, #260]	; (8003978 <Menu_Init+0x290>)
 8003872:	4a44      	ldr	r2, [pc, #272]	; (8003984 <Menu_Init+0x29c>)
 8003874:	605a      	str	r2, [r3, #4]
	items_menu_1_1[0].child = 0;
 8003876:	4b40      	ldr	r3, [pc, #256]	; (8003978 <Menu_Init+0x290>)
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
	items_menu_1_1[0].parent = &items_menu_1[0];
 800387c:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <Menu_Init+0x290>)
 800387e:	4a34      	ldr	r2, [pc, #208]	; (8003950 <Menu_Init+0x268>)
 8003880:	60da      	str	r2, [r3, #12]
	items_menu_1_1[0].id = 1;
 8003882:	4b3d      	ldr	r3, [pc, #244]	; (8003978 <Menu_Init+0x290>)
 8003884:	2201      	movs	r2, #1
 8003886:	741a      	strb	r2, [r3, #16]
	items_menu_1_1[0].name = "TX Test data";
 8003888:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <Menu_Init+0x290>)
 800388a:	4a3f      	ldr	r2, [pc, #252]	; (8003988 <Menu_Init+0x2a0>)
 800388c:	615a      	str	r2, [r3, #20]
	items_menu_1_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 800388e:	4a3a      	ldr	r2, [pc, #232]	; (8003978 <Menu_Init+0x290>)
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	6193      	str	r3, [r2, #24]
	items_menu_1_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8003894:	4a38      	ldr	r2, [pc, #224]	; (8003978 <Menu_Init+0x290>)
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	61d3      	str	r3, [r2, #28]
	items_menu_1_1[0].makeAction = p_lora_tx_mode;
 800389a:	4a37      	ldr	r2, [pc, #220]	; (8003978 <Menu_Init+0x290>)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	6213      	str	r3, [r2, #32]

	items_menu_1_1[1].up = &items_menu_1_1[0];
 80038a0:	4b35      	ldr	r3, [pc, #212]	; (8003978 <Menu_Init+0x290>)
 80038a2:	4a35      	ldr	r2, [pc, #212]	; (8003978 <Menu_Init+0x290>)
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1_1[1].down = &items_menu_1_1[2];
 80038a6:	4b34      	ldr	r3, [pc, #208]	; (8003978 <Menu_Init+0x290>)
 80038a8:	4a38      	ldr	r2, [pc, #224]	; (800398c <Menu_Init+0x2a4>)
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1_1[1].child = 0;
 80038ac:	4b32      	ldr	r3, [pc, #200]	; (8003978 <Menu_Init+0x290>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1_1[1].parent = &items_menu_1[0];
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <Menu_Init+0x290>)
 80038b4:	4a26      	ldr	r2, [pc, #152]	; (8003950 <Menu_Init+0x268>)
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1_1[1].id = 2;
 80038b8:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <Menu_Init+0x290>)
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1_1[1].name = "TX T & H";
 80038c0:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <Menu_Init+0x290>)
 80038c2:	4a33      	ldr	r2, [pc, #204]	; (8003990 <Menu_Init+0x2a8>)
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 80038c6:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <Menu_Init+0x290>)
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80038cc:	4a2a      	ldr	r2, [pc, #168]	; (8003978 <Menu_Init+0x290>)
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1_1[1].makeAction = p_lora_tx_mode_send_T_and_H;
 80038d2:	4a29      	ldr	r2, [pc, #164]	; (8003978 <Menu_Init+0x290>)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_1_1[2].up = &items_menu_1_1[1];
 80038d8:	4b27      	ldr	r3, [pc, #156]	; (8003978 <Menu_Init+0x290>)
 80038da:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <Menu_Init+0x29c>)
 80038dc:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1_1[2].down = 0;
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <Menu_Init+0x290>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1_1[2].child = 0;
 80038e4:	4b24      	ldr	r3, [pc, #144]	; (8003978 <Menu_Init+0x290>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1_1[2].parent = &items_menu_1[0];
 80038ea:	4b23      	ldr	r3, [pc, #140]	; (8003978 <Menu_Init+0x290>)
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <Menu_Init+0x268>)
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1_1[2].id = 3;
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <Menu_Init+0x290>)
 80038f2:	2203      	movs	r2, #3
 80038f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1_1[2].name = "EXIT";
 80038f8:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <Menu_Init+0x290>)
 80038fa:	4a21      	ldr	r2, [pc, #132]	; (8003980 <Menu_Init+0x298>)
 80038fc:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80038fe:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <Menu_Init+0x290>)
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8003904:	4a1c      	ldr	r2, [pc, #112]	; (8003978 <Menu_Init+0x290>)
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1_1[2].makeAction = p_return_from_menu;
 800390a:	4a1b      	ldr	r2, [pc, #108]	; (8003978 <Menu_Init+0x290>)
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating NRF menu
	items_menu_2[0].up = 0;
 8003910:	4b12      	ldr	r3, [pc, #72]	; (800395c <Menu_Init+0x274>)
 8003912:	2200      	movs	r2, #0
 8003914:	e03e      	b.n	8003994 <Menu_Init+0x2ac>
 8003916:	bf00      	nop
 8003918:	08003f19 	.word	0x08003f19
 800391c:	08004011 	.word	0x08004011
 8003920:	0800437d 	.word	0x0800437d
 8003924:	080043d1 	.word	0x080043d1
 8003928:	0800446d 	.word	0x0800446d
 800392c:	08004509 	.word	0x08004509
 8003930:	0800465d 	.word	0x0800465d
 8003934:	08004735 	.word	0x08004735
 8003938:	080045a5 	.word	0x080045a5
 800393c:	0800480d 	.word	0x0800480d
 8003940:	08004b19 	.word	0x08004b19
 8003944:	08004e01 	.word	0x08004e01
 8003948:	20000950 	.word	0x20000950
 800394c:	20000974 	.word	0x20000974
 8003950:	20000854 	.word	0x20000854
 8003954:	0800914c 	.word	0x0800914c
 8003958:	20000998 	.word	0x20000998
 800395c:	200007e8 	.word	0x200007e8
 8003960:	08009158 	.word	0x08009158
 8003964:	200008c0 	.word	0x200008c0
 8003968:	08009164 	.word	0x08009164
 800396c:	20000878 	.word	0x20000878
 8003970:	08009174 	.word	0x08009174
 8003974:	2000089c 	.word	0x2000089c
 8003978:	200009bc 	.word	0x200009bc
 800397c:	0800917c 	.word	0x0800917c
 8003980:	08009184 	.word	0x08009184
 8003984:	200009e0 	.word	0x200009e0
 8003988:	0800918c 	.word	0x0800918c
 800398c:	20000a04 	.word	0x20000a04
 8003990:	0800919c 	.word	0x0800919c
 8003994:	601a      	str	r2, [r3, #0]
	items_menu_2[0].down = &items_menu_2[1];
 8003996:	4b8c      	ldr	r3, [pc, #560]	; (8003bc8 <Menu_Init+0x4e0>)
 8003998:	4a8c      	ldr	r2, [pc, #560]	; (8003bcc <Menu_Init+0x4e4>)
 800399a:	605a      	str	r2, [r3, #4]
	items_menu_2[0].child = 0;
 800399c:	4b8a      	ldr	r3, [pc, #552]	; (8003bc8 <Menu_Init+0x4e0>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
	items_menu_2[0].parent = &items[0]; 	//&items[0];    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80039a2:	4b89      	ldr	r3, [pc, #548]	; (8003bc8 <Menu_Init+0x4e0>)
 80039a4:	4a8a      	ldr	r2, [pc, #552]	; (8003bd0 <Menu_Init+0x4e8>)
 80039a6:	60da      	str	r2, [r3, #12]
	items_menu_2[0].id = 1;
 80039a8:	4b87      	ldr	r3, [pc, #540]	; (8003bc8 <Menu_Init+0x4e0>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	741a      	strb	r2, [r3, #16]
	items_menu_2[0].name = "NRF RX";						// Name of item
 80039ae:	4b86      	ldr	r3, [pc, #536]	; (8003bc8 <Menu_Init+0x4e0>)
 80039b0:	4a88      	ldr	r2, [pc, #544]	; (8003bd4 <Menu_Init+0x4ec>)
 80039b2:	615a      	str	r2, [r3, #20]
	items_menu_2[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80039b4:	4a84      	ldr	r2, [pc, #528]	; (8003bc8 <Menu_Init+0x4e0>)
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	6193      	str	r3, [r2, #24]
	items_menu_2[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80039ba:	4a83      	ldr	r2, [pc, #524]	; (8003bc8 <Menu_Init+0x4e0>)
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	61d3      	str	r3, [r2, #28]
	items_menu_2[0].makeAction = p_nrf_rx_mode;
 80039c0:	4a81      	ldr	r2, [pc, #516]	; (8003bc8 <Menu_Init+0x4e0>)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6213      	str	r3, [r2, #32]

	items_menu_2[1].up = &items_menu_2[0];
 80039c6:	4b80      	ldr	r3, [pc, #512]	; (8003bc8 <Menu_Init+0x4e0>)
 80039c8:	4a7f      	ldr	r2, [pc, #508]	; (8003bc8 <Menu_Init+0x4e0>)
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2[1].down = &items_menu_2[2];
 80039cc:	4b7e      	ldr	r3, [pc, #504]	; (8003bc8 <Menu_Init+0x4e0>)
 80039ce:	4a82      	ldr	r2, [pc, #520]	; (8003bd8 <Menu_Init+0x4f0>)
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2[1].child = &items_menu_2_1[0];
 80039d2:	4b7d      	ldr	r3, [pc, #500]	; (8003bc8 <Menu_Init+0x4e0>)
 80039d4:	4a81      	ldr	r2, [pc, #516]	; (8003bdc <Menu_Init+0x4f4>)
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2[1].parent = &items[0];
 80039d8:	4b7b      	ldr	r3, [pc, #492]	; (8003bc8 <Menu_Init+0x4e0>)
 80039da:	4a7d      	ldr	r2, [pc, #500]	; (8003bd0 <Menu_Init+0x4e8>)
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2[1].id = 2;
 80039de:	4b7a      	ldr	r3, [pc, #488]	; (8003bc8 <Menu_Init+0x4e0>)
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2[1].name = "NRF TX";						// Name of item
 80039e6:	4b78      	ldr	r3, [pc, #480]	; (8003bc8 <Menu_Init+0x4e0>)
 80039e8:	4a7d      	ldr	r2, [pc, #500]	; (8003be0 <Menu_Init+0x4f8>)
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2[1].updateScreen_up = p_print_rows_on_oled_if_up;
 80039ec:	4a76      	ldr	r2, [pc, #472]	; (8003bc8 <Menu_Init+0x4e0>)
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80039f2:	4a75      	ldr	r2, [pc, #468]	; (8003bc8 <Menu_Init+0x4e0>)
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2[1].makeAction = 0;
 80039f8:	4b73      	ldr	r3, [pc, #460]	; (8003bc8 <Menu_Init+0x4e0>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44

	items_menu_2[2].up = &items_menu_2[1];
 80039fe:	4b72      	ldr	r3, [pc, #456]	; (8003bc8 <Menu_Init+0x4e0>)
 8003a00:	4a72      	ldr	r2, [pc, #456]	; (8003bcc <Menu_Init+0x4e4>)
 8003a02:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2[2].down = 0;
 8003a04:	4b70      	ldr	r3, [pc, #448]	; (8003bc8 <Menu_Init+0x4e0>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2[2].child = 0;
 8003a0a:	4b6f      	ldr	r3, [pc, #444]	; (8003bc8 <Menu_Init+0x4e0>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2[2].parent = &items[0];
 8003a10:	4b6d      	ldr	r3, [pc, #436]	; (8003bc8 <Menu_Init+0x4e0>)
 8003a12:	4a6f      	ldr	r2, [pc, #444]	; (8003bd0 <Menu_Init+0x4e8>)
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2[2].id = 3;
 8003a16:	4b6c      	ldr	r3, [pc, #432]	; (8003bc8 <Menu_Init+0x4e0>)
 8003a18:	2203      	movs	r2, #3
 8003a1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2[2].name = "EXIT";						// Name of item
 8003a1e:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <Menu_Init+0x4e0>)
 8003a20:	4a70      	ldr	r2, [pc, #448]	; (8003be4 <Menu_Init+0x4fc>)
 8003a22:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8003a24:	4a68      	ldr	r2, [pc, #416]	; (8003bc8 <Menu_Init+0x4e0>)
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8003a2a:	4a67      	ldr	r2, [pc, #412]	; (8003bc8 <Menu_Init+0x4e0>)
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2[2].makeAction = p_return_from_menu;
 8003a30:	4a65      	ldr	r2, [pc, #404]	; (8003bc8 <Menu_Init+0x4e0>)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	6693      	str	r3, [r2, #104]	; 0x68

	// NRF TX menu
	items_menu_2_1[0].up = 0;
 8003a36:	4b69      	ldr	r3, [pc, #420]	; (8003bdc <Menu_Init+0x4f4>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
	items_menu_2_1[0].down = &items_menu_2_1[1];
 8003a3c:	4b67      	ldr	r3, [pc, #412]	; (8003bdc <Menu_Init+0x4f4>)
 8003a3e:	4a6a      	ldr	r2, [pc, #424]	; (8003be8 <Menu_Init+0x500>)
 8003a40:	605a      	str	r2, [r3, #4]
	items_menu_2_1[0].child = 0;
 8003a42:	4b66      	ldr	r3, [pc, #408]	; (8003bdc <Menu_Init+0x4f4>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	609a      	str	r2, [r3, #8]
	items_menu_2_1[0].parent = &items_menu_2[0];
 8003a48:	4b64      	ldr	r3, [pc, #400]	; (8003bdc <Menu_Init+0x4f4>)
 8003a4a:	4a5f      	ldr	r2, [pc, #380]	; (8003bc8 <Menu_Init+0x4e0>)
 8003a4c:	60da      	str	r2, [r3, #12]
	items_menu_2_1[0].id = 1;
 8003a4e:	4b63      	ldr	r3, [pc, #396]	; (8003bdc <Menu_Init+0x4f4>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	741a      	strb	r2, [r3, #16]
	items_menu_2_1[0].name = "TX Test data";
 8003a54:	4b61      	ldr	r3, [pc, #388]	; (8003bdc <Menu_Init+0x4f4>)
 8003a56:	4a65      	ldr	r2, [pc, #404]	; (8003bec <Menu_Init+0x504>)
 8003a58:	615a      	str	r2, [r3, #20]
	items_menu_2_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8003a5a:	4a60      	ldr	r2, [pc, #384]	; (8003bdc <Menu_Init+0x4f4>)
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	6193      	str	r3, [r2, #24]
	items_menu_2_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8003a60:	4a5e      	ldr	r2, [pc, #376]	; (8003bdc <Menu_Init+0x4f4>)
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	61d3      	str	r3, [r2, #28]
	items_menu_2_1[0].makeAction = p_nrf_tx_mode_send_test_number;
 8003a66:	4a5d      	ldr	r2, [pc, #372]	; (8003bdc <Menu_Init+0x4f4>)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	6213      	str	r3, [r2, #32]

	items_menu_2_1[1].up = &items_menu_2_1[0];
 8003a6c:	4b5b      	ldr	r3, [pc, #364]	; (8003bdc <Menu_Init+0x4f4>)
 8003a6e:	4a5b      	ldr	r2, [pc, #364]	; (8003bdc <Menu_Init+0x4f4>)
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2_1[1].down = &items_menu_2_1[2];
 8003a72:	4b5a      	ldr	r3, [pc, #360]	; (8003bdc <Menu_Init+0x4f4>)
 8003a74:	4a5e      	ldr	r2, [pc, #376]	; (8003bf0 <Menu_Init+0x508>)
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2_1[1].child = 0;
 8003a78:	4b58      	ldr	r3, [pc, #352]	; (8003bdc <Menu_Init+0x4f4>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2_1[1].parent = &items_menu_2[0];
 8003a7e:	4b57      	ldr	r3, [pc, #348]	; (8003bdc <Menu_Init+0x4f4>)
 8003a80:	4a51      	ldr	r2, [pc, #324]	; (8003bc8 <Menu_Init+0x4e0>)
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2_1[1].id = 2;
 8003a84:	4b55      	ldr	r3, [pc, #340]	; (8003bdc <Menu_Init+0x4f4>)
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2_1[1].name = "TX T & H";
 8003a8c:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <Menu_Init+0x4f4>)
 8003a8e:	4a59      	ldr	r2, [pc, #356]	; (8003bf4 <Menu_Init+0x50c>)
 8003a90:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8003a92:	4a52      	ldr	r2, [pc, #328]	; (8003bdc <Menu_Init+0x4f4>)
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8003a98:	4a50      	ldr	r2, [pc, #320]	; (8003bdc <Menu_Init+0x4f4>)
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2_1[1].makeAction = p_nrf_tx_mode_send_T_and_H;
 8003a9e:	4a4f      	ldr	r2, [pc, #316]	; (8003bdc <Menu_Init+0x4f4>)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_2_1[2].up = &items_menu_2_1[1];
 8003aa4:	4b4d      	ldr	r3, [pc, #308]	; (8003bdc <Menu_Init+0x4f4>)
 8003aa6:	4a50      	ldr	r2, [pc, #320]	; (8003be8 <Menu_Init+0x500>)
 8003aa8:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2_1[2].down = 0;
 8003aaa:	4b4c      	ldr	r3, [pc, #304]	; (8003bdc <Menu_Init+0x4f4>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2_1[2].child = 0;
 8003ab0:	4b4a      	ldr	r3, [pc, #296]	; (8003bdc <Menu_Init+0x4f4>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2_1[2].parent = &items_menu_2[0];
 8003ab6:	4b49      	ldr	r3, [pc, #292]	; (8003bdc <Menu_Init+0x4f4>)
 8003ab8:	4a43      	ldr	r2, [pc, #268]	; (8003bc8 <Menu_Init+0x4e0>)
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2_1[2].id = 3;
 8003abc:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <Menu_Init+0x4f4>)
 8003abe:	2203      	movs	r2, #3
 8003ac0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2_1[2].name = "EXIT";
 8003ac4:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <Menu_Init+0x4f4>)
 8003ac6:	4a47      	ldr	r2, [pc, #284]	; (8003be4 <Menu_Init+0x4fc>)
 8003ac8:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8003aca:	4a44      	ldr	r2, [pc, #272]	; (8003bdc <Menu_Init+0x4f4>)
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ace:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8003ad0:	4a42      	ldr	r2, [pc, #264]	; (8003bdc <Menu_Init+0x4f4>)
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2_1[2].makeAction = p_return_from_menu;
 8003ad6:	4a41      	ldr	r2, [pc, #260]	; (8003bdc <Menu_Init+0x4f4>)
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating sensor menu
	items_menu_3[0].up = 0;
 8003adc:	4b46      	ldr	r3, [pc, #280]	; (8003bf8 <Menu_Init+0x510>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
	items_menu_3[0].down = &items_menu_3[1];
 8003ae2:	4b45      	ldr	r3, [pc, #276]	; (8003bf8 <Menu_Init+0x510>)
 8003ae4:	4a45      	ldr	r2, [pc, #276]	; (8003bfc <Menu_Init+0x514>)
 8003ae6:	605a      	str	r2, [r3, #4]
	items_menu_3[0].child = 0;
 8003ae8:	4b43      	ldr	r3, [pc, #268]	; (8003bf8 <Menu_Init+0x510>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
	items_menu_3[0].parent = &items[2];
 8003aee:	4b42      	ldr	r3, [pc, #264]	; (8003bf8 <Menu_Init+0x510>)
 8003af0:	4a43      	ldr	r2, [pc, #268]	; (8003c00 <Menu_Init+0x518>)
 8003af2:	60da      	str	r2, [r3, #12]
	items_menu_3[0].id = 1;
 8003af4:	4b40      	ldr	r3, [pc, #256]	; (8003bf8 <Menu_Init+0x510>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	741a      	strb	r2, [r3, #16]
	items_menu_3[0].name = "Measure T & H";						// Name of item
 8003afa:	4b3f      	ldr	r3, [pc, #252]	; (8003bf8 <Menu_Init+0x510>)
 8003afc:	4a41      	ldr	r2, [pc, #260]	; (8003c04 <Menu_Init+0x51c>)
 8003afe:	615a      	str	r2, [r3, #20]
	items_menu_3[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8003b00:	4a3d      	ldr	r2, [pc, #244]	; (8003bf8 <Menu_Init+0x510>)
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	6193      	str	r3, [r2, #24]
	items_menu_3[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8003b06:	4a3c      	ldr	r2, [pc, #240]	; (8003bf8 <Menu_Init+0x510>)
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	61d3      	str	r3, [r2, #28]
	items_menu_3[0].makeAction = p_am2302_measure;
 8003b0c:	4a3a      	ldr	r2, [pc, #232]	; (8003bf8 <Menu_Init+0x510>)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6213      	str	r3, [r2, #32]

	items_menu_3[1].up = &items_menu_3[0];
 8003b12:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <Menu_Init+0x510>)
 8003b14:	4a38      	ldr	r2, [pc, #224]	; (8003bf8 <Menu_Init+0x510>)
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_3[1].down = &items_menu_3[2];
 8003b18:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <Menu_Init+0x510>)
 8003b1a:	4a3b      	ldr	r2, [pc, #236]	; (8003c08 <Menu_Init+0x520>)
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_3[1].child = 0;
 8003b1e:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <Menu_Init+0x510>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_3[1].parent = &items[2];
 8003b24:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <Menu_Init+0x510>)
 8003b26:	4a36      	ldr	r2, [pc, #216]	; (8003c00 <Menu_Init+0x518>)
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_3[1].id = 2;
 8003b2a:	4b33      	ldr	r3, [pc, #204]	; (8003bf8 <Menu_Init+0x510>)
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_3[1].name = "Per Meas: ON";						// Name of item
 8003b32:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <Menu_Init+0x510>)
 8003b34:	4a35      	ldr	r2, [pc, #212]	; (8003c0c <Menu_Init+0x524>)
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_3[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8003b38:	4a2f      	ldr	r2, [pc, #188]	; (8003bf8 <Menu_Init+0x510>)
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_3[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8003b3e:	4a2e      	ldr	r2, [pc, #184]	; (8003bf8 <Menu_Init+0x510>)
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_3[1].makeAction = p_periodic_measurement_am2302_on;
 8003b44:	4a2c      	ldr	r2, [pc, #176]	; (8003bf8 <Menu_Init+0x510>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_3[2].up = &items_menu_3[1];
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <Menu_Init+0x510>)
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <Menu_Init+0x514>)
 8003b4e:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_3[2].down = &items_menu_3[3];
 8003b50:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <Menu_Init+0x510>)
 8003b52:	4a2f      	ldr	r2, [pc, #188]	; (8003c10 <Menu_Init+0x528>)
 8003b54:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_3[2].child = 0;
 8003b56:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <Menu_Init+0x510>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_3[2].parent = &items[2];
 8003b5c:	4b26      	ldr	r3, [pc, #152]	; (8003bf8 <Menu_Init+0x510>)
 8003b5e:	4a28      	ldr	r2, [pc, #160]	; (8003c00 <Menu_Init+0x518>)
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_3[2].id = 3;
 8003b62:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <Menu_Init+0x510>)
 8003b64:	2203      	movs	r2, #3
 8003b66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_3[2].name = "Per Meas: OFF";						// Name of item
 8003b6a:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <Menu_Init+0x510>)
 8003b6c:	4a29      	ldr	r2, [pc, #164]	; (8003c14 <Menu_Init+0x52c>)
 8003b6e:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_3[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8003b70:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <Menu_Init+0x510>)
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_3[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8003b76:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <Menu_Init+0x510>)
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_3[2].makeAction = p_periodic_measurement_am2302_off;
 8003b7c:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <Menu_Init+0x510>)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6693      	str	r3, [r2, #104]	; 0x68

	items_menu_3[3].up = &items_menu_3[2];
 8003b82:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <Menu_Init+0x510>)
 8003b84:	4a20      	ldr	r2, [pc, #128]	; (8003c08 <Menu_Init+0x520>)
 8003b86:	66da      	str	r2, [r3, #108]	; 0x6c
	items_menu_3[3].down = 0;
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <Menu_Init+0x510>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	671a      	str	r2, [r3, #112]	; 0x70
	items_menu_3[3].child = 0;
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <Menu_Init+0x510>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	675a      	str	r2, [r3, #116]	; 0x74
	items_menu_3[3].parent = &items[2];
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <Menu_Init+0x510>)
 8003b96:	4a1a      	ldr	r2, [pc, #104]	; (8003c00 <Menu_Init+0x518>)
 8003b98:	679a      	str	r2, [r3, #120]	; 0x78
	items_menu_3[3].id = 4;
 8003b9a:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <Menu_Init+0x510>)
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items_menu_3[3].name = "EXIT";						// Name of item
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <Menu_Init+0x510>)
 8003ba4:	4a0f      	ldr	r2, [pc, #60]	; (8003be4 <Menu_Init+0x4fc>)
 8003ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items_menu_3[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8003baa:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <Menu_Init+0x510>)
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items_menu_3[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8003bb2:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <Menu_Init+0x510>)
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items_menu_3[3].makeAction = p_return_from_menu;
 8003bba:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <Menu_Init+0x510>)
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8003bc2:	bf00      	nop
 8003bc4:	3734      	adds	r7, #52	; 0x34
 8003bc6:	e027      	b.n	8003c18 <Menu_Init+0x530>
 8003bc8:	200007e8 	.word	0x200007e8
 8003bcc:	2000080c 	.word	0x2000080c
 8003bd0:	20000950 	.word	0x20000950
 8003bd4:	080091a8 	.word	0x080091a8
 8003bd8:	20000830 	.word	0x20000830
 8003bdc:	2000077c 	.word	0x2000077c
 8003be0:	080091b0 	.word	0x080091b0
 8003be4:	08009184 	.word	0x08009184
 8003be8:	200007a0 	.word	0x200007a0
 8003bec:	0800918c 	.word	0x0800918c
 8003bf0:	200007c4 	.word	0x200007c4
 8003bf4:	0800919c 	.word	0x0800919c
 8003bf8:	200008c0 	.word	0x200008c0
 8003bfc:	200008e4 	.word	0x200008e4
 8003c00:	20000998 	.word	0x20000998
 8003c04:	080091b8 	.word	0x080091b8
 8003c08:	20000908 	.word	0x20000908
 8003c0c:	080091c8 	.word	0x080091c8
 8003c10:	2000092c 	.word	0x2000092c
 8003c14:	080091d8 	.word	0x080091d8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop

08003c20 <menu>:

// ----------------------------------------------------------------------------------------
void menu(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	Menu_Init();									// Init all structures
 8003c24:	f7ff fd60 	bl	80036e8 <Menu_Init>
	print_menu_init();								// Print start menu and scrolingbar
 8003c28:	f000 fa74 	bl	8004114 <print_menu_init>
	HAL_Delay(10);
 8003c2c:	200a      	movs	r0, #10
 8003c2e:	f001 fa03 	bl	8005038 <HAL_Delay>

	while(1)
	{
		if(button_processed_status == 1)			// If buttons was pressed
 8003c32:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <menu+0x50>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d1fb      	bne.n	8003c32 <menu+0x12>
		{

			button_processed_status = 1;
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <menu+0x50>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
			switch (button_status)
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <menu+0x54>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d00c      	beq.n	8003c62 <menu+0x42>
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	dc0d      	bgt.n	8003c68 <menu+0x48>
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d002      	beq.n	8003c56 <menu+0x36>
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d003      	beq.n	8003c5c <menu+0x3c>
 8003c54:	e008      	b.n	8003c68 <menu+0x48>
			{
				case BOTTON_UP:
					up();
 8003c56:	f000 f80f 	bl	8003c78 <up>
					break;
 8003c5a:	e005      	b.n	8003c68 <menu+0x48>
				case BUTTON_ENTER:
					enter();
 8003c5c:	f000 f840 	bl	8003ce0 <enter>
					break;
 8003c60:	e002      	b.n	8003c68 <menu+0x48>
				case BUTTON_DOWN:
					down();
 8003c62:	f000 f823 	bl	8003cac <down>
					break;
 8003c66:	bf00      	nop
			}
			button_status = BOTTON_DOESENT_PRESS;
 8003c68:	4b02      	ldr	r3, [pc, #8]	; (8003c74 <menu+0x54>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]
		if(button_processed_status == 1)			// If buttons was pressed
 8003c6e:	e7e0      	b.n	8003c32 <menu+0x12>
 8003c70:	20000028 	.word	0x20000028
 8003c74:	200005a1 	.word	0x200005a1

08003c78 <up>:
		}
	}
}
// ----------------------------------------------------------------------------------------
void up(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
	if (currentItem->up)
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <up+0x30>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <up+0x2a>
	{
	    currentItem = currentItem->up;
 8003c86:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <up+0x30>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <up+0x30>)
 8003c8e:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_up )
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <up+0x30>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <up+0x2a>
	    {
	        currentItem->updateScreen_up();
 8003c9a:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <up+0x30>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	4798      	blx	r3
	    }
	}
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000030 	.word	0x20000030

08003cac <down>:
// ----------------------------------------------------------------------------------------
void down(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
	if (currentItem->down)
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <down+0x30>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00d      	beq.n	8003cd6 <down+0x2a>
	{
	    currentItem = currentItem->down;
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <down+0x30>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4a06      	ldr	r2, [pc, #24]	; (8003cdc <down+0x30>)
 8003cc2:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_down )
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <down+0x30>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <down+0x2a>
	    {
	        currentItem->updateScreen_down();
 8003cce:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <down+0x30>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	4798      	blx	r3
	    }
	}
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000030 	.word	0x20000030

08003ce0 <enter>:
// ----------------------------------------------------------------------------------------
void enter(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
	bool status = true;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	71fb      	strb	r3, [r7, #7]
	// Якщо є функція "makeAction" тоді виконати її
	if (currentItem->makeAction)
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <enter+0x48>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <enter+0x20>
	{
		currentItem->makeAction();
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <enter+0x48>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	4798      	blx	r3
		status = false;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	71fb      	strb	r3, [r7, #7]
	}
	// Якщо є перехід на  "child" і "makeAction" не була виконана, тоді виконати перехід
	if((currentItem->child) && (status == true))
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <enter+0x48>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <enter+0x3e>
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d006      	beq.n	8003d1e <enter+0x3e>
	{
		currentItem = currentItem->child;
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <enter+0x48>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <enter+0x48>)
 8003d18:	6013      	str	r3, [r2, #0]
		print_menu_items();
 8003d1a:	f000 fa91 	bl	8004240 <print_menu_items>
	}
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000030 	.word	0x20000030

08003d2c <scroll_bar>:
// ----------------------------------------------------------------------------------------
/*
This function print scrollbar on right part of OLED.
 */
void scroll_bar(void)
{
 8003d2c:	b590      	push	{r4, r7, lr}
 8003d2e:	b089      	sub	sp, #36	; 0x24
 8003d30:	af02      	add	r7, sp, #8
	// Work size scrollbar
	uint16_t start_x_scrollbar = 124;
 8003d32:	237c      	movs	r3, #124	; 0x7c
 8003d34:	81fb      	strh	r3, [r7, #14]
	uint16_t start_y_scrollbar = 17;
 8003d36:	2311      	movs	r3, #17
 8003d38:	81bb      	strh	r3, [r7, #12]
	uint16_t active_width = 3;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	817b      	strh	r3, [r7, #10]
	uint16_t lenght_all_scrollbar = 48;
 8003d3e:	2330      	movs	r3, #48	; 0x30
 8003d40:	813b      	strh	r3, [r7, #8]

	uint8_t menu_items_counter = 1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	75fb      	strb	r3, [r7, #23]
	// 1. Скопіювати показник на меню в буффер.
	// 2. Піднятися до першого елемента меню.
	// 3. Опускатися вниз до останнього пункту меню і інкрементувати лічильник елементів меню.
	// 4. Використати лічильник пунктів меню для вираховування довжини полоси прокрутки і її координат.

	MenuItem_t * currentItem_buff = currentItem;
 8003d46:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <scroll_bar+0xe4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	613b      	str	r3, [r7, #16]

	if ((currentItem_buff -> up) != 0)							// Step up if existing up
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d006      	beq.n	8003d62 <scroll_bar+0x36>
	{
		do{
			currentItem_buff = currentItem_buff -> up;			// Step up to the top of menu
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	613b      	str	r3, [r7, #16]
		}
		while ((currentItem_buff -> up) != 0);					// If the top of item doesen't found
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f8      	bne.n	8003d54 <scroll_bar+0x28>
	}

	if ((currentItem_buff -> up) == 0)							// If found top of menu item
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <scroll_bar+0x52>
	{
		do{
			currentItem_buff = currentItem_buff -> down;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	613b      	str	r3, [r7, #16]
			menu_items_counter++;								// Count how many list on menu
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	3301      	adds	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
		}
		while ((currentItem_buff -> down) != 0);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f5      	bne.n	8003d6a <scroll_bar+0x3e>
	}
	 // Очистити частину керану де є скролбар
	ssd1306FillRect(start_x_scrollbar, start_y_scrollbar, active_width, lenght_all_scrollbar - 2, Black);
 8003d7e:	89fb      	ldrh	r3, [r7, #14]
 8003d80:	b2d8      	uxtb	r0, r3
 8003d82:	89bb      	ldrh	r3, [r7, #12]
 8003d84:	b2d9      	uxtb	r1, r3
 8003d86:	897b      	ldrh	r3, [r7, #10]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	893b      	ldrh	r3, [r7, #8]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	3b02      	subs	r3, #2
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2400      	movs	r4, #0
 8003d94:	9400      	str	r4, [sp, #0]
 8003d96:	f7fe fc7a 	bl	800268e <ssd1306FillRect>

	// Вивести подовгастий квадрат на край екрану
	ssd1306_DrawRectangle(start_x_scrollbar - 1, start_y_scrollbar - 1, start_x_scrollbar + active_width, 63, White);
 8003d9a:	89fb      	ldrh	r3, [r7, #14]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b2d8      	uxtb	r0, r3
 8003da2:	89bb      	ldrh	r3, [r7, #12]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b2d9      	uxtb	r1, r3
 8003daa:	89fb      	ldrh	r3, [r7, #14]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	897b      	ldrh	r3, [r7, #10]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	2301      	movs	r3, #1
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	233f      	movs	r3, #63	; 0x3f
 8003dbc:	f7fe fc30 	bl	8002620 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8003dc0:	f7fe fa74 	bl	80022ac <ssd1306_UpdateScreen>

	 // Print scroling line
	int id_for_line = currentItem -> id;				// Скопіювати порядковий номер меню (Для того щоб взнати на якому пункті меню зараз стоїмо)
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <scroll_bar+0xe4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	7c1b      	ldrb	r3, [r3, #16]
 8003dca:	607b      	str	r3, [r7, #4]
	// Print scroling line
	uint16_t line_lenght = (lenght_all_scrollbar/menu_items_counter + 1);					   	// Довжина лінії яка відповідає одному меню
 8003dcc:	893a      	ldrh	r2, [r7, #8]
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	807b      	strh	r3, [r7, #2]
	uint16_t start_lenght = 16 + ((id_for_line - 1)*line_lenght);								// Початок лінії
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	887a      	ldrh	r2, [r7, #2]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3310      	adds	r3, #16
 8003dea:	803b      	strh	r3, [r7, #0]
	// Print active scrollbar part (line)
	ssd1306FillRect(start_x_scrollbar, start_lenght, active_width, line_lenght, White);
 8003dec:	89fb      	ldrh	r3, [r7, #14]
 8003dee:	b2d8      	uxtb	r0, r3
 8003df0:	883b      	ldrh	r3, [r7, #0]
 8003df2:	b2d9      	uxtb	r1, r3
 8003df4:	897b      	ldrh	r3, [r7, #10]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	887b      	ldrh	r3, [r7, #2]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2401      	movs	r4, #1
 8003dfe:	9400      	str	r4, [sp, #0]
 8003e00:	f7fe fc45 	bl	800268e <ssd1306FillRect>

	ssd1306_UpdateScreen();
 8003e04:	f7fe fa52 	bl	80022ac <ssd1306_UpdateScreen>
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd90      	pop	{r4, r7, pc}
 8003e10:	20000030 	.word	0x20000030

08003e14 <print_rectangle_on_head>:
// ----------------------------------------------------------------------------------------
void print_rectangle_on_head(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(0, 0, 127 , 15, White);
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	230f      	movs	r3, #15
 8003e20:	227f      	movs	r2, #127	; 0x7f
 8003e22:	2100      	movs	r1, #0
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fe fbfb 	bl	8002620 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8003e2a:	f7fe fa3f 	bl	80022ac <ssd1306_UpdateScreen>
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <clear_menu_items>:
// ----------------------------------------------------------------------------------------
// Clear some menu items.
void clear_menu_items (bool first, bool second, bool third, bool fourth)
{
 8003e34:	b590      	push	{r4, r7, lr}
 8003e36:	b089      	sub	sp, #36	; 0x24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	4611      	mov	r1, r2
 8003e40:	461a      	mov	r2, r3
 8003e42:	4623      	mov	r3, r4
 8003e44:	71fb      	strb	r3, [r7, #7]
 8003e46:	4603      	mov	r3, r0
 8003e48:	71bb      	strb	r3, [r7, #6]
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	717b      	strb	r3, [r7, #5]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	713b      	strb	r3, [r7, #4]
	uint8_t start_row_x = 15;
 8003e52:	230f      	movs	r3, #15
 8003e54:	77fb      	strb	r3, [r7, #31]
	char str[16] = "               ";   						// Must be 15
 8003e56:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <clear_menu_items+0xcc>)
 8003e58:	f107 040c 	add.w	r4, r7, #12
 8003e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(first == true)
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00e      	beq.n	8003e86 <clear_menu_items+0x52>
	{
		ssd1306_SetCursor(start_row_x, first_menu_row);
 8003e68:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <clear_menu_items+0xd0>)
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	7ffb      	ldrb	r3, [r7, #31]
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe fb50 	bl	8002518 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003e78:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <clear_menu_items+0xd4>)
 8003e7a:	f107 000c 	add.w	r0, r7, #12
 8003e7e:	2301      	movs	r3, #1
 8003e80:	ca06      	ldmia	r2, {r1, r2}
 8003e82:	f7fe fb23 	bl	80024cc <ssd1306_WriteString>
	}
	if(second == true)
 8003e86:	79bb      	ldrb	r3, [r7, #6]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00e      	beq.n	8003eaa <clear_menu_items+0x76>
	{
		ssd1306_SetCursor(start_row_x, second_menu_row);
 8003e8c:	4b1f      	ldr	r3, [pc, #124]	; (8003f0c <clear_menu_items+0xd8>)
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	7ffb      	ldrb	r3, [r7, #31]
 8003e94:	4611      	mov	r1, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe fb3e 	bl	8002518 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003e9c:	4a1a      	ldr	r2, [pc, #104]	; (8003f08 <clear_menu_items+0xd4>)
 8003e9e:	f107 000c 	add.w	r0, r7, #12
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	ca06      	ldmia	r2, {r1, r2}
 8003ea6:	f7fe fb11 	bl	80024cc <ssd1306_WriteString>
	}
	if(first == true)
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <clear_menu_items+0x9a>
	{
		ssd1306_SetCursor(start_row_x, third_menu_row);
 8003eb0:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <clear_menu_items+0xdc>)
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	7ffb      	ldrb	r3, [r7, #31]
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe fb2c 	bl	8002518 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003ec0:	4a11      	ldr	r2, [pc, #68]	; (8003f08 <clear_menu_items+0xd4>)
 8003ec2:	f107 000c 	add.w	r0, r7, #12
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	ca06      	ldmia	r2, {r1, r2}
 8003eca:	f7fe faff 	bl	80024cc <ssd1306_WriteString>
	}
	if(fourth == true)
 8003ece:	793b      	ldrb	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00e      	beq.n	8003ef2 <clear_menu_items+0xbe>
	{
		ssd1306_SetCursor(start_row_x, fourth_menu_row);
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <clear_menu_items+0xe0>)
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	7ffb      	ldrb	r3, [r7, #31]
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fb1a 	bl	8002518 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003ee4:	4a08      	ldr	r2, [pc, #32]	; (8003f08 <clear_menu_items+0xd4>)
 8003ee6:	f107 000c 	add.w	r0, r7, #12
 8003eea:	2301      	movs	r3, #1
 8003eec:	ca06      	ldmia	r2, {r1, r2}
 8003eee:	f7fe faed 	bl	80024cc <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8003ef2:	f7fe f9db 	bl	80022ac <ssd1306_UpdateScreen>
}
 8003ef6:	bf00      	nop
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd90      	pop	{r4, r7, pc}
 8003efe:	bf00      	nop
 8003f00:	080091e8 	.word	0x080091e8
 8003f04:	20000038 	.word	0x20000038
 8003f08:	2000001c 	.word	0x2000001c
 8003f0c:	2000003a 	.word	0x2000003a
 8003f10:	2000003c 	.word	0x2000003c
 8003f14:	2000003e 	.word	0x2000003e

08003f18 <print_rows_on_oled_if_up>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_up(void)								// print text menu items
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8003f1e:	2300      	movs	r3, #0
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
	clear_menu_items (true , true , true , true );
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	2201      	movs	r2, #1
 8003f30:	2101      	movs	r1, #1
 8003f32:	2001      	movs	r0, #1
 8003f34:	f7ff ff7e 	bl	8003e34 <clear_menu_items>
	print_rectangle_on_head();
 8003f38:	f7ff ff6c 	bl	8003e14 <print_rectangle_on_head>
	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8003f3c:	4b2c      	ldr	r3, [pc, #176]	; (8003ff0 <print_rows_on_oled_if_up+0xd8>)
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	4619      	mov	r1, r3
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7fe fae7 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8003f4a:	4a2a      	ldr	r2, [pc, #168]	; (8003ff4 <print_rows_on_oled_if_up+0xdc>)
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	ca06      	ldmia	r2, {r1, r2}
 8003f50:	4829      	ldr	r0, [pc, #164]	; (8003ff8 <print_rows_on_oled_if_up+0xe0>)
 8003f52:	f7fe fabb 	bl	80024cc <ssd1306_WriteString>

	MenuItem_t * currentItem_buff_up = currentItem;				// Create buffer on selected current item pointer.
 8003f56:	4b29      	ldr	r3, [pc, #164]	; (8003ffc <print_rows_on_oled_if_up+0xe4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003f5c:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <print_rows_on_oled_if_up+0xd8>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	74fb      	strb	r3, [r7, #19]
 8003f62:	e035      	b.n	8003fd0 <print_rows_on_oled_if_up+0xb8>
	{
		// Fill in OLED buffer
		// Print number of menu item
		itoa(currentItem_buff_up -> id, str, 10);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	7c1b      	ldrb	r3, [r3, #16]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	463b      	mov	r3, r7
 8003f6c:	220a      	movs	r2, #10
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f004 fbd8 	bl	8008724 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8003f74:	4b22      	ldr	r3, [pc, #136]	; (8004000 <print_rows_on_oled_if_up+0xe8>)
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	7cfa      	ldrb	r2, [r7, #19]
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe faca 	bl	8002518 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003f84:	4a1b      	ldr	r2, [pc, #108]	; (8003ff4 <print_rows_on_oled_if_up+0xdc>)
 8003f86:	4638      	mov	r0, r7
 8003f88:	2301      	movs	r3, #1
 8003f8a:	ca06      	ldmia	r2, {r1, r2}
 8003f8c:	f7fe fa9e 	bl	80024cc <ssd1306_WriteString>

		// Print name of menu item
		strncpy(str, currentItem_buff_up -> name, 15);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	6959      	ldr	r1, [r3, #20]
 8003f94:	463b      	mov	r3, r7
 8003f96:	220f      	movs	r2, #15
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f004 fbfc 	bl	8008796 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8003f9e:	4b19      	ldr	r3, [pc, #100]	; (8004004 <print_rows_on_oled_if_up+0xec>)
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	7cfa      	ldrb	r2, [r7, #19]
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe fab5 	bl	8002518 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003fae:	4a11      	ldr	r2, [pc, #68]	; (8003ff4 <print_rows_on_oled_if_up+0xdc>)
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	ca06      	ldmia	r2, {r1, r2}
 8003fb6:	f7fe fa89 	bl	80024cc <ssd1306_WriteString>

		currentItem_buff_up = currentItem_buff_up -> down;		// Make a step down
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	617b      	str	r3, [r7, #20]

		// Print only existing items
		if(currentItem_buff_up == 0)							// If no next item
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <print_rows_on_oled_if_up+0xc6>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <print_rows_on_oled_if_up+0xf0>)
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	4413      	add	r3, r2
 8003fce:	74fb      	strb	r3, [r7, #19]
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	; (800400c <print_rows_on_oled_if_up+0xf4>)
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d9c3      	bls.n	8003f64 <print_rows_on_oled_if_up+0x4c>
 8003fdc:	e000      	b.n	8003fe0 <print_rows_on_oled_if_up+0xc8>
		{
			break;
 8003fde:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 8003fe0:	f7fe f964 	bl	80022ac <ssd1306_UpdateScreen>
	scroll_bar();
 8003fe4:	f7ff fea2 	bl	8003d2c <scroll_bar>
}
 8003fe8:	bf00      	nop
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000038 	.word	0x20000038
 8003ff4:	2000001c 	.word	0x2000001c
 8003ff8:	20000034 	.word	0x20000034
 8003ffc:	20000030 	.word	0x20000030
 8004000:	20000042 	.word	0x20000042
 8004004:	20000044 	.word	0x20000044
 8004008:	20000040 	.word	0x20000040
 800400c:	2000003e 	.word	0x2000003e

08004010 <print_rows_on_oled_if_down>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_down(void)							// print text menu items
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8004016:	2300      	movs	r3, #0
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	609a      	str	r2, [r3, #8]
	clear_menu_items (true , true , true , true );
 8004024:	2301      	movs	r3, #1
 8004026:	2201      	movs	r2, #1
 8004028:	2101      	movs	r1, #1
 800402a:	2001      	movs	r0, #1
 800402c:	f7ff ff02 	bl	8003e34 <clear_menu_items>
	print_rectangle_on_head();
 8004030:	f7ff fef0 	bl	8003e14 <print_rectangle_on_head>
	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8004034:	4b2f      	ldr	r3, [pc, #188]	; (80040f4 <print_rows_on_oled_if_down+0xe4>)
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	4619      	mov	r1, r3
 800403c:	2000      	movs	r0, #0
 800403e:	f7fe fa6b 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8004042:	4a2d      	ldr	r2, [pc, #180]	; (80040f8 <print_rows_on_oled_if_down+0xe8>)
 8004044:	2301      	movs	r3, #1
 8004046:	ca06      	ldmia	r2, {r1, r2}
 8004048:	482c      	ldr	r0, [pc, #176]	; (80040fc <print_rows_on_oled_if_down+0xec>)
 800404a:	f7fe fa3f 	bl	80024cc <ssd1306_WriteString>

	MenuItem_t * currentItem_buff = currentItem;				// Create buffer on selected current item pointer.
 800404e:	4b2c      	ldr	r3, [pc, #176]	; (8004100 <print_rows_on_oled_if_down+0xf0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <print_rows_on_oled_if_down+0xe4>)
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	74fb      	strb	r3, [r7, #19]
 800405a:	e03b      	b.n	80040d4 <print_rows_on_oled_if_down+0xc4>
	{
		// Fill in OLED buffer
		// Print number of menu item
        itoa(currentItem_buff -> id, str, 10);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	7c1b      	ldrb	r3, [r3, #16]
 8004060:	4618      	mov	r0, r3
 8004062:	463b      	mov	r3, r7
 8004064:	220a      	movs	r2, #10
 8004066:	4619      	mov	r1, r3
 8004068:	f004 fb5c 	bl	8008724 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 800406c:	4b25      	ldr	r3, [pc, #148]	; (8004104 <print_rows_on_oled_if_down+0xf4>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	7cfa      	ldrb	r2, [r7, #19]
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fa4e 	bl	8002518 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800407c:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <print_rows_on_oled_if_down+0xe8>)
 800407e:	4638      	mov	r0, r7
 8004080:	2301      	movs	r3, #1
 8004082:	ca06      	ldmia	r2, {r1, r2}
 8004084:	f7fe fa22 	bl	80024cc <ssd1306_WriteString>

		// Print name of menu item
		memset(str, 0, sizeof(str));
 8004088:	463b      	mov	r3, r7
 800408a:	2210      	movs	r2, #16
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f004 fb4a 	bl	8008728 <memset>
	    strncpy(str, currentItem_buff -> name, 15);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	6959      	ldr	r1, [r3, #20]
 8004098:	463b      	mov	r3, r7
 800409a:	220f      	movs	r2, #15
 800409c:	4618      	mov	r0, r3
 800409e:	f004 fb7a 	bl	8008796 <strncpy>
	    ssd1306_SetCursor(start_print_name_menu_x, row);
 80040a2:	4b19      	ldr	r3, [pc, #100]	; (8004108 <print_rows_on_oled_if_down+0xf8>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	7cfa      	ldrb	r2, [r7, #19]
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe fa33 	bl	8002518 <ssd1306_SetCursor>
	    ssd1306_WriteString(str,  Font_7x10, White);
 80040b2:	4a11      	ldr	r2, [pc, #68]	; (80040f8 <print_rows_on_oled_if_down+0xe8>)
 80040b4:	4638      	mov	r0, r7
 80040b6:	2301      	movs	r3, #1
 80040b8:	ca06      	ldmia	r2, {r1, r2}
 80040ba:	f7fe fa07 	bl	80024cc <ssd1306_WriteString>

	    currentItem_buff = currentItem_buff -> down;			// Make a step down
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	617b      	str	r3, [r7, #20]

	    // Print only existing items
	    if(currentItem_buff == 0)		 						// If no next item
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <print_rows_on_oled_if_down+0xd2>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <print_rows_on_oled_if_down+0xfc>)
 80040cc:	781a      	ldrb	r2, [r3, #0]
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	4413      	add	r3, r2
 80040d2:	74fb      	strb	r3, [r7, #19]
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <print_rows_on_oled_if_down+0x100>)
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d9bd      	bls.n	800405c <print_rows_on_oled_if_down+0x4c>
 80040e0:	e000      	b.n	80040e4 <print_rows_on_oled_if_down+0xd4>
	    {
	    	break;
 80040e2:	bf00      	nop
	    }
	 }
	 ssd1306_UpdateScreen();
 80040e4:	f7fe f8e2 	bl	80022ac <ssd1306_UpdateScreen>
	 scroll_bar();
 80040e8:	f7ff fe20 	bl	8003d2c <scroll_bar>
}
 80040ec:	bf00      	nop
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000038 	.word	0x20000038
 80040f8:	2000001c 	.word	0x2000001c
 80040fc:	20000034 	.word	0x20000034
 8004100:	20000030 	.word	0x20000030
 8004104:	20000042 	.word	0x20000042
 8004108:	20000044 	.word	0x20000044
 800410c:	20000040 	.word	0x20000040
 8004110:	2000003e 	.word	0x2000003e

08004114 <print_menu_init>:
// ----------------------------------------------------------------------------------------
// Print first 4 items of menu (only first time)
void print_menu_init(void)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b089      	sub	sp, #36	; 0x24
 8004118:	af00      	add	r7, sp, #0
	MenuItem_t * currentItem_buff = currentItem;		// Create buffer on selected current item pointer.
 800411a:	4b41      	ldr	r3, [pc, #260]	; (8004220 <print_menu_init+0x10c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	61fb      	str	r3, [r7, #28]
	print_rectangle_on_head();
 8004120:	f7ff fe78 	bl	8003e14 <print_rectangle_on_head>

	// Print ">> MAIN MENU <<" on head of OLED
	char str[20] = ">> MAIN MENU <<";
 8004124:	4b3f      	ldr	r3, [pc, #252]	; (8004224 <print_menu_init+0x110>)
 8004126:	1d3c      	adds	r4, r7, #4
 8004128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800412a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8004132:	2103      	movs	r1, #3
 8004134:	200a      	movs	r0, #10
 8004136:	f7fe f9ef 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800413a:	4a3b      	ldr	r2, [pc, #236]	; (8004228 <print_menu_init+0x114>)
 800413c:	1d38      	adds	r0, r7, #4
 800413e:	2301      	movs	r3, #1
 8004140:	ca06      	ldmia	r2, {r1, r2}
 8004142:	f7fe f9c3 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004146:	f7fe f8b1 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	2214      	movs	r2, #20
 800414e:	2100      	movs	r1, #0
 8004150:	4618      	mov	r0, r3
 8004152:	f004 fae9 	bl	8008728 <memset>

	for(uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8004156:	4b35      	ldr	r3, [pc, #212]	; (800422c <print_menu_init+0x118>)
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	76fb      	strb	r3, [r7, #27]
 800415c:	e051      	b.n	8004202 <print_menu_init+0xee>
	{
		if(row == first_menu_row)
 800415e:	7efb      	ldrb	r3, [r7, #27]
 8004160:	b29a      	uxth	r2, r3
 8004162:	4b32      	ldr	r3, [pc, #200]	; (800422c <print_menu_init+0x118>)
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d10d      	bne.n	8004186 <print_menu_init+0x72>
		{
			// Print pointer on menu (On top)
			char str_pointer[4] = "->";
 800416a:	f643 632d 	movw	r3, #15917	; 0x3e2d
 800416e:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8004170:	7efb      	ldrb	r3, [r7, #27]
 8004172:	4619      	mov	r1, r3
 8004174:	2000      	movs	r0, #0
 8004176:	f7fe f9cf 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 800417a:	4a2b      	ldr	r2, [pc, #172]	; (8004228 <print_menu_init+0x114>)
 800417c:	4638      	mov	r0, r7
 800417e:	2301      	movs	r3, #1
 8004180:	ca06      	ldmia	r2, {r1, r2}
 8004182:	f7fe f9a3 	bl	80024cc <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	7c1b      	ldrb	r3, [r3, #16]
 800418a:	4618      	mov	r0, r3
 800418c:	1d3b      	adds	r3, r7, #4
 800418e:	220a      	movs	r2, #10
 8004190:	4619      	mov	r1, r3
 8004192:	f004 fac7 	bl	8008724 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8004196:	4b26      	ldr	r3, [pc, #152]	; (8004230 <print_menu_init+0x11c>)
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	7efa      	ldrb	r2, [r7, #27]
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe f9b9 	bl	8002518 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80041a6:	4a20      	ldr	r2, [pc, #128]	; (8004228 <print_menu_init+0x114>)
 80041a8:	1d38      	adds	r0, r7, #4
 80041aa:	2301      	movs	r3, #1
 80041ac:	ca06      	ldmia	r2, {r1, r2}
 80041ae:	f7fe f98d 	bl	80024cc <ssd1306_WriteString>
		memset(str, 0, sizeof(str));
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	2214      	movs	r2, #20
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f004 fab5 	bl	8008728 <memset>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	6959      	ldr	r1, [r3, #20]
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	220f      	movs	r2, #15
 80041c6:	4618      	mov	r0, r3
 80041c8:	f004 fae5 	bl	8008796 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 80041cc:	4b19      	ldr	r3, [pc, #100]	; (8004234 <print_menu_init+0x120>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	7efa      	ldrb	r2, [r7, #27]
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe f99e 	bl	8002518 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80041dc:	4a12      	ldr	r2, [pc, #72]	; (8004228 <print_menu_init+0x114>)
 80041de:	1d38      	adds	r0, r7, #4
 80041e0:	2301      	movs	r3, #1
 80041e2:	ca06      	ldmia	r2, {r1, r2}
 80041e4:	f7fe f972 	bl	80024cc <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 80041e8:	f7fe f860 	bl	80022ac <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00b      	beq.n	8004210 <print_menu_init+0xfc>
	for(uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80041f8:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <print_menu_init+0x124>)
 80041fa:	781a      	ldrb	r2, [r3, #0]
 80041fc:	7efb      	ldrb	r3, [r7, #27]
 80041fe:	4413      	add	r3, r2
 8004200:	76fb      	strb	r3, [r7, #27]
 8004202:	7efb      	ldrb	r3, [r7, #27]
 8004204:	b29a      	uxth	r2, r3
 8004206:	4b0d      	ldr	r3, [pc, #52]	; (800423c <print_menu_init+0x128>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d9a7      	bls.n	800415e <print_menu_init+0x4a>
 800420e:	e000      	b.n	8004212 <print_menu_init+0xfe>
		{
			break;
 8004210:	bf00      	nop
		}
	}
	scroll_bar();
 8004212:	f7ff fd8b 	bl	8003d2c <scroll_bar>
}
 8004216:	bf00      	nop
 8004218:	3724      	adds	r7, #36	; 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd90      	pop	{r4, r7, pc}
 800421e:	bf00      	nop
 8004220:	20000030 	.word	0x20000030
 8004224:	080091f8 	.word	0x080091f8
 8004228:	2000001c 	.word	0x2000001c
 800422c:	20000038 	.word	0x20000038
 8004230:	20000042 	.word	0x20000042
 8004234:	20000044 	.word	0x20000044
 8004238:	20000040 	.word	0x20000040
 800423c:	2000003e 	.word	0x2000003e

08004240 <print_menu_items>:
// ----------------------------------------------------------------------------------------
// print pointers of menu
void print_menu_items(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	f107 0308 	add.w	r3, r7, #8
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	609a      	str	r2, [r3, #8]
	clearn_oled();
 8004256:	f7fd ff79 	bl	800214c <clearn_oled>
	print_rectangle_on_head();
 800425a:	f7ff fddb 	bl	8003e14 <print_rectangle_on_head>

	//Print selected name of menu on top of OLED (in rectangle)
	MenuItem_t * currentItem_buff_parent = currentItem;
 800425e:	4b40      	ldr	r3, [pc, #256]	; (8004360 <print_menu_items+0x120>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	617b      	str	r3, [r7, #20]
	currentItem_buff_parent = currentItem_buff_parent -> parent;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	617b      	str	r3, [r7, #20]

	strncpy(str, currentItem_buff_parent -> name, 15);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	6959      	ldr	r1, [r3, #20]
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	220f      	movs	r2, #15
 8004272:	4618      	mov	r0, r3
 8004274:	f004 fa8f 	bl	8008796 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004278:	2103      	movs	r1, #3
 800427a:	200a      	movs	r0, #10
 800427c:	f7fe f94c 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004280:	4a38      	ldr	r2, [pc, #224]	; (8004364 <print_menu_items+0x124>)
 8004282:	1d38      	adds	r0, r7, #4
 8004284:	2301      	movs	r3, #1
 8004286:	ca06      	ldmia	r2, {r1, r2}
 8004288:	f7fe f920 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800428c:	f7fe f80e 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004290:	1d3b      	adds	r3, r7, #4
 8004292:	2210      	movs	r2, #16
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f004 fa46 	bl	8008728 <memset>

	MenuItem_t * currentItem_buff = currentItem;
 800429c:	4b30      	ldr	r3, [pc, #192]	; (8004360 <print_menu_items+0x120>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	61fb      	str	r3, [r7, #28]

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80042a2:	4b31      	ldr	r3, [pc, #196]	; (8004368 <print_menu_items+0x128>)
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	76fb      	strb	r3, [r7, #27]
 80042a8:	e04b      	b.n	8004342 <print_menu_items+0x102>
	{
		if(row == first_menu_row)
 80042aa:	7efb      	ldrb	r3, [r7, #27]
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <print_menu_items+0x128>)
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d10d      	bne.n	80042d2 <print_menu_items+0x92>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 80042b6:	f643 632d 	movw	r3, #15917	; 0x3e2d
 80042ba:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 80042bc:	7efb      	ldrb	r3, [r7, #27]
 80042be:	4619      	mov	r1, r3
 80042c0:	2000      	movs	r0, #0
 80042c2:	f7fe f929 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 80042c6:	4a27      	ldr	r2, [pc, #156]	; (8004364 <print_menu_items+0x124>)
 80042c8:	4638      	mov	r0, r7
 80042ca:	2301      	movs	r3, #1
 80042cc:	ca06      	ldmia	r2, {r1, r2}
 80042ce:	f7fe f8fd 	bl	80024cc <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	7c1b      	ldrb	r3, [r3, #16]
 80042d6:	4618      	mov	r0, r3
 80042d8:	1d3b      	adds	r3, r7, #4
 80042da:	220a      	movs	r2, #10
 80042dc:	4619      	mov	r1, r3
 80042de:	f004 fa21 	bl	8008724 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80042e2:	4b22      	ldr	r3, [pc, #136]	; (800436c <print_menu_items+0x12c>)
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	7efa      	ldrb	r2, [r7, #27]
 80042ea:	4611      	mov	r1, r2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe f913 	bl	8002518 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80042f2:	4a1c      	ldr	r2, [pc, #112]	; (8004364 <print_menu_items+0x124>)
 80042f4:	1d38      	adds	r0, r7, #4
 80042f6:	2301      	movs	r3, #1
 80042f8:	ca06      	ldmia	r2, {r1, r2}
 80042fa:	f7fe f8e7 	bl	80024cc <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	6959      	ldr	r1, [r3, #20]
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	220f      	movs	r2, #15
 8004306:	4618      	mov	r0, r3
 8004308:	f004 fa45 	bl	8008796 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 800430c:	4b18      	ldr	r3, [pc, #96]	; (8004370 <print_menu_items+0x130>)
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	7efa      	ldrb	r2, [r7, #27]
 8004314:	4611      	mov	r1, r2
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe f8fe 	bl	8002518 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800431c:	4a11      	ldr	r2, [pc, #68]	; (8004364 <print_menu_items+0x124>)
 800431e:	1d38      	adds	r0, r7, #4
 8004320:	2301      	movs	r3, #1
 8004322:	ca06      	ldmia	r2, {r1, r2}
 8004324:	f7fe f8d2 	bl	80024cc <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8004328:	f7fd ffc0 	bl	80022ac <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <print_menu_items+0x110>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8004338:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <print_menu_items+0x134>)
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	7efb      	ldrb	r3, [r7, #27]
 800433e:	4413      	add	r3, r2
 8004340:	76fb      	strb	r3, [r7, #27]
 8004342:	7efb      	ldrb	r3, [r7, #27]
 8004344:	b29a      	uxth	r2, r3
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <print_menu_items+0x138>)
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d9ad      	bls.n	80042aa <print_menu_items+0x6a>
 800434e:	e000      	b.n	8004352 <print_menu_items+0x112>
		{
			break;
 8004350:	bf00      	nop
		}
	}
	scroll_bar();
 8004352:	f7ff fceb 	bl	8003d2c <scroll_bar>
}
 8004356:	bf00      	nop
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000030 	.word	0x20000030
 8004364:	2000001c 	.word	0x2000001c
 8004368:	20000038 	.word	0x20000038
 800436c:	20000042 	.word	0x20000042
 8004370:	20000044 	.word	0x20000044
 8004374:	20000040 	.word	0x20000040
 8004378:	2000003e 	.word	0x2000003e

0800437c <return_from_menu>:
// ----------------------------------------------------------------------------------------
void return_from_menu(void)
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
	currentItem = &items[0];											// Jump to main menu
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <return_from_menu+0x44>)
 8004384:	4a0f      	ldr	r2, [pc, #60]	; (80043c4 <return_from_menu+0x48>)
 8004386:	601a      	str	r2, [r3, #0]
	clearn_oled();
 8004388:	f7fd fee0 	bl	800214c <clearn_oled>

	// Print "MAIN MENU:"
	char str[20] = ">> MAIN MENU <<";
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <return_from_menu+0x4c>)
 800438e:	1d3c      	adds	r4, r7, #4
 8004390:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004392:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 800439a:	2103      	movs	r1, #3
 800439c:	200a      	movs	r0, #10
 800439e:	f7fe f8bb 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80043a2:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <return_from_menu+0x50>)
 80043a4:	1d38      	adds	r0, r7, #4
 80043a6:	2301      	movs	r3, #1
 80043a8:	ca06      	ldmia	r2, {r1, r2}
 80043aa:	f7fe f88f 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80043ae:	f7fd ff7d 	bl	80022ac <ssd1306_UpdateScreen>

	print_menu_init();													// Print all start menu
 80043b2:	f7ff feaf 	bl	8004114 <print_menu_init>
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd90      	pop	{r4, r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000030 	.word	0x20000030
 80043c4:	20000950 	.word	0x20000950
 80043c8:	080091f8 	.word	0x080091f8
 80043cc:	2000001c 	.word	0x2000001c

080043d0 <lora_rx_mode>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// LORA FUNCTIONS
void lora_rx_mode(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
	clearn_oled();
 80043d6:	f7fd feb9 	bl	800214c <clearn_oled>
	print_rectangle_on_head();
 80043da:	f7ff fd1b 	bl	8003e14 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 80043de:	2300      	movs	r3, #0
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	1d3b      	adds	r3, r7, #4
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80043ec:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <lora_rx_mode+0x88>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6959      	ldr	r1, [r3, #20]
 80043f2:	463b      	mov	r3, r7
 80043f4:	220f      	movs	r2, #15
 80043f6:	4618      	mov	r0, r3
 80043f8:	f004 f9cd 	bl	8008796 <strncpy>
	ssd1306_SetCursor(10, 3);
 80043fc:	2103      	movs	r1, #3
 80043fe:	200a      	movs	r0, #10
 8004400:	f7fe f88a 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004404:	4a15      	ldr	r2, [pc, #84]	; (800445c <lora_rx_mode+0x8c>)
 8004406:	4638      	mov	r0, r7
 8004408:	2301      	movs	r3, #1
 800440a:	ca06      	ldmia	r2, {r1, r2}
 800440c:	f7fe f85e 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004410:	f7fd ff4c 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004414:	463b      	mov	r3, r7
 8004416:	2210      	movs	r2, #16
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f004 f984 	bl	8008728 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <lora_rx_mode+0x90>)
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8004426:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <lora_rx_mode+0x94>)
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_RX(true);
 800442c:	2001      	movs	r0, #1
 800442e:	f7fc fb25 	bl	8000a7c <LoRa_RX>
	}while (button_status != BUTTON_ENTER);
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <lora_rx_mode+0x90>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d1f8      	bne.n	800442c <lora_rx_mode+0x5c>
	LoRa_RX(false);
 800443a:	2000      	movs	r0, #0
 800443c:	f7fc fb1e 	bl	8000a7c <LoRa_RX>

	block_interrupt_form_up_and_down_buttons = false;
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <lora_rx_mode+0x94>)
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8004446:	4b04      	ldr	r3, [pc, #16]	; (8004458 <lora_rx_mode+0x88>)
 8004448:	4a07      	ldr	r2, [pc, #28]	; (8004468 <lora_rx_mode+0x98>)
 800444a:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 800444c:	f7ff fef8 	bl	8004240 <print_menu_items>
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000030 	.word	0x20000030
 800445c:	2000001c 	.word	0x2000001c
 8004460:	200005a1 	.word	0x200005a1
 8004464:	200005a0 	.word	0x200005a0
 8004468:	20000854 	.word	0x20000854

0800446c <lora_tx_mode>:
// ----------------------------------------------------------------------------------------
void lora_tx_mode(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
	clearn_oled();
 8004472:	f7fd fe6b 	bl	800214c <clearn_oled>
	print_rectangle_on_head();
 8004476:	f7ff fccd 	bl	8003e14 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 800447a:	2300      	movs	r3, #0
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	1d3b      	adds	r3, r7, #4
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004488:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <lora_tx_mode+0x88>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6959      	ldr	r1, [r3, #20]
 800448e:	463b      	mov	r3, r7
 8004490:	220f      	movs	r2, #15
 8004492:	4618      	mov	r0, r3
 8004494:	f004 f97f 	bl	8008796 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004498:	2103      	movs	r1, #3
 800449a:	200a      	movs	r0, #10
 800449c:	f7fe f83c 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80044a0:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <lora_tx_mode+0x8c>)
 80044a2:	4638      	mov	r0, r7
 80044a4:	2301      	movs	r3, #1
 80044a6:	ca06      	ldmia	r2, {r1, r2}
 80044a8:	f7fe f810 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80044ac:	f7fd fefe 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80044b0:	463b      	mov	r3, r7
 80044b2:	2210      	movs	r2, #16
 80044b4:	2100      	movs	r1, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	f004 f936 	bl	8008728 <memset>


	button_status = BOTTON_DOESENT_PRESS;
 80044bc:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <lora_tx_mode+0x90>)
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <lora_tx_mode+0x94>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_TX_send_test_number(true);
 80044c8:	2001      	movs	r0, #1
 80044ca:	f7fc fb97 	bl	8000bfc <LoRa_TX_send_test_number>

	}while (button_status != BUTTON_ENTER);
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <lora_tx_mode+0x90>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d1f8      	bne.n	80044c8 <lora_tx_mode+0x5c>
	LoRa_TX_send_test_number(false);
 80044d6:	2000      	movs	r0, #0
 80044d8:	f7fc fb90 	bl	8000bfc <LoRa_TX_send_test_number>

	block_interrupt_form_up_and_down_buttons = false;
 80044dc:	4b08      	ldr	r3, [pc, #32]	; (8004500 <lora_tx_mode+0x94>)
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 80044e2:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <lora_tx_mode+0x88>)
 80044e4:	4a07      	ldr	r2, [pc, #28]	; (8004504 <lora_tx_mode+0x98>)
 80044e6:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 80044e8:	f7ff feaa 	bl	8004240 <print_menu_items>
}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000030 	.word	0x20000030
 80044f8:	2000001c 	.word	0x2000001c
 80044fc:	200005a1 	.word	0x200005a1
 8004500:	200005a0 	.word	0x200005a0
 8004504:	20000854 	.word	0x20000854

08004508 <lora_tx_mode_send_T_and_H>:
// ----------------------------------------------------------------------------------------
void lora_tx_mode_send_T_and_H(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
	clearn_oled();
 800450e:	f7fd fe1d 	bl	800214c <clearn_oled>
	print_rectangle_on_head();
 8004512:	f7ff fc7f 	bl	8003e14 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004516:	2300      	movs	r3, #0
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	1d3b      	adds	r3, r7, #4
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004524:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <lora_tx_mode_send_T_and_H+0x88>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6959      	ldr	r1, [r3, #20]
 800452a:	463b      	mov	r3, r7
 800452c:	220f      	movs	r2, #15
 800452e:	4618      	mov	r0, r3
 8004530:	f004 f931 	bl	8008796 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004534:	2103      	movs	r1, #3
 8004536:	200a      	movs	r0, #10
 8004538:	f7fd ffee 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800453c:	4a15      	ldr	r2, [pc, #84]	; (8004594 <lora_tx_mode_send_T_and_H+0x8c>)
 800453e:	4638      	mov	r0, r7
 8004540:	2301      	movs	r3, #1
 8004542:	ca06      	ldmia	r2, {r1, r2}
 8004544:	f7fd ffc2 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004548:	f7fd feb0 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800454c:	463b      	mov	r3, r7
 800454e:	2210      	movs	r2, #16
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f004 f8e8 	bl	8008728 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <lora_tx_mode_send_T_and_H+0x90>)
 800455a:	2200      	movs	r2, #0
 800455c:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <lora_tx_mode_send_T_and_H+0x94>)
 8004560:	2201      	movs	r2, #1
 8004562:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_TX_send_T_and_H(true);
 8004564:	2001      	movs	r0, #1
 8004566:	f7fc fcc1 	bl	8000eec <LoRa_TX_send_T_and_H>

	}while (button_status != BUTTON_ENTER);
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <lora_tx_mode_send_T_and_H+0x90>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d1f8      	bne.n	8004564 <lora_tx_mode_send_T_and_H+0x5c>
	LoRa_TX_send_T_and_H(false);
 8004572:	2000      	movs	r0, #0
 8004574:	f7fc fcba 	bl	8000eec <LoRa_TX_send_T_and_H>

	block_interrupt_form_up_and_down_buttons = false;
 8004578:	4b08      	ldr	r3, [pc, #32]	; (800459c <lora_tx_mode_send_T_and_H+0x94>)
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 800457e:	4b04      	ldr	r3, [pc, #16]	; (8004590 <lora_tx_mode_send_T_and_H+0x88>)
 8004580:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <lora_tx_mode_send_T_and_H+0x98>)
 8004582:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8004584:	f7ff fe5c 	bl	8004240 <print_menu_items>
}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000030 	.word	0x20000030
 8004594:	2000001c 	.word	0x2000001c
 8004598:	200005a1 	.word	0x200005a1
 800459c:	200005a0 	.word	0x200005a0
 80045a0:	20000854 	.word	0x20000854

080045a4 <nrf_rx_mode>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// NRF FUNCTIONS
void nrf_rx_mode(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
	clearn_oled();
 80045aa:	f7fd fdcf 	bl	800214c <clearn_oled>
	NRF24_init_RX_mode();
 80045ae:	f7fc ff89 	bl	80014c4 <NRF24_init_RX_mode>
	print_rectangle_on_head();
 80045b2:	f7ff fc2f 	bl	8003e14 <print_rectangle_on_head>

	char str_buf_1[25] = {0};
 80045b6:	2300      	movs	r3, #0
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	f107 0308 	add.w	r3, r7, #8
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	605a      	str	r2, [r3, #4]
 80045c4:	609a      	str	r2, [r3, #8]
 80045c6:	60da      	str	r2, [r3, #12]
 80045c8:	611a      	str	r2, [r3, #16]
 80045ca:	751a      	strb	r2, [r3, #20]
	strncpy(str_buf_1, currentItem -> name, 15);
 80045cc:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <nrf_rx_mode+0xa0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6959      	ldr	r1, [r3, #20]
 80045d2:	1d3b      	adds	r3, r7, #4
 80045d4:	220f      	movs	r2, #15
 80045d6:	4618      	mov	r0, r3
 80045d8:	f004 f8dd 	bl	8008796 <strncpy>
	ssd1306_SetCursor(10, 3);
 80045dc:	2103      	movs	r1, #3
 80045de:	200a      	movs	r0, #10
 80045e0:	f7fd ff9a 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str_buf_1,  Font_7x10, White);
 80045e4:	4a18      	ldr	r2, [pc, #96]	; (8004648 <nrf_rx_mode+0xa4>)
 80045e6:	1d38      	adds	r0, r7, #4
 80045e8:	2301      	movs	r3, #1
 80045ea:	ca06      	ldmia	r2, {r1, r2}
 80045ec:	f7fd ff6e 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80045f0:	f7fd fe5c 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str_buf_1, 0, sizeof(str_buf_1));
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	2219      	movs	r2, #25
 80045f8:	2100      	movs	r1, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f004 f894 	bl	8008728 <memset>
	//-------------------------------------------------

	button_status = BOTTON_DOESENT_PRESS;
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <nrf_rx_mode+0xa8>)
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8004606:	4b12      	ldr	r3, [pc, #72]	; (8004650 <nrf_rx_mode+0xac>)
 8004608:	2201      	movs	r2, #1
 800460a:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		NRF24L01_Receive();
 800460c:	f7fc fef0 	bl	80013f0 <NRF24L01_Receive>
	}while (button_status != BUTTON_ENTER);
 8004610:	4b0e      	ldr	r3, [pc, #56]	; (800464c <nrf_rx_mode+0xa8>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d1f9      	bne.n	800460c <nrf_rx_mode+0x68>

	NRF24_WriteReg(CONFIG, 0x00); 										// STOP work with nrf module  (Power off)
 8004618:	2100      	movs	r1, #0
 800461a:	2000      	movs	r0, #0
 800461c:	f7fd fc02 	bl	8001e24 <NRF24_WriteReg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				// Turn off GREEN LED
 8004620:	2201      	movs	r2, #1
 8004622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004626:	480b      	ldr	r0, [pc, #44]	; (8004654 <nrf_rx_mode+0xb0>)
 8004628:	f001 f93f 	bl	80058aa <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;
 800462c:	4b08      	ldr	r3, [pc, #32]	; (8004650 <nrf_rx_mode+0xac>)
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <nrf_rx_mode+0xa0>)
 8004634:	4a08      	ldr	r2, [pc, #32]	; (8004658 <nrf_rx_mode+0xb4>)
 8004636:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8004638:	f7ff fe02 	bl	8004240 <print_menu_items>
}
 800463c:	bf00      	nop
 800463e:	3720      	adds	r7, #32
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20000030 	.word	0x20000030
 8004648:	2000001c 	.word	0x2000001c
 800464c:	200005a1 	.word	0x200005a1
 8004650:	200005a0 	.word	0x200005a0
 8004654:	40011000 	.word	0x40011000
 8004658:	200007e8 	.word	0x200007e8

0800465c <nrf_tx_mode_send_test_number>:
// ----------------------------------------------------------------------------------------
void nrf_tx_mode_send_test_number(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
	clearn_oled();
 8004662:	f7fd fd73 	bl	800214c <clearn_oled>
	NRF24_init_TX_mode();
 8004666:	f7fc fff1 	bl	800164c <NRF24_init_TX_mode>
	print_rectangle_on_head();
 800466a:	f7ff fbd3 	bl	8003e14 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 800466e:	2300      	movs	r3, #0
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	1d3b      	adds	r3, r7, #4
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 800467c:	4b23      	ldr	r3, [pc, #140]	; (800470c <nrf_tx_mode_send_test_number+0xb0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6959      	ldr	r1, [r3, #20]
 8004682:	463b      	mov	r3, r7
 8004684:	220f      	movs	r2, #15
 8004686:	4618      	mov	r0, r3
 8004688:	f004 f885 	bl	8008796 <strncpy>
	ssd1306_SetCursor(10, 3);
 800468c:	2103      	movs	r1, #3
 800468e:	200a      	movs	r0, #10
 8004690:	f7fd ff42 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004694:	4a1e      	ldr	r2, [pc, #120]	; (8004710 <nrf_tx_mode_send_test_number+0xb4>)
 8004696:	4638      	mov	r0, r7
 8004698:	2301      	movs	r3, #1
 800469a:	ca06      	ldmia	r2, {r1, r2}
 800469c:	f7fd ff16 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80046a0:	f7fd fe04 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80046a4:	463b      	mov	r3, r7
 80046a6:	2210      	movs	r2, #16
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f004 f83c 	bl	8008728 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 80046b0:	4b18      	ldr	r3, [pc, #96]	; (8004714 <nrf_tx_mode_send_test_number+0xb8>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80046b6:	4b18      	ldr	r3, [pc, #96]	; (8004718 <nrf_tx_mode_send_test_number+0xbc>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		NRF24L01_Transmission_counter();
 80046bc:	f7fd f8d4 	bl	8001868 <NRF24L01_Transmission_counter>
	}while (button_status != BUTTON_ENTER);
 80046c0:	4b14      	ldr	r3, [pc, #80]	; (8004714 <nrf_tx_mode_send_test_number+0xb8>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d1f9      	bne.n	80046bc <nrf_tx_mode_send_test_number+0x60>
	i = 1; 																// Counter transmitted data
 80046c8:	4b14      	ldr	r3, [pc, #80]	; (800471c <nrf_tx_mode_send_test_number+0xc0>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
	test_data = 0;									  					// Init test data for transmit data
 80046ce:	4b14      	ldr	r3, [pc, #80]	; (8004720 <nrf_tx_mode_send_test_number+0xc4>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
	retr_cnt_full = 0;
 80046d4:	4b13      	ldr	r3, [pc, #76]	; (8004724 <nrf_tx_mode_send_test_number+0xc8>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
	cnt_lost = 0;
 80046da:	4b13      	ldr	r3, [pc, #76]	; (8004728 <nrf_tx_mode_send_test_number+0xcc>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

	NRF24_WriteReg(CONFIG, 0x00); 										// STOP work with nrf module  (Power off)
 80046e0:	2100      	movs	r1, #0
 80046e2:	2000      	movs	r0, #0
 80046e4:	f7fd fb9e 	bl	8001e24 <NRF24_WriteReg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				// Turn off GREEN LED
 80046e8:	2201      	movs	r2, #1
 80046ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046ee:	480f      	ldr	r0, [pc, #60]	; (800472c <nrf_tx_mode_send_test_number+0xd0>)
 80046f0:	f001 f8db 	bl	80058aa <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;
 80046f4:	4b08      	ldr	r3, [pc, #32]	; (8004718 <nrf_tx_mode_send_test_number+0xbc>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 80046fa:	4b04      	ldr	r3, [pc, #16]	; (800470c <nrf_tx_mode_send_test_number+0xb0>)
 80046fc:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <nrf_tx_mode_send_test_number+0xd4>)
 80046fe:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8004700:	f7ff fd9e 	bl	8004240 <print_menu_items>
}
 8004704:	bf00      	nop
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000030 	.word	0x20000030
 8004710:	2000001c 	.word	0x2000001c
 8004714:	200005a1 	.word	0x200005a1
 8004718:	200005a0 	.word	0x200005a0
 800471c:	20000018 	.word	0x20000018
 8004720:	20000144 	.word	0x20000144
 8004724:	2000013c 	.word	0x2000013c
 8004728:	20000140 	.word	0x20000140
 800472c:	40011000 	.word	0x40011000
 8004730:	200007e8 	.word	0x200007e8

08004734 <nrf_tx_mode_send_T_and_H>:
// ----------------------------------------------------------------------------------------
void nrf_tx_mode_send_T_and_H(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
	clearn_oled();
 800473a:	f7fd fd07 	bl	800214c <clearn_oled>
	NRF24_init_TX_mode();
 800473e:	f7fc ff85 	bl	800164c <NRF24_init_TX_mode>
	print_rectangle_on_head();
 8004742:	f7ff fb67 	bl	8003e14 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004746:	2300      	movs	r3, #0
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	1d3b      	adds	r3, r7, #4
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004754:	4b23      	ldr	r3, [pc, #140]	; (80047e4 <nrf_tx_mode_send_T_and_H+0xb0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6959      	ldr	r1, [r3, #20]
 800475a:	463b      	mov	r3, r7
 800475c:	220f      	movs	r2, #15
 800475e:	4618      	mov	r0, r3
 8004760:	f004 f819 	bl	8008796 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004764:	2103      	movs	r1, #3
 8004766:	200a      	movs	r0, #10
 8004768:	f7fd fed6 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800476c:	4a1e      	ldr	r2, [pc, #120]	; (80047e8 <nrf_tx_mode_send_T_and_H+0xb4>)
 800476e:	4638      	mov	r0, r7
 8004770:	2301      	movs	r3, #1
 8004772:	ca06      	ldmia	r2, {r1, r2}
 8004774:	f7fd feaa 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004778:	f7fd fd98 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800477c:	463b      	mov	r3, r7
 800477e:	2210      	movs	r2, #16
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f003 ffd0 	bl	8008728 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004788:	4b18      	ldr	r3, [pc, #96]	; (80047ec <nrf_tx_mode_send_T_and_H+0xb8>)
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800478e:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <nrf_tx_mode_send_T_and_H+0xbc>)
 8004790:	2201      	movs	r2, #1
 8004792:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		NRF24L01_Transmission_t_and_h();
 8004794:	f7fd f97c 	bl	8001a90 <NRF24L01_Transmission_t_and_h>
	}while (button_status != BUTTON_ENTER);
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <nrf_tx_mode_send_T_and_H+0xb8>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d1f9      	bne.n	8004794 <nrf_tx_mode_send_T_and_H+0x60>
	i = 1; 																// Counter transmitted data
 80047a0:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <nrf_tx_mode_send_T_and_H+0xc0>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
	test_data = 0;									  					// Init test data for transmit data
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <nrf_tx_mode_send_T_and_H+0xc4>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
	retr_cnt_full = 0;
 80047ac:	4b13      	ldr	r3, [pc, #76]	; (80047fc <nrf_tx_mode_send_T_and_H+0xc8>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
	cnt_lost = 0;
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <nrf_tx_mode_send_T_and_H+0xcc>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]

	NRF24_WriteReg(CONFIG, 0x00); 										// STOP work with nrf module  (Power off)
 80047b8:	2100      	movs	r1, #0
 80047ba:	2000      	movs	r0, #0
 80047bc:	f7fd fb32 	bl	8001e24 <NRF24_WriteReg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				// Turn off GREEN LED
 80047c0:	2201      	movs	r2, #1
 80047c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047c6:	480f      	ldr	r0, [pc, #60]	; (8004804 <nrf_tx_mode_send_T_and_H+0xd0>)
 80047c8:	f001 f86f 	bl	80058aa <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;
 80047cc:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <nrf_tx_mode_send_T_and_H+0xbc>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 80047d2:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <nrf_tx_mode_send_T_and_H+0xb0>)
 80047d4:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <nrf_tx_mode_send_T_and_H+0xd4>)
 80047d6:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 80047d8:	f7ff fd32 	bl	8004240 <print_menu_items>
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000030 	.word	0x20000030
 80047e8:	2000001c 	.word	0x2000001c
 80047ec:	200005a1 	.word	0x200005a1
 80047f0:	200005a0 	.word	0x200005a0
 80047f4:	20000018 	.word	0x20000018
 80047f8:	20000144 	.word	0x20000144
 80047fc:	2000013c 	.word	0x2000013c
 8004800:	20000140 	.word	0x20000140
 8004804:	40011000 	.word	0x40011000
 8004808:	200007e8 	.word	0x200007e8

0800480c <am2302>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// SENSORS FUNCTIONS
// Function uses Tim2 for periodic measuring.
void am2302(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08e      	sub	sp, #56	; 0x38
 8004810:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);		// For sensor measure
 8004812:	48af      	ldr	r0, [pc, #700]	; (8004ad0 <am2302+0x2c4>)
 8004814:	f002 fec2 	bl	800759c <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 8004818:	2064      	movs	r0, #100	; 0x64
 800481a:	f000 fc0d 	bl	8005038 <HAL_Delay>
	clearn_oled();
 800481e:	f7fd fc95 	bl	800214c <clearn_oled>
	print_rectangle_on_head();
 8004822:	f7ff faf7 	bl	8003e14 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004826:	2300      	movs	r3, #0
 8004828:	62bb      	str	r3, [r7, #40]	; 0x28
 800482a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	605a      	str	r2, [r3, #4]
 8004834:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004836:	4ba7      	ldr	r3, [pc, #668]	; (8004ad4 <am2302+0x2c8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6959      	ldr	r1, [r3, #20]
 800483c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004840:	220f      	movs	r2, #15
 8004842:	4618      	mov	r0, r3
 8004844:	f003 ffa7 	bl	8008796 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004848:	2103      	movs	r1, #3
 800484a:	200a      	movs	r0, #10
 800484c:	f7fd fe64 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004850:	4aa1      	ldr	r2, [pc, #644]	; (8004ad8 <am2302+0x2cc>)
 8004852:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004856:	2301      	movs	r3, #1
 8004858:	ca06      	ldmia	r2, {r1, r2}
 800485a:	f7fd fe37 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800485e:	f7fd fd25 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004866:	2210      	movs	r2, #16
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f003 ff5c 	bl	8008728 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004870:	4b9a      	ldr	r3, [pc, #616]	; (8004adc <am2302+0x2d0>)
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;	// Lock interrupt from UP and DOWN buttons
 8004876:	4b9a      	ldr	r3, [pc, #616]	; (8004ae0 <am2302+0x2d4>)
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]
	measure_counter = 1;
 800487c:	4b99      	ldr	r3, [pc, #612]	; (8004ae4 <am2302+0x2d8>)
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		// Print data
		if(am2302_ready == true)						// Flug from interrup tim2
 8004882:	4b99      	ldr	r3, [pc, #612]	; (8004ae8 <am2302+0x2dc>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8101 	beq.w	8004a8e <am2302+0x282>
		{
			char str_temperature[10] = {0};
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	f107 0320 	add.w	r3, r7, #32
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	809a      	strh	r2, [r3, #4]
			char str_humidity[10] = {0};
 800489a:	2300      	movs	r3, #0
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	f107 0314 	add.w	r3, r7, #20
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	809a      	strh	r2, [r3, #4]
			char str_1[10] = {0};
 80048a8:	2300      	movs	r3, #0
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	f107 0308 	add.w	r3, r7, #8
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	809a      	strh	r2, [r3, #4]

			// Clear data place on OLED
			memset(str, ' ', sizeof(str));
 80048b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048ba:	2210      	movs	r2, #16
 80048bc:	2120      	movs	r1, #32
 80048be:	4618      	mov	r0, r3
 80048c0:	f003 ff32 	bl	8008728 <memset>
			ssd1306_SetCursor(10, first_menu_row);
 80048c4:	4b89      	ldr	r3, [pc, #548]	; (8004aec <am2302+0x2e0>)
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	4619      	mov	r1, r3
 80048cc:	200a      	movs	r0, #10
 80048ce:	f7fd fe23 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 80048d2:	4a81      	ldr	r2, [pc, #516]	; (8004ad8 <am2302+0x2cc>)
 80048d4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80048d8:	2301      	movs	r3, #1
 80048da:	ca06      	ldmia	r2, {r1, r2}
 80048dc:	f7fd fdf6 	bl	80024cc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80048e0:	f7fd fce4 	bl	80022ac <ssd1306_UpdateScreen>
			ssd1306_SetCursor(10, second_menu_row);
 80048e4:	4b82      	ldr	r3, [pc, #520]	; (8004af0 <am2302+0x2e4>)
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	4619      	mov	r1, r3
 80048ec:	200a      	movs	r0, #10
 80048ee:	f7fd fe13 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 80048f2:	4a79      	ldr	r2, [pc, #484]	; (8004ad8 <am2302+0x2cc>)
 80048f4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80048f8:	2301      	movs	r3, #1
 80048fa:	ca06      	ldmia	r2, {r1, r2}
 80048fc:	f7fd fde6 	bl	80024cc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004900:	f7fd fcd4 	bl	80022ac <ssd1306_UpdateScreen>
			memset(str, 0, sizeof(str));
 8004904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004908:	2210      	movs	r2, #16
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f003 ff0b 	bl	8008728 <memset>

			// Print T and H on OLED
			itoa(am3202_sensor.temterature , str, 10);
 8004912:	4b78      	ldr	r3, [pc, #480]	; (8004af4 <am2302+0x2e8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800491a:	220a      	movs	r2, #10
 800491c:	4618      	mov	r0, r3
 800491e:	f003 ff01 	bl	8008724 <itoa>
			strcat(str_temperature, "T = ");
 8004922:	f107 031c 	add.w	r3, r7, #28
 8004926:	4618      	mov	r0, r3
 8004928:	f7fb fc10 	bl	800014c <strlen>
 800492c:	4603      	mov	r3, r0
 800492e:	461a      	mov	r2, r3
 8004930:	f107 031c 	add.w	r3, r7, #28
 8004934:	4413      	add	r3, r2
 8004936:	4a70      	ldr	r2, [pc, #448]	; (8004af8 <am2302+0x2ec>)
 8004938:	6810      	ldr	r0, [r2, #0]
 800493a:	6018      	str	r0, [r3, #0]
 800493c:	7912      	ldrb	r2, [r2, #4]
 800493e:	711a      	strb	r2, [r3, #4]
			strcat(str_temperature, str);
 8004940:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004944:	f107 031c 	add.w	r3, r7, #28
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f003 ff14 	bl	8008778 <strcat>
			strcat(str_temperature, " C");
 8004950:	f107 031c 	add.w	r3, r7, #28
 8004954:	4618      	mov	r0, r3
 8004956:	f7fb fbf9 	bl	800014c <strlen>
 800495a:	4603      	mov	r3, r0
 800495c:	461a      	mov	r2, r3
 800495e:	f107 031c 	add.w	r3, r7, #28
 8004962:	4413      	add	r3, r2
 8004964:	4a65      	ldr	r2, [pc, #404]	; (8004afc <am2302+0x2f0>)
 8004966:	8811      	ldrh	r1, [r2, #0]
 8004968:	7892      	ldrb	r2, [r2, #2]
 800496a:	8019      	strh	r1, [r3, #0]
 800496c:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, first_menu_row);
 800496e:	4b5f      	ldr	r3, [pc, #380]	; (8004aec <am2302+0x2e0>)
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	4619      	mov	r1, r3
 8004976:	200a      	movs	r0, #10
 8004978:	f7fd fdce 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str_temperature,  Font_7x10, White);
 800497c:	4a56      	ldr	r2, [pc, #344]	; (8004ad8 <am2302+0x2cc>)
 800497e:	f107 001c 	add.w	r0, r7, #28
 8004982:	2301      	movs	r3, #1
 8004984:	ca06      	ldmia	r2, {r1, r2}
 8004986:	f7fd fda1 	bl	80024cc <ssd1306_WriteString>
			memset(str, 0,sizeof(str));
 800498a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800498e:	2210      	movs	r2, #16
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f003 fec8 	bl	8008728 <memset>

			itoa(am3202_sensor.humidity , str, 10);
 8004998:	4b56      	ldr	r3, [pc, #344]	; (8004af4 <am2302+0x2e8>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80049a0:	220a      	movs	r2, #10
 80049a2:	4618      	mov	r0, r3
 80049a4:	f003 febe 	bl	8008724 <itoa>
			strcat(str_humidity, "H = ");
 80049a8:	f107 0310 	add.w	r3, r7, #16
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fb fbcd 	bl	800014c <strlen>
 80049b2:	4603      	mov	r3, r0
 80049b4:	461a      	mov	r2, r3
 80049b6:	f107 0310 	add.w	r3, r7, #16
 80049ba:	4413      	add	r3, r2
 80049bc:	4a50      	ldr	r2, [pc, #320]	; (8004b00 <am2302+0x2f4>)
 80049be:	6810      	ldr	r0, [r2, #0]
 80049c0:	6018      	str	r0, [r3, #0]
 80049c2:	7912      	ldrb	r2, [r2, #4]
 80049c4:	711a      	strb	r2, [r3, #4]
			strcat(str_humidity, str);
 80049c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049ca:	f107 0310 	add.w	r3, r7, #16
 80049ce:	4611      	mov	r1, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f003 fed1 	bl	8008778 <strcat>
			strcat(str_humidity, " %");
 80049d6:	f107 0310 	add.w	r3, r7, #16
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fb fbb6 	bl	800014c <strlen>
 80049e0:	4603      	mov	r3, r0
 80049e2:	461a      	mov	r2, r3
 80049e4:	f107 0310 	add.w	r3, r7, #16
 80049e8:	4413      	add	r3, r2
 80049ea:	4a46      	ldr	r2, [pc, #280]	; (8004b04 <am2302+0x2f8>)
 80049ec:	8811      	ldrh	r1, [r2, #0]
 80049ee:	7892      	ldrb	r2, [r2, #2]
 80049f0:	8019      	strh	r1, [r3, #0]
 80049f2:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, second_menu_row);
 80049f4:	4b3e      	ldr	r3, [pc, #248]	; (8004af0 <am2302+0x2e4>)
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	4619      	mov	r1, r3
 80049fc:	200a      	movs	r0, #10
 80049fe:	f7fd fd8b 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str_humidity,  Font_7x10, White);
 8004a02:	4a35      	ldr	r2, [pc, #212]	; (8004ad8 <am2302+0x2cc>)
 8004a04:	f107 0010 	add.w	r0, r7, #16
 8004a08:	2301      	movs	r3, #1
 8004a0a:	ca06      	ldmia	r2, {r1, r2}
 8004a0c:	f7fd fd5e 	bl	80024cc <ssd1306_WriteString>

			// Print counter
			memset(str, 0,sizeof(str));
 8004a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a14:	2210      	movs	r2, #16
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f003 fe85 	bl	8008728 <memset>
			strcat(str, "Counter: ");
 8004a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fb fb92 	bl	800014c <strlen>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a30:	4413      	add	r3, r2
 8004a32:	4935      	ldr	r1, [pc, #212]	; (8004b08 <am2302+0x2fc>)
 8004a34:	461a      	mov	r2, r3
 8004a36:	460b      	mov	r3, r1
 8004a38:	cb03      	ldmia	r3!, {r0, r1}
 8004a3a:	6010      	str	r0, [r2, #0]
 8004a3c:	6051      	str	r1, [r2, #4]
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	8113      	strh	r3, [r2, #8]
			itoa(measure_counter , str_1, 10);
 8004a42:	4b28      	ldr	r3, [pc, #160]	; (8004ae4 <am2302+0x2d8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	1d39      	adds	r1, r7, #4
 8004a48:	220a      	movs	r2, #10
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f003 fe6a 	bl	8008724 <itoa>
			strcat(str, str_1);
 8004a50:	1d3a      	adds	r2, r7, #4
 8004a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a56:	4611      	mov	r1, r2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f003 fe8d 	bl	8008778 <strcat>
			ssd1306_SetCursor(10, third_menu_row);
 8004a5e:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <am2302+0x300>)
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	4619      	mov	r1, r3
 8004a66:	200a      	movs	r0, #10
 8004a68:	f7fd fd56 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8004a6c:	4a1a      	ldr	r2, [pc, #104]	; (8004ad8 <am2302+0x2cc>)
 8004a6e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004a72:	2301      	movs	r3, #1
 8004a74:	ca06      	ldmia	r2, {r1, r2}
 8004a76:	f7fd fd29 	bl	80024cc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004a7a:	f7fd fc17 	bl	80022ac <ssd1306_UpdateScreen>

			measure_counter++;
 8004a7e:	4b19      	ldr	r3, [pc, #100]	; (8004ae4 <am2302+0x2d8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3301      	adds	r3, #1
 8004a84:	4a17      	ldr	r2, [pc, #92]	; (8004ae4 <am2302+0x2d8>)
 8004a86:	6013      	str	r3, [r2, #0]
			am2302_ready = false;
 8004a88:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <am2302+0x2dc>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
		}

	}while (button_status != BUTTON_ENTER);
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <am2302+0x2d0>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	f47f aef5 	bne.w	8004882 <am2302+0x76>
	HAL_TIM_Base_Stop_IT(&htim2);
 8004a98:	480d      	ldr	r0, [pc, #52]	; (8004ad0 <am2302+0x2c4>)
 8004a9a:	f002 fdd1 	bl	8007640 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn off LED
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004aa4:	481a      	ldr	r0, [pc, #104]	; (8004b10 <am2302+0x304>)
 8004aa6:	f000 ff00 	bl	80058aa <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;	// Unlock  UP and DOWN buttons interrupt
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <am2302+0x2d4>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]

	am3202_sensor.temterature = 0;
 8004ab0:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <am2302+0x2e8>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
	am3202_sensor.humidity = 0;
 8004ab6:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <am2302+0x2e8>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	605a      	str	r2, [r3, #4]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8004abc:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <am2302+0x2c8>)
 8004abe:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <am2302+0x308>)
 8004ac0:	601a      	str	r2, [r3, #0]
	print_menu_items();
 8004ac2:	f7ff fbbd 	bl	8004240 <print_menu_items>
}
 8004ac6:	bf00      	nop
 8004ac8:	3738      	adds	r7, #56	; 0x38
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000734 	.word	0x20000734
 8004ad4:	20000030 	.word	0x20000030
 8004ad8:	2000001c 	.word	0x2000001c
 8004adc:	200005a1 	.word	0x200005a1
 8004ae0:	200005a0 	.word	0x200005a0
 8004ae4:	2000059c 	.word	0x2000059c
 8004ae8:	20000590 	.word	0x20000590
 8004aec:	20000038 	.word	0x20000038
 8004af0:	2000003a 	.word	0x2000003a
 8004af4:	200005ac 	.word	0x200005ac
 8004af8:	0800920c 	.word	0x0800920c
 8004afc:	08009214 	.word	0x08009214
 8004b00:	08009218 	.word	0x08009218
 8004b04:	08009220 	.word	0x08009220
 8004b08:	08009224 	.word	0x08009224
 8004b0c:	2000003c 	.word	0x2000003c
 8004b10:	40011000 	.word	0x40011000
 8004b14:	200008c0 	.word	0x200008c0

08004b18 <periodic_measurement_am2302_on>:
// ----------------------------------------------------------------------------------------
// Function uses Tim2 for periodic measuring.
void periodic_measurement_am2302_on(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08e      	sub	sp, #56	; 0x38
 8004b1c:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);		// For sensor measure
 8004b1e:	48a7      	ldr	r0, [pc, #668]	; (8004dbc <periodic_measurement_am2302_on+0x2a4>)
 8004b20:	f002 fd3c 	bl	800759c <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 8004b24:	2064      	movs	r0, #100	; 0x64
 8004b26:	f000 fa87 	bl	8005038 <HAL_Delay>
	clearn_oled();
 8004b2a:	f7fd fb0f 	bl	800214c <clearn_oled>
	print_rectangle_on_head();
 8004b2e:	f7ff f971 	bl	8003e14 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004b32:	2300      	movs	r3, #0
 8004b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	605a      	str	r2, [r3, #4]
 8004b40:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004b42:	4b9f      	ldr	r3, [pc, #636]	; (8004dc0 <periodic_measurement_am2302_on+0x2a8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6959      	ldr	r1, [r3, #20]
 8004b48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b4c:	220f      	movs	r2, #15
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f003 fe21 	bl	8008796 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004b54:	2103      	movs	r1, #3
 8004b56:	200a      	movs	r0, #10
 8004b58:	f7fd fcde 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004b5c:	4a99      	ldr	r2, [pc, #612]	; (8004dc4 <periodic_measurement_am2302_on+0x2ac>)
 8004b5e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004b62:	2301      	movs	r3, #1
 8004b64:	ca06      	ldmia	r2, {r1, r2}
 8004b66:	f7fd fcb1 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004b6a:	f7fd fb9f 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b72:	2210      	movs	r2, #16
 8004b74:	2100      	movs	r1, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f003 fdd6 	bl	8008728 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004b7c:	4b92      	ldr	r3, [pc, #584]	; (8004dc8 <periodic_measurement_am2302_on+0x2b0>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8004b82:	4b92      	ldr	r3, [pc, #584]	; (8004dcc <periodic_measurement_am2302_on+0x2b4>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
	measure_counter = 1;
 8004b88:	4b91      	ldr	r3, [pc, #580]	; (8004dd0 <periodic_measurement_am2302_on+0x2b8>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		// Print data
		if(am2302_ready == true)	// Flug from interrup tim2
 8004b8e:	4b91      	ldr	r3, [pc, #580]	; (8004dd4 <periodic_measurement_am2302_on+0x2bc>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8101 	beq.w	8004d9a <periodic_measurement_am2302_on+0x282>
		{
			char str_temperature[10] = {0};
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	f107 0320 	add.w	r3, r7, #32
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	809a      	strh	r2, [r3, #4]
			char str_humidity[10] = {0};
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	f107 0314 	add.w	r3, r7, #20
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	809a      	strh	r2, [r3, #4]
			char str_1[10] = {0};
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	f107 0308 	add.w	r3, r7, #8
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	809a      	strh	r2, [r3, #4]

			// Clear data place on OLED
			memset(str, ' ', sizeof(str));
 8004bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bc6:	2210      	movs	r2, #16
 8004bc8:	2120      	movs	r1, #32
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f003 fdac 	bl	8008728 <memset>
			ssd1306_SetCursor(10, first_menu_row);
 8004bd0:	4b81      	ldr	r3, [pc, #516]	; (8004dd8 <periodic_measurement_am2302_on+0x2c0>)
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	200a      	movs	r0, #10
 8004bda:	f7fd fc9d 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8004bde:	4a79      	ldr	r2, [pc, #484]	; (8004dc4 <periodic_measurement_am2302_on+0x2ac>)
 8004be0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004be4:	2301      	movs	r3, #1
 8004be6:	ca06      	ldmia	r2, {r1, r2}
 8004be8:	f7fd fc70 	bl	80024cc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004bec:	f7fd fb5e 	bl	80022ac <ssd1306_UpdateScreen>
			ssd1306_SetCursor(10, second_menu_row);
 8004bf0:	4b7a      	ldr	r3, [pc, #488]	; (8004ddc <periodic_measurement_am2302_on+0x2c4>)
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	200a      	movs	r0, #10
 8004bfa:	f7fd fc8d 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8004bfe:	4a71      	ldr	r2, [pc, #452]	; (8004dc4 <periodic_measurement_am2302_on+0x2ac>)
 8004c00:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004c04:	2301      	movs	r3, #1
 8004c06:	ca06      	ldmia	r2, {r1, r2}
 8004c08:	f7fd fc60 	bl	80024cc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004c0c:	f7fd fb4e 	bl	80022ac <ssd1306_UpdateScreen>

			memset(str, 0, sizeof(str));
 8004c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c14:	2210      	movs	r2, #16
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f003 fd85 	bl	8008728 <memset>
			// Print T and H on OLED

			itoa(am3202_sensor.temterature , str, 10);
 8004c1e:	4b70      	ldr	r3, [pc, #448]	; (8004de0 <periodic_measurement_am2302_on+0x2c8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004c26:	220a      	movs	r2, #10
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f003 fd7b 	bl	8008724 <itoa>
			strcat(str_temperature, "T = ");
 8004c2e:	f107 031c 	add.w	r3, r7, #28
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fb fa8a 	bl	800014c <strlen>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f107 031c 	add.w	r3, r7, #28
 8004c40:	4413      	add	r3, r2
 8004c42:	4a68      	ldr	r2, [pc, #416]	; (8004de4 <periodic_measurement_am2302_on+0x2cc>)
 8004c44:	6810      	ldr	r0, [r2, #0]
 8004c46:	6018      	str	r0, [r3, #0]
 8004c48:	7912      	ldrb	r2, [r2, #4]
 8004c4a:	711a      	strb	r2, [r3, #4]
			strcat(str_temperature, str);
 8004c4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c50:	f107 031c 	add.w	r3, r7, #28
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f003 fd8e 	bl	8008778 <strcat>
			strcat(str_temperature, " C");
 8004c5c:	f107 031c 	add.w	r3, r7, #28
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fb fa73 	bl	800014c <strlen>
 8004c66:	4603      	mov	r3, r0
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f107 031c 	add.w	r3, r7, #28
 8004c6e:	4413      	add	r3, r2
 8004c70:	4a5d      	ldr	r2, [pc, #372]	; (8004de8 <periodic_measurement_am2302_on+0x2d0>)
 8004c72:	8811      	ldrh	r1, [r2, #0]
 8004c74:	7892      	ldrb	r2, [r2, #2]
 8004c76:	8019      	strh	r1, [r3, #0]
 8004c78:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, first_menu_row);
 8004c7a:	4b57      	ldr	r3, [pc, #348]	; (8004dd8 <periodic_measurement_am2302_on+0x2c0>)
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	4619      	mov	r1, r3
 8004c82:	200a      	movs	r0, #10
 8004c84:	f7fd fc48 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str_temperature,  Font_7x10, White);
 8004c88:	4a4e      	ldr	r2, [pc, #312]	; (8004dc4 <periodic_measurement_am2302_on+0x2ac>)
 8004c8a:	f107 001c 	add.w	r0, r7, #28
 8004c8e:	2301      	movs	r3, #1
 8004c90:	ca06      	ldmia	r2, {r1, r2}
 8004c92:	f7fd fc1b 	bl	80024cc <ssd1306_WriteString>

			memset(str, 0,sizeof(str));
 8004c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c9a:	2210      	movs	r2, #16
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 fd42 	bl	8008728 <memset>
			itoa(am3202_sensor.humidity , str, 10);
 8004ca4:	4b4e      	ldr	r3, [pc, #312]	; (8004de0 <periodic_measurement_am2302_on+0x2c8>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004cac:	220a      	movs	r2, #10
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f003 fd38 	bl	8008724 <itoa>
			strcat(str_humidity, "H = ");
 8004cb4:	f107 0310 	add.w	r3, r7, #16
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fb fa47 	bl	800014c <strlen>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f107 0310 	add.w	r3, r7, #16
 8004cc6:	4413      	add	r3, r2
 8004cc8:	4a48      	ldr	r2, [pc, #288]	; (8004dec <periodic_measurement_am2302_on+0x2d4>)
 8004cca:	6810      	ldr	r0, [r2, #0]
 8004ccc:	6018      	str	r0, [r3, #0]
 8004cce:	7912      	ldrb	r2, [r2, #4]
 8004cd0:	711a      	strb	r2, [r3, #4]
			strcat(str_humidity, str);
 8004cd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cd6:	f107 0310 	add.w	r3, r7, #16
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f003 fd4b 	bl	8008778 <strcat>
			strcat(str_humidity, " %");
 8004ce2:	f107 0310 	add.w	r3, r7, #16
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fb fa30 	bl	800014c <strlen>
 8004cec:	4603      	mov	r3, r0
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f107 0310 	add.w	r3, r7, #16
 8004cf4:	4413      	add	r3, r2
 8004cf6:	4a3e      	ldr	r2, [pc, #248]	; (8004df0 <periodic_measurement_am2302_on+0x2d8>)
 8004cf8:	8811      	ldrh	r1, [r2, #0]
 8004cfa:	7892      	ldrb	r2, [r2, #2]
 8004cfc:	8019      	strh	r1, [r3, #0]
 8004cfe:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, second_menu_row);
 8004d00:	4b36      	ldr	r3, [pc, #216]	; (8004ddc <periodic_measurement_am2302_on+0x2c4>)
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	4619      	mov	r1, r3
 8004d08:	200a      	movs	r0, #10
 8004d0a:	f7fd fc05 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str_humidity,  Font_7x10, White);
 8004d0e:	4a2d      	ldr	r2, [pc, #180]	; (8004dc4 <periodic_measurement_am2302_on+0x2ac>)
 8004d10:	f107 0010 	add.w	r0, r7, #16
 8004d14:	2301      	movs	r3, #1
 8004d16:	ca06      	ldmia	r2, {r1, r2}
 8004d18:	f7fd fbd8 	bl	80024cc <ssd1306_WriteString>

			// Print counter
			memset(str, 0,sizeof(str));
 8004d1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d20:	2210      	movs	r2, #16
 8004d22:	2100      	movs	r1, #0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f003 fcff 	bl	8008728 <memset>
			strcat(str, "Counter: ");
 8004d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fb fa0c 	bl	800014c <strlen>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461a      	mov	r2, r3
 8004d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d3c:	4413      	add	r3, r2
 8004d3e:	492d      	ldr	r1, [pc, #180]	; (8004df4 <periodic_measurement_am2302_on+0x2dc>)
 8004d40:	461a      	mov	r2, r3
 8004d42:	460b      	mov	r3, r1
 8004d44:	cb03      	ldmia	r3!, {r0, r1}
 8004d46:	6010      	str	r0, [r2, #0]
 8004d48:	6051      	str	r1, [r2, #4]
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	8113      	strh	r3, [r2, #8]
			itoa(measure_counter , str_1, 10);
 8004d4e:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <periodic_measurement_am2302_on+0x2b8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	1d39      	adds	r1, r7, #4
 8004d54:	220a      	movs	r2, #10
 8004d56:	4618      	mov	r0, r3
 8004d58:	f003 fce4 	bl	8008724 <itoa>
			strcat(str, str_1);
 8004d5c:	1d3a      	adds	r2, r7, #4
 8004d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d62:	4611      	mov	r1, r2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f003 fd07 	bl	8008778 <strcat>
			ssd1306_SetCursor(10, third_menu_row);
 8004d6a:	4b23      	ldr	r3, [pc, #140]	; (8004df8 <periodic_measurement_am2302_on+0x2e0>)
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	4619      	mov	r1, r3
 8004d72:	200a      	movs	r0, #10
 8004d74:	f7fd fbd0 	bl	8002518 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8004d78:	4a12      	ldr	r2, [pc, #72]	; (8004dc4 <periodic_measurement_am2302_on+0x2ac>)
 8004d7a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004d7e:	2301      	movs	r3, #1
 8004d80:	ca06      	ldmia	r2, {r1, r2}
 8004d82:	f7fd fba3 	bl	80024cc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004d86:	f7fd fa91 	bl	80022ac <ssd1306_UpdateScreen>

			measure_counter++;
 8004d8a:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <periodic_measurement_am2302_on+0x2b8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	4a0f      	ldr	r2, [pc, #60]	; (8004dd0 <periodic_measurement_am2302_on+0x2b8>)
 8004d92:	6013      	str	r3, [r2, #0]
			am2302_ready = false;
 8004d94:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <periodic_measurement_am2302_on+0x2bc>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
		}

	}while (button_status != BUTTON_ENTER);
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <periodic_measurement_am2302_on+0x2b0>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	f47f aef5 	bne.w	8004b8e <periodic_measurement_am2302_on+0x76>
	block_interrupt_form_up_and_down_buttons = false;	// Unlock  UP and DOWN buttons interrupt
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <periodic_measurement_am2302_on+0x2b4>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <periodic_measurement_am2302_on+0x2a8>)
 8004dac:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <periodic_measurement_am2302_on+0x2e4>)
 8004dae:	601a      	str	r2, [r3, #0]
	print_menu_items();
 8004db0:	f7ff fa46 	bl	8004240 <print_menu_items>
}
 8004db4:	bf00      	nop
 8004db6:	3738      	adds	r7, #56	; 0x38
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000734 	.word	0x20000734
 8004dc0:	20000030 	.word	0x20000030
 8004dc4:	2000001c 	.word	0x2000001c
 8004dc8:	200005a1 	.word	0x200005a1
 8004dcc:	200005a0 	.word	0x200005a0
 8004dd0:	2000059c 	.word	0x2000059c
 8004dd4:	20000590 	.word	0x20000590
 8004dd8:	20000038 	.word	0x20000038
 8004ddc:	2000003a 	.word	0x2000003a
 8004de0:	200005ac 	.word	0x200005ac
 8004de4:	0800920c 	.word	0x0800920c
 8004de8:	08009214 	.word	0x08009214
 8004dec:	08009218 	.word	0x08009218
 8004df0:	08009220 	.word	0x08009220
 8004df4:	08009224 	.word	0x08009224
 8004df8:	2000003c 	.word	0x2000003c
 8004dfc:	200008c0 	.word	0x200008c0

08004e00 <periodic_measurement_am2302_off>:
// ----------------------------------------------------------------------------------------
// Function turn off Tim2 for periodic measuring.
void periodic_measurement_am2302_off(void)
{
 8004e00:	b590      	push	{r4, r7, lr}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);		// For sensor measure
 8004e06:	483d      	ldr	r0, [pc, #244]	; (8004efc <periodic_measurement_am2302_off+0xfc>)
 8004e08:	f002 fbc8 	bl	800759c <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 8004e0c:	2064      	movs	r0, #100	; 0x64
 8004e0e:	f000 f913 	bl	8005038 <HAL_Delay>
	clearn_oled();
 8004e12:	f7fd f99b 	bl	800214c <clearn_oled>
	print_rectangle_on_head();
 8004e16:	f7fe fffd 	bl	8003e14 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	1d3b      	adds	r3, r7, #4
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004e28:	4b35      	ldr	r3, [pc, #212]	; (8004f00 <periodic_measurement_am2302_off+0x100>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6959      	ldr	r1, [r3, #20]
 8004e2e:	463b      	mov	r3, r7
 8004e30:	220f      	movs	r2, #15
 8004e32:	4618      	mov	r0, r3
 8004e34:	f003 fcaf 	bl	8008796 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004e38:	2103      	movs	r1, #3
 8004e3a:	200a      	movs	r0, #10
 8004e3c:	f7fd fb6c 	bl	8002518 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004e40:	4a30      	ldr	r2, [pc, #192]	; (8004f04 <periodic_measurement_am2302_off+0x104>)
 8004e42:	4638      	mov	r0, r7
 8004e44:	2301      	movs	r3, #1
 8004e46:	ca06      	ldmia	r2, {r1, r2}
 8004e48:	f7fd fb40 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004e4c:	f7fd fa2e 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004e50:	463b      	mov	r3, r7
 8004e52:	2210      	movs	r2, #16
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f003 fc66 	bl	8008728 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004e5c:	4b2a      	ldr	r3, [pc, #168]	; (8004f08 <periodic_measurement_am2302_off+0x108>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8004e62:	4b2a      	ldr	r3, [pc, #168]	; (8004f0c <periodic_measurement_am2302_off+0x10c>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]
	measure_counter = 1;
 8004e68:	4b29      	ldr	r3, [pc, #164]	; (8004f10 <periodic_measurement_am2302_off+0x110>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8004e6e:	4823      	ldr	r0, [pc, #140]	; (8004efc <periodic_measurement_am2302_off+0xfc>)
 8004e70:	f002 fbe6 	bl	8007640 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn off LED
 8004e74:	2201      	movs	r2, #1
 8004e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e7a:	4826      	ldr	r0, [pc, #152]	; (8004f14 <periodic_measurement_am2302_off+0x114>)
 8004e7c:	f000 fd15 	bl	80058aa <HAL_GPIO_WritePin>

	ssd1306_SetCursor(10, second_menu_row);
 8004e80:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <periodic_measurement_am2302_off+0x118>)
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	4619      	mov	r1, r3
 8004e88:	200a      	movs	r0, #10
 8004e8a:	f7fd fb45 	bl	8002518 <ssd1306_SetCursor>
	strcat(str, "STOP measuring");
 8004e8e:	463b      	mov	r3, r7
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fb f95b 	bl	800014c <strlen>
 8004e96:	4603      	mov	r3, r0
 8004e98:	461a      	mov	r2, r3
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	4413      	add	r3, r2
 8004e9e:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <periodic_measurement_am2302_off+0x11c>)
 8004ea0:	461c      	mov	r4, r3
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ea6:	6020      	str	r0, [r4, #0]
 8004ea8:	6061      	str	r1, [r4, #4]
 8004eaa:	60a2      	str	r2, [r4, #8]
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	789b      	ldrb	r3, [r3, #2]
 8004eb0:	81a2      	strh	r2, [r4, #12]
 8004eb2:	73a3      	strb	r3, [r4, #14]
	ssd1306_WriteString(str,  Font_7x10, White);
 8004eb4:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <periodic_measurement_am2302_off+0x104>)
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	2301      	movs	r3, #1
 8004eba:	ca06      	ldmia	r2, {r1, r2}
 8004ebc:	f7fd fb06 	bl	80024cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004ec0:	f7fd f9f4 	bl	80022ac <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f003 fc2c 	bl	8008728 <memset>

	am3202_sensor.temterature = 0;
 8004ed0:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <periodic_measurement_am2302_off+0x120>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
	am3202_sensor.humidity = 0;
 8004ed6:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <periodic_measurement_am2302_off+0x120>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	605a      	str	r2, [r3, #4]

	// waiting for press enter(SW2) button
	do{

	}while (button_status != BUTTON_ENTER);
 8004edc:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <periodic_measurement_am2302_off+0x108>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d1fb      	bne.n	8004edc <periodic_measurement_am2302_off+0xdc>
	block_interrupt_form_up_and_down_buttons = false;	// Unlock  UP and DOWN buttons interrupt
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <periodic_measurement_am2302_off+0x10c>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <periodic_measurement_am2302_off+0x100>)
 8004eec:	4a0d      	ldr	r2, [pc, #52]	; (8004f24 <periodic_measurement_am2302_off+0x124>)
 8004eee:	601a      	str	r2, [r3, #0]
	print_menu_items();
 8004ef0:	f7ff f9a6 	bl	8004240 <print_menu_items>

}
 8004ef4:	bf00      	nop
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd90      	pop	{r4, r7, pc}
 8004efc:	20000734 	.word	0x20000734
 8004f00:	20000030 	.word	0x20000030
 8004f04:	2000001c 	.word	0x2000001c
 8004f08:	200005a1 	.word	0x200005a1
 8004f0c:	200005a0 	.word	0x200005a0
 8004f10:	2000059c 	.word	0x2000059c
 8004f14:	40011000 	.word	0x40011000
 8004f18:	2000003a 	.word	0x2000003a
 8004f1c:	08009230 	.word	0x08009230
 8004f20:	200005ac 	.word	0x200005ac
 8004f24:	200008c0 	.word	0x200008c0

08004f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f28:	480c      	ldr	r0, [pc, #48]	; (8004f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004f2a:	490d      	ldr	r1, [pc, #52]	; (8004f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004f2c:	4a0d      	ldr	r2, [pc, #52]	; (8004f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f30:	e002      	b.n	8004f38 <LoopCopyDataInit>

08004f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f36:	3304      	adds	r3, #4

08004f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f3c:	d3f9      	bcc.n	8004f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f3e:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f40:	4c0a      	ldr	r4, [pc, #40]	; (8004f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f44:	e001      	b.n	8004f4a <LoopFillZerobss>

08004f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f48:	3204      	adds	r2, #4

08004f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f4c:	d3fb      	bcc.n	8004f46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f4e:	f7fe fbc5 	bl	80036dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f52:	f003 fbab 	bl	80086ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004f56:	f7fd fd3f 	bl	80029d8 <main>
  bx lr
 8004f5a:	4770      	bx	lr
  ldr r0, =_sdata
 8004f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f60:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8004f64:	08009a78 	.word	0x08009a78
  ldr r2, =_sbss
 8004f68:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8004f6c:	20000a3c 	.word	0x20000a3c

08004f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f70:	e7fe      	b.n	8004f70 <ADC1_2_IRQHandler>
	...

08004f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f78:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <HAL_Init+0x28>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a07      	ldr	r2, [pc, #28]	; (8004f9c <HAL_Init+0x28>)
 8004f7e:	f043 0310 	orr.w	r3, r3, #16
 8004f82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f84:	2003      	movs	r0, #3
 8004f86:	f000 f947 	bl	8005218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	f000 f808 	bl	8004fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f90:	f7fe f82e 	bl	8002ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40022000 	.word	0x40022000

08004fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fa8:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <HAL_InitTick+0x54>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <HAL_InitTick+0x58>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 f95f 	bl	8005282 <HAL_SYSTICK_Config>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e00e      	b.n	8004fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b0f      	cmp	r3, #15
 8004fd2:	d80a      	bhi.n	8004fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fdc:	f000 f927 	bl	800522e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fe0:	4a06      	ldr	r2, [pc, #24]	; (8004ffc <HAL_InitTick+0x5c>)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e000      	b.n	8004fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	2000002c 	.word	0x2000002c
 8004ff8:	2000004c 	.word	0x2000004c
 8004ffc:	20000048 	.word	0x20000048

08005000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_IncTick+0x1c>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_IncTick+0x20>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4413      	add	r3, r2
 8005010:	4a03      	ldr	r2, [pc, #12]	; (8005020 <HAL_IncTick+0x20>)
 8005012:	6013      	str	r3, [r2, #0]
}
 8005014:	bf00      	nop
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr
 800501c:	2000004c 	.word	0x2000004c
 8005020:	20000a28 	.word	0x20000a28

08005024 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  return uwTick;
 8005028:	4b02      	ldr	r3, [pc, #8]	; (8005034 <HAL_GetTick+0x10>)
 800502a:	681b      	ldr	r3, [r3, #0]
}
 800502c:	4618      	mov	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr
 8005034:	20000a28 	.word	0x20000a28

08005038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005040:	f7ff fff0 	bl	8005024 <HAL_GetTick>
 8005044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005050:	d005      	beq.n	800505e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <HAL_Delay+0x44>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800505e:	bf00      	nop
 8005060:	f7ff ffe0 	bl	8005024 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	429a      	cmp	r2, r3
 800506e:	d8f7      	bhi.n	8005060 <HAL_Delay+0x28>
  {
  }
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	2000004c 	.word	0x2000004c

08005080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005090:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800509c:	4013      	ands	r3, r2
 800509e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050b2:	4a04      	ldr	r2, [pc, #16]	; (80050c4 <__NVIC_SetPriorityGrouping+0x44>)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	60d3      	str	r3, [r2, #12]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	e000ed00 	.word	0xe000ed00

080050c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050cc:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <__NVIC_GetPriorityGrouping+0x18>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	0a1b      	lsrs	r3, r3, #8
 80050d2:	f003 0307 	and.w	r3, r3, #7
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000ed00 	.word	0xe000ed00

080050e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	db0b      	blt.n	800510e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	f003 021f 	and.w	r2, r3, #31
 80050fc:	4906      	ldr	r1, [pc, #24]	; (8005118 <__NVIC_EnableIRQ+0x34>)
 80050fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	2001      	movs	r0, #1
 8005106:	fa00 f202 	lsl.w	r2, r0, r2
 800510a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr
 8005118:	e000e100 	.word	0xe000e100

0800511c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	6039      	str	r1, [r7, #0]
 8005126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512c:	2b00      	cmp	r3, #0
 800512e:	db0a      	blt.n	8005146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	b2da      	uxtb	r2, r3
 8005134:	490c      	ldr	r1, [pc, #48]	; (8005168 <__NVIC_SetPriority+0x4c>)
 8005136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513a:	0112      	lsls	r2, r2, #4
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	440b      	add	r3, r1
 8005140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005144:	e00a      	b.n	800515c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4908      	ldr	r1, [pc, #32]	; (800516c <__NVIC_SetPriority+0x50>)
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	3b04      	subs	r3, #4
 8005154:	0112      	lsls	r2, r2, #4
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	440b      	add	r3, r1
 800515a:	761a      	strb	r2, [r3, #24]
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	e000e100 	.word	0xe000e100
 800516c:	e000ed00 	.word	0xe000ed00

08005170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005170:	b480      	push	{r7}
 8005172:	b089      	sub	sp, #36	; 0x24
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f1c3 0307 	rsb	r3, r3, #7
 800518a:	2b04      	cmp	r3, #4
 800518c:	bf28      	it	cs
 800518e:	2304      	movcs	r3, #4
 8005190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	3304      	adds	r3, #4
 8005196:	2b06      	cmp	r3, #6
 8005198:	d902      	bls.n	80051a0 <NVIC_EncodePriority+0x30>
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	3b03      	subs	r3, #3
 800519e:	e000      	b.n	80051a2 <NVIC_EncodePriority+0x32>
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43da      	mvns	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	401a      	ands	r2, r3
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	fa01 f303 	lsl.w	r3, r1, r3
 80051c2:	43d9      	mvns	r1, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c8:	4313      	orrs	r3, r2
         );
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3724      	adds	r7, #36	; 0x24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3b01      	subs	r3, #1
 80051e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051e4:	d301      	bcc.n	80051ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051e6:	2301      	movs	r3, #1
 80051e8:	e00f      	b.n	800520a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051ea:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <SysTick_Config+0x40>)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051f2:	210f      	movs	r1, #15
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051f8:	f7ff ff90 	bl	800511c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <SysTick_Config+0x40>)
 80051fe:	2200      	movs	r2, #0
 8005200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005202:	4b04      	ldr	r3, [pc, #16]	; (8005214 <SysTick_Config+0x40>)
 8005204:	2207      	movs	r2, #7
 8005206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	e000e010 	.word	0xe000e010

08005218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ff2d 	bl	8005080 <__NVIC_SetPriorityGrouping>
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800522e:	b580      	push	{r7, lr}
 8005230:	b086      	sub	sp, #24
 8005232:	af00      	add	r7, sp, #0
 8005234:	4603      	mov	r3, r0
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005240:	f7ff ff42 	bl	80050c8 <__NVIC_GetPriorityGrouping>
 8005244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	6978      	ldr	r0, [r7, #20]
 800524c:	f7ff ff90 	bl	8005170 <NVIC_EncodePriority>
 8005250:	4602      	mov	r2, r0
 8005252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005256:	4611      	mov	r1, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ff5f 	bl	800511c <__NVIC_SetPriority>
}
 800525e:	bf00      	nop
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	4603      	mov	r3, r0
 800526e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff ff35 	bl	80050e4 <__NVIC_EnableIRQ>
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff ffa2 	bl	80051d4 <SysTick_Config>
 8005290:	4603      	mov	r3, r0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d008      	beq.n	80052c2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2204      	movs	r2, #4
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e020      	b.n	8005304 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 020e 	bic.w	r2, r2, #14
 80052d0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	2101      	movs	r1, #1
 80052ec:	fa01 f202 	lsl.w	r2, r1, r2
 80052f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005302:	7bfb      	ldrb	r3, [r7, #15]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr
	...

08005310 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005322:	2b02      	cmp	r3, #2
 8005324:	d005      	beq.n	8005332 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2204      	movs	r2, #4
 800532a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
 8005330:	e051      	b.n	80053d6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 020e 	bic.w	r2, r2, #14
 8005340:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0201 	bic.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a22      	ldr	r2, [pc, #136]	; (80053e0 <HAL_DMA_Abort_IT+0xd0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d029      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xa0>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a20      	ldr	r2, [pc, #128]	; (80053e4 <HAL_DMA_Abort_IT+0xd4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d022      	beq.n	80053ac <HAL_DMA_Abort_IT+0x9c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1f      	ldr	r2, [pc, #124]	; (80053e8 <HAL_DMA_Abort_IT+0xd8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d01a      	beq.n	80053a6 <HAL_DMA_Abort_IT+0x96>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1d      	ldr	r2, [pc, #116]	; (80053ec <HAL_DMA_Abort_IT+0xdc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d012      	beq.n	80053a0 <HAL_DMA_Abort_IT+0x90>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1c      	ldr	r2, [pc, #112]	; (80053f0 <HAL_DMA_Abort_IT+0xe0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00a      	beq.n	800539a <HAL_DMA_Abort_IT+0x8a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1a      	ldr	r2, [pc, #104]	; (80053f4 <HAL_DMA_Abort_IT+0xe4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d102      	bne.n	8005394 <HAL_DMA_Abort_IT+0x84>
 800538e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005392:	e00e      	b.n	80053b2 <HAL_DMA_Abort_IT+0xa2>
 8005394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005398:	e00b      	b.n	80053b2 <HAL_DMA_Abort_IT+0xa2>
 800539a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800539e:	e008      	b.n	80053b2 <HAL_DMA_Abort_IT+0xa2>
 80053a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053a4:	e005      	b.n	80053b2 <HAL_DMA_Abort_IT+0xa2>
 80053a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053aa:	e002      	b.n	80053b2 <HAL_DMA_Abort_IT+0xa2>
 80053ac:	2310      	movs	r3, #16
 80053ae:	e000      	b.n	80053b2 <HAL_DMA_Abort_IT+0xa2>
 80053b0:	2301      	movs	r3, #1
 80053b2:	4a11      	ldr	r2, [pc, #68]	; (80053f8 <HAL_DMA_Abort_IT+0xe8>)
 80053b4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	4798      	blx	r3
    } 
  }
  return status;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40020008 	.word	0x40020008
 80053e4:	4002001c 	.word	0x4002001c
 80053e8:	40020030 	.word	0x40020030
 80053ec:	40020044 	.word	0x40020044
 80053f0:	40020058 	.word	0x40020058
 80053f4:	4002006c 	.word	0x4002006c
 80053f8:	40020000 	.word	0x40020000

080053fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b08b      	sub	sp, #44	; 0x2c
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005406:	2300      	movs	r3, #0
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800540a:	2300      	movs	r3, #0
 800540c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800540e:	e169      	b.n	80056e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005410:	2201      	movs	r2, #1
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	4013      	ands	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	429a      	cmp	r2, r3
 800542a:	f040 8158 	bne.w	80056de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	4a9a      	ldr	r2, [pc, #616]	; (800569c <HAL_GPIO_Init+0x2a0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d05e      	beq.n	80054f6 <HAL_GPIO_Init+0xfa>
 8005438:	4a98      	ldr	r2, [pc, #608]	; (800569c <HAL_GPIO_Init+0x2a0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d875      	bhi.n	800552a <HAL_GPIO_Init+0x12e>
 800543e:	4a98      	ldr	r2, [pc, #608]	; (80056a0 <HAL_GPIO_Init+0x2a4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d058      	beq.n	80054f6 <HAL_GPIO_Init+0xfa>
 8005444:	4a96      	ldr	r2, [pc, #600]	; (80056a0 <HAL_GPIO_Init+0x2a4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d86f      	bhi.n	800552a <HAL_GPIO_Init+0x12e>
 800544a:	4a96      	ldr	r2, [pc, #600]	; (80056a4 <HAL_GPIO_Init+0x2a8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d052      	beq.n	80054f6 <HAL_GPIO_Init+0xfa>
 8005450:	4a94      	ldr	r2, [pc, #592]	; (80056a4 <HAL_GPIO_Init+0x2a8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d869      	bhi.n	800552a <HAL_GPIO_Init+0x12e>
 8005456:	4a94      	ldr	r2, [pc, #592]	; (80056a8 <HAL_GPIO_Init+0x2ac>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d04c      	beq.n	80054f6 <HAL_GPIO_Init+0xfa>
 800545c:	4a92      	ldr	r2, [pc, #584]	; (80056a8 <HAL_GPIO_Init+0x2ac>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d863      	bhi.n	800552a <HAL_GPIO_Init+0x12e>
 8005462:	4a92      	ldr	r2, [pc, #584]	; (80056ac <HAL_GPIO_Init+0x2b0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d046      	beq.n	80054f6 <HAL_GPIO_Init+0xfa>
 8005468:	4a90      	ldr	r2, [pc, #576]	; (80056ac <HAL_GPIO_Init+0x2b0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d85d      	bhi.n	800552a <HAL_GPIO_Init+0x12e>
 800546e:	2b12      	cmp	r3, #18
 8005470:	d82a      	bhi.n	80054c8 <HAL_GPIO_Init+0xcc>
 8005472:	2b12      	cmp	r3, #18
 8005474:	d859      	bhi.n	800552a <HAL_GPIO_Init+0x12e>
 8005476:	a201      	add	r2, pc, #4	; (adr r2, 800547c <HAL_GPIO_Init+0x80>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	080054f7 	.word	0x080054f7
 8005480:	080054d1 	.word	0x080054d1
 8005484:	080054e3 	.word	0x080054e3
 8005488:	08005525 	.word	0x08005525
 800548c:	0800552b 	.word	0x0800552b
 8005490:	0800552b 	.word	0x0800552b
 8005494:	0800552b 	.word	0x0800552b
 8005498:	0800552b 	.word	0x0800552b
 800549c:	0800552b 	.word	0x0800552b
 80054a0:	0800552b 	.word	0x0800552b
 80054a4:	0800552b 	.word	0x0800552b
 80054a8:	0800552b 	.word	0x0800552b
 80054ac:	0800552b 	.word	0x0800552b
 80054b0:	0800552b 	.word	0x0800552b
 80054b4:	0800552b 	.word	0x0800552b
 80054b8:	0800552b 	.word	0x0800552b
 80054bc:	0800552b 	.word	0x0800552b
 80054c0:	080054d9 	.word	0x080054d9
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	4a79      	ldr	r2, [pc, #484]	; (80056b0 <HAL_GPIO_Init+0x2b4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80054ce:	e02c      	b.n	800552a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	623b      	str	r3, [r7, #32]
          break;
 80054d6:	e029      	b.n	800552c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	3304      	adds	r3, #4
 80054de:	623b      	str	r3, [r7, #32]
          break;
 80054e0:	e024      	b.n	800552c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	3308      	adds	r3, #8
 80054e8:	623b      	str	r3, [r7, #32]
          break;
 80054ea:	e01f      	b.n	800552c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	330c      	adds	r3, #12
 80054f2:	623b      	str	r3, [r7, #32]
          break;
 80054f4:	e01a      	b.n	800552c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80054fe:	2304      	movs	r3, #4
 8005500:	623b      	str	r3, [r7, #32]
          break;
 8005502:	e013      	b.n	800552c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d105      	bne.n	8005518 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800550c:	2308      	movs	r3, #8
 800550e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	611a      	str	r2, [r3, #16]
          break;
 8005516:	e009      	b.n	800552c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005518:	2308      	movs	r3, #8
 800551a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	615a      	str	r2, [r3, #20]
          break;
 8005522:	e003      	b.n	800552c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005524:	2300      	movs	r3, #0
 8005526:	623b      	str	r3, [r7, #32]
          break;
 8005528:	e000      	b.n	800552c <HAL_GPIO_Init+0x130>
          break;
 800552a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2bff      	cmp	r3, #255	; 0xff
 8005530:	d801      	bhi.n	8005536 <HAL_GPIO_Init+0x13a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	e001      	b.n	800553a <HAL_GPIO_Init+0x13e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3304      	adds	r3, #4
 800553a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2bff      	cmp	r3, #255	; 0xff
 8005540:	d802      	bhi.n	8005548 <HAL_GPIO_Init+0x14c>
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	e002      	b.n	800554e <HAL_GPIO_Init+0x152>
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	3b08      	subs	r3, #8
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	210f      	movs	r1, #15
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	43db      	mvns	r3, r3
 800555e:	401a      	ands	r2, r3
 8005560:	6a39      	ldr	r1, [r7, #32]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	fa01 f303 	lsl.w	r3, r1, r3
 8005568:	431a      	orrs	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80b1 	beq.w	80056de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800557c:	4b4d      	ldr	r3, [pc, #308]	; (80056b4 <HAL_GPIO_Init+0x2b8>)
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	4a4c      	ldr	r2, [pc, #304]	; (80056b4 <HAL_GPIO_Init+0x2b8>)
 8005582:	f043 0301 	orr.w	r3, r3, #1
 8005586:	6193      	str	r3, [r2, #24]
 8005588:	4b4a      	ldr	r3, [pc, #296]	; (80056b4 <HAL_GPIO_Init+0x2b8>)
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005594:	4a48      	ldr	r2, [pc, #288]	; (80056b8 <HAL_GPIO_Init+0x2bc>)
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	089b      	lsrs	r3, r3, #2
 800559a:	3302      	adds	r3, #2
 800559c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	220f      	movs	r2, #15
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4013      	ands	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a40      	ldr	r2, [pc, #256]	; (80056bc <HAL_GPIO_Init+0x2c0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <HAL_GPIO_Init+0x1ec>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a3f      	ldr	r2, [pc, #252]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00d      	beq.n	80055e4 <HAL_GPIO_Init+0x1e8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a3e      	ldr	r2, [pc, #248]	; (80056c4 <HAL_GPIO_Init+0x2c8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d007      	beq.n	80055e0 <HAL_GPIO_Init+0x1e4>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a3d      	ldr	r2, [pc, #244]	; (80056c8 <HAL_GPIO_Init+0x2cc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d101      	bne.n	80055dc <HAL_GPIO_Init+0x1e0>
 80055d8:	2303      	movs	r3, #3
 80055da:	e006      	b.n	80055ea <HAL_GPIO_Init+0x1ee>
 80055dc:	2304      	movs	r3, #4
 80055de:	e004      	b.n	80055ea <HAL_GPIO_Init+0x1ee>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e002      	b.n	80055ea <HAL_GPIO_Init+0x1ee>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <HAL_GPIO_Init+0x1ee>
 80055e8:	2300      	movs	r3, #0
 80055ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ec:	f002 0203 	and.w	r2, r2, #3
 80055f0:	0092      	lsls	r2, r2, #2
 80055f2:	4093      	lsls	r3, r2
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80055fa:	492f      	ldr	r1, [pc, #188]	; (80056b8 <HAL_GPIO_Init+0x2bc>)
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	089b      	lsrs	r3, r3, #2
 8005600:	3302      	adds	r3, #2
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d006      	beq.n	8005622 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005614:	4b2d      	ldr	r3, [pc, #180]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	492c      	ldr	r1, [pc, #176]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	4313      	orrs	r3, r2
 800561e:	600b      	str	r3, [r1, #0]
 8005620:	e006      	b.n	8005630 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005622:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	43db      	mvns	r3, r3
 800562a:	4928      	ldr	r1, [pc, #160]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 800562c:	4013      	ands	r3, r2
 800562e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d006      	beq.n	800564a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800563c:	4b23      	ldr	r3, [pc, #140]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	4922      	ldr	r1, [pc, #136]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	4313      	orrs	r3, r2
 8005646:	604b      	str	r3, [r1, #4]
 8005648:	e006      	b.n	8005658 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800564a:	4b20      	ldr	r3, [pc, #128]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	43db      	mvns	r3, r3
 8005652:	491e      	ldr	r1, [pc, #120]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 8005654:	4013      	ands	r3, r2
 8005656:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d006      	beq.n	8005672 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005664:	4b19      	ldr	r3, [pc, #100]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	4918      	ldr	r1, [pc, #96]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	4313      	orrs	r3, r2
 800566e:	608b      	str	r3, [r1, #8]
 8005670:	e006      	b.n	8005680 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005672:	4b16      	ldr	r3, [pc, #88]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	43db      	mvns	r3, r3
 800567a:	4914      	ldr	r1, [pc, #80]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 800567c:	4013      	ands	r3, r2
 800567e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d021      	beq.n	80056d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	490e      	ldr	r1, [pc, #56]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	4313      	orrs	r3, r2
 8005696:	60cb      	str	r3, [r1, #12]
 8005698:	e021      	b.n	80056de <HAL_GPIO_Init+0x2e2>
 800569a:	bf00      	nop
 800569c:	10320000 	.word	0x10320000
 80056a0:	10310000 	.word	0x10310000
 80056a4:	10220000 	.word	0x10220000
 80056a8:	10210000 	.word	0x10210000
 80056ac:	10120000 	.word	0x10120000
 80056b0:	10110000 	.word	0x10110000
 80056b4:	40021000 	.word	0x40021000
 80056b8:	40010000 	.word	0x40010000
 80056bc:	40010800 	.word	0x40010800
 80056c0:	40010c00 	.word	0x40010c00
 80056c4:	40011000 	.word	0x40011000
 80056c8:	40011400 	.word	0x40011400
 80056cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <HAL_GPIO_Init+0x304>)
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	43db      	mvns	r3, r3
 80056d8:	4909      	ldr	r1, [pc, #36]	; (8005700 <HAL_GPIO_Init+0x304>)
 80056da:	4013      	ands	r3, r2
 80056dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	3301      	adds	r3, #1
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	fa22 f303 	lsr.w	r3, r2, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f47f ae8e 	bne.w	8005410 <HAL_GPIO_Init+0x14>
  }
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	372c      	adds	r7, #44	; 0x2c
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr
 8005700:	40010400 	.word	0x40010400

08005704 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005704:	b480      	push	{r7}
 8005706:	b089      	sub	sp, #36	; 0x24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005712:	e09a      	b.n	800584a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005714:	2201      	movs	r2, #1
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	4013      	ands	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 808d 	beq.w	8005844 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800572a:	4a4e      	ldr	r2, [pc, #312]	; (8005864 <HAL_GPIO_DeInit+0x160>)
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	089b      	lsrs	r3, r3, #2
 8005730:	3302      	adds	r3, #2
 8005732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005736:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	220f      	movs	r2, #15
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4013      	ands	r3, r2
 800574a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a46      	ldr	r2, [pc, #280]	; (8005868 <HAL_GPIO_DeInit+0x164>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d013      	beq.n	800577c <HAL_GPIO_DeInit+0x78>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a45      	ldr	r2, [pc, #276]	; (800586c <HAL_GPIO_DeInit+0x168>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00d      	beq.n	8005778 <HAL_GPIO_DeInit+0x74>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a44      	ldr	r2, [pc, #272]	; (8005870 <HAL_GPIO_DeInit+0x16c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d007      	beq.n	8005774 <HAL_GPIO_DeInit+0x70>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a43      	ldr	r2, [pc, #268]	; (8005874 <HAL_GPIO_DeInit+0x170>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d101      	bne.n	8005770 <HAL_GPIO_DeInit+0x6c>
 800576c:	2303      	movs	r3, #3
 800576e:	e006      	b.n	800577e <HAL_GPIO_DeInit+0x7a>
 8005770:	2304      	movs	r3, #4
 8005772:	e004      	b.n	800577e <HAL_GPIO_DeInit+0x7a>
 8005774:	2302      	movs	r3, #2
 8005776:	e002      	b.n	800577e <HAL_GPIO_DeInit+0x7a>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <HAL_GPIO_DeInit+0x7a>
 800577c:	2300      	movs	r3, #0
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	f002 0203 	and.w	r2, r2, #3
 8005784:	0092      	lsls	r2, r2, #2
 8005786:	4093      	lsls	r3, r2
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	429a      	cmp	r2, r3
 800578c:	d132      	bne.n	80057f4 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	220f      	movs	r2, #15
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800579e:	4a31      	ldr	r2, [pc, #196]	; (8005864 <HAL_GPIO_DeInit+0x160>)
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	089b      	lsrs	r3, r3, #2
 80057a4:	3302      	adds	r3, #2
 80057a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	43da      	mvns	r2, r3
 80057ae:	482d      	ldr	r0, [pc, #180]	; (8005864 <HAL_GPIO_DeInit+0x160>)
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	089b      	lsrs	r3, r3, #2
 80057b4:	400a      	ands	r2, r1
 80057b6:	3302      	adds	r3, #2
 80057b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80057bc:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <HAL_GPIO_DeInit+0x174>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	43db      	mvns	r3, r3
 80057c4:	492c      	ldr	r1, [pc, #176]	; (8005878 <HAL_GPIO_DeInit+0x174>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80057ca:	4b2b      	ldr	r3, [pc, #172]	; (8005878 <HAL_GPIO_DeInit+0x174>)
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	43db      	mvns	r3, r3
 80057d2:	4929      	ldr	r1, [pc, #164]	; (8005878 <HAL_GPIO_DeInit+0x174>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80057d8:	4b27      	ldr	r3, [pc, #156]	; (8005878 <HAL_GPIO_DeInit+0x174>)
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	43db      	mvns	r3, r3
 80057e0:	4925      	ldr	r1, [pc, #148]	; (8005878 <HAL_GPIO_DeInit+0x174>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80057e6:	4b24      	ldr	r3, [pc, #144]	; (8005878 <HAL_GPIO_DeInit+0x174>)
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	43db      	mvns	r3, r3
 80057ee:	4922      	ldr	r1, [pc, #136]	; (8005878 <HAL_GPIO_DeInit+0x174>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2bff      	cmp	r3, #255	; 0xff
 80057f8:	d801      	bhi.n	80057fe <HAL_GPIO_DeInit+0xfa>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	e001      	b.n	8005802 <HAL_GPIO_DeInit+0xfe>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2bff      	cmp	r3, #255	; 0xff
 8005808:	d802      	bhi.n	8005810 <HAL_GPIO_DeInit+0x10c>
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	e002      	b.n	8005816 <HAL_GPIO_DeInit+0x112>
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	3b08      	subs	r3, #8
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	210f      	movs	r1, #15
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	fa01 f303 	lsl.w	r3, r1, r3
 8005824:	43db      	mvns	r3, r3
 8005826:	401a      	ands	r2, r3
 8005828:	2104      	movs	r1, #4
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	fa01 f303 	lsl.w	r3, r1, r3
 8005830:	431a      	orrs	r2, r3
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	43db      	mvns	r3, r3
 800583e:	401a      	ands	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	3301      	adds	r3, #1
 8005848:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	fa22 f303 	lsr.w	r3, r2, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	f47f af5e 	bne.w	8005714 <HAL_GPIO_DeInit+0x10>
  }
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	3724      	adds	r7, #36	; 0x24
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr
 8005864:	40010000 	.word	0x40010000
 8005868:	40010800 	.word	0x40010800
 800586c:	40010c00 	.word	0x40010c00
 8005870:	40011000 	.word	0x40011000
 8005874:	40011400 	.word	0x40011400
 8005878:	40010400 	.word	0x40010400

0800587c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	887b      	ldrh	r3, [r7, #2]
 800588e:	4013      	ands	r3, r2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
 8005898:	e001      	b.n	800589e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800589a:	2300      	movs	r3, #0
 800589c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800589e:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr

080058aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	807b      	strh	r3, [r7, #2]
 80058b6:	4613      	mov	r3, r2
 80058b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058ba:	787b      	ldrb	r3, [r7, #1]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058c0:	887a      	ldrh	r2, [r7, #2]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80058c6:	e003      	b.n	80058d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80058c8:	887b      	ldrh	r3, [r7, #2]
 80058ca:	041a      	lsls	r2, r3, #16
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	611a      	str	r2, [r3, #16]
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr

080058da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058ec:	887a      	ldrh	r2, [r7, #2]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4013      	ands	r3, r2
 80058f2:	041a      	lsls	r2, r3, #16
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	43d9      	mvns	r1, r3
 80058f8:	887b      	ldrh	r3, [r7, #2]
 80058fa:	400b      	ands	r3, r1
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	611a      	str	r2, [r3, #16]
}
 8005902:	bf00      	nop
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005916:	4b08      	ldr	r3, [pc, #32]	; (8005938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	88fb      	ldrh	r3, [r7, #6]
 800591c:	4013      	ands	r3, r2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d006      	beq.n	8005930 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005922:	4a05      	ldr	r2, [pc, #20]	; (8005938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	4618      	mov	r0, r3
 800592c:	f7fd fb06 	bl	8002f3c <HAL_GPIO_EXTI_Callback>
  }
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40010400 	.word	0x40010400

0800593c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e12b      	b.n	8005ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fd fb76 	bl	8003054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2224      	movs	r2, #36	; 0x24
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0201 	bic.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800598e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800599e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059a0:	f000 fffa 	bl	8006998 <HAL_RCC_GetPCLK1Freq>
 80059a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4a81      	ldr	r2, [pc, #516]	; (8005bb0 <HAL_I2C_Init+0x274>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d807      	bhi.n	80059c0 <HAL_I2C_Init+0x84>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a80      	ldr	r2, [pc, #512]	; (8005bb4 <HAL_I2C_Init+0x278>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	bf94      	ite	ls
 80059b8:	2301      	movls	r3, #1
 80059ba:	2300      	movhi	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e006      	b.n	80059ce <HAL_I2C_Init+0x92>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4a7d      	ldr	r2, [pc, #500]	; (8005bb8 <HAL_I2C_Init+0x27c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	bf94      	ite	ls
 80059c8:	2301      	movls	r3, #1
 80059ca:	2300      	movhi	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0e7      	b.n	8005ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4a78      	ldr	r2, [pc, #480]	; (8005bbc <HAL_I2C_Init+0x280>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	0c9b      	lsrs	r3, r3, #18
 80059e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	4a6a      	ldr	r2, [pc, #424]	; (8005bb0 <HAL_I2C_Init+0x274>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d802      	bhi.n	8005a10 <HAL_I2C_Init+0xd4>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	e009      	b.n	8005a24 <HAL_I2C_Init+0xe8>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	4a69      	ldr	r2, [pc, #420]	; (8005bc0 <HAL_I2C_Init+0x284>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	099b      	lsrs	r3, r3, #6
 8005a22:	3301      	adds	r3, #1
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	495c      	ldr	r1, [pc, #368]	; (8005bb0 <HAL_I2C_Init+0x274>)
 8005a40:	428b      	cmp	r3, r1
 8005a42:	d819      	bhi.n	8005a78 <HAL_I2C_Init+0x13c>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	1e59      	subs	r1, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a52:	1c59      	adds	r1, r3, #1
 8005a54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a58:	400b      	ands	r3, r1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_I2C_Init+0x138>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1e59      	subs	r1, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a72:	e051      	b.n	8005b18 <HAL_I2C_Init+0x1dc>
 8005a74:	2304      	movs	r3, #4
 8005a76:	e04f      	b.n	8005b18 <HAL_I2C_Init+0x1dc>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d111      	bne.n	8005aa4 <HAL_I2C_Init+0x168>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1e58      	subs	r0, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6859      	ldr	r1, [r3, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	440b      	add	r3, r1
 8005a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a92:	3301      	adds	r3, #1
 8005a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bf0c      	ite	eq
 8005a9c:	2301      	moveq	r3, #1
 8005a9e:	2300      	movne	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	e012      	b.n	8005aca <HAL_I2C_Init+0x18e>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	1e58      	subs	r0, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6859      	ldr	r1, [r3, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	0099      	lsls	r1, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aba:	3301      	adds	r3, #1
 8005abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_I2C_Init+0x196>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e022      	b.n	8005b18 <HAL_I2C_Init+0x1dc>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10e      	bne.n	8005af8 <HAL_I2C_Init+0x1bc>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1e58      	subs	r0, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6859      	ldr	r1, [r3, #4]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	440b      	add	r3, r1
 8005ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aec:	3301      	adds	r3, #1
 8005aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af6:	e00f      	b.n	8005b18 <HAL_I2C_Init+0x1dc>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	1e58      	subs	r0, r3, #1
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6859      	ldr	r1, [r3, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	0099      	lsls	r1, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	6809      	ldr	r1, [r1, #0]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6911      	ldr	r1, [r2, #16]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68d2      	ldr	r2, [r2, #12]
 8005b52:	4311      	orrs	r1, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	000186a0 	.word	0x000186a0
 8005bb4:	001e847f 	.word	0x001e847f
 8005bb8:	003d08ff 	.word	0x003d08ff
 8005bbc:	431bde83 	.word	0x431bde83
 8005bc0:	10624dd3 	.word	0x10624dd3

08005bc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	4608      	mov	r0, r1
 8005bce:	4611      	mov	r1, r2
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	817b      	strh	r3, [r7, #10]
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	813b      	strh	r3, [r7, #8]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bde:	f7ff fa21 	bl	8005024 <HAL_GetTick>
 8005be2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	f040 80d9 	bne.w	8005da4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	2319      	movs	r3, #25
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	496d      	ldr	r1, [pc, #436]	; (8005db0 <HAL_I2C_Mem_Write+0x1ec>)
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f971 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e0cc      	b.n	8005da6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <HAL_I2C_Mem_Write+0x56>
 8005c16:	2302      	movs	r3, #2
 8005c18:	e0c5      	b.n	8005da6 <HAL_I2C_Mem_Write+0x1e2>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d007      	beq.n	8005c40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0201 	orr.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2221      	movs	r2, #33	; 0x21
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2240      	movs	r2, #64	; 0x40
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a3a      	ldr	r2, [r7, #32]
 8005c6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4a4d      	ldr	r2, [pc, #308]	; (8005db4 <HAL_I2C_Mem_Write+0x1f0>)
 8005c80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c82:	88f8      	ldrh	r0, [r7, #6]
 8005c84:	893a      	ldrh	r2, [r7, #8]
 8005c86:	8979      	ldrh	r1, [r7, #10]
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	4603      	mov	r3, r0
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f890 	bl	8005db8 <I2C_RequestMemoryWrite>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d052      	beq.n	8005d44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e081      	b.n	8005da6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f9f2 	bl	8006090 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00d      	beq.n	8005cce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d107      	bne.n	8005cca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e06b      	b.n	8005da6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	781a      	ldrb	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d11b      	bne.n	8005d44 <HAL_I2C_Mem_Write+0x180>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d017      	beq.n	8005d44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	781a      	ldrb	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1aa      	bne.n	8005ca2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 f9de 	bl	8006112 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00d      	beq.n	8005d78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d107      	bne.n	8005d74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e016      	b.n	8005da6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e000      	b.n	8005da6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	00100002 	.word	0x00100002
 8005db4:	ffff0000 	.word	0xffff0000

08005db8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	817b      	strh	r3, [r7, #10]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	813b      	strh	r3, [r7, #8]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005de0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f878 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00d      	beq.n	8005e16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e08:	d103      	bne.n	8005e12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e05f      	b.n	8005ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e16:	897b      	ldrh	r3, [r7, #10]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	6a3a      	ldr	r2, [r7, #32]
 8005e2a:	492d      	ldr	r1, [pc, #180]	; (8005ee0 <I2C_RequestMemoryWrite+0x128>)
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f8b0 	bl	8005f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e04c      	b.n	8005ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e54:	6a39      	ldr	r1, [r7, #32]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 f91a 	bl	8006090 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00d      	beq.n	8005e7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d107      	bne.n	8005e7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e02b      	b.n	8005ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e7e:	88fb      	ldrh	r3, [r7, #6]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d105      	bne.n	8005e90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e84:	893b      	ldrh	r3, [r7, #8]
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	611a      	str	r2, [r3, #16]
 8005e8e:	e021      	b.n	8005ed4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e90:	893b      	ldrh	r3, [r7, #8]
 8005e92:	0a1b      	lsrs	r3, r3, #8
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea0:	6a39      	ldr	r1, [r7, #32]
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 f8f4 	bl	8006090 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00d      	beq.n	8005eca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d107      	bne.n	8005ec6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e005      	b.n	8005ed6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eca:	893b      	ldrh	r3, [r7, #8]
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	00010002 	.word	0x00010002

08005ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ef4:	e025      	b.n	8005f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005efc:	d021      	beq.n	8005f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efe:	f7ff f891 	bl	8005024 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d116      	bne.n	8005f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e023      	b.n	8005f8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d10d      	bne.n	8005f68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	43da      	mvns	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4013      	ands	r3, r2
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bf0c      	ite	eq
 8005f5e:	2301      	moveq	r3, #1
 8005f60:	2300      	movne	r3, #0
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	461a      	mov	r2, r3
 8005f66:	e00c      	b.n	8005f82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	43da      	mvns	r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4013      	ands	r3, r2
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d0b6      	beq.n	8005ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fa0:	e051      	b.n	8006046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb0:	d123      	bne.n	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	f043 0204 	orr.w	r2, r3, #4
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e046      	b.n	8006088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006000:	d021      	beq.n	8006046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006002:	f7ff f80f 	bl	8005024 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	429a      	cmp	r2, r3
 8006010:	d302      	bcc.n	8006018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d116      	bne.n	8006046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	f043 0220 	orr.w	r2, r3, #32
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e020      	b.n	8006088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	0c1b      	lsrs	r3, r3, #16
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10c      	bne.n	800606a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	43da      	mvns	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4013      	ands	r3, r2
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	bf14      	ite	ne
 8006062:	2301      	movne	r3, #1
 8006064:	2300      	moveq	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	e00b      	b.n	8006082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	43da      	mvns	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4013      	ands	r3, r2
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	bf14      	ite	ne
 800607c:	2301      	movne	r3, #1
 800607e:	2300      	moveq	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d18d      	bne.n	8005fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800609c:	e02d      	b.n	80060fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f878 	bl	8006194 <I2C_IsAcknowledgeFailed>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e02d      	b.n	800610a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b4:	d021      	beq.n	80060fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b6:	f7fe ffb5 	bl	8005024 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d302      	bcc.n	80060cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d116      	bne.n	80060fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	f043 0220 	orr.w	r2, r3, #32
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e007      	b.n	800610a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006104:	2b80      	cmp	r3, #128	; 0x80
 8006106:	d1ca      	bne.n	800609e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800611e:	e02d      	b.n	800617c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f837 	bl	8006194 <I2C_IsAcknowledgeFailed>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e02d      	b.n	800618c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006136:	d021      	beq.n	800617c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006138:	f7fe ff74 	bl	8005024 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	429a      	cmp	r2, r3
 8006146:	d302      	bcc.n	800614e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d116      	bne.n	800617c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006168:	f043 0220 	orr.w	r2, r3, #32
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e007      	b.n	800618c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b04      	cmp	r3, #4
 8006188:	d1ca      	bne.n	8006120 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061aa:	d11b      	bne.n	80061e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	f043 0204 	orr.w	r2, r3, #4
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr

080061f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e26c      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 8087 	beq.w	800631e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006210:	4b92      	ldr	r3, [pc, #584]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f003 030c 	and.w	r3, r3, #12
 8006218:	2b04      	cmp	r3, #4
 800621a:	d00c      	beq.n	8006236 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800621c:	4b8f      	ldr	r3, [pc, #572]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f003 030c 	and.w	r3, r3, #12
 8006224:	2b08      	cmp	r3, #8
 8006226:	d112      	bne.n	800624e <HAL_RCC_OscConfig+0x5e>
 8006228:	4b8c      	ldr	r3, [pc, #560]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006234:	d10b      	bne.n	800624e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006236:	4b89      	ldr	r3, [pc, #548]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d06c      	beq.n	800631c <HAL_RCC_OscConfig+0x12c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d168      	bne.n	800631c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e246      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006256:	d106      	bne.n	8006266 <HAL_RCC_OscConfig+0x76>
 8006258:	4b80      	ldr	r3, [pc, #512]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a7f      	ldr	r2, [pc, #508]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 800625e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	e02e      	b.n	80062c4 <HAL_RCC_OscConfig+0xd4>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10c      	bne.n	8006288 <HAL_RCC_OscConfig+0x98>
 800626e:	4b7b      	ldr	r3, [pc, #492]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a7a      	ldr	r2, [pc, #488]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	4b78      	ldr	r3, [pc, #480]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a77      	ldr	r2, [pc, #476]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	e01d      	b.n	80062c4 <HAL_RCC_OscConfig+0xd4>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006290:	d10c      	bne.n	80062ac <HAL_RCC_OscConfig+0xbc>
 8006292:	4b72      	ldr	r3, [pc, #456]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a71      	ldr	r2, [pc, #452]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4b6f      	ldr	r3, [pc, #444]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a6e      	ldr	r2, [pc, #440]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 80062a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	e00b      	b.n	80062c4 <HAL_RCC_OscConfig+0xd4>
 80062ac:	4b6b      	ldr	r3, [pc, #428]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a6a      	ldr	r2, [pc, #424]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 80062b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	4b68      	ldr	r3, [pc, #416]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a67      	ldr	r2, [pc, #412]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 80062be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d013      	beq.n	80062f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062cc:	f7fe feaa 	bl	8005024 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062d4:	f7fe fea6 	bl	8005024 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b64      	cmp	r3, #100	; 0x64
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e1fa      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062e6:	4b5d      	ldr	r3, [pc, #372]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0f0      	beq.n	80062d4 <HAL_RCC_OscConfig+0xe4>
 80062f2:	e014      	b.n	800631e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f4:	f7fe fe96 	bl	8005024 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062fc:	f7fe fe92 	bl	8005024 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b64      	cmp	r3, #100	; 0x64
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e1e6      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800630e:	4b53      	ldr	r3, [pc, #332]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1f0      	bne.n	80062fc <HAL_RCC_OscConfig+0x10c>
 800631a:	e000      	b.n	800631e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800631c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d063      	beq.n	80063f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800632a:	4b4c      	ldr	r3, [pc, #304]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f003 030c 	and.w	r3, r3, #12
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00b      	beq.n	800634e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006336:	4b49      	ldr	r3, [pc, #292]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f003 030c 	and.w	r3, r3, #12
 800633e:	2b08      	cmp	r3, #8
 8006340:	d11c      	bne.n	800637c <HAL_RCC_OscConfig+0x18c>
 8006342:	4b46      	ldr	r3, [pc, #280]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d116      	bne.n	800637c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800634e:	4b43      	ldr	r3, [pc, #268]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <HAL_RCC_OscConfig+0x176>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d001      	beq.n	8006366 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e1ba      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006366:	4b3d      	ldr	r3, [pc, #244]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	4939      	ldr	r1, [pc, #228]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006376:	4313      	orrs	r3, r2
 8006378:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800637a:	e03a      	b.n	80063f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d020      	beq.n	80063c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006384:	4b36      	ldr	r3, [pc, #216]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006386:	2201      	movs	r2, #1
 8006388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638a:	f7fe fe4b 	bl	8005024 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006392:	f7fe fe47 	bl	8005024 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e19b      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a4:	4b2d      	ldr	r3, [pc, #180]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0f0      	beq.n	8006392 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b0:	4b2a      	ldr	r3, [pc, #168]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	4927      	ldr	r1, [pc, #156]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	600b      	str	r3, [r1, #0]
 80063c4:	e015      	b.n	80063f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063c6:	4b26      	ldr	r3, [pc, #152]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063cc:	f7fe fe2a 	bl	8005024 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063d4:	f7fe fe26 	bl	8005024 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e17a      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063e6:	4b1d      	ldr	r3, [pc, #116]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f0      	bne.n	80063d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d03a      	beq.n	8006474 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d019      	beq.n	800643a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006406:	4b17      	ldr	r3, [pc, #92]	; (8006464 <HAL_RCC_OscConfig+0x274>)
 8006408:	2201      	movs	r2, #1
 800640a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800640c:	f7fe fe0a 	bl	8005024 <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006414:	f7fe fe06 	bl	8005024 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e15a      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006426:	4b0d      	ldr	r3, [pc, #52]	; (800645c <HAL_RCC_OscConfig+0x26c>)
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f0      	beq.n	8006414 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006432:	2001      	movs	r0, #1
 8006434:	f000 fad8 	bl	80069e8 <RCC_Delay>
 8006438:	e01c      	b.n	8006474 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <HAL_RCC_OscConfig+0x274>)
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006440:	f7fe fdf0 	bl	8005024 <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006446:	e00f      	b.n	8006468 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006448:	f7fe fdec 	bl	8005024 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d908      	bls.n	8006468 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e140      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
 800645a:	bf00      	nop
 800645c:	40021000 	.word	0x40021000
 8006460:	42420000 	.word	0x42420000
 8006464:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006468:	4b9e      	ldr	r3, [pc, #632]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e9      	bne.n	8006448 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 80a6 	beq.w	80065ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006482:	2300      	movs	r3, #0
 8006484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006486:	4b97      	ldr	r3, [pc, #604]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10d      	bne.n	80064ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006492:	4b94      	ldr	r3, [pc, #592]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	4a93      	ldr	r2, [pc, #588]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800649c:	61d3      	str	r3, [r2, #28]
 800649e:	4b91      	ldr	r3, [pc, #580]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a6:	60bb      	str	r3, [r7, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064aa:	2301      	movs	r3, #1
 80064ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ae:	4b8e      	ldr	r3, [pc, #568]	; (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d118      	bne.n	80064ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064ba:	4b8b      	ldr	r3, [pc, #556]	; (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a8a      	ldr	r2, [pc, #552]	; (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80064c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064c6:	f7fe fdad 	bl	8005024 <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ce:	f7fe fda9 	bl	8005024 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b64      	cmp	r3, #100	; 0x64
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e0fd      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e0:	4b81      	ldr	r3, [pc, #516]	; (80066e8 <HAL_RCC_OscConfig+0x4f8>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0f0      	beq.n	80064ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d106      	bne.n	8006502 <HAL_RCC_OscConfig+0x312>
 80064f4:	4b7b      	ldr	r3, [pc, #492]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	4a7a      	ldr	r2, [pc, #488]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	6213      	str	r3, [r2, #32]
 8006500:	e02d      	b.n	800655e <HAL_RCC_OscConfig+0x36e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10c      	bne.n	8006524 <HAL_RCC_OscConfig+0x334>
 800650a:	4b76      	ldr	r3, [pc, #472]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	4a75      	ldr	r2, [pc, #468]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	6213      	str	r3, [r2, #32]
 8006516:	4b73      	ldr	r3, [pc, #460]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	4a72      	ldr	r2, [pc, #456]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 800651c:	f023 0304 	bic.w	r3, r3, #4
 8006520:	6213      	str	r3, [r2, #32]
 8006522:	e01c      	b.n	800655e <HAL_RCC_OscConfig+0x36e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	2b05      	cmp	r3, #5
 800652a:	d10c      	bne.n	8006546 <HAL_RCC_OscConfig+0x356>
 800652c:	4b6d      	ldr	r3, [pc, #436]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	4a6c      	ldr	r2, [pc, #432]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006532:	f043 0304 	orr.w	r3, r3, #4
 8006536:	6213      	str	r3, [r2, #32]
 8006538:	4b6a      	ldr	r3, [pc, #424]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	4a69      	ldr	r2, [pc, #420]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 800653e:	f043 0301 	orr.w	r3, r3, #1
 8006542:	6213      	str	r3, [r2, #32]
 8006544:	e00b      	b.n	800655e <HAL_RCC_OscConfig+0x36e>
 8006546:	4b67      	ldr	r3, [pc, #412]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	4a66      	ldr	r2, [pc, #408]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	6213      	str	r3, [r2, #32]
 8006552:	4b64      	ldr	r3, [pc, #400]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	4a63      	ldr	r2, [pc, #396]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006558:	f023 0304 	bic.w	r3, r3, #4
 800655c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d015      	beq.n	8006592 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006566:	f7fe fd5d 	bl	8005024 <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800656c:	e00a      	b.n	8006584 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800656e:	f7fe fd59 	bl	8005024 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	f241 3288 	movw	r2, #5000	; 0x1388
 800657c:	4293      	cmp	r3, r2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e0ab      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006584:	4b57      	ldr	r3, [pc, #348]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0ee      	beq.n	800656e <HAL_RCC_OscConfig+0x37e>
 8006590:	e014      	b.n	80065bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006592:	f7fe fd47 	bl	8005024 <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006598:	e00a      	b.n	80065b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800659a:	f7fe fd43 	bl	8005024 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e095      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065b0:	4b4c      	ldr	r3, [pc, #304]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1ee      	bne.n	800659a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d105      	bne.n	80065ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065c2:	4b48      	ldr	r3, [pc, #288]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	4a47      	ldr	r2, [pc, #284]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 80065c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 8081 	beq.w	80066da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065d8:	4b42      	ldr	r3, [pc, #264]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f003 030c 	and.w	r3, r3, #12
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d061      	beq.n	80066a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d146      	bne.n	800667a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ec:	4b3f      	ldr	r3, [pc, #252]	; (80066ec <HAL_RCC_OscConfig+0x4fc>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f2:	f7fe fd17 	bl	8005024 <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065fa:	f7fe fd13 	bl	8005024 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e067      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800660c:	4b35      	ldr	r3, [pc, #212]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1f0      	bne.n	80065fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006620:	d108      	bne.n	8006634 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006622:	4b30      	ldr	r3, [pc, #192]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	492d      	ldr	r1, [pc, #180]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006630:	4313      	orrs	r3, r2
 8006632:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006634:	4b2b      	ldr	r3, [pc, #172]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a19      	ldr	r1, [r3, #32]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	430b      	orrs	r3, r1
 8006646:	4927      	ldr	r1, [pc, #156]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 8006648:	4313      	orrs	r3, r2
 800664a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800664c:	4b27      	ldr	r3, [pc, #156]	; (80066ec <HAL_RCC_OscConfig+0x4fc>)
 800664e:	2201      	movs	r2, #1
 8006650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006652:	f7fe fce7 	bl	8005024 <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800665a:	f7fe fce3 	bl	8005024 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e037      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800666c:	4b1d      	ldr	r3, [pc, #116]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f0      	beq.n	800665a <HAL_RCC_OscConfig+0x46a>
 8006678:	e02f      	b.n	80066da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800667a:	4b1c      	ldr	r3, [pc, #112]	; (80066ec <HAL_RCC_OscConfig+0x4fc>)
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006680:	f7fe fcd0 	bl	8005024 <HAL_GetTick>
 8006684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006686:	e008      	b.n	800669a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006688:	f7fe fccc 	bl	8005024 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e020      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800669a:	4b12      	ldr	r3, [pc, #72]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f0      	bne.n	8006688 <HAL_RCC_OscConfig+0x498>
 80066a6:	e018      	b.n	80066da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e013      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066b4:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <HAL_RCC_OscConfig+0x4f4>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d106      	bne.n	80066d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d001      	beq.n	80066da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40021000 	.word	0x40021000
 80066e8:	40007000 	.word	0x40007000
 80066ec:	42420060 	.word	0x42420060

080066f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0d0      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006704:	4b6a      	ldr	r3, [pc, #424]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d910      	bls.n	8006734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006712:	4b67      	ldr	r3, [pc, #412]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f023 0207 	bic.w	r2, r3, #7
 800671a:	4965      	ldr	r1, [pc, #404]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	4313      	orrs	r3, r2
 8006720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006722:	4b63      	ldr	r3, [pc, #396]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d001      	beq.n	8006734 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e0b8      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d020      	beq.n	8006782 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800674c:	4b59      	ldr	r3, [pc, #356]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	4a58      	ldr	r2, [pc, #352]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006752:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006756:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006764:	4b53      	ldr	r3, [pc, #332]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4a52      	ldr	r2, [pc, #328]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800676a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800676e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006770:	4b50      	ldr	r3, [pc, #320]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	494d      	ldr	r1, [pc, #308]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800677e:	4313      	orrs	r3, r2
 8006780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d040      	beq.n	8006810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d107      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006796:	4b47      	ldr	r3, [pc, #284]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d115      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e07f      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d107      	bne.n	80067be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ae:	4b41      	ldr	r3, [pc, #260]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e073      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067be:	4b3d      	ldr	r3, [pc, #244]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e06b      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ce:	4b39      	ldr	r3, [pc, #228]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f023 0203 	bic.w	r2, r3, #3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4936      	ldr	r1, [pc, #216]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067e0:	f7fe fc20 	bl	8005024 <HAL_GetTick>
 80067e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e6:	e00a      	b.n	80067fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e8:	f7fe fc1c 	bl	8005024 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e053      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fe:	4b2d      	ldr	r3, [pc, #180]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f003 020c 	and.w	r2, r3, #12
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	429a      	cmp	r2, r3
 800680e:	d1eb      	bne.n	80067e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006810:	4b27      	ldr	r3, [pc, #156]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d210      	bcs.n	8006840 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681e:	4b24      	ldr	r3, [pc, #144]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f023 0207 	bic.w	r2, r3, #7
 8006826:	4922      	ldr	r1, [pc, #136]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800682e:	4b20      	ldr	r3, [pc, #128]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d001      	beq.n	8006840 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e032      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800684c:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	4916      	ldr	r1, [pc, #88]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800685a:	4313      	orrs	r3, r2
 800685c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800686a:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	490e      	ldr	r1, [pc, #56]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800687a:	4313      	orrs	r3, r2
 800687c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800687e:	f000 f821 	bl	80068c4 <HAL_RCC_GetSysClockFreq>
 8006882:	4602      	mov	r2, r0
 8006884:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	091b      	lsrs	r3, r3, #4
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	490a      	ldr	r1, [pc, #40]	; (80068b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006890:	5ccb      	ldrb	r3, [r1, r3]
 8006892:	fa22 f303 	lsr.w	r3, r2, r3
 8006896:	4a09      	ldr	r2, [pc, #36]	; (80068bc <HAL_RCC_ClockConfig+0x1cc>)
 8006898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800689a:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <HAL_RCC_ClockConfig+0x1d0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe fb7e 	bl	8004fa0 <HAL_InitTick>

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	40022000 	.word	0x40022000
 80068b4:	40021000 	.word	0x40021000
 80068b8:	08009a00 	.word	0x08009a00
 80068bc:	2000002c 	.word	0x2000002c
 80068c0:	20000048 	.word	0x20000048

080068c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068c4:	b490      	push	{r4, r7}
 80068c6:	b08a      	sub	sp, #40	; 0x28
 80068c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80068ca:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <HAL_RCC_GetSysClockFreq+0xb0>)
 80068cc:	1d3c      	adds	r4, r7, #4
 80068ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80068d4:	f240 2301 	movw	r3, #513	; 0x201
 80068d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	2300      	movs	r3, #0
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	2300      	movs	r3, #0
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
 80068e6:	2300      	movs	r3, #0
 80068e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80068ee:	4b22      	ldr	r3, [pc, #136]	; (8006978 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f003 030c 	and.w	r3, r3, #12
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d002      	beq.n	8006904 <HAL_RCC_GetSysClockFreq+0x40>
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d003      	beq.n	800690a <HAL_RCC_GetSysClockFreq+0x46>
 8006902:	e02d      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006904:	4b1d      	ldr	r3, [pc, #116]	; (800697c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006906:	623b      	str	r3, [r7, #32]
      break;
 8006908:	e02d      	b.n	8006966 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	0c9b      	lsrs	r3, r3, #18
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006916:	4413      	add	r3, r2
 8006918:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800691c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d013      	beq.n	8006950 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006928:	4b13      	ldr	r3, [pc, #76]	; (8006978 <HAL_RCC_GetSysClockFreq+0xb4>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	0c5b      	lsrs	r3, r3, #17
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006936:	4413      	add	r3, r2
 8006938:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800693c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	4a0e      	ldr	r2, [pc, #56]	; (800697c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006942:	fb02 f203 	mul.w	r2, r2, r3
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	fbb2 f3f3 	udiv	r3, r2, r3
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
 800694e:	e004      	b.n	800695a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	4a0b      	ldr	r2, [pc, #44]	; (8006980 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006954:	fb02 f303 	mul.w	r3, r2, r3
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	623b      	str	r3, [r7, #32]
      break;
 800695e:	e002      	b.n	8006966 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006960:	4b06      	ldr	r3, [pc, #24]	; (800697c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006962:	623b      	str	r3, [r7, #32]
      break;
 8006964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006966:	6a3b      	ldr	r3, [r7, #32]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3728      	adds	r7, #40	; 0x28
 800696c:	46bd      	mov	sp, r7
 800696e:	bc90      	pop	{r4, r7}
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	08009284 	.word	0x08009284
 8006978:	40021000 	.word	0x40021000
 800697c:	007a1200 	.word	0x007a1200
 8006980:	003d0900 	.word	0x003d0900

08006984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006988:	4b02      	ldr	r3, [pc, #8]	; (8006994 <HAL_RCC_GetHCLKFreq+0x10>)
 800698a:	681b      	ldr	r3, [r3, #0]
}
 800698c:	4618      	mov	r0, r3
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr
 8006994:	2000002c 	.word	0x2000002c

08006998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800699c:	f7ff fff2 	bl	8006984 <HAL_RCC_GetHCLKFreq>
 80069a0:	4602      	mov	r2, r0
 80069a2:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	0a1b      	lsrs	r3, r3, #8
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	4903      	ldr	r1, [pc, #12]	; (80069bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ae:	5ccb      	ldrb	r3, [r1, r3]
 80069b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	40021000 	.word	0x40021000
 80069bc:	08009a10 	.word	0x08009a10

080069c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069c4:	f7ff ffde 	bl	8006984 <HAL_RCC_GetHCLKFreq>
 80069c8:	4602      	mov	r2, r0
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	0adb      	lsrs	r3, r3, #11
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	4903      	ldr	r1, [pc, #12]	; (80069e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069d6:	5ccb      	ldrb	r3, [r1, r3]
 80069d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069dc:	4618      	mov	r0, r3
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40021000 	.word	0x40021000
 80069e4:	08009a10 	.word	0x08009a10

080069e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80069f0:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <RCC_Delay+0x34>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a0a      	ldr	r2, [pc, #40]	; (8006a20 <RCC_Delay+0x38>)
 80069f6:	fba2 2303 	umull	r2, r3, r2, r3
 80069fa:	0a5b      	lsrs	r3, r3, #9
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	fb02 f303 	mul.w	r3, r2, r3
 8006a02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006a04:	bf00      	nop
  }
  while (Delay --);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	1e5a      	subs	r2, r3, #1
 8006a0a:	60fa      	str	r2, [r7, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1f9      	bne.n	8006a04 <RCC_Delay+0x1c>
}
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr
 8006a1c:	2000002c 	.word	0x2000002c
 8006a20:	10624dd3 	.word	0x10624dd3

08006a24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e076      	b.n	8006b24 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d108      	bne.n	8006a50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a46:	d009      	beq.n	8006a5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	61da      	str	r2, [r3, #28]
 8006a4e:	e005      	b.n	8006a5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fc fb2a 	bl	80030d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006acc:	431a      	orrs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae0:	ea42 0103 	orr.w	r1, r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	0c1a      	lsrs	r2, r3, #16
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f002 0204 	and.w	r2, r2, #4
 8006b02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	69da      	ldr	r2, [r3, #28]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <HAL_SPI_Transmit+0x22>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e126      	b.n	8006d9c <HAL_SPI_Transmit+0x270>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b56:	f7fe fa65 	bl	8005024 <HAL_GetTick>
 8006b5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d002      	beq.n	8006b72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b70:	e10b      	b.n	8006d8a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <HAL_SPI_Transmit+0x52>
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d102      	bne.n	8006b84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b82:	e102      	b.n	8006d8a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2203      	movs	r2, #3
 8006b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	88fa      	ldrh	r2, [r7, #6]
 8006b9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	88fa      	ldrh	r2, [r7, #6]
 8006ba2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bca:	d10f      	bne.n	8006bec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d007      	beq.n	8006c0a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c12:	d14b      	bne.n	8006cac <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <HAL_SPI_Transmit+0xf6>
 8006c1c:	8afb      	ldrh	r3, [r7, #22]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d13e      	bne.n	8006ca0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	881a      	ldrh	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c32:	1c9a      	adds	r2, r3, #2
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c46:	e02b      	b.n	8006ca0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d112      	bne.n	8006c7c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	881a      	ldrh	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	1c9a      	adds	r2, r3, #2
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c7a:	e011      	b.n	8006ca0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c7c:	f7fe f9d2 	bl	8005024 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d803      	bhi.n	8006c94 <HAL_SPI_Transmit+0x168>
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c92:	d102      	bne.n	8006c9a <HAL_SPI_Transmit+0x16e>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d102      	bne.n	8006ca0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c9e:	e074      	b.n	8006d8a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1ce      	bne.n	8006c48 <HAL_SPI_Transmit+0x11c>
 8006caa:	e04c      	b.n	8006d46 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_SPI_Transmit+0x18e>
 8006cb4:	8afb      	ldrh	r3, [r7, #22]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d140      	bne.n	8006d3c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	7812      	ldrb	r2, [r2, #0]
 8006cc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ce0:	e02c      	b.n	8006d3c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d113      	bne.n	8006d18 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	330c      	adds	r3, #12
 8006cfa:	7812      	ldrb	r2, [r2, #0]
 8006cfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d16:	e011      	b.n	8006d3c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d18:	f7fe f984 	bl	8005024 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d803      	bhi.n	8006d30 <HAL_SPI_Transmit+0x204>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d2e:	d102      	bne.n	8006d36 <HAL_SPI_Transmit+0x20a>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d102      	bne.n	8006d3c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d3a:	e026      	b.n	8006d8a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1cd      	bne.n	8006ce2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fbb8 	bl	80074c0 <SPI_EndRxTxTransaction>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d64:	2300      	movs	r3, #0
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	613b      	str	r3, [r7, #16]
 8006d78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	77fb      	strb	r3, [r7, #31]
 8006d86:	e000      	b.n	8006d8a <HAL_SPI_Transmit+0x25e>
  }

error:
 8006d88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3720      	adds	r7, #32
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	4613      	mov	r3, r2
 8006db2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dc0:	d112      	bne.n	8006de8 <HAL_SPI_Receive+0x44>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10e      	bne.n	8006de8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2204      	movs	r2, #4
 8006dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006dd2:	88fa      	ldrh	r2, [r7, #6]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 f8f1 	bl	8006fc6 <HAL_SPI_TransmitReceive>
 8006de4:	4603      	mov	r3, r0
 8006de6:	e0ea      	b.n	8006fbe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d101      	bne.n	8006df6 <HAL_SPI_Receive+0x52>
 8006df2:	2302      	movs	r3, #2
 8006df4:	e0e3      	b.n	8006fbe <HAL_SPI_Receive+0x21a>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dfe:	f7fe f911 	bl	8005024 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d002      	beq.n	8006e16 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006e10:	2302      	movs	r3, #2
 8006e12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e14:	e0ca      	b.n	8006fac <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <HAL_SPI_Receive+0x7e>
 8006e1c:	88fb      	ldrh	r3, [r7, #6]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e26:	e0c1      	b.n	8006fac <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	88fa      	ldrh	r2, [r7, #6]
 8006e46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e6e:	d10f      	bne.n	8006e90 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e8e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b40      	cmp	r3, #64	; 0x40
 8006e9c:	d007      	beq.n	8006eae <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d162      	bne.n	8006f7c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006eb6:	e02e      	b.n	8006f16 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d115      	bne.n	8006ef2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f103 020c 	add.w	r2, r3, #12
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	7812      	ldrb	r2, [r2, #0]
 8006ed4:	b2d2      	uxtb	r2, r2
 8006ed6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ef0:	e011      	b.n	8006f16 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ef2:	f7fe f897 	bl	8005024 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d803      	bhi.n	8006f0a <HAL_SPI_Receive+0x166>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f08:	d102      	bne.n	8006f10 <HAL_SPI_Receive+0x16c>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f14:	e04a      	b.n	8006fac <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1cb      	bne.n	8006eb8 <HAL_SPI_Receive+0x114>
 8006f20:	e031      	b.n	8006f86 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d113      	bne.n	8006f58 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3a:	b292      	uxth	r2, r2
 8006f3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	1c9a      	adds	r2, r3, #2
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f56:	e011      	b.n	8006f7c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f58:	f7fe f864 	bl	8005024 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d803      	bhi.n	8006f70 <HAL_SPI_Receive+0x1cc>
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f6e:	d102      	bne.n	8006f76 <HAL_SPI_Receive+0x1d2>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d102      	bne.n	8006f7c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f7a:	e017      	b.n	8006fac <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1cd      	bne.n	8006f22 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 fa46 	bl	800741c <SPI_EndRxTransaction>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	75fb      	strb	r3, [r7, #23]
 8006fa8:	e000      	b.n	8006fac <HAL_SPI_Receive+0x208>
  }

error :
 8006faa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b08c      	sub	sp, #48	; 0x30
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	607a      	str	r2, [r7, #4]
 8006fd2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_SPI_TransmitReceive+0x26>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e18a      	b.n	8007302 <HAL_SPI_TransmitReceive+0x33c>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ff4:	f7fe f816 	bl	8005024 <HAL_GetTick>
 8006ff8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800700a:	887b      	ldrh	r3, [r7, #2]
 800700c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800700e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007012:	2b01      	cmp	r3, #1
 8007014:	d00f      	beq.n	8007036 <HAL_SPI_TransmitReceive+0x70>
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800701c:	d107      	bne.n	800702e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <HAL_SPI_TransmitReceive+0x68>
 8007026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800702a:	2b04      	cmp	r3, #4
 800702c:	d003      	beq.n	8007036 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800702e:	2302      	movs	r3, #2
 8007030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007034:	e15b      	b.n	80072ee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d005      	beq.n	8007048 <HAL_SPI_TransmitReceive+0x82>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <HAL_SPI_TransmitReceive+0x82>
 8007042:	887b      	ldrh	r3, [r7, #2]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d103      	bne.n	8007050 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800704e:	e14e      	b.n	80072ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b04      	cmp	r3, #4
 800705a:	d003      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2205      	movs	r2, #5
 8007060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	887a      	ldrh	r2, [r7, #2]
 8007074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	887a      	ldrh	r2, [r7, #2]
 800707a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	887a      	ldrh	r2, [r7, #2]
 8007086:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	887a      	ldrh	r2, [r7, #2]
 800708c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a4:	2b40      	cmp	r3, #64	; 0x40
 80070a6:	d007      	beq.n	80070b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070c0:	d178      	bne.n	80071b4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <HAL_SPI_TransmitReceive+0x10a>
 80070ca:	8b7b      	ldrh	r3, [r7, #26]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d166      	bne.n	800719e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	881a      	ldrh	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	1c9a      	adds	r2, r3, #2
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070f4:	e053      	b.n	800719e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b02      	cmp	r3, #2
 8007102:	d11b      	bne.n	800713c <HAL_SPI_TransmitReceive+0x176>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d016      	beq.n	800713c <HAL_SPI_TransmitReceive+0x176>
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d113      	bne.n	800713c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	881a      	ldrh	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	1c9a      	adds	r2, r3, #2
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b01      	cmp	r3, #1
 8007148:	d119      	bne.n	800717e <HAL_SPI_TransmitReceive+0x1b8>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d014      	beq.n	800717e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	b292      	uxth	r2, r2
 8007160:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	1c9a      	adds	r2, r3, #2
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800717a:	2301      	movs	r3, #1
 800717c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800717e:	f7fd ff51 	bl	8005024 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800718a:	429a      	cmp	r2, r3
 800718c:	d807      	bhi.n	800719e <HAL_SPI_TransmitReceive+0x1d8>
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007194:	d003      	beq.n	800719e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800719c:	e0a7      	b.n	80072ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1a6      	bne.n	80070f6 <HAL_SPI_TransmitReceive+0x130>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1a1      	bne.n	80070f6 <HAL_SPI_TransmitReceive+0x130>
 80071b2:	e07c      	b.n	80072ae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <HAL_SPI_TransmitReceive+0x1fc>
 80071bc:	8b7b      	ldrh	r3, [r7, #26]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d16b      	bne.n	800729a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	330c      	adds	r3, #12
 80071cc:	7812      	ldrb	r2, [r2, #0]
 80071ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071e8:	e057      	b.n	800729a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d11c      	bne.n	8007232 <HAL_SPI_TransmitReceive+0x26c>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d017      	beq.n	8007232 <HAL_SPI_TransmitReceive+0x26c>
 8007202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007204:	2b01      	cmp	r3, #1
 8007206:	d114      	bne.n	8007232 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	330c      	adds	r3, #12
 8007212:	7812      	ldrb	r2, [r2, #0]
 8007214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007224:	b29b      	uxth	r3, r3
 8007226:	3b01      	subs	r3, #1
 8007228:	b29a      	uxth	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b01      	cmp	r3, #1
 800723e:	d119      	bne.n	8007274 <HAL_SPI_TransmitReceive+0x2ae>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d014      	beq.n	8007274 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007270:	2301      	movs	r3, #1
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007274:	f7fd fed6 	bl	8005024 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007280:	429a      	cmp	r2, r3
 8007282:	d803      	bhi.n	800728c <HAL_SPI_TransmitReceive+0x2c6>
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800728a:	d102      	bne.n	8007292 <HAL_SPI_TransmitReceive+0x2cc>
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	2b00      	cmp	r3, #0
 8007290:	d103      	bne.n	800729a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007298:	e029      	b.n	80072ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1a2      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x224>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d19d      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f904 	bl	80074c0 <SPI_EndRxTxTransaction>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d006      	beq.n	80072cc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2220      	movs	r2, #32
 80072c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80072ca:	e010      	b.n	80072ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072d4:	2300      	movs	r3, #0
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	617b      	str	r3, [r7, #20]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	e000      	b.n	80072ee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80072ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007302:	4618      	mov	r0, r3
 8007304:	3730      	adds	r7, #48	; 0x30
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	4613      	mov	r3, r2
 800731a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800731c:	f7fd fe82 	bl	8005024 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	1a9b      	subs	r3, r3, r2
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	4413      	add	r3, r2
 800732a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800732c:	f7fd fe7a 	bl	8005024 <HAL_GetTick>
 8007330:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007332:	4b39      	ldr	r3, [pc, #228]	; (8007418 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	015b      	lsls	r3, r3, #5
 8007338:	0d1b      	lsrs	r3, r3, #20
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	fb02 f303 	mul.w	r3, r2, r3
 8007340:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007342:	e054      	b.n	80073ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800734a:	d050      	beq.n	80073ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800734c:	f7fd fe6a 	bl	8005024 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	429a      	cmp	r2, r3
 800735a:	d902      	bls.n	8007362 <SPI_WaitFlagStateUntilTimeout+0x56>
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d13d      	bne.n	80073de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007370:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800737a:	d111      	bne.n	80073a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007384:	d004      	beq.n	8007390 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800738e:	d107      	bne.n	80073a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800739e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073a8:	d10f      	bne.n	80073ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e017      	b.n	800740e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4013      	ands	r3, r2
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	bf0c      	ite	eq
 80073fe:	2301      	moveq	r3, #1
 8007400:	2300      	movne	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	429a      	cmp	r2, r3
 800740a:	d19b      	bne.n	8007344 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3720      	adds	r7, #32
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	2000002c 	.word	0x2000002c

0800741c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af02      	add	r7, sp, #8
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007430:	d111      	bne.n	8007456 <SPI_EndRxTransaction+0x3a>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800743a:	d004      	beq.n	8007446 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007444:	d107      	bne.n	8007456 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007454:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800745e:	d117      	bne.n	8007490 <SPI_EndRxTransaction+0x74>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007468:	d112      	bne.n	8007490 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2200      	movs	r2, #0
 8007472:	2101      	movs	r1, #1
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff ff49 	bl	800730c <SPI_WaitFlagStateUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01a      	beq.n	80074b6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007484:	f043 0220 	orr.w	r2, r3, #32
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e013      	b.n	80074b8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2200      	movs	r2, #0
 8007498:	2180      	movs	r1, #128	; 0x80
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7ff ff36 	bl	800730c <SPI_WaitFlagStateUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074aa:	f043 0220 	orr.w	r2, r3, #32
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e000      	b.n	80074b8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af02      	add	r7, sp, #8
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2200      	movs	r2, #0
 80074d4:	2180      	movs	r1, #128	; 0x80
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7ff ff18 	bl	800730c <SPI_WaitFlagStateUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e6:	f043 0220 	orr.w	r2, r3, #32
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e000      	b.n	80074f4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e041      	b.n	8007592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fb fe1e 	bl	8003164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3304      	adds	r3, #4
 8007538:	4619      	mov	r1, r3
 800753a:	4610      	mov	r0, r2
 800753c:	f000 faa8 	bl	8007a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
	...

0800759c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d001      	beq.n	80075b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e03a      	b.n	800762a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0201 	orr.w	r2, r2, #1
 80075ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a18      	ldr	r2, [pc, #96]	; (8007634 <HAL_TIM_Base_Start_IT+0x98>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00e      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x58>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075de:	d009      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x58>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a14      	ldr	r2, [pc, #80]	; (8007638 <HAL_TIM_Base_Start_IT+0x9c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d004      	beq.n	80075f4 <HAL_TIM_Base_Start_IT+0x58>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a13      	ldr	r2, [pc, #76]	; (800763c <HAL_TIM_Base_Start_IT+0xa0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d111      	bne.n	8007618 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b06      	cmp	r3, #6
 8007604:	d010      	beq.n	8007628 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f042 0201 	orr.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007616:	e007      	b.n	8007628 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	bc80      	pop	{r7}
 8007632:	4770      	bx	lr
 8007634:	40012c00 	.word	0x40012c00
 8007638:	40000400 	.word	0x40000400
 800763c:	40000800 	.word	0x40000800

08007640 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0201 	bic.w	r2, r2, #1
 8007656:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6a1a      	ldr	r2, [r3, #32]
 800765e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007662:	4013      	ands	r3, r2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10f      	bne.n	8007688 <HAL_TIM_Base_Stop_IT+0x48>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6a1a      	ldr	r2, [r3, #32]
 800766e:	f240 4344 	movw	r3, #1092	; 0x444
 8007672:	4013      	ands	r3, r2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d107      	bne.n	8007688 <HAL_TIM_Base_Stop_IT+0x48>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0201 	bic.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr

0800769c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d122      	bne.n	80076f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d11b      	bne.n	80076f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f06f 0202 	mvn.w	r2, #2
 80076c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	f003 0303 	and.w	r3, r3, #3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f9ba 	bl	8007a58 <HAL_TIM_IC_CaptureCallback>
 80076e4:	e005      	b.n	80076f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f9ad 	bl	8007a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f9bc 	bl	8007a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	2b04      	cmp	r3, #4
 8007704:	d122      	bne.n	800774c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	2b04      	cmp	r3, #4
 8007712:	d11b      	bne.n	800774c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f06f 0204 	mvn.w	r2, #4
 800771c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2202      	movs	r2, #2
 8007722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f990 	bl	8007a58 <HAL_TIM_IC_CaptureCallback>
 8007738:	e005      	b.n	8007746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f983 	bl	8007a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f992 	bl	8007a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b08      	cmp	r3, #8
 8007758:	d122      	bne.n	80077a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f003 0308 	and.w	r3, r3, #8
 8007764:	2b08      	cmp	r3, #8
 8007766:	d11b      	bne.n	80077a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f06f 0208 	mvn.w	r2, #8
 8007770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2204      	movs	r2, #4
 8007776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f966 	bl	8007a58 <HAL_TIM_IC_CaptureCallback>
 800778c:	e005      	b.n	800779a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f959 	bl	8007a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f968 	bl	8007a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f003 0310 	and.w	r3, r3, #16
 80077aa:	2b10      	cmp	r3, #16
 80077ac:	d122      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f003 0310 	and.w	r3, r3, #16
 80077b8:	2b10      	cmp	r3, #16
 80077ba:	d11b      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f06f 0210 	mvn.w	r2, #16
 80077c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2208      	movs	r2, #8
 80077ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f93c 	bl	8007a58 <HAL_TIM_IC_CaptureCallback>
 80077e0:	e005      	b.n	80077ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f92f 	bl	8007a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f93e 	bl	8007a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d10e      	bne.n	8007820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b01      	cmp	r3, #1
 800780e:	d107      	bne.n	8007820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0201 	mvn.w	r2, #1
 8007818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f90a 	bl	8007a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782a:	2b80      	cmp	r3, #128	; 0x80
 800782c:	d10e      	bne.n	800784c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007838:	2b80      	cmp	r3, #128	; 0x80
 800783a:	d107      	bne.n	800784c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa81 	bl	8007d4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007856:	2b40      	cmp	r3, #64	; 0x40
 8007858:	d10e      	bne.n	8007878 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007864:	2b40      	cmp	r3, #64	; 0x40
 8007866:	d107      	bne.n	8007878 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f902 	bl	8007a7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b20      	cmp	r3, #32
 8007884:	d10e      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0320 	and.w	r3, r3, #32
 8007890:	2b20      	cmp	r3, #32
 8007892:	d107      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0220 	mvn.w	r2, #32
 800789c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fa4c 	bl	8007d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078a4:	bf00      	nop
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_TIM_ConfigClockSource+0x18>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e0b3      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x180>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078fc:	d03e      	beq.n	800797c <HAL_TIM_ConfigClockSource+0xd0>
 80078fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007902:	f200 8087 	bhi.w	8007a14 <HAL_TIM_ConfigClockSource+0x168>
 8007906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790a:	f000 8085 	beq.w	8007a18 <HAL_TIM_ConfigClockSource+0x16c>
 800790e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007912:	d87f      	bhi.n	8007a14 <HAL_TIM_ConfigClockSource+0x168>
 8007914:	2b70      	cmp	r3, #112	; 0x70
 8007916:	d01a      	beq.n	800794e <HAL_TIM_ConfigClockSource+0xa2>
 8007918:	2b70      	cmp	r3, #112	; 0x70
 800791a:	d87b      	bhi.n	8007a14 <HAL_TIM_ConfigClockSource+0x168>
 800791c:	2b60      	cmp	r3, #96	; 0x60
 800791e:	d050      	beq.n	80079c2 <HAL_TIM_ConfigClockSource+0x116>
 8007920:	2b60      	cmp	r3, #96	; 0x60
 8007922:	d877      	bhi.n	8007a14 <HAL_TIM_ConfigClockSource+0x168>
 8007924:	2b50      	cmp	r3, #80	; 0x50
 8007926:	d03c      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0xf6>
 8007928:	2b50      	cmp	r3, #80	; 0x50
 800792a:	d873      	bhi.n	8007a14 <HAL_TIM_ConfigClockSource+0x168>
 800792c:	2b40      	cmp	r3, #64	; 0x40
 800792e:	d058      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x136>
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	d86f      	bhi.n	8007a14 <HAL_TIM_ConfigClockSource+0x168>
 8007934:	2b30      	cmp	r3, #48	; 0x30
 8007936:	d064      	beq.n	8007a02 <HAL_TIM_ConfigClockSource+0x156>
 8007938:	2b30      	cmp	r3, #48	; 0x30
 800793a:	d86b      	bhi.n	8007a14 <HAL_TIM_ConfigClockSource+0x168>
 800793c:	2b20      	cmp	r3, #32
 800793e:	d060      	beq.n	8007a02 <HAL_TIM_ConfigClockSource+0x156>
 8007940:	2b20      	cmp	r3, #32
 8007942:	d867      	bhi.n	8007a14 <HAL_TIM_ConfigClockSource+0x168>
 8007944:	2b00      	cmp	r3, #0
 8007946:	d05c      	beq.n	8007a02 <HAL_TIM_ConfigClockSource+0x156>
 8007948:	2b10      	cmp	r3, #16
 800794a:	d05a      	beq.n	8007a02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800794c:	e062      	b.n	8007a14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	6899      	ldr	r1, [r3, #8]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f000 f970 	bl	8007c42 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007970:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	609a      	str	r2, [r3, #8]
      break;
 800797a:	e04e      	b.n	8007a1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	6899      	ldr	r1, [r3, #8]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f000 f959 	bl	8007c42 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689a      	ldr	r2, [r3, #8]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800799e:	609a      	str	r2, [r3, #8]
      break;
 80079a0:	e03b      	b.n	8007a1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6859      	ldr	r1, [r3, #4]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f000 f8d0 	bl	8007b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2150      	movs	r1, #80	; 0x50
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f927 	bl	8007c0e <TIM_ITRx_SetConfig>
      break;
 80079c0:	e02b      	b.n	8007a1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	6859      	ldr	r1, [r3, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	461a      	mov	r2, r3
 80079d0:	f000 f8ee 	bl	8007bb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2160      	movs	r1, #96	; 0x60
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 f917 	bl	8007c0e <TIM_ITRx_SetConfig>
      break;
 80079e0:	e01b      	b.n	8007a1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	6859      	ldr	r1, [r3, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	461a      	mov	r2, r3
 80079f0:	f000 f8b0 	bl	8007b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2140      	movs	r1, #64	; 0x40
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 f907 	bl	8007c0e <TIM_ITRx_SetConfig>
      break;
 8007a00:	e00b      	b.n	8007a1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	f000 f8fe 	bl	8007c0e <TIM_ITRx_SetConfig>
        break;
 8007a12:	e002      	b.n	8007a1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007a14:	bf00      	nop
 8007a16:	e000      	b.n	8007a1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007a18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bc80      	pop	{r7}
 8007a44:	4770      	bx	lr

08007a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a4e:	bf00      	nop
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bc80      	pop	{r7}
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bc80      	pop	{r7}
 8007a7a:	4770      	bx	lr

08007a7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bc80      	pop	{r7}
 8007a8c:	4770      	bx	lr
	...

08007a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a29      	ldr	r2, [pc, #164]	; (8007b48 <TIM_Base_SetConfig+0xb8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00b      	beq.n	8007ac0 <TIM_Base_SetConfig+0x30>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aae:	d007      	beq.n	8007ac0 <TIM_Base_SetConfig+0x30>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a26      	ldr	r2, [pc, #152]	; (8007b4c <TIM_Base_SetConfig+0xbc>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d003      	beq.n	8007ac0 <TIM_Base_SetConfig+0x30>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a25      	ldr	r2, [pc, #148]	; (8007b50 <TIM_Base_SetConfig+0xc0>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d108      	bne.n	8007ad2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a1c      	ldr	r2, [pc, #112]	; (8007b48 <TIM_Base_SetConfig+0xb8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d00b      	beq.n	8007af2 <TIM_Base_SetConfig+0x62>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae0:	d007      	beq.n	8007af2 <TIM_Base_SetConfig+0x62>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a19      	ldr	r2, [pc, #100]	; (8007b4c <TIM_Base_SetConfig+0xbc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d003      	beq.n	8007af2 <TIM_Base_SetConfig+0x62>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a18      	ldr	r2, [pc, #96]	; (8007b50 <TIM_Base_SetConfig+0xc0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d108      	bne.n	8007b04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a07      	ldr	r2, [pc, #28]	; (8007b48 <TIM_Base_SetConfig+0xb8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d103      	bne.n	8007b38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	615a      	str	r2, [r3, #20]
}
 8007b3e:	bf00      	nop
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bc80      	pop	{r7}
 8007b46:	4770      	bx	lr
 8007b48:	40012c00 	.word	0x40012c00
 8007b4c:	40000400 	.word	0x40000400
 8007b50:	40000800 	.word	0x40000800

08007b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f023 0201 	bic.w	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f023 030a 	bic.w	r3, r3, #10
 8007b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	621a      	str	r2, [r3, #32]
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bc80      	pop	{r7}
 8007bae:	4770      	bx	lr

08007bb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	f023 0210 	bic.w	r2, r3, #16
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	031b      	lsls	r3, r3, #12
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	621a      	str	r2, [r3, #32]
}
 8007c04:	bf00      	nop
 8007c06:	371c      	adds	r7, #28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bc80      	pop	{r7}
 8007c0c:	4770      	bx	lr

08007c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b085      	sub	sp, #20
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f043 0307 	orr.w	r3, r3, #7
 8007c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	609a      	str	r2, [r3, #8]
}
 8007c38:	bf00      	nop
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bc80      	pop	{r7}
 8007c40:	4770      	bx	lr

08007c42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b087      	sub	sp, #28
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	607a      	str	r2, [r7, #4]
 8007c4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	021a      	lsls	r2, r3, #8
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	431a      	orrs	r2, r3
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	609a      	str	r2, [r3, #8]
}
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bc80      	pop	{r7}
 8007c7e:	4770      	bx	lr

08007c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e046      	b.n	8007d26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a16      	ldr	r2, [pc, #88]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d00e      	beq.n	8007cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ce4:	d009      	beq.n	8007cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a12      	ldr	r2, [pc, #72]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d004      	beq.n	8007cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a10      	ldr	r2, [pc, #64]	; (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d10c      	bne.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr
 8007d30:	40012c00 	.word	0x40012c00
 8007d34:	40000400 	.word	0x40000400
 8007d38:	40000800 	.word	0x40000800

08007d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bc80      	pop	{r7}
 8007d4c:	4770      	bx	lr

08007d4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr

08007d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e03f      	b.n	8007df2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7fb fa2c 	bl	80031e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2224      	movs	r2, #36	; 0x24
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fbed 	bl	8008584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691a      	ldr	r2, [r3, #16]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695a      	ldr	r2, [r3, #20]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2220      	movs	r2, #32
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b085      	sub	sp, #20
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	4613      	mov	r3, r2
 8007e06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b20      	cmp	r3, #32
 8007e12:	d130      	bne.n	8007e76 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <HAL_UART_Transmit_IT+0x26>
 8007e1a:	88fb      	ldrh	r3, [r7, #6]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e029      	b.n	8007e78 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d101      	bne.n	8007e32 <HAL_UART_Transmit_IT+0x38>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e022      	b.n	8007e78 <HAL_UART_Transmit_IT+0x7e>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	88fa      	ldrh	r2, [r7, #6]
 8007e44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	88fa      	ldrh	r2, [r7, #6]
 8007e4a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2221      	movs	r2, #33	; 0x21
 8007e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68da      	ldr	r2, [r3, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e70:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	e000      	b.n	8007e78 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007e76:	2302      	movs	r3, #2
  }
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bc80      	pop	{r7}
 8007e80:	4770      	bx	lr

08007e82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d11d      	bne.n	8007ed8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <HAL_UART_Receive_IT+0x26>
 8007ea2:	88fb      	ldrh	r3, [r7, #6]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e016      	b.n	8007eda <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d101      	bne.n	8007eba <HAL_UART_Receive_IT+0x38>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e00f      	b.n	8007eda <HAL_UART_Receive_IT+0x58>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	68b9      	ldr	r1, [r7, #8]
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f9cf 	bl	8008272 <UART_Start_Receive_IT>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	e000      	b.n	8007eda <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007ed8:	2302      	movs	r3, #2
  }
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08a      	sub	sp, #40	; 0x28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10d      	bne.n	8007f36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d008      	beq.n	8007f36 <HAL_UART_IRQHandler+0x52>
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	f003 0320 	and.w	r3, r3, #32
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fa7f 	bl	8008432 <UART_Receive_IT>
      return;
 8007f34:	e17b      	b.n	800822e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 80b1 	beq.w	80080a0 <HAL_UART_IRQHandler+0x1bc>
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d105      	bne.n	8007f54 <HAL_UART_IRQHandler+0x70>
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 80a6 	beq.w	80080a0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <HAL_UART_IRQHandler+0x90>
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d005      	beq.n	8007f74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6c:	f043 0201 	orr.w	r2, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <HAL_UART_IRQHandler+0xb0>
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d005      	beq.n	8007f94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8c:	f043 0202 	orr.w	r2, r3, #2
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <HAL_UART_IRQHandler+0xd0>
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d005      	beq.n	8007fb4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	f043 0204 	orr.w	r2, r3, #4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	f003 0308 	and.w	r3, r3, #8
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00f      	beq.n	8007fde <HAL_UART_IRQHandler+0xfa>
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	f003 0320 	and.w	r3, r3, #32
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d104      	bne.n	8007fd2 <HAL_UART_IRQHandler+0xee>
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d005      	beq.n	8007fde <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	f043 0208 	orr.w	r2, r3, #8
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f000 811e 	beq.w	8008224 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	f003 0320 	and.w	r3, r3, #32
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d007      	beq.n	8008002 <HAL_UART_IRQHandler+0x11e>
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	f003 0320 	and.w	r3, r3, #32
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa18 	bl	8008432 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800c:	2b00      	cmp	r3, #0
 800800e:	bf14      	ite	ne
 8008010:	2301      	movne	r3, #1
 8008012:	2300      	moveq	r3, #0
 8008014:	b2db      	uxtb	r3, r3
 8008016:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	f003 0308 	and.w	r3, r3, #8
 8008020:	2b00      	cmp	r3, #0
 8008022:	d102      	bne.n	800802a <HAL_UART_IRQHandler+0x146>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d031      	beq.n	800808e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f95a 	bl	80082e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d023      	beq.n	8008086 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695a      	ldr	r2, [r3, #20]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800804c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008052:	2b00      	cmp	r3, #0
 8008054:	d013      	beq.n	800807e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805a:	4a76      	ldr	r2, [pc, #472]	; (8008234 <HAL_UART_IRQHandler+0x350>)
 800805c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	4618      	mov	r0, r3
 8008064:	f7fd f954 	bl	8005310 <HAL_DMA_Abort_IT>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d016      	beq.n	800809c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807c:	e00e      	b.n	800809c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f8e3 	bl	800824a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008084:	e00a      	b.n	800809c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f8df 	bl	800824a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800808c:	e006      	b.n	800809c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f8db 	bl	800824a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800809a:	e0c3      	b.n	8008224 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800809c:	bf00      	nop
    return;
 800809e:	e0c1      	b.n	8008224 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	f040 80a1 	bne.w	80081ec <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	f003 0310 	and.w	r3, r3, #16
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 809b 	beq.w	80081ec <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 8095 	beq.w	80081ec <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d04e      	beq.n	8008184 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80080f0:	8a3b      	ldrh	r3, [r7, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 8098 	beq.w	8008228 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080fc:	8a3a      	ldrh	r2, [r7, #16]
 80080fe:	429a      	cmp	r2, r3
 8008100:	f080 8092 	bcs.w	8008228 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	8a3a      	ldrh	r2, [r7, #16]
 8008108:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b20      	cmp	r3, #32
 8008112:	d02b      	beq.n	800816c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008122:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	695a      	ldr	r2, [r3, #20]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0201 	bic.w	r2, r2, #1
 8008132:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	695a      	ldr	r2, [r3, #20]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008142:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68da      	ldr	r2, [r3, #12]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 0210 	bic.w	r2, r2, #16
 8008160:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	4618      	mov	r0, r3
 8008168:	f7fd f897 	bl	800529a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008174:	b29b      	uxth	r3, r3
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	b29b      	uxth	r3, r3
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f86d 	bl	800825c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008182:	e051      	b.n	8008228 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800818c:	b29b      	uxth	r3, r3
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008196:	b29b      	uxth	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d047      	beq.n	800822c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800819c:	8a7b      	ldrh	r3, [r7, #18]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d044      	beq.n	800822c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68da      	ldr	r2, [r3, #12]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081b0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	695a      	ldr	r2, [r3, #20]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 0201 	bic.w	r2, r2, #1
 80081c0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0210 	bic.w	r2, r2, #16
 80081de:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081e0:	8a7b      	ldrh	r3, [r7, #18]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f839 	bl	800825c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80081ea:	e01f      	b.n	800822c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d008      	beq.n	8008208 <HAL_UART_IRQHandler+0x324>
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f8af 	bl	8008364 <UART_Transmit_IT>
    return;
 8008206:	e012      	b.n	800822e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00d      	beq.n	800822e <HAL_UART_IRQHandler+0x34a>
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	d008      	beq.n	800822e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f8f0 	bl	8008402 <UART_EndTransmit_IT>
    return;
 8008222:	e004      	b.n	800822e <HAL_UART_IRQHandler+0x34a>
    return;
 8008224:	bf00      	nop
 8008226:	e002      	b.n	800822e <HAL_UART_IRQHandler+0x34a>
      return;
 8008228:	bf00      	nop
 800822a:	e000      	b.n	800822e <HAL_UART_IRQHandler+0x34a>
      return;
 800822c:	bf00      	nop
  }
}
 800822e:	3728      	adds	r7, #40	; 0x28
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	0800833d 	.word	0x0800833d

08008238 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr

0800824a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008252:	bf00      	nop
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr

0800825c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	bc80      	pop	{r7}
 8008270:	4770      	bx	lr

08008272 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008272:	b480      	push	{r7}
 8008274:	b085      	sub	sp, #20
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	4613      	mov	r3, r2
 800827e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	88fa      	ldrh	r2, [r7, #6]
 800828a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2222      	movs	r2, #34	; 0x22
 800829c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082b6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0201 	orr.w	r2, r2, #1
 80082c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0220 	orr.w	r2, r2, #32
 80082d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	bc80      	pop	{r7}
 80082e2:	4770      	bx	lr

080082e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68da      	ldr	r2, [r3, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80082fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	695a      	ldr	r2, [r3, #20]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0201 	bic.w	r2, r2, #1
 800830a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008310:	2b01      	cmp	r3, #1
 8008312:	d107      	bne.n	8008324 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0210 	bic.w	r2, r2, #16
 8008322:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2220      	movs	r2, #32
 8008328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr

0800833c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff ff77 	bl	800824a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b21      	cmp	r3, #33	; 0x21
 8008376:	d13e      	bne.n	80083f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008380:	d114      	bne.n	80083ac <UART_Transmit_IT+0x48>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d110      	bne.n	80083ac <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	461a      	mov	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800839e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	1c9a      	adds	r2, r3, #2
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	621a      	str	r2, [r3, #32]
 80083aa:	e008      	b.n	80083be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	1c59      	adds	r1, r3, #1
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	6211      	str	r1, [r2, #32]
 80083b6:	781a      	ldrb	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	3b01      	subs	r3, #1
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	4619      	mov	r1, r3
 80083cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10f      	bne.n	80083f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	e000      	b.n	80083f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80083f6:	2302      	movs	r3, #2
  }
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bc80      	pop	{r7}
 8008400:	4770      	bx	lr

08008402 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008418:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2220      	movs	r2, #32
 800841e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff ff08 	bl	8008238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b086      	sub	sp, #24
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b22      	cmp	r3, #34	; 0x22
 8008444:	f040 8099 	bne.w	800857a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008450:	d117      	bne.n	8008482 <UART_Receive_IT+0x50>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d113      	bne.n	8008482 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800845a:	2300      	movs	r3, #0
 800845c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008462:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	b29b      	uxth	r3, r3
 800846c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008470:	b29a      	uxth	r2, r3
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847a:	1c9a      	adds	r2, r3, #2
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	629a      	str	r2, [r3, #40]	; 0x28
 8008480:	e026      	b.n	80084d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008486:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008488:	2300      	movs	r3, #0
 800848a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008494:	d007      	beq.n	80084a6 <UART_Receive_IT+0x74>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10a      	bne.n	80084b4 <UART_Receive_IT+0x82>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d106      	bne.n	80084b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	701a      	strb	r2, [r3, #0]
 80084b2:	e008      	b.n	80084c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	b29b      	uxth	r3, r3
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	4619      	mov	r1, r3
 80084de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d148      	bne.n	8008576 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0220 	bic.w	r2, r2, #32
 80084f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008502:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	695a      	ldr	r2, [r3, #20]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0201 	bic.w	r2, r2, #1
 8008512:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008520:	2b01      	cmp	r3, #1
 8008522:	d123      	bne.n	800856c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0210 	bic.w	r2, r2, #16
 8008538:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0310 	and.w	r3, r3, #16
 8008544:	2b10      	cmp	r3, #16
 8008546:	d10a      	bne.n	800855e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008548:	2300      	movs	r3, #0
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	60fb      	str	r3, [r7, #12]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7ff fe79 	bl	800825c <HAL_UARTEx_RxEventCallback>
 800856a:	e002      	b.n	8008572 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7fa fcff 	bl	8002f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	e002      	b.n	800857c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	e000      	b.n	800857c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800857a:	2302      	movs	r3, #2
  }
}
 800857c:	4618      	mov	r0, r3
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	431a      	orrs	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80085be:	f023 030c 	bic.w	r3, r3, #12
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6812      	ldr	r2, [r2, #0]
 80085c6:	68b9      	ldr	r1, [r7, #8]
 80085c8:	430b      	orrs	r3, r1
 80085ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	430a      	orrs	r2, r1
 80085e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a2c      	ldr	r2, [pc, #176]	; (8008698 <UART_SetConfig+0x114>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d103      	bne.n	80085f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80085ec:	f7fe f9e8 	bl	80069c0 <HAL_RCC_GetPCLK2Freq>
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	e002      	b.n	80085fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80085f4:	f7fe f9d0 	bl	8006998 <HAL_RCC_GetPCLK1Freq>
 80085f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009a      	lsls	r2, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008610:	4a22      	ldr	r2, [pc, #136]	; (800869c <UART_SetConfig+0x118>)
 8008612:	fba2 2303 	umull	r2, r3, r2, r3
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	0119      	lsls	r1, r3, #4
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	009a      	lsls	r2, r3, #2
 8008624:	441a      	add	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008630:	4b1a      	ldr	r3, [pc, #104]	; (800869c <UART_SetConfig+0x118>)
 8008632:	fba3 0302 	umull	r0, r3, r3, r2
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	2064      	movs	r0, #100	; 0x64
 800863a:	fb00 f303 	mul.w	r3, r0, r3
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	011b      	lsls	r3, r3, #4
 8008642:	3332      	adds	r3, #50	; 0x32
 8008644:	4a15      	ldr	r2, [pc, #84]	; (800869c <UART_SetConfig+0x118>)
 8008646:	fba2 2303 	umull	r2, r3, r2, r3
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008650:	4419      	add	r1, r3
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	4613      	mov	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	009a      	lsls	r2, r3, #2
 800865c:	441a      	add	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	fbb2 f2f3 	udiv	r2, r2, r3
 8008668:	4b0c      	ldr	r3, [pc, #48]	; (800869c <UART_SetConfig+0x118>)
 800866a:	fba3 0302 	umull	r0, r3, r3, r2
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	2064      	movs	r0, #100	; 0x64
 8008672:	fb00 f303 	mul.w	r3, r0, r3
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	011b      	lsls	r3, r3, #4
 800867a:	3332      	adds	r3, #50	; 0x32
 800867c:	4a07      	ldr	r2, [pc, #28]	; (800869c <UART_SetConfig+0x118>)
 800867e:	fba2 2303 	umull	r2, r3, r2, r3
 8008682:	095b      	lsrs	r3, r3, #5
 8008684:	f003 020f 	and.w	r2, r3, #15
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	440a      	add	r2, r1
 800868e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008690:	bf00      	nop
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	40013800 	.word	0x40013800
 800869c:	51eb851f 	.word	0x51eb851f

080086a0 <__errno>:
 80086a0:	4b01      	ldr	r3, [pc, #4]	; (80086a8 <__errno+0x8>)
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000050 	.word	0x20000050

080086ac <__libc_init_array>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	2600      	movs	r6, #0
 80086b0:	4d0c      	ldr	r5, [pc, #48]	; (80086e4 <__libc_init_array+0x38>)
 80086b2:	4c0d      	ldr	r4, [pc, #52]	; (80086e8 <__libc_init_array+0x3c>)
 80086b4:	1b64      	subs	r4, r4, r5
 80086b6:	10a4      	asrs	r4, r4, #2
 80086b8:	42a6      	cmp	r6, r4
 80086ba:	d109      	bne.n	80086d0 <__libc_init_array+0x24>
 80086bc:	f000 fcda 	bl	8009074 <_init>
 80086c0:	2600      	movs	r6, #0
 80086c2:	4d0a      	ldr	r5, [pc, #40]	; (80086ec <__libc_init_array+0x40>)
 80086c4:	4c0a      	ldr	r4, [pc, #40]	; (80086f0 <__libc_init_array+0x44>)
 80086c6:	1b64      	subs	r4, r4, r5
 80086c8:	10a4      	asrs	r4, r4, #2
 80086ca:	42a6      	cmp	r6, r4
 80086cc:	d105      	bne.n	80086da <__libc_init_array+0x2e>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d4:	4798      	blx	r3
 80086d6:	3601      	adds	r6, #1
 80086d8:	e7ee      	b.n	80086b8 <__libc_init_array+0xc>
 80086da:	f855 3b04 	ldr.w	r3, [r5], #4
 80086de:	4798      	blx	r3
 80086e0:	3601      	adds	r6, #1
 80086e2:	e7f2      	b.n	80086ca <__libc_init_array+0x1e>
 80086e4:	08009a70 	.word	0x08009a70
 80086e8:	08009a70 	.word	0x08009a70
 80086ec:	08009a70 	.word	0x08009a70
 80086f0:	08009a74 	.word	0x08009a74

080086f4 <__itoa>:
 80086f4:	1e93      	subs	r3, r2, #2
 80086f6:	2b22      	cmp	r3, #34	; 0x22
 80086f8:	b510      	push	{r4, lr}
 80086fa:	460c      	mov	r4, r1
 80086fc:	d904      	bls.n	8008708 <__itoa+0x14>
 80086fe:	2300      	movs	r3, #0
 8008700:	461c      	mov	r4, r3
 8008702:	700b      	strb	r3, [r1, #0]
 8008704:	4620      	mov	r0, r4
 8008706:	bd10      	pop	{r4, pc}
 8008708:	2a0a      	cmp	r2, #10
 800870a:	d109      	bne.n	8008720 <__itoa+0x2c>
 800870c:	2800      	cmp	r0, #0
 800870e:	da07      	bge.n	8008720 <__itoa+0x2c>
 8008710:	232d      	movs	r3, #45	; 0x2d
 8008712:	700b      	strb	r3, [r1, #0]
 8008714:	2101      	movs	r1, #1
 8008716:	4240      	negs	r0, r0
 8008718:	4421      	add	r1, r4
 800871a:	f000 f84f 	bl	80087bc <__utoa>
 800871e:	e7f1      	b.n	8008704 <__itoa+0x10>
 8008720:	2100      	movs	r1, #0
 8008722:	e7f9      	b.n	8008718 <__itoa+0x24>

08008724 <itoa>:
 8008724:	f7ff bfe6 	b.w	80086f4 <__itoa>

08008728 <memset>:
 8008728:	4603      	mov	r3, r0
 800872a:	4402      	add	r2, r0
 800872c:	4293      	cmp	r3, r2
 800872e:	d100      	bne.n	8008732 <memset+0xa>
 8008730:	4770      	bx	lr
 8008732:	f803 1b01 	strb.w	r1, [r3], #1
 8008736:	e7f9      	b.n	800872c <memset+0x4>

08008738 <siprintf>:
 8008738:	b40e      	push	{r1, r2, r3}
 800873a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800873e:	b500      	push	{lr}
 8008740:	b09c      	sub	sp, #112	; 0x70
 8008742:	ab1d      	add	r3, sp, #116	; 0x74
 8008744:	9002      	str	r0, [sp, #8]
 8008746:	9006      	str	r0, [sp, #24]
 8008748:	9107      	str	r1, [sp, #28]
 800874a:	9104      	str	r1, [sp, #16]
 800874c:	4808      	ldr	r0, [pc, #32]	; (8008770 <siprintf+0x38>)
 800874e:	4909      	ldr	r1, [pc, #36]	; (8008774 <siprintf+0x3c>)
 8008750:	f853 2b04 	ldr.w	r2, [r3], #4
 8008754:	9105      	str	r1, [sp, #20]
 8008756:	6800      	ldr	r0, [r0, #0]
 8008758:	a902      	add	r1, sp, #8
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	f000 f8cc 	bl	80088f8 <_svfiprintf_r>
 8008760:	2200      	movs	r2, #0
 8008762:	9b02      	ldr	r3, [sp, #8]
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	b01c      	add	sp, #112	; 0x70
 8008768:	f85d eb04 	ldr.w	lr, [sp], #4
 800876c:	b003      	add	sp, #12
 800876e:	4770      	bx	lr
 8008770:	20000050 	.word	0x20000050
 8008774:	ffff0208 	.word	0xffff0208

08008778 <strcat>:
 8008778:	4602      	mov	r2, r0
 800877a:	b510      	push	{r4, lr}
 800877c:	7814      	ldrb	r4, [r2, #0]
 800877e:	4613      	mov	r3, r2
 8008780:	3201      	adds	r2, #1
 8008782:	2c00      	cmp	r4, #0
 8008784:	d1fa      	bne.n	800877c <strcat+0x4>
 8008786:	3b01      	subs	r3, #1
 8008788:	f811 2b01 	ldrb.w	r2, [r1], #1
 800878c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008790:	2a00      	cmp	r2, #0
 8008792:	d1f9      	bne.n	8008788 <strcat+0x10>
 8008794:	bd10      	pop	{r4, pc}

08008796 <strncpy>:
 8008796:	4603      	mov	r3, r0
 8008798:	b510      	push	{r4, lr}
 800879a:	3901      	subs	r1, #1
 800879c:	b132      	cbz	r2, 80087ac <strncpy+0x16>
 800879e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80087a2:	3a01      	subs	r2, #1
 80087a4:	f803 4b01 	strb.w	r4, [r3], #1
 80087a8:	2c00      	cmp	r4, #0
 80087aa:	d1f7      	bne.n	800879c <strncpy+0x6>
 80087ac:	2100      	movs	r1, #0
 80087ae:	441a      	add	r2, r3
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d100      	bne.n	80087b6 <strncpy+0x20>
 80087b4:	bd10      	pop	{r4, pc}
 80087b6:	f803 1b01 	strb.w	r1, [r3], #1
 80087ba:	e7f9      	b.n	80087b0 <strncpy+0x1a>

080087bc <__utoa>:
 80087bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087be:	b08b      	sub	sp, #44	; 0x2c
 80087c0:	4605      	mov	r5, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	466e      	mov	r6, sp
 80087c6:	4c1d      	ldr	r4, [pc, #116]	; (800883c <__utoa+0x80>)
 80087c8:	f104 0c20 	add.w	ip, r4, #32
 80087cc:	4637      	mov	r7, r6
 80087ce:	6820      	ldr	r0, [r4, #0]
 80087d0:	6861      	ldr	r1, [r4, #4]
 80087d2:	3408      	adds	r4, #8
 80087d4:	c703      	stmia	r7!, {r0, r1}
 80087d6:	4564      	cmp	r4, ip
 80087d8:	463e      	mov	r6, r7
 80087da:	d1f7      	bne.n	80087cc <__utoa+0x10>
 80087dc:	7921      	ldrb	r1, [r4, #4]
 80087de:	6820      	ldr	r0, [r4, #0]
 80087e0:	7139      	strb	r1, [r7, #4]
 80087e2:	1e91      	subs	r1, r2, #2
 80087e4:	2922      	cmp	r1, #34	; 0x22
 80087e6:	6038      	str	r0, [r7, #0]
 80087e8:	f04f 0100 	mov.w	r1, #0
 80087ec:	d904      	bls.n	80087f8 <__utoa+0x3c>
 80087ee:	7019      	strb	r1, [r3, #0]
 80087f0:	460b      	mov	r3, r1
 80087f2:	4618      	mov	r0, r3
 80087f4:	b00b      	add	sp, #44	; 0x2c
 80087f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f8:	1e58      	subs	r0, r3, #1
 80087fa:	4684      	mov	ip, r0
 80087fc:	fbb5 f7f2 	udiv	r7, r5, r2
 8008800:	fb02 5617 	mls	r6, r2, r7, r5
 8008804:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8008808:	4476      	add	r6, lr
 800880a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800880e:	460c      	mov	r4, r1
 8008810:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008814:	462e      	mov	r6, r5
 8008816:	42b2      	cmp	r2, r6
 8008818:	463d      	mov	r5, r7
 800881a:	f101 0101 	add.w	r1, r1, #1
 800881e:	d9ed      	bls.n	80087fc <__utoa+0x40>
 8008820:	2200      	movs	r2, #0
 8008822:	545a      	strb	r2, [r3, r1]
 8008824:	1919      	adds	r1, r3, r4
 8008826:	1aa5      	subs	r5, r4, r2
 8008828:	42aa      	cmp	r2, r5
 800882a:	dae2      	bge.n	80087f2 <__utoa+0x36>
 800882c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008830:	780e      	ldrb	r6, [r1, #0]
 8008832:	3201      	adds	r2, #1
 8008834:	7006      	strb	r6, [r0, #0]
 8008836:	f801 5901 	strb.w	r5, [r1], #-1
 800883a:	e7f4      	b.n	8008826 <__utoa+0x6a>
 800883c:	08009a18 	.word	0x08009a18

08008840 <__ssputs_r>:
 8008840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	688e      	ldr	r6, [r1, #8]
 8008846:	4682      	mov	sl, r0
 8008848:	429e      	cmp	r6, r3
 800884a:	460c      	mov	r4, r1
 800884c:	4690      	mov	r8, r2
 800884e:	461f      	mov	r7, r3
 8008850:	d838      	bhi.n	80088c4 <__ssputs_r+0x84>
 8008852:	898a      	ldrh	r2, [r1, #12]
 8008854:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008858:	d032      	beq.n	80088c0 <__ssputs_r+0x80>
 800885a:	6825      	ldr	r5, [r4, #0]
 800885c:	6909      	ldr	r1, [r1, #16]
 800885e:	3301      	adds	r3, #1
 8008860:	eba5 0901 	sub.w	r9, r5, r1
 8008864:	6965      	ldr	r5, [r4, #20]
 8008866:	444b      	add	r3, r9
 8008868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800886c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008870:	106d      	asrs	r5, r5, #1
 8008872:	429d      	cmp	r5, r3
 8008874:	bf38      	it	cc
 8008876:	461d      	movcc	r5, r3
 8008878:	0553      	lsls	r3, r2, #21
 800887a:	d531      	bpl.n	80088e0 <__ssputs_r+0xa0>
 800887c:	4629      	mov	r1, r5
 800887e:	f000 fb53 	bl	8008f28 <_malloc_r>
 8008882:	4606      	mov	r6, r0
 8008884:	b950      	cbnz	r0, 800889c <__ssputs_r+0x5c>
 8008886:	230c      	movs	r3, #12
 8008888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800888c:	f8ca 3000 	str.w	r3, [sl]
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008896:	81a3      	strh	r3, [r4, #12]
 8008898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889c:	464a      	mov	r2, r9
 800889e:	6921      	ldr	r1, [r4, #16]
 80088a0:	f000 face 	bl	8008e40 <memcpy>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	6126      	str	r6, [r4, #16]
 80088b2:	444e      	add	r6, r9
 80088b4:	6026      	str	r6, [r4, #0]
 80088b6:	463e      	mov	r6, r7
 80088b8:	6165      	str	r5, [r4, #20]
 80088ba:	eba5 0509 	sub.w	r5, r5, r9
 80088be:	60a5      	str	r5, [r4, #8]
 80088c0:	42be      	cmp	r6, r7
 80088c2:	d900      	bls.n	80088c6 <__ssputs_r+0x86>
 80088c4:	463e      	mov	r6, r7
 80088c6:	4632      	mov	r2, r6
 80088c8:	4641      	mov	r1, r8
 80088ca:	6820      	ldr	r0, [r4, #0]
 80088cc:	f000 fac6 	bl	8008e5c <memmove>
 80088d0:	68a3      	ldr	r3, [r4, #8]
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	1b9b      	subs	r3, r3, r6
 80088d6:	4432      	add	r2, r6
 80088d8:	2000      	movs	r0, #0
 80088da:	60a3      	str	r3, [r4, #8]
 80088dc:	6022      	str	r2, [r4, #0]
 80088de:	e7db      	b.n	8008898 <__ssputs_r+0x58>
 80088e0:	462a      	mov	r2, r5
 80088e2:	f000 fb7b 	bl	8008fdc <_realloc_r>
 80088e6:	4606      	mov	r6, r0
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d1e1      	bne.n	80088b0 <__ssputs_r+0x70>
 80088ec:	4650      	mov	r0, sl
 80088ee:	6921      	ldr	r1, [r4, #16]
 80088f0:	f000 face 	bl	8008e90 <_free_r>
 80088f4:	e7c7      	b.n	8008886 <__ssputs_r+0x46>
	...

080088f8 <_svfiprintf_r>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	4698      	mov	r8, r3
 80088fe:	898b      	ldrh	r3, [r1, #12]
 8008900:	4607      	mov	r7, r0
 8008902:	061b      	lsls	r3, r3, #24
 8008904:	460d      	mov	r5, r1
 8008906:	4614      	mov	r4, r2
 8008908:	b09d      	sub	sp, #116	; 0x74
 800890a:	d50e      	bpl.n	800892a <_svfiprintf_r+0x32>
 800890c:	690b      	ldr	r3, [r1, #16]
 800890e:	b963      	cbnz	r3, 800892a <_svfiprintf_r+0x32>
 8008910:	2140      	movs	r1, #64	; 0x40
 8008912:	f000 fb09 	bl	8008f28 <_malloc_r>
 8008916:	6028      	str	r0, [r5, #0]
 8008918:	6128      	str	r0, [r5, #16]
 800891a:	b920      	cbnz	r0, 8008926 <_svfiprintf_r+0x2e>
 800891c:	230c      	movs	r3, #12
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008924:	e0d1      	b.n	8008aca <_svfiprintf_r+0x1d2>
 8008926:	2340      	movs	r3, #64	; 0x40
 8008928:	616b      	str	r3, [r5, #20]
 800892a:	2300      	movs	r3, #0
 800892c:	9309      	str	r3, [sp, #36]	; 0x24
 800892e:	2320      	movs	r3, #32
 8008930:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008934:	2330      	movs	r3, #48	; 0x30
 8008936:	f04f 0901 	mov.w	r9, #1
 800893a:	f8cd 800c 	str.w	r8, [sp, #12]
 800893e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ae4 <_svfiprintf_r+0x1ec>
 8008942:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008946:	4623      	mov	r3, r4
 8008948:	469a      	mov	sl, r3
 800894a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800894e:	b10a      	cbz	r2, 8008954 <_svfiprintf_r+0x5c>
 8008950:	2a25      	cmp	r2, #37	; 0x25
 8008952:	d1f9      	bne.n	8008948 <_svfiprintf_r+0x50>
 8008954:	ebba 0b04 	subs.w	fp, sl, r4
 8008958:	d00b      	beq.n	8008972 <_svfiprintf_r+0x7a>
 800895a:	465b      	mov	r3, fp
 800895c:	4622      	mov	r2, r4
 800895e:	4629      	mov	r1, r5
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff ff6d 	bl	8008840 <__ssputs_r>
 8008966:	3001      	adds	r0, #1
 8008968:	f000 80aa 	beq.w	8008ac0 <_svfiprintf_r+0x1c8>
 800896c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800896e:	445a      	add	r2, fp
 8008970:	9209      	str	r2, [sp, #36]	; 0x24
 8008972:	f89a 3000 	ldrb.w	r3, [sl]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 80a2 	beq.w	8008ac0 <_svfiprintf_r+0x1c8>
 800897c:	2300      	movs	r3, #0
 800897e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008986:	f10a 0a01 	add.w	sl, sl, #1
 800898a:	9304      	str	r3, [sp, #16]
 800898c:	9307      	str	r3, [sp, #28]
 800898e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008992:	931a      	str	r3, [sp, #104]	; 0x68
 8008994:	4654      	mov	r4, sl
 8008996:	2205      	movs	r2, #5
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	4851      	ldr	r0, [pc, #324]	; (8008ae4 <_svfiprintf_r+0x1ec>)
 800899e:	f000 fa41 	bl	8008e24 <memchr>
 80089a2:	9a04      	ldr	r2, [sp, #16]
 80089a4:	b9d8      	cbnz	r0, 80089de <_svfiprintf_r+0xe6>
 80089a6:	06d0      	lsls	r0, r2, #27
 80089a8:	bf44      	itt	mi
 80089aa:	2320      	movmi	r3, #32
 80089ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089b0:	0711      	lsls	r1, r2, #28
 80089b2:	bf44      	itt	mi
 80089b4:	232b      	movmi	r3, #43	; 0x2b
 80089b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ba:	f89a 3000 	ldrb.w	r3, [sl]
 80089be:	2b2a      	cmp	r3, #42	; 0x2a
 80089c0:	d015      	beq.n	80089ee <_svfiprintf_r+0xf6>
 80089c2:	4654      	mov	r4, sl
 80089c4:	2000      	movs	r0, #0
 80089c6:	f04f 0c0a 	mov.w	ip, #10
 80089ca:	9a07      	ldr	r2, [sp, #28]
 80089cc:	4621      	mov	r1, r4
 80089ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089d2:	3b30      	subs	r3, #48	; 0x30
 80089d4:	2b09      	cmp	r3, #9
 80089d6:	d94e      	bls.n	8008a76 <_svfiprintf_r+0x17e>
 80089d8:	b1b0      	cbz	r0, 8008a08 <_svfiprintf_r+0x110>
 80089da:	9207      	str	r2, [sp, #28]
 80089dc:	e014      	b.n	8008a08 <_svfiprintf_r+0x110>
 80089de:	eba0 0308 	sub.w	r3, r0, r8
 80089e2:	fa09 f303 	lsl.w	r3, r9, r3
 80089e6:	4313      	orrs	r3, r2
 80089e8:	46a2      	mov	sl, r4
 80089ea:	9304      	str	r3, [sp, #16]
 80089ec:	e7d2      	b.n	8008994 <_svfiprintf_r+0x9c>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	1d19      	adds	r1, r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	9103      	str	r1, [sp, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	bfbb      	ittet	lt
 80089fa:	425b      	neglt	r3, r3
 80089fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008a00:	9307      	strge	r3, [sp, #28]
 8008a02:	9307      	strlt	r3, [sp, #28]
 8008a04:	bfb8      	it	lt
 8008a06:	9204      	strlt	r2, [sp, #16]
 8008a08:	7823      	ldrb	r3, [r4, #0]
 8008a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a0c:	d10c      	bne.n	8008a28 <_svfiprintf_r+0x130>
 8008a0e:	7863      	ldrb	r3, [r4, #1]
 8008a10:	2b2a      	cmp	r3, #42	; 0x2a
 8008a12:	d135      	bne.n	8008a80 <_svfiprintf_r+0x188>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	3402      	adds	r4, #2
 8008a18:	1d1a      	adds	r2, r3, #4
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	9203      	str	r2, [sp, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	bfb8      	it	lt
 8008a22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a26:	9305      	str	r3, [sp, #20]
 8008a28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008af4 <_svfiprintf_r+0x1fc>
 8008a2c:	2203      	movs	r2, #3
 8008a2e:	4650      	mov	r0, sl
 8008a30:	7821      	ldrb	r1, [r4, #0]
 8008a32:	f000 f9f7 	bl	8008e24 <memchr>
 8008a36:	b140      	cbz	r0, 8008a4a <_svfiprintf_r+0x152>
 8008a38:	2340      	movs	r3, #64	; 0x40
 8008a3a:	eba0 000a 	sub.w	r0, r0, sl
 8008a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a42:	9b04      	ldr	r3, [sp, #16]
 8008a44:	3401      	adds	r4, #1
 8008a46:	4303      	orrs	r3, r0
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4e:	2206      	movs	r2, #6
 8008a50:	4825      	ldr	r0, [pc, #148]	; (8008ae8 <_svfiprintf_r+0x1f0>)
 8008a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a56:	f000 f9e5 	bl	8008e24 <memchr>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d038      	beq.n	8008ad0 <_svfiprintf_r+0x1d8>
 8008a5e:	4b23      	ldr	r3, [pc, #140]	; (8008aec <_svfiprintf_r+0x1f4>)
 8008a60:	bb1b      	cbnz	r3, 8008aaa <_svfiprintf_r+0x1b2>
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	3307      	adds	r3, #7
 8008a66:	f023 0307 	bic.w	r3, r3, #7
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	9303      	str	r3, [sp, #12]
 8008a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a70:	4433      	add	r3, r6
 8008a72:	9309      	str	r3, [sp, #36]	; 0x24
 8008a74:	e767      	b.n	8008946 <_svfiprintf_r+0x4e>
 8008a76:	460c      	mov	r4, r1
 8008a78:	2001      	movs	r0, #1
 8008a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a7e:	e7a5      	b.n	80089cc <_svfiprintf_r+0xd4>
 8008a80:	2300      	movs	r3, #0
 8008a82:	f04f 0c0a 	mov.w	ip, #10
 8008a86:	4619      	mov	r1, r3
 8008a88:	3401      	adds	r4, #1
 8008a8a:	9305      	str	r3, [sp, #20]
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a92:	3a30      	subs	r2, #48	; 0x30
 8008a94:	2a09      	cmp	r2, #9
 8008a96:	d903      	bls.n	8008aa0 <_svfiprintf_r+0x1a8>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0c5      	beq.n	8008a28 <_svfiprintf_r+0x130>
 8008a9c:	9105      	str	r1, [sp, #20]
 8008a9e:	e7c3      	b.n	8008a28 <_svfiprintf_r+0x130>
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa8:	e7f0      	b.n	8008a8c <_svfiprintf_r+0x194>
 8008aaa:	ab03      	add	r3, sp, #12
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	462a      	mov	r2, r5
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <_svfiprintf_r+0x1f8>)
 8008ab4:	a904      	add	r1, sp, #16
 8008ab6:	f3af 8000 	nop.w
 8008aba:	1c42      	adds	r2, r0, #1
 8008abc:	4606      	mov	r6, r0
 8008abe:	d1d6      	bne.n	8008a6e <_svfiprintf_r+0x176>
 8008ac0:	89ab      	ldrh	r3, [r5, #12]
 8008ac2:	065b      	lsls	r3, r3, #25
 8008ac4:	f53f af2c 	bmi.w	8008920 <_svfiprintf_r+0x28>
 8008ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aca:	b01d      	add	sp, #116	; 0x74
 8008acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad0:	ab03      	add	r3, sp, #12
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <_svfiprintf_r+0x1f8>)
 8008ada:	a904      	add	r1, sp, #16
 8008adc:	f000 f87c 	bl	8008bd8 <_printf_i>
 8008ae0:	e7eb      	b.n	8008aba <_svfiprintf_r+0x1c2>
 8008ae2:	bf00      	nop
 8008ae4:	08009a3d 	.word	0x08009a3d
 8008ae8:	08009a47 	.word	0x08009a47
 8008aec:	00000000 	.word	0x00000000
 8008af0:	08008841 	.word	0x08008841
 8008af4:	08009a43 	.word	0x08009a43

08008af8 <_printf_common>:
 8008af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	4616      	mov	r6, r2
 8008afe:	4699      	mov	r9, r3
 8008b00:	688a      	ldr	r2, [r1, #8]
 8008b02:	690b      	ldr	r3, [r1, #16]
 8008b04:	4607      	mov	r7, r0
 8008b06:	4293      	cmp	r3, r2
 8008b08:	bfb8      	it	lt
 8008b0a:	4613      	movlt	r3, r2
 8008b0c:	6033      	str	r3, [r6, #0]
 8008b0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b12:	460c      	mov	r4, r1
 8008b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b18:	b10a      	cbz	r2, 8008b1e <_printf_common+0x26>
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	6033      	str	r3, [r6, #0]
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	0699      	lsls	r1, r3, #26
 8008b22:	bf42      	ittt	mi
 8008b24:	6833      	ldrmi	r3, [r6, #0]
 8008b26:	3302      	addmi	r3, #2
 8008b28:	6033      	strmi	r3, [r6, #0]
 8008b2a:	6825      	ldr	r5, [r4, #0]
 8008b2c:	f015 0506 	ands.w	r5, r5, #6
 8008b30:	d106      	bne.n	8008b40 <_printf_common+0x48>
 8008b32:	f104 0a19 	add.w	sl, r4, #25
 8008b36:	68e3      	ldr	r3, [r4, #12]
 8008b38:	6832      	ldr	r2, [r6, #0]
 8008b3a:	1a9b      	subs	r3, r3, r2
 8008b3c:	42ab      	cmp	r3, r5
 8008b3e:	dc28      	bgt.n	8008b92 <_printf_common+0x9a>
 8008b40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b44:	1e13      	subs	r3, r2, #0
 8008b46:	6822      	ldr	r2, [r4, #0]
 8008b48:	bf18      	it	ne
 8008b4a:	2301      	movne	r3, #1
 8008b4c:	0692      	lsls	r2, r2, #26
 8008b4e:	d42d      	bmi.n	8008bac <_printf_common+0xb4>
 8008b50:	4649      	mov	r1, r9
 8008b52:	4638      	mov	r0, r7
 8008b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b58:	47c0      	blx	r8
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	d020      	beq.n	8008ba0 <_printf_common+0xa8>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	68e5      	ldr	r5, [r4, #12]
 8008b62:	f003 0306 	and.w	r3, r3, #6
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	bf18      	it	ne
 8008b6a:	2500      	movne	r5, #0
 8008b6c:	6832      	ldr	r2, [r6, #0]
 8008b6e:	f04f 0600 	mov.w	r6, #0
 8008b72:	68a3      	ldr	r3, [r4, #8]
 8008b74:	bf08      	it	eq
 8008b76:	1aad      	subeq	r5, r5, r2
 8008b78:	6922      	ldr	r2, [r4, #16]
 8008b7a:	bf08      	it	eq
 8008b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b80:	4293      	cmp	r3, r2
 8008b82:	bfc4      	itt	gt
 8008b84:	1a9b      	subgt	r3, r3, r2
 8008b86:	18ed      	addgt	r5, r5, r3
 8008b88:	341a      	adds	r4, #26
 8008b8a:	42b5      	cmp	r5, r6
 8008b8c:	d11a      	bne.n	8008bc4 <_printf_common+0xcc>
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e008      	b.n	8008ba4 <_printf_common+0xac>
 8008b92:	2301      	movs	r3, #1
 8008b94:	4652      	mov	r2, sl
 8008b96:	4649      	mov	r1, r9
 8008b98:	4638      	mov	r0, r7
 8008b9a:	47c0      	blx	r8
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	d103      	bne.n	8008ba8 <_printf_common+0xb0>
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba8:	3501      	adds	r5, #1
 8008baa:	e7c4      	b.n	8008b36 <_printf_common+0x3e>
 8008bac:	2030      	movs	r0, #48	; 0x30
 8008bae:	18e1      	adds	r1, r4, r3
 8008bb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bba:	4422      	add	r2, r4
 8008bbc:	3302      	adds	r3, #2
 8008bbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bc2:	e7c5      	b.n	8008b50 <_printf_common+0x58>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	4649      	mov	r1, r9
 8008bca:	4638      	mov	r0, r7
 8008bcc:	47c0      	blx	r8
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d0e6      	beq.n	8008ba0 <_printf_common+0xa8>
 8008bd2:	3601      	adds	r6, #1
 8008bd4:	e7d9      	b.n	8008b8a <_printf_common+0x92>
	...

08008bd8 <_printf_i>:
 8008bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bdc:	460c      	mov	r4, r1
 8008bde:	7e27      	ldrb	r7, [r4, #24]
 8008be0:	4691      	mov	r9, r2
 8008be2:	2f78      	cmp	r7, #120	; 0x78
 8008be4:	4680      	mov	r8, r0
 8008be6:	469a      	mov	sl, r3
 8008be8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008bea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bee:	d807      	bhi.n	8008c00 <_printf_i+0x28>
 8008bf0:	2f62      	cmp	r7, #98	; 0x62
 8008bf2:	d80a      	bhi.n	8008c0a <_printf_i+0x32>
 8008bf4:	2f00      	cmp	r7, #0
 8008bf6:	f000 80d9 	beq.w	8008dac <_printf_i+0x1d4>
 8008bfa:	2f58      	cmp	r7, #88	; 0x58
 8008bfc:	f000 80a4 	beq.w	8008d48 <_printf_i+0x170>
 8008c00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c08:	e03a      	b.n	8008c80 <_printf_i+0xa8>
 8008c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c0e:	2b15      	cmp	r3, #21
 8008c10:	d8f6      	bhi.n	8008c00 <_printf_i+0x28>
 8008c12:	a001      	add	r0, pc, #4	; (adr r0, 8008c18 <_printf_i+0x40>)
 8008c14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c18:	08008c71 	.word	0x08008c71
 8008c1c:	08008c85 	.word	0x08008c85
 8008c20:	08008c01 	.word	0x08008c01
 8008c24:	08008c01 	.word	0x08008c01
 8008c28:	08008c01 	.word	0x08008c01
 8008c2c:	08008c01 	.word	0x08008c01
 8008c30:	08008c85 	.word	0x08008c85
 8008c34:	08008c01 	.word	0x08008c01
 8008c38:	08008c01 	.word	0x08008c01
 8008c3c:	08008c01 	.word	0x08008c01
 8008c40:	08008c01 	.word	0x08008c01
 8008c44:	08008d93 	.word	0x08008d93
 8008c48:	08008cb5 	.word	0x08008cb5
 8008c4c:	08008d75 	.word	0x08008d75
 8008c50:	08008c01 	.word	0x08008c01
 8008c54:	08008c01 	.word	0x08008c01
 8008c58:	08008db5 	.word	0x08008db5
 8008c5c:	08008c01 	.word	0x08008c01
 8008c60:	08008cb5 	.word	0x08008cb5
 8008c64:	08008c01 	.word	0x08008c01
 8008c68:	08008c01 	.word	0x08008c01
 8008c6c:	08008d7d 	.word	0x08008d7d
 8008c70:	680b      	ldr	r3, [r1, #0]
 8008c72:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c76:	1d1a      	adds	r2, r3, #4
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	600a      	str	r2, [r1, #0]
 8008c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c80:	2301      	movs	r3, #1
 8008c82:	e0a4      	b.n	8008dce <_printf_i+0x1f6>
 8008c84:	6825      	ldr	r5, [r4, #0]
 8008c86:	6808      	ldr	r0, [r1, #0]
 8008c88:	062e      	lsls	r6, r5, #24
 8008c8a:	f100 0304 	add.w	r3, r0, #4
 8008c8e:	d50a      	bpl.n	8008ca6 <_printf_i+0xce>
 8008c90:	6805      	ldr	r5, [r0, #0]
 8008c92:	600b      	str	r3, [r1, #0]
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	da03      	bge.n	8008ca0 <_printf_i+0xc8>
 8008c98:	232d      	movs	r3, #45	; 0x2d
 8008c9a:	426d      	negs	r5, r5
 8008c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ca0:	230a      	movs	r3, #10
 8008ca2:	485e      	ldr	r0, [pc, #376]	; (8008e1c <_printf_i+0x244>)
 8008ca4:	e019      	b.n	8008cda <_printf_i+0x102>
 8008ca6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008caa:	6805      	ldr	r5, [r0, #0]
 8008cac:	600b      	str	r3, [r1, #0]
 8008cae:	bf18      	it	ne
 8008cb0:	b22d      	sxthne	r5, r5
 8008cb2:	e7ef      	b.n	8008c94 <_printf_i+0xbc>
 8008cb4:	680b      	ldr	r3, [r1, #0]
 8008cb6:	6825      	ldr	r5, [r4, #0]
 8008cb8:	1d18      	adds	r0, r3, #4
 8008cba:	6008      	str	r0, [r1, #0]
 8008cbc:	0628      	lsls	r0, r5, #24
 8008cbe:	d501      	bpl.n	8008cc4 <_printf_i+0xec>
 8008cc0:	681d      	ldr	r5, [r3, #0]
 8008cc2:	e002      	b.n	8008cca <_printf_i+0xf2>
 8008cc4:	0669      	lsls	r1, r5, #25
 8008cc6:	d5fb      	bpl.n	8008cc0 <_printf_i+0xe8>
 8008cc8:	881d      	ldrh	r5, [r3, #0]
 8008cca:	2f6f      	cmp	r7, #111	; 0x6f
 8008ccc:	bf0c      	ite	eq
 8008cce:	2308      	moveq	r3, #8
 8008cd0:	230a      	movne	r3, #10
 8008cd2:	4852      	ldr	r0, [pc, #328]	; (8008e1c <_printf_i+0x244>)
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cda:	6866      	ldr	r6, [r4, #4]
 8008cdc:	2e00      	cmp	r6, #0
 8008cde:	bfa8      	it	ge
 8008ce0:	6821      	ldrge	r1, [r4, #0]
 8008ce2:	60a6      	str	r6, [r4, #8]
 8008ce4:	bfa4      	itt	ge
 8008ce6:	f021 0104 	bicge.w	r1, r1, #4
 8008cea:	6021      	strge	r1, [r4, #0]
 8008cec:	b90d      	cbnz	r5, 8008cf2 <_printf_i+0x11a>
 8008cee:	2e00      	cmp	r6, #0
 8008cf0:	d04d      	beq.n	8008d8e <_printf_i+0x1b6>
 8008cf2:	4616      	mov	r6, r2
 8008cf4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cf8:	fb03 5711 	mls	r7, r3, r1, r5
 8008cfc:	5dc7      	ldrb	r7, [r0, r7]
 8008cfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d02:	462f      	mov	r7, r5
 8008d04:	42bb      	cmp	r3, r7
 8008d06:	460d      	mov	r5, r1
 8008d08:	d9f4      	bls.n	8008cf4 <_printf_i+0x11c>
 8008d0a:	2b08      	cmp	r3, #8
 8008d0c:	d10b      	bne.n	8008d26 <_printf_i+0x14e>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	07df      	lsls	r7, r3, #31
 8008d12:	d508      	bpl.n	8008d26 <_printf_i+0x14e>
 8008d14:	6923      	ldr	r3, [r4, #16]
 8008d16:	6861      	ldr	r1, [r4, #4]
 8008d18:	4299      	cmp	r1, r3
 8008d1a:	bfde      	ittt	le
 8008d1c:	2330      	movle	r3, #48	; 0x30
 8008d1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d22:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008d26:	1b92      	subs	r2, r2, r6
 8008d28:	6122      	str	r2, [r4, #16]
 8008d2a:	464b      	mov	r3, r9
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4640      	mov	r0, r8
 8008d30:	f8cd a000 	str.w	sl, [sp]
 8008d34:	aa03      	add	r2, sp, #12
 8008d36:	f7ff fedf 	bl	8008af8 <_printf_common>
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	d14c      	bne.n	8008dd8 <_printf_i+0x200>
 8008d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d42:	b004      	add	sp, #16
 8008d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d48:	4834      	ldr	r0, [pc, #208]	; (8008e1c <_printf_i+0x244>)
 8008d4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d4e:	680e      	ldr	r6, [r1, #0]
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d56:	061f      	lsls	r7, r3, #24
 8008d58:	600e      	str	r6, [r1, #0]
 8008d5a:	d514      	bpl.n	8008d86 <_printf_i+0x1ae>
 8008d5c:	07d9      	lsls	r1, r3, #31
 8008d5e:	bf44      	itt	mi
 8008d60:	f043 0320 	orrmi.w	r3, r3, #32
 8008d64:	6023      	strmi	r3, [r4, #0]
 8008d66:	b91d      	cbnz	r5, 8008d70 <_printf_i+0x198>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	f023 0320 	bic.w	r3, r3, #32
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	2310      	movs	r3, #16
 8008d72:	e7af      	b.n	8008cd4 <_printf_i+0xfc>
 8008d74:	6823      	ldr	r3, [r4, #0]
 8008d76:	f043 0320 	orr.w	r3, r3, #32
 8008d7a:	6023      	str	r3, [r4, #0]
 8008d7c:	2378      	movs	r3, #120	; 0x78
 8008d7e:	4828      	ldr	r0, [pc, #160]	; (8008e20 <_printf_i+0x248>)
 8008d80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d84:	e7e3      	b.n	8008d4e <_printf_i+0x176>
 8008d86:	065e      	lsls	r6, r3, #25
 8008d88:	bf48      	it	mi
 8008d8a:	b2ad      	uxthmi	r5, r5
 8008d8c:	e7e6      	b.n	8008d5c <_printf_i+0x184>
 8008d8e:	4616      	mov	r6, r2
 8008d90:	e7bb      	b.n	8008d0a <_printf_i+0x132>
 8008d92:	680b      	ldr	r3, [r1, #0]
 8008d94:	6826      	ldr	r6, [r4, #0]
 8008d96:	1d1d      	adds	r5, r3, #4
 8008d98:	6960      	ldr	r0, [r4, #20]
 8008d9a:	600d      	str	r5, [r1, #0]
 8008d9c:	0635      	lsls	r5, r6, #24
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	d501      	bpl.n	8008da6 <_printf_i+0x1ce>
 8008da2:	6018      	str	r0, [r3, #0]
 8008da4:	e002      	b.n	8008dac <_printf_i+0x1d4>
 8008da6:	0671      	lsls	r1, r6, #25
 8008da8:	d5fb      	bpl.n	8008da2 <_printf_i+0x1ca>
 8008daa:	8018      	strh	r0, [r3, #0]
 8008dac:	2300      	movs	r3, #0
 8008dae:	4616      	mov	r6, r2
 8008db0:	6123      	str	r3, [r4, #16]
 8008db2:	e7ba      	b.n	8008d2a <_printf_i+0x152>
 8008db4:	680b      	ldr	r3, [r1, #0]
 8008db6:	1d1a      	adds	r2, r3, #4
 8008db8:	600a      	str	r2, [r1, #0]
 8008dba:	681e      	ldr	r6, [r3, #0]
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	6862      	ldr	r2, [r4, #4]
 8008dc2:	f000 f82f 	bl	8008e24 <memchr>
 8008dc6:	b108      	cbz	r0, 8008dcc <_printf_i+0x1f4>
 8008dc8:	1b80      	subs	r0, r0, r6
 8008dca:	6060      	str	r0, [r4, #4]
 8008dcc:	6863      	ldr	r3, [r4, #4]
 8008dce:	6123      	str	r3, [r4, #16]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dd6:	e7a8      	b.n	8008d2a <_printf_i+0x152>
 8008dd8:	4632      	mov	r2, r6
 8008dda:	4649      	mov	r1, r9
 8008ddc:	4640      	mov	r0, r8
 8008dde:	6923      	ldr	r3, [r4, #16]
 8008de0:	47d0      	blx	sl
 8008de2:	3001      	adds	r0, #1
 8008de4:	d0ab      	beq.n	8008d3e <_printf_i+0x166>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	079b      	lsls	r3, r3, #30
 8008dea:	d413      	bmi.n	8008e14 <_printf_i+0x23c>
 8008dec:	68e0      	ldr	r0, [r4, #12]
 8008dee:	9b03      	ldr	r3, [sp, #12]
 8008df0:	4298      	cmp	r0, r3
 8008df2:	bfb8      	it	lt
 8008df4:	4618      	movlt	r0, r3
 8008df6:	e7a4      	b.n	8008d42 <_printf_i+0x16a>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	4632      	mov	r2, r6
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	4640      	mov	r0, r8
 8008e00:	47d0      	blx	sl
 8008e02:	3001      	adds	r0, #1
 8008e04:	d09b      	beq.n	8008d3e <_printf_i+0x166>
 8008e06:	3501      	adds	r5, #1
 8008e08:	68e3      	ldr	r3, [r4, #12]
 8008e0a:	9903      	ldr	r1, [sp, #12]
 8008e0c:	1a5b      	subs	r3, r3, r1
 8008e0e:	42ab      	cmp	r3, r5
 8008e10:	dcf2      	bgt.n	8008df8 <_printf_i+0x220>
 8008e12:	e7eb      	b.n	8008dec <_printf_i+0x214>
 8008e14:	2500      	movs	r5, #0
 8008e16:	f104 0619 	add.w	r6, r4, #25
 8008e1a:	e7f5      	b.n	8008e08 <_printf_i+0x230>
 8008e1c:	08009a4e 	.word	0x08009a4e
 8008e20:	08009a5f 	.word	0x08009a5f

08008e24 <memchr>:
 8008e24:	4603      	mov	r3, r0
 8008e26:	b510      	push	{r4, lr}
 8008e28:	b2c9      	uxtb	r1, r1
 8008e2a:	4402      	add	r2, r0
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	4618      	mov	r0, r3
 8008e30:	d101      	bne.n	8008e36 <memchr+0x12>
 8008e32:	2000      	movs	r0, #0
 8008e34:	e003      	b.n	8008e3e <memchr+0x1a>
 8008e36:	7804      	ldrb	r4, [r0, #0]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	428c      	cmp	r4, r1
 8008e3c:	d1f6      	bne.n	8008e2c <memchr+0x8>
 8008e3e:	bd10      	pop	{r4, pc}

08008e40 <memcpy>:
 8008e40:	440a      	add	r2, r1
 8008e42:	4291      	cmp	r1, r2
 8008e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e48:	d100      	bne.n	8008e4c <memcpy+0xc>
 8008e4a:	4770      	bx	lr
 8008e4c:	b510      	push	{r4, lr}
 8008e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e52:	4291      	cmp	r1, r2
 8008e54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e58:	d1f9      	bne.n	8008e4e <memcpy+0xe>
 8008e5a:	bd10      	pop	{r4, pc}

08008e5c <memmove>:
 8008e5c:	4288      	cmp	r0, r1
 8008e5e:	b510      	push	{r4, lr}
 8008e60:	eb01 0402 	add.w	r4, r1, r2
 8008e64:	d902      	bls.n	8008e6c <memmove+0x10>
 8008e66:	4284      	cmp	r4, r0
 8008e68:	4623      	mov	r3, r4
 8008e6a:	d807      	bhi.n	8008e7c <memmove+0x20>
 8008e6c:	1e43      	subs	r3, r0, #1
 8008e6e:	42a1      	cmp	r1, r4
 8008e70:	d008      	beq.n	8008e84 <memmove+0x28>
 8008e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e7a:	e7f8      	b.n	8008e6e <memmove+0x12>
 8008e7c:	4601      	mov	r1, r0
 8008e7e:	4402      	add	r2, r0
 8008e80:	428a      	cmp	r2, r1
 8008e82:	d100      	bne.n	8008e86 <memmove+0x2a>
 8008e84:	bd10      	pop	{r4, pc}
 8008e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e8e:	e7f7      	b.n	8008e80 <memmove+0x24>

08008e90 <_free_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4605      	mov	r5, r0
 8008e94:	2900      	cmp	r1, #0
 8008e96:	d043      	beq.n	8008f20 <_free_r+0x90>
 8008e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e9c:	1f0c      	subs	r4, r1, #4
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	bfb8      	it	lt
 8008ea2:	18e4      	addlt	r4, r4, r3
 8008ea4:	f000 f8d0 	bl	8009048 <__malloc_lock>
 8008ea8:	4a1e      	ldr	r2, [pc, #120]	; (8008f24 <_free_r+0x94>)
 8008eaa:	6813      	ldr	r3, [r2, #0]
 8008eac:	4610      	mov	r0, r2
 8008eae:	b933      	cbnz	r3, 8008ebe <_free_r+0x2e>
 8008eb0:	6063      	str	r3, [r4, #4]
 8008eb2:	6014      	str	r4, [r2, #0]
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eba:	f000 b8cb 	b.w	8009054 <__malloc_unlock>
 8008ebe:	42a3      	cmp	r3, r4
 8008ec0:	d90a      	bls.n	8008ed8 <_free_r+0x48>
 8008ec2:	6821      	ldr	r1, [r4, #0]
 8008ec4:	1862      	adds	r2, r4, r1
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	bf01      	itttt	eq
 8008eca:	681a      	ldreq	r2, [r3, #0]
 8008ecc:	685b      	ldreq	r3, [r3, #4]
 8008ece:	1852      	addeq	r2, r2, r1
 8008ed0:	6022      	streq	r2, [r4, #0]
 8008ed2:	6063      	str	r3, [r4, #4]
 8008ed4:	6004      	str	r4, [r0, #0]
 8008ed6:	e7ed      	b.n	8008eb4 <_free_r+0x24>
 8008ed8:	461a      	mov	r2, r3
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	b10b      	cbz	r3, 8008ee2 <_free_r+0x52>
 8008ede:	42a3      	cmp	r3, r4
 8008ee0:	d9fa      	bls.n	8008ed8 <_free_r+0x48>
 8008ee2:	6811      	ldr	r1, [r2, #0]
 8008ee4:	1850      	adds	r0, r2, r1
 8008ee6:	42a0      	cmp	r0, r4
 8008ee8:	d10b      	bne.n	8008f02 <_free_r+0x72>
 8008eea:	6820      	ldr	r0, [r4, #0]
 8008eec:	4401      	add	r1, r0
 8008eee:	1850      	adds	r0, r2, r1
 8008ef0:	4283      	cmp	r3, r0
 8008ef2:	6011      	str	r1, [r2, #0]
 8008ef4:	d1de      	bne.n	8008eb4 <_free_r+0x24>
 8008ef6:	6818      	ldr	r0, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	4401      	add	r1, r0
 8008efc:	6011      	str	r1, [r2, #0]
 8008efe:	6053      	str	r3, [r2, #4]
 8008f00:	e7d8      	b.n	8008eb4 <_free_r+0x24>
 8008f02:	d902      	bls.n	8008f0a <_free_r+0x7a>
 8008f04:	230c      	movs	r3, #12
 8008f06:	602b      	str	r3, [r5, #0]
 8008f08:	e7d4      	b.n	8008eb4 <_free_r+0x24>
 8008f0a:	6820      	ldr	r0, [r4, #0]
 8008f0c:	1821      	adds	r1, r4, r0
 8008f0e:	428b      	cmp	r3, r1
 8008f10:	bf01      	itttt	eq
 8008f12:	6819      	ldreq	r1, [r3, #0]
 8008f14:	685b      	ldreq	r3, [r3, #4]
 8008f16:	1809      	addeq	r1, r1, r0
 8008f18:	6021      	streq	r1, [r4, #0]
 8008f1a:	6063      	str	r3, [r4, #4]
 8008f1c:	6054      	str	r4, [r2, #4]
 8008f1e:	e7c9      	b.n	8008eb4 <_free_r+0x24>
 8008f20:	bd38      	pop	{r3, r4, r5, pc}
 8008f22:	bf00      	nop
 8008f24:	200005a4 	.word	0x200005a4

08008f28 <_malloc_r>:
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	1ccd      	adds	r5, r1, #3
 8008f2c:	f025 0503 	bic.w	r5, r5, #3
 8008f30:	3508      	adds	r5, #8
 8008f32:	2d0c      	cmp	r5, #12
 8008f34:	bf38      	it	cc
 8008f36:	250c      	movcc	r5, #12
 8008f38:	2d00      	cmp	r5, #0
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	db01      	blt.n	8008f42 <_malloc_r+0x1a>
 8008f3e:	42a9      	cmp	r1, r5
 8008f40:	d903      	bls.n	8008f4a <_malloc_r+0x22>
 8008f42:	230c      	movs	r3, #12
 8008f44:	6033      	str	r3, [r6, #0]
 8008f46:	2000      	movs	r0, #0
 8008f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f4a:	f000 f87d 	bl	8009048 <__malloc_lock>
 8008f4e:	4921      	ldr	r1, [pc, #132]	; (8008fd4 <_malloc_r+0xac>)
 8008f50:	680a      	ldr	r2, [r1, #0]
 8008f52:	4614      	mov	r4, r2
 8008f54:	b99c      	cbnz	r4, 8008f7e <_malloc_r+0x56>
 8008f56:	4f20      	ldr	r7, [pc, #128]	; (8008fd8 <_malloc_r+0xb0>)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	b923      	cbnz	r3, 8008f66 <_malloc_r+0x3e>
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f000 f862 	bl	8009028 <_sbrk_r>
 8008f64:	6038      	str	r0, [r7, #0]
 8008f66:	4629      	mov	r1, r5
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f000 f85d 	bl	8009028 <_sbrk_r>
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	d123      	bne.n	8008fba <_malloc_r+0x92>
 8008f72:	230c      	movs	r3, #12
 8008f74:	4630      	mov	r0, r6
 8008f76:	6033      	str	r3, [r6, #0]
 8008f78:	f000 f86c 	bl	8009054 <__malloc_unlock>
 8008f7c:	e7e3      	b.n	8008f46 <_malloc_r+0x1e>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	1b5b      	subs	r3, r3, r5
 8008f82:	d417      	bmi.n	8008fb4 <_malloc_r+0x8c>
 8008f84:	2b0b      	cmp	r3, #11
 8008f86:	d903      	bls.n	8008f90 <_malloc_r+0x68>
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	441c      	add	r4, r3
 8008f8c:	6025      	str	r5, [r4, #0]
 8008f8e:	e004      	b.n	8008f9a <_malloc_r+0x72>
 8008f90:	6863      	ldr	r3, [r4, #4]
 8008f92:	42a2      	cmp	r2, r4
 8008f94:	bf0c      	ite	eq
 8008f96:	600b      	streq	r3, [r1, #0]
 8008f98:	6053      	strne	r3, [r2, #4]
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f000 f85a 	bl	8009054 <__malloc_unlock>
 8008fa0:	f104 000b 	add.w	r0, r4, #11
 8008fa4:	1d23      	adds	r3, r4, #4
 8008fa6:	f020 0007 	bic.w	r0, r0, #7
 8008faa:	1ac2      	subs	r2, r0, r3
 8008fac:	d0cc      	beq.n	8008f48 <_malloc_r+0x20>
 8008fae:	1a1b      	subs	r3, r3, r0
 8008fb0:	50a3      	str	r3, [r4, r2]
 8008fb2:	e7c9      	b.n	8008f48 <_malloc_r+0x20>
 8008fb4:	4622      	mov	r2, r4
 8008fb6:	6864      	ldr	r4, [r4, #4]
 8008fb8:	e7cc      	b.n	8008f54 <_malloc_r+0x2c>
 8008fba:	1cc4      	adds	r4, r0, #3
 8008fbc:	f024 0403 	bic.w	r4, r4, #3
 8008fc0:	42a0      	cmp	r0, r4
 8008fc2:	d0e3      	beq.n	8008f8c <_malloc_r+0x64>
 8008fc4:	1a21      	subs	r1, r4, r0
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f000 f82e 	bl	8009028 <_sbrk_r>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d1dd      	bne.n	8008f8c <_malloc_r+0x64>
 8008fd0:	e7cf      	b.n	8008f72 <_malloc_r+0x4a>
 8008fd2:	bf00      	nop
 8008fd4:	200005a4 	.word	0x200005a4
 8008fd8:	200005a8 	.word	0x200005a8

08008fdc <_realloc_r>:
 8008fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fde:	4607      	mov	r7, r0
 8008fe0:	4614      	mov	r4, r2
 8008fe2:	460e      	mov	r6, r1
 8008fe4:	b921      	cbnz	r1, 8008ff0 <_realloc_r+0x14>
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008fec:	f7ff bf9c 	b.w	8008f28 <_malloc_r>
 8008ff0:	b922      	cbnz	r2, 8008ffc <_realloc_r+0x20>
 8008ff2:	f7ff ff4d 	bl	8008e90 <_free_r>
 8008ff6:	4625      	mov	r5, r4
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffc:	f000 f830 	bl	8009060 <_malloc_usable_size_r>
 8009000:	42a0      	cmp	r0, r4
 8009002:	d20f      	bcs.n	8009024 <_realloc_r+0x48>
 8009004:	4621      	mov	r1, r4
 8009006:	4638      	mov	r0, r7
 8009008:	f7ff ff8e 	bl	8008f28 <_malloc_r>
 800900c:	4605      	mov	r5, r0
 800900e:	2800      	cmp	r0, #0
 8009010:	d0f2      	beq.n	8008ff8 <_realloc_r+0x1c>
 8009012:	4631      	mov	r1, r6
 8009014:	4622      	mov	r2, r4
 8009016:	f7ff ff13 	bl	8008e40 <memcpy>
 800901a:	4631      	mov	r1, r6
 800901c:	4638      	mov	r0, r7
 800901e:	f7ff ff37 	bl	8008e90 <_free_r>
 8009022:	e7e9      	b.n	8008ff8 <_realloc_r+0x1c>
 8009024:	4635      	mov	r5, r6
 8009026:	e7e7      	b.n	8008ff8 <_realloc_r+0x1c>

08009028 <_sbrk_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	2300      	movs	r3, #0
 800902c:	4d05      	ldr	r5, [pc, #20]	; (8009044 <_sbrk_r+0x1c>)
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	602b      	str	r3, [r5, #0]
 8009034:	f7fa fb1c 	bl	8003670 <_sbrk>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_sbrk_r+0x1a>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	b103      	cbz	r3, 8009042 <_sbrk_r+0x1a>
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	20000a2c 	.word	0x20000a2c

08009048 <__malloc_lock>:
 8009048:	4801      	ldr	r0, [pc, #4]	; (8009050 <__malloc_lock+0x8>)
 800904a:	f000 b811 	b.w	8009070 <__retarget_lock_acquire_recursive>
 800904e:	bf00      	nop
 8009050:	20000a34 	.word	0x20000a34

08009054 <__malloc_unlock>:
 8009054:	4801      	ldr	r0, [pc, #4]	; (800905c <__malloc_unlock+0x8>)
 8009056:	f000 b80c 	b.w	8009072 <__retarget_lock_release_recursive>
 800905a:	bf00      	nop
 800905c:	20000a34 	.word	0x20000a34

08009060 <_malloc_usable_size_r>:
 8009060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009064:	1f18      	subs	r0, r3, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	bfbc      	itt	lt
 800906a:	580b      	ldrlt	r3, [r1, r0]
 800906c:	18c0      	addlt	r0, r0, r3
 800906e:	4770      	bx	lr

08009070 <__retarget_lock_acquire_recursive>:
 8009070:	4770      	bx	lr

08009072 <__retarget_lock_release_recursive>:
 8009072:	4770      	bx	lr

08009074 <_init>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	bf00      	nop
 8009078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907a:	bc08      	pop	{r3}
 800907c:	469e      	mov	lr, r3
 800907e:	4770      	bx	lr

08009080 <_fini>:
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	bf00      	nop
 8009084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009086:	bc08      	pop	{r3}
 8009088:	469e      	mov	lr, r3
 800908a:	4770      	bx	lr
