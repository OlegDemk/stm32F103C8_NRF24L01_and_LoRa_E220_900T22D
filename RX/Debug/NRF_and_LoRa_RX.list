
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009dc  08008b68  08008b68  00018b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009544  08009544  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08009544  08009544  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009544  08009544  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009548  08009548  00019548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800954c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  200000b4  08009600  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  08009600  00020a38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018693  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032be  00000000  00000000  00038770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  0003ba30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bed  00000000  00000000  0003e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d68  00000000  00000000  00057c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009064a  00000000  00000000  000709fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101047  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058e4  00000000  00000000  0010109c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08008b50 	.word	0x08008b50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08008b50 	.word	0x08008b50

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_d2f>:
 80004d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004dc:	bf24      	itt	cs
 80004de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004e6:	d90d      	bls.n	8000504 <__aeabi_d2f+0x30>
 80004e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004fc:	bf08      	it	eq
 80004fe:	f020 0001 	biceq.w	r0, r0, #1
 8000502:	4770      	bx	lr
 8000504:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000508:	d121      	bne.n	800054e <__aeabi_d2f+0x7a>
 800050a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800050e:	bfbc      	itt	lt
 8000510:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000514:	4770      	bxlt	lr
 8000516:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800051a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800051e:	f1c2 0218 	rsb	r2, r2, #24
 8000522:	f1c2 0c20 	rsb	ip, r2, #32
 8000526:	fa10 f30c 	lsls.w	r3, r0, ip
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	bf18      	it	ne
 8000530:	f040 0001 	orrne.w	r0, r0, #1
 8000534:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000538:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800053c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000540:	ea40 000c 	orr.w	r0, r0, ip
 8000544:	fa23 f302 	lsr.w	r3, r3, r2
 8000548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800054c:	e7cc      	b.n	80004e8 <__aeabi_d2f+0x14>
 800054e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000552:	d107      	bne.n	8000564 <__aeabi_d2f+0x90>
 8000554:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000558:	bf1e      	ittt	ne
 800055a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800055e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000562:	4770      	bxne	lr
 8000564:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000568:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800056c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__aeabi_frsub>:
 8000574:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000578:	e002      	b.n	8000580 <__addsf3>
 800057a:	bf00      	nop

0800057c <__aeabi_fsub>:
 800057c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000580 <__addsf3>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	bf1f      	itttt	ne
 8000584:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000588:	ea92 0f03 	teqne	r2, r3
 800058c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000590:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000594:	d06a      	beq.n	800066c <__addsf3+0xec>
 8000596:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800059a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800059e:	bfc1      	itttt	gt
 80005a0:	18d2      	addgt	r2, r2, r3
 80005a2:	4041      	eorgt	r1, r0
 80005a4:	4048      	eorgt	r0, r1
 80005a6:	4041      	eorgt	r1, r0
 80005a8:	bfb8      	it	lt
 80005aa:	425b      	neglt	r3, r3
 80005ac:	2b19      	cmp	r3, #25
 80005ae:	bf88      	it	hi
 80005b0:	4770      	bxhi	lr
 80005b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005be:	bf18      	it	ne
 80005c0:	4240      	negne	r0, r0
 80005c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ce:	bf18      	it	ne
 80005d0:	4249      	negne	r1, r1
 80005d2:	ea92 0f03 	teq	r2, r3
 80005d6:	d03f      	beq.n	8000658 <__addsf3+0xd8>
 80005d8:	f1a2 0201 	sub.w	r2, r2, #1
 80005dc:	fa41 fc03 	asr.w	ip, r1, r3
 80005e0:	eb10 000c 	adds.w	r0, r0, ip
 80005e4:	f1c3 0320 	rsb	r3, r3, #32
 80005e8:	fa01 f103 	lsl.w	r1, r1, r3
 80005ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005f0:	d502      	bpl.n	80005f8 <__addsf3+0x78>
 80005f2:	4249      	negs	r1, r1
 80005f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005fc:	d313      	bcc.n	8000626 <__addsf3+0xa6>
 80005fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000602:	d306      	bcc.n	8000612 <__addsf3+0x92>
 8000604:	0840      	lsrs	r0, r0, #1
 8000606:	ea4f 0131 	mov.w	r1, r1, rrx
 800060a:	f102 0201 	add.w	r2, r2, #1
 800060e:	2afe      	cmp	r2, #254	; 0xfe
 8000610:	d251      	bcs.n	80006b6 <__addsf3+0x136>
 8000612:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000616:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800061a:	bf08      	it	eq
 800061c:	f020 0001 	biceq.w	r0, r0, #1
 8000620:	ea40 0003 	orr.w	r0, r0, r3
 8000624:	4770      	bx	lr
 8000626:	0049      	lsls	r1, r1, #1
 8000628:	eb40 0000 	adc.w	r0, r0, r0
 800062c:	3a01      	subs	r2, #1
 800062e:	bf28      	it	cs
 8000630:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000634:	d2ed      	bcs.n	8000612 <__addsf3+0x92>
 8000636:	fab0 fc80 	clz	ip, r0
 800063a:	f1ac 0c08 	sub.w	ip, ip, #8
 800063e:	ebb2 020c 	subs.w	r2, r2, ip
 8000642:	fa00 f00c 	lsl.w	r0, r0, ip
 8000646:	bfaa      	itet	ge
 8000648:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800064c:	4252      	neglt	r2, r2
 800064e:	4318      	orrge	r0, r3
 8000650:	bfbc      	itt	lt
 8000652:	40d0      	lsrlt	r0, r2
 8000654:	4318      	orrlt	r0, r3
 8000656:	4770      	bx	lr
 8000658:	f092 0f00 	teq	r2, #0
 800065c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000660:	bf06      	itte	eq
 8000662:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000666:	3201      	addeq	r2, #1
 8000668:	3b01      	subne	r3, #1
 800066a:	e7b5      	b.n	80005d8 <__addsf3+0x58>
 800066c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000670:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000674:	bf18      	it	ne
 8000676:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800067a:	d021      	beq.n	80006c0 <__addsf3+0x140>
 800067c:	ea92 0f03 	teq	r2, r3
 8000680:	d004      	beq.n	800068c <__addsf3+0x10c>
 8000682:	f092 0f00 	teq	r2, #0
 8000686:	bf08      	it	eq
 8000688:	4608      	moveq	r0, r1
 800068a:	4770      	bx	lr
 800068c:	ea90 0f01 	teq	r0, r1
 8000690:	bf1c      	itt	ne
 8000692:	2000      	movne	r0, #0
 8000694:	4770      	bxne	lr
 8000696:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800069a:	d104      	bne.n	80006a6 <__addsf3+0x126>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	bf28      	it	cs
 80006a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006a4:	4770      	bx	lr
 80006a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006aa:	bf3c      	itt	cc
 80006ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006b0:	4770      	bxcc	lr
 80006b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006be:	4770      	bx	lr
 80006c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006c4:	bf16      	itet	ne
 80006c6:	4608      	movne	r0, r1
 80006c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006cc:	4601      	movne	r1, r0
 80006ce:	0242      	lsls	r2, r0, #9
 80006d0:	bf06      	itte	eq
 80006d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006d6:	ea90 0f01 	teqeq	r0, r1
 80006da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006de:	4770      	bx	lr

080006e0 <__aeabi_ui2f>:
 80006e0:	f04f 0300 	mov.w	r3, #0
 80006e4:	e004      	b.n	80006f0 <__aeabi_i2f+0x8>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2f>:
 80006e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006ec:	bf48      	it	mi
 80006ee:	4240      	negmi	r0, r0
 80006f0:	ea5f 0c00 	movs.w	ip, r0
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006fc:	4601      	mov	r1, r0
 80006fe:	f04f 0000 	mov.w	r0, #0
 8000702:	e01c      	b.n	800073e <__aeabi_l2f+0x2a>

08000704 <__aeabi_ul2f>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	f04f 0300 	mov.w	r3, #0
 8000710:	e00a      	b.n	8000728 <__aeabi_l2f+0x14>
 8000712:	bf00      	nop

08000714 <__aeabi_l2f>:
 8000714:	ea50 0201 	orrs.w	r2, r0, r1
 8000718:	bf08      	it	eq
 800071a:	4770      	bxeq	lr
 800071c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000720:	d502      	bpl.n	8000728 <__aeabi_l2f+0x14>
 8000722:	4240      	negs	r0, r0
 8000724:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000728:	ea5f 0c01 	movs.w	ip, r1
 800072c:	bf02      	ittt	eq
 800072e:	4684      	moveq	ip, r0
 8000730:	4601      	moveq	r1, r0
 8000732:	2000      	moveq	r0, #0
 8000734:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000738:	bf08      	it	eq
 800073a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800073e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000742:	fabc f28c 	clz	r2, ip
 8000746:	3a08      	subs	r2, #8
 8000748:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800074c:	db10      	blt.n	8000770 <__aeabi_l2f+0x5c>
 800074e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000752:	4463      	add	r3, ip
 8000754:	fa00 fc02 	lsl.w	ip, r0, r2
 8000758:	f1c2 0220 	rsb	r2, r2, #32
 800075c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000760:	fa20 f202 	lsr.w	r2, r0, r2
 8000764:	eb43 0002 	adc.w	r0, r3, r2
 8000768:	bf08      	it	eq
 800076a:	f020 0001 	biceq.w	r0, r0, #1
 800076e:	4770      	bx	lr
 8000770:	f102 0220 	add.w	r2, r2, #32
 8000774:	fa01 fc02 	lsl.w	ip, r1, r2
 8000778:	f1c2 0220 	rsb	r2, r2, #32
 800077c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000780:	fa21 f202 	lsr.w	r2, r1, r2
 8000784:	eb43 0002 	adc.w	r0, r3, r2
 8000788:	bf08      	it	eq
 800078a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800078e:	4770      	bx	lr

08000790 <__aeabi_fmul>:
 8000790:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000794:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000798:	bf1e      	ittt	ne
 800079a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800079e:	ea92 0f0c 	teqne	r2, ip
 80007a2:	ea93 0f0c 	teqne	r3, ip
 80007a6:	d06f      	beq.n	8000888 <__aeabi_fmul+0xf8>
 80007a8:	441a      	add	r2, r3
 80007aa:	ea80 0c01 	eor.w	ip, r0, r1
 80007ae:	0240      	lsls	r0, r0, #9
 80007b0:	bf18      	it	ne
 80007b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007b6:	d01e      	beq.n	80007f6 <__aeabi_fmul+0x66>
 80007b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007c4:	fba0 3101 	umull	r3, r1, r0, r1
 80007c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007d0:	bf3e      	ittt	cc
 80007d2:	0049      	lslcc	r1, r1, #1
 80007d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007d8:	005b      	lslcc	r3, r3, #1
 80007da:	ea40 0001 	orr.w	r0, r0, r1
 80007de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007e2:	2afd      	cmp	r2, #253	; 0xfd
 80007e4:	d81d      	bhi.n	8000822 <__aeabi_fmul+0x92>
 80007e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ee:	bf08      	it	eq
 80007f0:	f020 0001 	biceq.w	r0, r0, #1
 80007f4:	4770      	bx	lr
 80007f6:	f090 0f00 	teq	r0, #0
 80007fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007fe:	bf08      	it	eq
 8000800:	0249      	lsleq	r1, r1, #9
 8000802:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000806:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800080a:	3a7f      	subs	r2, #127	; 0x7f
 800080c:	bfc2      	ittt	gt
 800080e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000812:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000816:	4770      	bxgt	lr
 8000818:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	3a01      	subs	r2, #1
 8000822:	dc5d      	bgt.n	80008e0 <__aeabi_fmul+0x150>
 8000824:	f112 0f19 	cmn.w	r2, #25
 8000828:	bfdc      	itt	le
 800082a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800082e:	4770      	bxle	lr
 8000830:	f1c2 0200 	rsb	r2, r2, #0
 8000834:	0041      	lsls	r1, r0, #1
 8000836:	fa21 f102 	lsr.w	r1, r1, r2
 800083a:	f1c2 0220 	rsb	r2, r2, #32
 800083e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000842:	ea5f 0031 	movs.w	r0, r1, rrx
 8000846:	f140 0000 	adc.w	r0, r0, #0
 800084a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800084e:	bf08      	it	eq
 8000850:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000854:	4770      	bx	lr
 8000856:	f092 0f00 	teq	r2, #0
 800085a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800085e:	bf02      	ittt	eq
 8000860:	0040      	lsleq	r0, r0, #1
 8000862:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000866:	3a01      	subeq	r2, #1
 8000868:	d0f9      	beq.n	800085e <__aeabi_fmul+0xce>
 800086a:	ea40 000c 	orr.w	r0, r0, ip
 800086e:	f093 0f00 	teq	r3, #0
 8000872:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000876:	bf02      	ittt	eq
 8000878:	0049      	lsleq	r1, r1, #1
 800087a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800087e:	3b01      	subeq	r3, #1
 8000880:	d0f9      	beq.n	8000876 <__aeabi_fmul+0xe6>
 8000882:	ea41 010c 	orr.w	r1, r1, ip
 8000886:	e78f      	b.n	80007a8 <__aeabi_fmul+0x18>
 8000888:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800088c:	ea92 0f0c 	teq	r2, ip
 8000890:	bf18      	it	ne
 8000892:	ea93 0f0c 	teqne	r3, ip
 8000896:	d00a      	beq.n	80008ae <__aeabi_fmul+0x11e>
 8000898:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800089c:	bf18      	it	ne
 800089e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008a2:	d1d8      	bne.n	8000856 <__aeabi_fmul+0xc6>
 80008a4:	ea80 0001 	eor.w	r0, r0, r1
 80008a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008ac:	4770      	bx	lr
 80008ae:	f090 0f00 	teq	r0, #0
 80008b2:	bf17      	itett	ne
 80008b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008b8:	4608      	moveq	r0, r1
 80008ba:	f091 0f00 	teqne	r1, #0
 80008be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008c2:	d014      	beq.n	80008ee <__aeabi_fmul+0x15e>
 80008c4:	ea92 0f0c 	teq	r2, ip
 80008c8:	d101      	bne.n	80008ce <__aeabi_fmul+0x13e>
 80008ca:	0242      	lsls	r2, r0, #9
 80008cc:	d10f      	bne.n	80008ee <__aeabi_fmul+0x15e>
 80008ce:	ea93 0f0c 	teq	r3, ip
 80008d2:	d103      	bne.n	80008dc <__aeabi_fmul+0x14c>
 80008d4:	024b      	lsls	r3, r1, #9
 80008d6:	bf18      	it	ne
 80008d8:	4608      	movne	r0, r1
 80008da:	d108      	bne.n	80008ee <__aeabi_fmul+0x15e>
 80008dc:	ea80 0001 	eor.w	r0, r0, r1
 80008e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008ec:	4770      	bx	lr
 80008ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008f6:	4770      	bx	lr

080008f8 <__aeabi_fdiv>:
 80008f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000900:	bf1e      	ittt	ne
 8000902:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000906:	ea92 0f0c 	teqne	r2, ip
 800090a:	ea93 0f0c 	teqne	r3, ip
 800090e:	d069      	beq.n	80009e4 <__aeabi_fdiv+0xec>
 8000910:	eba2 0203 	sub.w	r2, r2, r3
 8000914:	ea80 0c01 	eor.w	ip, r0, r1
 8000918:	0249      	lsls	r1, r1, #9
 800091a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800091e:	d037      	beq.n	8000990 <__aeabi_fdiv+0x98>
 8000920:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000924:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000928:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800092c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000930:	428b      	cmp	r3, r1
 8000932:	bf38      	it	cc
 8000934:	005b      	lslcc	r3, r3, #1
 8000936:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800093a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800093e:	428b      	cmp	r3, r1
 8000940:	bf24      	itt	cs
 8000942:	1a5b      	subcs	r3, r3, r1
 8000944:	ea40 000c 	orrcs.w	r0, r0, ip
 8000948:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800094c:	bf24      	itt	cs
 800094e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000952:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000956:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800095a:	bf24      	itt	cs
 800095c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000968:	bf24      	itt	cs
 800096a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800096e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	bf18      	it	ne
 8000976:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800097a:	d1e0      	bne.n	800093e <__aeabi_fdiv+0x46>
 800097c:	2afd      	cmp	r2, #253	; 0xfd
 800097e:	f63f af50 	bhi.w	8000822 <__aeabi_fmul+0x92>
 8000982:	428b      	cmp	r3, r1
 8000984:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000988:	bf08      	it	eq
 800098a:	f020 0001 	biceq.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000994:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000998:	327f      	adds	r2, #127	; 0x7f
 800099a:	bfc2      	ittt	gt
 800099c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009a4:	4770      	bxgt	lr
 80009a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	3a01      	subs	r2, #1
 80009b0:	e737      	b.n	8000822 <__aeabi_fmul+0x92>
 80009b2:	f092 0f00 	teq	r2, #0
 80009b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ba:	bf02      	ittt	eq
 80009bc:	0040      	lsleq	r0, r0, #1
 80009be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009c2:	3a01      	subeq	r2, #1
 80009c4:	d0f9      	beq.n	80009ba <__aeabi_fdiv+0xc2>
 80009c6:	ea40 000c 	orr.w	r0, r0, ip
 80009ca:	f093 0f00 	teq	r3, #0
 80009ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d2:	bf02      	ittt	eq
 80009d4:	0049      	lsleq	r1, r1, #1
 80009d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009da:	3b01      	subeq	r3, #1
 80009dc:	d0f9      	beq.n	80009d2 <__aeabi_fdiv+0xda>
 80009de:	ea41 010c 	orr.w	r1, r1, ip
 80009e2:	e795      	b.n	8000910 <__aeabi_fdiv+0x18>
 80009e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009e8:	ea92 0f0c 	teq	r2, ip
 80009ec:	d108      	bne.n	8000a00 <__aeabi_fdiv+0x108>
 80009ee:	0242      	lsls	r2, r0, #9
 80009f0:	f47f af7d 	bne.w	80008ee <__aeabi_fmul+0x15e>
 80009f4:	ea93 0f0c 	teq	r3, ip
 80009f8:	f47f af70 	bne.w	80008dc <__aeabi_fmul+0x14c>
 80009fc:	4608      	mov	r0, r1
 80009fe:	e776      	b.n	80008ee <__aeabi_fmul+0x15e>
 8000a00:	ea93 0f0c 	teq	r3, ip
 8000a04:	d104      	bne.n	8000a10 <__aeabi_fdiv+0x118>
 8000a06:	024b      	lsls	r3, r1, #9
 8000a08:	f43f af4c 	beq.w	80008a4 <__aeabi_fmul+0x114>
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	e76e      	b.n	80008ee <__aeabi_fmul+0x15e>
 8000a10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a14:	bf18      	it	ne
 8000a16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a1a:	d1ca      	bne.n	80009b2 <__aeabi_fdiv+0xba>
 8000a1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a20:	f47f af5c 	bne.w	80008dc <__aeabi_fmul+0x14c>
 8000a24:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a28:	f47f af3c 	bne.w	80008a4 <__aeabi_fmul+0x114>
 8000a2c:	e75f      	b.n	80008ee <__aeabi_fmul+0x15e>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_f2iz>:
 8000a30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a38:	d30f      	bcc.n	8000a5a <__aeabi_f2iz+0x2a>
 8000a3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a42:	d90d      	bls.n	8000a60 <__aeabi_f2iz+0x30>
 8000a44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a50:	fa23 f002 	lsr.w	r0, r3, r2
 8000a54:	bf18      	it	ne
 8000a56:	4240      	negne	r0, r0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0000 	mov.w	r0, #0
 8000a5e:	4770      	bx	lr
 8000a60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a64:	d101      	bne.n	8000a6a <__aeabi_f2iz+0x3a>
 8000a66:	0242      	lsls	r2, r0, #9
 8000a68:	d105      	bne.n	8000a76 <__aeabi_f2iz+0x46>
 8000a6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a6e:	bf08      	it	eq
 8000a70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <LoRa_RX>:

//----------------------------------------------------------------------------------------
// for receiving data from LoRa module using one function
// "flag" needed for start or stop this function
void LoRa_RX(bool flag)
{
 8000a7c:	b5b0      	push	{r4, r5, r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	char str_1[25] = {0};
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	751a      	strb	r2, [r3, #20]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init LoRa RX )
 8000a9c:	4b4f      	ldr	r3, [pc, #316]	; (8000bdc <LoRa_RX+0x160>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d02f      	beq.n	8000b04 <LoRa_RX+0x88>
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d02c      	beq.n	8000b04 <LoRa_RX+0x88>
	{
		HAL_Delay(100);
 8000aaa:	2064      	movs	r0, #100	; 0x64
 8000aac:	f004 f832 	bl	8004b14 <HAL_Delay>
		init_lora_RX();
 8000ab0:	f000 fbf6 	bl	80012a0 <init_lora_RX>
		HAL_Delay(500);
 8000ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab8:	f004 f82c 	bl	8004b14 <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000abc:	2110      	movs	r1, #16
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f001 fbae 	bl	8002220 <ssd1306_SetCursor>
		strcpy(str_1, "Receiving data:");
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	4a45      	ldr	r2, [pc, #276]	; (8000be0 <LoRa_RX+0x164>)
 8000aca:	461c      	mov	r4, r3
 8000acc:	4613      	mov	r3, r2
 8000ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000ad4:	4a43      	ldr	r2, [pc, #268]	; (8000be4 <LoRa_RX+0x168>)
 8000ad6:	f107 0008 	add.w	r0, r7, #8
 8000ada:	2301      	movs	r3, #1
 8000adc:	ca06      	ldmia	r2, {r1, r2}
 8000ade:	f001 fb79 	bl	80021d4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000ae2:	f001 fa67 	bl	8001fb4 <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);						// Refresh interrupt
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	493f      	ldr	r1, [pc, #252]	; (8000be8 <LoRa_RX+0x16c>)
 8000aea:	4840      	ldr	r0, [pc, #256]	; (8000bec <LoRa_RX+0x170>)
 8000aec:	f006 ff37 	bl	800795e <HAL_UART_Receive_IT>
		memset(str_1, 0, sizeof(str_1));
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2219      	movs	r2, #25
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f007 fb91 	bl	8008220 <memset>
		flag_first_time = false;
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <LoRa_RX+0x160>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Do it when data was received
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <LoRa_RX+0x160>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	f083 0301 	eor.w	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d057      	beq.n	8000bc2 <LoRa_RX+0x146>
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d054      	beq.n	8000bc2 <LoRa_RX+0x146>
	{
		if(flag_command_received == true)							// If data is ready
 8000b18:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <LoRa_RX+0x174>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d050      	beq.n	8000bc2 <LoRa_RX+0x146>
		{
			// Clean data place on OLED
			strcpy(str_1, "                       ");
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4a33      	ldr	r2, [pc, #204]	; (8000bf4 <LoRa_RX+0x178>)
 8000b26:	461c      	mov	r4, r3
 8000b28:	4615      	mov	r5, r2
 8000b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b32:	e884 0003 	stmia.w	r4, {r0, r1}
			ssd1306_SetCursor(0, 28);
 8000b36:	211c      	movs	r1, #28
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f001 fb71 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str_1,  Font_7x10, White);
 8000b3e:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <LoRa_RX+0x168>)
 8000b40:	f107 0008 	add.w	r0, r7, #8
 8000b44:	2301      	movs	r3, #1
 8000b46:	ca06      	ldmia	r2, {r1, r2}
 8000b48:	f001 fb44 	bl	80021d4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000b4c:	f001 fa32 	bl	8001fb4 <ssd1306_UpdateScreen>

			// Print received data
			// Delete first element of array (because sometimes first element of array can be '\0' it will break down ssd1306_WriteString function)
			ssd1306_SetCursor(0, 28);
 8000b50:	211c      	movs	r1, #28
 8000b52:	2000      	movs	r0, #0
 8000b54:	f001 fb64 	bl	8002220 <ssd1306_SetCursor>
			int i = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 0; i <= sizeof(str_1); i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b60:	e013      	b.n	8000b8a <LoRa_RX+0x10e>
			{
				if(i == 0)								// Delay first element of array
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <LoRa_RX+0xf2>
				{
					i++;
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
				}
				str_1[i-1] = uart_rx_data[i];
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	3b01      	subs	r3, #1
 8000b72:	4921      	ldr	r1, [pc, #132]	; (8000bf8 <LoRa_RX+0x17c>)
 8000b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b76:	440a      	add	r2, r1
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b7e:	440b      	add	r3, r1
 8000b80:	f803 2c20 	strb.w	r2, [r3, #-32]
			for(i = 0; i <= sizeof(str_1); i++)
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	3301      	adds	r3, #1
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	2b19      	cmp	r3, #25
 8000b8e:	d9e8      	bls.n	8000b62 <LoRa_RX+0xe6>
			}
			ssd1306_WriteString(str_1,  Font_7x10, White);
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <LoRa_RX+0x168>)
 8000b92:	f107 0008 	add.w	r0, r7, #8
 8000b96:	2301      	movs	r3, #1
 8000b98:	ca06      	ldmia	r2, {r1, r2}
 8000b9a:	f001 fb1b 	bl	80021d4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000b9e:	f001 fa09 	bl	8001fb4 <ssd1306_UpdateScreen>

			HAL_Delay(100);
 8000ba2:	2064      	movs	r0, #100	; 0x64
 8000ba4:	f003 ffb6 	bl	8004b14 <HAL_Delay>
			flag_command_received = false;							// Set flag. Set show? that data was printed
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <LoRa_RX+0x174>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
			memset(uart_rx_data, 0, sizeof(uart_rx_data));			// Cleaning buffer where was received data (From HAL_UART_RxCpltCallback)
 8000bae:	2232      	movs	r2, #50	; 0x32
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <LoRa_RX+0x17c>)
 8000bb4:	f007 fb34 	bl	8008220 <memset>
			HAL_UART_Receive_IT(&huart1, str, 1);					// Start interrupt again
 8000bb8:	2201      	movs	r2, #1
 8000bba:	490b      	ldr	r1, [pc, #44]	; (8000be8 <LoRa_RX+0x16c>)
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <LoRa_RX+0x170>)
 8000bbe:	f006 fece 	bl	800795e <HAL_UART_Receive_IT>
		}
	}
	if(flag == false)												// Stop function
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f083 0301 	eor.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <LoRa_RX+0x158>
	{
		flag_first_time = true;
 8000bce:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <LoRa_RX+0x160>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bdb0      	pop	{r4, r5, r7, pc}
 8000bdc:	20000004 	.word	0x20000004
 8000be0:	08008b68 	.word	0x08008b68
 8000be4:	2000001c 	.word	0x2000001c
 8000be8:	20000584 	.word	0x20000584
 8000bec:	2000064c 	.word	0x2000064c
 8000bf0:	20000585 	.word	0x20000585
 8000bf4:	08008b78 	.word	0x08008b78
 8000bf8:	20000550 	.word	0x20000550

08000bfc <LoRa_TX_send_test_number>:
// -------------------------------------------------------------------------------
// Sent test one test number and increment it every time. tx_lora_data
void LoRa_TX_send_test_number(bool flag)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	char str_1[20] = {0};
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init)
 8000c18:	4b59      	ldr	r3, [pc, #356]	; (8000d80 <LoRa_TX_send_test_number+0x184>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d047      	beq.n	8000cb0 <LoRa_TX_send_test_number+0xb4>
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d044      	beq.n	8000cb0 <LoRa_TX_send_test_number+0xb4>
	{
		memset(uart_rx_data, 0, sizeof(uart_rx_data)); 				// Clean buf
 8000c26:	2232      	movs	r2, #50	; 0x32
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4856      	ldr	r0, [pc, #344]	; (8000d84 <LoRa_TX_send_test_number+0x188>)
 8000c2c:	f007 faf8 	bl	8008220 <memset>

		HAL_Delay(100);
 8000c30:	2064      	movs	r0, #100	; 0x64
 8000c32:	f003 ff6f 	bl	8004b14 <HAL_Delay>
		init_lora_TX();
 8000c36:	f000 faeb 	bl	8001210 <init_lora_TX>
		HAL_Delay(500);
 8000c3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c3e:	f003 ff69 	bl	8004b14 <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000c42:	2110      	movs	r1, #16
 8000c44:	2000      	movs	r0, #0
 8000c46:	f001 faeb 	bl	8002220 <ssd1306_SetCursor>
		strcpy(str_1, "TX count:");
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4a4e      	ldr	r2, [pc, #312]	; (8000d88 <LoRa_TX_send_test_number+0x18c>)
 8000c50:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c52:	c303      	stmia	r3!, {r0, r1}
 8000c54:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000c56:	4a4d      	ldr	r2, [pc, #308]	; (8000d8c <LoRa_TX_send_test_number+0x190>)
 8000c58:	f107 000c 	add.w	r0, r7, #12
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	ca06      	ldmia	r2, {r1, r2}
 8000c60:	f001 fab8 	bl	80021d4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000c64:	f001 f9a6 	bl	8001fb4 <ssd1306_UpdateScreen>

		memset(str_1, 0, sizeof(str_1));
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2214      	movs	r2, #20
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f007 fad5 	bl	8008220 <memset>
		ssd1306_SetCursor(0, 28);
 8000c76:	211c      	movs	r1, #28
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f001 fad1 	bl	8002220 <ssd1306_SetCursor>
		strcpy(str_1, "Data:");
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4a43      	ldr	r2, [pc, #268]	; (8000d90 <LoRa_TX_send_test_number+0x194>)
 8000c84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c88:	6018      	str	r0, [r3, #0]
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	8019      	strh	r1, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000c8e:	4a3f      	ldr	r2, [pc, #252]	; (8000d8c <LoRa_TX_send_test_number+0x190>)
 8000c90:	f107 000c 	add.w	r0, r7, #12
 8000c94:	2301      	movs	r3, #1
 8000c96:	ca06      	ldmia	r2, {r1, r2}
 8000c98:	f001 fa9c 	bl	80021d4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000c9c:	f001 f98a 	bl	8001fb4 <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	493c      	ldr	r1, [pc, #240]	; (8000d94 <LoRa_TX_send_test_number+0x198>)
 8000ca4:	483c      	ldr	r0, [pc, #240]	; (8000d98 <LoRa_TX_send_test_number+0x19c>)
 8000ca6:	f006 fe5a 	bl	800795e <HAL_UART_Receive_IT>
		flag_first_time = false;
 8000caa:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <LoRa_TX_send_test_number+0x184>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Repeat it part for transmit data
 8000cb0:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <LoRa_TX_send_test_number+0x184>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f083 0301 	eor.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d04d      	beq.n	8000d5a <LoRa_TX_send_test_number+0x15e>
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d04a      	beq.n	8000d5a <LoRa_TX_send_test_number+0x15e>
	{
		lora_transmit_data(tx_lora_data);
 8000cc4:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f86d 	bl	8000da8 <lora_transmit_data>


		// Print transmitter counter
		memset(str_1, 0, sizeof(str_1));
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2214      	movs	r2, #20
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f007 faa2 	bl	8008220 <memset>
		ssd1306_SetCursor(70, 16);
 8000cdc:	2110      	movs	r1, #16
 8000cde:	2046      	movs	r0, #70	; 0x46
 8000ce0:	f001 fa9e 	bl	8002220 <ssd1306_SetCursor>
		sprintf(str_1, "%d", transmit_count);
 8000ce4:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <LoRa_TX_send_test_number+0x1a4>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	492d      	ldr	r1, [pc, #180]	; (8000da4 <LoRa_TX_send_test_number+0x1a8>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f007 fb54 	bl	800839c <siprintf>
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000cf4:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <LoRa_TX_send_test_number+0x190>)
 8000cf6:	f107 000c 	add.w	r0, r7, #12
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	ca06      	ldmia	r2, {r1, r2}
 8000cfe:	f001 fa69 	bl	80021d4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000d02:	f001 f957 	bl	8001fb4 <ssd1306_UpdateScreen>

		// Print transmitter data
		memset(str_1, 0, sizeof(str_1));
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2214      	movs	r2, #20
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f007 fa86 	bl	8008220 <memset>
		ssd1306_SetCursor(35, 28);
 8000d14:	211c      	movs	r1, #28
 8000d16:	2023      	movs	r0, #35	; 0x23
 8000d18:	f001 fa82 	bl	8002220 <ssd1306_SetCursor>
		sprintf(str_1, "%d", tx_lora_data);
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	491f      	ldr	r1, [pc, #124]	; (8000da4 <LoRa_TX_send_test_number+0x1a8>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f007 fb38 	bl	800839c <siprintf>
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000d2c:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <LoRa_TX_send_test_number+0x190>)
 8000d2e:	f107 000c 	add.w	r0, r7, #12
 8000d32:	2301      	movs	r3, #1
 8000d34:	ca06      	ldmia	r2, {r1, r2}
 8000d36:	f001 fa4d 	bl	80021d4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000d3a:	f001 f93b 	bl	8001fb4 <ssd1306_UpdateScreen>

		tx_lora_data++;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000d46:	6013      	str	r3, [r2, #0]
		transmit_count++;											// Increment test data
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <LoRa_TX_send_test_number+0x1a4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <LoRa_TX_send_test_number+0x1a4>)
 8000d50:	6013      	str	r3, [r2, #0]
		HAL_Delay(2000);											// Must be more than 1.5 sec
 8000d52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d56:	f003 fedd 	bl	8004b14 <HAL_Delay>
	}
	if(flag == false)
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d008      	beq.n	8000d78 <LoRa_TX_send_test_number+0x17c>
	{
		flag_first_time = true;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <LoRa_TX_send_test_number+0x184>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
		transmit_count = 1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <LoRa_TX_send_test_number+0x1a4>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
		tx_lora_data = 0;											// Every time count will be start from 1
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
	}
}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000005 	.word	0x20000005
 8000d84:	20000550 	.word	0x20000550
 8000d88:	08008b90 	.word	0x08008b90
 8000d8c:	2000001c 	.word	0x2000001c
 8000d90:	08008b9c 	.word	0x08008b9c
 8000d94:	20000584 	.word	0x20000584
 8000d98:	2000064c 	.word	0x2000064c
 8000d9c:	200000d0 	.word	0x200000d0
 8000da0:	20000000 	.word	0x20000000
 8000da4:	08008ba4 	.word	0x08008ba4

08000da8 <lora_transmit_data>:
//----------------------------------------------------------------------------------------
void lora_transmit_data(int transmit_count)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	static uint8_t data[10] = {0};

	data[5] = '0' + transmit_count%10;
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4b47      	ldr	r3, [pc, #284]	; (8000ed0 <lora_transmit_data+0x128>)
 8000db4:	fb83 1302 	smull	r1, r3, r3, r2
 8000db8:	1099      	asrs	r1, r3, #2
 8000dba:	17d3      	asrs	r3, r2, #31
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	1ad1      	subs	r1, r2, r3
 8000dc8:	b2cb      	uxtb	r3, r1
 8000dca:	3330      	adds	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000dd0:	715a      	strb	r2, [r3, #5]
	data[4] = '0' + (transmit_count/10) % 10;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a3e      	ldr	r2, [pc, #248]	; (8000ed0 <lora_transmit_data+0x128>)
 8000dd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dda:	1092      	asrs	r2, r2, #2
 8000ddc:	17db      	asrs	r3, r3, #31
 8000dde:	1ad2      	subs	r2, r2, r3
 8000de0:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <lora_transmit_data+0x128>)
 8000de2:	fb83 1302 	smull	r1, r3, r3, r2
 8000de6:	1099      	asrs	r1, r3, #2
 8000de8:	17d3      	asrs	r3, r2, #31
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	460b      	mov	r3, r1
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	1ad1      	subs	r1, r2, r3
 8000df6:	b2cb      	uxtb	r3, r1
 8000df8:	3330      	adds	r3, #48	; 0x30
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000dfe:	711a      	strb	r2, [r3, #4]
	data[3] = '0' + (transmit_count/100) % 10;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a35      	ldr	r2, [pc, #212]	; (8000ed8 <lora_transmit_data+0x130>)
 8000e04:	fb82 1203 	smull	r1, r2, r2, r3
 8000e08:	1152      	asrs	r2, r2, #5
 8000e0a:	17db      	asrs	r3, r3, #31
 8000e0c:	1ad2      	subs	r2, r2, r3
 8000e0e:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <lora_transmit_data+0x128>)
 8000e10:	fb83 1302 	smull	r1, r3, r3, r2
 8000e14:	1099      	asrs	r1, r3, #2
 8000e16:	17d3      	asrs	r3, r2, #31
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	1ad1      	subs	r1, r2, r3
 8000e24:	b2cb      	uxtb	r3, r1
 8000e26:	3330      	adds	r3, #48	; 0x30
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000e2c:	70da      	strb	r2, [r3, #3]
	data[2] = '0' + (transmit_count/1000) % 10;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a2a      	ldr	r2, [pc, #168]	; (8000edc <lora_transmit_data+0x134>)
 8000e32:	fb82 1203 	smull	r1, r2, r2, r3
 8000e36:	1192      	asrs	r2, r2, #6
 8000e38:	17db      	asrs	r3, r3, #31
 8000e3a:	1ad2      	subs	r2, r2, r3
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <lora_transmit_data+0x128>)
 8000e3e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e42:	1099      	asrs	r1, r3, #2
 8000e44:	17d3      	asrs	r3, r2, #31
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	460b      	mov	r3, r1
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	1ad1      	subs	r1, r2, r3
 8000e52:	b2cb      	uxtb	r3, r1
 8000e54:	3330      	adds	r3, #48	; 0x30
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000e5a:	709a      	strb	r2, [r3, #2]
	data[1] = '0' + (transmit_count/10000) % 10;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <lora_transmit_data+0x138>)
 8000e60:	fb82 1203 	smull	r1, r2, r2, r3
 8000e64:	1312      	asrs	r2, r2, #12
 8000e66:	17db      	asrs	r3, r3, #31
 8000e68:	1ad2      	subs	r2, r2, r3
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <lora_transmit_data+0x128>)
 8000e6c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e70:	1099      	asrs	r1, r3, #2
 8000e72:	17d3      	asrs	r3, r2, #31
 8000e74:	1ac9      	subs	r1, r1, r3
 8000e76:	460b      	mov	r3, r1
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	1ad1      	subs	r1, r2, r3
 8000e80:	b2cb      	uxtb	r3, r1
 8000e82:	3330      	adds	r3, #48	; 0x30
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000e88:	705a      	strb	r2, [r3, #1]
	data[0] = '0' + (transmit_count/100000) % 10;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <lora_transmit_data+0x13c>)
 8000e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e92:	1352      	asrs	r2, r2, #13
 8000e94:	17db      	asrs	r3, r3, #31
 8000e96:	1ad2      	subs	r2, r2, r3
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <lora_transmit_data+0x128>)
 8000e9a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e9e:	1099      	asrs	r1, r3, #2
 8000ea0:	17d3      	asrs	r3, r2, #31
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	1ad1      	subs	r1, r2, r3
 8000eae:	b2cb      	uxtb	r3, r1
 8000eb0:	3330      	adds	r3, #48	; 0x30
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	data[6] = '\n';
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000eba:	220a      	movs	r2, #10
 8000ebc:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit_IT(&huart1, data, 7);
 8000ebe:	2207      	movs	r2, #7
 8000ec0:	4904      	ldr	r1, [pc, #16]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000ec2:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <lora_transmit_data+0x140>)
 8000ec4:	f006 fd07 	bl	80078d6 <HAL_UART_Transmit_IT>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	66666667 	.word	0x66666667
 8000ed4:	200000d4 	.word	0x200000d4
 8000ed8:	51eb851f 	.word	0x51eb851f
 8000edc:	10624dd3 	.word	0x10624dd3
 8000ee0:	68db8bad 	.word	0x68db8bad
 8000ee4:	14f8b589 	.word	0x14f8b589
 8000ee8:	2000064c 	.word	0x2000064c

08000eec <LoRa_TX_send_T_and_H>:
// -------------------------------------------------------------------------------
void LoRa_TX_send_T_and_H(bool flag)   // Зробити пересилання стрінги !!!!
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	//static int transmit_count = 0;									// Variable for transmit
	char str_1[20] = {0};
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000efa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init)
 8000f08:	4ba3      	ldr	r3, [pc, #652]	; (8001198 <LoRa_TX_send_T_and_H+0x2ac>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d04c      	beq.n	8000faa <LoRa_TX_send_T_and_H+0xbe>
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d049      	beq.n	8000faa <LoRa_TX_send_T_and_H+0xbe>
	{
		memset(uart_rx_data, 0, sizeof(uart_rx_data));//uart_rx_data[50]
 8000f16:	2232      	movs	r2, #50	; 0x32
 8000f18:	2100      	movs	r1, #0
 8000f1a:	48a0      	ldr	r0, [pc, #640]	; (800119c <LoRa_TX_send_T_and_H+0x2b0>)
 8000f1c:	f007 f980 	bl	8008220 <memset>

		HAL_Delay(100);
 8000f20:	2064      	movs	r0, #100	; 0x64
 8000f22:	f003 fdf7 	bl	8004b14 <HAL_Delay>
		init_lora_TX();
 8000f26:	f000 f973 	bl	8001210 <init_lora_TX>
		HAL_Delay(500);
 8000f2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2e:	f003 fdf1 	bl	8004b14 <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000f32:	2110      	movs	r1, #16
 8000f34:	2000      	movs	r0, #0
 8000f36:	f001 f973 	bl	8002220 <ssd1306_SetCursor>
		strcpy(str_1, "TX count:");
 8000f3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f3e:	4a98      	ldr	r2, [pc, #608]	; (80011a0 <LoRa_TX_send_T_and_H+0x2b4>)
 8000f40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f42:	c303      	stmia	r3!, {r0, r1}
 8000f44:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000f46:	4a97      	ldr	r2, [pc, #604]	; (80011a4 <LoRa_TX_send_T_and_H+0x2b8>)
 8000f48:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	ca06      	ldmia	r2, {r1, r2}
 8000f50:	f001 f940 	bl	80021d4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000f54:	f001 f82e 	bl	8001fb4 <ssd1306_UpdateScreen>

		memset(str_1, 0, sizeof(str_1));
 8000f58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f5c:	2214      	movs	r2, #20
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f007 f95d 	bl	8008220 <memset>
		ssd1306_SetCursor(0, 28);
 8000f66:	211c      	movs	r1, #28
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f001 f959 	bl	8002220 <ssd1306_SetCursor>
		strcpy(str_1, "Transmitting data:");
 8000f6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f72:	4a8d      	ldr	r2, [pc, #564]	; (80011a8 <LoRa_TX_send_T_and_H+0x2bc>)
 8000f74:	461c      	mov	r4, r3
 8000f76:	4615      	mov	r5, r2
 8000f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	8022      	strh	r2, [r4, #0]
 8000f82:	3402      	adds	r4, #2
 8000f84:	0c1b      	lsrs	r3, r3, #16
 8000f86:	7023      	strb	r3, [r4, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000f88:	4a86      	ldr	r2, [pc, #536]	; (80011a4 <LoRa_TX_send_T_and_H+0x2b8>)
 8000f8a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000f8e:	2301      	movs	r3, #1
 8000f90:	ca06      	ldmia	r2, {r1, r2}
 8000f92:	f001 f91f 	bl	80021d4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000f96:	f001 f80d 	bl	8001fb4 <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4983      	ldr	r1, [pc, #524]	; (80011ac <LoRa_TX_send_T_and_H+0x2c0>)
 8000f9e:	4884      	ldr	r0, [pc, #528]	; (80011b0 <LoRa_TX_send_T_and_H+0x2c4>)
 8000fa0:	f006 fcdd 	bl	800795e <HAL_UART_Receive_IT>
		flag_first_time = false;
 8000fa4:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <LoRa_TX_send_T_and_H+0x2ac>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Repeat it part for transmit data
 8000faa:	4b7b      	ldr	r3, [pc, #492]	; (8001198 <LoRa_TX_send_T_and_H+0x2ac>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f083 0301 	eor.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80df 	beq.w	8001178 <LoRa_TX_send_T_and_H+0x28c>
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80db 	beq.w	8001178 <LoRa_TX_send_T_and_H+0x28c>
	{
		// Message look like this:
		// counter| T = 25C H = 55%'\n'
		char str_main_buf[35] = {0};
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	221f      	movs	r2, #31
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f007 f926 	bl	8008220 <memset>
		char str_buf[10] = {0};
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8000fd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	809a      	strh	r2, [r3, #4]
		// Add counter to string
		itoa(transmit_count, str_buf, 10);
 8000fe2:	4b74      	ldr	r3, [pc, #464]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000fea:	220a      	movs	r2, #10
 8000fec:	4618      	mov	r0, r3
 8000fee:	f007 f907 	bl	8008200 <itoa>
		strcat(str_main_buf, str_buf);
 8000ff2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f007 f9ed 	bl	80083dc <strcat>
		memset(str_buf, 0, sizeof(str_buf));
 8001002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001006:	220a      	movs	r2, #10
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f007 f908 	bl	8008220 <memset>
		// Add temperature to string
		strcat(str_main_buf, "| T=");
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f899 	bl	800014c <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4413      	add	r3, r2
 8001024:	4a64      	ldr	r2, [pc, #400]	; (80011b8 <LoRa_TX_send_T_and_H+0x2cc>)
 8001026:	6810      	ldr	r0, [r2, #0]
 8001028:	6018      	str	r0, [r3, #0]
 800102a:	7912      	ldrb	r2, [r2, #4]
 800102c:	711a      	strb	r2, [r3, #4]
		itoa(am3202_sensor.temterature, str_buf, 10);
 800102e:	4b63      	ldr	r3, [pc, #396]	; (80011bc <LoRa_TX_send_T_and_H+0x2d0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001036:	220a      	movs	r2, #10
 8001038:	4618      	mov	r0, r3
 800103a:	f007 f8e1 	bl	8008200 <itoa>
		strcat(str_main_buf, str_buf);
 800103e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f007 f9c7 	bl	80083dc <strcat>
		memset(str_buf, 0, sizeof(str_buf));
 800104e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001052:	220a      	movs	r2, #10
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f007 f8e2 	bl	8008220 <memset>
		strcat(str_main_buf, "C");
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f873 	bl	800014c <strlen>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4413      	add	r3, r2
 8001070:	4953      	ldr	r1, [pc, #332]	; (80011c0 <LoRa_TX_send_T_and_H+0x2d4>)
 8001072:	461a      	mov	r2, r3
 8001074:	460b      	mov	r3, r1
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	8013      	strh	r3, [r2, #0]
		// Add humidity to string
		strcat(str_main_buf, " H=");
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f864 	bl	800014c <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4413      	add	r3, r2
 800108e:	4a4d      	ldr	r2, [pc, #308]	; (80011c4 <LoRa_TX_send_T_and_H+0x2d8>)
 8001090:	6810      	ldr	r0, [r2, #0]
 8001092:	6018      	str	r0, [r3, #0]
		itoa(am3202_sensor.humidity, str_buf, 10);
 8001094:	4b49      	ldr	r3, [pc, #292]	; (80011bc <LoRa_TX_send_T_and_H+0x2d0>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800109c:	220a      	movs	r2, #10
 800109e:	4618      	mov	r0, r3
 80010a0:	f007 f8ae 	bl	8008200 <itoa>
		strcat(str_main_buf, str_buf);
 80010a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f007 f994 	bl	80083dc <strcat>
		memset(str_buf, 0, sizeof(str_buf));
 80010b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b8:	220a      	movs	r2, #10
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f007 f8af 	bl	8008220 <memset>
		strcat(str_main_buf, "%");
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f840 	bl	800014c <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	4413      	add	r3, r2
 80010d6:	493c      	ldr	r1, [pc, #240]	; (80011c8 <LoRa_TX_send_T_and_H+0x2dc>)
 80010d8:	461a      	mov	r2, r3
 80010da:	460b      	mov	r3, r1
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	8013      	strh	r3, [r2, #0]

		// Print transmitter data
		ssd1306_SetCursor(0, 40);
 80010e0:	2128      	movs	r1, #40	; 0x28
 80010e2:	2000      	movs	r0, #0
 80010e4:	f001 f89c 	bl	8002220 <ssd1306_SetCursor>
		ssd1306_WriteString(str_main_buf,  Font_7x10, White);
 80010e8:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <LoRa_TX_send_T_and_H+0x2b8>)
 80010ea:	f107 000c 	add.w	r0, r7, #12
 80010ee:	2301      	movs	r3, #1
 80010f0:	ca06      	ldmia	r2, {r1, r2}
 80010f2:	f001 f86f 	bl	80021d4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80010f6:	f000 ff5d 	bl	8001fb4 <ssd1306_UpdateScreen>

		// Add end of line to string
		strcat(str_main_buf, "\n");				// Add stop
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f824 	bl	800014c <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4413      	add	r3, r2
 800110e:	492f      	ldr	r1, [pc, #188]	; (80011cc <LoRa_TX_send_T_and_H+0x2e0>)
 8001110:	461a      	mov	r2, r3
 8001112:	460b      	mov	r3, r1
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	8013      	strh	r3, [r2, #0]

		HAL_UART_Transmit_IT(&huart1, str_main_buf, sizeof(str_main_buf));				// Transmitting over LoRa module
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2223      	movs	r2, #35	; 0x23
 800111e:	4619      	mov	r1, r3
 8001120:	4823      	ldr	r0, [pc, #140]	; (80011b0 <LoRa_TX_send_T_and_H+0x2c4>)
 8001122:	f006 fbd8 	bl	80078d6 <HAL_UART_Transmit_IT>
		HAL_Delay(2000);
 8001126:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800112a:	f003 fcf3 	bl	8004b14 <HAL_Delay>

		// Print transmitter counter
		memset(str_1, 0, sizeof(str_1));
 800112e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001132:	2214      	movs	r2, #20
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f007 f872 	bl	8008220 <memset>
		ssd1306_SetCursor(70, 16);
 800113c:	2110      	movs	r1, #16
 800113e:	2046      	movs	r0, #70	; 0x46
 8001140:	f001 f86e 	bl	8002220 <ssd1306_SetCursor>
		sprintf(str_1, "%d", transmit_count);
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800114c:	4920      	ldr	r1, [pc, #128]	; (80011d0 <LoRa_TX_send_T_and_H+0x2e4>)
 800114e:	4618      	mov	r0, r3
 8001150:	f007 f924 	bl	800839c <siprintf>
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <LoRa_TX_send_T_and_H+0x2b8>)
 8001156:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800115a:	2301      	movs	r3, #1
 800115c:	ca06      	ldmia	r2, {r1, r2}
 800115e:	f001 f839 	bl	80021d4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001162:	f000 ff27 	bl	8001fb4 <ssd1306_UpdateScreen>

		transmit_count++;											// Increment test data
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 800116e:	6013      	str	r3, [r2, #0]
		HAL_Delay(2000);											// Must be more than 1.5 sec
 8001170:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001174:	f003 fcce 	bl	8004b14 <HAL_Delay>
	}
	if(flag == false)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f083 0301 	eor.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <LoRa_TX_send_T_and_H+0x2a4>
	{
		flag_first_time = true;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <LoRa_TX_send_T_and_H+0x2ac>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
		transmit_count = 1;
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
	}
}
 8001190:	bf00      	nop
 8001192:	3750      	adds	r7, #80	; 0x50
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	20000006 	.word	0x20000006
 800119c:	20000550 	.word	0x20000550
 80011a0:	08008b90 	.word	0x08008b90
 80011a4:	2000001c 	.word	0x2000001c
 80011a8:	08008ba8 	.word	0x08008ba8
 80011ac:	20000584 	.word	0x20000584
 80011b0:	2000064c 	.word	0x2000064c
 80011b4:	20000000 	.word	0x20000000
 80011b8:	08008bbc 	.word	0x08008bbc
 80011bc:	200005a8 	.word	0x200005a8
 80011c0:	08008bc4 	.word	0x08008bc4
 80011c4:	08008bc8 	.word	0x08008bc8
 80011c8:	08008bcc 	.word	0x08008bcc
 80011cc:	08008bd0 	.word	0x08008bd0
 80011d0:	08008ba4 	.word	0x08008ba4

080011d4 <read_all_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_all_settings_from_module(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 80011d8:	f000 f8aa 	bl	8001330 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f003 fc99 	bl	8004b14 <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;			// 0xC1 - Read register command
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <read_all_settings_from_module+0x34>)
 80011e4:	22c1      	movs	r2, #193	; 0xc1
 80011e6:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;			// Number of register for read
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <read_all_settings_from_module+0x34>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;			// How many registers must be read
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <read_all_settings_from_module+0x34>)
 80011f0:	2208      	movs	r2, #8
 80011f2:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 80011f4:	2203      	movs	r2, #3
 80011f6:	4904      	ldr	r1, [pc, #16]	; (8001208 <read_all_settings_from_module+0x34>)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <read_all_settings_from_module+0x38>)
 80011fa:	f006 fb6c 	bl	80078d6 <HAL_UART_Transmit_IT>

	HAL_Delay(100);
 80011fe:	2064      	movs	r0, #100	; 0x64
 8001200:	f003 fc88 	bl	8004b14 <HAL_Delay>

	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200000e0 	.word	0x200000e0
 800120c:	2000064c 	.word	0x2000064c

08001210 <init_lora_TX>:
//----------------------------------------------------------------------------------------
bool init_lora_TX(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	// з зчитаними даними конфіг регістрів. Якщо співпадає повністю, тоді записати в
	// глобальну змінну що модуль ініціалізований нормально

	static uint8_t data[10] = {0};

	set_config_deep_sleep_mode();
 8001214:	f000 f88c 	bl	8001330 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 8001218:	2064      	movs	r0, #100	; 0x64
 800121a:	f003 fc7b 	bl	8004b14 <HAL_Delay>

	// Init module
	// Descripe settings structure
	data[0] = 0xC0;		// 0xC0 - Set register command
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <init_lora_TX+0x88>)
 8001220:	22c0      	movs	r2, #192	; 0xc0
 8001222:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <init_lora_TX+0x88>)
 8001226:	2200      	movs	r2, #0
 8001228:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <init_lora_TX+0x88>)
 800122c:	2203      	movs	r2, #3
 800122e:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <init_lora_TX+0x88>)
 8001232:	2212      	movs	r2, #18
 8001234:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <init_lora_TX+0x88>)
 8001238:	2234      	movs	r2, #52	; 0x34
 800123a:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register (see in Datasheet)
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <init_lora_TX+0x88>)
 800123e:	2262      	movs	r2, #98	; 0x62
 8001240:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 8001242:	2206      	movs	r2, #6
 8001244:	4914      	ldr	r1, [pc, #80]	; (8001298 <init_lora_TX+0x88>)
 8001246:	4815      	ldr	r0, [pc, #84]	; (800129c <init_lora_TX+0x8c>)
 8001248:	f006 fb45 	bl	80078d6 <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 800124c:	200a      	movs	r0, #10
 800124e:	f003 fc61 	bl	8004b14 <HAL_Delay>

	memset(data, 0, sizeof(data));
 8001252:	220a      	movs	r2, #10
 8001254:	2100      	movs	r1, #0
 8001256:	4810      	ldr	r0, [pc, #64]	; (8001298 <init_lora_TX+0x88>)
 8001258:	f006 ffe2 	bl	8008220 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <init_lora_TX+0x88>)
 800125e:	22c0      	movs	r2, #192	; 0xc0
 8001260:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <init_lora_TX+0x88>)
 8001264:	2205      	movs	r2, #5
 8001266:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <init_lora_TX+0x88>)
 800126a:	2201      	movs	r2, #1
 800126c:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <init_lora_TX+0x88>)
 8001270:	2200      	movs	r2, #0
 8001272:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8001274:	2204      	movs	r2, #4
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <init_lora_TX+0x88>)
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <init_lora_TX+0x8c>)
 800127a:	f006 fb2c 	bl	80078d6 <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 800127e:	200a      	movs	r0, #10
 8001280:	f003 fc48 	bl	8004b14 <HAL_Delay>
	///////////////

	read_all_settings_from_module();
 8001284:	f7ff ffa6 	bl	80011d4 <read_all_settings_from_module>
	set_WOR_TX_mode();
 8001288:	f000 f876 	bl	8001378 <set_WOR_TX_mode>
	HAL_Delay(100);
 800128c:	2064      	movs	r0, #100	; 0x64
 800128e:	f003 fc41 	bl	8004b14 <HAL_Delay>

	return true;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000ec 	.word	0x200000ec
 800129c:	2000064c 	.word	0x2000064c

080012a0 <init_lora_RX>:
//----------------------------------------------------------------------------------------
bool init_lora_RX(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	static uint8_t data[10] = {0};
	set_config_deep_sleep_mode();
 80012a4:	f000 f844 	bl	8001330 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 80012a8:	2064      	movs	r0, #100	; 0x64
 80012aa:	f003 fc33 	bl	8004b14 <HAL_Delay>

	data[0] = 0xC0;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <init_lora_RX+0x88>)
 80012b0:	22c0      	movs	r2, #192	; 0xc0
 80012b2:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <init_lora_RX+0x88>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <init_lora_RX+0x88>)
 80012bc:	2203      	movs	r2, #3
 80012be:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <init_lora_RX+0x88>)
 80012c2:	2212      	movs	r2, #18
 80012c4:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <init_lora_RX+0x88>)
 80012c8:	2234      	movs	r2, #52	; 0x34
 80012ca:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register ()
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <init_lora_RX+0x88>)
 80012ce:	2262      	movs	r2, #98	; 0x62
 80012d0:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 80012d2:	2206      	movs	r2, #6
 80012d4:	4914      	ldr	r1, [pc, #80]	; (8001328 <init_lora_RX+0x88>)
 80012d6:	4815      	ldr	r0, [pc, #84]	; (800132c <init_lora_RX+0x8c>)
 80012d8:	f006 fafd 	bl	80078d6 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f003 fc19 	bl	8004b14 <HAL_Delay>

	memset(data, 0, sizeof(data));
 80012e2:	220a      	movs	r2, #10
 80012e4:	2100      	movs	r1, #0
 80012e6:	4810      	ldr	r0, [pc, #64]	; (8001328 <init_lora_RX+0x88>)
 80012e8:	f006 ff9a 	bl	8008220 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <init_lora_RX+0x88>)
 80012ee:	22c0      	movs	r2, #192	; 0xc0
 80012f0:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <init_lora_RX+0x88>)
 80012f4:	2205      	movs	r2, #5
 80012f6:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <init_lora_RX+0x88>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <init_lora_RX+0x88>)
 8001300:	2200      	movs	r2, #0
 8001302:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8001304:	2204      	movs	r2, #4
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <init_lora_RX+0x88>)
 8001308:	4808      	ldr	r0, [pc, #32]	; (800132c <init_lora_RX+0x8c>)
 800130a:	f006 fae4 	bl	80078d6 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 800130e:	2064      	movs	r0, #100	; 0x64
 8001310:	f003 fc00 	bl	8004b14 <HAL_Delay>

	read_all_settings_from_module();
 8001314:	f7ff ff5e 	bl	80011d4 <read_all_settings_from_module>
	set_WOR_RX_mode();
 8001318:	f000 f81c 	bl	8001354 <set_WOR_RX_mode>
	HAL_Delay(100);
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	f003 fbf9 	bl	8004b14 <HAL_Delay>

	return true;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200000f8 	.word	0x200000f8
 800132c:	2000064c 	.word	0x2000064c

08001330 <set_config_deep_sleep_mode>:
//-------------------------------------------------------------------------------------------------
void set_config_deep_sleep_mode (void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	// Function use for go to deep sleep and configuration mode
	// Set M0 and M1 PINs
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <set_config_deep_sleep_mode+0x20>)
 800133c:	f004 f823 	bl	8005386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2101      	movs	r1, #1
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <set_config_deep_sleep_mode+0x20>)
 8001346:	f004 f81e 	bl	8005386 <HAL_GPIO_WritePin>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010c00 	.word	0x40010c00

08001354 <set_WOR_RX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_RX_mode (void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Receiving mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <set_WOR_RX_mode+0x20>)
 8001360:	f004 f811 	bl	8005386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2101      	movs	r1, #1
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <set_WOR_RX_mode+0x20>)
 800136a:	f004 f80c 	bl	8005386 <HAL_GPIO_WritePin>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40010c00 	.word	0x40010c00

08001378 <set_WOR_TX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_TX_mode (void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Transmitting mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <set_WOR_TX_mode+0x20>)
 8001384:	f003 ffff 	bl	8005386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2101      	movs	r1, #1
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <set_WOR_TX_mode+0x20>)
 800138e:	f003 fffa 	bl	8005386 <HAL_GPIO_WritePin>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40010c00 	.word	0x40010c00

0800139c <NRF24L01_RX_Mode>:
		NRF24L01_Receive();
	}
}
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 fb8c 	bl	8001ac4 <NRF24_ReadReg>
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP) | (1<<PRIM_RX);    	// Power up module. Write PWR_UP and PRIM_RX bits
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f043 0303 	orr.w	r3, r3, #3
 80013b6:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4619      	mov	r1, r3
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 fbb5 	bl	8001b2c <NRF24_WriteReg>
  NRF24_WriteReg(CONFIG, 0x33);     		//  IRQ WORK  ~ 130 us
 80013c2:	2133      	movs	r1, #51	; 0x33
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 fbb1 	bl	8001b2c <NRF24_WriteReg>
  CE_SET;
 80013ca:	2201      	movs	r2, #1
 80013cc:	2108      	movs	r1, #8
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <NRF24L01_RX_Mode+0x50>)
 80013d0:	f003 ffd9 	bl	8005386 <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 80013d4:	2096      	movs	r0, #150	; 0x96
 80013d6:	f000 fb53 	bl	8001a80 <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 80013da:	f000 fc5b 	bl	8001c94 <NRF24_FlushRX>
  NRF24_FlushTX();
 80013de:	f000 fc7b 	bl	8001cd8 <NRF24_FlushTX>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40010800 	.word	0x40010800

080013f0 <NRF24L01_Receive>:
//----------------------------------------------------------------------------------------
// Function waite Low IRQ signal from NRF module
bool NRF24L01_Receive(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
	if(rx_flag == 1)
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <NRF24L01_Receive+0xac>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d148      	bne.n	8001492 <NRF24L01_Receive+0xa2>
	{
		// Detect what's pipes data come from
		if(pipe == 0)
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <NRF24L01_Receive+0xb0>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d11f      	bne.n	8001448 <NRF24L01_Receive+0x58>
		{
			ssd1306_SetCursor(0, 16);
 8001408:	2110      	movs	r1, #16
 800140a:	2000      	movs	r0, #0
 800140c:	f000 ff08 	bl	8002220 <ssd1306_SetCursor>
			char str_rx_oled_buffer_pipe_0[15] = {0};
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	f8c3 2007 	str.w	r2, [r3, #7]
			strcpy(str_rx_oled_buffer_pipe_0, "P0 data:");
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <NRF24L01_Receive+0xb4>)
 8001428:	ca07      	ldmia	r2, {r0, r1, r2}
 800142a:	c303      	stmia	r3!, {r0, r1}
 800142c:	701a      	strb	r2, [r3, #0]
			strcat(str_rx_oled_buffer_pipe_0, RX_BUF);
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	491d      	ldr	r1, [pc, #116]	; (80014a8 <NRF24L01_Receive+0xb8>)
 8001434:	4618      	mov	r0, r3
 8001436:	f006 ffd1 	bl	80083dc <strcat>
			ssd1306_WriteString(str_rx_oled_buffer_pipe_0,  Font_7x10, White);
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <NRF24L01_Receive+0xbc>)
 800143c:	f107 0010 	add.w	r0, r7, #16
 8001440:	2301      	movs	r3, #1
 8001442:	ca06      	ldmia	r2, {r1, r2}
 8001444:	f000 fec6 	bl	80021d4 <ssd1306_WriteString>
		}
		if(pipe == 1)
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <NRF24L01_Receive+0xb0>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d11b      	bne.n	8001488 <NRF24L01_Receive+0x98>
		{
			ssd1306_SetCursor(0, 26);
 8001450:	211a      	movs	r1, #26
 8001452:	2000      	movs	r0, #0
 8001454:	f000 fee4 	bl	8002220 <ssd1306_SetCursor>
			char str_rx_oled_buffer_pipe_1[15] = {0};
 8001458:	2300      	movs	r3, #0
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	f8c3 2007 	str.w	r2, [r3, #7]
			strcpy(str_rx_oled_buffer_pipe_1, "P1 data:");
 8001468:	463b      	mov	r3, r7
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <NRF24L01_Receive+0xc0>)
 800146c:	ca07      	ldmia	r2, {r0, r1, r2}
 800146e:	c303      	stmia	r3!, {r0, r1}
 8001470:	701a      	strb	r2, [r3, #0]
			strcat(str_rx_oled_buffer_pipe_1, RX_BUF);
 8001472:	463b      	mov	r3, r7
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <NRF24L01_Receive+0xb8>)
 8001476:	4618      	mov	r0, r3
 8001478:	f006 ffb0 	bl	80083dc <strcat>
			ssd1306_WriteString(str_rx_oled_buffer_pipe_1,  Font_7x10, White);
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <NRF24L01_Receive+0xbc>)
 800147e:	4638      	mov	r0, r7
 8001480:	2301      	movs	r3, #1
 8001482:	ca06      	ldmia	r2, {r1, r2}
 8001484:	f000 fea6 	bl	80021d4 <ssd1306_WriteString>
		}
		// Print RX data on OLED
		ssd1306_UpdateScreen();
 8001488:	f000 fd94 	bl	8001fb4 <ssd1306_UpdateScreen>
		rx_flag = 0;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <NRF24L01_Receive+0xac>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
	}
}
 8001492:	bf00      	nop
 8001494:	4618      	mov	r0, r3
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000010e 	.word	0x2000010e
 80014a0:	20000134 	.word	0x20000134
 80014a4:	08008bd4 	.word	0x08008bd4
 80014a8:	20000104 	.word	0x20000104
 80014ac:	2000001c 	.word	0x2000001c
 80014b0:	08008be0 	.word	0x08008be0

080014b4 <NRF24_init_RX_mode>:
//----------------------------------------------------------------------------------------
void NRF24_init_RX_mode(void)                  // RECEIVE
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	reset_nrf24l01();				// RESET module settings
 80014b8:	f000 fc70 	bl	8001d9c <reset_nrf24l01>
	tx_or_rx_mode = rx_mode;		// For block interrupt HAL_GPIO_EXTI_Callback
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <NRF24_init_RX_mode+0xb4>)
 80014be:	781a      	ldrb	r2, [r3, #0]
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <NRF24_init_RX_mode+0xb8>)
 80014c2:	701a      	strb	r2, [r3, #0]

	CE_RESET;
 80014c4:	2200      	movs	r2, #0
 80014c6:	2108      	movs	r1, #8
 80014c8:	4829      	ldr	r0, [pc, #164]	; (8001570 <NRF24_init_RX_mode+0xbc>)
 80014ca:	f003 ff5c 	bl	8005386 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 80014ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80014d2:	f000 fad5 	bl	8001a80 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter) 0b 0000 1010
 80014d6:	210a      	movs	r1, #10
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 fb27 	bl	8001b2c <NRF24_WriteReg>

	DelayMicro(5000);
 80014de:	f241 3088 	movw	r0, #5000	; 0x1388
 80014e2:	f000 facd 	bl	8001a80 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x03); 			// Enable Pipe0 and Pipe1
 80014e6:	2103      	movs	r1, #3
 80014e8:	2001      	movs	r0, #1
 80014ea:	f000 fb1f 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x03); 		// Enable Pipe0 and Pipe1
 80014ee:	2103      	movs	r1, #3
 80014f0:	2002      	movs	r0, #2
 80014f2:	f000 fb1b 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 80014f6:	2101      	movs	r1, #1
 80014f8:	2003      	movs	r0, #3
 80014fa:	f000 fb17 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 80014fe:	215f      	movs	r1, #95	; 0x5f
 8001500:	2004      	movs	r0, #4
 8001502:	f000 fb13 	bl	8001b2c <NRF24_WriteReg>
	NRF24_ToggleFeatures();					// Send activated command
 8001506:	f000 fb3f 	bl	8001b88 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);				// Turn off all FEATURE register
 800150a:	2100      	movs	r1, #0
 800150c:	201d      	movs	r0, #29
 800150e:	f000 fb0d 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0); 				// Turn off all payload length data pipe
 8001512:	2100      	movs	r1, #0
 8001514:	201c      	movs	r0, #28
 8001516:	f000 fb09 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800151a:	2170      	movs	r1, #112	; 0x70
 800151c:	2007      	movs	r0, #7
 800151e:	f000 fb05 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz  // was 76
 8001522:	214c      	movs	r1, #76	; 0x4c
 8001524:	2005      	movs	r0, #5
 8001526:	f000 fb01 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26); 	    // TX_PWR:0dBm, Datarate:250kbps
 800152a:	2126      	movs	r1, #38	; 0x26
 800152c:	2006      	movs	r0, #6
 800152e:	f000 fafd 	bl	8001b2c <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_0, TX_ADR_WIDTH);		//	set up Transmit address. Used for a PTX device only.
 8001532:	2203      	movs	r2, #3
 8001534:	490f      	ldr	r1, [pc, #60]	; (8001574 <NRF24_init_RX_mode+0xc0>)
 8001536:	2010      	movs	r0, #16
 8001538:	f000 fb7a 	bl	8001c30 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_0, TX_ADR_WIDTH);    // Set up pipe 0 address
 800153c:	2203      	movs	r2, #3
 800153e:	490d      	ldr	r1, [pc, #52]	; (8001574 <NRF24_init_RX_mode+0xc0>)
 8001540:	200a      	movs	r0, #10
 8001542:	f000 fb75 	bl	8001c30 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS_1, TX_ADR_WIDTH);    // Set up pipe 1 address
 8001546:	2203      	movs	r2, #3
 8001548:	490b      	ldr	r1, [pc, #44]	; (8001578 <NRF24_init_RX_mode+0xc4>)
 800154a:	200b      	movs	r0, #11
 800154c:	f000 fb70 	bl	8001c30 <NRF24_Write_Buf>

	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 0
 8001550:	210a      	movs	r1, #10
 8001552:	2011      	movs	r0, #17
 8001554:	f000 faea 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 1
 8001558:	210a      	movs	r1, #10
 800155a:	2012      	movs	r0, #18
 800155c:	f000 fae6 	bl	8001b2c <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 8001560:	f7ff ff1c 	bl	800139c <NRF24L01_RX_Mode>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000102 	.word	0x20000102
 800156c:	20000008 	.word	0x20000008
 8001570:	40010800 	.word	0x40010800
 8001574:	2000000c 	.word	0x2000000c
 8001578:	20000010 	.word	0x20000010

0800157c <IRQ_Callback>:

//----------------------------------------------------------------------------------------
// Callback generate when stm32 get falling  signal from IRQ pin (NRF module show that it has data in buffer)
void IRQ_Callback(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 8001582:	2301      	movs	r3, #1
 8001584:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 8001586:	2300      	movs	r3, #0
 8001588:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <IRQ_Callback+0x64>)
 8001590:	f003 ff11 	bl	80053b6 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 8001594:	200a      	movs	r0, #10
 8001596:	f000 fa73 	bl	8001a80 <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 800159a:	2007      	movs	r0, #7
 800159c:	f000 fa92 	bl	8001ac4 <NRF24_ReadReg>
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d013      	beq.n	80015d6 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	085b      	lsrs	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <IRQ_Callback+0x68>)
 80015bc:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80015be:	220a      	movs	r2, #10
 80015c0:	4909      	ldr	r1, [pc, #36]	; (80015e8 <IRQ_Callback+0x6c>)
 80015c2:	2061      	movs	r0, #97	; 0x61
 80015c4:	f000 fb0a 	bl	8001bdc <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 80015c8:	2140      	movs	r1, #64	; 0x40
 80015ca:	2007      	movs	r0, #7
 80015cc:	f000 faae 	bl	8001b2c <NRF24_WriteReg>
		rx_flag = 1;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <IRQ_Callback+0x70>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
	}
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40011000 	.word	0x40011000
 80015e4:	20000134 	.word	0x20000134
 80015e8:	20000104 	.word	0x20000104
 80015ec:	2000010e 	.word	0x2000010e

080015f0 <NRF24L01_RX_Mode_for_TX_mode>:
		NRF24L01_Transmission();
	}
}
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode_for_TX_mode(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 fa62 	bl	8001ac4 <NRF24_ReadReg>
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f043 0303 	orr.w	r3, r3, #3
 800160a:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	4619      	mov	r1, r3
 8001610:	2000      	movs	r0, #0
 8001612:	f000 fa8b 	bl	8001b2c <NRF24_WriteReg>
  CE_SET;
 8001616:	2201      	movs	r2, #1
 8001618:	2108      	movs	r1, #8
 800161a:	4807      	ldr	r0, [pc, #28]	; (8001638 <NRF24L01_RX_Mode_for_TX_mode+0x48>)
 800161c:	f003 feb3 	bl	8005386 <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 8001620:	2096      	movs	r0, #150	; 0x96
 8001622:	f000 fa2d 	bl	8001a80 <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 8001626:	f000 fb35 	bl	8001c94 <NRF24_FlushRX>
  NRF24_FlushTX();
 800162a:	f000 fb55 	bl	8001cd8 <NRF24_FlushTX>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40010800 	.word	0x40010800

0800163c <NRF24_init_TX_mode>:
//----------------------------------------------------------------------------------------
void NRF24_init_TX_mode(void)    // TRANSMITTER
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	reset_nrf24l01();				// RESET module settings
 8001640:	f000 fbac 	bl	8001d9c <reset_nrf24l01>
	tx_or_rx_mode = tx_mode;		// For block interrupt HAL_GPIO_EXTI_Callback
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <NRF24_init_TX_mode+0xa8>)
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <NRF24_init_TX_mode+0xac>)
 800164a:	701a      	strb	r2, [r3, #0]

	CE_RESET;
 800164c:	2200      	movs	r2, #0
 800164e:	2108      	movs	r1, #8
 8001650:	4826      	ldr	r0, [pc, #152]	; (80016ec <NRF24_init_TX_mode+0xb0>)
 8001652:	f003 fe98 	bl	8005386 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8001656:	f241 3088 	movw	r0, #5000	; 0x1388
 800165a:	f000 fa11 	bl	8001a80 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800165e:	210a      	movs	r1, #10
 8001660:	2000      	movs	r0, #0
 8001662:	f000 fa63 	bl	8001b2c <NRF24_WriteReg>

	DelayMicro(5000);
 8001666:	f241 3088 	movw	r0, #5000	; 0x1388
 800166a:	f000 fa09 	bl	8001a80 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 800166e:	2101      	movs	r1, #1
 8001670:	2001      	movs	r0, #1
 8001672:	f000 fa5b 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8001676:	2101      	movs	r1, #1
 8001678:	2002      	movs	r0, #2
 800167a:	f000 fa57 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800167e:	2101      	movs	r1, #1
 8001680:	2003      	movs	r0, #3
 8001682:	f000 fa53 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8001686:	215f      	movs	r1, #95	; 0x5f
 8001688:	2004      	movs	r0, #4
 800168a:	f000 fa4f 	bl	8001b2c <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 800168e:	f000 fa7b 	bl	8001b88 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 8001692:	2100      	movs	r1, #0
 8001694:	201d      	movs	r0, #29
 8001696:	f000 fa49 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 800169a:	2100      	movs	r1, #0
 800169c:	201c      	movs	r0, #28
 800169e:	f000 fa45 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 80016a2:	2170      	movs	r1, #112	; 0x70
 80016a4:	2007      	movs	r0, #7
 80016a6:	f000 fa41 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 80016aa:	214c      	movs	r1, #76	; 0x4c
 80016ac:	2005      	movs	r0, #5
 80016ae:	f000 fa3d 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 80016b2:	2126      	movs	r1, #38	; 0x26
 80016b4:	2006      	movs	r0, #6
 80016b6:	f000 fa39 	bl	8001b2c <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 80016ba:	2203      	movs	r2, #3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <NRF24_init_TX_mode+0xb4>)
 80016be:	2010      	movs	r0, #16
 80016c0:	f000 fab6 	bl	8001c30 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 80016c4:	2203      	movs	r2, #3
 80016c6:	490a      	ldr	r1, [pc, #40]	; (80016f0 <NRF24_init_TX_mode+0xb4>)
 80016c8:	200a      	movs	r0, #10
 80016ca:	f000 fab1 	bl	8001c30 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 80016ce:	210a      	movs	r1, #10
 80016d0:	2011      	movs	r0, #17
 80016d2:	f000 fa2b 	bl	8001b2c <NRF24_WriteReg>

	NRF24L01_RX_Mode_for_TX_mode();
 80016d6:	f7ff ff8b 	bl	80015f0 <NRF24L01_RX_Mode_for_TX_mode>

	read_config_registers();	// For debug
 80016da:	f000 fb1f 	bl	8001d1c <read_config_registers>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000007 	.word	0x20000007
 80016e8:	20000008 	.word	0x20000008
 80016ec:	40010800 	.word	0x40010800
 80016f0:	20000014 	.word	0x20000014

080016f4 <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 80016fc:	2203      	movs	r2, #3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <NRF24L01_TX_Mode+0x2c>)
 8001700:	2010      	movs	r0, #16
 8001702:	f000 fa95 	bl	8001c30 <NRF24_Write_Buf>
  CE_RESET;
 8001706:	2200      	movs	r2, #0
 8001708:	2108      	movs	r1, #8
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <NRF24L01_TX_Mode+0x30>)
 800170c:	f003 fe3b 	bl	8005386 <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 8001710:	f000 fac0 	bl	8001c94 <NRF24_FlushRX>
  NRF24_FlushTX();
 8001714:	f000 fae0 	bl	8001cd8 <NRF24_FlushTX>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000014 	.word	0x20000014
 8001724:	40010800 	.word	0x40010800

08001728 <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	4613      	mov	r3, r2
 8001736:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 8001738:	2200      	movs	r2, #0
 800173a:	2108      	movs	r1, #8
 800173c:	4813      	ldr	r0, [pc, #76]	; (800178c <NRF24_Transmit+0x64>)
 800173e:	f003 fe22 	bl	8005386 <HAL_GPIO_WritePin>
  CS_ON;
 8001742:	2200      	movs	r2, #0
 8001744:	2110      	movs	r1, #16
 8001746:	4811      	ldr	r0, [pc, #68]	; (800178c <NRF24_Transmit+0x64>)
 8001748:	f003 fe1d 	bl	8005386 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 800174c:	1df9      	adds	r1, r7, #7
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	2201      	movs	r2, #1
 8001754:	480e      	ldr	r0, [pc, #56]	; (8001790 <NRF24_Transmit+0x68>)
 8001756:	f004 ff57 	bl	8006608 <HAL_SPI_Transmit>
  DelayMicro(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f000 f990 	bl	8001a80 <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	b29a      	uxth	r2, r3
 8001764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001768:	6839      	ldr	r1, [r7, #0]
 800176a:	4809      	ldr	r0, [pc, #36]	; (8001790 <NRF24_Transmit+0x68>)
 800176c:	f004 ff4c 	bl	8006608 <HAL_SPI_Transmit>
  CS_OFF;
 8001770:	2201      	movs	r2, #1
 8001772:	2110      	movs	r1, #16
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <NRF24_Transmit+0x64>)
 8001776:	f003 fe06 	bl	8005386 <HAL_GPIO_WritePin>
  CE_SET;
 800177a:	2201      	movs	r2, #1
 800177c:	2108      	movs	r1, #8
 800177e:	4803      	ldr	r0, [pc, #12]	; (800178c <NRF24_Transmit+0x64>)
 8001780:	f003 fe01 	bl	8005386 <HAL_GPIO_WritePin>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40010800 	.word	0x40010800
 8001790:	200006d8 	.word	0x200006d8

08001794 <NRF24L01_Send>:
//----------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	2300      	movs	r3, #0
 80017a2:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ffa5 	bl	80016f4 <NRF24L01_TX_Mode>

  regval = NRF24_ReadReg(CONFIG);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f98a 	bl	8001ac4 <NRF24_ReadReg>
 80017b0:	4603      	mov	r3, r0
 80017b2:	73bb      	strb	r3, [r7, #14]

  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 80017b4:	7bbb      	ldrb	r3, [r7, #14]
 80017b6:	f043 0302 	orr.w	r3, r3, #2
 80017ba:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	4619      	mov	r1, r3
 80017c8:	2000      	movs	r0, #0
 80017ca:	f000 f9af 	bl	8001b2c <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 80017ce:	2096      	movs	r0, #150	; 0x96
 80017d0:	f000 f956 	bl	8001a80 <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 80017d4:	220a      	movs	r2, #10
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	20a0      	movs	r0, #160	; 0xa0
 80017da:	f7ff ffa5 	bl	8001728 <NRF24_Transmit>

  CE_SET;
 80017de:	2201      	movs	r2, #1
 80017e0:	2108      	movs	r1, #8
 80017e2:	481c      	ldr	r0, [pc, #112]	; (8001854 <NRF24L01_Send+0xc0>)
 80017e4:	f003 fdcf 	bl	8005386 <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 80017e8:	200f      	movs	r0, #15
 80017ea:	f000 f949 	bl	8001a80 <DelayMicro>
  CE_RESET;
 80017ee:	2200      	movs	r2, #0
 80017f0:	2108      	movs	r1, #8
 80017f2:	4818      	ldr	r0, [pc, #96]	; (8001854 <NRF24L01_Send+0xc0>)
 80017f4:	f003 fdc7 	bl	8005386 <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 80017f8:	bf00      	nop
 80017fa:	2104      	movs	r1, #4
 80017fc:	4815      	ldr	r0, [pc, #84]	; (8001854 <NRF24L01_Send+0xc0>)
 80017fe:	f003 fdab 	bl	8005358 <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d0f8      	beq.n	80017fa <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 8001808:	2007      	movs	r0, #7
 800180a:	f000 f95b 	bl	8001ac4 <NRF24_ReadReg>
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	f003 0320 	and.w	r3, r3, #32
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 800181c:	2120      	movs	r1, #32
 800181e:	2007      	movs	r0, #7
 8001820:	f000 f984 	bl	8001b2c <NRF24_WriteReg>
 8001824:	e00a      	b.n	800183c <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <NRF24L01_Send+0xa8>
  {
    NRF24_WriteReg(STATUS_NRF, 0x10);
 8001830:	2110      	movs	r1, #16
 8001832:	2007      	movs	r0, #7
 8001834:	f000 f97a 	bl	8001b2c <NRF24_WriteReg>
    NRF24_FlushTX();
 8001838:	f000 fa4e 	bl	8001cd8 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 800183c:	2008      	movs	r0, #8
 800183e:	f000 f941 	bl	8001ac4 <NRF24_ReadReg>
 8001842:	4603      	mov	r3, r0
 8001844:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode_for_TX_mode();
 8001846:	f7ff fed3 	bl	80015f0 <NRF24L01_RX_Mode_for_TX_mode>

  return regval;
 800184a:	7bbb      	ldrb	r3, [r7, #14]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40010800 	.word	0x40010800

08001858 <NRF24L01_Transmission>:
//----------------------------------------------------------------------------------------
void NRF24L01_Transmission(void)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b091      	sub	sp, #68	; 0x44
 800185c:	af00      	add	r7, sp, #0
	static uint8_t retr_cnt, dt = 0;
	//static int test_data = 0;							// Init test data for transmit
	uint8_t buf2[20]={0};
 800185e:	2300      	movs	r3, #0
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001862:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
	uint8_t test_i[10] = {0};
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	809a      	strh	r2, [r3, #4]

	uint8_t str_nrf[25] = {0};
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]
 8001892:	751a      	strb	r2, [r3, #20]

	// Print transmit data
	ssd1306_SetCursor(0, 16);
 8001894:	2110      	movs	r1, #16
 8001896:	2000      	movs	r0, #0
 8001898:	f000 fcc2 	bl	8002220 <ssd1306_SetCursor>
	strcpy(str_nrf, "Data:");
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4a6c      	ldr	r2, [pc, #432]	; (8001a50 <NRF24L01_Transmission+0x1f8>)
 80018a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a4:	6018      	str	r0, [r3, #0]
 80018a6:	3304      	adds	r3, #4
 80018a8:	8019      	strh	r1, [r3, #0]
	sprintf(buf2, "%d", test_data);
 80018aa:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <NRF24L01_Transmission+0x1fc>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b2:	4969      	ldr	r1, [pc, #420]	; (8001a58 <NRF24L01_Transmission+0x200>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f006 fd71 	bl	800839c <siprintf>
	strcat(str_nrf, buf2);
 80018ba:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f006 fd8a 	bl	80083dc <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 80018c8:	4a64      	ldr	r2, [pc, #400]	; (8001a5c <NRF24L01_Transmission+0x204>)
 80018ca:	1d38      	adds	r0, r7, #4
 80018cc:	2301      	movs	r3, #1
 80018ce:	ca06      	ldmia	r2, {r1, r2}
 80018d0:	f000 fc80 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80018d4:	f000 fb6e 	bl	8001fb4 <ssd1306_UpdateScreen>
	memset(str_nrf, 0, sizeof(str_nrf));
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2219      	movs	r2, #25
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f006 fc9e 	bl	8008220 <memset>

	dt = NRF24L01_Send(buf2);						// Transmit data
 80018e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff53 	bl	8001794 <NRF24L01_Send>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b5b      	ldr	r3, [pc, #364]	; (8001a60 <NRF24L01_Transmission+0x208>)
 80018f4:	701a      	strb	r2, [r3, #0]

	// Calculation retransmitted packets
	retr_cnt = dt & 0xF;
 80018f6:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <NRF24L01_Transmission+0x208>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b58      	ldr	r3, [pc, #352]	; (8001a64 <NRF24L01_Transmission+0x20c>)
 8001902:	701a      	strb	r2, [r3, #0]
	retr_cnt_full += retr_cnt;		// Counting retransmit packets
 8001904:	4b57      	ldr	r3, [pc, #348]	; (8001a64 <NRF24L01_Transmission+0x20c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <NRF24L01_Transmission+0x210>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a55      	ldr	r2, [pc, #340]	; (8001a68 <NRF24L01_Transmission+0x210>)
 8001912:	6013      	str	r3, [r2, #0]

	// Print transmit counter
	memset(test_i, 0, sizeof(test_i));
 8001914:	f107 0320 	add.w	r3, r7, #32
 8001918:	220a      	movs	r2, #10
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f006 fc7f 	bl	8008220 <memset>
	ssd1306_SetCursor(0, 26);
 8001922:	211a      	movs	r1, #26
 8001924:	2000      	movs	r0, #0
 8001926:	f000 fc7b 	bl	8002220 <ssd1306_SetCursor>
	strcpy(str_nrf, "Conut trans:");
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	4a4f      	ldr	r2, [pc, #316]	; (8001a6c <NRF24L01_Transmission+0x214>)
 800192e:	461c      	mov	r4, r3
 8001930:	4613      	mov	r3, r2
 8001932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001934:	c407      	stmia	r4!, {r0, r1, r2}
 8001936:	7023      	strb	r3, [r4, #0]
	itoa(i, test_i, 10);								// Convert number in string
 8001938:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <NRF24L01_Transmission+0x218>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f107 0120 	add.w	r1, r7, #32
 8001940:	220a      	movs	r2, #10
 8001942:	4618      	mov	r0, r3
 8001944:	f006 fc5c 	bl	8008200 <itoa>
	strcat(str_nrf, test_i);
 8001948:	f107 0220 	add.w	r2, r7, #32
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f006 fd43 	bl	80083dc <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001956:	4a41      	ldr	r2, [pc, #260]	; (8001a5c <NRF24L01_Transmission+0x204>)
 8001958:	1d38      	adds	r0, r7, #4
 800195a:	2301      	movs	r3, #1
 800195c:	ca06      	ldmia	r2, {r1, r2}
 800195e:	f000 fc39 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001962:	f000 fb27 	bl	8001fb4 <ssd1306_UpdateScreen>

	// Print retransmeet counter
	memset(str_nrf, 0, sizeof(str_nrf));
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2219      	movs	r2, #25
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f006 fc57 	bl	8008220 <memset>
	memset(test_i, 0, sizeof(test_i));
 8001972:	f107 0320 	add.w	r3, r7, #32
 8001976:	220a      	movs	r2, #10
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f006 fc50 	bl	8008220 <memset>
	ssd1306_SetCursor(0, 36);
 8001980:	2124      	movs	r1, #36	; 0x24
 8001982:	2000      	movs	r0, #0
 8001984:	f000 fc4c 	bl	8002220 <ssd1306_SetCursor>
	strcpy(str_nrf, "Retransm:");
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	4a3a      	ldr	r2, [pc, #232]	; (8001a74 <NRF24L01_Transmission+0x21c>)
 800198c:	ca07      	ldmia	r2, {r0, r1, r2}
 800198e:	c303      	stmia	r3!, {r0, r1}
 8001990:	801a      	strh	r2, [r3, #0]
	itoa(retr_cnt_full, test_i, 10);
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <NRF24L01_Transmission+0x210>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f107 0120 	add.w	r1, r7, #32
 800199a:	220a      	movs	r2, #10
 800199c:	4618      	mov	r0, r3
 800199e:	f006 fc2f 	bl	8008200 <itoa>
	strcat(str_nrf, test_i);
 80019a2:	f107 0220 	add.w	r2, r7, #32
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f006 fd16 	bl	80083dc <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 80019b0:	4a2a      	ldr	r2, [pc, #168]	; (8001a5c <NRF24L01_Transmission+0x204>)
 80019b2:	1d38      	adds	r0, r7, #4
 80019b4:	2301      	movs	r3, #1
 80019b6:	ca06      	ldmia	r2, {r1, r2}
 80019b8:	f000 fc0c 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80019bc:	f000 fafa 	bl	8001fb4 <ssd1306_UpdateScreen>

	// Print lost packets
	memset(str_nrf, 0, sizeof(str_nrf));
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2219      	movs	r2, #25
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f006 fc2a 	bl	8008220 <memset>
	memset(test_i, 0, sizeof(test_i));
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	220a      	movs	r2, #10
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f006 fc23 	bl	8008220 <memset>

	cnt_lost = dt >> 4;
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <NRF24L01_Transmission+0x208>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <NRF24L01_Transmission+0x220>)
 80019e6:	601a      	str	r2, [r3, #0]

	ssd1306_SetCursor(0, 46);
 80019e8:	212e      	movs	r1, #46	; 0x2e
 80019ea:	2000      	movs	r0, #0
 80019ec:	f000 fc18 	bl	8002220 <ssd1306_SetCursor>
	strcpy(str_nrf, "Lost:");
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <NRF24L01_Transmission+0x224>)
 80019f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019f8:	6018      	str	r0, [r3, #0]
 80019fa:	3304      	adds	r3, #4
 80019fc:	8019      	strh	r1, [r3, #0]
	itoa(cnt_lost, test_i, 10);
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <NRF24L01_Transmission+0x220>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f107 0120 	add.w	r1, r7, #32
 8001a06:	220a      	movs	r2, #10
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f006 fbf9 	bl	8008200 <itoa>
	strcat(str_nrf, test_i);
 8001a0e:	f107 0220 	add.w	r2, r7, #32
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f006 fce0 	bl	80083dc <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001a1c:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <NRF24L01_Transmission+0x204>)
 8001a1e:	1d38      	adds	r0, r7, #4
 8001a20:	2301      	movs	r3, #1
 8001a22:	ca06      	ldmia	r2, {r1, r2}
 8001a24:	f000 fbd6 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a28:	f000 fac4 	bl	8001fb4 <ssd1306_UpdateScreen>

	test_data++;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <NRF24L01_Transmission+0x1fc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <NRF24L01_Transmission+0x1fc>)
 8001a34:	6013      	str	r3, [r2, #0]
	i++;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <NRF24L01_Transmission+0x218>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <NRF24L01_Transmission+0x218>)
 8001a3e:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 8001a40:	2064      	movs	r0, #100	; 0x64
 8001a42:	f003 f867 	bl	8004b14 <HAL_Delay>
}
 8001a46:	bf00      	nop
 8001a48:	3744      	adds	r7, #68	; 0x44
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	08008bec 	.word	0x08008bec
 8001a54:	20000140 	.word	0x20000140
 8001a58:	08008bf4 	.word	0x08008bf4
 8001a5c:	2000001c 	.word	0x2000001c
 8001a60:	20000144 	.word	0x20000144
 8001a64:	20000145 	.word	0x20000145
 8001a68:	20000138 	.word	0x20000138
 8001a6c:	08008bf8 	.word	0x08008bf8
 8001a70:	20000018 	.word	0x20000018
 8001a74:	08008c08 	.word	0x08008c08
 8001a78:	2000013c 	.word	0x2000013c
 8001a7c:	08008c14 	.word	0x08008c14

08001a80 <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <DelayMicro+0x3c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <DelayMicro+0x3c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <DelayMicro+0x40>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	0ddb      	lsrs	r3, r3, #23
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	607b      	str	r3, [r7, #4]
	while (micros--);
 8001aa2:	bf00      	nop
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	1e5a      	subs	r2, r3, #1
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1fa      	bne.n	8001aa4 <DelayMicro+0x24>
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	2000002c 	.word	0x2000002c
 8001ac0:	ffa71ee7 	.word	0xffa71ee7

08001ac4 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2110      	movs	r1, #16
 8001ad6:	4813      	ldr	r0, [pc, #76]	; (8001b24 <NRF24_ReadReg+0x60>)
 8001ad8:	f003 fc55 	bl	8005386 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8001adc:	f107 020f 	add.w	r2, r7, #15
 8001ae0:	1df9      	adds	r1, r7, #7
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	2301      	movs	r3, #1
 8001aea:	480f      	ldr	r0, [pc, #60]	; (8001b28 <NRF24_ReadReg+0x64>)
 8001aec:	f004 ffd9 	bl	8006aa2 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2b07      	cmp	r3, #7
 8001af4:	d00c      	beq.n	8001b10 <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 8001af6:	23ff      	movs	r3, #255	; 0xff
 8001af8:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8001afa:	f107 020f 	add.w	r2, r7, #15
 8001afe:	f107 010e 	add.w	r1, r7, #14
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	4807      	ldr	r0, [pc, #28]	; (8001b28 <NRF24_ReadReg+0x64>)
 8001b0c:	f004 ffc9 	bl	8006aa2 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 8001b10:	2201      	movs	r2, #1
 8001b12:	2110      	movs	r1, #16
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <NRF24_ReadReg+0x60>)
 8001b16:	f003 fc36 	bl	8005386 <HAL_GPIO_WritePin>
  return dt;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40010800 	.word	0x40010800
 8001b28:	200006d8 	.word	0x200006d8

08001b2c <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	460a      	mov	r2, r1
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f043 0320 	orr.w	r3, r3, #32
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8001b46:	2200      	movs	r2, #0
 8001b48:	2110      	movs	r1, #16
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <NRF24_WriteReg+0x54>)
 8001b4c:	f003 fc1b 	bl	8005386 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8001b50:	1df9      	adds	r1, r7, #7
 8001b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b56:	2201      	movs	r2, #1
 8001b58:	480a      	ldr	r0, [pc, #40]	; (8001b84 <NRF24_WriteReg+0x58>)
 8001b5a:	f004 fd55 	bl	8006608 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 8001b5e:	1db9      	adds	r1, r7, #6
 8001b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b64:	2201      	movs	r2, #1
 8001b66:	4807      	ldr	r0, [pc, #28]	; (8001b84 <NRF24_WriteReg+0x58>)
 8001b68:	f004 fd4e 	bl	8006608 <HAL_SPI_Transmit>
  CS_OFF;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2110      	movs	r1, #16
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <NRF24_WriteReg+0x54>)
 8001b72:	f003 fc08 	bl	8005386 <HAL_GPIO_WritePin>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40010800 	.word	0x40010800
 8001b84:	200006d8 	.word	0x200006d8

08001b88 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 8001b8e:	2350      	movs	r3, #80	; 0x50
 8001b90:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8001b92:	2200      	movs	r2, #0
 8001b94:	2110      	movs	r1, #16
 8001b96:	480f      	ldr	r0, [pc, #60]	; (8001bd4 <NRF24_ToggleFeatures+0x4c>)
 8001b98:	f003 fbf5 	bl	8005386 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001b9c:	1d39      	adds	r1, r7, #4
 8001b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <NRF24_ToggleFeatures+0x50>)
 8001ba6:	f004 fd2f 	bl	8006608 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff ff68 	bl	8001a80 <DelayMicro>
  dt[0] = 0x73;
 8001bb0:	2373      	movs	r3, #115	; 0x73
 8001bb2:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001bb4:	1d39      	adds	r1, r7, #4
 8001bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <NRF24_ToggleFeatures+0x50>)
 8001bbe:	f004 fd23 	bl	8006608 <HAL_SPI_Transmit>
  CS_OFF;
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2110      	movs	r1, #16
 8001bc6:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <NRF24_ToggleFeatures+0x4c>)
 8001bc8:	f003 fbdd 	bl	8005386 <HAL_GPIO_WritePin>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40010800 	.word	0x40010800
 8001bd8:	200006d8 	.word	0x200006d8

08001bdc <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	4613      	mov	r3, r2
 8001bea:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8001bec:	2200      	movs	r2, #0
 8001bee:	2110      	movs	r1, #16
 8001bf0:	480d      	ldr	r0, [pc, #52]	; (8001c28 <NRF24_Read_Buf+0x4c>)
 8001bf2:	f003 fbc8 	bl	8005386 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8001bf6:	1df9      	adds	r1, r7, #7
 8001bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	480b      	ldr	r0, [pc, #44]	; (8001c2c <NRF24_Read_Buf+0x50>)
 8001c00:	f004 fd02 	bl	8006608 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 8001c04:	79bb      	ldrb	r3, [r7, #6]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	4807      	ldr	r0, [pc, #28]	; (8001c2c <NRF24_Read_Buf+0x50>)
 8001c10:	f004 fe36 	bl	8006880 <HAL_SPI_Receive>
  CS_OFF;
 8001c14:	2201      	movs	r2, #1
 8001c16:	2110      	movs	r1, #16
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <NRF24_Read_Buf+0x4c>)
 8001c1a:	f003 fbb4 	bl	8005386 <HAL_GPIO_WritePin>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40010800 	.word	0x40010800
 8001c2c:	200006d8 	.word	0x200006d8

08001c30 <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f043 0320 	orr.w	r3, r3, #32
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2110      	movs	r1, #16
 8001c4e:	480f      	ldr	r0, [pc, #60]	; (8001c8c <NRF24_Write_Buf+0x5c>)
 8001c50:	f003 fb99 	bl	8005386 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8001c54:	1df9      	adds	r1, r7, #7
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <NRF24_Write_Buf+0x60>)
 8001c5e:	f004 fcd3 	bl	8006608 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7ff ff0c 	bl	8001a80 <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8001c68:	79bb      	ldrb	r3, [r7, #6]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	4807      	ldr	r0, [pc, #28]	; (8001c90 <NRF24_Write_Buf+0x60>)
 8001c74:	f004 fcc8 	bl	8006608 <HAL_SPI_Transmit>
  CS_OFF;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2110      	movs	r1, #16
 8001c7c:	4803      	ldr	r0, [pc, #12]	; (8001c8c <NRF24_Write_Buf+0x5c>)
 8001c7e:	f003 fb82 	bl	8005386 <HAL_GPIO_WritePin>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	200006d8 	.word	0x200006d8

08001c94 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8001c9a:	23e2      	movs	r3, #226	; 0xe2
 8001c9c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2110      	movs	r1, #16
 8001ca2:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <NRF24_FlushRX+0x3c>)
 8001ca4:	f003 fb6f 	bl	8005386 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001ca8:	1d39      	adds	r1, r7, #4
 8001caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4808      	ldr	r0, [pc, #32]	; (8001cd4 <NRF24_FlushRX+0x40>)
 8001cb2:	f004 fca9 	bl	8006608 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	f7ff fee2 	bl	8001a80 <DelayMicro>
  CS_OFF;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2110      	movs	r1, #16
 8001cc0:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <NRF24_FlushRX+0x3c>)
 8001cc2:	f003 fb60 	bl	8005386 <HAL_GPIO_WritePin>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40010800 	.word	0x40010800
 8001cd4:	200006d8 	.word	0x200006d8

08001cd8 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 8001cde:	23e1      	movs	r3, #225	; 0xe1
 8001ce0:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2110      	movs	r1, #16
 8001ce6:	480b      	ldr	r0, [pc, #44]	; (8001d14 <NRF24_FlushTX+0x3c>)
 8001ce8:	f003 fb4d 	bl	8005386 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001cec:	1d39      	adds	r1, r7, #4
 8001cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4808      	ldr	r0, [pc, #32]	; (8001d18 <NRF24_FlushTX+0x40>)
 8001cf6:	f004 fc87 	bl	8006608 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f7ff fec0 	bl	8001a80 <DelayMicro>
  CS_OFF;
 8001d00:	2201      	movs	r2, #1
 8001d02:	2110      	movs	r1, #16
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <NRF24_FlushTX+0x3c>)
 8001d06:	f003 fb3e 	bl	8005386 <HAL_GPIO_WritePin>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40010800 	.word	0x40010800
 8001d18:	200006d8 	.word	0x200006d8

08001d1c <read_config_registers>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
bool read_config_registers(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001d20:	2064      	movs	r0, #100	; 0x64
 8001d22:	f002 fef7 	bl	8004b14 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff fecc 	bl	8001ac4 <NRF24_ReadReg>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <read_config_registers+0x78>)
 8001d32:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 8001d34:	2001      	movs	r0, #1
 8001d36:	f7ff fec5 	bl	8001ac4 <NRF24_ReadReg>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <read_config_registers+0x78>)
 8001d40:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 8001d42:	2002      	movs	r0, #2
 8001d44:	f7ff febe 	bl	8001ac4 <NRF24_ReadReg>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <read_config_registers+0x78>)
 8001d4e:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 8001d50:	2007      	movs	r0, #7
 8001d52:	f7ff feb7 	bl	8001ac4 <NRF24_ReadReg>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <read_config_registers+0x78>)
 8001d5c:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 8001d5e:	2006      	movs	r0, #6
 8001d60:	f7ff feb0 	bl	8001ac4 <NRF24_ReadReg>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <read_config_registers+0x78>)
 8001d6a:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	490a      	ldr	r1, [pc, #40]	; (8001d98 <read_config_registers+0x7c>)
 8001d70:	2010      	movs	r0, #16
 8001d72:	f7ff ff33 	bl	8001bdc <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 8001d76:	2203      	movs	r2, #3
 8001d78:	4907      	ldr	r1, [pc, #28]	; (8001d98 <read_config_registers+0x7c>)
 8001d7a:	200a      	movs	r0, #10
 8001d7c:	f7ff ff2e 	bl	8001bdc <NRF24_Read_Buf>

	if(config_array[0] == 0)		// Data from nrf module was read
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <read_config_registers+0x78>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <read_config_registers+0x70>
	{
		return false;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e000      	b.n	8001d8e <read_config_registers+0x72>
	}
	else
	{
		return true;
 8001d8c:	2301      	movs	r3, #1
	}
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000110 	.word	0x20000110
 8001d98:	20000120 	.word	0x20000120

08001d9c <reset_nrf24l01>:
//----------------------------------------------------------------------------------------
void reset_nrf24l01(void)   // reconfigure module
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
	CE_RESET;
 8001da2:	2200      	movs	r2, #0
 8001da4:	2108      	movs	r1, #8
 8001da6:	4829      	ldr	r0, [pc, #164]	; (8001e4c <reset_nrf24l01+0xb0>)
 8001da8:	f003 faed 	bl	8005386 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8001dac:	f241 3088 	movw	r0, #5000	; 0x1388
 8001db0:	f7ff fe66 	bl	8001a80 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8001db4:	210a      	movs	r1, #10
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff feb8 	bl	8001b2c <NRF24_WriteReg>

	DelayMicro(5000);
 8001dbc:	f241 3088 	movw	r0, #5000	; 0x1388
 8001dc0:	f7ff fe5e 	bl	8001a80 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7ff feb0 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f7ff feac 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	f7ff fea8 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8001ddc:	215f      	movs	r1, #95	; 0x5f
 8001dde:	2004      	movs	r0, #4
 8001de0:	f7ff fea4 	bl	8001b2c <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 8001de4:	f7ff fed0 	bl	8001b88 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 8001de8:	2100      	movs	r1, #0
 8001dea:	201d      	movs	r0, #29
 8001dec:	f7ff fe9e 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8001df0:	2100      	movs	r1, #0
 8001df2:	201c      	movs	r0, #28
 8001df4:	f7ff fe9a 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x00); 		// Reset flags for IRQ   // WAS NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2007      	movs	r0, #7
 8001dfc:	f7ff fe96 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8001e00:	214c      	movs	r1, #76	; 0x4c
 8001e02:	2005      	movs	r0, #5
 8001e04:	f7ff fe92 	bl	8001b2c <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 8001e08:	2126      	movs	r1, #38	; 0x26
 8001e0a:	2006      	movs	r0, #6
 8001e0c:	f7ff fe8e 	bl	8001b2c <NRF24_WriteReg>

	uint8_t TX_ADDRESS_RESET[TX_ADR_WIDTH] = {0x00,0x00,0x00};   // Address for pipe 0
 8001e10:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <reset_nrf24l01+0xb4>)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	4611      	mov	r1, r2
 8001e18:	8019      	strh	r1, [r3, #0]
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	0c12      	lsrs	r2, r2, #16
 8001e1e:	701a      	strb	r2, [r3, #0]
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_RESET, TX_ADR_WIDTH);			// Write TX address
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2203      	movs	r2, #3
 8001e24:	4619      	mov	r1, r3
 8001e26:	2010      	movs	r0, #16
 8001e28:	f7ff ff02 	bl	8001c30 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_RESET, TX_ADR_WIDTH);		// Set up pipe 0 address
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2203      	movs	r2, #3
 8001e30:	4619      	mov	r1, r3
 8001e32:	200a      	movs	r0, #10
 8001e34:	f7ff fefc 	bl	8001c30 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 8001e38:	210a      	movs	r1, #10
 8001e3a:	2011      	movs	r0, #17
 8001e3c:	f7ff fe76 	bl	8001b2c <NRF24_WriteReg>

	NRF24L01_RX_Mode_for_TX_mode();
 8001e40:	f7ff fbd6 	bl	80015f0 <NRF24L01_RX_Mode_for_TX_mode>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40010800 	.word	0x40010800
 8001e50:	08008c1c 	.word	0x08008c1c

08001e54 <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f000 f889 	bl	8001f70 <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 8001e5e:	f000 f8a9 	bl	8001fb4 <ssd1306_UpdateScreen>
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af04      	add	r7, sp, #16
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001e72:	230a      	movs	r3, #10
 8001e74:	9302      	str	r3, [sp, #8]
 8001e76:	2301      	movs	r3, #1
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	2200      	movs	r2, #0
 8001e82:	2178      	movs	r1, #120	; 0x78
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <ssd1306_WriteCommand+0x2c>)
 8001e86:	f003 fc0b 	bl	80056a0 <HAL_I2C_Mem_Write>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200005f8 	.word	0x200005f8

08001e98 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8001e9c:	2064      	movs	r0, #100	; 0x64
 8001e9e:	f002 fe39 	bl	8004b14 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8001ea2:	20ae      	movs	r0, #174	; 0xae
 8001ea4:	f7ff ffe0 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001ea8:	2020      	movs	r0, #32
 8001eaa:	f7ff ffdd 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001eae:	2010      	movs	r0, #16
 8001eb0:	f7ff ffda 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001eb4:	20b0      	movs	r0, #176	; 0xb0
 8001eb6:	f7ff ffd7 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001eba:	20c8      	movs	r0, #200	; 0xc8
 8001ebc:	f7ff ffd4 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff ffd1 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001ec6:	2010      	movs	r0, #16
 8001ec8:	f7ff ffce 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001ecc:	2040      	movs	r0, #64	; 0x40
 8001ece:	f7ff ffcb 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001ed2:	2081      	movs	r0, #129	; 0x81
 8001ed4:	f7ff ffc8 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001ed8:	20ff      	movs	r0, #255	; 0xff
 8001eda:	f7ff ffc5 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001ede:	20a1      	movs	r0, #161	; 0xa1
 8001ee0:	f7ff ffc2 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001ee4:	20a6      	movs	r0, #166	; 0xa6
 8001ee6:	f7ff ffbf 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001eea:	20a8      	movs	r0, #168	; 0xa8
 8001eec:	f7ff ffbc 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001ef0:	203f      	movs	r0, #63	; 0x3f
 8001ef2:	f7ff ffb9 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ef6:	20a4      	movs	r0, #164	; 0xa4
 8001ef8:	f7ff ffb6 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001efc:	20d3      	movs	r0, #211	; 0xd3
 8001efe:	f7ff ffb3 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff ffb0 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f08:	20d5      	movs	r0, #213	; 0xd5
 8001f0a:	f7ff ffad 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001f0e:	20f0      	movs	r0, #240	; 0xf0
 8001f10:	f7ff ffaa 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001f14:	20d9      	movs	r0, #217	; 0xd9
 8001f16:	f7ff ffa7 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001f1a:	2022      	movs	r0, #34	; 0x22
 8001f1c:	f7ff ffa4 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001f20:	20da      	movs	r0, #218	; 0xda
 8001f22:	f7ff ffa1 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001f26:	2012      	movs	r0, #18
 8001f28:	f7ff ff9e 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001f2c:	20db      	movs	r0, #219	; 0xdb
 8001f2e:	f7ff ff9b 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001f32:	2020      	movs	r0, #32
 8001f34:	f7ff ff98 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f38:	208d      	movs	r0, #141	; 0x8d
 8001f3a:	f7ff ff95 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001f3e:	2014      	movs	r0, #20
 8001f40:	f7ff ff92 	bl	8001e68 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001f44:	20af      	movs	r0, #175	; 0xaf
 8001f46:	f7ff ff8f 	bl	8001e68 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f000 f810 	bl	8001f70 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001f50:	f000 f830 	bl	8001fb4 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <ssd1306_Init+0xd4>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <ssd1306_Init+0xd4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8001f60:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <ssd1306_Init+0xd4>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	715a      	strb	r2, [r3, #5]

	return 1;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000548 	.word	0x20000548

08001f70 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	e00d      	b.n	8001f9c <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <ssd1306_Fill+0x1a>
 8001f86:	2100      	movs	r1, #0
 8001f88:	e000      	b.n	8001f8c <ssd1306_Fill+0x1c>
 8001f8a:	21ff      	movs	r1, #255	; 0xff
 8001f8c:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <ssd1306_Fill+0x40>)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4413      	add	r3, r2
 8001f92:	460a      	mov	r2, r1
 8001f94:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa2:	d3ed      	bcc.n	8001f80 <ssd1306_Fill+0x10>
	}
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	20000148 	.word	0x20000148

08001fb4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8001fba:	2300      	movs	r3, #0
 8001fbc:	71fb      	strb	r3, [r7, #7]
 8001fbe:	e01d      	b.n	8001ffc <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	3b50      	subs	r3, #80	; 0x50
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff4e 	bl	8001e68 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff ff4b 	bl	8001e68 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001fd2:	2010      	movs	r0, #16
 8001fd4:	f7ff ff48 	bl	8001e68 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	01db      	lsls	r3, r3, #7
 8001fdc:	4a0b      	ldr	r2, [pc, #44]	; (800200c <ssd1306_UpdateScreen+0x58>)
 8001fde:	4413      	add	r3, r2
 8001fe0:	2264      	movs	r2, #100	; 0x64
 8001fe2:	9202      	str	r2, [sp, #8]
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	9201      	str	r2, [sp, #4]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	2240      	movs	r2, #64	; 0x40
 8001fee:	2178      	movs	r1, #120	; 0x78
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <ssd1306_UpdateScreen+0x5c>)
 8001ff2:	f003 fb55 	bl	80056a0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	71fb      	strb	r3, [r7, #7]
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	2b07      	cmp	r3, #7
 8002000:	d9de      	bls.n	8001fc0 <ssd1306_UpdateScreen+0xc>
	}
}
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000148 	.word	0x20000148
 8002010:	200005f8 	.word	0x200005f8

08002014 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	460b      	mov	r3, r1
 8002020:	71bb      	strb	r3, [r7, #6]
 8002022:	4613      	mov	r3, r2
 8002024:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db48      	blt.n	80020c0 <ssd1306_DrawPixel+0xac>
 800202e:	79bb      	ldrb	r3, [r7, #6]
 8002030:	2b3f      	cmp	r3, #63	; 0x3f
 8002032:	d845      	bhi.n	80020c0 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <ssd1306_DrawPixel+0xb8>)
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 800203c:	797b      	ldrb	r3, [r7, #5]
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf0c      	ite	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	2300      	movne	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 800204a:	797b      	ldrb	r3, [r7, #5]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d11a      	bne.n	8002086 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002050:	79fa      	ldrb	r2, [r7, #7]
 8002052:	79bb      	ldrb	r3, [r7, #6]
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	b2d8      	uxtb	r0, r3
 8002058:	4603      	mov	r3, r0
 800205a:	01db      	lsls	r3, r3, #7
 800205c:	4413      	add	r3, r2
 800205e:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <ssd1306_DrawPixel+0xbc>)
 8002060:	5cd3      	ldrb	r3, [r2, r3]
 8002062:	b25a      	sxtb	r2, r3
 8002064:	79bb      	ldrb	r3, [r7, #6]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	b25b      	sxtb	r3, r3
 8002072:	4313      	orrs	r3, r2
 8002074:	b259      	sxtb	r1, r3
 8002076:	79fa      	ldrb	r2, [r7, #7]
 8002078:	4603      	mov	r3, r0
 800207a:	01db      	lsls	r3, r3, #7
 800207c:	4413      	add	r3, r2
 800207e:	b2c9      	uxtb	r1, r1
 8002080:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <ssd1306_DrawPixel+0xbc>)
 8002082:	54d1      	strb	r1, [r2, r3]
 8002084:	e01d      	b.n	80020c2 <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002086:	79fa      	ldrb	r2, [r7, #7]
 8002088:	79bb      	ldrb	r3, [r7, #6]
 800208a:	08db      	lsrs	r3, r3, #3
 800208c:	b2d8      	uxtb	r0, r3
 800208e:	4603      	mov	r3, r0
 8002090:	01db      	lsls	r3, r3, #7
 8002092:	4413      	add	r3, r2
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <ssd1306_DrawPixel+0xbc>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	b25a      	sxtb	r2, r3
 800209a:	79bb      	ldrb	r3, [r7, #6]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	b25b      	sxtb	r3, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	4013      	ands	r3, r2
 80020ae:	b259      	sxtb	r1, r3
 80020b0:	79fa      	ldrb	r2, [r7, #7]
 80020b2:	4603      	mov	r3, r0
 80020b4:	01db      	lsls	r3, r3, #7
 80020b6:	4413      	add	r3, r2
 80020b8:	b2c9      	uxtb	r1, r1
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <ssd1306_DrawPixel+0xbc>)
 80020bc:	54d1      	strb	r1, [r2, r3]
 80020be:	e000      	b.n	80020c2 <ssd1306_DrawPixel+0xae>
		return;
 80020c0:	bf00      	nop
	}
}
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000548 	.word	0x20000548
 80020d0:	20000148 	.word	0x20000148

080020d4 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4604      	mov	r4, r0
 80020dc:	1d38      	adds	r0, r7, #4
 80020de:	e880 0006 	stmia.w	r0, {r1, r2}
 80020e2:	461a      	mov	r2, r3
 80020e4:	4623      	mov	r3, r4
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	4613      	mov	r3, r2
 80020ea:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80020ec:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <ssd1306_WriteChar+0xfc>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	793b      	ldrb	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	2b7f      	cmp	r3, #127	; 0x7f
 80020f8:	dc06      	bgt.n	8002108 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <ssd1306_WriteChar+0xfc>)
 80020fc:	885b      	ldrh	r3, [r3, #2]
 80020fe:	461a      	mov	r2, r3
 8002100:	797b      	ldrb	r3, [r7, #5]
 8002102:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002104:	2b3f      	cmp	r3, #63	; 0x3f
 8002106:	dd01      	ble.n	800210c <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8002108:	2300      	movs	r3, #0
 800210a:	e05d      	b.n	80021c8 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	e04c      	b.n	80021ac <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	3b20      	subs	r3, #32
 8002118:	7979      	ldrb	r1, [r7, #5]
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4619      	mov	r1, r3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	440b      	add	r3, r1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	e034      	b.n	800219c <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d012      	beq.n	8002168 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002142:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <ssd1306_WriteChar+0xfc>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4413      	add	r3, r2
 800214e:	b2d8      	uxtb	r0, r3
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <ssd1306_WriteChar+0xfc>)
 8002152:	885b      	ldrh	r3, [r3, #2]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4413      	add	r3, r2
 800215c:	b2db      	uxtb	r3, r3
 800215e:	7bba      	ldrb	r2, [r7, #14]
 8002160:	4619      	mov	r1, r3
 8002162:	f7ff ff57 	bl	8002014 <ssd1306_DrawPixel>
 8002166:	e016      	b.n	8002196 <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <ssd1306_WriteChar+0xfc>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4413      	add	r3, r2
 8002174:	b2d8      	uxtb	r0, r3
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <ssd1306_WriteChar+0xfc>)
 8002178:	885b      	ldrh	r3, [r3, #2]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	4413      	add	r3, r2
 8002182:	b2d9      	uxtb	r1, r3
 8002184:	7bbb      	ldrb	r3, [r7, #14]
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf0c      	ite	eq
 800218a:	2301      	moveq	r3, #1
 800218c:	2300      	movne	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	f7ff ff3f 	bl	8002014 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	3301      	adds	r3, #1
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	793b      	ldrb	r3, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d3c5      	bcc.n	8002132 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3301      	adds	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	797b      	ldrb	r3, [r7, #5]
 80021ae:	461a      	mov	r2, r3
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d3ad      	bcc.n	8002112 <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <ssd1306_WriteChar+0xfc>)
 80021b8:	881a      	ldrh	r2, [r3, #0]
 80021ba:	793b      	ldrb	r3, [r7, #4]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4413      	add	r3, r2
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <ssd1306_WriteChar+0xfc>)
 80021c4:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3724      	adds	r7, #36	; 0x24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd90      	pop	{r4, r7, pc}
 80021d0:	20000548 	.word	0x20000548

080021d4 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	1d38      	adds	r0, r7, #4
 80021de:	e880 0006 	stmia.w	r0, {r1, r2}
 80021e2:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80021e4:	e012      	b.n	800220c <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	7818      	ldrb	r0, [r3, #0]
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	1d3a      	adds	r2, r7, #4
 80021ee:	ca06      	ldmia	r2, {r1, r2}
 80021f0:	f7ff ff70 	bl	80020d4 <ssd1306_WriteChar>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d002      	beq.n	8002206 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	e008      	b.n	8002218 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3301      	adds	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
	while (*str)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1e8      	bne.n	80021e6 <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	781b      	ldrb	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	460a      	mov	r2, r1
 800222a:	71fb      	strb	r3, [r7, #7]
 800222c:	4613      	mov	r3, r2
 800222e:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	b29a      	uxth	r2, r3
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <ssd1306_SetCursor+0x2c>)
 8002236:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8002238:	79bb      	ldrb	r3, [r7, #6]
 800223a:	b29a      	uxth	r2, r3
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <ssd1306_SetCursor+0x2c>)
 800223e:	805a      	strh	r2, [r3, #2]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000548 	.word	0x20000548

08002250 <ssd1306_Line>:

void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	4604      	mov	r4, r0
 8002258:	4608      	mov	r0, r1
 800225a:	4611      	mov	r1, r2
 800225c:	461a      	mov	r2, r3
 800225e:	4623      	mov	r3, r4
 8002260:	71fb      	strb	r3, [r7, #7]
 8002262:	4603      	mov	r3, r0
 8002264:	71bb      	strb	r3, [r7, #6]
 8002266:	460b      	mov	r3, r1
 8002268:	717b      	strb	r3, [r7, #5]
 800226a:	4613      	mov	r3, r2
 800226c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800226e:	797a      	ldrb	r2, [r7, #5]
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	bfb8      	it	lt
 8002278:	425b      	neglt	r3, r3
 800227a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 800227c:	793a      	ldrb	r2, [r7, #4]
 800227e:	79bb      	ldrb	r3, [r7, #6]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	bfb8      	it	lt
 8002286:	425b      	neglt	r3, r3
 8002288:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800228a:	79fa      	ldrb	r2, [r7, #7]
 800228c:	797b      	ldrb	r3, [r7, #5]
 800228e:	429a      	cmp	r2, r3
 8002290:	d201      	bcs.n	8002296 <ssd1306_Line+0x46>
 8002292:	2301      	movs	r3, #1
 8002294:	e001      	b.n	800229a <ssd1306_Line+0x4a>
 8002296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800229a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 800229c:	79ba      	ldrb	r2, [r7, #6]
 800229e:	793b      	ldrb	r3, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d201      	bcs.n	80022a8 <ssd1306_Line+0x58>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e001      	b.n	80022ac <ssd1306_Line+0x5c>
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ac:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 80022b6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80022ba:	7939      	ldrb	r1, [r7, #4]
 80022bc:	797b      	ldrb	r3, [r7, #5]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fea8 	bl	8002014 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80022c4:	e024      	b.n	8002310 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80022c6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80022ca:	79b9      	ldrb	r1, [r7, #6]
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fea0 	bl	8002014 <ssd1306_DrawPixel>
    error2 = error * 2;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	425b      	negs	r3, r3
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	dd08      	ble.n	80022f6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	4413      	add	r3, r2
 80022f4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	da08      	bge.n	8002310 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	4413      	add	r3, r2
 8002304:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	79bb      	ldrb	r3, [r7, #6]
 800230c:	4413      	add	r3, r2
 800230e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	797b      	ldrb	r3, [r7, #5]
 8002314:	429a      	cmp	r2, r3
 8002316:	d1d6      	bne.n	80022c6 <ssd1306_Line+0x76>
 8002318:	79ba      	ldrb	r2, [r7, #6]
 800231a:	793b      	ldrb	r3, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	d1d2      	bne.n	80022c6 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8002320:	bf00      	nop
}
 8002322:	3724      	adds	r7, #36	; 0x24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd90      	pop	{r4, r7, pc}

08002328 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b085      	sub	sp, #20
 800232c:	af02      	add	r7, sp, #8
 800232e:	4604      	mov	r4, r0
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4623      	mov	r3, r4
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	4603      	mov	r3, r0
 800233c:	71bb      	strb	r3, [r7, #6]
 800233e:	460b      	mov	r3, r1
 8002340:	717b      	strb	r3, [r7, #5]
 8002342:	4613      	mov	r3, r2
 8002344:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8002346:	79bc      	ldrb	r4, [r7, #6]
 8002348:	797a      	ldrb	r2, [r7, #5]
 800234a:	79b9      	ldrb	r1, [r7, #6]
 800234c:	79f8      	ldrb	r0, [r7, #7]
 800234e:	7e3b      	ldrb	r3, [r7, #24]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	4623      	mov	r3, r4
 8002354:	f7ff ff7c 	bl	8002250 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8002358:	793c      	ldrb	r4, [r7, #4]
 800235a:	797a      	ldrb	r2, [r7, #5]
 800235c:	79b9      	ldrb	r1, [r7, #6]
 800235e:	7978      	ldrb	r0, [r7, #5]
 8002360:	7e3b      	ldrb	r3, [r7, #24]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	4623      	mov	r3, r4
 8002366:	f7ff ff73 	bl	8002250 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 800236a:	793c      	ldrb	r4, [r7, #4]
 800236c:	79fa      	ldrb	r2, [r7, #7]
 800236e:	7939      	ldrb	r1, [r7, #4]
 8002370:	7978      	ldrb	r0, [r7, #5]
 8002372:	7e3b      	ldrb	r3, [r7, #24]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	4623      	mov	r3, r4
 8002378:	f7ff ff6a 	bl	8002250 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 800237c:	79bc      	ldrb	r4, [r7, #6]
 800237e:	79fa      	ldrb	r2, [r7, #7]
 8002380:	7939      	ldrb	r1, [r7, #4]
 8002382:	79f8      	ldrb	r0, [r7, #7]
 8002384:	7e3b      	ldrb	r3, [r7, #24]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	4623      	mov	r3, r4
 800238a:	f7ff ff61 	bl	8002250 <ssd1306_Line>

  return;
 800238e:	bf00      	nop
}
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}

08002396 <ssd1306FillRect>:
void ssd1306FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
 8002396:	b590      	push	{r4, r7, lr}
 8002398:	b085      	sub	sp, #20
 800239a:	af00      	add	r7, sp, #0
 800239c:	4604      	mov	r4, r0
 800239e:	4608      	mov	r0, r1
 80023a0:	4611      	mov	r1, r2
 80023a2:	461a      	mov	r2, r3
 80023a4:	4623      	mov	r3, r4
 80023a6:	71fb      	strb	r3, [r7, #7]
 80023a8:	4603      	mov	r3, r0
 80023aa:	71bb      	strb	r3, [r7, #6]
 80023ac:	460b      	mov	r3, r1
 80023ae:	717b      	strb	r3, [r7, #5]
 80023b0:	4613      	mov	r3, r2
 80023b2:	713b      	strb	r3, [r7, #4]
    uint8_t x0, x1, y1;

    x0 = x;
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	73fb      	strb	r3, [r7, #15]
    x1 = x + w;
 80023b8:	79fa      	ldrb	r2, [r7, #7]
 80023ba:	797b      	ldrb	r3, [r7, #5]
 80023bc:	4413      	add	r3, r2
 80023be:	73bb      	strb	r3, [r7, #14]
    y1 = y + h;
 80023c0:	79ba      	ldrb	r2, [r7, #6]
 80023c2:	793b      	ldrb	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	737b      	strb	r3, [r7, #13]
    for(; y < y1; y++)
 80023c8:	e013      	b.n	80023f2 <ssd1306FillRect+0x5c>
        for(x = x0; x < x1; x++)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	71fb      	strb	r3, [r7, #7]
 80023ce:	e009      	b.n	80023e4 <ssd1306FillRect+0x4e>
        	ssd1306_DrawPixel(x, y, color);
 80023d0:	8c3b      	ldrh	r3, [r7, #32]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	79b9      	ldrb	r1, [r7, #6]
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fe1b 	bl	8002014 <ssd1306_DrawPixel>
        for(x = x0; x < x1; x++)
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	3301      	adds	r3, #1
 80023e2:	71fb      	strb	r3, [r7, #7]
 80023e4:	79fa      	ldrb	r2, [r7, #7]
 80023e6:	7bbb      	ldrb	r3, [r7, #14]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d3f1      	bcc.n	80023d0 <ssd1306FillRect+0x3a>
    for(; y < y1; y++)
 80023ec:	79bb      	ldrb	r3, [r7, #6]
 80023ee:	3301      	adds	r3, #1
 80023f0:	71bb      	strb	r3, [r7, #6]
 80023f2:	79ba      	ldrb	r2, [r7, #6]
 80023f4:	7b7b      	ldrb	r3, [r7, #13]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d3e7      	bcc.n	80023ca <ssd1306FillRect+0x34>
            //ssd1306DrawPixel( x, y, color, layer);
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}

08002404 <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <DelayMicro+0x3c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <DelayMicro+0x3c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <DelayMicro+0x40>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	0ddb      	lsrs	r3, r3, #23
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	fb02 f303 	mul.w	r3, r2, r3
 8002424:	607b      	str	r3, [r7, #4]
	while (micros--);
 8002426:	bf00      	nop
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	1e5a      	subs	r2, r3, #1
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1fa      	bne.n	8002428 <DelayMicro+0x24>
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	2000002c 	.word	0x2000002c
 8002444:	ffa71ee7 	.word	0xffa71ee7

08002448 <am2302_measure>:
{
	HAL_Delay(2000); 							// First init must be 2 seconds delay
}
//----------------------------------------------------------------------------------------
void am2302_measure(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 * __                ________________________
 * 	 \			    /				         \
 * 	  \____________/			              \_
 */

	bool get_data_status = false;
 800244e:	2300      	movs	r3, #0
 8002450:	76fb      	strb	r3, [r7, #27]
	int j = 0;   							// Counter bytes
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;								// Counter bits
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
	float temper, hum;						// Buffer variables

	// Init GPIO like output
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 800245e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002462:	4883      	ldr	r0, [pc, #524]	; (8002670 <am2302_measure+0x228>)
 8002464:	f002 febc 	bl	80051e0 <HAL_GPIO_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};		// Make struct
 8002468:	463b      	mov	r3, r7
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002478:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247a:	2301      	movs	r3, #1
 800247c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800247e:	2302      	movs	r3, #2
 8002480:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	463b      	mov	r3, r7
 8002484:	4619      	mov	r1, r3
 8002486:	487a      	ldr	r0, [pc, #488]	; (8002670 <am2302_measure+0x228>)
 8002488:	f002 fd26 	bl	8004ed8 <HAL_GPIO_Init>

	// Make output pin B12
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002492:	4877      	ldr	r0, [pc, #476]	; (8002670 <am2302_measure+0x228>)
 8002494:	f002 ff77 	bl	8005386 <HAL_GPIO_WritePin>
	DelayMicro(18000);
 8002498:	f244 6050 	movw	r0, #18000	; 0x4650
 800249c:	f7ff ffb2 	bl	8002404 <DelayMicro>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80024a0:	2201      	movs	r2, #1
 80024a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a6:	4872      	ldr	r0, [pc, #456]	; (8002670 <am2302_measure+0x228>)
 80024a8:	f002 ff6d 	bl	8005386 <HAL_GPIO_WritePin>
	DelayMicro(39);
 80024ac:	2027      	movs	r0, #39	; 0x27
 80024ae:	f7ff ffa9 	bl	8002404 <DelayMicro>

	// Make input pin B12
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 80024b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024b6:	486e      	ldr	r0, [pc, #440]	; (8002670 <am2302_measure+0x228>)
 80024b8:	f002 fe92 	bl	80051e0 <HAL_GPIO_DeInit>
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80024bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c6:	2301      	movs	r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ca:	463b      	mov	r3, r7
 80024cc:	4619      	mov	r1, r3
 80024ce:	4868      	ldr	r0, [pc, #416]	; (8002670 <am2302_measure+0x228>)
 80024d0:	f002 fd02 	bl	8004ed8 <HAL_GPIO_Init>

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
 80024d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024d8:	4865      	ldr	r0, [pc, #404]	; (8002670 <am2302_measure+0x228>)
 80024da:	f002 ff3d 	bl	8005358 <HAL_GPIO_ReadPin>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <am2302_measure+0xa6>
	{
		am3202_sensor.status = error_state; 					// Error. Sensor not response
 80024e4:	4b63      	ldr	r3, [pc, #396]	; (8002674 <am2302_measure+0x22c>)
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	4b63      	ldr	r3, [pc, #396]	; (8002678 <am2302_measure+0x230>)
 80024ea:	721a      	strb	r2, [r3, #8]
 80024ec:	e003      	b.n	80024f6 <am2302_measure+0xae>
	}
	else
	{
		am3202_sensor.status = ready_to_work;
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <am2302_measure+0x234>)
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	4b61      	ldr	r3, [pc, #388]	; (8002678 <am2302_measure+0x230>)
 80024f4:	721a      	strb	r2, [r3, #8]
	}

	DelayMicro(80);
 80024f6:	2050      	movs	r0, #80	; 0x50
 80024f8:	f7ff ff84 	bl	8002404 <DelayMicro>
	if(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)))
 80024fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002500:	485b      	ldr	r0, [pc, #364]	; (8002670 <am2302_measure+0x228>)
 8002502:	f002 ff29 	bl	8005358 <HAL_GPIO_ReadPin>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d104      	bne.n	8002516 <am2302_measure+0xce>
	{
		am3202_sensor.status = error_state; 					// Error. Sensor not response
 800250c:	4b59      	ldr	r3, [pc, #356]	; (8002674 <am2302_measure+0x22c>)
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <am2302_measure+0x230>)
 8002512:	721a      	strb	r2, [r3, #8]
 8002514:	e003      	b.n	800251e <am2302_measure+0xd6>
	}
	else
	{
		am3202_sensor.status = ready_to_work;
 8002516:	4b59      	ldr	r3, [pc, #356]	; (800267c <am2302_measure+0x234>)
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	4b57      	ldr	r3, [pc, #348]	; (8002678 <am2302_measure+0x230>)
 800251c:	721a      	strb	r2, [r3, #8]
	}

	DelayMicro(80);
 800251e:	2050      	movs	r0, #80	; 0x50
 8002520:	f7ff ff70 	bl	8002404 <DelayMicro>

	if(am3202_sensor.status == ready_to_work)
 8002524:	4b54      	ldr	r3, [pc, #336]	; (8002678 <am2302_measure+0x230>)
 8002526:	7a1a      	ldrb	r2, [r3, #8]
 8002528:	4b54      	ldr	r3, [pc, #336]	; (800267c <am2302_measure+0x234>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	f040 8096 	bne.w	800265e <am2302_measure+0x216>
	{
		for(j = 0; j <5; j++)							// Reading 5 bytes
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
 8002536:	e04f      	b.n	80025d8 <am2302_measure+0x190>
		{
			data[4-j] = 0;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	f1c3 0304 	rsb	r3, r3, #4
 800253e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002542:	4413      	add	r3, r2
 8002544:	2200      	movs	r2, #0
 8002546:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(i = 0; i < 8; i++)						// Reading 8 bits
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
 800254e:	e03a      	b.n	80025c6 <am2302_measure+0x17e>
			{

				while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)));    // While signal is "0"
 8002550:	bf00      	nop
 8002552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002556:	4846      	ldr	r0, [pc, #280]	; (8002670 <am2302_measure+0x228>)
 8002558:	f002 fefe 	bl	8005358 <HAL_GPIO_ReadPin>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f7      	beq.n	8002552 <am2302_measure+0x10a>
				DelayMicro(30);
 8002562:	201e      	movs	r0, #30
 8002564:	f7ff ff4e 	bl	8002404 <DelayMicro>

				if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))   // If signal is high when wrute "1" in buffer (data[])
 8002568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800256c:	4840      	ldr	r0, [pc, #256]	; (8002670 <am2302_measure+0x228>)
 800256e:	f002 fef3 	bl	8005358 <HAL_GPIO_ReadPin>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01a      	beq.n	80025ae <am2302_measure+0x166>
				{
					data[4-j] |= (1 << (7 - i));        // Shift received bite
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	f1c3 0304 	rsb	r3, r3, #4
 800257e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002582:	4413      	add	r3, r2
 8002584:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002588:	b25a      	sxtb	r2, r3
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	f1c3 0307 	rsb	r3, r3, #7
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	b25b      	sxtb	r3, r3
 8002598:	4313      	orrs	r3, r2
 800259a:	b25a      	sxtb	r2, r3
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	f1c3 0304 	rsb	r3, r3, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80025a8:	440b      	add	r3, r1
 80025aa:	f803 2c18 	strb.w	r2, [r3, #-24]
				}

				while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12));		// Wait end of "1" signal
 80025ae:	bf00      	nop
 80025b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025b4:	482e      	ldr	r0, [pc, #184]	; (8002670 <am2302_measure+0x228>)
 80025b6:	f002 fecf 	bl	8005358 <HAL_GPIO_ReadPin>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f7      	bne.n	80025b0 <am2302_measure+0x168>
			for(i = 0; i < 8; i++)						// Reading 8 bits
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	3301      	adds	r3, #1
 80025c4:	623b      	str	r3, [r7, #32]
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	2b07      	cmp	r3, #7
 80025ca:	ddc1      	ble.n	8002550 <am2302_measure+0x108>
			}
			am3202_sensor.status = true;										// Data was been written okay
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <am2302_measure+0x230>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	721a      	strb	r2, [r3, #8]
		for(j = 0; j <5; j++)							// Reading 5 bytes
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	3301      	adds	r3, #1
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	2b04      	cmp	r3, #4
 80025dc:	ddac      	ble.n	8002538 <am2302_measure+0xf0>
		}

		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 80025de:	f107 0310 	add.w	r3, r7, #16
 80025e2:	3301      	adds	r3, #1
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe f87c 	bl	80006e8 <__aeabi_i2f>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4923      	ldr	r1, [pc, #140]	; (8002680 <am2302_measure+0x238>)
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe f97f 	bl	80008f8 <__aeabi_fdiv>
 80025fa:	4603      	mov	r3, r0
 80025fc:	61fb      	str	r3, [r7, #28]
		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 80025fe:	f107 0310 	add.w	r3, r7, #16
 8002602:	3301      	adds	r3, #1
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b21b      	sxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	da0c      	bge.n	8002626 <am2302_measure+0x1de>
 800260c:	69f8      	ldr	r0, [r7, #28]
 800260e:	f7fd ff09 	bl	8000424 <__aeabi_f2d>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	f7fd ff5b 	bl	80004d4 <__aeabi_d2f>
 800261e:	4603      	mov	r3, r0
 8002620:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002624:	61fb      	str	r3, [r7, #28]
		am3202_sensor.temterature = temper;
 8002626:	69f8      	ldr	r0, [r7, #28]
 8002628:	f7fe fa02 	bl	8000a30 <__aeabi_f2iz>
 800262c:	4603      	mov	r3, r0
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <am2302_measure+0x230>)
 8002630:	6013      	str	r3, [r2, #0]

		hum = (float)(*(int16_t*)(data+3)) / 10;
 8002632:	f107 0310 	add.w	r3, r7, #16
 8002636:	3303      	adds	r3, #3
 8002638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe f853 	bl	80006e8 <__aeabi_i2f>
 8002642:	4603      	mov	r3, r0
 8002644:	490e      	ldr	r1, [pc, #56]	; (8002680 <am2302_measure+0x238>)
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe f956 	bl	80008f8 <__aeabi_fdiv>
 800264c:	4603      	mov	r3, r0
 800264e:	617b      	str	r3, [r7, #20]
		am3202_sensor.humidity = hum;
 8002650:	6978      	ldr	r0, [r7, #20]
 8002652:	f7fe f9ed 	bl	8000a30 <__aeabi_f2iz>
 8002656:	4603      	mov	r3, r0
 8002658:	4a07      	ldr	r2, [pc, #28]	; (8002678 <am2302_measure+0x230>)
 800265a:	6053      	str	r3, [r2, #4]
	else
	{
		am3202_sensor.status = error_state;
		// PRINT MESSAGE ON OLLED <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}
}
 800265c:	e003      	b.n	8002666 <am2302_measure+0x21e>
		am3202_sensor.status = error_state;
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <am2302_measure+0x22c>)
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <am2302_measure+0x230>)
 8002664:	721a      	strb	r2, [r3, #8]
}
 8002666:	bf00      	nop
 8002668:	3728      	adds	r7, #40	; 0x28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40010c00 	.word	0x40010c00
 8002674:	2000054e 	.word	0x2000054e
 8002678:	200005a8 	.word	0x200005a8
 800267c:	20000024 	.word	0x20000024
 8002680:	41200000 	.word	0x41200000

08002684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002688:	f002 f9e2 	bl	8004a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800268c:	f000 f828 	bl	80026e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002690:	f000 f9c0 	bl	8002a14 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002694:	f000 f86a 	bl	800276c <MX_I2C1_Init>
  MX_SPI1_Init();
 8002698:	f000 f896 	bl	80027c8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800269c:	f000 f966 	bl	800296c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80026a0:	f000 f8c8 	bl	8002834 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80026a4:	f000 f98c 	bl	80029c0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80026a8:	f000 f914 	bl	80028d4 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80026ac:	2201      	movs	r2, #1
 80026ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026b2:	480a      	ldr	r0, [pc, #40]	; (80026dc <main+0x58>)
 80026b4:	f002 fe67 	bl	8005386 <HAL_GPIO_WritePin>

  // Init interrupt (For LoRa)
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2100      	movs	r1, #0
 80026bc:	2025      	movs	r0, #37	; 0x25
 80026be:	f002 fb24 	bl	8004d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026c2:	2025      	movs	r0, #37	; 0x25
 80026c4:	f002 fb3d 	bl	8004d42 <HAL_NVIC_EnableIRQ>

//  HAL_TIM_Base_Start_IT(&htim2);	// For sensor measure

  // OLED init
  ssd1306_Init();
 80026c8:	f7ff fbe6 	bl	8001e98 <ssd1306_Init>
  ssd1306_Fill(Black);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7ff fc4f 	bl	8001f70 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80026d2:	f7ff fc6f 	bl	8001fb4 <ssd1306_UpdateScreen>

  while (1)
  {
	 menu();
 80026d6:	f001 f881 	bl	80037dc <menu>
 80026da:	e7fc      	b.n	80026d6 <main+0x52>
 80026dc:	40011000 	.word	0x40011000

080026e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b090      	sub	sp, #64	; 0x40
 80026e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026e6:	f107 0318 	add.w	r3, r7, #24
 80026ea:	2228      	movs	r2, #40	; 0x28
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f005 fd96 	bl	8008220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
 8002700:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002702:	2301      	movs	r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800270a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800270c:	2300      	movs	r3, #0
 800270e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002710:	2301      	movs	r3, #1
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002714:	2302      	movs	r3, #2
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800271e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002722:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002724:	f107 0318 	add.w	r3, r7, #24
 8002728:	4618      	mov	r0, r3
 800272a:	f003 facf 	bl	8005ccc <HAL_RCC_OscConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002734:	f000 fa96 	bl	8002c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002738:	230f      	movs	r3, #15
 800273a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800273c:	2302      	movs	r3, #2
 800273e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	2102      	movs	r1, #2
 8002752:	4618      	mov	r0, r3
 8002754:	f003 fd3a 	bl	80061cc <HAL_RCC_ClockConfig>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800275e:	f000 fa81 	bl	8002c64 <Error_Handler>
  }
}
 8002762:	bf00      	nop
 8002764:	3740      	adds	r7, #64	; 0x40
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <MX_I2C1_Init+0x50>)
 8002772:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <MX_I2C1_Init+0x54>)
 8002774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <MX_I2C1_Init+0x50>)
 8002778:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <MX_I2C1_Init+0x58>)
 800277a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <MX_I2C1_Init+0x50>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <MX_I2C1_Init+0x50>)
 8002784:	2200      	movs	r2, #0
 8002786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <MX_I2C1_Init+0x50>)
 800278a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800278e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <MX_I2C1_Init+0x50>)
 8002792:	2200      	movs	r2, #0
 8002794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <MX_I2C1_Init+0x50>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <MX_I2C1_Init+0x50>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <MX_I2C1_Init+0x50>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027a8:	4804      	ldr	r0, [pc, #16]	; (80027bc <MX_I2C1_Init+0x50>)
 80027aa:	f002 fe35 	bl	8005418 <HAL_I2C_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027b4:	f000 fa56 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200005f8 	.word	0x200005f8
 80027c0:	40005400 	.word	0x40005400
 80027c4:	00061a80 	.word	0x00061a80

080027c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027cc:	4b17      	ldr	r3, [pc, #92]	; (800282c <MX_SPI1_Init+0x64>)
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <MX_SPI1_Init+0x68>)
 80027d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <MX_SPI1_Init+0x64>)
 80027d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027da:	4b14      	ldr	r3, [pc, #80]	; (800282c <MX_SPI1_Init+0x64>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <MX_SPI1_Init+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <MX_SPI1_Init+0x64>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <MX_SPI1_Init+0x64>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <MX_SPI1_Init+0x64>)
 80027f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <MX_SPI1_Init+0x64>)
 80027fc:	2220      	movs	r2, #32
 80027fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <MX_SPI1_Init+0x64>)
 8002802:	2200      	movs	r2, #0
 8002804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <MX_SPI1_Init+0x64>)
 8002808:	2200      	movs	r2, #0
 800280a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <MX_SPI1_Init+0x64>)
 800280e:	2200      	movs	r2, #0
 8002810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <MX_SPI1_Init+0x64>)
 8002814:	220a      	movs	r2, #10
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002818:	4804      	ldr	r0, [pc, #16]	; (800282c <MX_SPI1_Init+0x64>)
 800281a:	f003 fe71 	bl	8006500 <HAL_SPI_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002824:	f000 fa1e 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200006d8 	.word	0x200006d8
 8002830:	40013000 	.word	0x40013000

08002834 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002848:	463b      	mov	r3, r7
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002850:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <MX_TIM1_Init+0x98>)
 8002852:	4a1f      	ldr	r2, [pc, #124]	; (80028d0 <MX_TIM1_Init+0x9c>)
 8002854:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <MX_TIM1_Init+0x98>)
 8002858:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800285c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <MX_TIM1_Init+0x98>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <MX_TIM1_Init+0x98>)
 8002866:	2264      	movs	r2, #100	; 0x64
 8002868:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <MX_TIM1_Init+0x98>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <MX_TIM1_Init+0x98>)
 8002872:	2200      	movs	r2, #0
 8002874:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <MX_TIM1_Init+0x98>)
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800287c:	4813      	ldr	r0, [pc, #76]	; (80028cc <MX_TIM1_Init+0x98>)
 800287e:	f004 fbab 	bl	8006fd8 <HAL_TIM_Base_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002888:	f000 f9ec 	bl	8002c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800288c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	4619      	mov	r1, r3
 8002898:	480c      	ldr	r0, [pc, #48]	; (80028cc <MX_TIM1_Init+0x98>)
 800289a:	f004 fd75 	bl	8007388 <HAL_TIM_ConfigClockSource>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80028a4:	f000 f9de 	bl	8002c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80028a8:	2310      	movs	r3, #16
 80028aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028b0:	463b      	mov	r3, r7
 80028b2:	4619      	mov	r1, r3
 80028b4:	4805      	ldr	r0, [pc, #20]	; (80028cc <MX_TIM1_Init+0x98>)
 80028b6:	f004 ff51 	bl	800775c <HAL_TIMEx_MasterConfigSynchronization>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80028c0:	f000 f9d0 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028c4:	bf00      	nop
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000690 	.word	0x20000690
 80028d0:	40012c00 	.word	0x40012c00

080028d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028da:	f107 0308 	add.w	r3, r7, #8
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e8:	463b      	mov	r3, r7
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <MX_TIM2_Init+0x94>)
 80028f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <MX_TIM2_Init+0x94>)
 80028fa:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80028fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <MX_TIM2_Init+0x94>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <MX_TIM2_Init+0x94>)
 8002908:	2264      	movs	r2, #100	; 0x64
 800290a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <MX_TIM2_Init+0x94>)
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <MX_TIM2_Init+0x94>)
 8002914:	2280      	movs	r2, #128	; 0x80
 8002916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002918:	4813      	ldr	r0, [pc, #76]	; (8002968 <MX_TIM2_Init+0x94>)
 800291a:	f004 fb5d 	bl	8006fd8 <HAL_TIM_Base_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002924:	f000 f99e 	bl	8002c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800292c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800292e:	f107 0308 	add.w	r3, r7, #8
 8002932:	4619      	mov	r1, r3
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <MX_TIM2_Init+0x94>)
 8002936:	f004 fd27 	bl	8007388 <HAL_TIM_ConfigClockSource>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002940:	f000 f990 	bl	8002c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002944:	2310      	movs	r3, #16
 8002946:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800294c:	463b      	mov	r3, r7
 800294e:	4619      	mov	r1, r3
 8002950:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_TIM2_Init+0x94>)
 8002952:	f004 ff03 	bl	800775c <HAL_TIMEx_MasterConfigSynchronization>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800295c:	f000 f982 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000730 	.word	0x20000730

0800296c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <MX_USART1_UART_Init+0x50>)
 8002974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 8002978:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800297c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 8002992:	220c      	movs	r2, #12
 8002994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_USART1_UART_Init+0x4c>)
 80029a4:	f004 ff4a 	bl	800783c <HAL_UART_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029ae:	f000 f959 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	2000064c 	.word	0x2000064c
 80029bc:	40013800 	.word	0x40013800

080029c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <MX_USART3_UART_Init+0x4c>)
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <MX_USART3_UART_Init+0x50>)
 80029c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <MX_USART3_UART_Init+0x4c>)
 80029cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <MX_USART3_UART_Init+0x4c>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <MX_USART3_UART_Init+0x4c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <MX_USART3_UART_Init+0x4c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <MX_USART3_UART_Init+0x4c>)
 80029e6:	220c      	movs	r2, #12
 80029e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <MX_USART3_UART_Init+0x4c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <MX_USART3_UART_Init+0x4c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029f6:	4805      	ldr	r0, [pc, #20]	; (8002a0c <MX_USART3_UART_Init+0x4c>)
 80029f8:	f004 ff20 	bl	800783c <HAL_UART_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a02:	f000 f92f 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200005b4 	.word	0x200005b4
 8002a10:	40004800 	.word	0x40004800

08002a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1a:	f107 0310 	add.w	r3, r7, #16
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a28:	4b5f      	ldr	r3, [pc, #380]	; (8002ba8 <MX_GPIO_Init+0x194>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a5e      	ldr	r2, [pc, #376]	; (8002ba8 <MX_GPIO_Init+0x194>)
 8002a2e:	f043 0310 	orr.w	r3, r3, #16
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <MX_GPIO_Init+0x194>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a40:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <MX_GPIO_Init+0x194>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	4a58      	ldr	r2, [pc, #352]	; (8002ba8 <MX_GPIO_Init+0x194>)
 8002a46:	f043 0320 	orr.w	r3, r3, #32
 8002a4a:	6193      	str	r3, [r2, #24]
 8002a4c:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <MX_GPIO_Init+0x194>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a58:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <MX_GPIO_Init+0x194>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	4a52      	ldr	r2, [pc, #328]	; (8002ba8 <MX_GPIO_Init+0x194>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	6193      	str	r3, [r2, #24]
 8002a64:	4b50      	ldr	r3, [pc, #320]	; (8002ba8 <MX_GPIO_Init+0x194>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a70:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <MX_GPIO_Init+0x194>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a4c      	ldr	r2, [pc, #304]	; (8002ba8 <MX_GPIO_Init+0x194>)
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <MX_GPIO_Init+0x194>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a8e:	4847      	ldr	r0, [pc, #284]	; (8002bac <MX_GPIO_Init+0x198>)
 8002a90:	f002 fc79 	bl	8005386 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2108      	movs	r1, #8
 8002a98:	4845      	ldr	r0, [pc, #276]	; (8002bb0 <MX_GPIO_Init+0x19c>)
 8002a9a:	f002 fc74 	bl	8005386 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	2110      	movs	r1, #16
 8002aa2:	4843      	ldr	r0, [pc, #268]	; (8002bb0 <MX_GPIO_Init+0x19c>)
 8002aa4:	f002 fc6f 	bl	8005386 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f242 0101 	movw	r1, #8193	; 0x2001
 8002aae:	4841      	ldr	r0, [pc, #260]	; (8002bb4 <MX_GPIO_Init+0x1a0>)
 8002ab0:	f002 fc69 	bl	8005386 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aba:	2301      	movs	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac6:	f107 0310 	add.w	r3, r7, #16
 8002aca:	4619      	mov	r1, r3
 8002acc:	4837      	ldr	r0, [pc, #220]	; (8002bac <MX_GPIO_Init+0x198>)
 8002ace:	f002 fa03 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ad6:	4b38      	ldr	r3, [pc, #224]	; (8002bb8 <MX_GPIO_Init+0x1a4>)
 8002ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ade:	f107 0310 	add.w	r3, r7, #16
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4832      	ldr	r0, [pc, #200]	; (8002bb0 <MX_GPIO_Init+0x19c>)
 8002ae6:	f002 f9f7 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002aea:	2318      	movs	r3, #24
 8002aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aee:	2301      	movs	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af6:	2303      	movs	r3, #3
 8002af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	4619      	mov	r1, r3
 8002b00:	482b      	ldr	r0, [pc, #172]	; (8002bb0 <MX_GPIO_Init+0x19c>)
 8002b02:	f002 f9e9 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8002b06:	f242 0301 	movw	r3, #8193	; 0x2001
 8002b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2302      	movs	r3, #2
 8002b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b18:	f107 0310 	add.w	r3, r7, #16
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4825      	ldr	r0, [pc, #148]	; (8002bb4 <MX_GPIO_Init+0x1a0>)
 8002b20:	f002 f9da 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8002b24:	2302      	movs	r3, #2
 8002b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8002b30:	f107 0310 	add.w	r3, r7, #16
 8002b34:	4619      	mov	r1, r3
 8002b36:	481f      	ldr	r0, [pc, #124]	; (8002bb4 <MX_GPIO_Init+0x1a0>)
 8002b38:	f002 f9ce 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002b3c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b42:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <MX_GPIO_Init+0x1a4>)
 8002b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4a:	f107 0310 	add.w	r3, r7, #16
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4818      	ldr	r0, [pc, #96]	; (8002bb4 <MX_GPIO_Init+0x1a0>)
 8002b52:	f002 f9c1 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b5c:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <MX_GPIO_Init+0x1a4>)
 8002b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b60:	2301      	movs	r3, #1
 8002b62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 0310 	add.w	r3, r7, #16
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4811      	ldr	r0, [pc, #68]	; (8002bb0 <MX_GPIO_Init+0x19c>)
 8002b6c:	f002 f9b4 	bl	8004ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	2008      	movs	r0, #8
 8002b76:	f002 f8c8 	bl	8004d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b7a:	2008      	movs	r0, #8
 8002b7c:	f002 f8e1 	bl	8004d42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b80:	2200      	movs	r2, #0
 8002b82:	2100      	movs	r1, #0
 8002b84:	2017      	movs	r0, #23
 8002b86:	f002 f8c0 	bl	8004d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b8a:	2017      	movs	r0, #23
 8002b8c:	f002 f8d9 	bl	8004d42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2100      	movs	r1, #0
 8002b94:	2028      	movs	r0, #40	; 0x28
 8002b96:	f002 f8b8 	bl	8004d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b9a:	2028      	movs	r0, #40	; 0x28
 8002b9c:	f002 f8d1 	bl	8004d42 <HAL_NVIC_EnableIRQ>

}
 8002ba0:	bf00      	nop
 8002ba2:	3720      	adds	r7, #32
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40011000 	.word	0x40011000
 8002bb0:	40010800 	.word	0x40010800
 8002bb4:	40010c00 	.word	0x40010c00
 8002bb8:	10210000 	.word	0x10210000

08002bbc <HAL_GPIO_EXTI_Callback>:
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);

}
//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2   (IRQ from NRF module)
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d108      	bne.n	8002bde <HAL_GPIO_EXTI_Callback+0x22>
  {
	  if(tx_or_rx_mode == rx_mode)
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_GPIO_EXTI_Callback+0x30>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d103      	bne.n	8002be0 <HAL_GPIO_EXTI_Callback+0x24>
	  {
		  IRQ_Callback();					// Call Callback
 8002bd8:	f7fe fcd0 	bl	800157c <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8002bdc:	e000      	b.n	8002be0 <HAL_GPIO_EXTI_Callback+0x24>
    __NOP();
 8002bde:	bf00      	nop
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000008 	.word	0x20000008
 8002bec:	20000102 	.word	0x20000102

08002bf0 <HAL_UART_RxCpltCallback>:
//----------------------------------------------------------------------------------------
// Receive data from LoRa module
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <HAL_UART_RxCpltCallback+0x60>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d123      	bne.n	8002c48 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\n') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_UART_RxCpltCallback+0x64>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b0a      	cmp	r3, #10
 8002c06:	d003      	beq.n	8002c10 <HAL_UART_RxCpltCallback+0x20>
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <HAL_UART_RxCpltCallback+0x68>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b31      	cmp	r3, #49	; 0x31
 8002c0e:	d906      	bls.n	8002c1e <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                           // Data is ready
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_UART_RxCpltCallback+0x6c>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_UART_RxCpltCallback+0x68>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8002c1c:	e014      	b.n	8002c48 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_UART_RxCpltCallback+0x6c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_UART_RxCpltCallback+0x68>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_UART_RxCpltCallback+0x64>)
 8002c2c:	7819      	ldrb	r1, [r3, #0]
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_UART_RxCpltCallback+0x70>)
 8002c30:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8002c32:	2201      	movs	r2, #1
 8002c34:	4907      	ldr	r1, [pc, #28]	; (8002c54 <HAL_UART_RxCpltCallback+0x64>)
 8002c36:	4806      	ldr	r0, [pc, #24]	; (8002c50 <HAL_UART_RxCpltCallback+0x60>)
 8002c38:	f004 fe91 	bl	800795e <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_UART_RxCpltCallback+0x68>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <HAL_UART_RxCpltCallback+0x68>)
 8002c46:	701a      	strb	r2, [r3, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	2000064c 	.word	0x2000064c
 8002c54:	20000584 	.word	0x20000584
 8002c58:	20000586 	.word	0x20000586
 8002c5c:	20000585 	.word	0x20000585
 8002c60:	20000550 	.word	0x20000550

08002c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c68:	b672      	cpsid	i
}
 8002c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <Error_Handler+0x8>
	...

08002c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_MspInit+0x5c>)
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <HAL_MspInit+0x5c>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6193      	str	r3, [r2, #24]
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_MspInit+0x5c>)
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <HAL_MspInit+0x5c>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4a0e      	ldr	r2, [pc, #56]	; (8002ccc <HAL_MspInit+0x5c>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	61d3      	str	r3, [r2, #28]
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_MspInit+0x5c>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <HAL_MspInit+0x60>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <HAL_MspInit+0x60>)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40010000 	.word	0x40010000

08002cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 0310 	add.w	r3, r7, #16
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <HAL_I2C_MspInit+0x70>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d123      	bne.n	8002d3c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <HAL_I2C_MspInit+0x74>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <HAL_I2C_MspInit+0x74>)
 8002cfa:	f043 0308 	orr.w	r3, r3, #8
 8002cfe:	6193      	str	r3, [r2, #24]
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_I2C_MspInit+0x74>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d0c:	23c0      	movs	r3, #192	; 0xc0
 8002d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d10:	2312      	movs	r3, #18
 8002d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d14:	2303      	movs	r3, #3
 8002d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d18:	f107 0310 	add.w	r3, r7, #16
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	480b      	ldr	r0, [pc, #44]	; (8002d4c <HAL_I2C_MspInit+0x78>)
 8002d20:	f002 f8da 	bl	8004ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_I2C_MspInit+0x74>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <HAL_I2C_MspInit+0x74>)
 8002d2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d2e:	61d3      	str	r3, [r2, #28]
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_I2C_MspInit+0x74>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d3c:	bf00      	nop
 8002d3e:	3720      	adds	r7, #32
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40005400 	.word	0x40005400
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40010c00 	.word	0x40010c00

08002d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	f107 0310 	add.w	r3, r7, #16
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <HAL_SPI_MspInit+0x88>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d12f      	bne.n	8002dd0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_SPI_MspInit+0x8c>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <HAL_SPI_MspInit+0x8c>)
 8002d76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d7a:	6193      	str	r3, [r2, #24]
 8002d7c:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <HAL_SPI_MspInit+0x8c>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d88:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <HAL_SPI_MspInit+0x8c>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	4a13      	ldr	r2, [pc, #76]	; (8002ddc <HAL_SPI_MspInit+0x8c>)
 8002d8e:	f043 0304 	orr.w	r3, r3, #4
 8002d92:	6193      	str	r3, [r2, #24]
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_SPI_MspInit+0x8c>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002da0:	23a0      	movs	r3, #160	; 0xa0
 8002da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dac:	f107 0310 	add.w	r3, r7, #16
 8002db0:	4619      	mov	r1, r3
 8002db2:	480b      	ldr	r0, [pc, #44]	; (8002de0 <HAL_SPI_MspInit+0x90>)
 8002db4:	f002 f890 	bl	8004ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002db8:	2340      	movs	r3, #64	; 0x40
 8002dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 0310 	add.w	r3, r7, #16
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4805      	ldr	r0, [pc, #20]	; (8002de0 <HAL_SPI_MspInit+0x90>)
 8002dcc:	f002 f884 	bl	8004ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002dd0:	bf00      	nop
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40013000 	.word	0x40013000
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40010800 	.word	0x40010800

08002de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <HAL_TIM_Base_MspInit+0x78>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d114      	bne.n	8002e20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <HAL_TIM_Base_MspInit+0x7c>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <HAL_TIM_Base_MspInit+0x7c>)
 8002dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e00:	6193      	str	r3, [r2, #24]
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_TIM_Base_MspInit+0x7c>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2100      	movs	r1, #0
 8002e12:	2019      	movs	r0, #25
 8002e14:	f001 ff79 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002e18:	2019      	movs	r0, #25
 8002e1a:	f001 ff92 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e1e:	e018      	b.n	8002e52 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e28:	d113      	bne.n	8002e52 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <HAL_TIM_Base_MspInit+0x7c>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <HAL_TIM_Base_MspInit+0x7c>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	61d3      	str	r3, [r2, #28]
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_TIM_Base_MspInit+0x7c>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2100      	movs	r1, #0
 8002e46:	201c      	movs	r0, #28
 8002e48:	f001 ff5f 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e4c:	201c      	movs	r0, #28
 8002e4e:	f001 ff78 	bl	8004d42 <HAL_NVIC_EnableIRQ>
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40012c00 	.word	0x40012c00
 8002e60:	40021000 	.word	0x40021000

08002e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6c:	f107 0318 	add.w	r3, r7, #24
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a3c      	ldr	r2, [pc, #240]	; (8002f70 <HAL_UART_MspInit+0x10c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d13a      	bne.n	8002efa <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e84:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <HAL_UART_MspInit+0x110>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	4a3a      	ldr	r2, [pc, #232]	; (8002f74 <HAL_UART_MspInit+0x110>)
 8002e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e8e:	6193      	str	r3, [r2, #24]
 8002e90:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <HAL_UART_MspInit+0x110>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9c:	4b35      	ldr	r3, [pc, #212]	; (8002f74 <HAL_UART_MspInit+0x110>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4a34      	ldr	r2, [pc, #208]	; (8002f74 <HAL_UART_MspInit+0x110>)
 8002ea2:	f043 0304 	orr.w	r3, r3, #4
 8002ea6:	6193      	str	r3, [r2, #24]
 8002ea8:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <HAL_UART_MspInit+0x110>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec2:	f107 0318 	add.w	r3, r7, #24
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	482b      	ldr	r0, [pc, #172]	; (8002f78 <HAL_UART_MspInit+0x114>)
 8002eca:	f002 f805 	bl	8004ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002edc:	f107 0318 	add.w	r3, r7, #24
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4825      	ldr	r0, [pc, #148]	; (8002f78 <HAL_UART_MspInit+0x114>)
 8002ee4:	f001 fff8 	bl	8004ed8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2101      	movs	r1, #1
 8002eec:	2025      	movs	r0, #37	; 0x25
 8002eee:	f001 ff0c 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ef2:	2025      	movs	r0, #37	; 0x25
 8002ef4:	f001 ff25 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ef8:	e036      	b.n	8002f68 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1f      	ldr	r2, [pc, #124]	; (8002f7c <HAL_UART_MspInit+0x118>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d131      	bne.n	8002f68 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f04:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_UART_MspInit+0x110>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <HAL_UART_MspInit+0x110>)
 8002f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0e:	61d3      	str	r3, [r2, #28]
 8002f10:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <HAL_UART_MspInit+0x110>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1c:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <HAL_UART_MspInit+0x110>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <HAL_UART_MspInit+0x110>)
 8002f22:	f043 0308 	orr.w	r3, r3, #8
 8002f26:	6193      	str	r3, [r2, #24]
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_UART_MspInit+0x110>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f42:	f107 0318 	add.w	r3, r7, #24
 8002f46:	4619      	mov	r1, r3
 8002f48:	480d      	ldr	r0, [pc, #52]	; (8002f80 <HAL_UART_MspInit+0x11c>)
 8002f4a:	f001 ffc5 	bl	8004ed8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5c:	f107 0318 	add.w	r3, r7, #24
 8002f60:	4619      	mov	r1, r3
 8002f62:	4807      	ldr	r0, [pc, #28]	; (8002f80 <HAL_UART_MspInit+0x11c>)
 8002f64:	f001 ffb8 	bl	8004ed8 <HAL_GPIO_Init>
}
 8002f68:	bf00      	nop
 8002f6a:	3728      	adds	r7, #40	; 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40013800 	.word	0x40013800
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40010800 	.word	0x40010800
 8002f7c:	40004800 	.word	0x40004800
 8002f80:	40010c00 	.word	0x40010c00

08002f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <NMI_Handler+0x4>

08002f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f8e:	e7fe      	b.n	8002f8e <HardFault_Handler+0x4>

08002f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f94:	e7fe      	b.n	8002f94 <MemManage_Handler+0x4>

08002f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f9a:	e7fe      	b.n	8002f9a <BusFault_Handler+0x4>

08002f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa0:	e7fe      	b.n	8002fa0 <UsageFault_Handler+0x4>

08002fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fca:	f001 fd87 	bl	8004adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002fd6:	2004      	movs	r0, #4
 8002fd8:	f002 fa06 	bl	80053e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <EXTI9_5_IRQHandler+0x44>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	f083 0301 	eor.w	r3, r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d012      	beq.n	8003018 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <EXTI9_5_IRQHandler+0x48>)
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <EXTI9_5_IRQHandler+0x4c>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <EXTI9_5_IRQHandler+0x50>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d105      	bne.n	8003018 <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 800300c:	4809      	ldr	r0, [pc, #36]	; (8003034 <EXTI9_5_IRQHandler+0x54>)
 800300e:	f004 f833 	bl	8007078 <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 8003012:	4b07      	ldr	r3, [pc, #28]	; (8003030 <EXTI9_5_IRQHandler+0x50>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003018:	f44f 7080 	mov.w	r0, #256	; 0x100
 800301c:	f002 f9e4 	bl	80053e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}
 8003024:	2000059c 	.word	0x2000059c
 8003028:	40010400 	.word	0x40010400
 800302c:	20000025 	.word	0x20000025
 8003030:	20000028 	.word	0x20000028
 8003034:	20000690 	.word	0x20000690

08003038 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 800303c:	4b37      	ldr	r3, [pc, #220]	; (800311c <TIM1_UP_IRQHandler+0xe4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d165      	bne.n	8003110 <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 8003044:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003048:	4835      	ldr	r0, [pc, #212]	; (8003120 <TIM1_UP_IRQHandler+0xe8>)
 800304a:	f002 f985 	bl	8005358 <HAL_GPIO_ReadPin>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d118      	bne.n	8003086 <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 8003054:	4b33      	ldr	r3, [pc, #204]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	4a32      	ldr	r2, [pc, #200]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 800305c:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 800305e:	4b32      	ldr	r3, [pc, #200]	; (8003128 <TIM1_UP_IRQHandler+0xf0>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	dc51      	bgt.n	8003110 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 800306c:	4b2b      	ldr	r3, [pc, #172]	; (800311c <TIM1_UP_IRQHandler+0xe4>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8003072:	482e      	ldr	r0, [pc, #184]	; (800312c <TIM1_UP_IRQHandler+0xf4>)
 8003074:	f004 f852 	bl	800711c <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <TIM1_UP_IRQHandler+0xf8>)
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 800307e:	4b29      	ldr	r3, [pc, #164]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e044      	b.n	8003110 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 8003086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800308a:	482a      	ldr	r0, [pc, #168]	; (8003134 <TIM1_UP_IRQHandler+0xfc>)
 800308c:	f002 f964 	bl	8005358 <HAL_GPIO_ReadPin>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d118      	bne.n	80030c8 <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3301      	adds	r3, #1
 800309c:	4a21      	ldr	r2, [pc, #132]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 800309e:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <TIM1_UP_IRQHandler+0xf0>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	dc30      	bgt.n	8003110 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 80030ae:	4b1b      	ldr	r3, [pc, #108]	; (800311c <TIM1_UP_IRQHandler+0xe4>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80030b4:	481d      	ldr	r0, [pc, #116]	; (800312c <TIM1_UP_IRQHandler+0xf4>)
 80030b6:	f004 f831 	bl	800711c <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 80030ba:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <TIM1_UP_IRQHandler+0xf8>)
 80030bc:	2203      	movs	r2, #3
 80030be:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80030c0:	4b18      	ldr	r3, [pc, #96]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	e023      	b.n	8003110 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 80030c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030cc:	4814      	ldr	r0, [pc, #80]	; (8003120 <TIM1_UP_IRQHandler+0xe8>)
 80030ce:	f002 f943 	bl	8005358 <HAL_GPIO_ReadPin>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d118      	bne.n	800310a <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80030d8:	4b12      	ldr	r3, [pc, #72]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	4a11      	ldr	r2, [pc, #68]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 80030e0:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <TIM1_UP_IRQHandler+0xf0>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	dc0f      	bgt.n	8003110 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <TIM1_UP_IRQHandler+0xe4>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 80030f6:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <TIM1_UP_IRQHandler+0xf8>)
 80030f8:	2202      	movs	r2, #2
 80030fa:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8003102:	480a      	ldr	r0, [pc, #40]	; (800312c <TIM1_UP_IRQHandler+0xf4>)
 8003104:	f004 f80a 	bl	800711c <HAL_TIM_Base_Stop_IT>
 8003108:	e002      	b.n	8003110 <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <TIM1_UP_IRQHandler+0xec>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003110:	4806      	ldr	r0, [pc, #24]	; (800312c <TIM1_UP_IRQHandler+0xf4>)
 8003112:	f004 f831 	bl	8007178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000028 	.word	0x20000028
 8003120:	40010c00 	.word	0x40010c00
 8003124:	20000588 	.word	0x20000588
 8003128:	20000026 	.word	0x20000026
 800312c:	20000690 	.word	0x20000690
 8003130:	2000059d 	.word	0x2000059d
 8003134:	40010800 	.word	0x40010800

08003138 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	static int i = 0;
	if(i == 200)								// Do it every 2 seconds
 800313c:	4b13      	ldr	r3, [pc, #76]	; (800318c <TIM2_IRQHandler+0x54>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2bc8      	cmp	r3, #200	; 0xc8
 8003142:	d118      	bne.n	8003176 <TIM2_IRQHandler+0x3e>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003144:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003148:	4811      	ldr	r0, [pc, #68]	; (8003190 <TIM2_IRQHandler+0x58>)
 800314a:	f002 f934 	bl	80053b6 <HAL_GPIO_TogglePin>
		am2302_measure();
 800314e:	f7ff f97b 	bl	8002448 <am2302_measure>
		i = 0;
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <TIM2_IRQHandler+0x54>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
		am2302_ready = !am2302_ready;
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <TIM2_IRQHandler+0x5c>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f083 0301 	eor.w	r3, r3, #1
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <TIM2_IRQHandler+0x5c>)
 8003174:	701a      	strb	r2, [r3, #0]
	}
	i++;
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <TIM2_IRQHandler+0x54>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3301      	adds	r3, #1
 800317c:	4a03      	ldr	r2, [pc, #12]	; (800318c <TIM2_IRQHandler+0x54>)
 800317e:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003180:	4805      	ldr	r0, [pc, #20]	; (8003198 <TIM2_IRQHandler+0x60>)
 8003182:	f003 fff9 	bl	8007178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000590 	.word	0x20000590
 8003190:	40011000 	.word	0x40011000
 8003194:	2000058c 	.word	0x2000058c
 8003198:	20000730 	.word	0x20000730

0800319c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <USART1_IRQHandler+0x10>)
 80031a2:	f004 fc0d 	bl	80079c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	2000064c 	.word	0x2000064c

080031b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <EXTI15_10_IRQHandler+0x74>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	f083 0301 	eor.w	r3, r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d012      	beq.n	80031e8 <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 80031c2:	4b19      	ldr	r3, [pc, #100]	; (8003228 <EXTI15_10_IRQHandler+0x78>)
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00c      	beq.n	80031e8 <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <EXTI15_10_IRQHandler+0x7c>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b16      	ldr	r3, [pc, #88]	; (8003230 <EXTI15_10_IRQHandler+0x80>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d105      	bne.n	80031e8 <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 80031dc:	4815      	ldr	r0, [pc, #84]	; (8003234 <EXTI15_10_IRQHandler+0x84>)
 80031de:	f003 ff4b 	bl	8007078 <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 80031e2:	4b13      	ldr	r3, [pc, #76]	; (8003230 <EXTI15_10_IRQHandler+0x80>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <EXTI15_10_IRQHandler+0x78>)
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00c      	beq.n	800320e <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <EXTI15_10_IRQHandler+0x7c>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <EXTI15_10_IRQHandler+0x80>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d105      	bne.n	800320e <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8003202:	480c      	ldr	r0, [pc, #48]	; (8003234 <EXTI15_10_IRQHandler+0x84>)
 8003204:	f003 ff38 	bl	8007078 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <EXTI15_10_IRQHandler+0x80>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800320e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003212:	f002 f8e9 	bl	80053e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003216:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800321a:	f002 f8e5 	bl	80053e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	2000059c 	.word	0x2000059c
 8003228:	40010400 	.word	0x40010400
 800322c:	20000025 	.word	0x20000025
 8003230:	20000028 	.word	0x20000028
 8003234:	20000690 	.word	0x20000690

08003238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003240:	4a14      	ldr	r2, [pc, #80]	; (8003294 <_sbrk+0x5c>)
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <_sbrk+0x60>)
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <_sbrk+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <_sbrk+0x64>)
 8003256:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <_sbrk+0x68>)
 8003258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <_sbrk+0x64>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	429a      	cmp	r2, r3
 8003266:	d207      	bcs.n	8003278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003268:	f004 ff88 	bl	800817c <__errno>
 800326c:	4603      	mov	r3, r0
 800326e:	220c      	movs	r2, #12
 8003270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003276:	e009      	b.n	800328c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <_sbrk+0x64>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <_sbrk+0x64>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	4a05      	ldr	r2, [pc, #20]	; (800329c <_sbrk+0x64>)
 8003288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20005000 	.word	0x20005000
 8003298:	00000400 	.word	0x00000400
 800329c:	20000594 	.word	0x20000594
 80032a0:	20000a38 	.word	0x20000a38

080032a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <Menu_Init>:
void periodic_measurement_am2302_on(void);		// On Measure T and H using TIMER2 (Use it for TX data by NRF or LoRa)
void periodic_measurement_am2302_off(void);		// OFF Measure T and H using TIMER2

// ----------------------------------------------------------------------------------------
void Menu_Init (void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b08d      	sub	sp, #52	; 0x34
 80032b4:	af00      	add	r7, sp, #0
	// Make pointers on funsctions
	// Main functions
	void (*p_print_rows_on_oled_if_up) (void);
	p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
 80032b6:	4b89      	ldr	r3, [pc, #548]	; (80034dc <Menu_Init+0x22c>)
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	void (*p_print_rows_on_oled_if_down) (void);					// Create pointer on function
	p_print_rows_on_oled_if_down = print_rows_on_oled_if_down;		// Save function print on pointer print_p
 80032ba:	4b89      	ldr	r3, [pc, #548]	; (80034e0 <Menu_Init+0x230>)
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
	void (*p_return_from_menu)(void);
	p_return_from_menu = return_from_menu;
 80032be:	4b89      	ldr	r3, [pc, #548]	; (80034e4 <Menu_Init+0x234>)
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
	// ------------------------------------------------------

	// LoRa  menu functions
	void (*p_lora_rx_mode) (void);						// Function "Do it". Works when select it
	p_lora_rx_mode = lora_rx_mode;
 80032c2:	4b89      	ldr	r3, [pc, #548]	; (80034e8 <Menu_Init+0x238>)
 80032c4:	623b      	str	r3, [r7, #32]
	void (*p_lora_tx_mode) (void);						// Function "Do it". Works when select it
	p_lora_tx_mode = lora_tx_mode;
 80032c6:	4b89      	ldr	r3, [pc, #548]	; (80034ec <Menu_Init+0x23c>)
 80032c8:	61fb      	str	r3, [r7, #28]
	void (*p_lora_tx_mode_send_T_and_H) (void);
	p_lora_tx_mode_send_T_and_H = lora_tx_mode_send_T_and_H;
 80032ca:	4b89      	ldr	r3, [pc, #548]	; (80034f0 <Menu_Init+0x240>)
 80032cc:	61bb      	str	r3, [r7, #24]


	// ------------------------------------------------------
	// NRF menu functions
	void (*p_nrf_tx_mode_send_test_number) (void);						// Function "Do it". Works when select it
	p_nrf_tx_mode_send_test_number = nrf_tx_mode_send_test_number;
 80032ce:	4b89      	ldr	r3, [pc, #548]	; (80034f4 <Menu_Init+0x244>)
 80032d0:	617b      	str	r3, [r7, #20]
	void (*p_nrf_rx_mode) (void);						// Function "Do it". Works when select it
	p_nrf_rx_mode = nrf_rx_mode;
 80032d2:	4b89      	ldr	r3, [pc, #548]	; (80034f8 <Menu_Init+0x248>)
 80032d4:	613b      	str	r3, [r7, #16]

	// ------------------------------------------------------
	// NRF menu functions
	void (*p_am2302_measure) (void);
	p_am2302_measure = am2302;
 80032d6:	4b89      	ldr	r3, [pc, #548]	; (80034fc <Menu_Init+0x24c>)
 80032d8:	60fb      	str	r3, [r7, #12]
	// ------------------------------------------------------
	void (*p_periodic_measurement_am2302_on) (void);
	p_periodic_measurement_am2302_on = periodic_measurement_am2302_on;
 80032da:	4b89      	ldr	r3, [pc, #548]	; (8003500 <Menu_Init+0x250>)
 80032dc:	60bb      	str	r3, [r7, #8]
	// ------------------------------------------------------
	void (*p_periodic_measurement_am2302_off) (void);
	p_periodic_measurement_am2302_off = periodic_measurement_am2302_off;
 80032de:	4b89      	ldr	r3, [pc, #548]	; (8003504 <Menu_Init+0x254>)
 80032e0:	607b      	str	r3, [r7, #4]


	// Fill in elements(nodes) of list (7 items)
	// Main menu items
	/////////////////////////////////////////////////////////////////
	items[0].up = 0;
 80032e2:	4b89      	ldr	r3, [pc, #548]	; (8003508 <Menu_Init+0x258>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
	items[0].down = &items[1];
 80032e8:	4b87      	ldr	r3, [pc, #540]	; (8003508 <Menu_Init+0x258>)
 80032ea:	4a88      	ldr	r2, [pc, #544]	; (800350c <Menu_Init+0x25c>)
 80032ec:	605a      	str	r2, [r3, #4]
	items[0].child = &items_menu_1[0];
 80032ee:	4b86      	ldr	r3, [pc, #536]	; (8003508 <Menu_Init+0x258>)
 80032f0:	4a87      	ldr	r2, [pc, #540]	; (8003510 <Menu_Init+0x260>)
 80032f2:	609a      	str	r2, [r3, #8]
	items[0].parent = 0;
 80032f4:	4b84      	ldr	r3, [pc, #528]	; (8003508 <Menu_Init+0x258>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
	items[0].id = 1;
 80032fa:	4b83      	ldr	r3, [pc, #524]	; (8003508 <Menu_Init+0x258>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	741a      	strb	r2, [r3, #16]
	items[0].name = "LoRa E220";
 8003300:	4b81      	ldr	r3, [pc, #516]	; (8003508 <Menu_Init+0x258>)
 8003302:	4a84      	ldr	r2, [pc, #528]	; (8003514 <Menu_Init+0x264>)
 8003304:	615a      	str	r2, [r3, #20]
	items[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8003306:	4a80      	ldr	r2, [pc, #512]	; (8003508 <Menu_Init+0x258>)
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	6193      	str	r3, [r2, #24]
	items[0].updateScreen_down = p_print_rows_on_oled_if_down;
 800330c:	4a7e      	ldr	r2, [pc, #504]	; (8003508 <Menu_Init+0x258>)
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	61d3      	str	r3, [r2, #28]
	items[0].makeAction = 0;
 8003312:	4b7d      	ldr	r3, [pc, #500]	; (8003508 <Menu_Init+0x258>)
 8003314:	2200      	movs	r2, #0
 8003316:	621a      	str	r2, [r3, #32]

	items[1].up = &items[0];
 8003318:	4b7b      	ldr	r3, [pc, #492]	; (8003508 <Menu_Init+0x258>)
 800331a:	4a7b      	ldr	r2, [pc, #492]	; (8003508 <Menu_Init+0x258>)
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
	items[1].down = &items[2];
 800331e:	4b7a      	ldr	r3, [pc, #488]	; (8003508 <Menu_Init+0x258>)
 8003320:	4a7d      	ldr	r2, [pc, #500]	; (8003518 <Menu_Init+0x268>)
 8003322:	629a      	str	r2, [r3, #40]	; 0x28
	items[1].child = &items_menu_2[0];
 8003324:	4b78      	ldr	r3, [pc, #480]	; (8003508 <Menu_Init+0x258>)
 8003326:	4a7d      	ldr	r2, [pc, #500]	; (800351c <Menu_Init+0x26c>)
 8003328:	62da      	str	r2, [r3, #44]	; 0x2c
	items[1].parent = 0;
 800332a:	4b77      	ldr	r3, [pc, #476]	; (8003508 <Menu_Init+0x258>)
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
	items[1].id = 2;
 8003330:	4b75      	ldr	r3, [pc, #468]	; (8003508 <Menu_Init+0x258>)
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items[1].name = "NRF24L01";
 8003338:	4b73      	ldr	r3, [pc, #460]	; (8003508 <Menu_Init+0x258>)
 800333a:	4a79      	ldr	r2, [pc, #484]	; (8003520 <Menu_Init+0x270>)
 800333c:	639a      	str	r2, [r3, #56]	; 0x38
	items[1].updateScreen_up = p_print_rows_on_oled_if_up;
 800333e:	4a72      	ldr	r2, [pc, #456]	; (8003508 <Menu_Init+0x258>)
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	63d3      	str	r3, [r2, #60]	; 0x3c
	items[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8003344:	4a70      	ldr	r2, [pc, #448]	; (8003508 <Menu_Init+0x258>)
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
	items[1].makeAction = 0;
 800334a:	4b6f      	ldr	r3, [pc, #444]	; (8003508 <Menu_Init+0x258>)
 800334c:	2200      	movs	r2, #0
 800334e:	645a      	str	r2, [r3, #68]	; 0x44

	items[2].up = &items[1];
 8003350:	4b6d      	ldr	r3, [pc, #436]	; (8003508 <Menu_Init+0x258>)
 8003352:	4a6e      	ldr	r2, [pc, #440]	; (800350c <Menu_Init+0x25c>)
 8003354:	649a      	str	r2, [r3, #72]	; 0x48
	items[2].down = 0;
 8003356:	4b6c      	ldr	r3, [pc, #432]	; (8003508 <Menu_Init+0x258>)
 8003358:	2200      	movs	r2, #0
 800335a:	64da      	str	r2, [r3, #76]	; 0x4c
	items[2].child = &items_menu_3[0];
 800335c:	4b6a      	ldr	r3, [pc, #424]	; (8003508 <Menu_Init+0x258>)
 800335e:	4a71      	ldr	r2, [pc, #452]	; (8003524 <Menu_Init+0x274>)
 8003360:	651a      	str	r2, [r3, #80]	; 0x50
	items[2].parent = 0;
 8003362:	4b69      	ldr	r3, [pc, #420]	; (8003508 <Menu_Init+0x258>)
 8003364:	2200      	movs	r2, #0
 8003366:	655a      	str	r2, [r3, #84]	; 0x54
	items[2].id = 3;
 8003368:	4b67      	ldr	r3, [pc, #412]	; (8003508 <Menu_Init+0x258>)
 800336a:	2203      	movs	r2, #3
 800336c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items[2].name = "AM2302 sensor";
 8003370:	4b65      	ldr	r3, [pc, #404]	; (8003508 <Menu_Init+0x258>)
 8003372:	4a6d      	ldr	r2, [pc, #436]	; (8003528 <Menu_Init+0x278>)
 8003374:	65da      	str	r2, [r3, #92]	; 0x5c
	items[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8003376:	4a64      	ldr	r2, [pc, #400]	; (8003508 <Menu_Init+0x258>)
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	6613      	str	r3, [r2, #96]	; 0x60
	items[2].updateScreen_down = p_print_rows_on_oled_if_down;
 800337c:	4a62      	ldr	r2, [pc, #392]	; (8003508 <Menu_Init+0x258>)
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	6653      	str	r3, [r2, #100]	; 0x64
	items[2].makeAction = 0;
 8003382:	4b61      	ldr	r3, [pc, #388]	; (8003508 <Menu_Init+0x258>)
 8003384:	2200      	movs	r2, #0
 8003386:	669a      	str	r2, [r3, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating LoRa menu
	items_menu_1[0].up = 0;
 8003388:	4b61      	ldr	r3, [pc, #388]	; (8003510 <Menu_Init+0x260>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
	items_menu_1[0].down = &items_menu_1[1];
 800338e:	4b60      	ldr	r3, [pc, #384]	; (8003510 <Menu_Init+0x260>)
 8003390:	4a66      	ldr	r2, [pc, #408]	; (800352c <Menu_Init+0x27c>)
 8003392:	605a      	str	r2, [r3, #4]
	items_menu_1[0].id = 1;
 8003394:	4b5e      	ldr	r3, [pc, #376]	; (8003510 <Menu_Init+0x260>)
 8003396:	2201      	movs	r2, #1
 8003398:	741a      	strb	r2, [r3, #16]
	items_menu_1[0].child = 0;
 800339a:	4b5d      	ldr	r3, [pc, #372]	; (8003510 <Menu_Init+0x260>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
	items_menu_1[0].parent = &items[0];
 80033a0:	4b5b      	ldr	r3, [pc, #364]	; (8003510 <Menu_Init+0x260>)
 80033a2:	4a59      	ldr	r2, [pc, #356]	; (8003508 <Menu_Init+0x258>)
 80033a4:	60da      	str	r2, [r3, #12]
	items_menu_1[0].name = "LoRa RX";
 80033a6:	4b5a      	ldr	r3, [pc, #360]	; (8003510 <Menu_Init+0x260>)
 80033a8:	4a61      	ldr	r2, [pc, #388]	; (8003530 <Menu_Init+0x280>)
 80033aa:	615a      	str	r2, [r3, #20]
	items_menu_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80033ac:	4a58      	ldr	r2, [pc, #352]	; (8003510 <Menu_Init+0x260>)
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	6193      	str	r3, [r2, #24]
	items_menu_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80033b2:	4a57      	ldr	r2, [pc, #348]	; (8003510 <Menu_Init+0x260>)
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	61d3      	str	r3, [r2, #28]
	items_menu_1[0].makeAction = p_lora_rx_mode;
 80033b8:	4a55      	ldr	r2, [pc, #340]	; (8003510 <Menu_Init+0x260>)
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	6213      	str	r3, [r2, #32]

	items_menu_1[1].up = &items_menu_1[0];
 80033be:	4b54      	ldr	r3, [pc, #336]	; (8003510 <Menu_Init+0x260>)
 80033c0:	4a53      	ldr	r2, [pc, #332]	; (8003510 <Menu_Init+0x260>)
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1[1].down = &items_menu_1[2];
 80033c4:	4b52      	ldr	r3, [pc, #328]	; (8003510 <Menu_Init+0x260>)
 80033c6:	4a5b      	ldr	r2, [pc, #364]	; (8003534 <Menu_Init+0x284>)
 80033c8:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1[1].child = &items_menu_1_1[0];
 80033ca:	4b51      	ldr	r3, [pc, #324]	; (8003510 <Menu_Init+0x260>)
 80033cc:	4a5a      	ldr	r2, [pc, #360]	; (8003538 <Menu_Init+0x288>)
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1[1].parent = &items[0];
 80033d0:	4b4f      	ldr	r3, [pc, #316]	; (8003510 <Menu_Init+0x260>)
 80033d2:	4a4d      	ldr	r2, [pc, #308]	; (8003508 <Menu_Init+0x258>)
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1[1].id = 2;
 80033d6:	4b4e      	ldr	r3, [pc, #312]	; (8003510 <Menu_Init+0x260>)
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1[1].name = "LoRa TX";
 80033de:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <Menu_Init+0x260>)
 80033e0:	4a56      	ldr	r2, [pc, #344]	; (800353c <Menu_Init+0x28c>)
 80033e2:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 80033e4:	4a4a      	ldr	r2, [pc, #296]	; (8003510 <Menu_Init+0x260>)
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80033ea:	4a49      	ldr	r2, [pc, #292]	; (8003510 <Menu_Init+0x260>)
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1[1].makeAction = 0;
 80033f0:	4b47      	ldr	r3, [pc, #284]	; (8003510 <Menu_Init+0x260>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44

	items_menu_1[2].up = &items_menu_1[1];
 80033f6:	4b46      	ldr	r3, [pc, #280]	; (8003510 <Menu_Init+0x260>)
 80033f8:	4a4c      	ldr	r2, [pc, #304]	; (800352c <Menu_Init+0x27c>)
 80033fa:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1[2].down = 0;
 80033fc:	4b44      	ldr	r3, [pc, #272]	; (8003510 <Menu_Init+0x260>)
 80033fe:	2200      	movs	r2, #0
 8003400:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1[2].child = 0;
 8003402:	4b43      	ldr	r3, [pc, #268]	; (8003510 <Menu_Init+0x260>)
 8003404:	2200      	movs	r2, #0
 8003406:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1[2].parent = &items[0];
 8003408:	4b41      	ldr	r3, [pc, #260]	; (8003510 <Menu_Init+0x260>)
 800340a:	4a3f      	ldr	r2, [pc, #252]	; (8003508 <Menu_Init+0x258>)
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1[2].id = 3;
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <Menu_Init+0x260>)
 8003410:	2203      	movs	r2, #3
 8003412:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1[2].name = "EXIT";						// Name of item
 8003416:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <Menu_Init+0x260>)
 8003418:	4a49      	ldr	r2, [pc, #292]	; (8003540 <Menu_Init+0x290>)
 800341a:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 800341c:	4a3c      	ldr	r2, [pc, #240]	; (8003510 <Menu_Init+0x260>)
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8003422:	4a3b      	ldr	r2, [pc, #236]	; (8003510 <Menu_Init+0x260>)
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1[2].makeAction = p_return_from_menu;
 8003428:	4a39      	ldr	r2, [pc, #228]	; (8003510 <Menu_Init+0x260>)
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	6693      	str	r3, [r2, #104]	; 0x68


	// LoRa TX menu
	items_menu_1_1[0].up = 0;
 800342e:	4b42      	ldr	r3, [pc, #264]	; (8003538 <Menu_Init+0x288>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
	items_menu_1_1[0].down = &items_menu_1_1[1];
 8003434:	4b40      	ldr	r3, [pc, #256]	; (8003538 <Menu_Init+0x288>)
 8003436:	4a43      	ldr	r2, [pc, #268]	; (8003544 <Menu_Init+0x294>)
 8003438:	605a      	str	r2, [r3, #4]
	items_menu_1_1[0].child = 0;
 800343a:	4b3f      	ldr	r3, [pc, #252]	; (8003538 <Menu_Init+0x288>)
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
	items_menu_1_1[0].parent = &items_menu_1[0];
 8003440:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <Menu_Init+0x288>)
 8003442:	4a33      	ldr	r2, [pc, #204]	; (8003510 <Menu_Init+0x260>)
 8003444:	60da      	str	r2, [r3, #12]
	items_menu_1_1[0].id = 1;
 8003446:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <Menu_Init+0x288>)
 8003448:	2201      	movs	r2, #1
 800344a:	741a      	strb	r2, [r3, #16]
	items_menu_1_1[0].name = "TX Test data";
 800344c:	4b3a      	ldr	r3, [pc, #232]	; (8003538 <Menu_Init+0x288>)
 800344e:	4a3e      	ldr	r2, [pc, #248]	; (8003548 <Menu_Init+0x298>)
 8003450:	615a      	str	r2, [r3, #20]
	items_menu_1_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8003452:	4a39      	ldr	r2, [pc, #228]	; (8003538 <Menu_Init+0x288>)
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	6193      	str	r3, [r2, #24]
	items_menu_1_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8003458:	4a37      	ldr	r2, [pc, #220]	; (8003538 <Menu_Init+0x288>)
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	61d3      	str	r3, [r2, #28]
	items_menu_1_1[0].makeAction = p_lora_tx_mode;
 800345e:	4a36      	ldr	r2, [pc, #216]	; (8003538 <Menu_Init+0x288>)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	6213      	str	r3, [r2, #32]

	items_menu_1_1[1].up = &items_menu_1_1[0];
 8003464:	4b34      	ldr	r3, [pc, #208]	; (8003538 <Menu_Init+0x288>)
 8003466:	4a34      	ldr	r2, [pc, #208]	; (8003538 <Menu_Init+0x288>)
 8003468:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1_1[1].down = &items_menu_1_1[2];
 800346a:	4b33      	ldr	r3, [pc, #204]	; (8003538 <Menu_Init+0x288>)
 800346c:	4a37      	ldr	r2, [pc, #220]	; (800354c <Menu_Init+0x29c>)
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1_1[1].child = 0;
 8003470:	4b31      	ldr	r3, [pc, #196]	; (8003538 <Menu_Init+0x288>)
 8003472:	2200      	movs	r2, #0
 8003474:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1_1[1].parent = &items_menu_1[0];
 8003476:	4b30      	ldr	r3, [pc, #192]	; (8003538 <Menu_Init+0x288>)
 8003478:	4a25      	ldr	r2, [pc, #148]	; (8003510 <Menu_Init+0x260>)
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1_1[1].id = 2;
 800347c:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <Menu_Init+0x288>)
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1_1[1].name = "TX T & H";
 8003484:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <Menu_Init+0x288>)
 8003486:	4a32      	ldr	r2, [pc, #200]	; (8003550 <Menu_Init+0x2a0>)
 8003488:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 800348a:	4a2b      	ldr	r2, [pc, #172]	; (8003538 <Menu_Init+0x288>)
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8003490:	4a29      	ldr	r2, [pc, #164]	; (8003538 <Menu_Init+0x288>)
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1_1[1].makeAction = p_lora_tx_mode_send_T_and_H;
 8003496:	4a28      	ldr	r2, [pc, #160]	; (8003538 <Menu_Init+0x288>)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_1_1[2].up = &items_menu_1_1[1];
 800349c:	4b26      	ldr	r3, [pc, #152]	; (8003538 <Menu_Init+0x288>)
 800349e:	4a29      	ldr	r2, [pc, #164]	; (8003544 <Menu_Init+0x294>)
 80034a0:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1_1[2].down = 0;
 80034a2:	4b25      	ldr	r3, [pc, #148]	; (8003538 <Menu_Init+0x288>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1_1[2].child = 0;
 80034a8:	4b23      	ldr	r3, [pc, #140]	; (8003538 <Menu_Init+0x288>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1_1[2].parent = &items_menu_1[0];
 80034ae:	4b22      	ldr	r3, [pc, #136]	; (8003538 <Menu_Init+0x288>)
 80034b0:	4a17      	ldr	r2, [pc, #92]	; (8003510 <Menu_Init+0x260>)
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1_1[2].id = 3;
 80034b4:	4b20      	ldr	r3, [pc, #128]	; (8003538 <Menu_Init+0x288>)
 80034b6:	2203      	movs	r2, #3
 80034b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1_1[2].name = "EXIT";
 80034bc:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <Menu_Init+0x288>)
 80034be:	4a20      	ldr	r2, [pc, #128]	; (8003540 <Menu_Init+0x290>)
 80034c0:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <Menu_Init+0x288>)
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80034c8:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <Menu_Init+0x288>)
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1_1[2].makeAction = p_return_from_menu;
 80034ce:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <Menu_Init+0x288>)
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating NRF menu
	items_menu_2[0].up = 0;
 80034d4:	4b11      	ldr	r3, [pc, #68]	; (800351c <Menu_Init+0x26c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e03b      	b.n	8003554 <Menu_Init+0x2a4>
 80034dc:	08003ad5 	.word	0x08003ad5
 80034e0:	08003bcd 	.word	0x08003bcd
 80034e4:	08003f39 	.word	0x08003f39
 80034e8:	08003f8d 	.word	0x08003f8d
 80034ec:	08004029 	.word	0x08004029
 80034f0:	080040c5 	.word	0x080040c5
 80034f4:	08004211 	.word	0x08004211
 80034f8:	08004161 	.word	0x08004161
 80034fc:	080042e9 	.word	0x080042e9
 8003500:	080045f5 	.word	0x080045f5
 8003504:	080048dd 	.word	0x080048dd
 8003508:	2000094c 	.word	0x2000094c
 800350c:	20000970 	.word	0x20000970
 8003510:	20000850 	.word	0x20000850
 8003514:	08008c20 	.word	0x08008c20
 8003518:	20000994 	.word	0x20000994
 800351c:	200007e4 	.word	0x200007e4
 8003520:	08008c2c 	.word	0x08008c2c
 8003524:	200008bc 	.word	0x200008bc
 8003528:	08008c38 	.word	0x08008c38
 800352c:	20000874 	.word	0x20000874
 8003530:	08008c48 	.word	0x08008c48
 8003534:	20000898 	.word	0x20000898
 8003538:	200009b8 	.word	0x200009b8
 800353c:	08008c50 	.word	0x08008c50
 8003540:	08008c58 	.word	0x08008c58
 8003544:	200009dc 	.word	0x200009dc
 8003548:	08008c60 	.word	0x08008c60
 800354c:	20000a00 	.word	0x20000a00
 8003550:	08008c70 	.word	0x08008c70
	items_menu_2[0].down = &items_menu_2[1];
 8003554:	4b8c      	ldr	r3, [pc, #560]	; (8003788 <Menu_Init+0x4d8>)
 8003556:	4a8d      	ldr	r2, [pc, #564]	; (800378c <Menu_Init+0x4dc>)
 8003558:	605a      	str	r2, [r3, #4]
	items_menu_2[0].child = 0;
 800355a:	4b8b      	ldr	r3, [pc, #556]	; (8003788 <Menu_Init+0x4d8>)
 800355c:	2200      	movs	r2, #0
 800355e:	609a      	str	r2, [r3, #8]
	items_menu_2[0].parent = &items[1];
 8003560:	4b89      	ldr	r3, [pc, #548]	; (8003788 <Menu_Init+0x4d8>)
 8003562:	4a8b      	ldr	r2, [pc, #556]	; (8003790 <Menu_Init+0x4e0>)
 8003564:	60da      	str	r2, [r3, #12]
	items_menu_2[0].id = 1;
 8003566:	4b88      	ldr	r3, [pc, #544]	; (8003788 <Menu_Init+0x4d8>)
 8003568:	2201      	movs	r2, #1
 800356a:	741a      	strb	r2, [r3, #16]
	items_menu_2[0].name = "NRF RX";						// Name of item
 800356c:	4b86      	ldr	r3, [pc, #536]	; (8003788 <Menu_Init+0x4d8>)
 800356e:	4a89      	ldr	r2, [pc, #548]	; (8003794 <Menu_Init+0x4e4>)
 8003570:	615a      	str	r2, [r3, #20]
	items_menu_2[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8003572:	4a85      	ldr	r2, [pc, #532]	; (8003788 <Menu_Init+0x4d8>)
 8003574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003576:	6193      	str	r3, [r2, #24]
	items_menu_2[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8003578:	4a83      	ldr	r2, [pc, #524]	; (8003788 <Menu_Init+0x4d8>)
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	61d3      	str	r3, [r2, #28]
	items_menu_2[0].makeAction = p_nrf_rx_mode;
 800357e:	4a82      	ldr	r2, [pc, #520]	; (8003788 <Menu_Init+0x4d8>)
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	6213      	str	r3, [r2, #32]

	items_menu_2[1].up = &items_menu_2[0];
 8003584:	4b80      	ldr	r3, [pc, #512]	; (8003788 <Menu_Init+0x4d8>)
 8003586:	4a80      	ldr	r2, [pc, #512]	; (8003788 <Menu_Init+0x4d8>)
 8003588:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2[1].down = &items_menu_2[2];
 800358a:	4b7f      	ldr	r3, [pc, #508]	; (8003788 <Menu_Init+0x4d8>)
 800358c:	4a82      	ldr	r2, [pc, #520]	; (8003798 <Menu_Init+0x4e8>)
 800358e:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2[1].child = &items_menu_2_1[0];
 8003590:	4b7d      	ldr	r3, [pc, #500]	; (8003788 <Menu_Init+0x4d8>)
 8003592:	4a82      	ldr	r2, [pc, #520]	; (800379c <Menu_Init+0x4ec>)
 8003594:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2[1].parent = &items[1];
 8003596:	4b7c      	ldr	r3, [pc, #496]	; (8003788 <Menu_Init+0x4d8>)
 8003598:	4a7d      	ldr	r2, [pc, #500]	; (8003790 <Menu_Init+0x4e0>)
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2[1].id = 2;
 800359c:	4b7a      	ldr	r3, [pc, #488]	; (8003788 <Menu_Init+0x4d8>)
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2[1].name = "NRF TX";						// Name of item
 80035a4:	4b78      	ldr	r3, [pc, #480]	; (8003788 <Menu_Init+0x4d8>)
 80035a6:	4a7e      	ldr	r2, [pc, #504]	; (80037a0 <Menu_Init+0x4f0>)
 80035a8:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2[1].updateScreen_up = p_print_rows_on_oled_if_up;
 80035aa:	4a77      	ldr	r2, [pc, #476]	; (8003788 <Menu_Init+0x4d8>)
 80035ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ae:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80035b0:	4a75      	ldr	r2, [pc, #468]	; (8003788 <Menu_Init+0x4d8>)
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2[1].makeAction = 0;
 80035b6:	4b74      	ldr	r3, [pc, #464]	; (8003788 <Menu_Init+0x4d8>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44

	items_menu_2[2].up = &items_menu_2[1];
 80035bc:	4b72      	ldr	r3, [pc, #456]	; (8003788 <Menu_Init+0x4d8>)
 80035be:	4a73      	ldr	r2, [pc, #460]	; (800378c <Menu_Init+0x4dc>)
 80035c0:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2[2].down = 0;
 80035c2:	4b71      	ldr	r3, [pc, #452]	; (8003788 <Menu_Init+0x4d8>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2[2].child = 0;
 80035c8:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <Menu_Init+0x4d8>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2[2].parent = &items[1];
 80035ce:	4b6e      	ldr	r3, [pc, #440]	; (8003788 <Menu_Init+0x4d8>)
 80035d0:	4a6f      	ldr	r2, [pc, #444]	; (8003790 <Menu_Init+0x4e0>)
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2[2].id = 3;
 80035d4:	4b6c      	ldr	r3, [pc, #432]	; (8003788 <Menu_Init+0x4d8>)
 80035d6:	2203      	movs	r2, #3
 80035d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2[2].name = "EXIT";						// Name of item
 80035dc:	4b6a      	ldr	r3, [pc, #424]	; (8003788 <Menu_Init+0x4d8>)
 80035de:	4a71      	ldr	r2, [pc, #452]	; (80037a4 <Menu_Init+0x4f4>)
 80035e0:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80035e2:	4a69      	ldr	r2, [pc, #420]	; (8003788 <Menu_Init+0x4d8>)
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80035e8:	4a67      	ldr	r2, [pc, #412]	; (8003788 <Menu_Init+0x4d8>)
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2[2].makeAction = p_return_from_menu;
 80035ee:	4a66      	ldr	r2, [pc, #408]	; (8003788 <Menu_Init+0x4d8>)
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	6693      	str	r3, [r2, #104]	; 0x68

	 //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	// NRF TX menu
	items_menu_2_1[0].up = 0;
 80035f4:	4b69      	ldr	r3, [pc, #420]	; (800379c <Menu_Init+0x4ec>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
	items_menu_2_1[0].down = &items_menu_2_1[1];
 80035fa:	4b68      	ldr	r3, [pc, #416]	; (800379c <Menu_Init+0x4ec>)
 80035fc:	4a6a      	ldr	r2, [pc, #424]	; (80037a8 <Menu_Init+0x4f8>)
 80035fe:	605a      	str	r2, [r3, #4]
	items_menu_2_1[0].child = 0;
 8003600:	4b66      	ldr	r3, [pc, #408]	; (800379c <Menu_Init+0x4ec>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
	items_menu_2_1[0].parent = &items_menu_2[0];
 8003606:	4b65      	ldr	r3, [pc, #404]	; (800379c <Menu_Init+0x4ec>)
 8003608:	4a5f      	ldr	r2, [pc, #380]	; (8003788 <Menu_Init+0x4d8>)
 800360a:	60da      	str	r2, [r3, #12]
	items_menu_2_1[0].id = 1;
 800360c:	4b63      	ldr	r3, [pc, #396]	; (800379c <Menu_Init+0x4ec>)
 800360e:	2201      	movs	r2, #1
 8003610:	741a      	strb	r2, [r3, #16]
	items_menu_2_1[0].name = "TX Test data";
 8003612:	4b62      	ldr	r3, [pc, #392]	; (800379c <Menu_Init+0x4ec>)
 8003614:	4a65      	ldr	r2, [pc, #404]	; (80037ac <Menu_Init+0x4fc>)
 8003616:	615a      	str	r2, [r3, #20]
	items_menu_2_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8003618:	4a60      	ldr	r2, [pc, #384]	; (800379c <Menu_Init+0x4ec>)
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	6193      	str	r3, [r2, #24]
	items_menu_2_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 800361e:	4a5f      	ldr	r2, [pc, #380]	; (800379c <Menu_Init+0x4ec>)
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	61d3      	str	r3, [r2, #28]
	items_menu_2_1[0].makeAction = p_nrf_tx_mode_send_test_number;
 8003624:	4a5d      	ldr	r2, [pc, #372]	; (800379c <Menu_Init+0x4ec>)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	6213      	str	r3, [r2, #32]

	items_menu_2_1[1].up = &items_menu_2_1[0];
 800362a:	4b5c      	ldr	r3, [pc, #368]	; (800379c <Menu_Init+0x4ec>)
 800362c:	4a5b      	ldr	r2, [pc, #364]	; (800379c <Menu_Init+0x4ec>)
 800362e:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2_1[1].down = &items_menu_2_1[2];
 8003630:	4b5a      	ldr	r3, [pc, #360]	; (800379c <Menu_Init+0x4ec>)
 8003632:	4a5f      	ldr	r2, [pc, #380]	; (80037b0 <Menu_Init+0x500>)
 8003634:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2_1[1].child = 0;
 8003636:	4b59      	ldr	r3, [pc, #356]	; (800379c <Menu_Init+0x4ec>)
 8003638:	2200      	movs	r2, #0
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2_1[1].parent = &items_menu_2[0];
 800363c:	4b57      	ldr	r3, [pc, #348]	; (800379c <Menu_Init+0x4ec>)
 800363e:	4a52      	ldr	r2, [pc, #328]	; (8003788 <Menu_Init+0x4d8>)
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2_1[1].id = 2;
 8003642:	4b56      	ldr	r3, [pc, #344]	; (800379c <Menu_Init+0x4ec>)
 8003644:	2202      	movs	r2, #2
 8003646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2_1[1].name = "TX T & H";
 800364a:	4b54      	ldr	r3, [pc, #336]	; (800379c <Menu_Init+0x4ec>)
 800364c:	4a59      	ldr	r2, [pc, #356]	; (80037b4 <Menu_Init+0x504>)
 800364e:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8003650:	4a52      	ldr	r2, [pc, #328]	; (800379c <Menu_Init+0x4ec>)
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8003656:	4a51      	ldr	r2, [pc, #324]	; (800379c <Menu_Init+0x4ec>)
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2_1[1].makeAction = 0;   //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<,
 800365c:	4b4f      	ldr	r3, [pc, #316]	; (800379c <Menu_Init+0x4ec>)
 800365e:	2200      	movs	r2, #0
 8003660:	645a      	str	r2, [r3, #68]	; 0x44

	items_menu_2_1[2].up = &items_menu_2_1[1];
 8003662:	4b4e      	ldr	r3, [pc, #312]	; (800379c <Menu_Init+0x4ec>)
 8003664:	4a50      	ldr	r2, [pc, #320]	; (80037a8 <Menu_Init+0x4f8>)
 8003666:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2_1[2].down = 0;
 8003668:	4b4c      	ldr	r3, [pc, #304]	; (800379c <Menu_Init+0x4ec>)
 800366a:	2200      	movs	r2, #0
 800366c:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2_1[2].child = 0;
 800366e:	4b4b      	ldr	r3, [pc, #300]	; (800379c <Menu_Init+0x4ec>)
 8003670:	2200      	movs	r2, #0
 8003672:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2_1[2].parent = &items_menu_2[0];
 8003674:	4b49      	ldr	r3, [pc, #292]	; (800379c <Menu_Init+0x4ec>)
 8003676:	4a44      	ldr	r2, [pc, #272]	; (8003788 <Menu_Init+0x4d8>)
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2_1[2].id = 3;
 800367a:	4b48      	ldr	r3, [pc, #288]	; (800379c <Menu_Init+0x4ec>)
 800367c:	2203      	movs	r2, #3
 800367e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2_1[2].name = "EXIT";
 8003682:	4b46      	ldr	r3, [pc, #280]	; (800379c <Menu_Init+0x4ec>)
 8003684:	4a47      	ldr	r2, [pc, #284]	; (80037a4 <Menu_Init+0x4f4>)
 8003686:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8003688:	4a44      	ldr	r2, [pc, #272]	; (800379c <Menu_Init+0x4ec>)
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 800368e:	4a43      	ldr	r2, [pc, #268]	; (800379c <Menu_Init+0x4ec>)
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2_1[2].makeAction = p_return_from_menu;
 8003694:	4a41      	ldr	r2, [pc, #260]	; (800379c <Menu_Init+0x4ec>)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating sensor menu
	items_menu_3[0].up = 0;
 800369a:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <Menu_Init+0x508>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
	items_menu_3[0].down = &items_menu_3[1];
 80036a0:	4b45      	ldr	r3, [pc, #276]	; (80037b8 <Menu_Init+0x508>)
 80036a2:	4a46      	ldr	r2, [pc, #280]	; (80037bc <Menu_Init+0x50c>)
 80036a4:	605a      	str	r2, [r3, #4]
	items_menu_3[0].child = 0;
 80036a6:	4b44      	ldr	r3, [pc, #272]	; (80037b8 <Menu_Init+0x508>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
	items_menu_3[0].parent = &items[2];
 80036ac:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <Menu_Init+0x508>)
 80036ae:	4a44      	ldr	r2, [pc, #272]	; (80037c0 <Menu_Init+0x510>)
 80036b0:	60da      	str	r2, [r3, #12]
	items_menu_3[0].id = 1;
 80036b2:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <Menu_Init+0x508>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	741a      	strb	r2, [r3, #16]
	items_menu_3[0].name = "Measure T & H";						// Name of item
 80036b8:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <Menu_Init+0x508>)
 80036ba:	4a42      	ldr	r2, [pc, #264]	; (80037c4 <Menu_Init+0x514>)
 80036bc:	615a      	str	r2, [r3, #20]
	items_menu_3[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80036be:	4a3e      	ldr	r2, [pc, #248]	; (80037b8 <Menu_Init+0x508>)
 80036c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c2:	6193      	str	r3, [r2, #24]
	items_menu_3[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80036c4:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <Menu_Init+0x508>)
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	61d3      	str	r3, [r2, #28]
	items_menu_3[0].makeAction = p_am2302_measure;
 80036ca:	4a3b      	ldr	r2, [pc, #236]	; (80037b8 <Menu_Init+0x508>)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6213      	str	r3, [r2, #32]

	items_menu_3[1].up = &items_menu_3[0];
 80036d0:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <Menu_Init+0x508>)
 80036d2:	4a39      	ldr	r2, [pc, #228]	; (80037b8 <Menu_Init+0x508>)
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_3[1].down = &items_menu_3[2];
 80036d6:	4b38      	ldr	r3, [pc, #224]	; (80037b8 <Menu_Init+0x508>)
 80036d8:	4a3b      	ldr	r2, [pc, #236]	; (80037c8 <Menu_Init+0x518>)
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_3[1].child = 0;
 80036dc:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <Menu_Init+0x508>)
 80036de:	2200      	movs	r2, #0
 80036e0:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_3[1].parent = &items[2];
 80036e2:	4b35      	ldr	r3, [pc, #212]	; (80037b8 <Menu_Init+0x508>)
 80036e4:	4a36      	ldr	r2, [pc, #216]	; (80037c0 <Menu_Init+0x510>)
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_3[1].id = 2;
 80036e8:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <Menu_Init+0x508>)
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_3[1].name = "Per Meas: ON";						// Name of item
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <Menu_Init+0x508>)
 80036f2:	4a36      	ldr	r2, [pc, #216]	; (80037cc <Menu_Init+0x51c>)
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_3[1].updateScreen_up = p_print_rows_on_oled_if_up;
 80036f6:	4a30      	ldr	r2, [pc, #192]	; (80037b8 <Menu_Init+0x508>)
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_3[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80036fc:	4a2e      	ldr	r2, [pc, #184]	; (80037b8 <Menu_Init+0x508>)
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_3[1].makeAction = p_periodic_measurement_am2302_on;
 8003702:	4a2d      	ldr	r2, [pc, #180]	; (80037b8 <Menu_Init+0x508>)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_3[2].up = &items_menu_3[1];
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <Menu_Init+0x508>)
 800370a:	4a2c      	ldr	r2, [pc, #176]	; (80037bc <Menu_Init+0x50c>)
 800370c:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_3[2].down = &items_menu_3[3];
 800370e:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <Menu_Init+0x508>)
 8003710:	4a2f      	ldr	r2, [pc, #188]	; (80037d0 <Menu_Init+0x520>)
 8003712:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_3[2].child = 0;
 8003714:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <Menu_Init+0x508>)
 8003716:	2200      	movs	r2, #0
 8003718:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_3[2].parent = &items[2];
 800371a:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <Menu_Init+0x508>)
 800371c:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <Menu_Init+0x510>)
 800371e:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_3[2].id = 3;
 8003720:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <Menu_Init+0x508>)
 8003722:	2203      	movs	r2, #3
 8003724:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_3[2].name = "Per Meas: OFF";						// Name of item
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <Menu_Init+0x508>)
 800372a:	4a2a      	ldr	r2, [pc, #168]	; (80037d4 <Menu_Init+0x524>)
 800372c:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_3[2].updateScreen_up = p_print_rows_on_oled_if_up;
 800372e:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <Menu_Init+0x508>)
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_3[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8003734:	4a20      	ldr	r2, [pc, #128]	; (80037b8 <Menu_Init+0x508>)
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_3[2].makeAction = p_periodic_measurement_am2302_off;
 800373a:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <Menu_Init+0x508>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6693      	str	r3, [r2, #104]	; 0x68

	items_menu_3[3].up = &items_menu_3[2];
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <Menu_Init+0x508>)
 8003742:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <Menu_Init+0x518>)
 8003744:	66da      	str	r2, [r3, #108]	; 0x6c
	items_menu_3[3].down = 0;
 8003746:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <Menu_Init+0x508>)
 8003748:	2200      	movs	r2, #0
 800374a:	671a      	str	r2, [r3, #112]	; 0x70
	items_menu_3[3].child = 0;
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <Menu_Init+0x508>)
 800374e:	2200      	movs	r2, #0
 8003750:	675a      	str	r2, [r3, #116]	; 0x74
	items_menu_3[3].parent = &items[2];
 8003752:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <Menu_Init+0x508>)
 8003754:	4a1a      	ldr	r2, [pc, #104]	; (80037c0 <Menu_Init+0x510>)
 8003756:	679a      	str	r2, [r3, #120]	; 0x78
	items_menu_3[3].id = 4;
 8003758:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <Menu_Init+0x508>)
 800375a:	2204      	movs	r2, #4
 800375c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items_menu_3[3].name = "EXIT";						// Name of item
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <Menu_Init+0x508>)
 8003762:	4a10      	ldr	r2, [pc, #64]	; (80037a4 <Menu_Init+0x4f4>)
 8003764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items_menu_3[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8003768:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <Menu_Init+0x508>)
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items_menu_3[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8003770:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <Menu_Init+0x508>)
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items_menu_3[3].makeAction = p_return_from_menu;
 8003778:	4a0f      	ldr	r2, [pc, #60]	; (80037b8 <Menu_Init+0x508>)
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8003780:	bf00      	nop
 8003782:	3734      	adds	r7, #52	; 0x34
 8003784:	46bd      	mov	sp, r7
 8003786:	e027      	b.n	80037d8 <Menu_Init+0x528>
 8003788:	200007e4 	.word	0x200007e4
 800378c:	20000808 	.word	0x20000808
 8003790:	20000970 	.word	0x20000970
 8003794:	08008c7c 	.word	0x08008c7c
 8003798:	2000082c 	.word	0x2000082c
 800379c:	20000778 	.word	0x20000778
 80037a0:	08008c84 	.word	0x08008c84
 80037a4:	08008c58 	.word	0x08008c58
 80037a8:	2000079c 	.word	0x2000079c
 80037ac:	08008c60 	.word	0x08008c60
 80037b0:	200007c0 	.word	0x200007c0
 80037b4:	08008c70 	.word	0x08008c70
 80037b8:	200008bc 	.word	0x200008bc
 80037bc:	200008e0 	.word	0x200008e0
 80037c0:	20000994 	.word	0x20000994
 80037c4:	08008c8c 	.word	0x08008c8c
 80037c8:	20000904 	.word	0x20000904
 80037cc:	08008c9c 	.word	0x08008c9c
 80037d0:	20000928 	.word	0x20000928
 80037d4:	08008cac 	.word	0x08008cac
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <menu>:

// ----------------------------------------------------------------------------------------
void menu(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
	Menu_Init();									// Init all structures
 80037e0:	f7ff fd66 	bl	80032b0 <Menu_Init>
	print_menu_init();								// Print start menu and scrolingbar
 80037e4:	f000 fa74 	bl	8003cd0 <print_menu_init>
	HAL_Delay(10);
 80037e8:	200a      	movs	r0, #10
 80037ea:	f001 f993 	bl	8004b14 <HAL_Delay>

	while(1)
	{
		if(button_processed_status == 1)			// If buttons was pressed
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <menu+0x50>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d1fb      	bne.n	80037ee <menu+0x12>
		{

			button_processed_status = 1;
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <menu+0x50>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
			switch (button_status)
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <menu+0x54>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d00c      	beq.n	800381e <menu+0x42>
 8003804:	2b03      	cmp	r3, #3
 8003806:	dc0d      	bgt.n	8003824 <menu+0x48>
 8003808:	2b01      	cmp	r3, #1
 800380a:	d002      	beq.n	8003812 <menu+0x36>
 800380c:	2b02      	cmp	r3, #2
 800380e:	d003      	beq.n	8003818 <menu+0x3c>
 8003810:	e008      	b.n	8003824 <menu+0x48>
			{
				case BOTTON_UP:
					up();
 8003812:	f000 f80f 	bl	8003834 <up>
					break;
 8003816:	e005      	b.n	8003824 <menu+0x48>
				case BUTTON_ENTER:
					enter();
 8003818:	f000 f840 	bl	800389c <enter>
					break;
 800381c:	e002      	b.n	8003824 <menu+0x48>
				case BUTTON_DOWN:
					down();
 800381e:	f000 f823 	bl	8003868 <down>
					break;
 8003822:	bf00      	nop
			}
			button_status = BOTTON_DOESENT_PRESS;
 8003824:	4b02      	ldr	r3, [pc, #8]	; (8003830 <menu+0x54>)
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
		if(button_processed_status == 1)			// If buttons was pressed
 800382a:	e7e0      	b.n	80037ee <menu+0x12>
 800382c:	20000028 	.word	0x20000028
 8003830:	2000059d 	.word	0x2000059d

08003834 <up>:
		}
	}
}
// ----------------------------------------------------------------------------------------
void up(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
	if (currentItem->up)
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <up+0x30>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00d      	beq.n	800385e <up+0x2a>
	{
	    currentItem = currentItem->up;
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <up+0x30>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a06      	ldr	r2, [pc, #24]	; (8003864 <up+0x30>)
 800384a:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_up )
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <up+0x30>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <up+0x2a>
	    {
	        currentItem->updateScreen_up();
 8003856:	4b03      	ldr	r3, [pc, #12]	; (8003864 <up+0x30>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	4798      	blx	r3
	    }
	}
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000030 	.word	0x20000030

08003868 <down>:
// ----------------------------------------------------------------------------------------
void down(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
	if (currentItem->down)
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <down+0x30>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <down+0x2a>
	{
	    currentItem = currentItem->down;
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <down+0x30>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a06      	ldr	r2, [pc, #24]	; (8003898 <down+0x30>)
 800387e:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_down )
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <down+0x30>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <down+0x2a>
	    {
	        currentItem->updateScreen_down();
 800388a:	4b03      	ldr	r3, [pc, #12]	; (8003898 <down+0x30>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	4798      	blx	r3
	    }
	}
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000030 	.word	0x20000030

0800389c <enter>:
// ----------------------------------------------------------------------------------------
void enter(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
	bool status = true;
 80038a2:	2301      	movs	r3, #1
 80038a4:	71fb      	strb	r3, [r7, #7]
	// Якщо є функція "makeAction" тоді виконати її
	if (currentItem->makeAction)
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <enter+0x48>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <enter+0x20>
	{
		currentItem->makeAction();
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <enter+0x48>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	4798      	blx	r3
		status = false;
 80038b8:	2300      	movs	r3, #0
 80038ba:	71fb      	strb	r3, [r7, #7]
	}
	// Якщо є перехід на  "child" і "makeAction" не була виконана, тоді виконати перехід
	if((currentItem->child) && (status == true))
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <enter+0x48>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <enter+0x3e>
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d006      	beq.n	80038da <enter+0x3e>
	{
		currentItem = currentItem->child;
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <enter+0x48>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <enter+0x48>)
 80038d4:	6013      	str	r3, [r2, #0]
		print_menu_items();
 80038d6:	f000 fa91 	bl	8003dfc <print_menu_items>
	}
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000030 	.word	0x20000030

080038e8 <scroll_bar>:
// ----------------------------------------------------------------------------------------
/*
This function print scrollbar on right part of OLED.
 */
void scroll_bar(void)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af02      	add	r7, sp, #8
	// Work size scrollbar
	uint16_t start_x_scrollbar = 124;
 80038ee:	237c      	movs	r3, #124	; 0x7c
 80038f0:	81fb      	strh	r3, [r7, #14]
	uint16_t start_y_scrollbar = 17;
 80038f2:	2311      	movs	r3, #17
 80038f4:	81bb      	strh	r3, [r7, #12]
	uint16_t active_width = 3;
 80038f6:	2303      	movs	r3, #3
 80038f8:	817b      	strh	r3, [r7, #10]
	uint16_t lenght_all_scrollbar = 48;
 80038fa:	2330      	movs	r3, #48	; 0x30
 80038fc:	813b      	strh	r3, [r7, #8]

	uint8_t menu_items_counter = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
	// 1. Скопіювати показник на меню в буффер.
	// 2. Піднятися до першого елемента меню.
	// 3. Опускатися вниз до останнього пункту меню і інкрементувати лічильник елементів меню.
	// 4. Використати лічильник пунктів меню для вираховування довжини полоси прокрутки і її координат.

	MenuItem_t * currentItem_buff = currentItem;
 8003902:	4b32      	ldr	r3, [pc, #200]	; (80039cc <scroll_bar+0xe4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	613b      	str	r3, [r7, #16]

	if ((currentItem_buff -> up) != 0)							// Step up if existing up
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d006      	beq.n	800391e <scroll_bar+0x36>
	{
		do{
			currentItem_buff = currentItem_buff -> up;			// Step up to the top of menu
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	613b      	str	r3, [r7, #16]
		}
		while ((currentItem_buff -> up) != 0);					// If the top of item doesen't found
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f8      	bne.n	8003910 <scroll_bar+0x28>
	}

	if ((currentItem_buff -> up) == 0)							// If found top of menu item
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <scroll_bar+0x52>
	{
		do{
			currentItem_buff = currentItem_buff -> down;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	613b      	str	r3, [r7, #16]
			menu_items_counter++;								// Count how many list on menu
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	3301      	adds	r3, #1
 8003930:	75fb      	strb	r3, [r7, #23]
		}
		while ((currentItem_buff -> down) != 0);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f5      	bne.n	8003926 <scroll_bar+0x3e>
	}
	 // Очистити частину керану де є скролбар
	ssd1306FillRect(start_x_scrollbar, start_y_scrollbar, active_width, lenght_all_scrollbar - 2, Black);
 800393a:	89fb      	ldrh	r3, [r7, #14]
 800393c:	b2d8      	uxtb	r0, r3
 800393e:	89bb      	ldrh	r3, [r7, #12]
 8003940:	b2d9      	uxtb	r1, r3
 8003942:	897b      	ldrh	r3, [r7, #10]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	893b      	ldrh	r3, [r7, #8]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	3b02      	subs	r3, #2
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2400      	movs	r4, #0
 8003950:	9400      	str	r4, [sp, #0]
 8003952:	f7fe fd20 	bl	8002396 <ssd1306FillRect>

	// Вивести подовгастий квадрат на край екрану
	ssd1306_DrawRectangle(start_x_scrollbar - 1, start_y_scrollbar - 1, start_x_scrollbar + active_width, 63, White);
 8003956:	89fb      	ldrh	r3, [r7, #14]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b2d8      	uxtb	r0, r3
 800395e:	89bb      	ldrh	r3, [r7, #12]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b2d9      	uxtb	r1, r3
 8003966:	89fb      	ldrh	r3, [r7, #14]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	897b      	ldrh	r3, [r7, #10]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	4413      	add	r3, r2
 8003970:	b2da      	uxtb	r2, r3
 8003972:	2301      	movs	r3, #1
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	233f      	movs	r3, #63	; 0x3f
 8003978:	f7fe fcd6 	bl	8002328 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 800397c:	f7fe fb1a 	bl	8001fb4 <ssd1306_UpdateScreen>

	 // Print scroling line
	int id_for_line = currentItem -> id;				// Скопіювати порядковий номер меню (Для того щоб взнати на якому пункті меню зараз стоїмо)
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <scroll_bar+0xe4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	7c1b      	ldrb	r3, [r3, #16]
 8003986:	607b      	str	r3, [r7, #4]
	// Print scroling line
	uint16_t line_lenght = (lenght_all_scrollbar/menu_items_counter + 1);					   	// Довжина лінії яка відповідає одному меню
 8003988:	893a      	ldrh	r2, [r7, #8]
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003990:	b29b      	uxth	r3, r3
 8003992:	3301      	adds	r3, #1
 8003994:	807b      	strh	r3, [r7, #2]
	uint16_t start_lenght = 16 + ((id_for_line - 1)*line_lenght);								// Початок лінії
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3b01      	subs	r3, #1
 800399a:	b29b      	uxth	r3, r3
 800399c:	887a      	ldrh	r2, [r7, #2]
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3310      	adds	r3, #16
 80039a6:	803b      	strh	r3, [r7, #0]
	// Print active scrollbar part (line)
	ssd1306FillRect(start_x_scrollbar, start_lenght, active_width, line_lenght, White);
 80039a8:	89fb      	ldrh	r3, [r7, #14]
 80039aa:	b2d8      	uxtb	r0, r3
 80039ac:	883b      	ldrh	r3, [r7, #0]
 80039ae:	b2d9      	uxtb	r1, r3
 80039b0:	897b      	ldrh	r3, [r7, #10]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	887b      	ldrh	r3, [r7, #2]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2401      	movs	r4, #1
 80039ba:	9400      	str	r4, [sp, #0]
 80039bc:	f7fe fceb 	bl	8002396 <ssd1306FillRect>

	ssd1306_UpdateScreen();
 80039c0:	f7fe faf8 	bl	8001fb4 <ssd1306_UpdateScreen>
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd90      	pop	{r4, r7, pc}
 80039cc:	20000030 	.word	0x20000030

080039d0 <print_rectangle_on_head>:
// ----------------------------------------------------------------------------------------
void print_rectangle_on_head(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(0, 0, 127 , 15, White);
 80039d6:	2301      	movs	r3, #1
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	230f      	movs	r3, #15
 80039dc:	227f      	movs	r2, #127	; 0x7f
 80039de:	2100      	movs	r1, #0
 80039e0:	2000      	movs	r0, #0
 80039e2:	f7fe fca1 	bl	8002328 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 80039e6:	f7fe fae5 	bl	8001fb4 <ssd1306_UpdateScreen>
}
 80039ea:	bf00      	nop
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <clear_menu_items>:
// ----------------------------------------------------------------------------------------
// Clear some menu items.
void clear_menu_items (bool first, bool second, bool third, bool fourth)
{
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4604      	mov	r4, r0
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	4623      	mov	r3, r4
 8003a00:	71fb      	strb	r3, [r7, #7]
 8003a02:	4603      	mov	r3, r0
 8003a04:	71bb      	strb	r3, [r7, #6]
 8003a06:	460b      	mov	r3, r1
 8003a08:	717b      	strb	r3, [r7, #5]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	713b      	strb	r3, [r7, #4]
	uint8_t start_row_x = 15;
 8003a0e:	230f      	movs	r3, #15
 8003a10:	77fb      	strb	r3, [r7, #31]
	char str[16] = "               ";   						// Must be 15
 8003a12:	4b2a      	ldr	r3, [pc, #168]	; (8003abc <clear_menu_items+0xcc>)
 8003a14:	f107 040c 	add.w	r4, r7, #12
 8003a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(first == true)
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <clear_menu_items+0x52>
	{
		ssd1306_SetCursor(start_row_x, first_menu_row);
 8003a24:	4b26      	ldr	r3, [pc, #152]	; (8003ac0 <clear_menu_items+0xd0>)
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	7ffb      	ldrb	r3, [r7, #31]
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fbf6 	bl	8002220 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003a34:	4a23      	ldr	r2, [pc, #140]	; (8003ac4 <clear_menu_items+0xd4>)
 8003a36:	f107 000c 	add.w	r0, r7, #12
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	ca06      	ldmia	r2, {r1, r2}
 8003a3e:	f7fe fbc9 	bl	80021d4 <ssd1306_WriteString>
	}
	if(second == true)
 8003a42:	79bb      	ldrb	r3, [r7, #6]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00e      	beq.n	8003a66 <clear_menu_items+0x76>
	{
		ssd1306_SetCursor(start_row_x, second_menu_row);
 8003a48:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <clear_menu_items+0xd8>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	7ffb      	ldrb	r3, [r7, #31]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fbe4 	bl	8002220 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003a58:	4a1a      	ldr	r2, [pc, #104]	; (8003ac4 <clear_menu_items+0xd4>)
 8003a5a:	f107 000c 	add.w	r0, r7, #12
 8003a5e:	2301      	movs	r3, #1
 8003a60:	ca06      	ldmia	r2, {r1, r2}
 8003a62:	f7fe fbb7 	bl	80021d4 <ssd1306_WriteString>
	}
	if(first == true)
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00e      	beq.n	8003a8a <clear_menu_items+0x9a>
	{
		ssd1306_SetCursor(start_row_x, third_menu_row);
 8003a6c:	4b17      	ldr	r3, [pc, #92]	; (8003acc <clear_menu_items+0xdc>)
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	7ffb      	ldrb	r3, [r7, #31]
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fbd2 	bl	8002220 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003a7c:	4a11      	ldr	r2, [pc, #68]	; (8003ac4 <clear_menu_items+0xd4>)
 8003a7e:	f107 000c 	add.w	r0, r7, #12
 8003a82:	2301      	movs	r3, #1
 8003a84:	ca06      	ldmia	r2, {r1, r2}
 8003a86:	f7fe fba5 	bl	80021d4 <ssd1306_WriteString>
	}
	if(fourth == true)
 8003a8a:	793b      	ldrb	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00e      	beq.n	8003aae <clear_menu_items+0xbe>
	{
		ssd1306_SetCursor(start_row_x, fourth_menu_row);
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <clear_menu_items+0xe0>)
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	7ffb      	ldrb	r3, [r7, #31]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fbc0 	bl	8002220 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003aa0:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <clear_menu_items+0xd4>)
 8003aa2:	f107 000c 	add.w	r0, r7, #12
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	ca06      	ldmia	r2, {r1, r2}
 8003aaa:	f7fe fb93 	bl	80021d4 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8003aae:	f7fe fa81 	bl	8001fb4 <ssd1306_UpdateScreen>
}
 8003ab2:	bf00      	nop
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd90      	pop	{r4, r7, pc}
 8003aba:	bf00      	nop
 8003abc:	08008cbc 	.word	0x08008cbc
 8003ac0:	20000038 	.word	0x20000038
 8003ac4:	2000001c 	.word	0x2000001c
 8003ac8:	2000003a 	.word	0x2000003a
 8003acc:	2000003c 	.word	0x2000003c
 8003ad0:	2000003e 	.word	0x2000003e

08003ad4 <print_rows_on_oled_if_up>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_up(void)								// print text menu items
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8003ada:	2300      	movs	r3, #0
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
	clear_menu_items (true , true , true , true );
 8003ae8:	2301      	movs	r3, #1
 8003aea:	2201      	movs	r2, #1
 8003aec:	2101      	movs	r1, #1
 8003aee:	2001      	movs	r0, #1
 8003af0:	f7ff ff7e 	bl	80039f0 <clear_menu_items>
	print_rectangle_on_head();
 8003af4:	f7ff ff6c 	bl	80039d0 <print_rectangle_on_head>
	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8003af8:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <print_rows_on_oled_if_up+0xd8>)
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	4619      	mov	r1, r3
 8003b00:	2000      	movs	r0, #0
 8003b02:	f7fe fb8d 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8003b06:	4a2a      	ldr	r2, [pc, #168]	; (8003bb0 <print_rows_on_oled_if_up+0xdc>)
 8003b08:	2301      	movs	r3, #1
 8003b0a:	ca06      	ldmia	r2, {r1, r2}
 8003b0c:	4829      	ldr	r0, [pc, #164]	; (8003bb4 <print_rows_on_oled_if_up+0xe0>)
 8003b0e:	f7fe fb61 	bl	80021d4 <ssd1306_WriteString>

	MenuItem_t * currentItem_buff_up = currentItem;				// Create buffer on selected current item pointer.
 8003b12:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <print_rows_on_oled_if_up+0xe4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003b18:	4b24      	ldr	r3, [pc, #144]	; (8003bac <print_rows_on_oled_if_up+0xd8>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	74fb      	strb	r3, [r7, #19]
 8003b1e:	e035      	b.n	8003b8c <print_rows_on_oled_if_up+0xb8>
	{
		// Fill in OLED buffer
		// Print number of menu item
		itoa(currentItem_buff_up -> id, str, 10);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	7c1b      	ldrb	r3, [r3, #16]
 8003b24:	4618      	mov	r0, r3
 8003b26:	463b      	mov	r3, r7
 8003b28:	220a      	movs	r2, #10
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f004 fb68 	bl	8008200 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8003b30:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <print_rows_on_oled_if_up+0xe8>)
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	7cfa      	ldrb	r2, [r7, #19]
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fb70 	bl	8002220 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003b40:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <print_rows_on_oled_if_up+0xdc>)
 8003b42:	4638      	mov	r0, r7
 8003b44:	2301      	movs	r3, #1
 8003b46:	ca06      	ldmia	r2, {r1, r2}
 8003b48:	f7fe fb44 	bl	80021d4 <ssd1306_WriteString>

		// Print name of menu item
		strncpy(str, currentItem_buff_up -> name, 15);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	6959      	ldr	r1, [r3, #20]
 8003b50:	463b      	mov	r3, r7
 8003b52:	220f      	movs	r2, #15
 8003b54:	4618      	mov	r0, r3
 8003b56:	f004 fc50 	bl	80083fa <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8003b5a:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <print_rows_on_oled_if_up+0xec>)
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	7cfa      	ldrb	r2, [r7, #19]
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe fb5b 	bl	8002220 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003b6a:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <print_rows_on_oled_if_up+0xdc>)
 8003b6c:	4638      	mov	r0, r7
 8003b6e:	2301      	movs	r3, #1
 8003b70:	ca06      	ldmia	r2, {r1, r2}
 8003b72:	f7fe fb2f 	bl	80021d4 <ssd1306_WriteString>

		currentItem_buff_up = currentItem_buff_up -> down;		// Make a step down
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	617b      	str	r3, [r7, #20]

		// Print only existing items
		if(currentItem_buff_up == 0)							// If no next item
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <print_rows_on_oled_if_up+0xc6>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <print_rows_on_oled_if_up+0xf0>)
 8003b84:	781a      	ldrb	r2, [r3, #0]
 8003b86:	7cfb      	ldrb	r3, [r7, #19]
 8003b88:	4413      	add	r3, r2
 8003b8a:	74fb      	strb	r3, [r7, #19]
 8003b8c:	7cfb      	ldrb	r3, [r7, #19]
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <print_rows_on_oled_if_up+0xf4>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d9c3      	bls.n	8003b20 <print_rows_on_oled_if_up+0x4c>
 8003b98:	e000      	b.n	8003b9c <print_rows_on_oled_if_up+0xc8>
		{
			break;
 8003b9a:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 8003b9c:	f7fe fa0a 	bl	8001fb4 <ssd1306_UpdateScreen>
	scroll_bar();
 8003ba0:	f7ff fea2 	bl	80038e8 <scroll_bar>
}
 8003ba4:	bf00      	nop
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000038 	.word	0x20000038
 8003bb0:	2000001c 	.word	0x2000001c
 8003bb4:	20000034 	.word	0x20000034
 8003bb8:	20000030 	.word	0x20000030
 8003bbc:	20000042 	.word	0x20000042
 8003bc0:	20000044 	.word	0x20000044
 8003bc4:	20000040 	.word	0x20000040
 8003bc8:	2000003e 	.word	0x2000003e

08003bcc <print_rows_on_oled_if_down>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_down(void)							// print text menu items
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
	clear_menu_items (true , true , true , true );
 8003be0:	2301      	movs	r3, #1
 8003be2:	2201      	movs	r2, #1
 8003be4:	2101      	movs	r1, #1
 8003be6:	2001      	movs	r0, #1
 8003be8:	f7ff ff02 	bl	80039f0 <clear_menu_items>
	print_rectangle_on_head();
 8003bec:	f7ff fef0 	bl	80039d0 <print_rectangle_on_head>
	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8003bf0:	4b2f      	ldr	r3, [pc, #188]	; (8003cb0 <print_rows_on_oled_if_down+0xe4>)
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f7fe fb11 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8003bfe:	4a2d      	ldr	r2, [pc, #180]	; (8003cb4 <print_rows_on_oled_if_down+0xe8>)
 8003c00:	2301      	movs	r3, #1
 8003c02:	ca06      	ldmia	r2, {r1, r2}
 8003c04:	482c      	ldr	r0, [pc, #176]	; (8003cb8 <print_rows_on_oled_if_down+0xec>)
 8003c06:	f7fe fae5 	bl	80021d4 <ssd1306_WriteString>

	MenuItem_t * currentItem_buff = currentItem;				// Create buffer on selected current item pointer.
 8003c0a:	4b2c      	ldr	r3, [pc, #176]	; (8003cbc <print_rows_on_oled_if_down+0xf0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <print_rows_on_oled_if_down+0xe4>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	74fb      	strb	r3, [r7, #19]
 8003c16:	e03b      	b.n	8003c90 <print_rows_on_oled_if_down+0xc4>
	{
		// Fill in OLED buffer
		// Print number of menu item
        itoa(currentItem_buff -> id, str, 10);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	7c1b      	ldrb	r3, [r3, #16]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	463b      	mov	r3, r7
 8003c20:	220a      	movs	r2, #10
 8003c22:	4619      	mov	r1, r3
 8003c24:	f004 faec 	bl	8008200 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8003c28:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <print_rows_on_oled_if_down+0xf4>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	7cfa      	ldrb	r2, [r7, #19]
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe faf4 	bl	8002220 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003c38:	4a1e      	ldr	r2, [pc, #120]	; (8003cb4 <print_rows_on_oled_if_down+0xe8>)
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	ca06      	ldmia	r2, {r1, r2}
 8003c40:	f7fe fac8 	bl	80021d4 <ssd1306_WriteString>

		// Print name of menu item
		memset(str, 0, sizeof(str));
 8003c44:	463b      	mov	r3, r7
 8003c46:	2210      	movs	r2, #16
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 fae8 	bl	8008220 <memset>
	    strncpy(str, currentItem_buff -> name, 15);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	6959      	ldr	r1, [r3, #20]
 8003c54:	463b      	mov	r3, r7
 8003c56:	220f      	movs	r2, #15
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f004 fbce 	bl	80083fa <strncpy>
	    ssd1306_SetCursor(start_print_name_menu_x, row);
 8003c5e:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <print_rows_on_oled_if_down+0xf8>)
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	7cfa      	ldrb	r2, [r7, #19]
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fe fad9 	bl	8002220 <ssd1306_SetCursor>
	    ssd1306_WriteString(str,  Font_7x10, White);
 8003c6e:	4a11      	ldr	r2, [pc, #68]	; (8003cb4 <print_rows_on_oled_if_down+0xe8>)
 8003c70:	4638      	mov	r0, r7
 8003c72:	2301      	movs	r3, #1
 8003c74:	ca06      	ldmia	r2, {r1, r2}
 8003c76:	f7fe faad 	bl	80021d4 <ssd1306_WriteString>

	    currentItem_buff = currentItem_buff -> down;			// Make a step down
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	617b      	str	r3, [r7, #20]

	    // Print only existing items
	    if(currentItem_buff == 0)		 						// If no next item
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <print_rows_on_oled_if_down+0xd2>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <print_rows_on_oled_if_down+0xfc>)
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	7cfb      	ldrb	r3, [r7, #19]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	74fb      	strb	r3, [r7, #19]
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <print_rows_on_oled_if_down+0x100>)
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d9bd      	bls.n	8003c18 <print_rows_on_oled_if_down+0x4c>
 8003c9c:	e000      	b.n	8003ca0 <print_rows_on_oled_if_down+0xd4>
	    {
	    	break;
 8003c9e:	bf00      	nop
	    }
	 }
	 ssd1306_UpdateScreen();
 8003ca0:	f7fe f988 	bl	8001fb4 <ssd1306_UpdateScreen>
	 scroll_bar();
 8003ca4:	f7ff fe20 	bl	80038e8 <scroll_bar>
}
 8003ca8:	bf00      	nop
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20000038 	.word	0x20000038
 8003cb4:	2000001c 	.word	0x2000001c
 8003cb8:	20000034 	.word	0x20000034
 8003cbc:	20000030 	.word	0x20000030
 8003cc0:	20000042 	.word	0x20000042
 8003cc4:	20000044 	.word	0x20000044
 8003cc8:	20000040 	.word	0x20000040
 8003ccc:	2000003e 	.word	0x2000003e

08003cd0 <print_menu_init>:
// ----------------------------------------------------------------------------------------
// Print first 4 items of menu (only first time)
void print_menu_init(void)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
	MenuItem_t * currentItem_buff = currentItem;		// Create buffer on selected current item pointer.
 8003cd6:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <print_menu_init+0x10c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	61fb      	str	r3, [r7, #28]
	print_rectangle_on_head();
 8003cdc:	f7ff fe78 	bl	80039d0 <print_rectangle_on_head>

	// Print ">> MAIN MENU <<" on head of OLED
	char str[20] = ">> MAIN MENU <<";
 8003ce0:	4b3f      	ldr	r3, [pc, #252]	; (8003de0 <print_menu_init+0x110>)
 8003ce2:	1d3c      	adds	r4, r7, #4
 8003ce4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ce6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8003cee:	2103      	movs	r1, #3
 8003cf0:	200a      	movs	r0, #10
 8003cf2:	f7fe fa95 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003cf6:	4a3b      	ldr	r2, [pc, #236]	; (8003de4 <print_menu_init+0x114>)
 8003cf8:	1d38      	adds	r0, r7, #4
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	ca06      	ldmia	r2, {r1, r2}
 8003cfe:	f7fe fa69 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003d02:	f7fe f957 	bl	8001fb4 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	2214      	movs	r2, #20
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f004 fa87 	bl	8008220 <memset>

	for(uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003d12:	4b35      	ldr	r3, [pc, #212]	; (8003de8 <print_menu_init+0x118>)
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	76fb      	strb	r3, [r7, #27]
 8003d18:	e051      	b.n	8003dbe <print_menu_init+0xee>
	{
		if(row == first_menu_row)
 8003d1a:	7efb      	ldrb	r3, [r7, #27]
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	4b32      	ldr	r3, [pc, #200]	; (8003de8 <print_menu_init+0x118>)
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d10d      	bne.n	8003d42 <print_menu_init+0x72>
		{
			// Print pointer on menu (On top)
			char str_pointer[4] = "->";
 8003d26:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8003d2a:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8003d2c:	7efb      	ldrb	r3, [r7, #27]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	2000      	movs	r0, #0
 8003d32:	f7fe fa75 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8003d36:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <print_menu_init+0x114>)
 8003d38:	4638      	mov	r0, r7
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	ca06      	ldmia	r2, {r1, r2}
 8003d3e:	f7fe fa49 	bl	80021d4 <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	7c1b      	ldrb	r3, [r3, #16]
 8003d46:	4618      	mov	r0, r3
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	220a      	movs	r2, #10
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f004 fa57 	bl	8008200 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8003d52:	4b26      	ldr	r3, [pc, #152]	; (8003dec <print_menu_init+0x11c>)
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	7efa      	ldrb	r2, [r7, #27]
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe fa5f 	bl	8002220 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003d62:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <print_menu_init+0x114>)
 8003d64:	1d38      	adds	r0, r7, #4
 8003d66:	2301      	movs	r3, #1
 8003d68:	ca06      	ldmia	r2, {r1, r2}
 8003d6a:	f7fe fa33 	bl	80021d4 <ssd1306_WriteString>
		memset(str, 0, sizeof(str));
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	2214      	movs	r2, #20
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f004 fa53 	bl	8008220 <memset>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	6959      	ldr	r1, [r3, #20]
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	220f      	movs	r2, #15
 8003d82:	4618      	mov	r0, r3
 8003d84:	f004 fb39 	bl	80083fa <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <print_menu_init+0x120>)
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	7efa      	ldrb	r2, [r7, #27]
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fa44 	bl	8002220 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003d98:	4a12      	ldr	r2, [pc, #72]	; (8003de4 <print_menu_init+0x114>)
 8003d9a:	1d38      	adds	r0, r7, #4
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	ca06      	ldmia	r2, {r1, r2}
 8003da0:	f7fe fa18 	bl	80021d4 <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8003da4:	f7fe f906 	bl	8001fb4 <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00b      	beq.n	8003dcc <print_menu_init+0xfc>
	for(uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <print_menu_init+0x124>)
 8003db6:	781a      	ldrb	r2, [r3, #0]
 8003db8:	7efb      	ldrb	r3, [r7, #27]
 8003dba:	4413      	add	r3, r2
 8003dbc:	76fb      	strb	r3, [r7, #27]
 8003dbe:	7efb      	ldrb	r3, [r7, #27]
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <print_menu_init+0x128>)
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d9a7      	bls.n	8003d1a <print_menu_init+0x4a>
 8003dca:	e000      	b.n	8003dce <print_menu_init+0xfe>
		{
			break;
 8003dcc:	bf00      	nop
		}
	}
	scroll_bar();
 8003dce:	f7ff fd8b 	bl	80038e8 <scroll_bar>
}
 8003dd2:	bf00      	nop
 8003dd4:	3724      	adds	r7, #36	; 0x24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd90      	pop	{r4, r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000030 	.word	0x20000030
 8003de0:	08008ccc 	.word	0x08008ccc
 8003de4:	2000001c 	.word	0x2000001c
 8003de8:	20000038 	.word	0x20000038
 8003dec:	20000042 	.word	0x20000042
 8003df0:	20000044 	.word	0x20000044
 8003df4:	20000040 	.word	0x20000040
 8003df8:	2000003e 	.word	0x2000003e

08003dfc <print_menu_items>:
// ----------------------------------------------------------------------------------------
// print pointers of menu
void print_menu_items(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8003e02:	2300      	movs	r3, #0
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	f107 0308 	add.w	r3, r7, #8
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	609a      	str	r2, [r3, #8]
	clearn_oled();
 8003e12:	f7fe f81f 	bl	8001e54 <clearn_oled>
	print_rectangle_on_head();
 8003e16:	f7ff fddb 	bl	80039d0 <print_rectangle_on_head>

	//Print selected name of menu on top of OLED (in rectangle)
	MenuItem_t * currentItem_buff_parent = currentItem;
 8003e1a:	4b40      	ldr	r3, [pc, #256]	; (8003f1c <print_menu_items+0x120>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	617b      	str	r3, [r7, #20]
	currentItem_buff_parent = currentItem_buff_parent -> parent;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	617b      	str	r3, [r7, #20]

	strncpy(str, currentItem_buff_parent -> name, 15);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	6959      	ldr	r1, [r3, #20]
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	220f      	movs	r2, #15
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f004 fae3 	bl	80083fa <strncpy>
	ssd1306_SetCursor(10, 3);
 8003e34:	2103      	movs	r1, #3
 8003e36:	200a      	movs	r0, #10
 8003e38:	f7fe f9f2 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003e3c:	4a38      	ldr	r2, [pc, #224]	; (8003f20 <print_menu_items+0x124>)
 8003e3e:	1d38      	adds	r0, r7, #4
 8003e40:	2301      	movs	r3, #1
 8003e42:	ca06      	ldmia	r2, {r1, r2}
 8003e44:	f7fe f9c6 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003e48:	f7fe f8b4 	bl	8001fb4 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8003e4c:	1d3b      	adds	r3, r7, #4
 8003e4e:	2210      	movs	r2, #16
 8003e50:	2100      	movs	r1, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f004 f9e4 	bl	8008220 <memset>

	MenuItem_t * currentItem_buff = currentItem;
 8003e58:	4b30      	ldr	r3, [pc, #192]	; (8003f1c <print_menu_items+0x120>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	61fb      	str	r3, [r7, #28]

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003e5e:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <print_menu_items+0x128>)
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	76fb      	strb	r3, [r7, #27]
 8003e64:	e04b      	b.n	8003efe <print_menu_items+0x102>
	{
		if(row == first_menu_row)
 8003e66:	7efb      	ldrb	r3, [r7, #27]
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	4b2e      	ldr	r3, [pc, #184]	; (8003f24 <print_menu_items+0x128>)
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d10d      	bne.n	8003e8e <print_menu_items+0x92>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 8003e72:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8003e76:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8003e78:	7efb      	ldrb	r3, [r7, #27]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	f7fe f9cf 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8003e82:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <print_menu_items+0x124>)
 8003e84:	4638      	mov	r0, r7
 8003e86:	2301      	movs	r3, #1
 8003e88:	ca06      	ldmia	r2, {r1, r2}
 8003e8a:	f7fe f9a3 	bl	80021d4 <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	7c1b      	ldrb	r3, [r3, #16]
 8003e92:	4618      	mov	r0, r3
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	220a      	movs	r2, #10
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f004 f9b1 	bl	8008200 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8003e9e:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <print_menu_items+0x12c>)
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	7efa      	ldrb	r2, [r7, #27]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fe f9b9 	bl	8002220 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003eae:	4a1c      	ldr	r2, [pc, #112]	; (8003f20 <print_menu_items+0x124>)
 8003eb0:	1d38      	adds	r0, r7, #4
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	ca06      	ldmia	r2, {r1, r2}
 8003eb6:	f7fe f98d 	bl	80021d4 <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	6959      	ldr	r1, [r3, #20]
 8003ebe:	1d3b      	adds	r3, r7, #4
 8003ec0:	220f      	movs	r2, #15
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f004 fa99 	bl	80083fa <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8003ec8:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <print_menu_items+0x130>)
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	7efa      	ldrb	r2, [r7, #27]
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe f9a4 	bl	8002220 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003ed8:	4a11      	ldr	r2, [pc, #68]	; (8003f20 <print_menu_items+0x124>)
 8003eda:	1d38      	adds	r0, r7, #4
 8003edc:	2301      	movs	r3, #1
 8003ede:	ca06      	ldmia	r2, {r1, r2}
 8003ee0:	f7fe f978 	bl	80021d4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8003ee4:	f7fe f866 	bl	8001fb4 <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00b      	beq.n	8003f0c <print_menu_items+0x110>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <print_menu_items+0x134>)
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	7efb      	ldrb	r3, [r7, #27]
 8003efa:	4413      	add	r3, r2
 8003efc:	76fb      	strb	r3, [r7, #27]
 8003efe:	7efb      	ldrb	r3, [r7, #27]
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <print_menu_items+0x138>)
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d9ad      	bls.n	8003e66 <print_menu_items+0x6a>
 8003f0a:	e000      	b.n	8003f0e <print_menu_items+0x112>
		{
			break;
 8003f0c:	bf00      	nop
		}
	}
	scroll_bar();
 8003f0e:	f7ff fceb 	bl	80038e8 <scroll_bar>
}
 8003f12:	bf00      	nop
 8003f14:	3720      	adds	r7, #32
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000030 	.word	0x20000030
 8003f20:	2000001c 	.word	0x2000001c
 8003f24:	20000038 	.word	0x20000038
 8003f28:	20000042 	.word	0x20000042
 8003f2c:	20000044 	.word	0x20000044
 8003f30:	20000040 	.word	0x20000040
 8003f34:	2000003e 	.word	0x2000003e

08003f38 <return_from_menu>:
// ----------------------------------------------------------------------------------------
void return_from_menu(void)
{
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
	currentItem = &items[0];											// Jump to main menu
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <return_from_menu+0x44>)
 8003f40:	4a0f      	ldr	r2, [pc, #60]	; (8003f80 <return_from_menu+0x48>)
 8003f42:	601a      	str	r2, [r3, #0]
	clearn_oled();
 8003f44:	f7fd ff86 	bl	8001e54 <clearn_oled>

	// Print "MAIN MENU:"
	char str[20] = ">> MAIN MENU <<";
 8003f48:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <return_from_menu+0x4c>)
 8003f4a:	1d3c      	adds	r4, r7, #4
 8003f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8003f56:	2103      	movs	r1, #3
 8003f58:	200a      	movs	r0, #10
 8003f5a:	f7fe f961 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <return_from_menu+0x50>)
 8003f60:	1d38      	adds	r0, r7, #4
 8003f62:	2301      	movs	r3, #1
 8003f64:	ca06      	ldmia	r2, {r1, r2}
 8003f66:	f7fe f935 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003f6a:	f7fe f823 	bl	8001fb4 <ssd1306_UpdateScreen>

	print_menu_init();													// Print all start menu
 8003f6e:	f7ff feaf 	bl	8003cd0 <print_menu_init>
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd90      	pop	{r4, r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000030 	.word	0x20000030
 8003f80:	2000094c 	.word	0x2000094c
 8003f84:	08008ccc 	.word	0x08008ccc
 8003f88:	2000001c 	.word	0x2000001c

08003f8c <lora_rx_mode>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// LORA FUNCTIONS
void lora_rx_mode(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
	clearn_oled();
 8003f92:	f7fd ff5f 	bl	8001e54 <clearn_oled>
	print_rectangle_on_head();
 8003f96:	f7ff fd1b 	bl	80039d0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <lora_rx_mode+0x88>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6959      	ldr	r1, [r3, #20]
 8003fae:	463b      	mov	r3, r7
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f004 fa21 	bl	80083fa <strncpy>
	ssd1306_SetCursor(10, 3);
 8003fb8:	2103      	movs	r1, #3
 8003fba:	200a      	movs	r0, #10
 8003fbc:	f7fe f930 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003fc0:	4a15      	ldr	r2, [pc, #84]	; (8004018 <lora_rx_mode+0x8c>)
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	ca06      	ldmia	r2, {r1, r2}
 8003fc8:	f7fe f904 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003fcc:	f7fd fff2 	bl	8001fb4 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8003fd0:	463b      	mov	r3, r7
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f004 f922 	bl	8008220 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <lora_rx_mode+0x90>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <lora_rx_mode+0x94>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_RX(true);
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f7fc fd47 	bl	8000a7c <LoRa_RX>
	}while (button_status != BUTTON_ENTER);
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <lora_rx_mode+0x90>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d1f8      	bne.n	8003fe8 <lora_rx_mode+0x5c>
	LoRa_RX(false);
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	f7fc fd40 	bl	8000a7c <LoRa_RX>

	block_interrupt_form_up_and_down_buttons = false;
 8003ffc:	4b08      	ldr	r3, [pc, #32]	; (8004020 <lora_rx_mode+0x94>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8004002:	4b04      	ldr	r3, [pc, #16]	; (8004014 <lora_rx_mode+0x88>)
 8004004:	4a07      	ldr	r2, [pc, #28]	; (8004024 <lora_rx_mode+0x98>)
 8004006:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8004008:	f7ff fef8 	bl	8003dfc <print_menu_items>
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000030 	.word	0x20000030
 8004018:	2000001c 	.word	0x2000001c
 800401c:	2000059d 	.word	0x2000059d
 8004020:	2000059c 	.word	0x2000059c
 8004024:	20000850 	.word	0x20000850

08004028 <lora_tx_mode>:
// ----------------------------------------------------------------------------------------
void lora_tx_mode(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
	clearn_oled();
 800402e:	f7fd ff11 	bl	8001e54 <clearn_oled>
	print_rectangle_on_head();
 8004032:	f7ff fccd 	bl	80039d0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004036:	2300      	movs	r3, #0
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	1d3b      	adds	r3, r7, #4
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <lora_tx_mode+0x88>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6959      	ldr	r1, [r3, #20]
 800404a:	463b      	mov	r3, r7
 800404c:	220f      	movs	r2, #15
 800404e:	4618      	mov	r0, r3
 8004050:	f004 f9d3 	bl	80083fa <strncpy>
	ssd1306_SetCursor(10, 3);
 8004054:	2103      	movs	r1, #3
 8004056:	200a      	movs	r0, #10
 8004058:	f7fe f8e2 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800405c:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <lora_tx_mode+0x8c>)
 800405e:	4638      	mov	r0, r7
 8004060:	2301      	movs	r3, #1
 8004062:	ca06      	ldmia	r2, {r1, r2}
 8004064:	f7fe f8b6 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004068:	f7fd ffa4 	bl	8001fb4 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800406c:	463b      	mov	r3, r7
 800406e:	2210      	movs	r2, #16
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f004 f8d4 	bl	8008220 <memset>


	button_status = BOTTON_DOESENT_PRESS;
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <lora_tx_mode+0x90>)
 800407a:	2200      	movs	r2, #0
 800407c:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <lora_tx_mode+0x94>)
 8004080:	2201      	movs	r2, #1
 8004082:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_TX_send_test_number(true);
 8004084:	2001      	movs	r0, #1
 8004086:	f7fc fdb9 	bl	8000bfc <LoRa_TX_send_test_number>

	}while (button_status != BUTTON_ENTER);
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <lora_tx_mode+0x90>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d1f8      	bne.n	8004084 <lora_tx_mode+0x5c>
	LoRa_TX_send_test_number(false);
 8004092:	2000      	movs	r0, #0
 8004094:	f7fc fdb2 	bl	8000bfc <LoRa_TX_send_test_number>

	block_interrupt_form_up_and_down_buttons = false;
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <lora_tx_mode+0x94>)
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 800409e:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <lora_tx_mode+0x88>)
 80040a0:	4a07      	ldr	r2, [pc, #28]	; (80040c0 <lora_tx_mode+0x98>)
 80040a2:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 80040a4:	f7ff feaa 	bl	8003dfc <print_menu_items>
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000030 	.word	0x20000030
 80040b4:	2000001c 	.word	0x2000001c
 80040b8:	2000059d 	.word	0x2000059d
 80040bc:	2000059c 	.word	0x2000059c
 80040c0:	20000850 	.word	0x20000850

080040c4 <lora_tx_mode_send_T_and_H>:
// ----------------------------------------------------------------------------------------
void lora_tx_mode_send_T_and_H(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
	clearn_oled();
 80040ca:	f7fd fec3 	bl	8001e54 <clearn_oled>
	print_rectangle_on_head();
 80040ce:	f7ff fc7f 	bl	80039d0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 80040d2:	2300      	movs	r3, #0
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80040e0:	4b1a      	ldr	r3, [pc, #104]	; (800414c <lora_tx_mode_send_T_and_H+0x88>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6959      	ldr	r1, [r3, #20]
 80040e6:	463b      	mov	r3, r7
 80040e8:	220f      	movs	r2, #15
 80040ea:	4618      	mov	r0, r3
 80040ec:	f004 f985 	bl	80083fa <strncpy>
	ssd1306_SetCursor(10, 3);
 80040f0:	2103      	movs	r1, #3
 80040f2:	200a      	movs	r0, #10
 80040f4:	f7fe f894 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80040f8:	4a15      	ldr	r2, [pc, #84]	; (8004150 <lora_tx_mode_send_T_and_H+0x8c>)
 80040fa:	4638      	mov	r0, r7
 80040fc:	2301      	movs	r3, #1
 80040fe:	ca06      	ldmia	r2, {r1, r2}
 8004100:	f7fe f868 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004104:	f7fd ff56 	bl	8001fb4 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004108:	463b      	mov	r3, r7
 800410a:	2210      	movs	r2, #16
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f004 f886 	bl	8008220 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <lora_tx_mode_send_T_and_H+0x90>)
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800411a:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <lora_tx_mode_send_T_and_H+0x94>)
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_TX_send_T_and_H(true);
 8004120:	2001      	movs	r0, #1
 8004122:	f7fc fee3 	bl	8000eec <LoRa_TX_send_T_and_H>

	}while (button_status != BUTTON_ENTER);
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <lora_tx_mode_send_T_and_H+0x90>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d1f8      	bne.n	8004120 <lora_tx_mode_send_T_and_H+0x5c>
	LoRa_TX_send_T_and_H(false);
 800412e:	2000      	movs	r0, #0
 8004130:	f7fc fedc 	bl	8000eec <LoRa_TX_send_T_and_H>

	block_interrupt_form_up_and_down_buttons = false;
 8004134:	4b08      	ldr	r3, [pc, #32]	; (8004158 <lora_tx_mode_send_T_and_H+0x94>)
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 800413a:	4b04      	ldr	r3, [pc, #16]	; (800414c <lora_tx_mode_send_T_and_H+0x88>)
 800413c:	4a07      	ldr	r2, [pc, #28]	; (800415c <lora_tx_mode_send_T_and_H+0x98>)
 800413e:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8004140:	f7ff fe5c 	bl	8003dfc <print_menu_items>
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000030 	.word	0x20000030
 8004150:	2000001c 	.word	0x2000001c
 8004154:	2000059d 	.word	0x2000059d
 8004158:	2000059c 	.word	0x2000059c
 800415c:	20000850 	.word	0x20000850

08004160 <nrf_rx_mode>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// NRF FUNCTIONS
void nrf_rx_mode(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
	clearn_oled();
 8004166:	f7fd fe75 	bl	8001e54 <clearn_oled>
	NRF24_init_RX_mode();
 800416a:	f7fd f9a3 	bl	80014b4 <NRF24_init_RX_mode>
	print_rectangle_on_head();
 800416e:	f7ff fc2f 	bl	80039d0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004172:	2300      	movs	r3, #0
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004180:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <nrf_rx_mode+0x98>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6959      	ldr	r1, [r3, #20]
 8004186:	463b      	mov	r3, r7
 8004188:	220f      	movs	r2, #15
 800418a:	4618      	mov	r0, r3
 800418c:	f004 f935 	bl	80083fa <strncpy>
	ssd1306_SetCursor(10, 3);
 8004190:	2103      	movs	r1, #3
 8004192:	200a      	movs	r0, #10
 8004194:	f7fe f844 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004198:	4a18      	ldr	r2, [pc, #96]	; (80041fc <nrf_rx_mode+0x9c>)
 800419a:	4638      	mov	r0, r7
 800419c:	2301      	movs	r3, #1
 800419e:	ca06      	ldmia	r2, {r1, r2}
 80041a0:	f7fe f818 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80041a4:	f7fd ff06 	bl	8001fb4 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80041a8:	463b      	mov	r3, r7
 80041aa:	2210      	movs	r2, #16
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f004 f836 	bl	8008220 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 80041b4:	4b12      	ldr	r3, [pc, #72]	; (8004200 <nrf_rx_mode+0xa0>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80041ba:	4b12      	ldr	r3, [pc, #72]	; (8004204 <nrf_rx_mode+0xa4>)
 80041bc:	2201      	movs	r2, #1
 80041be:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		NRF24L01_Receive();
 80041c0:	f7fd f916 	bl	80013f0 <NRF24L01_Receive>
	}while (button_status != BUTTON_ENTER);
 80041c4:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <nrf_rx_mode+0xa0>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d1f9      	bne.n	80041c0 <nrf_rx_mode+0x60>

	NRF24_WriteReg(CONFIG, 0x00); 										// STOP work with nrf module  (Power off)
 80041cc:	2100      	movs	r1, #0
 80041ce:	2000      	movs	r0, #0
 80041d0:	f7fd fcac 	bl	8001b2c <NRF24_WriteReg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				// Turn off GREEN LED
 80041d4:	2201      	movs	r2, #1
 80041d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041da:	480b      	ldr	r0, [pc, #44]	; (8004208 <nrf_rx_mode+0xa8>)
 80041dc:	f001 f8d3 	bl	8005386 <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;
 80041e0:	4b08      	ldr	r3, [pc, #32]	; (8004204 <nrf_rx_mode+0xa4>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 80041e6:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <nrf_rx_mode+0x98>)
 80041e8:	4a08      	ldr	r2, [pc, #32]	; (800420c <nrf_rx_mode+0xac>)
 80041ea:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 80041ec:	f7ff fe06 	bl	8003dfc <print_menu_items>
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20000030 	.word	0x20000030
 80041fc:	2000001c 	.word	0x2000001c
 8004200:	2000059d 	.word	0x2000059d
 8004204:	2000059c 	.word	0x2000059c
 8004208:	40011000 	.word	0x40011000
 800420c:	200007e4 	.word	0x200007e4

08004210 <nrf_tx_mode_send_test_number>:
// ----------------------------------------------------------------------------------------
void nrf_tx_mode_send_test_number(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
	clearn_oled();
 8004216:	f7fd fe1d 	bl	8001e54 <clearn_oled>
	NRF24_init_TX_mode();
 800421a:	f7fd fa0f 	bl	800163c <NRF24_init_TX_mode>
	print_rectangle_on_head();
 800421e:	f7ff fbd7 	bl	80039d0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004222:	2300      	movs	r3, #0
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004230:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <nrf_tx_mode_send_test_number+0xb0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6959      	ldr	r1, [r3, #20]
 8004236:	463b      	mov	r3, r7
 8004238:	220f      	movs	r2, #15
 800423a:	4618      	mov	r0, r3
 800423c:	f004 f8dd 	bl	80083fa <strncpy>
	ssd1306_SetCursor(10, 3);
 8004240:	2103      	movs	r1, #3
 8004242:	200a      	movs	r0, #10
 8004244:	f7fd ffec 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004248:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <nrf_tx_mode_send_test_number+0xb4>)
 800424a:	4638      	mov	r0, r7
 800424c:	2301      	movs	r3, #1
 800424e:	ca06      	ldmia	r2, {r1, r2}
 8004250:	f7fd ffc0 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004254:	f7fd feae 	bl	8001fb4 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004258:	463b      	mov	r3, r7
 800425a:	2210      	movs	r2, #16
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f003 ffde 	bl	8008220 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004264:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <nrf_tx_mode_send_test_number+0xb8>)
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800426a:	4b18      	ldr	r3, [pc, #96]	; (80042cc <nrf_tx_mode_send_test_number+0xbc>)
 800426c:	2201      	movs	r2, #1
 800426e:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		NRF24L01_Transmission();
 8004270:	f7fd faf2 	bl	8001858 <NRF24L01_Transmission>
	}while (button_status != BUTTON_ENTER);
 8004274:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <nrf_tx_mode_send_test_number+0xb8>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d1f9      	bne.n	8004270 <nrf_tx_mode_send_test_number+0x60>
	i = 1; 																// Counter transmitted data
 800427c:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <nrf_tx_mode_send_test_number+0xc0>)
 800427e:	2201      	movs	r2, #1
 8004280:	601a      	str	r2, [r3, #0]
	test_data = 0;									  					// Init test data for transmit data
 8004282:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <nrf_tx_mode_send_test_number+0xc4>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
	retr_cnt_full = 0;
 8004288:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <nrf_tx_mode_send_test_number+0xc8>)
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
	cnt_lost = 0;
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <nrf_tx_mode_send_test_number+0xcc>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

	NRF24_WriteReg(CONFIG, 0x00); 										// STOP work with nrf module  (Power off)
 8004294:	2100      	movs	r1, #0
 8004296:	2000      	movs	r0, #0
 8004298:	f7fd fc48 	bl	8001b2c <NRF24_WriteReg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				// Turn off GREEN LED
 800429c:	2201      	movs	r2, #1
 800429e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042a2:	480f      	ldr	r0, [pc, #60]	; (80042e0 <nrf_tx_mode_send_test_number+0xd0>)
 80042a4:	f001 f86f 	bl	8005386 <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <nrf_tx_mode_send_test_number+0xbc>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 80042ae:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <nrf_tx_mode_send_test_number+0xb0>)
 80042b0:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <nrf_tx_mode_send_test_number+0xd4>)
 80042b2:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 80042b4:	f7ff fda2 	bl	8003dfc <print_menu_items>
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000030 	.word	0x20000030
 80042c4:	2000001c 	.word	0x2000001c
 80042c8:	2000059d 	.word	0x2000059d
 80042cc:	2000059c 	.word	0x2000059c
 80042d0:	20000018 	.word	0x20000018
 80042d4:	20000140 	.word	0x20000140
 80042d8:	20000138 	.word	0x20000138
 80042dc:	2000013c 	.word	0x2000013c
 80042e0:	40011000 	.word	0x40011000
 80042e4:	200007e4 	.word	0x200007e4

080042e8 <am2302>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// SENSORS FUNCTIONS
// Function uses Tim2 for periodic measuring.
void am2302(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08e      	sub	sp, #56	; 0x38
 80042ec:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);		// For sensor measure
 80042ee:	48af      	ldr	r0, [pc, #700]	; (80045ac <am2302+0x2c4>)
 80042f0:	f002 fec2 	bl	8007078 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 80042f4:	2064      	movs	r0, #100	; 0x64
 80042f6:	f000 fc0d 	bl	8004b14 <HAL_Delay>
	clearn_oled();
 80042fa:	f7fd fdab 	bl	8001e54 <clearn_oled>
	print_rectangle_on_head();
 80042fe:	f7ff fb67 	bl	80039d0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004302:	2300      	movs	r3, #0
 8004304:	62bb      	str	r3, [r7, #40]	; 0x28
 8004306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	605a      	str	r2, [r3, #4]
 8004310:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004312:	4ba7      	ldr	r3, [pc, #668]	; (80045b0 <am2302+0x2c8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6959      	ldr	r1, [r3, #20]
 8004318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800431c:	220f      	movs	r2, #15
 800431e:	4618      	mov	r0, r3
 8004320:	f004 f86b 	bl	80083fa <strncpy>
	ssd1306_SetCursor(10, 3);
 8004324:	2103      	movs	r1, #3
 8004326:	200a      	movs	r0, #10
 8004328:	f7fd ff7a 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800432c:	4aa1      	ldr	r2, [pc, #644]	; (80045b4 <am2302+0x2cc>)
 800432e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004332:	2301      	movs	r3, #1
 8004334:	ca06      	ldmia	r2, {r1, r2}
 8004336:	f7fd ff4d 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800433a:	f7fd fe3b 	bl	8001fb4 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800433e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004342:	2210      	movs	r2, #16
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f003 ff6a 	bl	8008220 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 800434c:	4b9a      	ldr	r3, [pc, #616]	; (80045b8 <am2302+0x2d0>)
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;	// Lock interrupt from UP and DOWN buttons
 8004352:	4b9a      	ldr	r3, [pc, #616]	; (80045bc <am2302+0x2d4>)
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]
	measure_counter = 1;
 8004358:	4b99      	ldr	r3, [pc, #612]	; (80045c0 <am2302+0x2d8>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		// Print data
		if(am2302_ready == true)						// Flug from interrup tim2
 800435e:	4b99      	ldr	r3, [pc, #612]	; (80045c4 <am2302+0x2dc>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 8101 	beq.w	800456a <am2302+0x282>
		{
			char str_temperature[10] = {0};
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	f107 0320 	add.w	r3, r7, #32
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	809a      	strh	r2, [r3, #4]
			char str_humidity[10] = {0};
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	f107 0314 	add.w	r3, r7, #20
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	809a      	strh	r2, [r3, #4]
			char str_1[10] = {0};
 8004384:	2300      	movs	r3, #0
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	f107 0308 	add.w	r3, r7, #8
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	809a      	strh	r2, [r3, #4]

			// Clear data place on OLED
			memset(str, ' ', sizeof(str));
 8004392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004396:	2210      	movs	r2, #16
 8004398:	2120      	movs	r1, #32
 800439a:	4618      	mov	r0, r3
 800439c:	f003 ff40 	bl	8008220 <memset>
			ssd1306_SetCursor(10, first_menu_row);
 80043a0:	4b89      	ldr	r3, [pc, #548]	; (80045c8 <am2302+0x2e0>)
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	4619      	mov	r1, r3
 80043a8:	200a      	movs	r0, #10
 80043aa:	f7fd ff39 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 80043ae:	4a81      	ldr	r2, [pc, #516]	; (80045b4 <am2302+0x2cc>)
 80043b0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80043b4:	2301      	movs	r3, #1
 80043b6:	ca06      	ldmia	r2, {r1, r2}
 80043b8:	f7fd ff0c 	bl	80021d4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80043bc:	f7fd fdfa 	bl	8001fb4 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(10, second_menu_row);
 80043c0:	4b82      	ldr	r3, [pc, #520]	; (80045cc <am2302+0x2e4>)
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	4619      	mov	r1, r3
 80043c8:	200a      	movs	r0, #10
 80043ca:	f7fd ff29 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 80043ce:	4a79      	ldr	r2, [pc, #484]	; (80045b4 <am2302+0x2cc>)
 80043d0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80043d4:	2301      	movs	r3, #1
 80043d6:	ca06      	ldmia	r2, {r1, r2}
 80043d8:	f7fd fefc 	bl	80021d4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80043dc:	f7fd fdea 	bl	8001fb4 <ssd1306_UpdateScreen>
			memset(str, 0, sizeof(str));
 80043e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043e4:	2210      	movs	r2, #16
 80043e6:	2100      	movs	r1, #0
 80043e8:	4618      	mov	r0, r3
 80043ea:	f003 ff19 	bl	8008220 <memset>

			// Print T and H on OLED
			itoa(am3202_sensor.temterature , str, 10);
 80043ee:	4b78      	ldr	r3, [pc, #480]	; (80045d0 <am2302+0x2e8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80043f6:	220a      	movs	r2, #10
 80043f8:	4618      	mov	r0, r3
 80043fa:	f003 ff01 	bl	8008200 <itoa>
			strcat(str_temperature, "T = ");
 80043fe:	f107 031c 	add.w	r3, r7, #28
 8004402:	4618      	mov	r0, r3
 8004404:	f7fb fea2 	bl	800014c <strlen>
 8004408:	4603      	mov	r3, r0
 800440a:	461a      	mov	r2, r3
 800440c:	f107 031c 	add.w	r3, r7, #28
 8004410:	4413      	add	r3, r2
 8004412:	4a70      	ldr	r2, [pc, #448]	; (80045d4 <am2302+0x2ec>)
 8004414:	6810      	ldr	r0, [r2, #0]
 8004416:	6018      	str	r0, [r3, #0]
 8004418:	7912      	ldrb	r2, [r2, #4]
 800441a:	711a      	strb	r2, [r3, #4]
			strcat(str_temperature, str);
 800441c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004420:	f107 031c 	add.w	r3, r7, #28
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f003 ffd8 	bl	80083dc <strcat>
			strcat(str_temperature, " C");
 800442c:	f107 031c 	add.w	r3, r7, #28
 8004430:	4618      	mov	r0, r3
 8004432:	f7fb fe8b 	bl	800014c <strlen>
 8004436:	4603      	mov	r3, r0
 8004438:	461a      	mov	r2, r3
 800443a:	f107 031c 	add.w	r3, r7, #28
 800443e:	4413      	add	r3, r2
 8004440:	4a65      	ldr	r2, [pc, #404]	; (80045d8 <am2302+0x2f0>)
 8004442:	8811      	ldrh	r1, [r2, #0]
 8004444:	7892      	ldrb	r2, [r2, #2]
 8004446:	8019      	strh	r1, [r3, #0]
 8004448:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, first_menu_row);
 800444a:	4b5f      	ldr	r3, [pc, #380]	; (80045c8 <am2302+0x2e0>)
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	4619      	mov	r1, r3
 8004452:	200a      	movs	r0, #10
 8004454:	f7fd fee4 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str_temperature,  Font_7x10, White);
 8004458:	4a56      	ldr	r2, [pc, #344]	; (80045b4 <am2302+0x2cc>)
 800445a:	f107 001c 	add.w	r0, r7, #28
 800445e:	2301      	movs	r3, #1
 8004460:	ca06      	ldmia	r2, {r1, r2}
 8004462:	f7fd feb7 	bl	80021d4 <ssd1306_WriteString>
			memset(str, 0,sizeof(str));
 8004466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800446a:	2210      	movs	r2, #16
 800446c:	2100      	movs	r1, #0
 800446e:	4618      	mov	r0, r3
 8004470:	f003 fed6 	bl	8008220 <memset>

			itoa(am3202_sensor.humidity , str, 10);
 8004474:	4b56      	ldr	r3, [pc, #344]	; (80045d0 <am2302+0x2e8>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800447c:	220a      	movs	r2, #10
 800447e:	4618      	mov	r0, r3
 8004480:	f003 febe 	bl	8008200 <itoa>
			strcat(str_humidity, "H = ");
 8004484:	f107 0310 	add.w	r3, r7, #16
 8004488:	4618      	mov	r0, r3
 800448a:	f7fb fe5f 	bl	800014c <strlen>
 800448e:	4603      	mov	r3, r0
 8004490:	461a      	mov	r2, r3
 8004492:	f107 0310 	add.w	r3, r7, #16
 8004496:	4413      	add	r3, r2
 8004498:	4a50      	ldr	r2, [pc, #320]	; (80045dc <am2302+0x2f4>)
 800449a:	6810      	ldr	r0, [r2, #0]
 800449c:	6018      	str	r0, [r3, #0]
 800449e:	7912      	ldrb	r2, [r2, #4]
 80044a0:	711a      	strb	r2, [r3, #4]
			strcat(str_humidity, str);
 80044a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044a6:	f107 0310 	add.w	r3, r7, #16
 80044aa:	4611      	mov	r1, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f003 ff95 	bl	80083dc <strcat>
			strcat(str_humidity, " %");
 80044b2:	f107 0310 	add.w	r3, r7, #16
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fb fe48 	bl	800014c <strlen>
 80044bc:	4603      	mov	r3, r0
 80044be:	461a      	mov	r2, r3
 80044c0:	f107 0310 	add.w	r3, r7, #16
 80044c4:	4413      	add	r3, r2
 80044c6:	4a46      	ldr	r2, [pc, #280]	; (80045e0 <am2302+0x2f8>)
 80044c8:	8811      	ldrh	r1, [r2, #0]
 80044ca:	7892      	ldrb	r2, [r2, #2]
 80044cc:	8019      	strh	r1, [r3, #0]
 80044ce:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, second_menu_row);
 80044d0:	4b3e      	ldr	r3, [pc, #248]	; (80045cc <am2302+0x2e4>)
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	4619      	mov	r1, r3
 80044d8:	200a      	movs	r0, #10
 80044da:	f7fd fea1 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str_humidity,  Font_7x10, White);
 80044de:	4a35      	ldr	r2, [pc, #212]	; (80045b4 <am2302+0x2cc>)
 80044e0:	f107 0010 	add.w	r0, r7, #16
 80044e4:	2301      	movs	r3, #1
 80044e6:	ca06      	ldmia	r2, {r1, r2}
 80044e8:	f7fd fe74 	bl	80021d4 <ssd1306_WriteString>

			// Print counter
			memset(str, 0,sizeof(str));
 80044ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044f0:	2210      	movs	r2, #16
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f003 fe93 	bl	8008220 <memset>
			strcat(str, "Counter: ");
 80044fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fb fe24 	bl	800014c <strlen>
 8004504:	4603      	mov	r3, r0
 8004506:	461a      	mov	r2, r3
 8004508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800450c:	4413      	add	r3, r2
 800450e:	4935      	ldr	r1, [pc, #212]	; (80045e4 <am2302+0x2fc>)
 8004510:	461a      	mov	r2, r3
 8004512:	460b      	mov	r3, r1
 8004514:	cb03      	ldmia	r3!, {r0, r1}
 8004516:	6010      	str	r0, [r2, #0]
 8004518:	6051      	str	r1, [r2, #4]
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	8113      	strh	r3, [r2, #8]
			itoa(measure_counter , str_1, 10);
 800451e:	4b28      	ldr	r3, [pc, #160]	; (80045c0 <am2302+0x2d8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	1d39      	adds	r1, r7, #4
 8004524:	220a      	movs	r2, #10
 8004526:	4618      	mov	r0, r3
 8004528:	f003 fe6a 	bl	8008200 <itoa>
			strcat(str, str_1);
 800452c:	1d3a      	adds	r2, r7, #4
 800452e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f003 ff51 	bl	80083dc <strcat>
			ssd1306_SetCursor(10, third_menu_row);
 800453a:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <am2302+0x300>)
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	4619      	mov	r1, r3
 8004542:	200a      	movs	r0, #10
 8004544:	f7fd fe6c 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8004548:	4a1a      	ldr	r2, [pc, #104]	; (80045b4 <am2302+0x2cc>)
 800454a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800454e:	2301      	movs	r3, #1
 8004550:	ca06      	ldmia	r2, {r1, r2}
 8004552:	f7fd fe3f 	bl	80021d4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004556:	f7fd fd2d 	bl	8001fb4 <ssd1306_UpdateScreen>

			measure_counter++;
 800455a:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <am2302+0x2d8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3301      	adds	r3, #1
 8004560:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <am2302+0x2d8>)
 8004562:	6013      	str	r3, [r2, #0]
			am2302_ready = false;
 8004564:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <am2302+0x2dc>)
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]
		}

	}while (button_status != BUTTON_ENTER);
 800456a:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <am2302+0x2d0>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b02      	cmp	r3, #2
 8004570:	f47f aef5 	bne.w	800435e <am2302+0x76>
	HAL_TIM_Base_Stop_IT(&htim2);
 8004574:	480d      	ldr	r0, [pc, #52]	; (80045ac <am2302+0x2c4>)
 8004576:	f002 fdd1 	bl	800711c <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn off LED
 800457a:	2201      	movs	r2, #1
 800457c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004580:	481a      	ldr	r0, [pc, #104]	; (80045ec <am2302+0x304>)
 8004582:	f000 ff00 	bl	8005386 <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;	// Unlock  UP and DOWN buttons interrupt
 8004586:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <am2302+0x2d4>)
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]

	am3202_sensor.temterature = 0;
 800458c:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <am2302+0x2e8>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
	am3202_sensor.humidity = 0;
 8004592:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <am2302+0x2e8>)
 8004594:	2200      	movs	r2, #0
 8004596:	605a      	str	r2, [r3, #4]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <am2302+0x2c8>)
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <am2302+0x308>)
 800459c:	601a      	str	r2, [r3, #0]
	print_menu_items();
 800459e:	f7ff fc2d 	bl	8003dfc <print_menu_items>
}
 80045a2:	bf00      	nop
 80045a4:	3738      	adds	r7, #56	; 0x38
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000730 	.word	0x20000730
 80045b0:	20000030 	.word	0x20000030
 80045b4:	2000001c 	.word	0x2000001c
 80045b8:	2000059d 	.word	0x2000059d
 80045bc:	2000059c 	.word	0x2000059c
 80045c0:	20000598 	.word	0x20000598
 80045c4:	2000058c 	.word	0x2000058c
 80045c8:	20000038 	.word	0x20000038
 80045cc:	2000003a 	.word	0x2000003a
 80045d0:	200005a8 	.word	0x200005a8
 80045d4:	08008ce0 	.word	0x08008ce0
 80045d8:	08008ce8 	.word	0x08008ce8
 80045dc:	08008cec 	.word	0x08008cec
 80045e0:	08008cf4 	.word	0x08008cf4
 80045e4:	08008cf8 	.word	0x08008cf8
 80045e8:	2000003c 	.word	0x2000003c
 80045ec:	40011000 	.word	0x40011000
 80045f0:	200008bc 	.word	0x200008bc

080045f4 <periodic_measurement_am2302_on>:
// ----------------------------------------------------------------------------------------
// Function uses Tim2 for periodic measuring.
void periodic_measurement_am2302_on(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08e      	sub	sp, #56	; 0x38
 80045f8:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);		// For sensor measure
 80045fa:	48a7      	ldr	r0, [pc, #668]	; (8004898 <periodic_measurement_am2302_on+0x2a4>)
 80045fc:	f002 fd3c 	bl	8007078 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 8004600:	2064      	movs	r0, #100	; 0x64
 8004602:	f000 fa87 	bl	8004b14 <HAL_Delay>
	clearn_oled();
 8004606:	f7fd fc25 	bl	8001e54 <clearn_oled>
	print_rectangle_on_head();
 800460a:	f7ff f9e1 	bl	80039d0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 800460e:	2300      	movs	r3, #0
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
 8004612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 800461e:	4b9f      	ldr	r3, [pc, #636]	; (800489c <periodic_measurement_am2302_on+0x2a8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6959      	ldr	r1, [r3, #20]
 8004624:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004628:	220f      	movs	r2, #15
 800462a:	4618      	mov	r0, r3
 800462c:	f003 fee5 	bl	80083fa <strncpy>
	ssd1306_SetCursor(10, 3);
 8004630:	2103      	movs	r1, #3
 8004632:	200a      	movs	r0, #10
 8004634:	f7fd fdf4 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004638:	4a99      	ldr	r2, [pc, #612]	; (80048a0 <periodic_measurement_am2302_on+0x2ac>)
 800463a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800463e:	2301      	movs	r3, #1
 8004640:	ca06      	ldmia	r2, {r1, r2}
 8004642:	f7fd fdc7 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004646:	f7fd fcb5 	bl	8001fb4 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800464a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800464e:	2210      	movs	r2, #16
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f003 fde4 	bl	8008220 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004658:	4b92      	ldr	r3, [pc, #584]	; (80048a4 <periodic_measurement_am2302_on+0x2b0>)
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800465e:	4b92      	ldr	r3, [pc, #584]	; (80048a8 <periodic_measurement_am2302_on+0x2b4>)
 8004660:	2201      	movs	r2, #1
 8004662:	701a      	strb	r2, [r3, #0]
	measure_counter = 1;
 8004664:	4b91      	ldr	r3, [pc, #580]	; (80048ac <periodic_measurement_am2302_on+0x2b8>)
 8004666:	2201      	movs	r2, #1
 8004668:	601a      	str	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		// Print data
		if(am2302_ready == true)	// Flug from interrup tim2
 800466a:	4b91      	ldr	r3, [pc, #580]	; (80048b0 <periodic_measurement_am2302_on+0x2bc>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8101 	beq.w	8004876 <periodic_measurement_am2302_on+0x282>
		{
			char str_temperature[10] = {0};
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
 8004678:	f107 0320 	add.w	r3, r7, #32
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	809a      	strh	r2, [r3, #4]
			char str_humidity[10] = {0};
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	f107 0314 	add.w	r3, r7, #20
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	809a      	strh	r2, [r3, #4]
			char str_1[10] = {0};
 8004690:	2300      	movs	r3, #0
 8004692:	607b      	str	r3, [r7, #4]
 8004694:	f107 0308 	add.w	r3, r7, #8
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	809a      	strh	r2, [r3, #4]

			// Clear data place on OLED
			memset(str, ' ', sizeof(str));
 800469e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046a2:	2210      	movs	r2, #16
 80046a4:	2120      	movs	r1, #32
 80046a6:	4618      	mov	r0, r3
 80046a8:	f003 fdba 	bl	8008220 <memset>
			ssd1306_SetCursor(10, first_menu_row);
 80046ac:	4b81      	ldr	r3, [pc, #516]	; (80048b4 <periodic_measurement_am2302_on+0x2c0>)
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	4619      	mov	r1, r3
 80046b4:	200a      	movs	r0, #10
 80046b6:	f7fd fdb3 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 80046ba:	4a79      	ldr	r2, [pc, #484]	; (80048a0 <periodic_measurement_am2302_on+0x2ac>)
 80046bc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80046c0:	2301      	movs	r3, #1
 80046c2:	ca06      	ldmia	r2, {r1, r2}
 80046c4:	f7fd fd86 	bl	80021d4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80046c8:	f7fd fc74 	bl	8001fb4 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(10, second_menu_row);
 80046cc:	4b7a      	ldr	r3, [pc, #488]	; (80048b8 <periodic_measurement_am2302_on+0x2c4>)
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	4619      	mov	r1, r3
 80046d4:	200a      	movs	r0, #10
 80046d6:	f7fd fda3 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 80046da:	4a71      	ldr	r2, [pc, #452]	; (80048a0 <periodic_measurement_am2302_on+0x2ac>)
 80046dc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80046e0:	2301      	movs	r3, #1
 80046e2:	ca06      	ldmia	r2, {r1, r2}
 80046e4:	f7fd fd76 	bl	80021d4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80046e8:	f7fd fc64 	bl	8001fb4 <ssd1306_UpdateScreen>

			memset(str, 0, sizeof(str));
 80046ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046f0:	2210      	movs	r2, #16
 80046f2:	2100      	movs	r1, #0
 80046f4:	4618      	mov	r0, r3
 80046f6:	f003 fd93 	bl	8008220 <memset>
			// Print T and H on OLED

			itoa(am3202_sensor.temterature , str, 10);
 80046fa:	4b70      	ldr	r3, [pc, #448]	; (80048bc <periodic_measurement_am2302_on+0x2c8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004702:	220a      	movs	r2, #10
 8004704:	4618      	mov	r0, r3
 8004706:	f003 fd7b 	bl	8008200 <itoa>
			strcat(str_temperature, "T = ");
 800470a:	f107 031c 	add.w	r3, r7, #28
 800470e:	4618      	mov	r0, r3
 8004710:	f7fb fd1c 	bl	800014c <strlen>
 8004714:	4603      	mov	r3, r0
 8004716:	461a      	mov	r2, r3
 8004718:	f107 031c 	add.w	r3, r7, #28
 800471c:	4413      	add	r3, r2
 800471e:	4a68      	ldr	r2, [pc, #416]	; (80048c0 <periodic_measurement_am2302_on+0x2cc>)
 8004720:	6810      	ldr	r0, [r2, #0]
 8004722:	6018      	str	r0, [r3, #0]
 8004724:	7912      	ldrb	r2, [r2, #4]
 8004726:	711a      	strb	r2, [r3, #4]
			strcat(str_temperature, str);
 8004728:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800472c:	f107 031c 	add.w	r3, r7, #28
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f003 fe52 	bl	80083dc <strcat>
			strcat(str_temperature, " C");
 8004738:	f107 031c 	add.w	r3, r7, #28
 800473c:	4618      	mov	r0, r3
 800473e:	f7fb fd05 	bl	800014c <strlen>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	f107 031c 	add.w	r3, r7, #28
 800474a:	4413      	add	r3, r2
 800474c:	4a5d      	ldr	r2, [pc, #372]	; (80048c4 <periodic_measurement_am2302_on+0x2d0>)
 800474e:	8811      	ldrh	r1, [r2, #0]
 8004750:	7892      	ldrb	r2, [r2, #2]
 8004752:	8019      	strh	r1, [r3, #0]
 8004754:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, first_menu_row);
 8004756:	4b57      	ldr	r3, [pc, #348]	; (80048b4 <periodic_measurement_am2302_on+0x2c0>)
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	4619      	mov	r1, r3
 800475e:	200a      	movs	r0, #10
 8004760:	f7fd fd5e 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str_temperature,  Font_7x10, White);
 8004764:	4a4e      	ldr	r2, [pc, #312]	; (80048a0 <periodic_measurement_am2302_on+0x2ac>)
 8004766:	f107 001c 	add.w	r0, r7, #28
 800476a:	2301      	movs	r3, #1
 800476c:	ca06      	ldmia	r2, {r1, r2}
 800476e:	f7fd fd31 	bl	80021d4 <ssd1306_WriteString>

			memset(str, 0,sizeof(str));
 8004772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004776:	2210      	movs	r2, #16
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f003 fd50 	bl	8008220 <memset>
			itoa(am3202_sensor.humidity , str, 10);
 8004780:	4b4e      	ldr	r3, [pc, #312]	; (80048bc <periodic_measurement_am2302_on+0x2c8>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004788:	220a      	movs	r2, #10
 800478a:	4618      	mov	r0, r3
 800478c:	f003 fd38 	bl	8008200 <itoa>
			strcat(str_humidity, "H = ");
 8004790:	f107 0310 	add.w	r3, r7, #16
 8004794:	4618      	mov	r0, r3
 8004796:	f7fb fcd9 	bl	800014c <strlen>
 800479a:	4603      	mov	r3, r0
 800479c:	461a      	mov	r2, r3
 800479e:	f107 0310 	add.w	r3, r7, #16
 80047a2:	4413      	add	r3, r2
 80047a4:	4a48      	ldr	r2, [pc, #288]	; (80048c8 <periodic_measurement_am2302_on+0x2d4>)
 80047a6:	6810      	ldr	r0, [r2, #0]
 80047a8:	6018      	str	r0, [r3, #0]
 80047aa:	7912      	ldrb	r2, [r2, #4]
 80047ac:	711a      	strb	r2, [r3, #4]
			strcat(str_humidity, str);
 80047ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047b2:	f107 0310 	add.w	r3, r7, #16
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f003 fe0f 	bl	80083dc <strcat>
			strcat(str_humidity, " %");
 80047be:	f107 0310 	add.w	r3, r7, #16
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fb fcc2 	bl	800014c <strlen>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461a      	mov	r2, r3
 80047cc:	f107 0310 	add.w	r3, r7, #16
 80047d0:	4413      	add	r3, r2
 80047d2:	4a3e      	ldr	r2, [pc, #248]	; (80048cc <periodic_measurement_am2302_on+0x2d8>)
 80047d4:	8811      	ldrh	r1, [r2, #0]
 80047d6:	7892      	ldrb	r2, [r2, #2]
 80047d8:	8019      	strh	r1, [r3, #0]
 80047da:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, second_menu_row);
 80047dc:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <periodic_measurement_am2302_on+0x2c4>)
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	4619      	mov	r1, r3
 80047e4:	200a      	movs	r0, #10
 80047e6:	f7fd fd1b 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str_humidity,  Font_7x10, White);
 80047ea:	4a2d      	ldr	r2, [pc, #180]	; (80048a0 <periodic_measurement_am2302_on+0x2ac>)
 80047ec:	f107 0010 	add.w	r0, r7, #16
 80047f0:	2301      	movs	r3, #1
 80047f2:	ca06      	ldmia	r2, {r1, r2}
 80047f4:	f7fd fcee 	bl	80021d4 <ssd1306_WriteString>

			// Print counter
			memset(str, 0,sizeof(str));
 80047f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047fc:	2210      	movs	r2, #16
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f003 fd0d 	bl	8008220 <memset>
			strcat(str, "Counter: ");
 8004806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800480a:	4618      	mov	r0, r3
 800480c:	f7fb fc9e 	bl	800014c <strlen>
 8004810:	4603      	mov	r3, r0
 8004812:	461a      	mov	r2, r3
 8004814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004818:	4413      	add	r3, r2
 800481a:	492d      	ldr	r1, [pc, #180]	; (80048d0 <periodic_measurement_am2302_on+0x2dc>)
 800481c:	461a      	mov	r2, r3
 800481e:	460b      	mov	r3, r1
 8004820:	cb03      	ldmia	r3!, {r0, r1}
 8004822:	6010      	str	r0, [r2, #0]
 8004824:	6051      	str	r1, [r2, #4]
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	8113      	strh	r3, [r2, #8]
			itoa(measure_counter , str_1, 10);
 800482a:	4b20      	ldr	r3, [pc, #128]	; (80048ac <periodic_measurement_am2302_on+0x2b8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	1d39      	adds	r1, r7, #4
 8004830:	220a      	movs	r2, #10
 8004832:	4618      	mov	r0, r3
 8004834:	f003 fce4 	bl	8008200 <itoa>
			strcat(str, str_1);
 8004838:	1d3a      	adds	r2, r7, #4
 800483a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f003 fdcb 	bl	80083dc <strcat>
			ssd1306_SetCursor(10, third_menu_row);
 8004846:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <periodic_measurement_am2302_on+0x2e0>)
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	4619      	mov	r1, r3
 800484e:	200a      	movs	r0, #10
 8004850:	f7fd fce6 	bl	8002220 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8004854:	4a12      	ldr	r2, [pc, #72]	; (80048a0 <periodic_measurement_am2302_on+0x2ac>)
 8004856:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800485a:	2301      	movs	r3, #1
 800485c:	ca06      	ldmia	r2, {r1, r2}
 800485e:	f7fd fcb9 	bl	80021d4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004862:	f7fd fba7 	bl	8001fb4 <ssd1306_UpdateScreen>

			measure_counter++;
 8004866:	4b11      	ldr	r3, [pc, #68]	; (80048ac <periodic_measurement_am2302_on+0x2b8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3301      	adds	r3, #1
 800486c:	4a0f      	ldr	r2, [pc, #60]	; (80048ac <periodic_measurement_am2302_on+0x2b8>)
 800486e:	6013      	str	r3, [r2, #0]
			am2302_ready = false;
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <periodic_measurement_am2302_on+0x2bc>)
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
		}

	}while (button_status != BUTTON_ENTER);
 8004876:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <periodic_measurement_am2302_on+0x2b0>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b02      	cmp	r3, #2
 800487c:	f47f aef5 	bne.w	800466a <periodic_measurement_am2302_on+0x76>
	block_interrupt_form_up_and_down_buttons = false;	// Unlock  UP and DOWN buttons interrupt
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <periodic_measurement_am2302_on+0x2b4>)
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8004886:	4b05      	ldr	r3, [pc, #20]	; (800489c <periodic_measurement_am2302_on+0x2a8>)
 8004888:	4a13      	ldr	r2, [pc, #76]	; (80048d8 <periodic_measurement_am2302_on+0x2e4>)
 800488a:	601a      	str	r2, [r3, #0]
	print_menu_items();
 800488c:	f7ff fab6 	bl	8003dfc <print_menu_items>
}
 8004890:	bf00      	nop
 8004892:	3738      	adds	r7, #56	; 0x38
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000730 	.word	0x20000730
 800489c:	20000030 	.word	0x20000030
 80048a0:	2000001c 	.word	0x2000001c
 80048a4:	2000059d 	.word	0x2000059d
 80048a8:	2000059c 	.word	0x2000059c
 80048ac:	20000598 	.word	0x20000598
 80048b0:	2000058c 	.word	0x2000058c
 80048b4:	20000038 	.word	0x20000038
 80048b8:	2000003a 	.word	0x2000003a
 80048bc:	200005a8 	.word	0x200005a8
 80048c0:	08008ce0 	.word	0x08008ce0
 80048c4:	08008ce8 	.word	0x08008ce8
 80048c8:	08008cec 	.word	0x08008cec
 80048cc:	08008cf4 	.word	0x08008cf4
 80048d0:	08008cf8 	.word	0x08008cf8
 80048d4:	2000003c 	.word	0x2000003c
 80048d8:	200008bc 	.word	0x200008bc

080048dc <periodic_measurement_am2302_off>:
// ----------------------------------------------------------------------------------------
// Function turn off Tim2 for periodic measuring.
void periodic_measurement_am2302_off(void)
{
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);		// For sensor measure
 80048e2:	483d      	ldr	r0, [pc, #244]	; (80049d8 <periodic_measurement_am2302_off+0xfc>)
 80048e4:	f002 fbc8 	bl	8007078 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 80048e8:	2064      	movs	r0, #100	; 0x64
 80048ea:	f000 f913 	bl	8004b14 <HAL_Delay>
	clearn_oled();
 80048ee:	f7fd fab1 	bl	8001e54 <clearn_oled>
	print_rectangle_on_head();
 80048f2:	f7ff f86d 	bl	80039d0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 80048f6:	2300      	movs	r3, #0
 80048f8:	603b      	str	r3, [r7, #0]
 80048fa:	1d3b      	adds	r3, r7, #4
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004904:	4b35      	ldr	r3, [pc, #212]	; (80049dc <periodic_measurement_am2302_off+0x100>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6959      	ldr	r1, [r3, #20]
 800490a:	463b      	mov	r3, r7
 800490c:	220f      	movs	r2, #15
 800490e:	4618      	mov	r0, r3
 8004910:	f003 fd73 	bl	80083fa <strncpy>
	ssd1306_SetCursor(10, 3);
 8004914:	2103      	movs	r1, #3
 8004916:	200a      	movs	r0, #10
 8004918:	f7fd fc82 	bl	8002220 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800491c:	4a30      	ldr	r2, [pc, #192]	; (80049e0 <periodic_measurement_am2302_off+0x104>)
 800491e:	4638      	mov	r0, r7
 8004920:	2301      	movs	r3, #1
 8004922:	ca06      	ldmia	r2, {r1, r2}
 8004924:	f7fd fc56 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004928:	f7fd fb44 	bl	8001fb4 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800492c:	463b      	mov	r3, r7
 800492e:	2210      	movs	r2, #16
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f003 fc74 	bl	8008220 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004938:	4b2a      	ldr	r3, [pc, #168]	; (80049e4 <periodic_measurement_am2302_off+0x108>)
 800493a:	2200      	movs	r2, #0
 800493c:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800493e:	4b2a      	ldr	r3, [pc, #168]	; (80049e8 <periodic_measurement_am2302_off+0x10c>)
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]
	measure_counter = 1;
 8004944:	4b29      	ldr	r3, [pc, #164]	; (80049ec <periodic_measurement_am2302_off+0x110>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 800494a:	4823      	ldr	r0, [pc, #140]	; (80049d8 <periodic_measurement_am2302_off+0xfc>)
 800494c:	f002 fbe6 	bl	800711c <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn off LED
 8004950:	2201      	movs	r2, #1
 8004952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004956:	4826      	ldr	r0, [pc, #152]	; (80049f0 <periodic_measurement_am2302_off+0x114>)
 8004958:	f000 fd15 	bl	8005386 <HAL_GPIO_WritePin>

	ssd1306_SetCursor(10, second_menu_row);
 800495c:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <periodic_measurement_am2302_off+0x118>)
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	4619      	mov	r1, r3
 8004964:	200a      	movs	r0, #10
 8004966:	f7fd fc5b 	bl	8002220 <ssd1306_SetCursor>
	strcat(str, "STOP measuring");
 800496a:	463b      	mov	r3, r7
 800496c:	4618      	mov	r0, r3
 800496e:	f7fb fbed 	bl	800014c <strlen>
 8004972:	4603      	mov	r3, r0
 8004974:	461a      	mov	r2, r3
 8004976:	463b      	mov	r3, r7
 8004978:	4413      	add	r3, r2
 800497a:	4a1f      	ldr	r2, [pc, #124]	; (80049f8 <periodic_measurement_am2302_off+0x11c>)
 800497c:	461c      	mov	r4, r3
 800497e:	4613      	mov	r3, r2
 8004980:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004982:	6020      	str	r0, [r4, #0]
 8004984:	6061      	str	r1, [r4, #4]
 8004986:	60a2      	str	r2, [r4, #8]
 8004988:	881a      	ldrh	r2, [r3, #0]
 800498a:	789b      	ldrb	r3, [r3, #2]
 800498c:	81a2      	strh	r2, [r4, #12]
 800498e:	73a3      	strb	r3, [r4, #14]
	ssd1306_WriteString(str,  Font_7x10, White);
 8004990:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <periodic_measurement_am2302_off+0x104>)
 8004992:	4638      	mov	r0, r7
 8004994:	2301      	movs	r3, #1
 8004996:	ca06      	ldmia	r2, {r1, r2}
 8004998:	f7fd fc1c 	bl	80021d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800499c:	f7fd fb0a 	bl	8001fb4 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80049a0:	463b      	mov	r3, r7
 80049a2:	2210      	movs	r2, #16
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f003 fc3a 	bl	8008220 <memset>

	am3202_sensor.temterature = 0;
 80049ac:	4b13      	ldr	r3, [pc, #76]	; (80049fc <periodic_measurement_am2302_off+0x120>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
	am3202_sensor.humidity = 0;
 80049b2:	4b12      	ldr	r3, [pc, #72]	; (80049fc <periodic_measurement_am2302_off+0x120>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	605a      	str	r2, [r3, #4]

	// waiting for press enter(SW2) button
	do{

	}while (button_status != BUTTON_ENTER);
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <periodic_measurement_am2302_off+0x108>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d1fb      	bne.n	80049b8 <periodic_measurement_am2302_off+0xdc>
	block_interrupt_form_up_and_down_buttons = false;	// Unlock  UP and DOWN buttons interrupt
 80049c0:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <periodic_measurement_am2302_off+0x10c>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 80049c6:	4b05      	ldr	r3, [pc, #20]	; (80049dc <periodic_measurement_am2302_off+0x100>)
 80049c8:	4a0d      	ldr	r2, [pc, #52]	; (8004a00 <periodic_measurement_am2302_off+0x124>)
 80049ca:	601a      	str	r2, [r3, #0]
	print_menu_items();
 80049cc:	f7ff fa16 	bl	8003dfc <print_menu_items>

}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd90      	pop	{r4, r7, pc}
 80049d8:	20000730 	.word	0x20000730
 80049dc:	20000030 	.word	0x20000030
 80049e0:	2000001c 	.word	0x2000001c
 80049e4:	2000059d 	.word	0x2000059d
 80049e8:	2000059c 	.word	0x2000059c
 80049ec:	20000598 	.word	0x20000598
 80049f0:	40011000 	.word	0x40011000
 80049f4:	2000003a 	.word	0x2000003a
 80049f8:	08008d04 	.word	0x08008d04
 80049fc:	200005a8 	.word	0x200005a8
 8004a00:	200008bc 	.word	0x200008bc

08004a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a04:	480c      	ldr	r0, [pc, #48]	; (8004a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a06:	490d      	ldr	r1, [pc, #52]	; (8004a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a08:	4a0d      	ldr	r2, [pc, #52]	; (8004a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a0c:	e002      	b.n	8004a14 <LoopCopyDataInit>

08004a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a12:	3304      	adds	r3, #4

08004a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a18:	d3f9      	bcc.n	8004a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a1c:	4c0a      	ldr	r4, [pc, #40]	; (8004a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a20:	e001      	b.n	8004a26 <LoopFillZerobss>

08004a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a24:	3204      	adds	r2, #4

08004a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a28:	d3fb      	bcc.n	8004a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a2a:	f7fe fc3b 	bl	80032a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a2e:	f003 fbab 	bl	8008188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a32:	f7fd fe27 	bl	8002684 <main>
  bx lr
 8004a36:	4770      	bx	lr
  ldr r0, =_sdata
 8004a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a3c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8004a40:	0800954c 	.word	0x0800954c
  ldr r2, =_sbss
 8004a44:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8004a48:	20000a38 	.word	0x20000a38

08004a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a4c:	e7fe      	b.n	8004a4c <ADC1_2_IRQHandler>
	...

08004a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a54:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <HAL_Init+0x28>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a07      	ldr	r2, [pc, #28]	; (8004a78 <HAL_Init+0x28>)
 8004a5a:	f043 0310 	orr.w	r3, r3, #16
 8004a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a60:	2003      	movs	r0, #3
 8004a62:	f000 f947 	bl	8004cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a66:	2000      	movs	r0, #0
 8004a68:	f000 f808 	bl	8004a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a6c:	f7fe f900 	bl	8002c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40022000 	.word	0x40022000

08004a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a84:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <HAL_InitTick+0x54>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <HAL_InitTick+0x58>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f95f 	bl	8004d5e <HAL_SYSTICK_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e00e      	b.n	8004ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b0f      	cmp	r3, #15
 8004aae:	d80a      	bhi.n	8004ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab8:	f000 f927 	bl	8004d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004abc:	4a06      	ldr	r2, [pc, #24]	; (8004ad8 <HAL_InitTick+0x5c>)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e000      	b.n	8004ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	2000002c 	.word	0x2000002c
 8004ad4:	2000004c 	.word	0x2000004c
 8004ad8:	20000048 	.word	0x20000048

08004adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_IncTick+0x1c>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_IncTick+0x20>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4413      	add	r3, r2
 8004aec:	4a03      	ldr	r2, [pc, #12]	; (8004afc <HAL_IncTick+0x20>)
 8004aee:	6013      	str	r3, [r2, #0]
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	2000004c 	.word	0x2000004c
 8004afc:	20000a24 	.word	0x20000a24

08004b00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  return uwTick;
 8004b04:	4b02      	ldr	r3, [pc, #8]	; (8004b10 <HAL_GetTick+0x10>)
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	20000a24 	.word	0x20000a24

08004b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b1c:	f7ff fff0 	bl	8004b00 <HAL_GetTick>
 8004b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b2c:	d005      	beq.n	8004b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <HAL_Delay+0x44>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b3a:	bf00      	nop
 8004b3c:	f7ff ffe0 	bl	8004b00 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d8f7      	bhi.n	8004b3c <HAL_Delay+0x28>
  {
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	2000004c 	.word	0x2000004c

08004b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b8e:	4a04      	ldr	r2, [pc, #16]	; (8004ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	60d3      	str	r3, [r2, #12]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	e000ed00 	.word	0xe000ed00

08004ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba8:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <__NVIC_GetPriorityGrouping+0x18>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	0a1b      	lsrs	r3, r3, #8
 8004bae:	f003 0307 	and.w	r3, r3, #7
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	e000ed00 	.word	0xe000ed00

08004bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	db0b      	blt.n	8004bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	f003 021f 	and.w	r2, r3, #31
 8004bd8:	4906      	ldr	r1, [pc, #24]	; (8004bf4 <__NVIC_EnableIRQ+0x34>)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	2001      	movs	r0, #1
 8004be2:	fa00 f202 	lsl.w	r2, r0, r2
 8004be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	e000e100 	.word	0xe000e100

08004bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	db0a      	blt.n	8004c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	490c      	ldr	r1, [pc, #48]	; (8004c44 <__NVIC_SetPriority+0x4c>)
 8004c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c16:	0112      	lsls	r2, r2, #4
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c20:	e00a      	b.n	8004c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4908      	ldr	r1, [pc, #32]	; (8004c48 <__NVIC_SetPriority+0x50>)
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	440b      	add	r3, r1
 8004c36:	761a      	strb	r2, [r3, #24]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	e000e100 	.word	0xe000e100
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	; 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f1c3 0307 	rsb	r3, r3, #7
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	bf28      	it	cs
 8004c6a:	2304      	movcs	r3, #4
 8004c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d902      	bls.n	8004c7c <NVIC_EncodePriority+0x30>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3b03      	subs	r3, #3
 8004c7a:	e000      	b.n	8004c7e <NVIC_EncodePriority+0x32>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	401a      	ands	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	43d9      	mvns	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	4313      	orrs	r3, r2
         );
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3724      	adds	r7, #36	; 0x24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc0:	d301      	bcc.n	8004cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e00f      	b.n	8004ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <SysTick_Config+0x40>)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cce:	210f      	movs	r1, #15
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cd4:	f7ff ff90 	bl	8004bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <SysTick_Config+0x40>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cde:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <SysTick_Config+0x40>)
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	e000e010 	.word	0xe000e010

08004cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff2d 	bl	8004b5c <__NVIC_SetPriorityGrouping>
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	4603      	mov	r3, r0
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d1c:	f7ff ff42 	bl	8004ba4 <__NVIC_GetPriorityGrouping>
 8004d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	6978      	ldr	r0, [r7, #20]
 8004d28:	f7ff ff90 	bl	8004c4c <NVIC_EncodePriority>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d32:	4611      	mov	r1, r2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff ff5f 	bl	8004bf8 <__NVIC_SetPriority>
}
 8004d3a:	bf00      	nop
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	4603      	mov	r3, r0
 8004d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff35 	bl	8004bc0 <__NVIC_EnableIRQ>
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff ffa2 	bl	8004cb0 <SysTick_Config>
 8004d6c:	4603      	mov	r3, r0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d008      	beq.n	8004d9e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2204      	movs	r2, #4
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e020      	b.n	8004de0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 020e 	bic.w	r2, r2, #14
 8004dac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dcc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr
	...

08004dec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d005      	beq.n	8004e0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2204      	movs	r2, #4
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
 8004e0c:	e051      	b.n	8004eb2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 020e 	bic.w	r2, r2, #14
 8004e1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a22      	ldr	r2, [pc, #136]	; (8004ebc <HAL_DMA_Abort_IT+0xd0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d029      	beq.n	8004e8c <HAL_DMA_Abort_IT+0xa0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a20      	ldr	r2, [pc, #128]	; (8004ec0 <HAL_DMA_Abort_IT+0xd4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d022      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x9c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1f      	ldr	r2, [pc, #124]	; (8004ec4 <HAL_DMA_Abort_IT+0xd8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d01a      	beq.n	8004e82 <HAL_DMA_Abort_IT+0x96>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <HAL_DMA_Abort_IT+0xdc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d012      	beq.n	8004e7c <HAL_DMA_Abort_IT+0x90>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1c      	ldr	r2, [pc, #112]	; (8004ecc <HAL_DMA_Abort_IT+0xe0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00a      	beq.n	8004e76 <HAL_DMA_Abort_IT+0x8a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1a      	ldr	r2, [pc, #104]	; (8004ed0 <HAL_DMA_Abort_IT+0xe4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d102      	bne.n	8004e70 <HAL_DMA_Abort_IT+0x84>
 8004e6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e6e:	e00e      	b.n	8004e8e <HAL_DMA_Abort_IT+0xa2>
 8004e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e74:	e00b      	b.n	8004e8e <HAL_DMA_Abort_IT+0xa2>
 8004e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e7a:	e008      	b.n	8004e8e <HAL_DMA_Abort_IT+0xa2>
 8004e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e80:	e005      	b.n	8004e8e <HAL_DMA_Abort_IT+0xa2>
 8004e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e86:	e002      	b.n	8004e8e <HAL_DMA_Abort_IT+0xa2>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	e000      	b.n	8004e8e <HAL_DMA_Abort_IT+0xa2>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <HAL_DMA_Abort_IT+0xe8>)
 8004e90:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	4798      	blx	r3
    } 
  }
  return status;
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40020008 	.word	0x40020008
 8004ec0:	4002001c 	.word	0x4002001c
 8004ec4:	40020030 	.word	0x40020030
 8004ec8:	40020044 	.word	0x40020044
 8004ecc:	40020058 	.word	0x40020058
 8004ed0:	4002006c 	.word	0x4002006c
 8004ed4:	40020000 	.word	0x40020000

08004ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b08b      	sub	sp, #44	; 0x2c
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eea:	e169      	b.n	80051c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004eec:	2201      	movs	r2, #1
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	f040 8158 	bne.w	80051ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4a9a      	ldr	r2, [pc, #616]	; (8005178 <HAL_GPIO_Init+0x2a0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d05e      	beq.n	8004fd2 <HAL_GPIO_Init+0xfa>
 8004f14:	4a98      	ldr	r2, [pc, #608]	; (8005178 <HAL_GPIO_Init+0x2a0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d875      	bhi.n	8005006 <HAL_GPIO_Init+0x12e>
 8004f1a:	4a98      	ldr	r2, [pc, #608]	; (800517c <HAL_GPIO_Init+0x2a4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d058      	beq.n	8004fd2 <HAL_GPIO_Init+0xfa>
 8004f20:	4a96      	ldr	r2, [pc, #600]	; (800517c <HAL_GPIO_Init+0x2a4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d86f      	bhi.n	8005006 <HAL_GPIO_Init+0x12e>
 8004f26:	4a96      	ldr	r2, [pc, #600]	; (8005180 <HAL_GPIO_Init+0x2a8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d052      	beq.n	8004fd2 <HAL_GPIO_Init+0xfa>
 8004f2c:	4a94      	ldr	r2, [pc, #592]	; (8005180 <HAL_GPIO_Init+0x2a8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d869      	bhi.n	8005006 <HAL_GPIO_Init+0x12e>
 8004f32:	4a94      	ldr	r2, [pc, #592]	; (8005184 <HAL_GPIO_Init+0x2ac>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d04c      	beq.n	8004fd2 <HAL_GPIO_Init+0xfa>
 8004f38:	4a92      	ldr	r2, [pc, #584]	; (8005184 <HAL_GPIO_Init+0x2ac>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d863      	bhi.n	8005006 <HAL_GPIO_Init+0x12e>
 8004f3e:	4a92      	ldr	r2, [pc, #584]	; (8005188 <HAL_GPIO_Init+0x2b0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d046      	beq.n	8004fd2 <HAL_GPIO_Init+0xfa>
 8004f44:	4a90      	ldr	r2, [pc, #576]	; (8005188 <HAL_GPIO_Init+0x2b0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d85d      	bhi.n	8005006 <HAL_GPIO_Init+0x12e>
 8004f4a:	2b12      	cmp	r3, #18
 8004f4c:	d82a      	bhi.n	8004fa4 <HAL_GPIO_Init+0xcc>
 8004f4e:	2b12      	cmp	r3, #18
 8004f50:	d859      	bhi.n	8005006 <HAL_GPIO_Init+0x12e>
 8004f52:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <HAL_GPIO_Init+0x80>)
 8004f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f58:	08004fd3 	.word	0x08004fd3
 8004f5c:	08004fad 	.word	0x08004fad
 8004f60:	08004fbf 	.word	0x08004fbf
 8004f64:	08005001 	.word	0x08005001
 8004f68:	08005007 	.word	0x08005007
 8004f6c:	08005007 	.word	0x08005007
 8004f70:	08005007 	.word	0x08005007
 8004f74:	08005007 	.word	0x08005007
 8004f78:	08005007 	.word	0x08005007
 8004f7c:	08005007 	.word	0x08005007
 8004f80:	08005007 	.word	0x08005007
 8004f84:	08005007 	.word	0x08005007
 8004f88:	08005007 	.word	0x08005007
 8004f8c:	08005007 	.word	0x08005007
 8004f90:	08005007 	.word	0x08005007
 8004f94:	08005007 	.word	0x08005007
 8004f98:	08005007 	.word	0x08005007
 8004f9c:	08004fb5 	.word	0x08004fb5
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	4a79      	ldr	r2, [pc, #484]	; (800518c <HAL_GPIO_Init+0x2b4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004faa:	e02c      	b.n	8005006 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	623b      	str	r3, [r7, #32]
          break;
 8004fb2:	e029      	b.n	8005008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	623b      	str	r3, [r7, #32]
          break;
 8004fbc:	e024      	b.n	8005008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	623b      	str	r3, [r7, #32]
          break;
 8004fc6:	e01f      	b.n	8005008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	623b      	str	r3, [r7, #32]
          break;
 8004fd0:	e01a      	b.n	8005008 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004fda:	2304      	movs	r3, #4
 8004fdc:	623b      	str	r3, [r7, #32]
          break;
 8004fde:	e013      	b.n	8005008 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d105      	bne.n	8004ff4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fe8:	2308      	movs	r3, #8
 8004fea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	611a      	str	r2, [r3, #16]
          break;
 8004ff2:	e009      	b.n	8005008 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	615a      	str	r2, [r3, #20]
          break;
 8004ffe:	e003      	b.n	8005008 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005000:	2300      	movs	r3, #0
 8005002:	623b      	str	r3, [r7, #32]
          break;
 8005004:	e000      	b.n	8005008 <HAL_GPIO_Init+0x130>
          break;
 8005006:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2bff      	cmp	r3, #255	; 0xff
 800500c:	d801      	bhi.n	8005012 <HAL_GPIO_Init+0x13a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	e001      	b.n	8005016 <HAL_GPIO_Init+0x13e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3304      	adds	r3, #4
 8005016:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2bff      	cmp	r3, #255	; 0xff
 800501c:	d802      	bhi.n	8005024 <HAL_GPIO_Init+0x14c>
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	e002      	b.n	800502a <HAL_GPIO_Init+0x152>
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	3b08      	subs	r3, #8
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	210f      	movs	r1, #15
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	fa01 f303 	lsl.w	r3, r1, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	401a      	ands	r2, r3
 800503c:	6a39      	ldr	r1, [r7, #32]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	431a      	orrs	r2, r3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 80b1 	beq.w	80051ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005058:	4b4d      	ldr	r3, [pc, #308]	; (8005190 <HAL_GPIO_Init+0x2b8>)
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	4a4c      	ldr	r2, [pc, #304]	; (8005190 <HAL_GPIO_Init+0x2b8>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	6193      	str	r3, [r2, #24]
 8005064:	4b4a      	ldr	r3, [pc, #296]	; (8005190 <HAL_GPIO_Init+0x2b8>)
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005070:	4a48      	ldr	r2, [pc, #288]	; (8005194 <HAL_GPIO_Init+0x2bc>)
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	089b      	lsrs	r3, r3, #2
 8005076:	3302      	adds	r3, #2
 8005078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800507c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	220f      	movs	r2, #15
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4013      	ands	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a40      	ldr	r2, [pc, #256]	; (8005198 <HAL_GPIO_Init+0x2c0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <HAL_GPIO_Init+0x1ec>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a3f      	ldr	r2, [pc, #252]	; (800519c <HAL_GPIO_Init+0x2c4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00d      	beq.n	80050c0 <HAL_GPIO_Init+0x1e8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a3e      	ldr	r2, [pc, #248]	; (80051a0 <HAL_GPIO_Init+0x2c8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <HAL_GPIO_Init+0x1e4>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a3d      	ldr	r2, [pc, #244]	; (80051a4 <HAL_GPIO_Init+0x2cc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d101      	bne.n	80050b8 <HAL_GPIO_Init+0x1e0>
 80050b4:	2303      	movs	r3, #3
 80050b6:	e006      	b.n	80050c6 <HAL_GPIO_Init+0x1ee>
 80050b8:	2304      	movs	r3, #4
 80050ba:	e004      	b.n	80050c6 <HAL_GPIO_Init+0x1ee>
 80050bc:	2302      	movs	r3, #2
 80050be:	e002      	b.n	80050c6 <HAL_GPIO_Init+0x1ee>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <HAL_GPIO_Init+0x1ee>
 80050c4:	2300      	movs	r3, #0
 80050c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c8:	f002 0203 	and.w	r2, r2, #3
 80050cc:	0092      	lsls	r2, r2, #2
 80050ce:	4093      	lsls	r3, r2
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80050d6:	492f      	ldr	r1, [pc, #188]	; (8005194 <HAL_GPIO_Init+0x2bc>)
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	3302      	adds	r3, #2
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d006      	beq.n	80050fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80050f0:	4b2d      	ldr	r3, [pc, #180]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	492c      	ldr	r1, [pc, #176]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	600b      	str	r3, [r1, #0]
 80050fc:	e006      	b.n	800510c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80050fe:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	43db      	mvns	r3, r3
 8005106:	4928      	ldr	r1, [pc, #160]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 8005108:	4013      	ands	r3, r2
 800510a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d006      	beq.n	8005126 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005118:	4b23      	ldr	r3, [pc, #140]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4922      	ldr	r1, [pc, #136]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	4313      	orrs	r3, r2
 8005122:	604b      	str	r3, [r1, #4]
 8005124:	e006      	b.n	8005134 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005126:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	43db      	mvns	r3, r3
 800512e:	491e      	ldr	r1, [pc, #120]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 8005130:	4013      	ands	r3, r2
 8005132:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d006      	beq.n	800514e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005140:	4b19      	ldr	r3, [pc, #100]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	4918      	ldr	r1, [pc, #96]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	4313      	orrs	r3, r2
 800514a:	608b      	str	r3, [r1, #8]
 800514c:	e006      	b.n	800515c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800514e:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	43db      	mvns	r3, r3
 8005156:	4914      	ldr	r1, [pc, #80]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 8005158:	4013      	ands	r3, r2
 800515a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d021      	beq.n	80051ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	490e      	ldr	r1, [pc, #56]	; (80051a8 <HAL_GPIO_Init+0x2d0>)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	4313      	orrs	r3, r2
 8005172:	60cb      	str	r3, [r1, #12]
 8005174:	e021      	b.n	80051ba <HAL_GPIO_Init+0x2e2>
 8005176:	bf00      	nop
 8005178:	10320000 	.word	0x10320000
 800517c:	10310000 	.word	0x10310000
 8005180:	10220000 	.word	0x10220000
 8005184:	10210000 	.word	0x10210000
 8005188:	10120000 	.word	0x10120000
 800518c:	10110000 	.word	0x10110000
 8005190:	40021000 	.word	0x40021000
 8005194:	40010000 	.word	0x40010000
 8005198:	40010800 	.word	0x40010800
 800519c:	40010c00 	.word	0x40010c00
 80051a0:	40011000 	.word	0x40011000
 80051a4:	40011400 	.word	0x40011400
 80051a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_GPIO_Init+0x304>)
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	43db      	mvns	r3, r3
 80051b4:	4909      	ldr	r1, [pc, #36]	; (80051dc <HAL_GPIO_Init+0x304>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	3301      	adds	r3, #1
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f47f ae8e 	bne.w	8004eec <HAL_GPIO_Init+0x14>
  }
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	372c      	adds	r7, #44	; 0x2c
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr
 80051dc:	40010400 	.word	0x40010400

080051e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b089      	sub	sp, #36	; 0x24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80051ee:	e09a      	b.n	8005326 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80051f0:	2201      	movs	r2, #1
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	4013      	ands	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 808d 	beq.w	8005320 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8005206:	4a4e      	ldr	r2, [pc, #312]	; (8005340 <HAL_GPIO_DeInit+0x160>)
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	089b      	lsrs	r3, r3, #2
 800520c:	3302      	adds	r3, #2
 800520e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005212:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	220f      	movs	r2, #15
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4013      	ands	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a46      	ldr	r2, [pc, #280]	; (8005344 <HAL_GPIO_DeInit+0x164>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d013      	beq.n	8005258 <HAL_GPIO_DeInit+0x78>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a45      	ldr	r2, [pc, #276]	; (8005348 <HAL_GPIO_DeInit+0x168>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00d      	beq.n	8005254 <HAL_GPIO_DeInit+0x74>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a44      	ldr	r2, [pc, #272]	; (800534c <HAL_GPIO_DeInit+0x16c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d007      	beq.n	8005250 <HAL_GPIO_DeInit+0x70>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a43      	ldr	r2, [pc, #268]	; (8005350 <HAL_GPIO_DeInit+0x170>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d101      	bne.n	800524c <HAL_GPIO_DeInit+0x6c>
 8005248:	2303      	movs	r3, #3
 800524a:	e006      	b.n	800525a <HAL_GPIO_DeInit+0x7a>
 800524c:	2304      	movs	r3, #4
 800524e:	e004      	b.n	800525a <HAL_GPIO_DeInit+0x7a>
 8005250:	2302      	movs	r3, #2
 8005252:	e002      	b.n	800525a <HAL_GPIO_DeInit+0x7a>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_GPIO_DeInit+0x7a>
 8005258:	2300      	movs	r3, #0
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	f002 0203 	and.w	r2, r2, #3
 8005260:	0092      	lsls	r2, r2, #2
 8005262:	4093      	lsls	r3, r2
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	429a      	cmp	r2, r3
 8005268:	d132      	bne.n	80052d0 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	220f      	movs	r2, #15
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800527a:	4a31      	ldr	r2, [pc, #196]	; (8005340 <HAL_GPIO_DeInit+0x160>)
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	089b      	lsrs	r3, r3, #2
 8005280:	3302      	adds	r3, #2
 8005282:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	43da      	mvns	r2, r3
 800528a:	482d      	ldr	r0, [pc, #180]	; (8005340 <HAL_GPIO_DeInit+0x160>)
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	400a      	ands	r2, r1
 8005292:	3302      	adds	r3, #2
 8005294:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005298:	4b2e      	ldr	r3, [pc, #184]	; (8005354 <HAL_GPIO_DeInit+0x174>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	43db      	mvns	r3, r3
 80052a0:	492c      	ldr	r1, [pc, #176]	; (8005354 <HAL_GPIO_DeInit+0x174>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80052a6:	4b2b      	ldr	r3, [pc, #172]	; (8005354 <HAL_GPIO_DeInit+0x174>)
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	43db      	mvns	r3, r3
 80052ae:	4929      	ldr	r1, [pc, #164]	; (8005354 <HAL_GPIO_DeInit+0x174>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80052b4:	4b27      	ldr	r3, [pc, #156]	; (8005354 <HAL_GPIO_DeInit+0x174>)
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	4925      	ldr	r1, [pc, #148]	; (8005354 <HAL_GPIO_DeInit+0x174>)
 80052be:	4013      	ands	r3, r2
 80052c0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80052c2:	4b24      	ldr	r3, [pc, #144]	; (8005354 <HAL_GPIO_DeInit+0x174>)
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	43db      	mvns	r3, r3
 80052ca:	4922      	ldr	r1, [pc, #136]	; (8005354 <HAL_GPIO_DeInit+0x174>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	2bff      	cmp	r3, #255	; 0xff
 80052d4:	d801      	bhi.n	80052da <HAL_GPIO_DeInit+0xfa>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	e001      	b.n	80052de <HAL_GPIO_DeInit+0xfe>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3304      	adds	r3, #4
 80052de:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2bff      	cmp	r3, #255	; 0xff
 80052e4:	d802      	bhi.n	80052ec <HAL_GPIO_DeInit+0x10c>
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	e002      	b.n	80052f2 <HAL_GPIO_DeInit+0x112>
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	3b08      	subs	r3, #8
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	210f      	movs	r1, #15
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	43db      	mvns	r3, r3
 8005302:	401a      	ands	r2, r3
 8005304:	2104      	movs	r1, #4
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	fa01 f303 	lsl.w	r3, r1, r3
 800530c:	431a      	orrs	r2, r3
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	43db      	mvns	r3, r3
 800531a:	401a      	ands	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	3301      	adds	r3, #1
 8005324:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	fa22 f303 	lsr.w	r3, r2, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	f47f af5e 	bne.w	80051f0 <HAL_GPIO_DeInit+0x10>
  }
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	3724      	adds	r7, #36	; 0x24
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr
 8005340:	40010000 	.word	0x40010000
 8005344:	40010800 	.word	0x40010800
 8005348:	40010c00 	.word	0x40010c00
 800534c:	40011000 	.word	0x40011000
 8005350:	40011400 	.word	0x40011400
 8005354:	40010400 	.word	0x40010400

08005358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	887b      	ldrh	r3, [r7, #2]
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
 8005374:	e001      	b.n	800537a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005376:	2300      	movs	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800537a:	7bfb      	ldrb	r3, [r7, #15]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	807b      	strh	r3, [r7, #2]
 8005392:	4613      	mov	r3, r2
 8005394:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005396:	787b      	ldrb	r3, [r7, #1]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800539c:	887a      	ldrh	r2, [r7, #2]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80053a2:	e003      	b.n	80053ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053a4:	887b      	ldrh	r3, [r7, #2]
 80053a6:	041a      	lsls	r2, r3, #16
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	611a      	str	r2, [r3, #16]
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr

080053b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053c8:	887a      	ldrh	r2, [r7, #2]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4013      	ands	r3, r2
 80053ce:	041a      	lsls	r2, r3, #16
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	43d9      	mvns	r1, r3
 80053d4:	887b      	ldrh	r3, [r7, #2]
 80053d6:	400b      	ands	r3, r1
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	611a      	str	r2, [r3, #16]
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053f2:	4b08      	ldr	r3, [pc, #32]	; (8005414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	4013      	ands	r3, r2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d006      	beq.n	800540c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053fe:	4a05      	ldr	r2, [pc, #20]	; (8005414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005404:	88fb      	ldrh	r3, [r7, #6]
 8005406:	4618      	mov	r0, r3
 8005408:	f7fd fbd8 	bl	8002bbc <HAL_GPIO_EXTI_Callback>
  }
}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40010400 	.word	0x40010400

08005418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e12b      	b.n	8005682 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fd fc48 	bl	8002cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2224      	movs	r2, #36	; 0x24
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0201 	bic.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800546a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800547a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800547c:	f000 fffa 	bl	8006474 <HAL_RCC_GetPCLK1Freq>
 8005480:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	4a81      	ldr	r2, [pc, #516]	; (800568c <HAL_I2C_Init+0x274>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d807      	bhi.n	800549c <HAL_I2C_Init+0x84>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a80      	ldr	r2, [pc, #512]	; (8005690 <HAL_I2C_Init+0x278>)
 8005490:	4293      	cmp	r3, r2
 8005492:	bf94      	ite	ls
 8005494:	2301      	movls	r3, #1
 8005496:	2300      	movhi	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	e006      	b.n	80054aa <HAL_I2C_Init+0x92>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4a7d      	ldr	r2, [pc, #500]	; (8005694 <HAL_I2C_Init+0x27c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	bf94      	ite	ls
 80054a4:	2301      	movls	r3, #1
 80054a6:	2300      	movhi	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e0e7      	b.n	8005682 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4a78      	ldr	r2, [pc, #480]	; (8005698 <HAL_I2C_Init+0x280>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	0c9b      	lsrs	r3, r3, #18
 80054bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4a6a      	ldr	r2, [pc, #424]	; (800568c <HAL_I2C_Init+0x274>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d802      	bhi.n	80054ec <HAL_I2C_Init+0xd4>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	3301      	adds	r3, #1
 80054ea:	e009      	b.n	8005500 <HAL_I2C_Init+0xe8>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	4a69      	ldr	r2, [pc, #420]	; (800569c <HAL_I2C_Init+0x284>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	099b      	lsrs	r3, r3, #6
 80054fe:	3301      	adds	r3, #1
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	430b      	orrs	r3, r1
 8005506:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005512:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	495c      	ldr	r1, [pc, #368]	; (800568c <HAL_I2C_Init+0x274>)
 800551c:	428b      	cmp	r3, r1
 800551e:	d819      	bhi.n	8005554 <HAL_I2C_Init+0x13c>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	1e59      	subs	r1, r3, #1
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	fbb1 f3f3 	udiv	r3, r1, r3
 800552e:	1c59      	adds	r1, r3, #1
 8005530:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005534:	400b      	ands	r3, r1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_I2C_Init+0x138>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1e59      	subs	r1, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	fbb1 f3f3 	udiv	r3, r1, r3
 8005548:	3301      	adds	r3, #1
 800554a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554e:	e051      	b.n	80055f4 <HAL_I2C_Init+0x1dc>
 8005550:	2304      	movs	r3, #4
 8005552:	e04f      	b.n	80055f4 <HAL_I2C_Init+0x1dc>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d111      	bne.n	8005580 <HAL_I2C_Init+0x168>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	1e58      	subs	r0, r3, #1
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6859      	ldr	r1, [r3, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	440b      	add	r3, r1
 800556a:	fbb0 f3f3 	udiv	r3, r0, r3
 800556e:	3301      	adds	r3, #1
 8005570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005574:	2b00      	cmp	r3, #0
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	e012      	b.n	80055a6 <HAL_I2C_Init+0x18e>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1e58      	subs	r0, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6859      	ldr	r1, [r3, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	0099      	lsls	r1, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	fbb0 f3f3 	udiv	r3, r0, r3
 8005596:	3301      	adds	r3, #1
 8005598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_I2C_Init+0x196>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e022      	b.n	80055f4 <HAL_I2C_Init+0x1dc>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10e      	bne.n	80055d4 <HAL_I2C_Init+0x1bc>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1e58      	subs	r0, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6859      	ldr	r1, [r3, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	440b      	add	r3, r1
 80055c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80055c8:	3301      	adds	r3, #1
 80055ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d2:	e00f      	b.n	80055f4 <HAL_I2C_Init+0x1dc>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1e58      	subs	r0, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6859      	ldr	r1, [r3, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	0099      	lsls	r1, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ea:	3301      	adds	r3, #1
 80055ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	6809      	ldr	r1, [r1, #0]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69da      	ldr	r2, [r3, #28]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005622:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6911      	ldr	r1, [r2, #16]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	68d2      	ldr	r2, [r2, #12]
 800562e:	4311      	orrs	r1, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	430b      	orrs	r3, r1
 8005636:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695a      	ldr	r2, [r3, #20]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	000186a0 	.word	0x000186a0
 8005690:	001e847f 	.word	0x001e847f
 8005694:	003d08ff 	.word	0x003d08ff
 8005698:	431bde83 	.word	0x431bde83
 800569c:	10624dd3 	.word	0x10624dd3

080056a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	4608      	mov	r0, r1
 80056aa:	4611      	mov	r1, r2
 80056ac:	461a      	mov	r2, r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	817b      	strh	r3, [r7, #10]
 80056b2:	460b      	mov	r3, r1
 80056b4:	813b      	strh	r3, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056ba:	f7ff fa21 	bl	8004b00 <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	f040 80d9 	bne.w	8005880 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	2319      	movs	r3, #25
 80056d4:	2201      	movs	r2, #1
 80056d6:	496d      	ldr	r1, [pc, #436]	; (800588c <HAL_I2C_Mem_Write+0x1ec>)
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f971 	bl	80059c0 <I2C_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80056e4:	2302      	movs	r3, #2
 80056e6:	e0cc      	b.n	8005882 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_I2C_Mem_Write+0x56>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e0c5      	b.n	8005882 <HAL_I2C_Mem_Write+0x1e2>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b01      	cmp	r3, #1
 800570a:	d007      	beq.n	800571c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800572a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2221      	movs	r2, #33	; 0x21
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2240      	movs	r2, #64	; 0x40
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a3a      	ldr	r2, [r7, #32]
 8005746:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800574c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4a4d      	ldr	r2, [pc, #308]	; (8005890 <HAL_I2C_Mem_Write+0x1f0>)
 800575c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800575e:	88f8      	ldrh	r0, [r7, #6]
 8005760:	893a      	ldrh	r2, [r7, #8]
 8005762:	8979      	ldrh	r1, [r7, #10]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	9301      	str	r3, [sp, #4]
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	4603      	mov	r3, r0
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f890 	bl	8005894 <I2C_RequestMemoryWrite>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d052      	beq.n	8005820 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e081      	b.n	8005882 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f9f2 	bl	8005b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00d      	beq.n	80057aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	2b04      	cmp	r3, #4
 8005794:	d107      	bne.n	80057a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e06b      	b.n	8005882 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	781a      	ldrb	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d11b      	bne.n	8005820 <HAL_I2C_Mem_Write+0x180>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d017      	beq.n	8005820 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	781a      	ldrb	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1aa      	bne.n	800577e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f9de 	bl	8005bee <I2C_WaitOnBTFFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00d      	beq.n	8005854 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	2b04      	cmp	r3, #4
 800583e:	d107      	bne.n	8005850 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e016      	b.n	8005882 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e000      	b.n	8005882 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005880:	2302      	movs	r3, #2
  }
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	00100002 	.word	0x00100002
 8005890:	ffff0000 	.word	0xffff0000

08005894 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	461a      	mov	r2, r3
 80058a2:	4603      	mov	r3, r0
 80058a4:	817b      	strh	r3, [r7, #10]
 80058a6:	460b      	mov	r3, r1
 80058a8:	813b      	strh	r3, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f878 	bl	80059c0 <I2C_WaitOnFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00d      	beq.n	80058f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e4:	d103      	bne.n	80058ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e05f      	b.n	80059b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058f2:	897b      	ldrh	r3, [r7, #10]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005900:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	6a3a      	ldr	r2, [r7, #32]
 8005906:	492d      	ldr	r1, [pc, #180]	; (80059bc <I2C_RequestMemoryWrite+0x128>)
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f8b0 	bl	8005a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e04c      	b.n	80059b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800592e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005930:	6a39      	ldr	r1, [r7, #32]
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f91a 	bl	8005b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2b04      	cmp	r3, #4
 8005944:	d107      	bne.n	8005956 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005954:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e02b      	b.n	80059b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d105      	bne.n	800596c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005960:	893b      	ldrh	r3, [r7, #8]
 8005962:	b2da      	uxtb	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	611a      	str	r2, [r3, #16]
 800596a:	e021      	b.n	80059b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800596c:	893b      	ldrh	r3, [r7, #8]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	b29b      	uxth	r3, r3
 8005972:	b2da      	uxtb	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800597a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597c:	6a39      	ldr	r1, [r7, #32]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f8f4 	bl	8005b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00d      	beq.n	80059a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	2b04      	cmp	r3, #4
 8005990:	d107      	bne.n	80059a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e005      	b.n	80059b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059a6:	893b      	ldrh	r3, [r7, #8]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	00010002 	.word	0x00010002

080059c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	4613      	mov	r3, r2
 80059ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059d0:	e025      	b.n	8005a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059d8:	d021      	beq.n	8005a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059da:	f7ff f891 	bl	8004b00 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d302      	bcc.n	80059f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d116      	bne.n	8005a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	f043 0220 	orr.w	r2, r3, #32
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e023      	b.n	8005a66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	0c1b      	lsrs	r3, r3, #16
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d10d      	bne.n	8005a44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	43da      	mvns	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4013      	ands	r3, r2
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bf0c      	ite	eq
 8005a3a:	2301      	moveq	r3, #1
 8005a3c:	2300      	movne	r3, #0
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	e00c      	b.n	8005a5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	43da      	mvns	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bf0c      	ite	eq
 8005a56:	2301      	moveq	r3, #1
 8005a58:	2300      	movne	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d0b6      	beq.n	80059d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a7c:	e051      	b.n	8005b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8c:	d123      	bne.n	8005ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aa6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f043 0204 	orr.w	r2, r3, #4
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e046      	b.n	8005b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005adc:	d021      	beq.n	8005b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ade:	f7ff f80f 	bl	8004b00 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d302      	bcc.n	8005af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d116      	bne.n	8005b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	f043 0220 	orr.w	r2, r3, #32
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e020      	b.n	8005b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	0c1b      	lsrs	r3, r3, #16
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d10c      	bne.n	8005b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	43da      	mvns	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4013      	ands	r3, r2
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bf14      	ite	ne
 8005b3e:	2301      	movne	r3, #1
 8005b40:	2300      	moveq	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	e00b      	b.n	8005b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	43da      	mvns	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4013      	ands	r3, r2
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bf14      	ite	ne
 8005b58:	2301      	movne	r3, #1
 8005b5a:	2300      	moveq	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d18d      	bne.n	8005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b78:	e02d      	b.n	8005bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f878 	bl	8005c70 <I2C_IsAcknowledgeFailed>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e02d      	b.n	8005be6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b90:	d021      	beq.n	8005bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b92:	f7fe ffb5 	bl	8004b00 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d302      	bcc.n	8005ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d116      	bne.n	8005bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f043 0220 	orr.w	r2, r3, #32
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e007      	b.n	8005be6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be0:	2b80      	cmp	r3, #128	; 0x80
 8005be2:	d1ca      	bne.n	8005b7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bfa:	e02d      	b.n	8005c58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f837 	bl	8005c70 <I2C_IsAcknowledgeFailed>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e02d      	b.n	8005c68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c12:	d021      	beq.n	8005c58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c14:	f7fe ff74 	bl	8004b00 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d302      	bcc.n	8005c2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d116      	bne.n	8005c58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e007      	b.n	8005c68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d1ca      	bne.n	8005bfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c86:	d11b      	bne.n	8005cc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	f043 0204 	orr.w	r2, r3, #4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e26c      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 8087 	beq.w	8005dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cec:	4b92      	ldr	r3, [pc, #584]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f003 030c 	and.w	r3, r3, #12
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d00c      	beq.n	8005d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005cf8:	4b8f      	ldr	r3, [pc, #572]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f003 030c 	and.w	r3, r3, #12
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d112      	bne.n	8005d2a <HAL_RCC_OscConfig+0x5e>
 8005d04:	4b8c      	ldr	r3, [pc, #560]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d10:	d10b      	bne.n	8005d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d12:	4b89      	ldr	r3, [pc, #548]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d06c      	beq.n	8005df8 <HAL_RCC_OscConfig+0x12c>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d168      	bne.n	8005df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e246      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d32:	d106      	bne.n	8005d42 <HAL_RCC_OscConfig+0x76>
 8005d34:	4b80      	ldr	r3, [pc, #512]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a7f      	ldr	r2, [pc, #508]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	e02e      	b.n	8005da0 <HAL_RCC_OscConfig+0xd4>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10c      	bne.n	8005d64 <HAL_RCC_OscConfig+0x98>
 8005d4a:	4b7b      	ldr	r3, [pc, #492]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a7a      	ldr	r2, [pc, #488]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	4b78      	ldr	r3, [pc, #480]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a77      	ldr	r2, [pc, #476]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e01d      	b.n	8005da0 <HAL_RCC_OscConfig+0xd4>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d6c:	d10c      	bne.n	8005d88 <HAL_RCC_OscConfig+0xbc>
 8005d6e:	4b72      	ldr	r3, [pc, #456]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a71      	ldr	r2, [pc, #452]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	4b6f      	ldr	r3, [pc, #444]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a6e      	ldr	r2, [pc, #440]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	e00b      	b.n	8005da0 <HAL_RCC_OscConfig+0xd4>
 8005d88:	4b6b      	ldr	r3, [pc, #428]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a6a      	ldr	r2, [pc, #424]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	4b68      	ldr	r3, [pc, #416]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a67      	ldr	r2, [pc, #412]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d013      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da8:	f7fe feaa 	bl	8004b00 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db0:	f7fe fea6 	bl	8004b00 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b64      	cmp	r3, #100	; 0x64
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e1fa      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc2:	4b5d      	ldr	r3, [pc, #372]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCC_OscConfig+0xe4>
 8005dce:	e014      	b.n	8005dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd0:	f7fe fe96 	bl	8004b00 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dd8:	f7fe fe92 	bl	8004b00 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b64      	cmp	r3, #100	; 0x64
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e1e6      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dea:	4b53      	ldr	r3, [pc, #332]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f0      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x10c>
 8005df6:	e000      	b.n	8005dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d063      	beq.n	8005ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e06:	4b4c      	ldr	r3, [pc, #304]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e12:	4b49      	ldr	r3, [pc, #292]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f003 030c 	and.w	r3, r3, #12
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d11c      	bne.n	8005e58 <HAL_RCC_OscConfig+0x18c>
 8005e1e:	4b46      	ldr	r3, [pc, #280]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d116      	bne.n	8005e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e2a:	4b43      	ldr	r3, [pc, #268]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_RCC_OscConfig+0x176>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d001      	beq.n	8005e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e1ba      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e42:	4b3d      	ldr	r3, [pc, #244]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	4939      	ldr	r1, [pc, #228]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e56:	e03a      	b.n	8005ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d020      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e60:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <HAL_RCC_OscConfig+0x270>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e66:	f7fe fe4b 	bl	8004b00 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e6e:	f7fe fe47 	bl	8004b00 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e19b      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e80:	4b2d      	ldr	r3, [pc, #180]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8c:	4b2a      	ldr	r3, [pc, #168]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4927      	ldr	r1, [pc, #156]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	600b      	str	r3, [r1, #0]
 8005ea0:	e015      	b.n	8005ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ea2:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <HAL_RCC_OscConfig+0x270>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea8:	f7fe fe2a 	bl	8004b00 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb0:	f7fe fe26 	bl	8004b00 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e17a      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec2:	4b1d      	ldr	r3, [pc, #116]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f0      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d03a      	beq.n	8005f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d019      	beq.n	8005f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ee2:	4b17      	ldr	r3, [pc, #92]	; (8005f40 <HAL_RCC_OscConfig+0x274>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee8:	f7fe fe0a 	bl	8004b00 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ef0:	f7fe fe06 	bl	8004b00 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e15a      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f02:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <HAL_RCC_OscConfig+0x26c>)
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f0e:	2001      	movs	r0, #1
 8005f10:	f000 fad8 	bl	80064c4 <RCC_Delay>
 8005f14:	e01c      	b.n	8005f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f16:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <HAL_RCC_OscConfig+0x274>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f1c:	f7fe fdf0 	bl	8004b00 <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f22:	e00f      	b.n	8005f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f24:	f7fe fdec 	bl	8004b00 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d908      	bls.n	8005f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e140      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
 8005f36:	bf00      	nop
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	42420000 	.word	0x42420000
 8005f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f44:	4b9e      	ldr	r3, [pc, #632]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e9      	bne.n	8005f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80a6 	beq.w	80060aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f62:	4b97      	ldr	r3, [pc, #604]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10d      	bne.n	8005f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f6e:	4b94      	ldr	r3, [pc, #592]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	4a93      	ldr	r2, [pc, #588]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8005f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f78:	61d3      	str	r3, [r2, #28]
 8005f7a:	4b91      	ldr	r3, [pc, #580]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f82:	60bb      	str	r3, [r7, #8]
 8005f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f86:	2301      	movs	r3, #1
 8005f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f8a:	4b8e      	ldr	r3, [pc, #568]	; (80061c4 <HAL_RCC_OscConfig+0x4f8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d118      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f96:	4b8b      	ldr	r3, [pc, #556]	; (80061c4 <HAL_RCC_OscConfig+0x4f8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a8a      	ldr	r2, [pc, #552]	; (80061c4 <HAL_RCC_OscConfig+0x4f8>)
 8005f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fa2:	f7fe fdad 	bl	8004b00 <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005faa:	f7fe fda9 	bl	8004b00 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b64      	cmp	r3, #100	; 0x64
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e0fd      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fbc:	4b81      	ldr	r3, [pc, #516]	; (80061c4 <HAL_RCC_OscConfig+0x4f8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0f0      	beq.n	8005faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d106      	bne.n	8005fde <HAL_RCC_OscConfig+0x312>
 8005fd0:	4b7b      	ldr	r3, [pc, #492]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	4a7a      	ldr	r2, [pc, #488]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	6213      	str	r3, [r2, #32]
 8005fdc:	e02d      	b.n	800603a <HAL_RCC_OscConfig+0x36e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10c      	bne.n	8006000 <HAL_RCC_OscConfig+0x334>
 8005fe6:	4b76      	ldr	r3, [pc, #472]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	4a75      	ldr	r2, [pc, #468]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	6213      	str	r3, [r2, #32]
 8005ff2:	4b73      	ldr	r3, [pc, #460]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	4a72      	ldr	r2, [pc, #456]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8005ff8:	f023 0304 	bic.w	r3, r3, #4
 8005ffc:	6213      	str	r3, [r2, #32]
 8005ffe:	e01c      	b.n	800603a <HAL_RCC_OscConfig+0x36e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b05      	cmp	r3, #5
 8006006:	d10c      	bne.n	8006022 <HAL_RCC_OscConfig+0x356>
 8006008:	4b6d      	ldr	r3, [pc, #436]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	4a6c      	ldr	r2, [pc, #432]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 800600e:	f043 0304 	orr.w	r3, r3, #4
 8006012:	6213      	str	r3, [r2, #32]
 8006014:	4b6a      	ldr	r3, [pc, #424]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	4a69      	ldr	r2, [pc, #420]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	6213      	str	r3, [r2, #32]
 8006020:	e00b      	b.n	800603a <HAL_RCC_OscConfig+0x36e>
 8006022:	4b67      	ldr	r3, [pc, #412]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	4a66      	ldr	r2, [pc, #408]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	6213      	str	r3, [r2, #32]
 800602e:	4b64      	ldr	r3, [pc, #400]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	4a63      	ldr	r2, [pc, #396]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8006034:	f023 0304 	bic.w	r3, r3, #4
 8006038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d015      	beq.n	800606e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006042:	f7fe fd5d 	bl	8004b00 <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006048:	e00a      	b.n	8006060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800604a:	f7fe fd59 	bl	8004b00 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	f241 3288 	movw	r2, #5000	; 0x1388
 8006058:	4293      	cmp	r3, r2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e0ab      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006060:	4b57      	ldr	r3, [pc, #348]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0ee      	beq.n	800604a <HAL_RCC_OscConfig+0x37e>
 800606c:	e014      	b.n	8006098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800606e:	f7fe fd47 	bl	8004b00 <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006074:	e00a      	b.n	800608c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006076:	f7fe fd43 	bl	8004b00 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	f241 3288 	movw	r2, #5000	; 0x1388
 8006084:	4293      	cmp	r3, r2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e095      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800608c:	4b4c      	ldr	r3, [pc, #304]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1ee      	bne.n	8006076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d105      	bne.n	80060aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800609e:	4b48      	ldr	r3, [pc, #288]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	4a47      	ldr	r2, [pc, #284]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 80060a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 8081 	beq.w	80061b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060b4:	4b42      	ldr	r3, [pc, #264]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f003 030c 	and.w	r3, r3, #12
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d061      	beq.n	8006184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d146      	bne.n	8006156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c8:	4b3f      	ldr	r3, [pc, #252]	; (80061c8 <HAL_RCC_OscConfig+0x4fc>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ce:	f7fe fd17 	bl	8004b00 <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060d4:	e008      	b.n	80060e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d6:	f7fe fd13 	bl	8004b00 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e067      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060e8:	4b35      	ldr	r3, [pc, #212]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1f0      	bne.n	80060d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060fc:	d108      	bne.n	8006110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80060fe:	4b30      	ldr	r3, [pc, #192]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	492d      	ldr	r1, [pc, #180]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 800610c:	4313      	orrs	r3, r2
 800610e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006110:	4b2b      	ldr	r3, [pc, #172]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a19      	ldr	r1, [r3, #32]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	430b      	orrs	r3, r1
 8006122:	4927      	ldr	r1, [pc, #156]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8006124:	4313      	orrs	r3, r2
 8006126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006128:	4b27      	ldr	r3, [pc, #156]	; (80061c8 <HAL_RCC_OscConfig+0x4fc>)
 800612a:	2201      	movs	r2, #1
 800612c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612e:	f7fe fce7 	bl	8004b00 <HAL_GetTick>
 8006132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006134:	e008      	b.n	8006148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006136:	f7fe fce3 	bl	8004b00 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e037      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0f0      	beq.n	8006136 <HAL_RCC_OscConfig+0x46a>
 8006154:	e02f      	b.n	80061b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006156:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <HAL_RCC_OscConfig+0x4fc>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615c:	f7fe fcd0 	bl	8004b00 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006164:	f7fe fccc 	bl	8004b00 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e020      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006176:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1f0      	bne.n	8006164 <HAL_RCC_OscConfig+0x498>
 8006182:	e018      	b.n	80061b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e013      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <HAL_RCC_OscConfig+0x4f4>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d106      	bne.n	80061b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d001      	beq.n	80061b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40007000 	.word	0x40007000
 80061c8:	42420060 	.word	0x42420060

080061cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e0d0      	b.n	8006382 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061e0:	4b6a      	ldr	r3, [pc, #424]	; (800638c <HAL_RCC_ClockConfig+0x1c0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d910      	bls.n	8006210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ee:	4b67      	ldr	r3, [pc, #412]	; (800638c <HAL_RCC_ClockConfig+0x1c0>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f023 0207 	bic.w	r2, r3, #7
 80061f6:	4965      	ldr	r1, [pc, #404]	; (800638c <HAL_RCC_ClockConfig+0x1c0>)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061fe:	4b63      	ldr	r3, [pc, #396]	; (800638c <HAL_RCC_ClockConfig+0x1c0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	429a      	cmp	r2, r3
 800620a:	d001      	beq.n	8006210 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0b8      	b.n	8006382 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d020      	beq.n	800625e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006228:	4b59      	ldr	r3, [pc, #356]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	4a58      	ldr	r2, [pc, #352]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 800622e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006232:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006240:	4b53      	ldr	r3, [pc, #332]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4a52      	ldr	r2, [pc, #328]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 8006246:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800624a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800624c:	4b50      	ldr	r3, [pc, #320]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	494d      	ldr	r1, [pc, #308]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 800625a:	4313      	orrs	r3, r2
 800625c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d040      	beq.n	80062ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d107      	bne.n	8006282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006272:	4b47      	ldr	r3, [pc, #284]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d115      	bne.n	80062aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e07f      	b.n	8006382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b02      	cmp	r3, #2
 8006288:	d107      	bne.n	800629a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800628a:	4b41      	ldr	r3, [pc, #260]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e073      	b.n	8006382 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800629a:	4b3d      	ldr	r3, [pc, #244]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e06b      	b.n	8006382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062aa:	4b39      	ldr	r3, [pc, #228]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f023 0203 	bic.w	r2, r3, #3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	4936      	ldr	r1, [pc, #216]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062bc:	f7fe fc20 	bl	8004b00 <HAL_GetTick>
 80062c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c2:	e00a      	b.n	80062da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c4:	f7fe fc1c 	bl	8004b00 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e053      	b.n	8006382 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062da:	4b2d      	ldr	r3, [pc, #180]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f003 020c 	and.w	r2, r3, #12
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d1eb      	bne.n	80062c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062ec:	4b27      	ldr	r3, [pc, #156]	; (800638c <HAL_RCC_ClockConfig+0x1c0>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d210      	bcs.n	800631c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fa:	4b24      	ldr	r3, [pc, #144]	; (800638c <HAL_RCC_ClockConfig+0x1c0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f023 0207 	bic.w	r2, r3, #7
 8006302:	4922      	ldr	r1, [pc, #136]	; (800638c <HAL_RCC_ClockConfig+0x1c0>)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	4313      	orrs	r3, r2
 8006308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800630a:	4b20      	ldr	r3, [pc, #128]	; (800638c <HAL_RCC_ClockConfig+0x1c0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d001      	beq.n	800631c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e032      	b.n	8006382 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d008      	beq.n	800633a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006328:	4b19      	ldr	r3, [pc, #100]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4916      	ldr	r1, [pc, #88]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 8006336:	4313      	orrs	r3, r2
 8006338:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	2b00      	cmp	r3, #0
 8006344:	d009      	beq.n	800635a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006346:	4b12      	ldr	r3, [pc, #72]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	490e      	ldr	r1, [pc, #56]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 8006356:	4313      	orrs	r3, r2
 8006358:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800635a:	f000 f821 	bl	80063a0 <HAL_RCC_GetSysClockFreq>
 800635e:	4602      	mov	r2, r0
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <HAL_RCC_ClockConfig+0x1c4>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	091b      	lsrs	r3, r3, #4
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	490a      	ldr	r1, [pc, #40]	; (8006394 <HAL_RCC_ClockConfig+0x1c8>)
 800636c:	5ccb      	ldrb	r3, [r1, r3]
 800636e:	fa22 f303 	lsr.w	r3, r2, r3
 8006372:	4a09      	ldr	r2, [pc, #36]	; (8006398 <HAL_RCC_ClockConfig+0x1cc>)
 8006374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006376:	4b09      	ldr	r3, [pc, #36]	; (800639c <HAL_RCC_ClockConfig+0x1d0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fb7e 	bl	8004a7c <HAL_InitTick>

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	40022000 	.word	0x40022000
 8006390:	40021000 	.word	0x40021000
 8006394:	080094d4 	.word	0x080094d4
 8006398:	2000002c 	.word	0x2000002c
 800639c:	20000048 	.word	0x20000048

080063a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063a0:	b490      	push	{r4, r7}
 80063a2:	b08a      	sub	sp, #40	; 0x28
 80063a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80063a6:	4b2a      	ldr	r3, [pc, #168]	; (8006450 <HAL_RCC_GetSysClockFreq+0xb0>)
 80063a8:	1d3c      	adds	r4, r7, #4
 80063aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80063b0:	f240 2301 	movw	r3, #513	; 0x201
 80063b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	2300      	movs	r3, #0
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	2300      	movs	r3, #0
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80063ca:	4b22      	ldr	r3, [pc, #136]	; (8006454 <HAL_RCC_GetSysClockFreq+0xb4>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d002      	beq.n	80063e0 <HAL_RCC_GetSysClockFreq+0x40>
 80063da:	2b08      	cmp	r3, #8
 80063dc:	d003      	beq.n	80063e6 <HAL_RCC_GetSysClockFreq+0x46>
 80063de:	e02d      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063e0:	4b1d      	ldr	r3, [pc, #116]	; (8006458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063e2:	623b      	str	r3, [r7, #32]
      break;
 80063e4:	e02d      	b.n	8006442 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	0c9b      	lsrs	r3, r3, #18
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80063f2:	4413      	add	r3, r2
 80063f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80063f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d013      	beq.n	800642c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006404:	4b13      	ldr	r3, [pc, #76]	; (8006454 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	0c5b      	lsrs	r3, r3, #17
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006412:	4413      	add	r3, r2
 8006414:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006418:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	4a0e      	ldr	r2, [pc, #56]	; (8006458 <HAL_RCC_GetSysClockFreq+0xb8>)
 800641e:	fb02 f203 	mul.w	r2, r2, r3
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	fbb2 f3f3 	udiv	r3, r2, r3
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
 800642a:	e004      	b.n	8006436 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	4a0b      	ldr	r2, [pc, #44]	; (800645c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	623b      	str	r3, [r7, #32]
      break;
 800643a:	e002      	b.n	8006442 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800643c:	4b06      	ldr	r3, [pc, #24]	; (8006458 <HAL_RCC_GetSysClockFreq+0xb8>)
 800643e:	623b      	str	r3, [r7, #32]
      break;
 8006440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006442:	6a3b      	ldr	r3, [r7, #32]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3728      	adds	r7, #40	; 0x28
 8006448:	46bd      	mov	sp, r7
 800644a:	bc90      	pop	{r4, r7}
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	08008d58 	.word	0x08008d58
 8006454:	40021000 	.word	0x40021000
 8006458:	007a1200 	.word	0x007a1200
 800645c:	003d0900 	.word	0x003d0900

08006460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006464:	4b02      	ldr	r3, [pc, #8]	; (8006470 <HAL_RCC_GetHCLKFreq+0x10>)
 8006466:	681b      	ldr	r3, [r3, #0]
}
 8006468:	4618      	mov	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	bc80      	pop	{r7}
 800646e:	4770      	bx	lr
 8006470:	2000002c 	.word	0x2000002c

08006474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006478:	f7ff fff2 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 800647c:	4602      	mov	r2, r0
 800647e:	4b05      	ldr	r3, [pc, #20]	; (8006494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	0a1b      	lsrs	r3, r3, #8
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	4903      	ldr	r1, [pc, #12]	; (8006498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800648a:	5ccb      	ldrb	r3, [r1, r3]
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006490:	4618      	mov	r0, r3
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40021000 	.word	0x40021000
 8006498:	080094e4 	.word	0x080094e4

0800649c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064a0:	f7ff ffde 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 80064a4:	4602      	mov	r2, r0
 80064a6:	4b05      	ldr	r3, [pc, #20]	; (80064bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	0adb      	lsrs	r3, r3, #11
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	4903      	ldr	r1, [pc, #12]	; (80064c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064b2:	5ccb      	ldrb	r3, [r1, r3]
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40021000 	.word	0x40021000
 80064c0:	080094e4 	.word	0x080094e4

080064c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <RCC_Delay+0x34>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <RCC_Delay+0x38>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	0a5b      	lsrs	r3, r3, #9
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	fb02 f303 	mul.w	r3, r2, r3
 80064de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80064e0:	bf00      	nop
  }
  while (Delay --);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1e5a      	subs	r2, r3, #1
 80064e6:	60fa      	str	r2, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f9      	bne.n	80064e0 <RCC_Delay+0x1c>
}
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr
 80064f8:	2000002c 	.word	0x2000002c
 80064fc:	10624dd3 	.word	0x10624dd3

08006500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e076      	b.n	8006600 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	2b00      	cmp	r3, #0
 8006518:	d108      	bne.n	800652c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006522:	d009      	beq.n	8006538 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	61da      	str	r2, [r3, #28]
 800652a:	e005      	b.n	8006538 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fc fbfc 	bl	8002d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800656e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	431a      	orrs	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065bc:	ea42 0103 	orr.w	r1, r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	0c1a      	lsrs	r2, r3, #16
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f002 0204 	and.w	r2, r2, #4
 80065de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69da      	ldr	r2, [r3, #28]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_SPI_Transmit+0x22>
 8006626:	2302      	movs	r3, #2
 8006628:	e126      	b.n	8006878 <HAL_SPI_Transmit+0x270>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006632:	f7fe fa65 	bl	8004b00 <HAL_GetTick>
 8006636:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006638:	88fb      	ldrh	r3, [r7, #6]
 800663a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	d002      	beq.n	800664e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006648:	2302      	movs	r3, #2
 800664a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800664c:	e10b      	b.n	8006866 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_SPI_Transmit+0x52>
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800665e:	e102      	b.n	8006866 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2203      	movs	r2, #3
 8006664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	88fa      	ldrh	r2, [r7, #6]
 8006678:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	88fa      	ldrh	r2, [r7, #6]
 800667e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a6:	d10f      	bne.n	80066c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d2:	2b40      	cmp	r3, #64	; 0x40
 80066d4:	d007      	beq.n	80066e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ee:	d14b      	bne.n	8006788 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <HAL_SPI_Transmit+0xf6>
 80066f8:	8afb      	ldrh	r3, [r7, #22]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d13e      	bne.n	800677c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	881a      	ldrh	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	1c9a      	adds	r2, r3, #2
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006722:	e02b      	b.n	800677c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b02      	cmp	r3, #2
 8006730:	d112      	bne.n	8006758 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	881a      	ldrh	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006742:	1c9a      	adds	r2, r3, #2
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	86da      	strh	r2, [r3, #54]	; 0x36
 8006756:	e011      	b.n	800677c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006758:	f7fe f9d2 	bl	8004b00 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d803      	bhi.n	8006770 <HAL_SPI_Transmit+0x168>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800676e:	d102      	bne.n	8006776 <HAL_SPI_Transmit+0x16e>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	77fb      	strb	r3, [r7, #31]
          goto error;
 800677a:	e074      	b.n	8006866 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1ce      	bne.n	8006724 <HAL_SPI_Transmit+0x11c>
 8006786:	e04c      	b.n	8006822 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <HAL_SPI_Transmit+0x18e>
 8006790:	8afb      	ldrh	r3, [r7, #22]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d140      	bne.n	8006818 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	330c      	adds	r3, #12
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067bc:	e02c      	b.n	8006818 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d113      	bne.n	80067f4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	330c      	adds	r3, #12
 80067d6:	7812      	ldrb	r2, [r2, #0]
 80067d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80067f2:	e011      	b.n	8006818 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067f4:	f7fe f984 	bl	8004b00 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d803      	bhi.n	800680c <HAL_SPI_Transmit+0x204>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800680a:	d102      	bne.n	8006812 <HAL_SPI_Transmit+0x20a>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d102      	bne.n	8006818 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006816:	e026      	b.n	8006866 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1cd      	bne.n	80067be <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 fbb8 	bl	8006f9c <SPI_EndRxTxTransaction>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006840:	2300      	movs	r3, #0
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	77fb      	strb	r3, [r7, #31]
 8006862:	e000      	b.n	8006866 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006864:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006876:	7ffb      	ldrb	r3, [r7, #31]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3720      	adds	r7, #32
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	4613      	mov	r3, r2
 800688e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800689c:	d112      	bne.n	80068c4 <HAL_SPI_Receive+0x44>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10e      	bne.n	80068c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2204      	movs	r2, #4
 80068aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80068ae:	88fa      	ldrh	r2, [r7, #6]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f8f1 	bl	8006aa2 <HAL_SPI_TransmitReceive>
 80068c0:	4603      	mov	r3, r0
 80068c2:	e0ea      	b.n	8006a9a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d101      	bne.n	80068d2 <HAL_SPI_Receive+0x52>
 80068ce:	2302      	movs	r3, #2
 80068d0:	e0e3      	b.n	8006a9a <HAL_SPI_Receive+0x21a>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068da:	f7fe f911 	bl	8004b00 <HAL_GetTick>
 80068de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d002      	beq.n	80068f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80068ec:	2302      	movs	r3, #2
 80068ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068f0:	e0ca      	b.n	8006a88 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_SPI_Receive+0x7e>
 80068f8:	88fb      	ldrh	r3, [r7, #6]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006902:	e0c1      	b.n	8006a88 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2204      	movs	r2, #4
 8006908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	88fa      	ldrh	r2, [r7, #6]
 8006922:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800694a:	d10f      	bne.n	800696c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800696a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d007      	beq.n	800698a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006988:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d162      	bne.n	8006a58 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006992:	e02e      	b.n	80069f2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d115      	bne.n	80069ce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f103 020c 	add.w	r2, r3, #12
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	7812      	ldrb	r2, [r2, #0]
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069cc:	e011      	b.n	80069f2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ce:	f7fe f897 	bl	8004b00 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d803      	bhi.n	80069e6 <HAL_SPI_Receive+0x166>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069e4:	d102      	bne.n	80069ec <HAL_SPI_Receive+0x16c>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d102      	bne.n	80069f2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80069f0:	e04a      	b.n	8006a88 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1cb      	bne.n	8006994 <HAL_SPI_Receive+0x114>
 80069fc:	e031      	b.n	8006a62 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d113      	bne.n	8006a34 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	b292      	uxth	r2, r2
 8006a18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	1c9a      	adds	r2, r3, #2
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a32:	e011      	b.n	8006a58 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a34:	f7fe f864 	bl	8004b00 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d803      	bhi.n	8006a4c <HAL_SPI_Receive+0x1cc>
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a4a:	d102      	bne.n	8006a52 <HAL_SPI_Receive+0x1d2>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a56:	e017      	b.n	8006a88 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1cd      	bne.n	80069fe <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 fa46 	bl	8006ef8 <SPI_EndRxTransaction>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2220      	movs	r2, #32
 8006a76:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	75fb      	strb	r3, [r7, #23]
 8006a84:	e000      	b.n	8006a88 <HAL_SPI_Receive+0x208>
  }

error :
 8006a86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b08c      	sub	sp, #48	; 0x30
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	607a      	str	r2, [r7, #4]
 8006aae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d101      	bne.n	8006ac8 <HAL_SPI_TransmitReceive+0x26>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e18a      	b.n	8006dde <HAL_SPI_TransmitReceive+0x33c>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ad0:	f7fe f816 	bl	8004b00 <HAL_GetTick>
 8006ad4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006ae6:	887b      	ldrh	r3, [r7, #2]
 8006ae8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d00f      	beq.n	8006b12 <HAL_SPI_TransmitReceive+0x70>
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006af8:	d107      	bne.n	8006b0a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d103      	bne.n	8006b0a <HAL_SPI_TransmitReceive+0x68>
 8006b02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d003      	beq.n	8006b12 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b10:	e15b      	b.n	8006dca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d005      	beq.n	8006b24 <HAL_SPI_TransmitReceive+0x82>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <HAL_SPI_TransmitReceive+0x82>
 8006b1e:	887b      	ldrh	r3, [r7, #2]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d103      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b2a:	e14e      	b.n	8006dca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d003      	beq.n	8006b40 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2205      	movs	r2, #5
 8006b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	887a      	ldrh	r2, [r7, #2]
 8006b50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	887a      	ldrh	r2, [r7, #2]
 8006b56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	887a      	ldrh	r2, [r7, #2]
 8006b62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	887a      	ldrh	r2, [r7, #2]
 8006b68:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b80:	2b40      	cmp	r3, #64	; 0x40
 8006b82:	d007      	beq.n	8006b94 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b9c:	d178      	bne.n	8006c90 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <HAL_SPI_TransmitReceive+0x10a>
 8006ba6:	8b7b      	ldrh	r3, [r7, #26]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d166      	bne.n	8006c7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	881a      	ldrh	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbc:	1c9a      	adds	r2, r3, #2
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bd0:	e053      	b.n	8006c7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d11b      	bne.n	8006c18 <HAL_SPI_TransmitReceive+0x176>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d016      	beq.n	8006c18 <HAL_SPI_TransmitReceive+0x176>
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d113      	bne.n	8006c18 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	881a      	ldrh	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c00:	1c9a      	adds	r2, r3, #2
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d119      	bne.n	8006c5a <HAL_SPI_TransmitReceive+0x1b8>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d014      	beq.n	8006c5a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	1c9a      	adds	r2, r3, #2
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c56:	2301      	movs	r3, #1
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c5a:	f7fd ff51 	bl	8004b00 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d807      	bhi.n	8006c7a <HAL_SPI_TransmitReceive+0x1d8>
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c70:	d003      	beq.n	8006c7a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c78:	e0a7      	b.n	8006dca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1a6      	bne.n	8006bd2 <HAL_SPI_TransmitReceive+0x130>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1a1      	bne.n	8006bd2 <HAL_SPI_TransmitReceive+0x130>
 8006c8e:	e07c      	b.n	8006d8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <HAL_SPI_TransmitReceive+0x1fc>
 8006c98:	8b7b      	ldrh	r3, [r7, #26]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d16b      	bne.n	8006d76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	330c      	adds	r3, #12
 8006ca8:	7812      	ldrb	r2, [r2, #0]
 8006caa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cc4:	e057      	b.n	8006d76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d11c      	bne.n	8006d0e <HAL_SPI_TransmitReceive+0x26c>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d017      	beq.n	8006d0e <HAL_SPI_TransmitReceive+0x26c>
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d114      	bne.n	8006d0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	7812      	ldrb	r2, [r2, #0]
 8006cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d119      	bne.n	8006d50 <HAL_SPI_TransmitReceive+0x2ae>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d014      	beq.n	8006d50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d50:	f7fd fed6 	bl	8004b00 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d803      	bhi.n	8006d68 <HAL_SPI_TransmitReceive+0x2c6>
 8006d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d66:	d102      	bne.n	8006d6e <HAL_SPI_TransmitReceive+0x2cc>
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d103      	bne.n	8006d76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d74:	e029      	b.n	8006dca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1a2      	bne.n	8006cc6 <HAL_SPI_TransmitReceive+0x224>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d19d      	bne.n	8006cc6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 f904 	bl	8006f9c <SPI_EndRxTxTransaction>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d006      	beq.n	8006da8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2220      	movs	r2, #32
 8006da4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006da6:	e010      	b.n	8006dca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10b      	bne.n	8006dc8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	e000      	b.n	8006dca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006dc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006dda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3730      	adds	r7, #48	; 0x30
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006df8:	f7fd fe82 	bl	8004b00 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	4413      	add	r3, r2
 8006e06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e08:	f7fd fe7a 	bl	8004b00 <HAL_GetTick>
 8006e0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e0e:	4b39      	ldr	r3, [pc, #228]	; (8006ef4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	015b      	lsls	r3, r3, #5
 8006e14:	0d1b      	lsrs	r3, r3, #20
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	fb02 f303 	mul.w	r3, r2, r3
 8006e1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e1e:	e054      	b.n	8006eca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e26:	d050      	beq.n	8006eca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e28:	f7fd fe6a 	bl	8004b00 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d902      	bls.n	8006e3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d13d      	bne.n	8006eba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e56:	d111      	bne.n	8006e7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e60:	d004      	beq.n	8006e6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6a:	d107      	bne.n	8006e7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e84:	d10f      	bne.n	8006ea6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ea4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e017      	b.n	8006eea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	bf0c      	ite	eq
 8006eda:	2301      	moveq	r3, #1
 8006edc:	2300      	movne	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d19b      	bne.n	8006e20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3720      	adds	r7, #32
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	2000002c 	.word	0x2000002c

08006ef8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f0c:	d111      	bne.n	8006f32 <SPI_EndRxTransaction+0x3a>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f16:	d004      	beq.n	8006f22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f20:	d107      	bne.n	8006f32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f30:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f3a:	d117      	bne.n	8006f6c <SPI_EndRxTransaction+0x74>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f44:	d112      	bne.n	8006f6c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2101      	movs	r1, #1
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff ff49 	bl	8006de8 <SPI_WaitFlagStateUntilTimeout>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01a      	beq.n	8006f92 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f60:	f043 0220 	orr.w	r2, r3, #32
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e013      	b.n	8006f94 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2200      	movs	r2, #0
 8006f74:	2180      	movs	r1, #128	; 0x80
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f7ff ff36 	bl	8006de8 <SPI_WaitFlagStateUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f86:	f043 0220 	orr.w	r2, r3, #32
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e000      	b.n	8006f94 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2180      	movs	r1, #128	; 0x80
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7ff ff18 	bl	8006de8 <SPI_WaitFlagStateUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d007      	beq.n	8006fce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc2:	f043 0220 	orr.w	r2, r3, #32
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e000      	b.n	8006fd0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e041      	b.n	800706e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fb fef0 	bl	8002de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	4619      	mov	r1, r3
 8007016:	4610      	mov	r0, r2
 8007018:	f000 faa8 	bl	800756c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b01      	cmp	r3, #1
 800708a:	d001      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e03a      	b.n	8007106 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a18      	ldr	r2, [pc, #96]	; (8007110 <HAL_TIM_Base_Start_IT+0x98>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00e      	beq.n	80070d0 <HAL_TIM_Base_Start_IT+0x58>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ba:	d009      	beq.n	80070d0 <HAL_TIM_Base_Start_IT+0x58>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a14      	ldr	r2, [pc, #80]	; (8007114 <HAL_TIM_Base_Start_IT+0x9c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <HAL_TIM_Base_Start_IT+0x58>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a13      	ldr	r2, [pc, #76]	; (8007118 <HAL_TIM_Base_Start_IT+0xa0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d111      	bne.n	80070f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b06      	cmp	r3, #6
 80070e0:	d010      	beq.n	8007104 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0201 	orr.w	r2, r2, #1
 80070f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f2:	e007      	b.n	8007104 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0201 	orr.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40000400 	.word	0x40000400
 8007118:	40000800 	.word	0x40000800

0800711c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0201 	bic.w	r2, r2, #1
 8007132:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	f241 1311 	movw	r3, #4369	; 0x1111
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10f      	bne.n	8007164 <HAL_TIM_Base_Stop_IT+0x48>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6a1a      	ldr	r2, [r3, #32]
 800714a:	f240 4344 	movw	r3, #1092	; 0x444
 800714e:	4013      	ands	r3, r2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d107      	bne.n	8007164 <HAL_TIM_Base_Stop_IT+0x48>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0201 	bic.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr

08007178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b02      	cmp	r3, #2
 800718c:	d122      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b02      	cmp	r3, #2
 800719a:	d11b      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f06f 0202 	mvn.w	r2, #2
 80071a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f9ba 	bl	8007534 <HAL_TIM_IC_CaptureCallback>
 80071c0:	e005      	b.n	80071ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f9ad 	bl	8007522 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f9bc 	bl	8007546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d122      	bne.n	8007228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d11b      	bne.n	8007228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0204 	mvn.w	r2, #4
 80071f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2202      	movs	r2, #2
 80071fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f990 	bl	8007534 <HAL_TIM_IC_CaptureCallback>
 8007214:	e005      	b.n	8007222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f983 	bl	8007522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f992 	bl	8007546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b08      	cmp	r3, #8
 8007234:	d122      	bne.n	800727c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b08      	cmp	r3, #8
 8007242:	d11b      	bne.n	800727c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 0208 	mvn.w	r2, #8
 800724c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2204      	movs	r2, #4
 8007252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f966 	bl	8007534 <HAL_TIM_IC_CaptureCallback>
 8007268:	e005      	b.n	8007276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f959 	bl	8007522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f968 	bl	8007546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b10      	cmp	r3, #16
 8007288:	d122      	bne.n	80072d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b10      	cmp	r3, #16
 8007296:	d11b      	bne.n	80072d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f06f 0210 	mvn.w	r2, #16
 80072a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2208      	movs	r2, #8
 80072a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f93c 	bl	8007534 <HAL_TIM_IC_CaptureCallback>
 80072bc:	e005      	b.n	80072ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f92f 	bl	8007522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f93e 	bl	8007546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d10e      	bne.n	80072fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d107      	bne.n	80072fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f06f 0201 	mvn.w	r2, #1
 80072f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f90a 	bl	8007510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007306:	2b80      	cmp	r3, #128	; 0x80
 8007308:	d10e      	bne.n	8007328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007314:	2b80      	cmp	r3, #128	; 0x80
 8007316:	d107      	bne.n	8007328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa81 	bl	800782a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007332:	2b40      	cmp	r3, #64	; 0x40
 8007334:	d10e      	bne.n	8007354 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	d107      	bne.n	8007354 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800734c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f902 	bl	8007558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b20      	cmp	r3, #32
 8007360:	d10e      	bne.n	8007380 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0320 	and.w	r3, r3, #32
 800736c:	2b20      	cmp	r3, #32
 800736e:	d107      	bne.n	8007380 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f06f 0220 	mvn.w	r2, #32
 8007378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa4c 	bl	8007818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007380:	bf00      	nop
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_TIM_ConfigClockSource+0x18>
 800739c:	2302      	movs	r3, #2
 800739e:	e0b3      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x180>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d8:	d03e      	beq.n	8007458 <HAL_TIM_ConfigClockSource+0xd0>
 80073da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073de:	f200 8087 	bhi.w	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 80073e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e6:	f000 8085 	beq.w	80074f4 <HAL_TIM_ConfigClockSource+0x16c>
 80073ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ee:	d87f      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 80073f0:	2b70      	cmp	r3, #112	; 0x70
 80073f2:	d01a      	beq.n	800742a <HAL_TIM_ConfigClockSource+0xa2>
 80073f4:	2b70      	cmp	r3, #112	; 0x70
 80073f6:	d87b      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 80073f8:	2b60      	cmp	r3, #96	; 0x60
 80073fa:	d050      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x116>
 80073fc:	2b60      	cmp	r3, #96	; 0x60
 80073fe:	d877      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 8007400:	2b50      	cmp	r3, #80	; 0x50
 8007402:	d03c      	beq.n	800747e <HAL_TIM_ConfigClockSource+0xf6>
 8007404:	2b50      	cmp	r3, #80	; 0x50
 8007406:	d873      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 8007408:	2b40      	cmp	r3, #64	; 0x40
 800740a:	d058      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x136>
 800740c:	2b40      	cmp	r3, #64	; 0x40
 800740e:	d86f      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 8007410:	2b30      	cmp	r3, #48	; 0x30
 8007412:	d064      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x156>
 8007414:	2b30      	cmp	r3, #48	; 0x30
 8007416:	d86b      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 8007418:	2b20      	cmp	r3, #32
 800741a:	d060      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x156>
 800741c:	2b20      	cmp	r3, #32
 800741e:	d867      	bhi.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d05c      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x156>
 8007424:	2b10      	cmp	r3, #16
 8007426:	d05a      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007428:	e062      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	6899      	ldr	r1, [r3, #8]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f000 f970 	bl	800771e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800744c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	609a      	str	r2, [r3, #8]
      break;
 8007456:	e04e      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	6899      	ldr	r1, [r3, #8]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f000 f959 	bl	800771e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689a      	ldr	r2, [r3, #8]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800747a:	609a      	str	r2, [r3, #8]
      break;
 800747c:	e03b      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6859      	ldr	r1, [r3, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	461a      	mov	r2, r3
 800748c:	f000 f8d0 	bl	8007630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2150      	movs	r1, #80	; 0x50
 8007496:	4618      	mov	r0, r3
 8007498:	f000 f927 	bl	80076ea <TIM_ITRx_SetConfig>
      break;
 800749c:	e02b      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	6859      	ldr	r1, [r3, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f000 f8ee 	bl	800768c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2160      	movs	r1, #96	; 0x60
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 f917 	bl	80076ea <TIM_ITRx_SetConfig>
      break;
 80074bc:	e01b      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	6859      	ldr	r1, [r3, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	461a      	mov	r2, r3
 80074cc:	f000 f8b0 	bl	8007630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2140      	movs	r1, #64	; 0x40
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f907 	bl	80076ea <TIM_ITRx_SetConfig>
      break;
 80074dc:	e00b      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4619      	mov	r1, r3
 80074e8:	4610      	mov	r0, r2
 80074ea:	f000 f8fe 	bl	80076ea <TIM_ITRx_SetConfig>
        break;
 80074ee:	e002      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80074f0:	bf00      	nop
 80074f2:	e000      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80074f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr

08007522 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	bc80      	pop	{r7}
 8007532:	4770      	bx	lr

08007534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	bc80      	pop	{r7}
 8007544:	4770      	bx	lr

08007546 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	bc80      	pop	{r7}
 8007556:	4770      	bx	lr

08007558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr
	...

0800756c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a29      	ldr	r2, [pc, #164]	; (8007624 <TIM_Base_SetConfig+0xb8>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00b      	beq.n	800759c <TIM_Base_SetConfig+0x30>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758a:	d007      	beq.n	800759c <TIM_Base_SetConfig+0x30>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a26      	ldr	r2, [pc, #152]	; (8007628 <TIM_Base_SetConfig+0xbc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d003      	beq.n	800759c <TIM_Base_SetConfig+0x30>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a25      	ldr	r2, [pc, #148]	; (800762c <TIM_Base_SetConfig+0xc0>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d108      	bne.n	80075ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a1c      	ldr	r2, [pc, #112]	; (8007624 <TIM_Base_SetConfig+0xb8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00b      	beq.n	80075ce <TIM_Base_SetConfig+0x62>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075bc:	d007      	beq.n	80075ce <TIM_Base_SetConfig+0x62>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a19      	ldr	r2, [pc, #100]	; (8007628 <TIM_Base_SetConfig+0xbc>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d003      	beq.n	80075ce <TIM_Base_SetConfig+0x62>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a18      	ldr	r2, [pc, #96]	; (800762c <TIM_Base_SetConfig+0xc0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d108      	bne.n	80075e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a07      	ldr	r2, [pc, #28]	; (8007624 <TIM_Base_SetConfig+0xb8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d103      	bne.n	8007614 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	615a      	str	r2, [r3, #20]
}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	bc80      	pop	{r7}
 8007622:	4770      	bx	lr
 8007624:	40012c00 	.word	0x40012c00
 8007628:	40000400 	.word	0x40000400
 800762c:	40000800 	.word	0x40000800

08007630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f023 0201 	bic.w	r2, r3, #1
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800765a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	011b      	lsls	r3, r3, #4
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f023 030a 	bic.w	r3, r3, #10
 800766c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	621a      	str	r2, [r3, #32]
}
 8007682:	bf00      	nop
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr

0800768c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	f023 0210 	bic.w	r2, r3, #16
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	031b      	lsls	r3, r3, #12
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	621a      	str	r2, [r3, #32]
}
 80076e0:	bf00      	nop
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr

080076ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4313      	orrs	r3, r2
 8007708:	f043 0307 	orr.w	r3, r3, #7
 800770c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	609a      	str	r2, [r3, #8]
}
 8007714:	bf00      	nop
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr

0800771e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800771e:	b480      	push	{r7}
 8007720:	b087      	sub	sp, #28
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	607a      	str	r2, [r7, #4]
 800772a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007738:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	021a      	lsls	r2, r3, #8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	431a      	orrs	r2, r3
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4313      	orrs	r3, r2
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4313      	orrs	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	609a      	str	r2, [r3, #8]
}
 8007752:	bf00      	nop
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	bc80      	pop	{r7}
 800775a:	4770      	bx	lr

0800775c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800776c:	2b01      	cmp	r3, #1
 800776e:	d101      	bne.n	8007774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007770:	2302      	movs	r3, #2
 8007772:	e046      	b.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a16      	ldr	r2, [pc, #88]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d00e      	beq.n	80077d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c0:	d009      	beq.n	80077d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a12      	ldr	r2, [pc, #72]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d004      	beq.n	80077d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a10      	ldr	r2, [pc, #64]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d10c      	bne.n	80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	bc80      	pop	{r7}
 800780a:	4770      	bx	lr
 800780c:	40012c00 	.word	0x40012c00
 8007810:	40000400 	.word	0x40000400
 8007814:	40000800 	.word	0x40000800

08007818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr

0800782a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007832:	bf00      	nop
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr

0800783c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e03f      	b.n	80078ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fb fafe 	bl	8002e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2224      	movs	r2, #36	; 0x24
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800787e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fbed 	bl	8008060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	695a      	ldr	r2, [r3, #20]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	4613      	mov	r3, r2
 80078e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d130      	bne.n	8007952 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_UART_Transmit_IT+0x26>
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e029      	b.n	8007954 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007906:	2b01      	cmp	r3, #1
 8007908:	d101      	bne.n	800790e <HAL_UART_Transmit_IT+0x38>
 800790a:	2302      	movs	r3, #2
 800790c:	e022      	b.n	8007954 <HAL_UART_Transmit_IT+0x7e>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	88fa      	ldrh	r2, [r7, #6]
 8007920:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	88fa      	ldrh	r2, [r7, #6]
 8007926:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2221      	movs	r2, #33	; 0x21
 8007932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800794c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	e000      	b.n	8007954 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007952:	2302      	movs	r3, #2
  }
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr

0800795e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	4613      	mov	r3, r2
 800796a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b20      	cmp	r3, #32
 8007976:	d11d      	bne.n	80079b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <HAL_UART_Receive_IT+0x26>
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e016      	b.n	80079b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800798e:	2b01      	cmp	r3, #1
 8007990:	d101      	bne.n	8007996 <HAL_UART_Receive_IT+0x38>
 8007992:	2302      	movs	r3, #2
 8007994:	e00f      	b.n	80079b6 <HAL_UART_Receive_IT+0x58>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80079a4:	88fb      	ldrh	r3, [r7, #6]
 80079a6:	461a      	mov	r2, r3
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f9cf 	bl	8007d4e <UART_Start_Receive_IT>
 80079b0:	4603      	mov	r3, r0
 80079b2:	e000      	b.n	80079b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079b4:	2302      	movs	r3, #2
  }
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08a      	sub	sp, #40	; 0x28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	f003 030f 	and.w	r3, r3, #15
 80079ee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10d      	bne.n	8007a12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	f003 0320 	and.w	r3, r3, #32
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d008      	beq.n	8007a12 <HAL_UART_IRQHandler+0x52>
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa7f 	bl	8007f0e <UART_Receive_IT>
      return;
 8007a10:	e17b      	b.n	8007d0a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 80b1 	beq.w	8007b7c <HAL_UART_IRQHandler+0x1bc>
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d105      	bne.n	8007a30 <HAL_UART_IRQHandler+0x70>
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80a6 	beq.w	8007b7c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <HAL_UART_IRQHandler+0x90>
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	f043 0201 	orr.w	r2, r3, #1
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <HAL_UART_IRQHandler+0xb0>
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a68:	f043 0202 	orr.w	r2, r3, #2
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <HAL_UART_IRQHandler+0xd0>
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	f043 0204 	orr.w	r2, r3, #4
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00f      	beq.n	8007aba <HAL_UART_IRQHandler+0xfa>
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <HAL_UART_IRQHandler+0xee>
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d005      	beq.n	8007aba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	f043 0208 	orr.w	r2, r3, #8
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 811e 	beq.w	8007d00 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d007      	beq.n	8007ade <HAL_UART_IRQHandler+0x11e>
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fa18 	bl	8007f0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bf14      	ite	ne
 8007aec:	2301      	movne	r3, #1
 8007aee:	2300      	moveq	r3, #0
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af8:	f003 0308 	and.w	r3, r3, #8
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <HAL_UART_IRQHandler+0x146>
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d031      	beq.n	8007b6a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f95a 	bl	8007dc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d023      	beq.n	8007b62 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	695a      	ldr	r2, [r3, #20]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b28:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d013      	beq.n	8007b5a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	4a76      	ldr	r2, [pc, #472]	; (8007d10 <HAL_UART_IRQHandler+0x350>)
 8007b38:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fd f954 	bl	8004dec <HAL_DMA_Abort_IT>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d016      	beq.n	8007b78 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	e00e      	b.n	8007b78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f8e3 	bl	8007d26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	e00a      	b.n	8007b78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f8df 	bl	8007d26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b68:	e006      	b.n	8007b78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f8db 	bl	8007d26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b76:	e0c3      	b.n	8007d00 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b78:	bf00      	nop
    return;
 8007b7a:	e0c1      	b.n	8007d00 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	f040 80a1 	bne.w	8007cc8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 809b 	beq.w	8007cc8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	f003 0310 	and.w	r3, r3, #16
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 8095 	beq.w	8007cc8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d04e      	beq.n	8007c60 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007bcc:	8a3b      	ldrh	r3, [r7, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 8098 	beq.w	8007d04 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bd8:	8a3a      	ldrh	r2, [r7, #16]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	f080 8092 	bcs.w	8007d04 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	8a3a      	ldrh	r2, [r7, #16]
 8007be4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	2b20      	cmp	r3, #32
 8007bee:	d02b      	beq.n	8007c48 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bfe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	695a      	ldr	r2, [r3, #20]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0201 	bic.w	r2, r2, #1
 8007c0e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695a      	ldr	r2, [r3, #20]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c1e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0210 	bic.w	r2, r2, #16
 8007c3c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fd f897 	bl	8004d76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f86d 	bl	8007d38 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c5e:	e051      	b.n	8007d04 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d047      	beq.n	8007d08 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007c78:	8a7b      	ldrh	r3, [r7, #18]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d044      	beq.n	8007d08 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c8c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	695a      	ldr	r2, [r3, #20]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0210 	bic.w	r2, r2, #16
 8007cba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cbc:	8a7b      	ldrh	r3, [r7, #18]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f839 	bl	8007d38 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007cc6:	e01f      	b.n	8007d08 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x324>
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d003      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f8af 	bl	8007e40 <UART_Transmit_IT>
    return;
 8007ce2:	e012      	b.n	8007d0a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00d      	beq.n	8007d0a <HAL_UART_IRQHandler+0x34a>
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d008      	beq.n	8007d0a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f8f0 	bl	8007ede <UART_EndTransmit_IT>
    return;
 8007cfe:	e004      	b.n	8007d0a <HAL_UART_IRQHandler+0x34a>
    return;
 8007d00:	bf00      	nop
 8007d02:	e002      	b.n	8007d0a <HAL_UART_IRQHandler+0x34a>
      return;
 8007d04:	bf00      	nop
 8007d06:	e000      	b.n	8007d0a <HAL_UART_IRQHandler+0x34a>
      return;
 8007d08:	bf00      	nop
  }
}
 8007d0a:	3728      	adds	r7, #40	; 0x28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	08007e19 	.word	0x08007e19

08007d14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bc80      	pop	{r7}
 8007d24:	4770      	bx	lr

08007d26 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bc80      	pop	{r7}
 8007d36:	4770      	bx	lr

08007d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bc80      	pop	{r7}
 8007d4c:	4770      	bx	lr

08007d4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	88fa      	ldrh	r2, [r7, #6]
 8007d66:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	88fa      	ldrh	r2, [r7, #6]
 8007d6c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2222      	movs	r2, #34	; 0x22
 8007d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d92:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	695a      	ldr	r2, [r3, #20]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0201 	orr.w	r2, r2, #1
 8007da2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0220 	orr.w	r2, r2, #32
 8007db2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bc80      	pop	{r7}
 8007dbe:	4770      	bx	lr

08007dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007dd6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695a      	ldr	r2, [r3, #20]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 0201 	bic.w	r2, r2, #1
 8007de6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d107      	bne.n	8007e00 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 0210 	bic.w	r2, r2, #16
 8007dfe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr

08007e18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7ff ff77 	bl	8007d26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b21      	cmp	r3, #33	; 0x21
 8007e52:	d13e      	bne.n	8007ed2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e5c:	d114      	bne.n	8007e88 <UART_Transmit_IT+0x48>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d110      	bne.n	8007e88 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	461a      	mov	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	1c9a      	adds	r2, r3, #2
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	621a      	str	r2, [r3, #32]
 8007e86:	e008      	b.n	8007e9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	1c59      	adds	r1, r3, #1
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6211      	str	r1, [r2, #32]
 8007e92:	781a      	ldrb	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10f      	bne.n	8007ece <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ebc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ecc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e000      	b.n	8007ed4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ed2:	2302      	movs	r3, #2
  }
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	4770      	bx	lr

08007ede <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68da      	ldr	r2, [r3, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ef4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff ff08 	bl	8007d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b086      	sub	sp, #24
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b22      	cmp	r3, #34	; 0x22
 8007f20:	f040 8099 	bne.w	8008056 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2c:	d117      	bne.n	8007f5e <UART_Receive_IT+0x50>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d113      	bne.n	8007f5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f56:	1c9a      	adds	r2, r3, #2
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8007f5c:	e026      	b.n	8007fac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f70:	d007      	beq.n	8007f82 <UART_Receive_IT+0x74>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10a      	bne.n	8007f90 <UART_Receive_IT+0x82>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d106      	bne.n	8007f90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	e008      	b.n	8007fa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d148      	bne.n	8008052 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0220 	bic.w	r2, r2, #32
 8007fce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	695a      	ldr	r2, [r3, #20]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0201 	bic.w	r2, r2, #1
 8007fee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d123      	bne.n	8008048 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0210 	bic.w	r2, r2, #16
 8008014:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0310 	and.w	r3, r3, #16
 8008020:	2b10      	cmp	r3, #16
 8008022:	d10a      	bne.n	800803a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff fe79 	bl	8007d38 <HAL_UARTEx_RxEventCallback>
 8008046:	e002      	b.n	800804e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7fa fdd1 	bl	8002bf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	e002      	b.n	8008058 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	e000      	b.n	8008058 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008056:	2302      	movs	r3, #2
  }
}
 8008058:	4618      	mov	r0, r3
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	689a      	ldr	r2, [r3, #8]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	431a      	orrs	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	4313      	orrs	r3, r2
 800808e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800809a:	f023 030c 	bic.w	r3, r3, #12
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	6812      	ldr	r2, [r2, #0]
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	430b      	orrs	r3, r1
 80080a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699a      	ldr	r2, [r3, #24]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a2c      	ldr	r2, [pc, #176]	; (8008174 <UART_SetConfig+0x114>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d103      	bne.n	80080d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80080c8:	f7fe f9e8 	bl	800649c <HAL_RCC_GetPCLK2Freq>
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	e002      	b.n	80080d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80080d0:	f7fe f9d0 	bl	8006474 <HAL_RCC_GetPCLK1Freq>
 80080d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009a      	lsls	r2, r3, #2
 80080e0:	441a      	add	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ec:	4a22      	ldr	r2, [pc, #136]	; (8008178 <UART_SetConfig+0x118>)
 80080ee:	fba2 2303 	umull	r2, r3, r2, r3
 80080f2:	095b      	lsrs	r3, r3, #5
 80080f4:	0119      	lsls	r1, r3, #4
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	4613      	mov	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	009a      	lsls	r2, r3, #2
 8008100:	441a      	add	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	fbb2 f2f3 	udiv	r2, r2, r3
 800810c:	4b1a      	ldr	r3, [pc, #104]	; (8008178 <UART_SetConfig+0x118>)
 800810e:	fba3 0302 	umull	r0, r3, r3, r2
 8008112:	095b      	lsrs	r3, r3, #5
 8008114:	2064      	movs	r0, #100	; 0x64
 8008116:	fb00 f303 	mul.w	r3, r0, r3
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	3332      	adds	r3, #50	; 0x32
 8008120:	4a15      	ldr	r2, [pc, #84]	; (8008178 <UART_SetConfig+0x118>)
 8008122:	fba2 2303 	umull	r2, r3, r2, r3
 8008126:	095b      	lsrs	r3, r3, #5
 8008128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800812c:	4419      	add	r1, r3
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	4613      	mov	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	009a      	lsls	r2, r3, #2
 8008138:	441a      	add	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	fbb2 f2f3 	udiv	r2, r2, r3
 8008144:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <UART_SetConfig+0x118>)
 8008146:	fba3 0302 	umull	r0, r3, r3, r2
 800814a:	095b      	lsrs	r3, r3, #5
 800814c:	2064      	movs	r0, #100	; 0x64
 800814e:	fb00 f303 	mul.w	r3, r0, r3
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	3332      	adds	r3, #50	; 0x32
 8008158:	4a07      	ldr	r2, [pc, #28]	; (8008178 <UART_SetConfig+0x118>)
 800815a:	fba2 2303 	umull	r2, r3, r2, r3
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	f003 020f 	and.w	r2, r3, #15
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	440a      	add	r2, r1
 800816a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800816c:	bf00      	nop
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40013800 	.word	0x40013800
 8008178:	51eb851f 	.word	0x51eb851f

0800817c <__errno>:
 800817c:	4b01      	ldr	r3, [pc, #4]	; (8008184 <__errno+0x8>)
 800817e:	6818      	ldr	r0, [r3, #0]
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	20000050 	.word	0x20000050

08008188 <__libc_init_array>:
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	2600      	movs	r6, #0
 800818c:	4d0c      	ldr	r5, [pc, #48]	; (80081c0 <__libc_init_array+0x38>)
 800818e:	4c0d      	ldr	r4, [pc, #52]	; (80081c4 <__libc_init_array+0x3c>)
 8008190:	1b64      	subs	r4, r4, r5
 8008192:	10a4      	asrs	r4, r4, #2
 8008194:	42a6      	cmp	r6, r4
 8008196:	d109      	bne.n	80081ac <__libc_init_array+0x24>
 8008198:	f000 fcda 	bl	8008b50 <_init>
 800819c:	2600      	movs	r6, #0
 800819e:	4d0a      	ldr	r5, [pc, #40]	; (80081c8 <__libc_init_array+0x40>)
 80081a0:	4c0a      	ldr	r4, [pc, #40]	; (80081cc <__libc_init_array+0x44>)
 80081a2:	1b64      	subs	r4, r4, r5
 80081a4:	10a4      	asrs	r4, r4, #2
 80081a6:	42a6      	cmp	r6, r4
 80081a8:	d105      	bne.n	80081b6 <__libc_init_array+0x2e>
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
 80081ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b0:	4798      	blx	r3
 80081b2:	3601      	adds	r6, #1
 80081b4:	e7ee      	b.n	8008194 <__libc_init_array+0xc>
 80081b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ba:	4798      	blx	r3
 80081bc:	3601      	adds	r6, #1
 80081be:	e7f2      	b.n	80081a6 <__libc_init_array+0x1e>
 80081c0:	08009544 	.word	0x08009544
 80081c4:	08009544 	.word	0x08009544
 80081c8:	08009544 	.word	0x08009544
 80081cc:	08009548 	.word	0x08009548

080081d0 <__itoa>:
 80081d0:	1e93      	subs	r3, r2, #2
 80081d2:	2b22      	cmp	r3, #34	; 0x22
 80081d4:	b510      	push	{r4, lr}
 80081d6:	460c      	mov	r4, r1
 80081d8:	d904      	bls.n	80081e4 <__itoa+0x14>
 80081da:	2300      	movs	r3, #0
 80081dc:	461c      	mov	r4, r3
 80081de:	700b      	strb	r3, [r1, #0]
 80081e0:	4620      	mov	r0, r4
 80081e2:	bd10      	pop	{r4, pc}
 80081e4:	2a0a      	cmp	r2, #10
 80081e6:	d109      	bne.n	80081fc <__itoa+0x2c>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	da07      	bge.n	80081fc <__itoa+0x2c>
 80081ec:	232d      	movs	r3, #45	; 0x2d
 80081ee:	700b      	strb	r3, [r1, #0]
 80081f0:	2101      	movs	r1, #1
 80081f2:	4240      	negs	r0, r0
 80081f4:	4421      	add	r1, r4
 80081f6:	f000 f913 	bl	8008420 <__utoa>
 80081fa:	e7f1      	b.n	80081e0 <__itoa+0x10>
 80081fc:	2100      	movs	r1, #0
 80081fe:	e7f9      	b.n	80081f4 <__itoa+0x24>

08008200 <itoa>:
 8008200:	f7ff bfe6 	b.w	80081d0 <__itoa>

08008204 <memcpy>:
 8008204:	440a      	add	r2, r1
 8008206:	4291      	cmp	r1, r2
 8008208:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800820c:	d100      	bne.n	8008210 <memcpy+0xc>
 800820e:	4770      	bx	lr
 8008210:	b510      	push	{r4, lr}
 8008212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008216:	4291      	cmp	r1, r2
 8008218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800821c:	d1f9      	bne.n	8008212 <memcpy+0xe>
 800821e:	bd10      	pop	{r4, pc}

08008220 <memset>:
 8008220:	4603      	mov	r3, r0
 8008222:	4402      	add	r2, r0
 8008224:	4293      	cmp	r3, r2
 8008226:	d100      	bne.n	800822a <memset+0xa>
 8008228:	4770      	bx	lr
 800822a:	f803 1b01 	strb.w	r1, [r3], #1
 800822e:	e7f9      	b.n	8008224 <memset+0x4>

08008230 <_free_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4605      	mov	r5, r0
 8008234:	2900      	cmp	r1, #0
 8008236:	d043      	beq.n	80082c0 <_free_r+0x90>
 8008238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800823c:	1f0c      	subs	r4, r1, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	bfb8      	it	lt
 8008242:	18e4      	addlt	r4, r4, r3
 8008244:	f000 f92e 	bl	80084a4 <__malloc_lock>
 8008248:	4a1e      	ldr	r2, [pc, #120]	; (80082c4 <_free_r+0x94>)
 800824a:	6813      	ldr	r3, [r2, #0]
 800824c:	4610      	mov	r0, r2
 800824e:	b933      	cbnz	r3, 800825e <_free_r+0x2e>
 8008250:	6063      	str	r3, [r4, #4]
 8008252:	6014      	str	r4, [r2, #0]
 8008254:	4628      	mov	r0, r5
 8008256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800825a:	f000 b929 	b.w	80084b0 <__malloc_unlock>
 800825e:	42a3      	cmp	r3, r4
 8008260:	d90a      	bls.n	8008278 <_free_r+0x48>
 8008262:	6821      	ldr	r1, [r4, #0]
 8008264:	1862      	adds	r2, r4, r1
 8008266:	4293      	cmp	r3, r2
 8008268:	bf01      	itttt	eq
 800826a:	681a      	ldreq	r2, [r3, #0]
 800826c:	685b      	ldreq	r3, [r3, #4]
 800826e:	1852      	addeq	r2, r2, r1
 8008270:	6022      	streq	r2, [r4, #0]
 8008272:	6063      	str	r3, [r4, #4]
 8008274:	6004      	str	r4, [r0, #0]
 8008276:	e7ed      	b.n	8008254 <_free_r+0x24>
 8008278:	461a      	mov	r2, r3
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	b10b      	cbz	r3, 8008282 <_free_r+0x52>
 800827e:	42a3      	cmp	r3, r4
 8008280:	d9fa      	bls.n	8008278 <_free_r+0x48>
 8008282:	6811      	ldr	r1, [r2, #0]
 8008284:	1850      	adds	r0, r2, r1
 8008286:	42a0      	cmp	r0, r4
 8008288:	d10b      	bne.n	80082a2 <_free_r+0x72>
 800828a:	6820      	ldr	r0, [r4, #0]
 800828c:	4401      	add	r1, r0
 800828e:	1850      	adds	r0, r2, r1
 8008290:	4283      	cmp	r3, r0
 8008292:	6011      	str	r1, [r2, #0]
 8008294:	d1de      	bne.n	8008254 <_free_r+0x24>
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	4401      	add	r1, r0
 800829c:	6011      	str	r1, [r2, #0]
 800829e:	6053      	str	r3, [r2, #4]
 80082a0:	e7d8      	b.n	8008254 <_free_r+0x24>
 80082a2:	d902      	bls.n	80082aa <_free_r+0x7a>
 80082a4:	230c      	movs	r3, #12
 80082a6:	602b      	str	r3, [r5, #0]
 80082a8:	e7d4      	b.n	8008254 <_free_r+0x24>
 80082aa:	6820      	ldr	r0, [r4, #0]
 80082ac:	1821      	adds	r1, r4, r0
 80082ae:	428b      	cmp	r3, r1
 80082b0:	bf01      	itttt	eq
 80082b2:	6819      	ldreq	r1, [r3, #0]
 80082b4:	685b      	ldreq	r3, [r3, #4]
 80082b6:	1809      	addeq	r1, r1, r0
 80082b8:	6021      	streq	r1, [r4, #0]
 80082ba:	6063      	str	r3, [r4, #4]
 80082bc:	6054      	str	r4, [r2, #4]
 80082be:	e7c9      	b.n	8008254 <_free_r+0x24>
 80082c0:	bd38      	pop	{r3, r4, r5, pc}
 80082c2:	bf00      	nop
 80082c4:	200005a0 	.word	0x200005a0

080082c8 <_malloc_r>:
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	1ccd      	adds	r5, r1, #3
 80082cc:	f025 0503 	bic.w	r5, r5, #3
 80082d0:	3508      	adds	r5, #8
 80082d2:	2d0c      	cmp	r5, #12
 80082d4:	bf38      	it	cc
 80082d6:	250c      	movcc	r5, #12
 80082d8:	2d00      	cmp	r5, #0
 80082da:	4606      	mov	r6, r0
 80082dc:	db01      	blt.n	80082e2 <_malloc_r+0x1a>
 80082de:	42a9      	cmp	r1, r5
 80082e0:	d903      	bls.n	80082ea <_malloc_r+0x22>
 80082e2:	230c      	movs	r3, #12
 80082e4:	6033      	str	r3, [r6, #0]
 80082e6:	2000      	movs	r0, #0
 80082e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ea:	f000 f8db 	bl	80084a4 <__malloc_lock>
 80082ee:	4921      	ldr	r1, [pc, #132]	; (8008374 <_malloc_r+0xac>)
 80082f0:	680a      	ldr	r2, [r1, #0]
 80082f2:	4614      	mov	r4, r2
 80082f4:	b99c      	cbnz	r4, 800831e <_malloc_r+0x56>
 80082f6:	4f20      	ldr	r7, [pc, #128]	; (8008378 <_malloc_r+0xb0>)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	b923      	cbnz	r3, 8008306 <_malloc_r+0x3e>
 80082fc:	4621      	mov	r1, r4
 80082fe:	4630      	mov	r0, r6
 8008300:	f000 f83c 	bl	800837c <_sbrk_r>
 8008304:	6038      	str	r0, [r7, #0]
 8008306:	4629      	mov	r1, r5
 8008308:	4630      	mov	r0, r6
 800830a:	f000 f837 	bl	800837c <_sbrk_r>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	d123      	bne.n	800835a <_malloc_r+0x92>
 8008312:	230c      	movs	r3, #12
 8008314:	4630      	mov	r0, r6
 8008316:	6033      	str	r3, [r6, #0]
 8008318:	f000 f8ca 	bl	80084b0 <__malloc_unlock>
 800831c:	e7e3      	b.n	80082e6 <_malloc_r+0x1e>
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	1b5b      	subs	r3, r3, r5
 8008322:	d417      	bmi.n	8008354 <_malloc_r+0x8c>
 8008324:	2b0b      	cmp	r3, #11
 8008326:	d903      	bls.n	8008330 <_malloc_r+0x68>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	441c      	add	r4, r3
 800832c:	6025      	str	r5, [r4, #0]
 800832e:	e004      	b.n	800833a <_malloc_r+0x72>
 8008330:	6863      	ldr	r3, [r4, #4]
 8008332:	42a2      	cmp	r2, r4
 8008334:	bf0c      	ite	eq
 8008336:	600b      	streq	r3, [r1, #0]
 8008338:	6053      	strne	r3, [r2, #4]
 800833a:	4630      	mov	r0, r6
 800833c:	f000 f8b8 	bl	80084b0 <__malloc_unlock>
 8008340:	f104 000b 	add.w	r0, r4, #11
 8008344:	1d23      	adds	r3, r4, #4
 8008346:	f020 0007 	bic.w	r0, r0, #7
 800834a:	1ac2      	subs	r2, r0, r3
 800834c:	d0cc      	beq.n	80082e8 <_malloc_r+0x20>
 800834e:	1a1b      	subs	r3, r3, r0
 8008350:	50a3      	str	r3, [r4, r2]
 8008352:	e7c9      	b.n	80082e8 <_malloc_r+0x20>
 8008354:	4622      	mov	r2, r4
 8008356:	6864      	ldr	r4, [r4, #4]
 8008358:	e7cc      	b.n	80082f4 <_malloc_r+0x2c>
 800835a:	1cc4      	adds	r4, r0, #3
 800835c:	f024 0403 	bic.w	r4, r4, #3
 8008360:	42a0      	cmp	r0, r4
 8008362:	d0e3      	beq.n	800832c <_malloc_r+0x64>
 8008364:	1a21      	subs	r1, r4, r0
 8008366:	4630      	mov	r0, r6
 8008368:	f000 f808 	bl	800837c <_sbrk_r>
 800836c:	3001      	adds	r0, #1
 800836e:	d1dd      	bne.n	800832c <_malloc_r+0x64>
 8008370:	e7cf      	b.n	8008312 <_malloc_r+0x4a>
 8008372:	bf00      	nop
 8008374:	200005a0 	.word	0x200005a0
 8008378:	200005a4 	.word	0x200005a4

0800837c <_sbrk_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	2300      	movs	r3, #0
 8008380:	4d05      	ldr	r5, [pc, #20]	; (8008398 <_sbrk_r+0x1c>)
 8008382:	4604      	mov	r4, r0
 8008384:	4608      	mov	r0, r1
 8008386:	602b      	str	r3, [r5, #0]
 8008388:	f7fa ff56 	bl	8003238 <_sbrk>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_sbrk_r+0x1a>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_sbrk_r+0x1a>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	20000a28 	.word	0x20000a28

0800839c <siprintf>:
 800839c:	b40e      	push	{r1, r2, r3}
 800839e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083a2:	b500      	push	{lr}
 80083a4:	b09c      	sub	sp, #112	; 0x70
 80083a6:	ab1d      	add	r3, sp, #116	; 0x74
 80083a8:	9002      	str	r0, [sp, #8]
 80083aa:	9006      	str	r0, [sp, #24]
 80083ac:	9107      	str	r1, [sp, #28]
 80083ae:	9104      	str	r1, [sp, #16]
 80083b0:	4808      	ldr	r0, [pc, #32]	; (80083d4 <siprintf+0x38>)
 80083b2:	4909      	ldr	r1, [pc, #36]	; (80083d8 <siprintf+0x3c>)
 80083b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083b8:	9105      	str	r1, [sp, #20]
 80083ba:	6800      	ldr	r0, [r0, #0]
 80083bc:	a902      	add	r1, sp, #8
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	f000 f8d8 	bl	8008574 <_svfiprintf_r>
 80083c4:	2200      	movs	r2, #0
 80083c6:	9b02      	ldr	r3, [sp, #8]
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	b01c      	add	sp, #112	; 0x70
 80083cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d0:	b003      	add	sp, #12
 80083d2:	4770      	bx	lr
 80083d4:	20000050 	.word	0x20000050
 80083d8:	ffff0208 	.word	0xffff0208

080083dc <strcat>:
 80083dc:	4602      	mov	r2, r0
 80083de:	b510      	push	{r4, lr}
 80083e0:	7814      	ldrb	r4, [r2, #0]
 80083e2:	4613      	mov	r3, r2
 80083e4:	3201      	adds	r2, #1
 80083e6:	2c00      	cmp	r4, #0
 80083e8:	d1fa      	bne.n	80083e0 <strcat+0x4>
 80083ea:	3b01      	subs	r3, #1
 80083ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083f4:	2a00      	cmp	r2, #0
 80083f6:	d1f9      	bne.n	80083ec <strcat+0x10>
 80083f8:	bd10      	pop	{r4, pc}

080083fa <strncpy>:
 80083fa:	4603      	mov	r3, r0
 80083fc:	b510      	push	{r4, lr}
 80083fe:	3901      	subs	r1, #1
 8008400:	b132      	cbz	r2, 8008410 <strncpy+0x16>
 8008402:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008406:	3a01      	subs	r2, #1
 8008408:	f803 4b01 	strb.w	r4, [r3], #1
 800840c:	2c00      	cmp	r4, #0
 800840e:	d1f7      	bne.n	8008400 <strncpy+0x6>
 8008410:	2100      	movs	r1, #0
 8008412:	441a      	add	r2, r3
 8008414:	4293      	cmp	r3, r2
 8008416:	d100      	bne.n	800841a <strncpy+0x20>
 8008418:	bd10      	pop	{r4, pc}
 800841a:	f803 1b01 	strb.w	r1, [r3], #1
 800841e:	e7f9      	b.n	8008414 <strncpy+0x1a>

08008420 <__utoa>:
 8008420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008422:	b08b      	sub	sp, #44	; 0x2c
 8008424:	4605      	mov	r5, r0
 8008426:	460b      	mov	r3, r1
 8008428:	466e      	mov	r6, sp
 800842a:	4c1d      	ldr	r4, [pc, #116]	; (80084a0 <__utoa+0x80>)
 800842c:	f104 0c20 	add.w	ip, r4, #32
 8008430:	4637      	mov	r7, r6
 8008432:	6820      	ldr	r0, [r4, #0]
 8008434:	6861      	ldr	r1, [r4, #4]
 8008436:	3408      	adds	r4, #8
 8008438:	c703      	stmia	r7!, {r0, r1}
 800843a:	4564      	cmp	r4, ip
 800843c:	463e      	mov	r6, r7
 800843e:	d1f7      	bne.n	8008430 <__utoa+0x10>
 8008440:	7921      	ldrb	r1, [r4, #4]
 8008442:	6820      	ldr	r0, [r4, #0]
 8008444:	7139      	strb	r1, [r7, #4]
 8008446:	1e91      	subs	r1, r2, #2
 8008448:	2922      	cmp	r1, #34	; 0x22
 800844a:	6038      	str	r0, [r7, #0]
 800844c:	f04f 0100 	mov.w	r1, #0
 8008450:	d904      	bls.n	800845c <__utoa+0x3c>
 8008452:	7019      	strb	r1, [r3, #0]
 8008454:	460b      	mov	r3, r1
 8008456:	4618      	mov	r0, r3
 8008458:	b00b      	add	sp, #44	; 0x2c
 800845a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800845c:	1e58      	subs	r0, r3, #1
 800845e:	4684      	mov	ip, r0
 8008460:	fbb5 f7f2 	udiv	r7, r5, r2
 8008464:	fb02 5617 	mls	r6, r2, r7, r5
 8008468:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800846c:	4476      	add	r6, lr
 800846e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008472:	460c      	mov	r4, r1
 8008474:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008478:	462e      	mov	r6, r5
 800847a:	42b2      	cmp	r2, r6
 800847c:	463d      	mov	r5, r7
 800847e:	f101 0101 	add.w	r1, r1, #1
 8008482:	d9ed      	bls.n	8008460 <__utoa+0x40>
 8008484:	2200      	movs	r2, #0
 8008486:	545a      	strb	r2, [r3, r1]
 8008488:	1919      	adds	r1, r3, r4
 800848a:	1aa5      	subs	r5, r4, r2
 800848c:	42aa      	cmp	r2, r5
 800848e:	dae2      	bge.n	8008456 <__utoa+0x36>
 8008490:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008494:	780e      	ldrb	r6, [r1, #0]
 8008496:	3201      	adds	r2, #1
 8008498:	7006      	strb	r6, [r0, #0]
 800849a:	f801 5901 	strb.w	r5, [r1], #-1
 800849e:	e7f4      	b.n	800848a <__utoa+0x6a>
 80084a0:	080094ec 	.word	0x080094ec

080084a4 <__malloc_lock>:
 80084a4:	4801      	ldr	r0, [pc, #4]	; (80084ac <__malloc_lock+0x8>)
 80084a6:	f000 bafb 	b.w	8008aa0 <__retarget_lock_acquire_recursive>
 80084aa:	bf00      	nop
 80084ac:	20000a30 	.word	0x20000a30

080084b0 <__malloc_unlock>:
 80084b0:	4801      	ldr	r0, [pc, #4]	; (80084b8 <__malloc_unlock+0x8>)
 80084b2:	f000 baf6 	b.w	8008aa2 <__retarget_lock_release_recursive>
 80084b6:	bf00      	nop
 80084b8:	20000a30 	.word	0x20000a30

080084bc <__ssputs_r>:
 80084bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	688e      	ldr	r6, [r1, #8]
 80084c2:	4682      	mov	sl, r0
 80084c4:	429e      	cmp	r6, r3
 80084c6:	460c      	mov	r4, r1
 80084c8:	4690      	mov	r8, r2
 80084ca:	461f      	mov	r7, r3
 80084cc:	d838      	bhi.n	8008540 <__ssputs_r+0x84>
 80084ce:	898a      	ldrh	r2, [r1, #12]
 80084d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084d4:	d032      	beq.n	800853c <__ssputs_r+0x80>
 80084d6:	6825      	ldr	r5, [r4, #0]
 80084d8:	6909      	ldr	r1, [r1, #16]
 80084da:	3301      	adds	r3, #1
 80084dc:	eba5 0901 	sub.w	r9, r5, r1
 80084e0:	6965      	ldr	r5, [r4, #20]
 80084e2:	444b      	add	r3, r9
 80084e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084ec:	106d      	asrs	r5, r5, #1
 80084ee:	429d      	cmp	r5, r3
 80084f0:	bf38      	it	cc
 80084f2:	461d      	movcc	r5, r3
 80084f4:	0553      	lsls	r3, r2, #21
 80084f6:	d531      	bpl.n	800855c <__ssputs_r+0xa0>
 80084f8:	4629      	mov	r1, r5
 80084fa:	f7ff fee5 	bl	80082c8 <_malloc_r>
 80084fe:	4606      	mov	r6, r0
 8008500:	b950      	cbnz	r0, 8008518 <__ssputs_r+0x5c>
 8008502:	230c      	movs	r3, #12
 8008504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008508:	f8ca 3000 	str.w	r3, [sl]
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008518:	464a      	mov	r2, r9
 800851a:	6921      	ldr	r1, [r4, #16]
 800851c:	f7ff fe72 	bl	8008204 <memcpy>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	6126      	str	r6, [r4, #16]
 800852e:	444e      	add	r6, r9
 8008530:	6026      	str	r6, [r4, #0]
 8008532:	463e      	mov	r6, r7
 8008534:	6165      	str	r5, [r4, #20]
 8008536:	eba5 0509 	sub.w	r5, r5, r9
 800853a:	60a5      	str	r5, [r4, #8]
 800853c:	42be      	cmp	r6, r7
 800853e:	d900      	bls.n	8008542 <__ssputs_r+0x86>
 8008540:	463e      	mov	r6, r7
 8008542:	4632      	mov	r2, r6
 8008544:	4641      	mov	r1, r8
 8008546:	6820      	ldr	r0, [r4, #0]
 8008548:	f000 faba 	bl	8008ac0 <memmove>
 800854c:	68a3      	ldr	r3, [r4, #8]
 800854e:	6822      	ldr	r2, [r4, #0]
 8008550:	1b9b      	subs	r3, r3, r6
 8008552:	4432      	add	r2, r6
 8008554:	2000      	movs	r0, #0
 8008556:	60a3      	str	r3, [r4, #8]
 8008558:	6022      	str	r2, [r4, #0]
 800855a:	e7db      	b.n	8008514 <__ssputs_r+0x58>
 800855c:	462a      	mov	r2, r5
 800855e:	f000 fac9 	bl	8008af4 <_realloc_r>
 8008562:	4606      	mov	r6, r0
 8008564:	2800      	cmp	r0, #0
 8008566:	d1e1      	bne.n	800852c <__ssputs_r+0x70>
 8008568:	4650      	mov	r0, sl
 800856a:	6921      	ldr	r1, [r4, #16]
 800856c:	f7ff fe60 	bl	8008230 <_free_r>
 8008570:	e7c7      	b.n	8008502 <__ssputs_r+0x46>
	...

08008574 <_svfiprintf_r>:
 8008574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	4698      	mov	r8, r3
 800857a:	898b      	ldrh	r3, [r1, #12]
 800857c:	4607      	mov	r7, r0
 800857e:	061b      	lsls	r3, r3, #24
 8008580:	460d      	mov	r5, r1
 8008582:	4614      	mov	r4, r2
 8008584:	b09d      	sub	sp, #116	; 0x74
 8008586:	d50e      	bpl.n	80085a6 <_svfiprintf_r+0x32>
 8008588:	690b      	ldr	r3, [r1, #16]
 800858a:	b963      	cbnz	r3, 80085a6 <_svfiprintf_r+0x32>
 800858c:	2140      	movs	r1, #64	; 0x40
 800858e:	f7ff fe9b 	bl	80082c8 <_malloc_r>
 8008592:	6028      	str	r0, [r5, #0]
 8008594:	6128      	str	r0, [r5, #16]
 8008596:	b920      	cbnz	r0, 80085a2 <_svfiprintf_r+0x2e>
 8008598:	230c      	movs	r3, #12
 800859a:	603b      	str	r3, [r7, #0]
 800859c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085a0:	e0d1      	b.n	8008746 <_svfiprintf_r+0x1d2>
 80085a2:	2340      	movs	r3, #64	; 0x40
 80085a4:	616b      	str	r3, [r5, #20]
 80085a6:	2300      	movs	r3, #0
 80085a8:	9309      	str	r3, [sp, #36]	; 0x24
 80085aa:	2320      	movs	r3, #32
 80085ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085b0:	2330      	movs	r3, #48	; 0x30
 80085b2:	f04f 0901 	mov.w	r9, #1
 80085b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008760 <_svfiprintf_r+0x1ec>
 80085be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085c2:	4623      	mov	r3, r4
 80085c4:	469a      	mov	sl, r3
 80085c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ca:	b10a      	cbz	r2, 80085d0 <_svfiprintf_r+0x5c>
 80085cc:	2a25      	cmp	r2, #37	; 0x25
 80085ce:	d1f9      	bne.n	80085c4 <_svfiprintf_r+0x50>
 80085d0:	ebba 0b04 	subs.w	fp, sl, r4
 80085d4:	d00b      	beq.n	80085ee <_svfiprintf_r+0x7a>
 80085d6:	465b      	mov	r3, fp
 80085d8:	4622      	mov	r2, r4
 80085da:	4629      	mov	r1, r5
 80085dc:	4638      	mov	r0, r7
 80085de:	f7ff ff6d 	bl	80084bc <__ssputs_r>
 80085e2:	3001      	adds	r0, #1
 80085e4:	f000 80aa 	beq.w	800873c <_svfiprintf_r+0x1c8>
 80085e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ea:	445a      	add	r2, fp
 80085ec:	9209      	str	r2, [sp, #36]	; 0x24
 80085ee:	f89a 3000 	ldrb.w	r3, [sl]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 80a2 	beq.w	800873c <_svfiprintf_r+0x1c8>
 80085f8:	2300      	movs	r3, #0
 80085fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008602:	f10a 0a01 	add.w	sl, sl, #1
 8008606:	9304      	str	r3, [sp, #16]
 8008608:	9307      	str	r3, [sp, #28]
 800860a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800860e:	931a      	str	r3, [sp, #104]	; 0x68
 8008610:	4654      	mov	r4, sl
 8008612:	2205      	movs	r2, #5
 8008614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008618:	4851      	ldr	r0, [pc, #324]	; (8008760 <_svfiprintf_r+0x1ec>)
 800861a:	f000 fa43 	bl	8008aa4 <memchr>
 800861e:	9a04      	ldr	r2, [sp, #16]
 8008620:	b9d8      	cbnz	r0, 800865a <_svfiprintf_r+0xe6>
 8008622:	06d0      	lsls	r0, r2, #27
 8008624:	bf44      	itt	mi
 8008626:	2320      	movmi	r3, #32
 8008628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800862c:	0711      	lsls	r1, r2, #28
 800862e:	bf44      	itt	mi
 8008630:	232b      	movmi	r3, #43	; 0x2b
 8008632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008636:	f89a 3000 	ldrb.w	r3, [sl]
 800863a:	2b2a      	cmp	r3, #42	; 0x2a
 800863c:	d015      	beq.n	800866a <_svfiprintf_r+0xf6>
 800863e:	4654      	mov	r4, sl
 8008640:	2000      	movs	r0, #0
 8008642:	f04f 0c0a 	mov.w	ip, #10
 8008646:	9a07      	ldr	r2, [sp, #28]
 8008648:	4621      	mov	r1, r4
 800864a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800864e:	3b30      	subs	r3, #48	; 0x30
 8008650:	2b09      	cmp	r3, #9
 8008652:	d94e      	bls.n	80086f2 <_svfiprintf_r+0x17e>
 8008654:	b1b0      	cbz	r0, 8008684 <_svfiprintf_r+0x110>
 8008656:	9207      	str	r2, [sp, #28]
 8008658:	e014      	b.n	8008684 <_svfiprintf_r+0x110>
 800865a:	eba0 0308 	sub.w	r3, r0, r8
 800865e:	fa09 f303 	lsl.w	r3, r9, r3
 8008662:	4313      	orrs	r3, r2
 8008664:	46a2      	mov	sl, r4
 8008666:	9304      	str	r3, [sp, #16]
 8008668:	e7d2      	b.n	8008610 <_svfiprintf_r+0x9c>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	1d19      	adds	r1, r3, #4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	9103      	str	r1, [sp, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	bfbb      	ittet	lt
 8008676:	425b      	neglt	r3, r3
 8008678:	f042 0202 	orrlt.w	r2, r2, #2
 800867c:	9307      	strge	r3, [sp, #28]
 800867e:	9307      	strlt	r3, [sp, #28]
 8008680:	bfb8      	it	lt
 8008682:	9204      	strlt	r2, [sp, #16]
 8008684:	7823      	ldrb	r3, [r4, #0]
 8008686:	2b2e      	cmp	r3, #46	; 0x2e
 8008688:	d10c      	bne.n	80086a4 <_svfiprintf_r+0x130>
 800868a:	7863      	ldrb	r3, [r4, #1]
 800868c:	2b2a      	cmp	r3, #42	; 0x2a
 800868e:	d135      	bne.n	80086fc <_svfiprintf_r+0x188>
 8008690:	9b03      	ldr	r3, [sp, #12]
 8008692:	3402      	adds	r4, #2
 8008694:	1d1a      	adds	r2, r3, #4
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	9203      	str	r2, [sp, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	bfb8      	it	lt
 800869e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086a2:	9305      	str	r3, [sp, #20]
 80086a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008770 <_svfiprintf_r+0x1fc>
 80086a8:	2203      	movs	r2, #3
 80086aa:	4650      	mov	r0, sl
 80086ac:	7821      	ldrb	r1, [r4, #0]
 80086ae:	f000 f9f9 	bl	8008aa4 <memchr>
 80086b2:	b140      	cbz	r0, 80086c6 <_svfiprintf_r+0x152>
 80086b4:	2340      	movs	r3, #64	; 0x40
 80086b6:	eba0 000a 	sub.w	r0, r0, sl
 80086ba:	fa03 f000 	lsl.w	r0, r3, r0
 80086be:	9b04      	ldr	r3, [sp, #16]
 80086c0:	3401      	adds	r4, #1
 80086c2:	4303      	orrs	r3, r0
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ca:	2206      	movs	r2, #6
 80086cc:	4825      	ldr	r0, [pc, #148]	; (8008764 <_svfiprintf_r+0x1f0>)
 80086ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086d2:	f000 f9e7 	bl	8008aa4 <memchr>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d038      	beq.n	800874c <_svfiprintf_r+0x1d8>
 80086da:	4b23      	ldr	r3, [pc, #140]	; (8008768 <_svfiprintf_r+0x1f4>)
 80086dc:	bb1b      	cbnz	r3, 8008726 <_svfiprintf_r+0x1b2>
 80086de:	9b03      	ldr	r3, [sp, #12]
 80086e0:	3307      	adds	r3, #7
 80086e2:	f023 0307 	bic.w	r3, r3, #7
 80086e6:	3308      	adds	r3, #8
 80086e8:	9303      	str	r3, [sp, #12]
 80086ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ec:	4433      	add	r3, r6
 80086ee:	9309      	str	r3, [sp, #36]	; 0x24
 80086f0:	e767      	b.n	80085c2 <_svfiprintf_r+0x4e>
 80086f2:	460c      	mov	r4, r1
 80086f4:	2001      	movs	r0, #1
 80086f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086fa:	e7a5      	b.n	8008648 <_svfiprintf_r+0xd4>
 80086fc:	2300      	movs	r3, #0
 80086fe:	f04f 0c0a 	mov.w	ip, #10
 8008702:	4619      	mov	r1, r3
 8008704:	3401      	adds	r4, #1
 8008706:	9305      	str	r3, [sp, #20]
 8008708:	4620      	mov	r0, r4
 800870a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800870e:	3a30      	subs	r2, #48	; 0x30
 8008710:	2a09      	cmp	r2, #9
 8008712:	d903      	bls.n	800871c <_svfiprintf_r+0x1a8>
 8008714:	2b00      	cmp	r3, #0
 8008716:	d0c5      	beq.n	80086a4 <_svfiprintf_r+0x130>
 8008718:	9105      	str	r1, [sp, #20]
 800871a:	e7c3      	b.n	80086a4 <_svfiprintf_r+0x130>
 800871c:	4604      	mov	r4, r0
 800871e:	2301      	movs	r3, #1
 8008720:	fb0c 2101 	mla	r1, ip, r1, r2
 8008724:	e7f0      	b.n	8008708 <_svfiprintf_r+0x194>
 8008726:	ab03      	add	r3, sp, #12
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	462a      	mov	r2, r5
 800872c:	4638      	mov	r0, r7
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <_svfiprintf_r+0x1f8>)
 8008730:	a904      	add	r1, sp, #16
 8008732:	f3af 8000 	nop.w
 8008736:	1c42      	adds	r2, r0, #1
 8008738:	4606      	mov	r6, r0
 800873a:	d1d6      	bne.n	80086ea <_svfiprintf_r+0x176>
 800873c:	89ab      	ldrh	r3, [r5, #12]
 800873e:	065b      	lsls	r3, r3, #25
 8008740:	f53f af2c 	bmi.w	800859c <_svfiprintf_r+0x28>
 8008744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008746:	b01d      	add	sp, #116	; 0x74
 8008748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874c:	ab03      	add	r3, sp, #12
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	462a      	mov	r2, r5
 8008752:	4638      	mov	r0, r7
 8008754:	4b05      	ldr	r3, [pc, #20]	; (800876c <_svfiprintf_r+0x1f8>)
 8008756:	a904      	add	r1, sp, #16
 8008758:	f000 f87c 	bl	8008854 <_printf_i>
 800875c:	e7eb      	b.n	8008736 <_svfiprintf_r+0x1c2>
 800875e:	bf00      	nop
 8008760:	08009511 	.word	0x08009511
 8008764:	0800951b 	.word	0x0800951b
 8008768:	00000000 	.word	0x00000000
 800876c:	080084bd 	.word	0x080084bd
 8008770:	08009517 	.word	0x08009517

08008774 <_printf_common>:
 8008774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	4616      	mov	r6, r2
 800877a:	4699      	mov	r9, r3
 800877c:	688a      	ldr	r2, [r1, #8]
 800877e:	690b      	ldr	r3, [r1, #16]
 8008780:	4607      	mov	r7, r0
 8008782:	4293      	cmp	r3, r2
 8008784:	bfb8      	it	lt
 8008786:	4613      	movlt	r3, r2
 8008788:	6033      	str	r3, [r6, #0]
 800878a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800878e:	460c      	mov	r4, r1
 8008790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008794:	b10a      	cbz	r2, 800879a <_printf_common+0x26>
 8008796:	3301      	adds	r3, #1
 8008798:	6033      	str	r3, [r6, #0]
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	0699      	lsls	r1, r3, #26
 800879e:	bf42      	ittt	mi
 80087a0:	6833      	ldrmi	r3, [r6, #0]
 80087a2:	3302      	addmi	r3, #2
 80087a4:	6033      	strmi	r3, [r6, #0]
 80087a6:	6825      	ldr	r5, [r4, #0]
 80087a8:	f015 0506 	ands.w	r5, r5, #6
 80087ac:	d106      	bne.n	80087bc <_printf_common+0x48>
 80087ae:	f104 0a19 	add.w	sl, r4, #25
 80087b2:	68e3      	ldr	r3, [r4, #12]
 80087b4:	6832      	ldr	r2, [r6, #0]
 80087b6:	1a9b      	subs	r3, r3, r2
 80087b8:	42ab      	cmp	r3, r5
 80087ba:	dc28      	bgt.n	800880e <_printf_common+0x9a>
 80087bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087c0:	1e13      	subs	r3, r2, #0
 80087c2:	6822      	ldr	r2, [r4, #0]
 80087c4:	bf18      	it	ne
 80087c6:	2301      	movne	r3, #1
 80087c8:	0692      	lsls	r2, r2, #26
 80087ca:	d42d      	bmi.n	8008828 <_printf_common+0xb4>
 80087cc:	4649      	mov	r1, r9
 80087ce:	4638      	mov	r0, r7
 80087d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087d4:	47c0      	blx	r8
 80087d6:	3001      	adds	r0, #1
 80087d8:	d020      	beq.n	800881c <_printf_common+0xa8>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	68e5      	ldr	r5, [r4, #12]
 80087de:	f003 0306 	and.w	r3, r3, #6
 80087e2:	2b04      	cmp	r3, #4
 80087e4:	bf18      	it	ne
 80087e6:	2500      	movne	r5, #0
 80087e8:	6832      	ldr	r2, [r6, #0]
 80087ea:	f04f 0600 	mov.w	r6, #0
 80087ee:	68a3      	ldr	r3, [r4, #8]
 80087f0:	bf08      	it	eq
 80087f2:	1aad      	subeq	r5, r5, r2
 80087f4:	6922      	ldr	r2, [r4, #16]
 80087f6:	bf08      	it	eq
 80087f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087fc:	4293      	cmp	r3, r2
 80087fe:	bfc4      	itt	gt
 8008800:	1a9b      	subgt	r3, r3, r2
 8008802:	18ed      	addgt	r5, r5, r3
 8008804:	341a      	adds	r4, #26
 8008806:	42b5      	cmp	r5, r6
 8008808:	d11a      	bne.n	8008840 <_printf_common+0xcc>
 800880a:	2000      	movs	r0, #0
 800880c:	e008      	b.n	8008820 <_printf_common+0xac>
 800880e:	2301      	movs	r3, #1
 8008810:	4652      	mov	r2, sl
 8008812:	4649      	mov	r1, r9
 8008814:	4638      	mov	r0, r7
 8008816:	47c0      	blx	r8
 8008818:	3001      	adds	r0, #1
 800881a:	d103      	bne.n	8008824 <_printf_common+0xb0>
 800881c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008824:	3501      	adds	r5, #1
 8008826:	e7c4      	b.n	80087b2 <_printf_common+0x3e>
 8008828:	2030      	movs	r0, #48	; 0x30
 800882a:	18e1      	adds	r1, r4, r3
 800882c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008836:	4422      	add	r2, r4
 8008838:	3302      	adds	r3, #2
 800883a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800883e:	e7c5      	b.n	80087cc <_printf_common+0x58>
 8008840:	2301      	movs	r3, #1
 8008842:	4622      	mov	r2, r4
 8008844:	4649      	mov	r1, r9
 8008846:	4638      	mov	r0, r7
 8008848:	47c0      	blx	r8
 800884a:	3001      	adds	r0, #1
 800884c:	d0e6      	beq.n	800881c <_printf_common+0xa8>
 800884e:	3601      	adds	r6, #1
 8008850:	e7d9      	b.n	8008806 <_printf_common+0x92>
	...

08008854 <_printf_i>:
 8008854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008858:	460c      	mov	r4, r1
 800885a:	7e27      	ldrb	r7, [r4, #24]
 800885c:	4691      	mov	r9, r2
 800885e:	2f78      	cmp	r7, #120	; 0x78
 8008860:	4680      	mov	r8, r0
 8008862:	469a      	mov	sl, r3
 8008864:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008866:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800886a:	d807      	bhi.n	800887c <_printf_i+0x28>
 800886c:	2f62      	cmp	r7, #98	; 0x62
 800886e:	d80a      	bhi.n	8008886 <_printf_i+0x32>
 8008870:	2f00      	cmp	r7, #0
 8008872:	f000 80d9 	beq.w	8008a28 <_printf_i+0x1d4>
 8008876:	2f58      	cmp	r7, #88	; 0x58
 8008878:	f000 80a4 	beq.w	80089c4 <_printf_i+0x170>
 800887c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008884:	e03a      	b.n	80088fc <_printf_i+0xa8>
 8008886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800888a:	2b15      	cmp	r3, #21
 800888c:	d8f6      	bhi.n	800887c <_printf_i+0x28>
 800888e:	a001      	add	r0, pc, #4	; (adr r0, 8008894 <_printf_i+0x40>)
 8008890:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008894:	080088ed 	.word	0x080088ed
 8008898:	08008901 	.word	0x08008901
 800889c:	0800887d 	.word	0x0800887d
 80088a0:	0800887d 	.word	0x0800887d
 80088a4:	0800887d 	.word	0x0800887d
 80088a8:	0800887d 	.word	0x0800887d
 80088ac:	08008901 	.word	0x08008901
 80088b0:	0800887d 	.word	0x0800887d
 80088b4:	0800887d 	.word	0x0800887d
 80088b8:	0800887d 	.word	0x0800887d
 80088bc:	0800887d 	.word	0x0800887d
 80088c0:	08008a0f 	.word	0x08008a0f
 80088c4:	08008931 	.word	0x08008931
 80088c8:	080089f1 	.word	0x080089f1
 80088cc:	0800887d 	.word	0x0800887d
 80088d0:	0800887d 	.word	0x0800887d
 80088d4:	08008a31 	.word	0x08008a31
 80088d8:	0800887d 	.word	0x0800887d
 80088dc:	08008931 	.word	0x08008931
 80088e0:	0800887d 	.word	0x0800887d
 80088e4:	0800887d 	.word	0x0800887d
 80088e8:	080089f9 	.word	0x080089f9
 80088ec:	680b      	ldr	r3, [r1, #0]
 80088ee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088f2:	1d1a      	adds	r2, r3, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	600a      	str	r2, [r1, #0]
 80088f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088fc:	2301      	movs	r3, #1
 80088fe:	e0a4      	b.n	8008a4a <_printf_i+0x1f6>
 8008900:	6825      	ldr	r5, [r4, #0]
 8008902:	6808      	ldr	r0, [r1, #0]
 8008904:	062e      	lsls	r6, r5, #24
 8008906:	f100 0304 	add.w	r3, r0, #4
 800890a:	d50a      	bpl.n	8008922 <_printf_i+0xce>
 800890c:	6805      	ldr	r5, [r0, #0]
 800890e:	600b      	str	r3, [r1, #0]
 8008910:	2d00      	cmp	r5, #0
 8008912:	da03      	bge.n	800891c <_printf_i+0xc8>
 8008914:	232d      	movs	r3, #45	; 0x2d
 8008916:	426d      	negs	r5, r5
 8008918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800891c:	230a      	movs	r3, #10
 800891e:	485e      	ldr	r0, [pc, #376]	; (8008a98 <_printf_i+0x244>)
 8008920:	e019      	b.n	8008956 <_printf_i+0x102>
 8008922:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008926:	6805      	ldr	r5, [r0, #0]
 8008928:	600b      	str	r3, [r1, #0]
 800892a:	bf18      	it	ne
 800892c:	b22d      	sxthne	r5, r5
 800892e:	e7ef      	b.n	8008910 <_printf_i+0xbc>
 8008930:	680b      	ldr	r3, [r1, #0]
 8008932:	6825      	ldr	r5, [r4, #0]
 8008934:	1d18      	adds	r0, r3, #4
 8008936:	6008      	str	r0, [r1, #0]
 8008938:	0628      	lsls	r0, r5, #24
 800893a:	d501      	bpl.n	8008940 <_printf_i+0xec>
 800893c:	681d      	ldr	r5, [r3, #0]
 800893e:	e002      	b.n	8008946 <_printf_i+0xf2>
 8008940:	0669      	lsls	r1, r5, #25
 8008942:	d5fb      	bpl.n	800893c <_printf_i+0xe8>
 8008944:	881d      	ldrh	r5, [r3, #0]
 8008946:	2f6f      	cmp	r7, #111	; 0x6f
 8008948:	bf0c      	ite	eq
 800894a:	2308      	moveq	r3, #8
 800894c:	230a      	movne	r3, #10
 800894e:	4852      	ldr	r0, [pc, #328]	; (8008a98 <_printf_i+0x244>)
 8008950:	2100      	movs	r1, #0
 8008952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008956:	6866      	ldr	r6, [r4, #4]
 8008958:	2e00      	cmp	r6, #0
 800895a:	bfa8      	it	ge
 800895c:	6821      	ldrge	r1, [r4, #0]
 800895e:	60a6      	str	r6, [r4, #8]
 8008960:	bfa4      	itt	ge
 8008962:	f021 0104 	bicge.w	r1, r1, #4
 8008966:	6021      	strge	r1, [r4, #0]
 8008968:	b90d      	cbnz	r5, 800896e <_printf_i+0x11a>
 800896a:	2e00      	cmp	r6, #0
 800896c:	d04d      	beq.n	8008a0a <_printf_i+0x1b6>
 800896e:	4616      	mov	r6, r2
 8008970:	fbb5 f1f3 	udiv	r1, r5, r3
 8008974:	fb03 5711 	mls	r7, r3, r1, r5
 8008978:	5dc7      	ldrb	r7, [r0, r7]
 800897a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800897e:	462f      	mov	r7, r5
 8008980:	42bb      	cmp	r3, r7
 8008982:	460d      	mov	r5, r1
 8008984:	d9f4      	bls.n	8008970 <_printf_i+0x11c>
 8008986:	2b08      	cmp	r3, #8
 8008988:	d10b      	bne.n	80089a2 <_printf_i+0x14e>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	07df      	lsls	r7, r3, #31
 800898e:	d508      	bpl.n	80089a2 <_printf_i+0x14e>
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	6861      	ldr	r1, [r4, #4]
 8008994:	4299      	cmp	r1, r3
 8008996:	bfde      	ittt	le
 8008998:	2330      	movle	r3, #48	; 0x30
 800899a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800899e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80089a2:	1b92      	subs	r2, r2, r6
 80089a4:	6122      	str	r2, [r4, #16]
 80089a6:	464b      	mov	r3, r9
 80089a8:	4621      	mov	r1, r4
 80089aa:	4640      	mov	r0, r8
 80089ac:	f8cd a000 	str.w	sl, [sp]
 80089b0:	aa03      	add	r2, sp, #12
 80089b2:	f7ff fedf 	bl	8008774 <_printf_common>
 80089b6:	3001      	adds	r0, #1
 80089b8:	d14c      	bne.n	8008a54 <_printf_i+0x200>
 80089ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089be:	b004      	add	sp, #16
 80089c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c4:	4834      	ldr	r0, [pc, #208]	; (8008a98 <_printf_i+0x244>)
 80089c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089ca:	680e      	ldr	r6, [r1, #0]
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80089d2:	061f      	lsls	r7, r3, #24
 80089d4:	600e      	str	r6, [r1, #0]
 80089d6:	d514      	bpl.n	8008a02 <_printf_i+0x1ae>
 80089d8:	07d9      	lsls	r1, r3, #31
 80089da:	bf44      	itt	mi
 80089dc:	f043 0320 	orrmi.w	r3, r3, #32
 80089e0:	6023      	strmi	r3, [r4, #0]
 80089e2:	b91d      	cbnz	r5, 80089ec <_printf_i+0x198>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	f023 0320 	bic.w	r3, r3, #32
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	2310      	movs	r3, #16
 80089ee:	e7af      	b.n	8008950 <_printf_i+0xfc>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	f043 0320 	orr.w	r3, r3, #32
 80089f6:	6023      	str	r3, [r4, #0]
 80089f8:	2378      	movs	r3, #120	; 0x78
 80089fa:	4828      	ldr	r0, [pc, #160]	; (8008a9c <_printf_i+0x248>)
 80089fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a00:	e7e3      	b.n	80089ca <_printf_i+0x176>
 8008a02:	065e      	lsls	r6, r3, #25
 8008a04:	bf48      	it	mi
 8008a06:	b2ad      	uxthmi	r5, r5
 8008a08:	e7e6      	b.n	80089d8 <_printf_i+0x184>
 8008a0a:	4616      	mov	r6, r2
 8008a0c:	e7bb      	b.n	8008986 <_printf_i+0x132>
 8008a0e:	680b      	ldr	r3, [r1, #0]
 8008a10:	6826      	ldr	r6, [r4, #0]
 8008a12:	1d1d      	adds	r5, r3, #4
 8008a14:	6960      	ldr	r0, [r4, #20]
 8008a16:	600d      	str	r5, [r1, #0]
 8008a18:	0635      	lsls	r5, r6, #24
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	d501      	bpl.n	8008a22 <_printf_i+0x1ce>
 8008a1e:	6018      	str	r0, [r3, #0]
 8008a20:	e002      	b.n	8008a28 <_printf_i+0x1d4>
 8008a22:	0671      	lsls	r1, r6, #25
 8008a24:	d5fb      	bpl.n	8008a1e <_printf_i+0x1ca>
 8008a26:	8018      	strh	r0, [r3, #0]
 8008a28:	2300      	movs	r3, #0
 8008a2a:	4616      	mov	r6, r2
 8008a2c:	6123      	str	r3, [r4, #16]
 8008a2e:	e7ba      	b.n	80089a6 <_printf_i+0x152>
 8008a30:	680b      	ldr	r3, [r1, #0]
 8008a32:	1d1a      	adds	r2, r3, #4
 8008a34:	600a      	str	r2, [r1, #0]
 8008a36:	681e      	ldr	r6, [r3, #0]
 8008a38:	2100      	movs	r1, #0
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	6862      	ldr	r2, [r4, #4]
 8008a3e:	f000 f831 	bl	8008aa4 <memchr>
 8008a42:	b108      	cbz	r0, 8008a48 <_printf_i+0x1f4>
 8008a44:	1b80      	subs	r0, r0, r6
 8008a46:	6060      	str	r0, [r4, #4]
 8008a48:	6863      	ldr	r3, [r4, #4]
 8008a4a:	6123      	str	r3, [r4, #16]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a52:	e7a8      	b.n	80089a6 <_printf_i+0x152>
 8008a54:	4632      	mov	r2, r6
 8008a56:	4649      	mov	r1, r9
 8008a58:	4640      	mov	r0, r8
 8008a5a:	6923      	ldr	r3, [r4, #16]
 8008a5c:	47d0      	blx	sl
 8008a5e:	3001      	adds	r0, #1
 8008a60:	d0ab      	beq.n	80089ba <_printf_i+0x166>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	079b      	lsls	r3, r3, #30
 8008a66:	d413      	bmi.n	8008a90 <_printf_i+0x23c>
 8008a68:	68e0      	ldr	r0, [r4, #12]
 8008a6a:	9b03      	ldr	r3, [sp, #12]
 8008a6c:	4298      	cmp	r0, r3
 8008a6e:	bfb8      	it	lt
 8008a70:	4618      	movlt	r0, r3
 8008a72:	e7a4      	b.n	80089be <_printf_i+0x16a>
 8008a74:	2301      	movs	r3, #1
 8008a76:	4632      	mov	r2, r6
 8008a78:	4649      	mov	r1, r9
 8008a7a:	4640      	mov	r0, r8
 8008a7c:	47d0      	blx	sl
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d09b      	beq.n	80089ba <_printf_i+0x166>
 8008a82:	3501      	adds	r5, #1
 8008a84:	68e3      	ldr	r3, [r4, #12]
 8008a86:	9903      	ldr	r1, [sp, #12]
 8008a88:	1a5b      	subs	r3, r3, r1
 8008a8a:	42ab      	cmp	r3, r5
 8008a8c:	dcf2      	bgt.n	8008a74 <_printf_i+0x220>
 8008a8e:	e7eb      	b.n	8008a68 <_printf_i+0x214>
 8008a90:	2500      	movs	r5, #0
 8008a92:	f104 0619 	add.w	r6, r4, #25
 8008a96:	e7f5      	b.n	8008a84 <_printf_i+0x230>
 8008a98:	08009522 	.word	0x08009522
 8008a9c:	08009533 	.word	0x08009533

08008aa0 <__retarget_lock_acquire_recursive>:
 8008aa0:	4770      	bx	lr

08008aa2 <__retarget_lock_release_recursive>:
 8008aa2:	4770      	bx	lr

08008aa4 <memchr>:
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	b2c9      	uxtb	r1, r1
 8008aaa:	4402      	add	r2, r0
 8008aac:	4293      	cmp	r3, r2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	d101      	bne.n	8008ab6 <memchr+0x12>
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	e003      	b.n	8008abe <memchr+0x1a>
 8008ab6:	7804      	ldrb	r4, [r0, #0]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	428c      	cmp	r4, r1
 8008abc:	d1f6      	bne.n	8008aac <memchr+0x8>
 8008abe:	bd10      	pop	{r4, pc}

08008ac0 <memmove>:
 8008ac0:	4288      	cmp	r0, r1
 8008ac2:	b510      	push	{r4, lr}
 8008ac4:	eb01 0402 	add.w	r4, r1, r2
 8008ac8:	d902      	bls.n	8008ad0 <memmove+0x10>
 8008aca:	4284      	cmp	r4, r0
 8008acc:	4623      	mov	r3, r4
 8008ace:	d807      	bhi.n	8008ae0 <memmove+0x20>
 8008ad0:	1e43      	subs	r3, r0, #1
 8008ad2:	42a1      	cmp	r1, r4
 8008ad4:	d008      	beq.n	8008ae8 <memmove+0x28>
 8008ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ade:	e7f8      	b.n	8008ad2 <memmove+0x12>
 8008ae0:	4601      	mov	r1, r0
 8008ae2:	4402      	add	r2, r0
 8008ae4:	428a      	cmp	r2, r1
 8008ae6:	d100      	bne.n	8008aea <memmove+0x2a>
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008af2:	e7f7      	b.n	8008ae4 <memmove+0x24>

08008af4 <_realloc_r>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	4607      	mov	r7, r0
 8008af8:	4614      	mov	r4, r2
 8008afa:	460e      	mov	r6, r1
 8008afc:	b921      	cbnz	r1, 8008b08 <_realloc_r+0x14>
 8008afe:	4611      	mov	r1, r2
 8008b00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b04:	f7ff bbe0 	b.w	80082c8 <_malloc_r>
 8008b08:	b922      	cbnz	r2, 8008b14 <_realloc_r+0x20>
 8008b0a:	f7ff fb91 	bl	8008230 <_free_r>
 8008b0e:	4625      	mov	r5, r4
 8008b10:	4628      	mov	r0, r5
 8008b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b14:	f000 f814 	bl	8008b40 <_malloc_usable_size_r>
 8008b18:	42a0      	cmp	r0, r4
 8008b1a:	d20f      	bcs.n	8008b3c <_realloc_r+0x48>
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7ff fbd2 	bl	80082c8 <_malloc_r>
 8008b24:	4605      	mov	r5, r0
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d0f2      	beq.n	8008b10 <_realloc_r+0x1c>
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4622      	mov	r2, r4
 8008b2e:	f7ff fb69 	bl	8008204 <memcpy>
 8008b32:	4631      	mov	r1, r6
 8008b34:	4638      	mov	r0, r7
 8008b36:	f7ff fb7b 	bl	8008230 <_free_r>
 8008b3a:	e7e9      	b.n	8008b10 <_realloc_r+0x1c>
 8008b3c:	4635      	mov	r5, r6
 8008b3e:	e7e7      	b.n	8008b10 <_realloc_r+0x1c>

08008b40 <_malloc_usable_size_r>:
 8008b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b44:	1f18      	subs	r0, r3, #4
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bfbc      	itt	lt
 8008b4a:	580b      	ldrlt	r3, [r1, r0]
 8008b4c:	18c0      	addlt	r0, r0, r3
 8008b4e:	4770      	bx	lr

08008b50 <_init>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	bf00      	nop
 8008b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b56:	bc08      	pop	{r3}
 8008b58:	469e      	mov	lr, r3
 8008b5a:	4770      	bx	lr

08008b5c <_fini>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	bf00      	nop
 8008b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b62:	bc08      	pop	{r3}
 8008b64:	469e      	mov	lr, r3
 8008b66:	4770      	bx	lr
