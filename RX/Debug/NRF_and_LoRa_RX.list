
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003198  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a5c  08003a5c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a5c  08003a5c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a5c  08003a5c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  2000001c  08003a80  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08003a80  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad3b  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b47  00000000  00000000  0002ad80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002c8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002d240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001755a  00000000  00000000  0002db00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cae5  00000000  00000000  0004505a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845da  00000000  00000000  00051b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6119  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002610  00000000  00000000  000d616c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800328c 	.word	0x0800328c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800328c 	.word	0x0800328c

0800014c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000010 	.word	0x20000010
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001a4:	f001 fa20 	bl	80015e8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001b8:	f002 fd91 	bl	8002cde <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001d8:	f002 fd81 	bl	8002cde <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001e2:	f001 fa01 	bl	80015e8 <HAL_GPIO_WritePin>
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	200004c8 	.word	0x200004c8

080001f8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
 8000218:	f001 f9e6 	bl	80015e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
 8000226:	f002 fb0d 	bl	8002844 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
 8000234:	f002 fb06 	bl	8002844 <HAL_SPI_Transmit>
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
 800023e:	f001 f9d3 	bl	80015e8 <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	200004c8 	.word	0x200004c8

08000254 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 800025a:	2350      	movs	r3, #80	; 0x50
 800025c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800025e:	2200      	movs	r2, #0
 8000260:	2110      	movs	r1, #16
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000264:	f001 f9c0 	bl	80015e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000268:	1d39      	adds	r1, r7, #4
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	2201      	movs	r2, #1
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 8000272:	f002 fae7 	bl	8002844 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f7ff ff68 	bl	800014c <DelayMicro>
  dt[0] = 0x73;
 800027c:	2373      	movs	r3, #115	; 0x73
 800027e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000280:	1d39      	adds	r1, r7, #4
 8000282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000286:	2201      	movs	r2, #1
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 800028a:	f002 fadb 	bl	8002844 <HAL_SPI_Transmit>
  CS_OFF;
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000294:	f001 f9a8 	bl	80015e8 <HAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010800 	.word	0x40010800
 80002a4:	200004c8 	.word	0x200004c8

080002a8 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	6039      	str	r1, [r7, #0]
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002be:	f001 f993 	bl	80015e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80002c2:	1df9      	adds	r1, r7, #7
 80002c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c8:	2201      	movs	r2, #1
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002cc:	f002 faba 	bl	8002844 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d8:	6839      	ldr	r1, [r7, #0]
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002dc:	f002 fbee 	bl	8002abc <HAL_SPI_Receive>
  CS_OFF;
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002e6:	f001 f97f 	bl	80015e8 <HAL_GPIO_WritePin>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010800 	.word	0x40010800
 80002f8:	200004c8 	.word	0x200004c8

080002fc <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	b2db      	uxtb	r3, r3
 8000314:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000316:	2200      	movs	r2, #0
 8000318:	2110      	movs	r1, #16
 800031a:	480f      	ldr	r0, [pc, #60]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800031c:	f001 f964 	bl	80015e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000320:	1df9      	adds	r1, r7, #7
 8000322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000326:	2201      	movs	r2, #1
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <NRF24_Write_Buf+0x60>)
 800032a:	f002 fa8b 	bl	8002844 <HAL_SPI_Transmit>
  DelayMicro(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff0c 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	b29a      	uxth	r2, r3
 8000338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033c:	6839      	ldr	r1, [r7, #0]
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <NRF24_Write_Buf+0x60>)
 8000340:	f002 fa80 	bl	8002844 <HAL_SPI_Transmit>
  CS_OFF;
 8000344:	2201      	movs	r2, #1
 8000346:	2110      	movs	r1, #16
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800034a:	f001 f94d 	bl	80015e8 <HAL_GPIO_WritePin>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800
 800035c:	200004c8 	.word	0x200004c8

08000360 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000366:	23e2      	movs	r3, #226	; 0xe2
 8000368:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800036a:	2200      	movs	r2, #0
 800036c:	2110      	movs	r1, #16
 800036e:	480b      	ldr	r0, [pc, #44]	; (800039c <NRF24_FlushRX+0x3c>)
 8000370:	f001 f93a 	bl	80015e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000374:	1d39      	adds	r1, r7, #4
 8000376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037a:	2201      	movs	r2, #1
 800037c:	4808      	ldr	r0, [pc, #32]	; (80003a0 <NRF24_FlushRX+0x40>)
 800037e:	f002 fa61 	bl	8002844 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff fee2 	bl	800014c <DelayMicro>
  CS_OFF;
 8000388:	2201      	movs	r2, #1
 800038a:	2110      	movs	r1, #16
 800038c:	4803      	ldr	r0, [pc, #12]	; (800039c <NRF24_FlushRX+0x3c>)
 800038e:	f001 f92b 	bl	80015e8 <HAL_GPIO_WritePin>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800
 80003a0:	200004c8 	.word	0x200004c8

080003a4 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 80003aa:	23e1      	movs	r3, #225	; 0xe1
 80003ac:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003b4:	f001 f918 	bl	80015e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80003b8:	1d39      	adds	r1, r7, #4
 80003ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003be:	2201      	movs	r2, #1
 80003c0:	4808      	ldr	r0, [pc, #32]	; (80003e4 <NRF24_FlushTX+0x40>)
 80003c2:	f002 fa3f 	bl	8002844 <HAL_SPI_Transmit>
  DelayMicro(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff fec0 	bl	800014c <DelayMicro>
  CS_OFF;
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003d2:	f001 f909 	bl	80015e8 <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010800 	.word	0x40010800
 80003e4:	200004c8 	.word	0x200004c8

080003e8 <NRF24L01_RX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80003ee:	2300      	movs	r3, #0
 80003f0:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff fecc 	bl	8000190 <NRF24_ReadReg>
 80003f8:	4603      	mov	r3, r0
 80003fa:	71fb      	strb	r3, [r7, #7]

  regval |= (1<<PWR_UP) | (1<<PRIM_RX);    	// Power up module. Write PWR_UP and PRIM_RX bits
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f043 0303 	orr.w	r3, r3, #3
 8000402:	71fb      	strb	r3, [r7, #7]

  NRF24_WriteReg(CONFIG,regval);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4619      	mov	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff fef5 	bl	80001f8 <NRF24_WriteReg>

  NRF24_WriteReg(CONFIG, 0x33);     		//  IRQ WORK  ~ 130 us
 800040e:	2133      	movs	r1, #51	; 0x33
 8000410:	2000      	movs	r0, #0
 8000412:	f7ff fef1 	bl	80001f8 <NRF24_WriteReg>

  CE_SET;
 8000416:	2201      	movs	r2, #1
 8000418:	2108      	movs	r1, #8
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <NRF24L01_RX_Mode+0x50>)
 800041c:	f001 f8e4 	bl	80015e8 <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 8000420:	2096      	movs	r0, #150	; 0x96
 8000422:	f7ff fe93 	bl	800014c <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 8000426:	f7ff ff9b 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 800042a:	f7ff ffbb 	bl	80003a4 <NRF24_FlushTX>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40010800 	.word	0x40010800

0800043c <NRF24L01_Receive>:
//----------------------------------------------------------------------------------------
// Function waite Low IRQ signal from NRF module
bool NRF24L01_Receive(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
	if(rx_flag == 1)
 8000442:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <NRF24L01_Receive+0xac>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b01      	cmp	r3, #1
 800044a:	d148      	bne.n	80004de <NRF24L01_Receive+0xa2>
	{
		// Detect what's pipes data come from
		if(pipe == 0)
 800044c:	4b27      	ldr	r3, [pc, #156]	; (80004ec <NRF24L01_Receive+0xb0>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d11f      	bne.n	8000494 <NRF24L01_Receive+0x58>
		{
			ssd1306_SetCursor(0, 16);
 8000454:	2110      	movs	r1, #16
 8000456:	2000      	movs	r0, #0
 8000458:	f000 fb00 	bl	8000a5c <ssd1306_SetCursor>
			char test_main[15] = {0};
 800045c:	2300      	movs	r3, #0
 800045e:	613b      	str	r3, [r7, #16]
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	f8c3 2007 	str.w	r2, [r3, #7]
			strcpy(test_main, "P0 data:");
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4a1f      	ldr	r2, [pc, #124]	; (80004f0 <NRF24L01_Receive+0xb4>)
 8000474:	ca07      	ldmia	r2, {r0, r1, r2}
 8000476:	c303      	stmia	r3!, {r0, r1}
 8000478:	701a      	strb	r2, [r3, #0]
			strcat(test_main, RX_BUF);
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	491d      	ldr	r1, [pc, #116]	; (80004f4 <NRF24L01_Receive+0xb8>)
 8000480:	4618      	mov	r0, r3
 8000482:	f002 fef3 	bl	800326c <strcat>
			ssd1306_WriteString(test_main,  Font_7x10, White);
 8000486:	4a1c      	ldr	r2, [pc, #112]	; (80004f8 <NRF24L01_Receive+0xbc>)
 8000488:	f107 0010 	add.w	r0, r7, #16
 800048c:	2301      	movs	r3, #1
 800048e:	ca06      	ldmia	r2, {r1, r2}
 8000490:	f000 fabe 	bl	8000a10 <ssd1306_WriteString>
		}
		if(pipe == 1)
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <NRF24L01_Receive+0xb0>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d11b      	bne.n	80004d4 <NRF24L01_Receive+0x98>
		{
			ssd1306_SetCursor(0, 26);
 800049c:	211a      	movs	r1, #26
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 fadc 	bl	8000a5c <ssd1306_SetCursor>
			char test_main[15] = {0};
 80004a4:	2300      	movs	r3, #0
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	f8c3 2007 	str.w	r2, [r3, #7]
			strcpy(test_main, "P1 data:");
 80004b4:	463b      	mov	r3, r7
 80004b6:	4a11      	ldr	r2, [pc, #68]	; (80004fc <NRF24L01_Receive+0xc0>)
 80004b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ba:	c303      	stmia	r3!, {r0, r1}
 80004bc:	701a      	strb	r2, [r3, #0]
			strcat(test_main, RX_BUF);
 80004be:	463b      	mov	r3, r7
 80004c0:	490c      	ldr	r1, [pc, #48]	; (80004f4 <NRF24L01_Receive+0xb8>)
 80004c2:	4618      	mov	r0, r3
 80004c4:	f002 fed2 	bl	800326c <strcat>
			ssd1306_WriteString(test_main,  Font_7x10, White);
 80004c8:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <NRF24L01_Receive+0xbc>)
 80004ca:	4638      	mov	r0, r7
 80004cc:	2301      	movs	r3, #1
 80004ce:	ca06      	ldmia	r2, {r1, r2}
 80004d0:	f000 fa9e 	bl	8000a10 <ssd1306_WriteString>
		}

		// Print RX data on OLED
		ssd1306_UpdateScreen();
 80004d4:	f000 f98c 	bl	80007f0 <ssd1306_UpdateScreen>

		rx_flag = 0;
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <NRF24L01_Receive+0xac>)
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
	}
}
 80004de:	bf00      	nop
 80004e0:	4618      	mov	r0, r3
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000042 	.word	0x20000042
 80004ec:	20000068 	.word	0x20000068
 80004f0:	080032a4 	.word	0x080032a4
 80004f4:	20000038 	.word	0x20000038
 80004f8:	20000008 	.word	0x20000008
 80004fc:	080032b0 	.word	0x080032b0

08000500 <NRF24_ini>:
//----------------------------------------------------------------------------------------
void NRF24_ini(void)                  // RECEIVE
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	CE_RESET;
 8000504:	2200      	movs	r2, #0
 8000506:	2108      	movs	r1, #8
 8000508:	4827      	ldr	r0, [pc, #156]	; (80005a8 <NRF24_ini+0xa8>)
 800050a:	f001 f86d 	bl	80015e8 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 800050e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000512:	f7ff fe1b 	bl	800014c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter) 0b 0000 1010
 8000516:	210a      	movs	r1, #10
 8000518:	2000      	movs	r0, #0
 800051a:	f7ff fe6d 	bl	80001f8 <NRF24_WriteReg>

	DelayMicro(5000);
 800051e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000522:	f7ff fe13 	bl	800014c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x03); 			// Enable Pipe0 and Pipe1
 8000526:	2103      	movs	r1, #3
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff fe65 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x03); 		// Enable Pipe0 and Pipe1
 800052e:	2103      	movs	r1, #3
 8000530:	2002      	movs	r0, #2
 8000532:	f7ff fe61 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8000536:	2101      	movs	r1, #1
 8000538:	2003      	movs	r0, #3
 800053a:	f7ff fe5d 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 800053e:	215f      	movs	r1, #95	; 0x5f
 8000540:	2004      	movs	r0, #4
 8000542:	f7ff fe59 	bl	80001f8 <NRF24_WriteReg>
	NRF24_ToggleFeatures();					// Send activated command
 8000546:	f7ff fe85 	bl	8000254 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);				// Turn off all FEATURE register
 800054a:	2100      	movs	r1, #0
 800054c:	201d      	movs	r0, #29
 800054e:	f7ff fe53 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0); 				// Turn off all payload length data pipe
 8000552:	2100      	movs	r1, #0
 8000554:	201c      	movs	r0, #28
 8000556:	f7ff fe4f 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800055a:	2170      	movs	r1, #112	; 0x70
 800055c:	2007      	movs	r0, #7
 800055e:	f7ff fe4b 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz  // was 76
 8000562:	214c      	movs	r1, #76	; 0x4c
 8000564:	2005      	movs	r0, #5
 8000566:	f7ff fe47 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26); 	    // TX_PWR:0dBm, Datarate:250kbps
 800056a:	2126      	movs	r1, #38	; 0x26
 800056c:	2006      	movs	r0, #6
 800056e:	f7ff fe43 	bl	80001f8 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_0, TX_ADR_WIDTH);		//	set up Transmit address. Used for a PTX device only.
 8000572:	2203      	movs	r2, #3
 8000574:	490d      	ldr	r1, [pc, #52]	; (80005ac <NRF24_ini+0xac>)
 8000576:	2010      	movs	r0, #16
 8000578:	f7ff fec0 	bl	80002fc <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_0, TX_ADR_WIDTH);    // Set up pipe 0 address
 800057c:	2203      	movs	r2, #3
 800057e:	490b      	ldr	r1, [pc, #44]	; (80005ac <NRF24_ini+0xac>)
 8000580:	200a      	movs	r0, #10
 8000582:	f7ff febb 	bl	80002fc <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS_1, TX_ADR_WIDTH);    // Set up pipe 1 address
 8000586:	2203      	movs	r2, #3
 8000588:	4909      	ldr	r1, [pc, #36]	; (80005b0 <NRF24_ini+0xb0>)
 800058a:	200b      	movs	r0, #11
 800058c:	f7ff feb6 	bl	80002fc <NRF24_Write_Buf>

	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 0
 8000590:	210a      	movs	r1, #10
 8000592:	2011      	movs	r0, #17
 8000594:	f7ff fe30 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 1
 8000598:	210a      	movs	r1, #10
 800059a:	2012      	movs	r0, #18
 800059c:	f7ff fe2c 	bl	80001f8 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 80005a0:	f7ff ff22 	bl	80003e8 <NRF24L01_RX_Mode>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40010800 	.word	0x40010800
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000004 	.word	0x20000004

080005b4 <read_config_registers>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
void read_config_registers(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80005b8:	2064      	movs	r0, #100	; 0x64
 80005ba:	f000 fd5f 	bl	800107c <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff fde6 	bl	8000190 <NRF24_ReadReg>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <read_config_registers+0x68>)
 80005ca:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 80005cc:	2001      	movs	r0, #1
 80005ce:	f7ff fddf 	bl	8000190 <NRF24_ReadReg>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <read_config_registers+0x68>)
 80005d8:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 80005da:	2002      	movs	r0, #2
 80005dc:	f7ff fdd8 	bl	8000190 <NRF24_ReadReg>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <read_config_registers+0x68>)
 80005e6:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 80005e8:	2007      	movs	r0, #7
 80005ea:	f7ff fdd1 	bl	8000190 <NRF24_ReadReg>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <read_config_registers+0x68>)
 80005f4:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 80005f6:	2006      	movs	r0, #6
 80005f8:	f7ff fdca 	bl	8000190 <NRF24_ReadReg>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <read_config_registers+0x68>)
 8000602:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8000604:	2203      	movs	r2, #3
 8000606:	4906      	ldr	r1, [pc, #24]	; (8000620 <read_config_registers+0x6c>)
 8000608:	2010      	movs	r0, #16
 800060a:	f7ff fe4d 	bl	80002a8 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 800060e:	2203      	movs	r2, #3
 8000610:	4903      	ldr	r1, [pc, #12]	; (8000620 <read_config_registers+0x6c>)
 8000612:	200a      	movs	r0, #10
 8000614:	f7ff fe48 	bl	80002a8 <NRF24_Read_Buf>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000044 	.word	0x20000044
 8000620:	20000054 	.word	0x20000054

08000624 <nrf_communication_test>:
//----------------------------------------------------------------------------------------
void nrf_communication_test(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	NRF24L01_Receive();
 8000628:	f7ff ff08 	bl	800043c <NRF24L01_Receive>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <IRQ_Callback>:
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 8000636:	2301      	movs	r3, #1
 8000638:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 800063a:	2300      	movs	r3, #0
 800063c:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4814      	ldr	r0, [pc, #80]	; (8000694 <IRQ_Callback+0x64>)
 8000644:	f000 ffe8 	bl	8001618 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 8000648:	200a      	movs	r0, #10
 800064a:	f7ff fd7f 	bl	800014c <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 800064e:	2007      	movs	r0, #7
 8000650:	f7ff fd9e 	bl	8000190 <NRF24_ReadReg>
 8000654:	4603      	mov	r3, r0
 8000656:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800065e:	2b00      	cmp	r3, #0
 8000660:	d013      	beq.n	800068a <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	085b      	lsrs	r3, r3, #1
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <IRQ_Callback+0x68>)
 8000670:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 8000672:	220a      	movs	r2, #10
 8000674:	4909      	ldr	r1, [pc, #36]	; (800069c <IRQ_Callback+0x6c>)
 8000676:	2061      	movs	r0, #97	; 0x61
 8000678:	f7ff fe16 	bl	80002a8 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 800067c:	2140      	movs	r1, #64	; 0x40
 800067e:	2007      	movs	r0, #7
 8000680:	f7ff fdba 	bl	80001f8 <NRF24_WriteReg>
		rx_flag = 1;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <IRQ_Callback+0x70>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
	}
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40011000 	.word	0x40011000
 8000698:	20000068 	.word	0x20000068
 800069c:	20000038 	.word	0x20000038
 80006a0:	20000042 	.word	0x20000042

080006a4 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af04      	add	r7, sp, #16
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80006ae:	230a      	movs	r3, #10
 80006b0:	9302      	str	r3, [sp, #8]
 80006b2:	2301      	movs	r3, #1
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	2200      	movs	r2, #0
 80006be:	2178      	movs	r1, #120	; 0x78
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <ssd1306_WriteCommand+0x2c>)
 80006c2:	f001 f91f 	bl	8001904 <HAL_I2C_Mem_Write>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000474 	.word	0x20000474

080006d4 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80006d8:	2064      	movs	r0, #100	; 0x64
 80006da:	f000 fccf 	bl	800107c <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80006de:	20ae      	movs	r0, #174	; 0xae
 80006e0:	f7ff ffe0 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80006e4:	2020      	movs	r0, #32
 80006e6:	f7ff ffdd 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80006ea:	2010      	movs	r0, #16
 80006ec:	f7ff ffda 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80006f0:	20b0      	movs	r0, #176	; 0xb0
 80006f2:	f7ff ffd7 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80006f6:	20c8      	movs	r0, #200	; 0xc8
 80006f8:	f7ff ffd4 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff ffd1 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8000702:	2010      	movs	r0, #16
 8000704:	f7ff ffce 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000708:	2040      	movs	r0, #64	; 0x40
 800070a:	f7ff ffcb 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800070e:	2081      	movs	r0, #129	; 0x81
 8000710:	f7ff ffc8 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8000714:	20ff      	movs	r0, #255	; 0xff
 8000716:	f7ff ffc5 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 800071a:	20a1      	movs	r0, #161	; 0xa1
 800071c:	f7ff ffc2 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8000720:	20a6      	movs	r0, #166	; 0xa6
 8000722:	f7ff ffbf 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000726:	20a8      	movs	r0, #168	; 0xa8
 8000728:	f7ff ffbc 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 800072c:	203f      	movs	r0, #63	; 0x3f
 800072e:	f7ff ffb9 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000732:	20a4      	movs	r0, #164	; 0xa4
 8000734:	f7ff ffb6 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000738:	20d3      	movs	r0, #211	; 0xd3
 800073a:	f7ff ffb3 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff ffb0 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000744:	20d5      	movs	r0, #213	; 0xd5
 8000746:	f7ff ffad 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800074a:	20f0      	movs	r0, #240	; 0xf0
 800074c:	f7ff ffaa 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000750:	20d9      	movs	r0, #217	; 0xd9
 8000752:	f7ff ffa7 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000756:	2022      	movs	r0, #34	; 0x22
 8000758:	f7ff ffa4 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800075c:	20da      	movs	r0, #218	; 0xda
 800075e:	f7ff ffa1 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000762:	2012      	movs	r0, #18
 8000764:	f7ff ff9e 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000768:	20db      	movs	r0, #219	; 0xdb
 800076a:	f7ff ff9b 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800076e:	2020      	movs	r0, #32
 8000770:	f7ff ff98 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000774:	208d      	movs	r0, #141	; 0x8d
 8000776:	f7ff ff95 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800077a:	2014      	movs	r0, #20
 800077c:	f7ff ff92 	bl	80006a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000780:	20af      	movs	r0, #175	; 0xaf
 8000782:	f7ff ff8f 	bl	80006a4 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000786:	2000      	movs	r0, #0
 8000788:	f000 f810 	bl	80007ac <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800078c:	f000 f830 	bl	80007f0 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <ssd1306_Init+0xd4>)
 8000792:	2200      	movs	r2, #0
 8000794:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <ssd1306_Init+0xd4>)
 8000798:	2200      	movs	r2, #0
 800079a:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 800079c:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <ssd1306_Init+0xd4>)
 800079e:	2201      	movs	r2, #1
 80007a0:	715a      	strb	r2, [r3, #5]

	return 1;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000046c 	.word	0x2000046c

080007ac <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	e00d      	b.n	80007d8 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <ssd1306_Fill+0x1a>
 80007c2:	2100      	movs	r1, #0
 80007c4:	e000      	b.n	80007c8 <ssd1306_Fill+0x1c>
 80007c6:	21ff      	movs	r1, #255	; 0xff
 80007c8:	4a08      	ldr	r2, [pc, #32]	; (80007ec <ssd1306_Fill+0x40>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	4413      	add	r3, r2
 80007ce:	460a      	mov	r2, r1
 80007d0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007de:	d3ed      	bcc.n	80007bc <ssd1306_Fill+0x10>
	}
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	2000006c 	.word	0x2000006c

080007f0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 80007f6:	2300      	movs	r3, #0
 80007f8:	71fb      	strb	r3, [r7, #7]
 80007fa:	e01d      	b.n	8000838 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	3b50      	subs	r3, #80	; 0x50
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff4e 	bl	80006a4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ff4b 	bl	80006a4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800080e:	2010      	movs	r0, #16
 8000810:	f7ff ff48 	bl	80006a4 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	01db      	lsls	r3, r3, #7
 8000818:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <ssd1306_UpdateScreen+0x58>)
 800081a:	4413      	add	r3, r2
 800081c:	2264      	movs	r2, #100	; 0x64
 800081e:	9202      	str	r2, [sp, #8]
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	9201      	str	r2, [sp, #4]
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	2240      	movs	r2, #64	; 0x40
 800082a:	2178      	movs	r1, #120	; 0x78
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <ssd1306_UpdateScreen+0x5c>)
 800082e:	f001 f869 	bl	8001904 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	3301      	adds	r3, #1
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b07      	cmp	r3, #7
 800083c:	d9de      	bls.n	80007fc <ssd1306_UpdateScreen+0xc>
	}
}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000006c 	.word	0x2000006c
 800084c:	20000474 	.word	0x20000474

08000850 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	460b      	mov	r3, r1
 800085c:	71bb      	strb	r3, [r7, #6]
 800085e:	4613      	mov	r3, r2
 8000860:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	2b00      	cmp	r3, #0
 8000868:	db48      	blt.n	80008fc <ssd1306_DrawPixel+0xac>
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	2b3f      	cmp	r3, #63	; 0x3f
 800086e:	d845      	bhi.n	80008fc <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <ssd1306_DrawPixel+0xb8>)
 8000872:	791b      	ldrb	r3, [r3, #4]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d006      	beq.n	8000886 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000878:	797b      	ldrb	r3, [r7, #5]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf0c      	ite	eq
 800087e:	2301      	moveq	r3, #1
 8000880:	2300      	movne	r3, #0
 8000882:	b2db      	uxtb	r3, r3
 8000884:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000886:	797b      	ldrb	r3, [r7, #5]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d11a      	bne.n	80008c2 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800088c:	79fa      	ldrb	r2, [r7, #7]
 800088e:	79bb      	ldrb	r3, [r7, #6]
 8000890:	08db      	lsrs	r3, r3, #3
 8000892:	b2d8      	uxtb	r0, r3
 8000894:	4603      	mov	r3, r0
 8000896:	01db      	lsls	r3, r3, #7
 8000898:	4413      	add	r3, r2
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <ssd1306_DrawPixel+0xbc>)
 800089c:	5cd3      	ldrb	r3, [r2, r3]
 800089e:	b25a      	sxtb	r2, r3
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	2101      	movs	r1, #1
 80008a8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b259      	sxtb	r1, r3
 80008b2:	79fa      	ldrb	r2, [r7, #7]
 80008b4:	4603      	mov	r3, r0
 80008b6:	01db      	lsls	r3, r3, #7
 80008b8:	4413      	add	r3, r2
 80008ba:	b2c9      	uxtb	r1, r1
 80008bc:	4a13      	ldr	r2, [pc, #76]	; (800090c <ssd1306_DrawPixel+0xbc>)
 80008be:	54d1      	strb	r1, [r2, r3]
 80008c0:	e01d      	b.n	80008fe <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80008c2:	79fa      	ldrb	r2, [r7, #7]
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	08db      	lsrs	r3, r3, #3
 80008c8:	b2d8      	uxtb	r0, r3
 80008ca:	4603      	mov	r3, r0
 80008cc:	01db      	lsls	r3, r3, #7
 80008ce:	4413      	add	r3, r2
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <ssd1306_DrawPixel+0xbc>)
 80008d2:	5cd3      	ldrb	r3, [r2, r3]
 80008d4:	b25a      	sxtb	r2, r3
 80008d6:	79bb      	ldrb	r3, [r7, #6]
 80008d8:	f003 0307 	and.w	r3, r3, #7
 80008dc:	2101      	movs	r1, #1
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	4013      	ands	r3, r2
 80008ea:	b259      	sxtb	r1, r3
 80008ec:	79fa      	ldrb	r2, [r7, #7]
 80008ee:	4603      	mov	r3, r0
 80008f0:	01db      	lsls	r3, r3, #7
 80008f2:	4413      	add	r3, r2
 80008f4:	b2c9      	uxtb	r1, r1
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <ssd1306_DrawPixel+0xbc>)
 80008f8:	54d1      	strb	r1, [r2, r3]
 80008fa:	e000      	b.n	80008fe <ssd1306_DrawPixel+0xae>
		return;
 80008fc:	bf00      	nop
	}
}
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	2000046c 	.word	0x2000046c
 800090c:	2000006c 	.word	0x2000006c

08000910 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	4604      	mov	r4, r0
 8000918:	1d38      	adds	r0, r7, #4
 800091a:	e880 0006 	stmia.w	r0, {r1, r2}
 800091e:	461a      	mov	r2, r3
 8000920:	4623      	mov	r3, r4
 8000922:	73fb      	strb	r3, [r7, #15]
 8000924:	4613      	mov	r3, r2
 8000926:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000928:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <ssd1306_WriteChar+0xfc>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	793b      	ldrb	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	2b7f      	cmp	r3, #127	; 0x7f
 8000934:	dc06      	bgt.n	8000944 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000936:	4b35      	ldr	r3, [pc, #212]	; (8000a0c <ssd1306_WriteChar+0xfc>)
 8000938:	885b      	ldrh	r3, [r3, #2]
 800093a:	461a      	mov	r2, r3
 800093c:	797b      	ldrb	r3, [r7, #5]
 800093e:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000940:	2b3f      	cmp	r3, #63	; 0x3f
 8000942:	dd01      	ble.n	8000948 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8000944:	2300      	movs	r3, #0
 8000946:	e05d      	b.n	8000a04 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
 800094c:	e04c      	b.n	80009e8 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	3b20      	subs	r3, #32
 8000954:	7979      	ldrb	r1, [r7, #5]
 8000956:	fb01 f303 	mul.w	r3, r1, r3
 800095a:	4619      	mov	r1, r3
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	440b      	add	r3, r1
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	e034      	b.n	80009d8 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800097a:	2b00      	cmp	r3, #0
 800097c:	d012      	beq.n	80009a4 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <ssd1306_WriteChar+0xfc>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4413      	add	r3, r2
 800098a:	b2d8      	uxtb	r0, r3
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <ssd1306_WriteChar+0xfc>)
 800098e:	885b      	ldrh	r3, [r3, #2]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	4413      	add	r3, r2
 8000998:	b2db      	uxtb	r3, r3
 800099a:	7bba      	ldrb	r2, [r7, #14]
 800099c:	4619      	mov	r1, r3
 800099e:	f7ff ff57 	bl	8000850 <ssd1306_DrawPixel>
 80009a2:	e016      	b.n	80009d2 <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <ssd1306_WriteChar+0xfc>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4413      	add	r3, r2
 80009b0:	b2d8      	uxtb	r0, r3
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <ssd1306_WriteChar+0xfc>)
 80009b4:	885b      	ldrh	r3, [r3, #2]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4413      	add	r3, r2
 80009be:	b2d9      	uxtb	r1, r3
 80009c0:	7bbb      	ldrb	r3, [r7, #14]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bf0c      	ite	eq
 80009c6:	2301      	moveq	r3, #1
 80009c8:	2300      	movne	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	f7ff ff3f 	bl	8000850 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	3301      	adds	r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	793b      	ldrb	r3, [r7, #4]
 80009da:	461a      	mov	r2, r3
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	4293      	cmp	r3, r2
 80009e0:	d3c5      	bcc.n	800096e <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3301      	adds	r3, #1
 80009e6:	61fb      	str	r3, [r7, #28]
 80009e8:	797b      	ldrb	r3, [r7, #5]
 80009ea:	461a      	mov	r2, r3
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d3ad      	bcc.n	800094e <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <ssd1306_WriteChar+0xfc>)
 80009f4:	881a      	ldrh	r2, [r3, #0]
 80009f6:	793b      	ldrb	r3, [r7, #4]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	4413      	add	r3, r2
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <ssd1306_WriteChar+0xfc>)
 8000a00:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3724      	adds	r7, #36	; 0x24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd90      	pop	{r4, r7, pc}
 8000a0c:	2000046c 	.word	0x2000046c

08000a10 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	1d38      	adds	r0, r7, #4
 8000a1a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a1e:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8000a20:	e012      	b.n	8000a48 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	7818      	ldrb	r0, [r3, #0]
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	1d3a      	adds	r2, r7, #4
 8000a2a:	ca06      	ldmia	r2, {r1, r2}
 8000a2c:	f7ff ff70 	bl	8000910 <ssd1306_WriteChar>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d002      	beq.n	8000a42 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	e008      	b.n	8000a54 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3301      	adds	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1e8      	bne.n	8000a22 <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	781b      	ldrb	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	460a      	mov	r2, r1
 8000a66:	71fb      	strb	r3, [r7, #7]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <ssd1306_SetCursor+0x2c>)
 8000a72:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000a74:	79bb      	ldrb	r3, [r7, #6]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <ssd1306_SetCursor+0x2c>)
 8000a7a:	805a      	strh	r2, [r3, #2]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	2000046c 	.word	0x2000046c

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a92:	f000 fa91 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a96:	f000 f833 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9a:	f000 f8db 	bl	8000c54 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a9e:	f000 f875 	bl	8000b8c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000aa2:	f000 f8a1 	bl	8000be8 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ssd1306_Init();
 8000aa6:	f7ff fe15 	bl	80006d4 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fe7e 	bl	80007ac <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000ab0:	f7ff fe9e 	bl	80007f0 <ssd1306_UpdateScreen>


  // Test write on OLED
  ssd1306_SetCursor(0, 0);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff ffd0 	bl	8000a5c <ssd1306_SetCursor>
  char test_main[20] = {0};
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
  strcpy(test_main, "NRF24L01 RX");
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <main+0x6c>)
 8000ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ad4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  ssd1306_WriteString(test_main,  Font_7x10, White);
 8000ad8:	4a08      	ldr	r2, [pc, #32]	; (8000afc <main+0x70>)
 8000ada:	1d38      	adds	r0, r7, #4
 8000adc:	2301      	movs	r3, #1
 8000ade:	ca06      	ldmia	r2, {r1, r2}
 8000ae0:	f7ff ff96 	bl	8000a10 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000ae4:	f7ff fe84 	bl	80007f0 <ssd1306_UpdateScreen>


  NRF24_ini();
 8000ae8:	f7ff fd0a 	bl	8000500 <NRF24_ini>
  read_config_registers();
 8000aec:	f7ff fd62 	bl	80005b4 <read_config_registers>
  while (1)
  {
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	  HAL_Delay(100);

	  nrf_communication_test();
 8000af0:	f7ff fd98 	bl	8000624 <nrf_communication_test>
  {
 8000af4:	e7fc      	b.n	8000af0 <main+0x64>
 8000af6:	bf00      	nop
 8000af8:	080032bc 	.word	0x080032bc
 8000afc:	20000008 	.word	0x20000008

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b090      	sub	sp, #64	; 0x40
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0318 	add.w	r3, r7, #24
 8000b0a:	2228      	movs	r2, #40	; 0x28
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 fba4 	bl	800325c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b30:	2301      	movs	r3, #1
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b34:	2302      	movs	r3, #2
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000b3e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 f9f1 	bl	8001f30 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b54:	f000 f916 	bl	8000d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2102      	movs	r1, #2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 fc5c 	bl	8002430 <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b7e:	f000 f901 	bl	8000d84 <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3740      	adds	r7, #64	; 0x40
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000b92:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <MX_I2C1_Init+0x54>)
 8000b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000b98:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_I2C1_Init+0x58>)
 8000b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bca:	f000 fd57 	bl	800167c <HAL_I2C_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bd4:	f000 f8d6 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000474 	.word	0x20000474
 8000be0:	40005400 	.word	0x40005400
 8000be4:	000186a0 	.word	0x000186a0

08000be8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000bee:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <MX_SPI1_Init+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000bf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bf8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000c34:	220a      	movs	r2, #10
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_SPI1_Init+0x64>)
 8000c3a:	f001 fd7f 	bl	800273c <HAL_SPI_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c44:	f000 f89e 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200004c8 	.word	0x200004c8
 8000c50:	40013000 	.word	0x40013000

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	4b3a      	ldr	r3, [pc, #232]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a39      	ldr	r2, [pc, #228]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b37      	ldr	r3, [pc, #220]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c80:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a33      	ldr	r2, [pc, #204]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c86:	f043 0320 	orr.w	r3, r3, #32
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0320 	and.w	r3, r3, #32
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a2d      	ldr	r2, [pc, #180]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cce:	4822      	ldr	r0, [pc, #136]	; (8000d58 <MX_GPIO_Init+0x104>)
 8000cd0:	f000 fc8a 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	4820      	ldr	r0, [pc, #128]	; (8000d5c <MX_GPIO_Init+0x108>)
 8000cda:	f000 fc85 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	481e      	ldr	r0, [pc, #120]	; (8000d5c <MX_GPIO_Init+0x108>)
 8000ce4:	f000 fc80 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4815      	ldr	r0, [pc, #84]	; (8000d58 <MX_GPIO_Init+0x104>)
 8000d02:	f000 faed 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d06:	2304      	movs	r3, #4
 8000d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_GPIO_Init+0x10c>)
 8000d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	4619      	mov	r1, r3
 8000d18:	4810      	ldr	r0, [pc, #64]	; (8000d5c <MX_GPIO_Init+0x108>)
 8000d1a:	f000 fae1 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d1e:	2318      	movs	r3, #24
 8000d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	4619      	mov	r1, r3
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <MX_GPIO_Init+0x108>)
 8000d36:	f000 fad3 	bl	80012e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2008      	movs	r0, #8
 8000d40:	f000 fa97 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d44:	2008      	movs	r0, #8
 8000d46:	f000 fab0 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8000d4a:	bf00      	nop
 8000d4c:	3720      	adds	r7, #32
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40011000 	.word	0x40011000
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	10210000 	.word	0x10210000

08000d64 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	2b04      	cmp	r3, #4
 8000d72:	d102      	bne.n	8000d7a <HAL_GPIO_EXTI_Callback+0x16>
  {
    IRQ_Callback();					// Call Callback
 8000d74:	f7ff fc5c 	bl	8000630 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8000d78:	e000      	b.n	8000d7c <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8000d7a:	bf00      	nop
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_MspInit+0x5c>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <HAL_MspInit+0x5c>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6193      	str	r3, [r2, #24]
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_MspInit+0x5c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_MspInit+0x5c>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_MspInit+0x5c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_MspInit+0x5c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_MspInit+0x60>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_MspInit+0x60>)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000

08000df4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a15      	ldr	r2, [pc, #84]	; (8000e64 <HAL_I2C_MspInit+0x70>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d123      	bne.n	8000e5c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_I2C_MspInit+0x74>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_I2C_MspInit+0x74>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_I2C_MspInit+0x74>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e2c:	23c0      	movs	r3, #192	; 0xc0
 8000e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e30:	2312      	movs	r3, #18
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480b      	ldr	r0, [pc, #44]	; (8000e6c <HAL_I2C_MspInit+0x78>)
 8000e40:	f000 fa4e 	bl	80012e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_I2C_MspInit+0x74>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_I2C_MspInit+0x74>)
 8000e4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4e:	61d3      	str	r3, [r2, #28]
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_I2C_MspInit+0x74>)
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40005400 	.word	0x40005400
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010c00 	.word	0x40010c00

08000e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d12f      	bne.n	8000ef0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_SPI_MspInit+0x8c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a19      	ldr	r2, [pc, #100]	; (8000efc <HAL_SPI_MspInit+0x8c>)
 8000e96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_SPI_MspInit+0x8c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_SPI_MspInit+0x8c>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a13      	ldr	r2, [pc, #76]	; (8000efc <HAL_SPI_MspInit+0x8c>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_SPI_MspInit+0x8c>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ec0:	23a0      	movs	r3, #160	; 0xa0
 8000ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <HAL_SPI_MspInit+0x90>)
 8000ed4:	f000 fa04 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ed8:	2340      	movs	r3, #64	; 0x40
 8000eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <HAL_SPI_MspInit+0x90>)
 8000eec:	f000 f9f8 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40013000 	.word	0x40013000
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010800 	.word	0x40010800

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr

08000f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4a:	f000 f87b 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000f56:	2004      	movs	r0, #4
 8000f58:	f000 fb78 	bl	800164c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6e:	490d      	ldr	r1, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f84:	4c0a      	ldr	r4, [pc, #40]	; (8000fb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f92:	f7ff ffe5 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f002 f93d 	bl	8003214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9a:	f7ff fd77 	bl	8000a8c <main>
  bx lr
 8000f9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000fa8:	08003a64 	.word	0x08003a64
  ldr r2, =_sbss
 8000fac:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000fb0:	20000524 	.word	0x20000524

08000fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC1_2_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x28>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x28>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f947 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fedc 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f95f 	bl	80012c6 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001020:	f000 f927 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000010 	.word	0x20000010
 800103c:	20000018 	.word	0x20000018
 8001040:	20000014 	.word	0x20000014

08001044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x1c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x20>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a03      	ldr	r2, [pc, #12]	; (8001064 <HAL_IncTick+0x20>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	20000018 	.word	0x20000018
 8001064:	20000520 	.word	0x20000520

08001068 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b02      	ldr	r3, [pc, #8]	; (8001078 <HAL_GetTick+0x10>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	20000520 	.word	0x20000520

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff fff0 	bl	8001068 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffe0 	bl	8001068 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000018 	.word	0x20000018

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4906      	ldr	r1, [pc, #24]	; (800115c <__NVIC_EnableIRQ+0x34>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800123c:	f7ff ff90 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff2d 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff42 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff35 	bl	8001128 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa2 	bl	8001218 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b08b      	sub	sp, #44	; 0x2c
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f2:	e169      	b.n	80015c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012f4:	2201      	movs	r2, #1
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8158 	bne.w	80015c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a9a      	ldr	r2, [pc, #616]	; (8001580 <HAL_GPIO_Init+0x2a0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d05e      	beq.n	80013da <HAL_GPIO_Init+0xfa>
 800131c:	4a98      	ldr	r2, [pc, #608]	; (8001580 <HAL_GPIO_Init+0x2a0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d875      	bhi.n	800140e <HAL_GPIO_Init+0x12e>
 8001322:	4a98      	ldr	r2, [pc, #608]	; (8001584 <HAL_GPIO_Init+0x2a4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d058      	beq.n	80013da <HAL_GPIO_Init+0xfa>
 8001328:	4a96      	ldr	r2, [pc, #600]	; (8001584 <HAL_GPIO_Init+0x2a4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d86f      	bhi.n	800140e <HAL_GPIO_Init+0x12e>
 800132e:	4a96      	ldr	r2, [pc, #600]	; (8001588 <HAL_GPIO_Init+0x2a8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d052      	beq.n	80013da <HAL_GPIO_Init+0xfa>
 8001334:	4a94      	ldr	r2, [pc, #592]	; (8001588 <HAL_GPIO_Init+0x2a8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d869      	bhi.n	800140e <HAL_GPIO_Init+0x12e>
 800133a:	4a94      	ldr	r2, [pc, #592]	; (800158c <HAL_GPIO_Init+0x2ac>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d04c      	beq.n	80013da <HAL_GPIO_Init+0xfa>
 8001340:	4a92      	ldr	r2, [pc, #584]	; (800158c <HAL_GPIO_Init+0x2ac>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d863      	bhi.n	800140e <HAL_GPIO_Init+0x12e>
 8001346:	4a92      	ldr	r2, [pc, #584]	; (8001590 <HAL_GPIO_Init+0x2b0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d046      	beq.n	80013da <HAL_GPIO_Init+0xfa>
 800134c:	4a90      	ldr	r2, [pc, #576]	; (8001590 <HAL_GPIO_Init+0x2b0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d85d      	bhi.n	800140e <HAL_GPIO_Init+0x12e>
 8001352:	2b12      	cmp	r3, #18
 8001354:	d82a      	bhi.n	80013ac <HAL_GPIO_Init+0xcc>
 8001356:	2b12      	cmp	r3, #18
 8001358:	d859      	bhi.n	800140e <HAL_GPIO_Init+0x12e>
 800135a:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <HAL_GPIO_Init+0x80>)
 800135c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001360:	080013db 	.word	0x080013db
 8001364:	080013b5 	.word	0x080013b5
 8001368:	080013c7 	.word	0x080013c7
 800136c:	08001409 	.word	0x08001409
 8001370:	0800140f 	.word	0x0800140f
 8001374:	0800140f 	.word	0x0800140f
 8001378:	0800140f 	.word	0x0800140f
 800137c:	0800140f 	.word	0x0800140f
 8001380:	0800140f 	.word	0x0800140f
 8001384:	0800140f 	.word	0x0800140f
 8001388:	0800140f 	.word	0x0800140f
 800138c:	0800140f 	.word	0x0800140f
 8001390:	0800140f 	.word	0x0800140f
 8001394:	0800140f 	.word	0x0800140f
 8001398:	0800140f 	.word	0x0800140f
 800139c:	0800140f 	.word	0x0800140f
 80013a0:	0800140f 	.word	0x0800140f
 80013a4:	080013bd 	.word	0x080013bd
 80013a8:	080013d1 	.word	0x080013d1
 80013ac:	4a79      	ldr	r2, [pc, #484]	; (8001594 <HAL_GPIO_Init+0x2b4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013b2:	e02c      	b.n	800140e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	623b      	str	r3, [r7, #32]
          break;
 80013ba:	e029      	b.n	8001410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	3304      	adds	r3, #4
 80013c2:	623b      	str	r3, [r7, #32]
          break;
 80013c4:	e024      	b.n	8001410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	3308      	adds	r3, #8
 80013cc:	623b      	str	r3, [r7, #32]
          break;
 80013ce:	e01f      	b.n	8001410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	330c      	adds	r3, #12
 80013d6:	623b      	str	r3, [r7, #32]
          break;
 80013d8:	e01a      	b.n	8001410 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013e2:	2304      	movs	r3, #4
 80013e4:	623b      	str	r3, [r7, #32]
          break;
 80013e6:	e013      	b.n	8001410 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f0:	2308      	movs	r3, #8
 80013f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	611a      	str	r2, [r3, #16]
          break;
 80013fa:	e009      	b.n	8001410 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013fc:	2308      	movs	r3, #8
 80013fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	615a      	str	r2, [r3, #20]
          break;
 8001406:	e003      	b.n	8001410 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
          break;
 800140c:	e000      	b.n	8001410 <HAL_GPIO_Init+0x130>
          break;
 800140e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2bff      	cmp	r3, #255	; 0xff
 8001414:	d801      	bhi.n	800141a <HAL_GPIO_Init+0x13a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	e001      	b.n	800141e <HAL_GPIO_Init+0x13e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3304      	adds	r3, #4
 800141e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2bff      	cmp	r3, #255	; 0xff
 8001424:	d802      	bhi.n	800142c <HAL_GPIO_Init+0x14c>
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	e002      	b.n	8001432 <HAL_GPIO_Init+0x152>
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	3b08      	subs	r3, #8
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	210f      	movs	r1, #15
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	401a      	ands	r2, r3
 8001444:	6a39      	ldr	r1, [r7, #32]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	431a      	orrs	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 80b1 	beq.w	80015c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001460:	4b4d      	ldr	r3, [pc, #308]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a4c      	ldr	r2, [pc, #304]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001478:	4a48      	ldr	r2, [pc, #288]	; (800159c <HAL_GPIO_Init+0x2bc>)
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001484:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	220f      	movs	r2, #15
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	4013      	ands	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a40      	ldr	r2, [pc, #256]	; (80015a0 <HAL_GPIO_Init+0x2c0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d013      	beq.n	80014cc <HAL_GPIO_Init+0x1ec>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a3f      	ldr	r2, [pc, #252]	; (80015a4 <HAL_GPIO_Init+0x2c4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d00d      	beq.n	80014c8 <HAL_GPIO_Init+0x1e8>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a3e      	ldr	r2, [pc, #248]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d007      	beq.n	80014c4 <HAL_GPIO_Init+0x1e4>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a3d      	ldr	r2, [pc, #244]	; (80015ac <HAL_GPIO_Init+0x2cc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d101      	bne.n	80014c0 <HAL_GPIO_Init+0x1e0>
 80014bc:	2303      	movs	r3, #3
 80014be:	e006      	b.n	80014ce <HAL_GPIO_Init+0x1ee>
 80014c0:	2304      	movs	r3, #4
 80014c2:	e004      	b.n	80014ce <HAL_GPIO_Init+0x1ee>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e002      	b.n	80014ce <HAL_GPIO_Init+0x1ee>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_GPIO_Init+0x1ee>
 80014cc:	2300      	movs	r3, #0
 80014ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d0:	f002 0203 	and.w	r2, r2, #3
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	4093      	lsls	r3, r2
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014de:	492f      	ldr	r1, [pc, #188]	; (800159c <HAL_GPIO_Init+0x2bc>)
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	492c      	ldr	r1, [pc, #176]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	43db      	mvns	r3, r3
 800150e:	4928      	ldr	r1, [pc, #160]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001510:	4013      	ands	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4922      	ldr	r1, [pc, #136]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	43db      	mvns	r3, r3
 8001536:	491e      	ldr	r1, [pc, #120]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001538:	4013      	ands	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	4918      	ldr	r1, [pc, #96]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	43db      	mvns	r3, r3
 800155e:	4914      	ldr	r1, [pc, #80]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001560:	4013      	ands	r3, r2
 8001562:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d021      	beq.n	80015b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	490e      	ldr	r1, [pc, #56]	; (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	60cb      	str	r3, [r1, #12]
 800157c:	e021      	b.n	80015c2 <HAL_GPIO_Init+0x2e2>
 800157e:	bf00      	nop
 8001580:	10320000 	.word	0x10320000
 8001584:	10310000 	.word	0x10310000
 8001588:	10220000 	.word	0x10220000
 800158c:	10210000 	.word	0x10210000
 8001590:	10120000 	.word	0x10120000
 8001594:	10110000 	.word	0x10110000
 8001598:	40021000 	.word	0x40021000
 800159c:	40010000 	.word	0x40010000
 80015a0:	40010800 	.word	0x40010800
 80015a4:	40010c00 	.word	0x40010c00
 80015a8:	40011000 	.word	0x40011000
 80015ac:	40011400 	.word	0x40011400
 80015b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_GPIO_Init+0x304>)
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	4909      	ldr	r1, [pc, #36]	; (80015e4 <HAL_GPIO_Init+0x304>)
 80015be:	4013      	ands	r3, r2
 80015c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	3301      	adds	r3, #1
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	fa22 f303 	lsr.w	r3, r2, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f47f ae8e 	bne.w	80012f4 <HAL_GPIO_Init+0x14>
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	372c      	adds	r7, #44	; 0x2c
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	40010400 	.word	0x40010400

080015e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001604:	e003      	b.n	800160e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	041a      	lsls	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	611a      	str	r2, [r3, #16]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	041a      	lsls	r2, r3, #16
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43d9      	mvns	r1, r3
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	400b      	ands	r3, r1
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	611a      	str	r2, [r3, #16]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
	...

0800164c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fb7a 	bl	8000d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40010400 	.word	0x40010400

0800167c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e12b      	b.n	80018e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d106      	bne.n	80016a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fba6 	bl	8000df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2224      	movs	r2, #36	; 0x24
 80016ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016e0:	f000 fffa 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 80016e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4a81      	ldr	r2, [pc, #516]	; (80018f0 <HAL_I2C_Init+0x274>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d807      	bhi.n	8001700 <HAL_I2C_Init+0x84>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4a80      	ldr	r2, [pc, #512]	; (80018f4 <HAL_I2C_Init+0x278>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	bf94      	ite	ls
 80016f8:	2301      	movls	r3, #1
 80016fa:	2300      	movhi	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	e006      	b.n	800170e <HAL_I2C_Init+0x92>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4a7d      	ldr	r2, [pc, #500]	; (80018f8 <HAL_I2C_Init+0x27c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	bf94      	ite	ls
 8001708:	2301      	movls	r3, #1
 800170a:	2300      	movhi	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0e7      	b.n	80018e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4a78      	ldr	r2, [pc, #480]	; (80018fc <HAL_I2C_Init+0x280>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9b      	lsrs	r3, r3, #18
 8001720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a6a      	ldr	r2, [pc, #424]	; (80018f0 <HAL_I2C_Init+0x274>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d802      	bhi.n	8001750 <HAL_I2C_Init+0xd4>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3301      	adds	r3, #1
 800174e:	e009      	b.n	8001764 <HAL_I2C_Init+0xe8>
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	4a69      	ldr	r2, [pc, #420]	; (8001900 <HAL_I2C_Init+0x284>)
 800175c:	fba2 2303 	umull	r2, r3, r2, r3
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	3301      	adds	r3, #1
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	430b      	orrs	r3, r1
 800176a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001776:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	495c      	ldr	r1, [pc, #368]	; (80018f0 <HAL_I2C_Init+0x274>)
 8001780:	428b      	cmp	r3, r1
 8001782:	d819      	bhi.n	80017b8 <HAL_I2C_Init+0x13c>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1e59      	subs	r1, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001792:	1c59      	adds	r1, r3, #1
 8001794:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001798:	400b      	ands	r3, r1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00a      	beq.n	80017b4 <HAL_I2C_Init+0x138>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1e59      	subs	r1, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ac:	3301      	adds	r3, #1
 80017ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b2:	e051      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 80017b4:	2304      	movs	r3, #4
 80017b6:	e04f      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d111      	bne.n	80017e4 <HAL_I2C_Init+0x168>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1e58      	subs	r0, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6859      	ldr	r1, [r3, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	440b      	add	r3, r1
 80017ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	e012      	b.n	800180a <HAL_I2C_Init+0x18e>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1e58      	subs	r0, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	0099      	lsls	r1, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_I2C_Init+0x196>
 800180e:	2301      	movs	r3, #1
 8001810:	e022      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10e      	bne.n	8001838 <HAL_I2C_Init+0x1bc>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1e58      	subs	r0, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6859      	ldr	r1, [r3, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	440b      	add	r3, r1
 8001828:	fbb0 f3f3 	udiv	r3, r0, r3
 800182c:	3301      	adds	r3, #1
 800182e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001836:	e00f      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	0099      	lsls	r1, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	fbb0 f3f3 	udiv	r3, r0, r3
 800184e:	3301      	adds	r3, #1
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	6809      	ldr	r1, [r1, #0]
 800185c:	4313      	orrs	r3, r2
 800185e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001886:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6911      	ldr	r1, [r2, #16]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68d2      	ldr	r2, [r2, #12]
 8001892:	4311      	orrs	r1, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	430b      	orrs	r3, r1
 800189a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2220      	movs	r2, #32
 80018d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	000186a0 	.word	0x000186a0
 80018f4:	001e847f 	.word	0x001e847f
 80018f8:	003d08ff 	.word	0x003d08ff
 80018fc:	431bde83 	.word	0x431bde83
 8001900:	10624dd3 	.word	0x10624dd3

08001904 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4603      	mov	r3, r0
 8001914:	817b      	strh	r3, [r7, #10]
 8001916:	460b      	mov	r3, r1
 8001918:	813b      	strh	r3, [r7, #8]
 800191a:	4613      	mov	r3, r2
 800191c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800191e:	f7ff fba3 	bl	8001068 <HAL_GetTick>
 8001922:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b20      	cmp	r3, #32
 800192e:	f040 80d9 	bne.w	8001ae4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2319      	movs	r3, #25
 8001938:	2201      	movs	r2, #1
 800193a:	496d      	ldr	r1, [pc, #436]	; (8001af0 <HAL_I2C_Mem_Write+0x1ec>)
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f971 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001948:	2302      	movs	r3, #2
 800194a:	e0cc      	b.n	8001ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_I2C_Mem_Write+0x56>
 8001956:	2302      	movs	r3, #2
 8001958:	e0c5      	b.n	8001ae6 <HAL_I2C_Mem_Write+0x1e2>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b01      	cmp	r3, #1
 800196e:	d007      	beq.n	8001980 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800198e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2221      	movs	r2, #33	; 0x21
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2240      	movs	r2, #64	; 0x40
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a3a      	ldr	r2, [r7, #32]
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a4d      	ldr	r2, [pc, #308]	; (8001af4 <HAL_I2C_Mem_Write+0x1f0>)
 80019c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c2:	88f8      	ldrh	r0, [r7, #6]
 80019c4:	893a      	ldrh	r2, [r7, #8]
 80019c6:	8979      	ldrh	r1, [r7, #10]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	4603      	mov	r3, r0
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f890 	bl	8001af8 <I2C_RequestMemoryWrite>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d052      	beq.n	8001a84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e081      	b.n	8001ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f9f2 	bl	8001dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00d      	beq.n	8001a0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d107      	bne.n	8001a0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e06b      	b.n	8001ae6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	781a      	ldrb	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d11b      	bne.n	8001a84 <HAL_I2C_Mem_Write+0x180>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d017      	beq.n	8001a84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1aa      	bne.n	80019e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f9de 	bl	8001e52 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d107      	bne.n	8001ab4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e016      	b.n	8001ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e000      	b.n	8001ae6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ae4:	2302      	movs	r3, #2
  }
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	00100002 	.word	0x00100002
 8001af4:	ffff0000 	.word	0xffff0000

08001af8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	817b      	strh	r3, [r7, #10]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	813b      	strh	r3, [r7, #8]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 f878 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00d      	beq.n	8001b56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b48:	d103      	bne.n	8001b52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e05f      	b.n	8001c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b56:	897b      	ldrh	r3, [r7, #10]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	6a3a      	ldr	r2, [r7, #32]
 8001b6a:	492d      	ldr	r1, [pc, #180]	; (8001c20 <I2C_RequestMemoryWrite+0x128>)
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f8b0 	bl	8001cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e04c      	b.n	8001c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b94:	6a39      	ldr	r1, [r7, #32]
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f91a 	bl	8001dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00d      	beq.n	8001bbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d107      	bne.n	8001bba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e02b      	b.n	8001c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bc4:	893b      	ldrh	r3, [r7, #8]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	e021      	b.n	8001c14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001bd0:	893b      	ldrh	r3, [r7, #8]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be0:	6a39      	ldr	r1, [r7, #32]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f8f4 	bl	8001dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00d      	beq.n	8001c0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d107      	bne.n	8001c06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e005      	b.n	8001c16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c0a:	893b      	ldrh	r3, [r7, #8]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	00010002 	.word	0x00010002

08001c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c34:	e025      	b.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c3c:	d021      	beq.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7ff fa13 	bl	8001068 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d116      	bne.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f043 0220 	orr.w	r2, r3, #32
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e023      	b.n	8001cca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d10d      	bne.n	8001ca8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4013      	ands	r3, r2
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf0c      	ite	eq
 8001c9e:	2301      	moveq	r3, #1
 8001ca0:	2300      	movne	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	e00c      	b.n	8001cc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bf0c      	ite	eq
 8001cba:	2301      	moveq	r3, #1
 8001cbc:	2300      	movne	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d0b6      	beq.n	8001c36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ce0:	e051      	b.n	8001d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf0:	d123      	bne.n	8001d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0204 	orr.w	r2, r3, #4
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e046      	b.n	8001dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d40:	d021      	beq.n	8001d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d42:	f7ff f991 	bl	8001068 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d302      	bcc.n	8001d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d116      	bne.n	8001d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f043 0220 	orr.w	r2, r3, #32
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e020      	b.n	8001dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	0c1b      	lsrs	r3, r3, #16
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d10c      	bne.n	8001daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	e00b      	b.n	8001dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	43da      	mvns	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	4013      	ands	r3, r2
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf14      	ite	ne
 8001dbc:	2301      	movne	r3, #1
 8001dbe:	2300      	moveq	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d18d      	bne.n	8001ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ddc:	e02d      	b.n	8001e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f878 	bl	8001ed4 <I2C_IsAcknowledgeFailed>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e02d      	b.n	8001e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df4:	d021      	beq.n	8001e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df6:	f7ff f937 	bl	8001068 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d302      	bcc.n	8001e0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d116      	bne.n	8001e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f043 0220 	orr.w	r2, r3, #32
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e007      	b.n	8001e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	2b80      	cmp	r3, #128	; 0x80
 8001e46:	d1ca      	bne.n	8001dde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e5e:	e02d      	b.n	8001ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f837 	bl	8001ed4 <I2C_IsAcknowledgeFailed>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e02d      	b.n	8001ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e76:	d021      	beq.n	8001ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e78:	f7ff f8f6 	bl	8001068 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d302      	bcc.n	8001e8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d116      	bne.n	8001ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e007      	b.n	8001ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d1ca      	bne.n	8001e60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eea:	d11b      	bne.n	8001f24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ef4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f043 0204 	orr.w	r2, r3, #4
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e26c      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8087 	beq.w	800205e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f50:	4b92      	ldr	r3, [pc, #584]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d00c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f5c:	4b8f      	ldr	r3, [pc, #572]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d112      	bne.n	8001f8e <HAL_RCC_OscConfig+0x5e>
 8001f68:	4b8c      	ldr	r3, [pc, #560]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f74:	d10b      	bne.n	8001f8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f76:	4b89      	ldr	r3, [pc, #548]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d06c      	beq.n	800205c <HAL_RCC_OscConfig+0x12c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d168      	bne.n	800205c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e246      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x76>
 8001f98:	4b80      	ldr	r3, [pc, #512]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a7f      	ldr	r2, [pc, #508]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	e02e      	b.n	8002004 <HAL_RCC_OscConfig+0xd4>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x98>
 8001fae:	4b7b      	ldr	r3, [pc, #492]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a7a      	ldr	r2, [pc, #488]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b78      	ldr	r3, [pc, #480]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a77      	ldr	r2, [pc, #476]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e01d      	b.n	8002004 <HAL_RCC_OscConfig+0xd4>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0xbc>
 8001fd2:	4b72      	ldr	r3, [pc, #456]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a71      	ldr	r2, [pc, #452]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b6f      	ldr	r3, [pc, #444]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6e      	ldr	r2, [pc, #440]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0xd4>
 8001fec:	4b6b      	ldr	r3, [pc, #428]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a6a      	ldr	r2, [pc, #424]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b68      	ldr	r3, [pc, #416]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a67      	ldr	r2, [pc, #412]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002002:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff f82c 	bl	8001068 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff f828 	bl	8001068 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1fa      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b5d      	ldr	r3, [pc, #372]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0xe4>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff f818 	bl	8001068 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff f814 	bl	8001068 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1e6      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x10c>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d063      	beq.n	8002132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800206a:	4b4c      	ldr	r3, [pc, #304]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002076:	4b49      	ldr	r3, [pc, #292]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b08      	cmp	r3, #8
 8002080:	d11c      	bne.n	80020bc <HAL_RCC_OscConfig+0x18c>
 8002082:	4b46      	ldr	r3, [pc, #280]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	4b43      	ldr	r3, [pc, #268]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x176>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1ba      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4939      	ldr	r1, [pc, #228]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	e03a      	b.n	8002132 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c4:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7fe ffcd 	bl	8001068 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d2:	f7fe ffc9 	bl	8001068 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e19b      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b2a      	ldr	r3, [pc, #168]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4927      	ldr	r1, [pc, #156]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002106:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe ffac 	bl	8001068 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002114:	f7fe ffa8 	bl	8001068 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e17a      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d03a      	beq.n	80021b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d019      	beq.n	800217a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7fe ff8c 	bl	8001068 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002154:	f7fe ff88 	bl	8001068 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e15a      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002172:	2001      	movs	r0, #1
 8002174:	f000 fac4 	bl	8002700 <RCC_Delay>
 8002178:	e01c      	b.n	80021b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7fe ff72 	bl	8001068 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002186:	e00f      	b.n	80021a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7fe ff6e 	bl	8001068 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d908      	bls.n	80021a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e140      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	42420000 	.word	0x42420000
 80021a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	4b9e      	ldr	r3, [pc, #632]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e9      	bne.n	8002188 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a6 	beq.w	800230e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c6:	4b97      	ldr	r3, [pc, #604]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10d      	bne.n	80021ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	4b94      	ldr	r3, [pc, #592]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a93      	ldr	r2, [pc, #588]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021dc:	61d3      	str	r3, [r2, #28]
 80021de:	4b91      	ldr	r3, [pc, #580]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ea:	2301      	movs	r3, #1
 80021ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	4b8e      	ldr	r3, [pc, #568]	; (8002428 <HAL_RCC_OscConfig+0x4f8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d118      	bne.n	800222c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021fa:	4b8b      	ldr	r3, [pc, #556]	; (8002428 <HAL_RCC_OscConfig+0x4f8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a8a      	ldr	r2, [pc, #552]	; (8002428 <HAL_RCC_OscConfig+0x4f8>)
 8002200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002206:	f7fe ff2f 	bl	8001068 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220e:	f7fe ff2b 	bl	8001068 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b64      	cmp	r3, #100	; 0x64
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0fd      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002220:	4b81      	ldr	r3, [pc, #516]	; (8002428 <HAL_RCC_OscConfig+0x4f8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x312>
 8002234:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a7a      	ldr	r2, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	e02d      	b.n	800229e <HAL_RCC_OscConfig+0x36e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x334>
 800224a:	4b76      	ldr	r3, [pc, #472]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a75      	ldr	r2, [pc, #468]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	4b73      	ldr	r3, [pc, #460]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a72      	ldr	r2, [pc, #456]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6213      	str	r3, [r2, #32]
 8002262:	e01c      	b.n	800229e <HAL_RCC_OscConfig+0x36e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b05      	cmp	r3, #5
 800226a:	d10c      	bne.n	8002286 <HAL_RCC_OscConfig+0x356>
 800226c:	4b6d      	ldr	r3, [pc, #436]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a6c      	ldr	r2, [pc, #432]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	6213      	str	r3, [r2, #32]
 8002278:	4b6a      	ldr	r3, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a69      	ldr	r2, [pc, #420]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	e00b      	b.n	800229e <HAL_RCC_OscConfig+0x36e>
 8002286:	4b67      	ldr	r3, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a66      	ldr	r2, [pc, #408]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b64      	ldr	r3, [pc, #400]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a63      	ldr	r2, [pc, #396]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d015      	beq.n	80022d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7fe fedf 	bl	8001068 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7fe fedb 	bl	8001068 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0ab      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	4b57      	ldr	r3, [pc, #348]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0ee      	beq.n	80022ae <HAL_RCC_OscConfig+0x37e>
 80022d0:	e014      	b.n	80022fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7fe fec9 	bl	8001068 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7fe fec5 	bl	8001068 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e095      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f0:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ee      	bne.n	80022da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d105      	bne.n	800230e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002302:	4b48      	ldr	r3, [pc, #288]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4a47      	ldr	r2, [pc, #284]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8081 	beq.w	800241a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b08      	cmp	r3, #8
 8002322:	d061      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d146      	bne.n	80023ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232c:	4b3f      	ldr	r3, [pc, #252]	; (800242c <HAL_RCC_OscConfig+0x4fc>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7fe fe99 	bl	8001068 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7fe fe95 	bl	8001068 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e067      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234c:	4b35      	ldr	r3, [pc, #212]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d108      	bne.n	8002374 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	492d      	ldr	r1, [pc, #180]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002374:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a19      	ldr	r1, [r3, #32]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	430b      	orrs	r3, r1
 8002386:	4927      	ldr	r1, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_RCC_OscConfig+0x4fc>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe fe69 	bl	8001068 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe fe65 	bl	8001068 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e037      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ac:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x46a>
 80023b8:	e02f      	b.n	800241a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b1c      	ldr	r3, [pc, #112]	; (800242c <HAL_RCC_OscConfig+0x4fc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fe52 	bl	8001068 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fe4e 	bl	8001068 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e020      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x498>
 80023e6:	e018      	b.n	800241a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e013      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	429a      	cmp	r2, r3
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	40007000 	.word	0x40007000
 800242c:	42420060 	.word	0x42420060

08002430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0d0      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002444:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d910      	bls.n	8002474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0207 	bic.w	r2, r3, #7
 800245a:	4965      	ldr	r1, [pc, #404]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0b8      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800248c:	4b59      	ldr	r3, [pc, #356]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a58      	ldr	r2, [pc, #352]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002496:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a4:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4a52      	ldr	r2, [pc, #328]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b0:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	494d      	ldr	r1, [pc, #308]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d040      	beq.n	8002550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	4b47      	ldr	r3, [pc, #284]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d115      	bne.n	800250e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e07f      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ee:	4b41      	ldr	r3, [pc, #260]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e073      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e06b      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250e:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f023 0203 	bic.w	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4936      	ldr	r1, [pc, #216]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002520:	f7fe fda2 	bl	8001068 <HAL_GetTick>
 8002524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	e00a      	b.n	800253e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002528:	f7fe fd9e 	bl	8001068 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	f241 3288 	movw	r2, #5000	; 0x1388
 8002536:	4293      	cmp	r3, r2
 8002538:	d901      	bls.n	800253e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e053      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 020c 	and.w	r2, r3, #12
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	429a      	cmp	r2, r3
 800254e:	d1eb      	bne.n	8002528 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d210      	bcs.n	8002580 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 0207 	bic.w	r2, r3, #7
 8002566:	4922      	ldr	r1, [pc, #136]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e032      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4916      	ldr	r1, [pc, #88]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	490e      	ldr	r1, [pc, #56]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025be:	f000 f821 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80025c2:	4602      	mov	r2, r0
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	490a      	ldr	r1, [pc, #40]	; (80025f8 <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	5ccb      	ldrb	r3, [r1, r3]
 80025d2:	fa22 f303 	lsr.w	r3, r2, r3
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1cc>)
 80025d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <HAL_RCC_ClockConfig+0x1d0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fd00 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08003a44 	.word	0x08003a44
 80025fc:	20000010 	.word	0x20000010
 8002600:	20000014 	.word	0x20000014

08002604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	b490      	push	{r4, r7}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800260a:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800260c:	1d3c      	adds	r4, r7, #4
 800260e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002614:	f240 2301 	movw	r3, #513	; 0x201
 8002618:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800262e:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b04      	cmp	r3, #4
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x40>
 800263e:	2b08      	cmp	r3, #8
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x46>
 8002642:	e02d      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002646:	623b      	str	r3, [r7, #32]
      break;
 8002648:	e02d      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	0c9b      	lsrs	r3, r3, #18
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002656:	4413      	add	r3, r2
 8002658:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800265c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	0c5b      	lsrs	r3, r3, #17
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002676:	4413      	add	r3, r2
 8002678:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800267c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002682:	fb02 f203 	mul.w	r2, r2, r3
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	e004      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	623b      	str	r3, [r7, #32]
      break;
 800269e:	e002      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80026a2:	623b      	str	r3, [r7, #32]
      break;
 80026a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a6:	6a3b      	ldr	r3, [r7, #32]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3728      	adds	r7, #40	; 0x28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc90      	pop	{r4, r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	080032c8 	.word	0x080032c8
 80026b8:	40021000 	.word	0x40021000
 80026bc:	007a1200 	.word	0x007a1200
 80026c0:	003d0900 	.word	0x003d0900

080026c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c8:	4b02      	ldr	r3, [pc, #8]	; (80026d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	20000010 	.word	0x20000010

080026d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026dc:	f7ff fff2 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4903      	ldr	r1, [pc, #12]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08003a54 	.word	0x08003a54

08002700 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <RCC_Delay+0x34>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <RCC_Delay+0x38>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0a5b      	lsrs	r3, r3, #9
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800271c:	bf00      	nop
  }
  while (Delay --);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	60fa      	str	r2, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f9      	bne.n	800271c <RCC_Delay+0x1c>
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	20000010 	.word	0x20000010
 8002738:	10624dd3 	.word	0x10624dd3

0800273c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e076      	b.n	800283c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	d108      	bne.n	8002768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800275e:	d009      	beq.n	8002774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]
 8002766:	e005      	b.n	8002774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe fb6e 	bl	8000e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f8:	ea42 0103 	orr.w	r1, r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	0c1a      	lsrs	r2, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f002 0204 	and.w	r2, r2, #4
 800281a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	4613      	mov	r3, r2
 8002852:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_SPI_Transmit+0x22>
 8002862:	2302      	movs	r3, #2
 8002864:	e126      	b.n	8002ab4 <HAL_SPI_Transmit+0x270>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800286e:	f7fe fbfb 	bl	8001068 <HAL_GetTick>
 8002872:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d002      	beq.n	800288a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002884:	2302      	movs	r3, #2
 8002886:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002888:	e10b      	b.n	8002aa2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_SPI_Transmit+0x52>
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	77fb      	strb	r3, [r7, #31]
    goto error;
 800289a:	e102      	b.n	8002aa2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2203      	movs	r2, #3
 80028a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	88fa      	ldrh	r2, [r7, #6]
 80028ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e2:	d10f      	bne.n	8002904 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002902:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d007      	beq.n	8002922 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800292a:	d14b      	bne.n	80029c4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_SPI_Transmit+0xf6>
 8002934:	8afb      	ldrh	r3, [r7, #22]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d13e      	bne.n	80029b8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	1c9a      	adds	r2, r3, #2
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800295e:	e02b      	b.n	80029b8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d112      	bne.n	8002994 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	881a      	ldrh	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	1c9a      	adds	r2, r3, #2
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002988:	b29b      	uxth	r3, r3
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	86da      	strh	r2, [r3, #54]	; 0x36
 8002992:	e011      	b.n	80029b8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002994:	f7fe fb68 	bl	8001068 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d803      	bhi.n	80029ac <HAL_SPI_Transmit+0x168>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029aa:	d102      	bne.n	80029b2 <HAL_SPI_Transmit+0x16e>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d102      	bne.n	80029b8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029b6:	e074      	b.n	8002aa2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1ce      	bne.n	8002960 <HAL_SPI_Transmit+0x11c>
 80029c2:	e04c      	b.n	8002a5e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_SPI_Transmit+0x18e>
 80029cc:	8afb      	ldrh	r3, [r7, #22]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d140      	bne.n	8002a54 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	330c      	adds	r3, #12
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029f8:	e02c      	b.n	8002a54 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d113      	bne.n	8002a30 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	7812      	ldrb	r2, [r2, #0]
 8002a14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a2e:	e011      	b.n	8002a54 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a30:	f7fe fb1a 	bl	8001068 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d803      	bhi.n	8002a48 <HAL_SPI_Transmit+0x204>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a46:	d102      	bne.n	8002a4e <HAL_SPI_Transmit+0x20a>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a52:	e026      	b.n	8002aa2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1cd      	bne.n	80029fa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	6839      	ldr	r1, [r7, #0]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fbb8 	bl	80031d8 <SPI_EndRxTxTransaction>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	77fb      	strb	r3, [r7, #31]
 8002a9e:	e000      	b.n	8002aa2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002aa0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ab2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ad8:	d112      	bne.n	8002b00 <HAL_SPI_Receive+0x44>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10e      	bne.n	8002b00 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f8f1 	bl	8002cde <HAL_SPI_TransmitReceive>
 8002afc:	4603      	mov	r3, r0
 8002afe:	e0ea      	b.n	8002cd6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_SPI_Receive+0x52>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0e3      	b.n	8002cd6 <HAL_SPI_Receive+0x21a>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b16:	f7fe faa7 	bl	8001068 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d002      	beq.n	8002b2e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b2c:	e0ca      	b.n	8002cc4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_SPI_Receive+0x7e>
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b3e:	e0c1      	b.n	8002cc4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2204      	movs	r2, #4
 8002b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	88fa      	ldrh	r2, [r7, #6]
 8002b58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	88fa      	ldrh	r2, [r7, #6]
 8002b5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b86:	d10f      	bne.n	8002ba8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ba6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b40      	cmp	r3, #64	; 0x40
 8002bb4:	d007      	beq.n	8002bc6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d162      	bne.n	8002c94 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bce:	e02e      	b.n	8002c2e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d115      	bne.n	8002c0a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f103 020c 	add.w	r2, r3, #12
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	7812      	ldrb	r2, [r2, #0]
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c08:	e011      	b.n	8002c2e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c0a:	f7fe fa2d 	bl	8001068 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d803      	bhi.n	8002c22 <HAL_SPI_Receive+0x166>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c20:	d102      	bne.n	8002c28 <HAL_SPI_Receive+0x16c>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c2c:	e04a      	b.n	8002cc4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1cb      	bne.n	8002bd0 <HAL_SPI_Receive+0x114>
 8002c38:	e031      	b.n	8002c9e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d113      	bne.n	8002c70 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	b292      	uxth	r2, r2
 8002c54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	1c9a      	adds	r2, r3, #2
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c6e:	e011      	b.n	8002c94 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c70:	f7fe f9fa 	bl	8001068 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d803      	bhi.n	8002c88 <HAL_SPI_Receive+0x1cc>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c86:	d102      	bne.n	8002c8e <HAL_SPI_Receive+0x1d2>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c92:	e017      	b.n	8002cc4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1cd      	bne.n	8002c3a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fa46 	bl	8003134 <SPI_EndRxTransaction>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	75fb      	strb	r3, [r7, #23]
 8002cc0:	e000      	b.n	8002cc4 <HAL_SPI_Receive+0x208>
  }

error :
 8002cc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b08c      	sub	sp, #48	; 0x30
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cec:	2301      	movs	r3, #1
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x26>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e18a      	b.n	800301a <HAL_SPI_TransmitReceive+0x33c>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d0c:	f7fe f9ac 	bl	8001068 <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d22:	887b      	ldrh	r3, [r7, #2]
 8002d24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d00f      	beq.n	8002d4e <HAL_SPI_TransmitReceive+0x70>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d34:	d107      	bne.n	8002d46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <HAL_SPI_TransmitReceive+0x68>
 8002d3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d003      	beq.n	8002d4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
 8002d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d4c:	e15b      	b.n	8003006 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_SPI_TransmitReceive+0x82>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_SPI_TransmitReceive+0x82>
 8002d5a:	887b      	ldrh	r3, [r7, #2]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d66:	e14e      	b.n	8003006 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d003      	beq.n	8002d7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2205      	movs	r2, #5
 8002d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	887a      	ldrh	r2, [r7, #2]
 8002d92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	887a      	ldrh	r2, [r7, #2]
 8002d9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d007      	beq.n	8002dd0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dd8:	d178      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x10a>
 8002de2:	8b7b      	ldrh	r3, [r7, #26]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d166      	bne.n	8002eb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	1c9a      	adds	r2, r3, #2
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e0c:	e053      	b.n	8002eb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d11b      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x176>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x176>
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d113      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	1c9a      	adds	r2, r3, #2
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d119      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x1b8>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d014      	beq.n	8002e96 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	b292      	uxth	r2, r2
 8002e78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	1c9a      	adds	r2, r3, #2
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e92:	2301      	movs	r3, #1
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e96:	f7fe f8e7 	bl	8001068 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d807      	bhi.n	8002eb6 <HAL_SPI_TransmitReceive+0x1d8>
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eac:	d003      	beq.n	8002eb6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002eb4:	e0a7      	b.n	8003006 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1a6      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x130>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1a1      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x130>
 8002eca:	e07c      	b.n	8002fc6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_SPI_TransmitReceive+0x1fc>
 8002ed4:	8b7b      	ldrh	r3, [r7, #26]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d16b      	bne.n	8002fb2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	7812      	ldrb	r2, [r2, #0]
 8002ee6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f00:	e057      	b.n	8002fb2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d11c      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x26c>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d017      	beq.n	8002f4a <HAL_SPI_TransmitReceive+0x26c>
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d114      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	7812      	ldrb	r2, [r2, #0]
 8002f2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d119      	bne.n	8002f8c <HAL_SPI_TransmitReceive+0x2ae>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d014      	beq.n	8002f8c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f8c:	f7fe f86c 	bl	8001068 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d803      	bhi.n	8002fa4 <HAL_SPI_TransmitReceive+0x2c6>
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa2:	d102      	bne.n	8002faa <HAL_SPI_TransmitReceive+0x2cc>
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fb0:	e029      	b.n	8003006 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1a2      	bne.n	8002f02 <HAL_SPI_TransmitReceive+0x224>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d19d      	bne.n	8002f02 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f904 	bl	80031d8 <SPI_EndRxTxTransaction>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d006      	beq.n	8002fe4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002fe2:	e010      	b.n	8003006 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10b      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	e000      	b.n	8003006 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003004:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800301a:	4618      	mov	r0, r3
 800301c:	3730      	adds	r7, #48	; 0x30
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003034:	f7fe f818 	bl	8001068 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	4413      	add	r3, r2
 8003042:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003044:	f7fe f810 	bl	8001068 <HAL_GetTick>
 8003048:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800304a:	4b39      	ldr	r3, [pc, #228]	; (8003130 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	015b      	lsls	r3, r3, #5
 8003050:	0d1b      	lsrs	r3, r3, #20
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800305a:	e054      	b.n	8003106 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003062:	d050      	beq.n	8003106 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003064:	f7fe f800 	bl	8001068 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	429a      	cmp	r2, r3
 8003072:	d902      	bls.n	800307a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d13d      	bne.n	80030f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003088:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003092:	d111      	bne.n	80030b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309c:	d004      	beq.n	80030a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a6:	d107      	bne.n	80030b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c0:	d10f      	bne.n	80030e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e017      	b.n	8003126 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	3b01      	subs	r3, #1
 8003104:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4013      	ands	r3, r2
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	429a      	cmp	r2, r3
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	429a      	cmp	r2, r3
 8003122:	d19b      	bne.n	800305c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000010 	.word	0x20000010

08003134 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003148:	d111      	bne.n	800316e <SPI_EndRxTransaction+0x3a>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003152:	d004      	beq.n	800315e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315c:	d107      	bne.n	800316e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003176:	d117      	bne.n	80031a8 <SPI_EndRxTransaction+0x74>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	d112      	bne.n	80031a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	2101      	movs	r1, #1
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f7ff ff49 	bl	8003024 <SPI_WaitFlagStateUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01a      	beq.n	80031ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e013      	b.n	80031d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2200      	movs	r2, #0
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff ff36 	bl	8003024 <SPI_WaitFlagStateUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	f043 0220 	orr.w	r2, r3, #32
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e000      	b.n	80031d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff ff18 	bl	8003024 <SPI_WaitFlagStateUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	f043 0220 	orr.w	r2, r3, #32
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e000      	b.n	800320c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <__libc_init_array>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	2600      	movs	r6, #0
 8003218:	4d0c      	ldr	r5, [pc, #48]	; (800324c <__libc_init_array+0x38>)
 800321a:	4c0d      	ldr	r4, [pc, #52]	; (8003250 <__libc_init_array+0x3c>)
 800321c:	1b64      	subs	r4, r4, r5
 800321e:	10a4      	asrs	r4, r4, #2
 8003220:	42a6      	cmp	r6, r4
 8003222:	d109      	bne.n	8003238 <__libc_init_array+0x24>
 8003224:	f000 f832 	bl	800328c <_init>
 8003228:	2600      	movs	r6, #0
 800322a:	4d0a      	ldr	r5, [pc, #40]	; (8003254 <__libc_init_array+0x40>)
 800322c:	4c0a      	ldr	r4, [pc, #40]	; (8003258 <__libc_init_array+0x44>)
 800322e:	1b64      	subs	r4, r4, r5
 8003230:	10a4      	asrs	r4, r4, #2
 8003232:	42a6      	cmp	r6, r4
 8003234:	d105      	bne.n	8003242 <__libc_init_array+0x2e>
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	f855 3b04 	ldr.w	r3, [r5], #4
 800323c:	4798      	blx	r3
 800323e:	3601      	adds	r6, #1
 8003240:	e7ee      	b.n	8003220 <__libc_init_array+0xc>
 8003242:	f855 3b04 	ldr.w	r3, [r5], #4
 8003246:	4798      	blx	r3
 8003248:	3601      	adds	r6, #1
 800324a:	e7f2      	b.n	8003232 <__libc_init_array+0x1e>
 800324c:	08003a5c 	.word	0x08003a5c
 8003250:	08003a5c 	.word	0x08003a5c
 8003254:	08003a5c 	.word	0x08003a5c
 8003258:	08003a60 	.word	0x08003a60

0800325c <memset>:
 800325c:	4603      	mov	r3, r0
 800325e:	4402      	add	r2, r0
 8003260:	4293      	cmp	r3, r2
 8003262:	d100      	bne.n	8003266 <memset+0xa>
 8003264:	4770      	bx	lr
 8003266:	f803 1b01 	strb.w	r1, [r3], #1
 800326a:	e7f9      	b.n	8003260 <memset+0x4>

0800326c <strcat>:
 800326c:	4602      	mov	r2, r0
 800326e:	b510      	push	{r4, lr}
 8003270:	7814      	ldrb	r4, [r2, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	3201      	adds	r2, #1
 8003276:	2c00      	cmp	r4, #0
 8003278:	d1fa      	bne.n	8003270 <strcat+0x4>
 800327a:	3b01      	subs	r3, #1
 800327c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003280:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003284:	2a00      	cmp	r2, #0
 8003286:	d1f9      	bne.n	800327c <strcat+0x10>
 8003288:	bd10      	pop	{r4, pc}
	...

0800328c <_init>:
 800328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328e:	bf00      	nop
 8003290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003292:	bc08      	pop	{r3}
 8003294:	469e      	mov	lr, r3
 8003296:	4770      	bx	lr

08003298 <_fini>:
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329a:	bf00      	nop
 800329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329e:	bc08      	pop	{r3}
 80032a0:	469e      	mov	lr, r3
 80032a2:	4770      	bx	lr
