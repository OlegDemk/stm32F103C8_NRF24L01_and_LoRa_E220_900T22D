
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000568c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fcc  08005fcc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005fcc  08005fcc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fcc  08005fcc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fcc  08005fcc  00015fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fd0  08005fd0  00015fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  20000088  0800605c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800605c  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d55  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c7c  00000000  00000000  00035e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00038a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  00039d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000031bc  00000000  00000000  0003af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016bf1  00000000  00000000  0003e11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009032b  00000000  00000000  00054d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5038  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005450  00000000  00000000  000e508c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08005780 	.word	0x08005780

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08005780 	.word	0x08005780

0800014c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000018 	.word	0x20000018
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001a4:	f001 ff5d 	bl	8002062 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001b8:	f003 fae1 	bl	800377e <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001d8:	f003 fad1 	bl	800377e <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001e2:	f001 ff3e 	bl	8002062 <HAL_GPIO_WritePin>
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	20000658 	.word	0x20000658

080001f8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
 8000218:	f001 ff23 	bl	8002062 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
 8000226:	f003 f85d 	bl	80032e4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
 8000234:	f003 f856 	bl	80032e4 <HAL_SPI_Transmit>
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
 800023e:	f001 ff10 	bl	8002062 <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	20000658 	.word	0x20000658

08000254 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 800025a:	2350      	movs	r3, #80	; 0x50
 800025c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800025e:	2200      	movs	r2, #0
 8000260:	2110      	movs	r1, #16
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000264:	f001 fefd 	bl	8002062 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000268:	1d39      	adds	r1, r7, #4
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	2201      	movs	r2, #1
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 8000272:	f003 f837 	bl	80032e4 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f7ff ff68 	bl	800014c <DelayMicro>
  dt[0] = 0x73;
 800027c:	2373      	movs	r3, #115	; 0x73
 800027e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000280:	1d39      	adds	r1, r7, #4
 8000282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000286:	2201      	movs	r2, #1
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 800028a:	f003 f82b 	bl	80032e4 <HAL_SPI_Transmit>
  CS_OFF;
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000294:	f001 fee5 	bl	8002062 <HAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000658 	.word	0x20000658

080002a8 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	6039      	str	r1, [r7, #0]
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002be:	f001 fed0 	bl	8002062 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80002c2:	1df9      	adds	r1, r7, #7
 80002c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c8:	2201      	movs	r2, #1
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002cc:	f003 f80a 	bl	80032e4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d8:	6839      	ldr	r1, [r7, #0]
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002dc:	f003 f93e 	bl	800355c <HAL_SPI_Receive>
  CS_OFF;
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002e6:	f001 febc 	bl	8002062 <HAL_GPIO_WritePin>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010800 	.word	0x40010800
 80002f8:	20000658 	.word	0x20000658

080002fc <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	b2db      	uxtb	r3, r3
 8000314:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000316:	2200      	movs	r2, #0
 8000318:	2110      	movs	r1, #16
 800031a:	480f      	ldr	r0, [pc, #60]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800031c:	f001 fea1 	bl	8002062 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000320:	1df9      	adds	r1, r7, #7
 8000322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000326:	2201      	movs	r2, #1
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <NRF24_Write_Buf+0x60>)
 800032a:	f002 ffdb 	bl	80032e4 <HAL_SPI_Transmit>
  DelayMicro(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff0c 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	b29a      	uxth	r2, r3
 8000338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033c:	6839      	ldr	r1, [r7, #0]
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <NRF24_Write_Buf+0x60>)
 8000340:	f002 ffd0 	bl	80032e4 <HAL_SPI_Transmit>
  CS_OFF;
 8000344:	2201      	movs	r2, #1
 8000346:	2110      	movs	r1, #16
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800034a:	f001 fe8a 	bl	8002062 <HAL_GPIO_WritePin>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800
 800035c:	20000658 	.word	0x20000658

08000360 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000366:	23e2      	movs	r3, #226	; 0xe2
 8000368:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800036a:	2200      	movs	r2, #0
 800036c:	2110      	movs	r1, #16
 800036e:	480b      	ldr	r0, [pc, #44]	; (800039c <NRF24_FlushRX+0x3c>)
 8000370:	f001 fe77 	bl	8002062 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000374:	1d39      	adds	r1, r7, #4
 8000376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037a:	2201      	movs	r2, #1
 800037c:	4808      	ldr	r0, [pc, #32]	; (80003a0 <NRF24_FlushRX+0x40>)
 800037e:	f002 ffb1 	bl	80032e4 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff fee2 	bl	800014c <DelayMicro>
  CS_OFF;
 8000388:	2201      	movs	r2, #1
 800038a:	2110      	movs	r1, #16
 800038c:	4803      	ldr	r0, [pc, #12]	; (800039c <NRF24_FlushRX+0x3c>)
 800038e:	f001 fe68 	bl	8002062 <HAL_GPIO_WritePin>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800
 80003a0:	20000658 	.word	0x20000658

080003a4 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 80003aa:	23e1      	movs	r3, #225	; 0xe1
 80003ac:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003b4:	f001 fe55 	bl	8002062 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80003b8:	1d39      	adds	r1, r7, #4
 80003ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003be:	2201      	movs	r2, #1
 80003c0:	4808      	ldr	r0, [pc, #32]	; (80003e4 <NRF24_FlushTX+0x40>)
 80003c2:	f002 ff8f 	bl	80032e4 <HAL_SPI_Transmit>
  DelayMicro(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff fec0 	bl	800014c <DelayMicro>
  CS_OFF;
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003d2:	f001 fe46 	bl	8002062 <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010800 	.word	0x40010800
 80003e4:	20000658 	.word	0x20000658

080003e8 <read_config_registers>:
	NRF24L01_RX_Mode();
}
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
bool read_config_registers(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80003ec:	2064      	movs	r0, #100	; 0x64
 80003ee:	f001 fabb 	bl	8001968 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff fecc 	bl	8000190 <NRF24_ReadReg>
 80003f8:	4603      	mov	r3, r0
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <read_config_registers+0x78>)
 80003fe:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 8000400:	2001      	movs	r0, #1
 8000402:	f7ff fec5 	bl	8000190 <NRF24_ReadReg>
 8000406:	4603      	mov	r3, r0
 8000408:	461a      	mov	r2, r3
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <read_config_registers+0x78>)
 800040c:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 800040e:	2002      	movs	r0, #2
 8000410:	f7ff febe 	bl	8000190 <NRF24_ReadReg>
 8000414:	4603      	mov	r3, r0
 8000416:	461a      	mov	r2, r3
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <read_config_registers+0x78>)
 800041a:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 800041c:	2007      	movs	r0, #7
 800041e:	f7ff feb7 	bl	8000190 <NRF24_ReadReg>
 8000422:	4603      	mov	r3, r0
 8000424:	461a      	mov	r2, r3
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <read_config_registers+0x78>)
 8000428:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 800042a:	2006      	movs	r0, #6
 800042c:	f7ff feb0 	bl	8000190 <NRF24_ReadReg>
 8000430:	4603      	mov	r3, r0
 8000432:	461a      	mov	r2, r3
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <read_config_registers+0x78>)
 8000436:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8000438:	2203      	movs	r2, #3
 800043a:	490a      	ldr	r1, [pc, #40]	; (8000464 <read_config_registers+0x7c>)
 800043c:	2010      	movs	r0, #16
 800043e:	f7ff ff33 	bl	80002a8 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 8000442:	2203      	movs	r2, #3
 8000444:	4907      	ldr	r1, [pc, #28]	; (8000464 <read_config_registers+0x7c>)
 8000446:	200a      	movs	r0, #10
 8000448:	f7ff ff2e 	bl	80002a8 <NRF24_Read_Buf>

	if(config_array[0] == 0)		// Data from nrf module was read
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <read_config_registers+0x78>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d101      	bne.n	8000458 <read_config_registers+0x70>
	{
		return false;
 8000454:	2300      	movs	r3, #0
 8000456:	e000      	b.n	800045a <read_config_registers+0x72>
	}
	else
	{
		return true;
 8000458:	2301      	movs	r3, #1
	}
}
 800045a:	4618      	mov	r0, r3
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	200000b0 	.word	0x200000b0
 8000464:	200000c0 	.word	0x200000c0

08000468 <IRQ_Callback>:
	status = read_config_registers();
	return status;
}
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
	Якщо в режимі передавача, тоді колбек всеодно викличиться, тільки колбеком потрібно
	замінити читанням #define IRQ HAL_GPIO_ReadPin(IRQ_GPIO_PORT, IRQ_PIN)
	*/


	uint8_t status=0x01;
 800046e:	2301      	movs	r3, #1
 8000470:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 8000472:	2300      	movs	r3, #0
 8000474:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047a:	4814      	ldr	r0, [pc, #80]	; (80004cc <IRQ_Callback+0x64>)
 800047c:	f001 fe09 	bl	8002092 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 8000480:	200a      	movs	r0, #10
 8000482:	f7ff fe63 	bl	800014c <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 8000486:	2007      	movs	r0, #7
 8000488:	f7ff fe82 	bl	8000190 <NRF24_ReadReg>
 800048c:	4603      	mov	r3, r0
 800048e:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000496:	2b00      	cmp	r3, #0
 8000498:	d013      	beq.n	80004c2 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	085b      	lsrs	r3, r3, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	f003 0307 	and.w	r3, r3, #7
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <IRQ_Callback+0x68>)
 80004a8:	701a      	strb	r2, [r3, #0]
		//memset(RX_BUF, 0, sizeof(RX_BUF));
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80004aa:	220a      	movs	r2, #10
 80004ac:	4909      	ldr	r1, [pc, #36]	; (80004d4 <IRQ_Callback+0x6c>)
 80004ae:	2061      	movs	r0, #97	; 0x61
 80004b0:	f7ff fefa 	bl	80002a8 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 80004b4:	2140      	movs	r1, #64	; 0x40
 80004b6:	2007      	movs	r0, #7
 80004b8:	f7ff fe9e 	bl	80001f8 <NRF24_WriteReg>
		rx_flag = 1;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <IRQ_Callback+0x70>)
 80004be:	2201      	movs	r2, #1
 80004c0:	701a      	strb	r2, [r3, #0]
	}
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40011000 	.word	0x40011000
 80004d0:	200000d4 	.word	0x200000d4
 80004d4:	200000a4 	.word	0x200000a4
 80004d8:	200000ae 	.word	0x200000ae

080004dc <NRF24L01_RX_Mode_ddddd>:
//
//uint8_t TX_ADDRESS[TX_ADR_WIDTH] = {0xb3,0xb4,0x01};   // Address for pipe 0
//uint32_t i=1,retr_cnt_full=0, cnt_lost=0;
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode_ddddd(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80004e2:	2300      	movs	r3, #0
 80004e4:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff fe52 	bl	8000190 <NRF24_ReadReg>
 80004ec:	4603      	mov	r3, r0
 80004ee:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	f043 0303 	orr.w	r3, r3, #3
 80004f6:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	4619      	mov	r1, r3
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fe7b 	bl	80001f8 <NRF24_WriteReg>
  CE_SET;
 8000502:	2201      	movs	r2, #1
 8000504:	2108      	movs	r1, #8
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <NRF24L01_RX_Mode_ddddd+0x48>)
 8000508:	f001 fdab 	bl	8002062 <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 800050c:	2096      	movs	r0, #150	; 0x96
 800050e:	f7ff fe1d 	bl	800014c <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 8000512:	f7ff ff25 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000516:	f7ff ff45 	bl	80003a4 <NRF24_FlushTX>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40010800 	.word	0x40010800

08000528 <nrf_TX>:
//----------------------------------------------------------------------------------------
void nrf_TX(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	NRF24_init_TX_mode();
 800052c:	f000 f804 	bl	8000538 <NRF24_init_TX_mode>
	while(1)
	{
		NRF24L01_Transmission();
 8000530:	f000 f906 	bl	8000740 <NRF24L01_Transmission>
	{
 8000534:	e7fc      	b.n	8000530 <nrf_TX+0x8>
	...

08000538 <NRF24_init_TX_mode>:
	}
}
//----------------------------------------------------------------------------------------
void NRF24_init_TX_mode(void)    // TRANSMITTER
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
//	  GPIO_InitStruct.Pull = GPIO_PULLUP;
//	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);



	CE_RESET;
 800053c:	2200      	movs	r2, #0
 800053e:	2108      	movs	r1, #8
 8000540:	4824      	ldr	r0, [pc, #144]	; (80005d4 <NRF24_init_TX_mode+0x9c>)
 8000542:	f001 fd8e 	bl	8002062 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8000546:	f241 3088 	movw	r0, #5000	; 0x1388
 800054a:	f7ff fdff 	bl	800014c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800054e:	210a      	movs	r1, #10
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff fe51 	bl	80001f8 <NRF24_WriteReg>

	DelayMicro(5000);
 8000556:	f241 3088 	movw	r0, #5000	; 0x1388
 800055a:	f7ff fdf7 	bl	800014c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 800055e:	2101      	movs	r1, #1
 8000560:	2001      	movs	r0, #1
 8000562:	f7ff fe49 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8000566:	2101      	movs	r1, #1
 8000568:	2002      	movs	r0, #2
 800056a:	f7ff fe45 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800056e:	2101      	movs	r1, #1
 8000570:	2003      	movs	r0, #3
 8000572:	f7ff fe41 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8000576:	215f      	movs	r1, #95	; 0x5f
 8000578:	2004      	movs	r0, #4
 800057a:	f7ff fe3d 	bl	80001f8 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 800057e:	f7ff fe69 	bl	8000254 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 8000582:	2100      	movs	r1, #0
 8000584:	201d      	movs	r0, #29
 8000586:	f7ff fe37 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 800058a:	2100      	movs	r1, #0
 800058c:	201c      	movs	r0, #28
 800058e:	f7ff fe33 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 8000592:	2170      	movs	r1, #112	; 0x70
 8000594:	2007      	movs	r0, #7
 8000596:	f7ff fe2f 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 800059a:	214c      	movs	r1, #76	; 0x4c
 800059c:	2005      	movs	r0, #5
 800059e:	f7ff fe2b 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 80005a2:	2126      	movs	r1, #38	; 0x26
 80005a4:	2006      	movs	r0, #6
 80005a6:	f7ff fe27 	bl	80001f8 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 80005aa:	2203      	movs	r2, #3
 80005ac:	490a      	ldr	r1, [pc, #40]	; (80005d8 <NRF24_init_TX_mode+0xa0>)
 80005ae:	2010      	movs	r0, #16
 80005b0:	f7ff fea4 	bl	80002fc <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 80005b4:	2203      	movs	r2, #3
 80005b6:	4908      	ldr	r1, [pc, #32]	; (80005d8 <NRF24_init_TX_mode+0xa0>)
 80005b8:	200a      	movs	r0, #10
 80005ba:	f7ff fe9f 	bl	80002fc <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 80005be:	210a      	movs	r1, #10
 80005c0:	2011      	movs	r0, #17
 80005c2:	f7ff fe19 	bl	80001f8 <NRF24_WriteReg>

	NRF24L01_RX_Mode_ddddd();
 80005c6:	f7ff ff89 	bl	80004dc <NRF24L01_RX_Mode_ddddd>

	read_config_registers();	// For debug
 80005ca:	f7ff ff0d 	bl	80003e8 <read_config_registers>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40010800 	.word	0x40010800
 80005d8:	20000000 	.word	0x20000000

080005dc <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 80005e4:	2203      	movs	r2, #3
 80005e6:	4908      	ldr	r1, [pc, #32]	; (8000608 <NRF24L01_TX_Mode+0x2c>)
 80005e8:	2010      	movs	r0, #16
 80005ea:	f7ff fe87 	bl	80002fc <NRF24_Write_Buf>
  CE_RESET;
 80005ee:	2200      	movs	r2, #0
 80005f0:	2108      	movs	r1, #8
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <NRF24L01_TX_Mode+0x30>)
 80005f4:	f001 fd35 	bl	8002062 <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 80005f8:	f7ff feb2 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 80005fc:	f7ff fed2 	bl	80003a4 <NRF24_FlushTX>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000000 	.word	0x20000000
 800060c:	40010800 	.word	0x40010800

08000610 <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 8000620:	2200      	movs	r2, #0
 8000622:	2108      	movs	r1, #8
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <NRF24_Transmit+0x64>)
 8000626:	f001 fd1c 	bl	8002062 <HAL_GPIO_WritePin>
  CS_ON;
 800062a:	2200      	movs	r2, #0
 800062c:	2110      	movs	r1, #16
 800062e:	4811      	ldr	r0, [pc, #68]	; (8000674 <NRF24_Transmit+0x64>)
 8000630:	f001 fd17 	bl	8002062 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 8000634:	1df9      	adds	r1, r7, #7
 8000636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063a:	2201      	movs	r2, #1
 800063c:	480e      	ldr	r0, [pc, #56]	; (8000678 <NRF24_Transmit+0x68>)
 800063e:	f002 fe51 	bl	80032e4 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff fd82 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	b29a      	uxth	r2, r3
 800064c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000650:	6839      	ldr	r1, [r7, #0]
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <NRF24_Transmit+0x68>)
 8000654:	f002 fe46 	bl	80032e4 <HAL_SPI_Transmit>
  CS_OFF;
 8000658:	2201      	movs	r2, #1
 800065a:	2110      	movs	r1, #16
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <NRF24_Transmit+0x64>)
 800065e:	f001 fd00 	bl	8002062 <HAL_GPIO_WritePin>
  CE_SET;
 8000662:	2201      	movs	r2, #1
 8000664:	2108      	movs	r1, #8
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <NRF24_Transmit+0x64>)
 8000668:	f001 fcfb 	bl	8002062 <HAL_GPIO_WritePin>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40010800 	.word	0x40010800
 8000678:	20000658 	.word	0x20000658

0800067c <NRF24L01_Send>:
//----------------------------------------------------------------------------------------


uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]
 8000688:	2300      	movs	r3, #0
 800068a:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ffa5 	bl	80005dc <NRF24L01_TX_Mode>

  regval = NRF24_ReadReg(CONFIG);
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff fd7c 	bl	8000190 <NRF24_ReadReg>
 8000698:	4603      	mov	r3, r0
 800069a:	73bb      	strb	r3, [r7, #14]

  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 800069c:	7bbb      	ldrb	r3, [r7, #14]
 800069e:	f043 0302 	orr.w	r3, r3, #2
 80006a2:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 80006a4:	7bbb      	ldrb	r3, [r7, #14]
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	4619      	mov	r1, r3
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff fda1 	bl	80001f8 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 80006b6:	2096      	movs	r0, #150	; 0x96
 80006b8:	f7ff fd48 	bl	800014c <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 80006bc:	220a      	movs	r2, #10
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	20a0      	movs	r0, #160	; 0xa0
 80006c2:	f7ff ffa5 	bl	8000610 <NRF24_Transmit>

  CE_SET;
 80006c6:	2201      	movs	r2, #1
 80006c8:	2108      	movs	r1, #8
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <NRF24L01_Send+0xc0>)
 80006cc:	f001 fcc9 	bl	8002062 <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 80006d0:	200f      	movs	r0, #15
 80006d2:	f7ff fd3b 	bl	800014c <DelayMicro>
  CE_RESET;
 80006d6:	2200      	movs	r2, #0
 80006d8:	2108      	movs	r1, #8
 80006da:	4818      	ldr	r0, [pc, #96]	; (800073c <NRF24L01_Send+0xc0>)
 80006dc:	f001 fcc1 	bl	8002062 <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  // ПРограма тут зависає !!!!!!!!!!!!!
  // Можливе рішення: Переконфігурувати пін з переривань на вхід. Перевірити на осцилографі чи єигнал від модуля !!!!!!
  // Чекає на відповідь від модуля NRF
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}		// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<, PROBLEM WHERE !!!!!!!!!!!!!!
 80006e0:	bf00      	nop
 80006e2:	2104      	movs	r1, #4
 80006e4:	4815      	ldr	r0, [pc, #84]	; (800073c <NRF24L01_Send+0xc0>)
 80006e6:	f001 fca5 	bl	8002034 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d0f8      	beq.n	80006e2 <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 80006f0:	2007      	movs	r0, #7
 80006f2:	f7ff fd4d 	bl	8000190 <NRF24_ReadReg>
 80006f6:	4603      	mov	r3, r0
 80006f8:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	f003 0320 	and.w	r3, r3, #32
 8000700:	2b00      	cmp	r3, #0
 8000702:	d004      	beq.n	800070e <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 8000704:	2120      	movs	r1, #32
 8000706:	2007      	movs	r0, #7
 8000708:	f7ff fd76 	bl	80001f8 <NRF24_WriteReg>
 800070c:	e00a      	b.n	8000724 <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	f003 0310 	and.w	r3, r3, #16
 8000714:	2b00      	cmp	r3, #0
 8000716:	d005      	beq.n	8000724 <NRF24L01_Send+0xa8>
  {

    NRF24_WriteReg(STATUS_NRF, 0x10);
 8000718:	2110      	movs	r1, #16
 800071a:	2007      	movs	r0, #7
 800071c:	f7ff fd6c 	bl	80001f8 <NRF24_WriteReg>
    NRF24_FlushTX();
 8000720:	f7ff fe40 	bl	80003a4 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 8000724:	2008      	movs	r0, #8
 8000726:	f7ff fd33 	bl	8000190 <NRF24_ReadReg>
 800072a:	4603      	mov	r3, r0
 800072c:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode

  NRF24L01_RX_Mode_ddddd();
 800072e:	f7ff fed5 	bl	80004dc <NRF24L01_RX_Mode_ddddd>

  return regval;
 8000732:	7bbb      	ldrb	r3, [r7, #14]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40010800 	.word	0x40010800

08000740 <NRF24L01_Transmission>:
	read_config_registers();	// For debug
}
//----------------------------------------------------------------------------------------

void NRF24L01_Transmission(void)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b095      	sub	sp, #84	; 0x54
 8000744:	af00      	add	r7, sp, #0

	char ctr[5] = {0};
 8000746:	2300      	movs	r3, #0
 8000748:	647b      	str	r3, [r7, #68]	; 0x44
 800074a:	2300      	movs	r3, #0
 800074c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	char ctr_buf[5] = {0};
 8000750:	2300      	movs	r3, #0
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000754:	2300      	movs	r3, #0
 8000756:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

	uint8_t retr_cnt, dt = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	int test_data = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c

	while(1)
	{
		// Test transmit data

		uint8_t buf2[20]={0};
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
 8000768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
		sprintf(buf2, "%d", test_data);
 8000776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800077c:	497a      	ldr	r1, [pc, #488]	; (8000968 <NRF24L01_Transmission+0x228>)
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fc36 	bl	8004ff0 <siprintf>

		// Print transmit data
		uint8_t test[25] = {0};
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	751a      	strb	r2, [r3, #20]
		uint8_t test_i[10] = {0};
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	809a      	strh	r2, [r3, #4]

		ssd1306_SetCursor(0, 16);
 80007a6:	2110      	movs	r1, #16
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 facb 	bl	8000d44 <ssd1306_SetCursor>
		strcpy(test, "Data:");
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4a6e      	ldr	r2, [pc, #440]	; (800096c <NRF24L01_Transmission+0x22c>)
 80007b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b8:	6018      	str	r0, [r3, #0]
 80007ba:	3304      	adds	r3, #4
 80007bc:	8019      	strh	r1, [r3, #0]

		ssd1306_WriteString(test,  Font_7x10, White);
 80007be:	4a6c      	ldr	r2, [pc, #432]	; (8000970 <NRF24L01_Transmission+0x230>)
 80007c0:	f107 000c 	add.w	r0, r7, #12
 80007c4:	2301      	movs	r3, #1
 80007c6:	ca06      	ldmia	r2, {r1, r2}
 80007c8:	f000 fa96 	bl	8000cf8 <ssd1306_WriteString>

		dt = NRF24L01_Send(buf2);						// Transmit data
 80007cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff53 	bl	800067c <NRF24L01_Send>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

		strcat(test, buf2);
 80007dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4611      	mov	r1, r2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fc22 	bl	8005030 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 80007ec:	4a60      	ldr	r2, [pc, #384]	; (8000970 <NRF24L01_Transmission+0x230>)
 80007ee:	f107 000c 	add.w	r0, r7, #12
 80007f2:	2301      	movs	r3, #1
 80007f4:	ca06      	ldmia	r2, {r1, r2}
 80007f6:	f000 fa7f 	bl	8000cf8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80007fa:	f000 f96d 	bl	8000ad8 <ssd1306_UpdateScreen>

		dt = NRF24L01_Send(buf2);						// Transmit data
 80007fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff3a 	bl	800067c <NRF24L01_Send>
 8000808:	4603      	mov	r3, r0
 800080a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

		retr_cnt = dt & 0xF;
 800080e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000812:	f003 030f 	and.w	r3, r3, #15
 8000816:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		retr_cnt_full += retr_cnt;
 800081a:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 800081e:	4b55      	ldr	r3, [pc, #340]	; (8000974 <NRF24L01_Transmission+0x234>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a53      	ldr	r2, [pc, #332]	; (8000974 <NRF24L01_Transmission+0x234>)
 8000826:	6013      	str	r3, [r2, #0]

		// Print transmit counter
		memset(test, 0, sizeof(test));
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2219      	movs	r2, #25
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f004 fb1f 	bl	8004e74 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000836:	463b      	mov	r3, r7
 8000838:	220a      	movs	r2, #10
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f004 fb19 	bl	8004e74 <memset>

		ssd1306_SetCursor(0, 26);
 8000842:	211a      	movs	r1, #26
 8000844:	2000      	movs	r0, #0
 8000846:	f000 fa7d 	bl	8000d44 <ssd1306_SetCursor>
		strcpy(test, "Conut trans:");
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4a4a      	ldr	r2, [pc, #296]	; (8000978 <NRF24L01_Transmission+0x238>)
 8000850:	461c      	mov	r4, r3
 8000852:	4613      	mov	r3, r2
 8000854:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000856:	c407      	stmia	r4!, {r0, r1, r2}
 8000858:	7023      	strb	r3, [r4, #0]
		// number in string
		itoa(i, test_i, 10);
 800085a:	4b48      	ldr	r3, [pc, #288]	; (800097c <NRF24L01_Transmission+0x23c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4639      	mov	r1, r7
 8000860:	220a      	movs	r2, #10
 8000862:	4618      	mov	r0, r3
 8000864:	f004 faf6 	bl	8004e54 <itoa>
		strcat(test, test_i);
 8000868:	463a      	mov	r2, r7
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f004 fbdd 	bl	8005030 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000876:	4a3e      	ldr	r2, [pc, #248]	; (8000970 <NRF24L01_Transmission+0x230>)
 8000878:	f107 000c 	add.w	r0, r7, #12
 800087c:	2301      	movs	r3, #1
 800087e:	ca06      	ldmia	r2, {r1, r2}
 8000880:	f000 fa3a 	bl	8000cf8 <ssd1306_WriteString>

		// Print retransmeet counter
		memset(test, 0, sizeof(test));
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2219      	movs	r2, #25
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f004 faf1 	bl	8004e74 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000892:	463b      	mov	r3, r7
 8000894:	220a      	movs	r2, #10
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f004 faeb 	bl	8004e74 <memset>

		ssd1306_SetCursor(0, 36);
 800089e:	2124      	movs	r1, #36	; 0x24
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 fa4f 	bl	8000d44 <ssd1306_SetCursor>
		strcpy(test, "Retransm:");
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4a35      	ldr	r2, [pc, #212]	; (8000980 <NRF24L01_Transmission+0x240>)
 80008ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80008ae:	c303      	stmia	r3!, {r0, r1}
 80008b0:	801a      	strh	r2, [r3, #0]
		itoa(retr_cnt_full, test_i, 10);
 80008b2:	4b30      	ldr	r3, [pc, #192]	; (8000974 <NRF24L01_Transmission+0x234>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4639      	mov	r1, r7
 80008b8:	220a      	movs	r2, #10
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 faca 	bl	8004e54 <itoa>
		strcat(test, test_i);
 80008c0:	463a      	mov	r2, r7
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 fbb1 	bl	8005030 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 80008ce:	4a28      	ldr	r2, [pc, #160]	; (8000970 <NRF24L01_Transmission+0x230>)
 80008d0:	f107 000c 	add.w	r0, r7, #12
 80008d4:	2301      	movs	r3, #1
 80008d6:	ca06      	ldmia	r2, {r1, r2}
 80008d8:	f000 fa0e 	bl	8000cf8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80008dc:	f000 f8fc 	bl	8000ad8 <ssd1306_UpdateScreen>

		// Print lost pacets
		memset(test, 0, sizeof(test));
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2219      	movs	r2, #25
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f004 fac3 	bl	8004e74 <memset>
		memset(test_i, 0, sizeof(test_i));
 80008ee:	463b      	mov	r3, r7
 80008f0:	220a      	movs	r2, #10
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 fabd 	bl	8004e74 <memset>

		cnt_lost = dt >> 4;
 80008fa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80008fe:	091b      	lsrs	r3, r3, #4
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <NRF24L01_Transmission+0x244>)
 8000906:	601a      	str	r2, [r3, #0]

		ssd1306_SetCursor(0, 46);
 8000908:	212e      	movs	r1, #46	; 0x2e
 800090a:	2000      	movs	r0, #0
 800090c:	f000 fa1a 	bl	8000d44 <ssd1306_SetCursor>
		strcpy(test, "Lost:");
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <NRF24L01_Transmission+0x248>)
 8000916:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091a:	6018      	str	r0, [r3, #0]
 800091c:	3304      	adds	r3, #4
 800091e:	8019      	strh	r1, [r3, #0]
		itoa(cnt_lost, test_i, 10);
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <NRF24L01_Transmission+0x244>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4639      	mov	r1, r7
 8000926:	220a      	movs	r2, #10
 8000928:	4618      	mov	r0, r3
 800092a:	f004 fa93 	bl	8004e54 <itoa>
		strcat(test, test_i);
 800092e:	463a      	mov	r2, r7
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f004 fb7a 	bl	8005030 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 800093c:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <NRF24L01_Transmission+0x230>)
 800093e:	f107 000c 	add.w	r0, r7, #12
 8000942:	2301      	movs	r3, #1
 8000944:	ca06      	ldmia	r2, {r1, r2}
 8000946:	f000 f9d7 	bl	8000cf8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800094a:	f000 f8c5 	bl	8000ad8 <ssd1306_UpdateScreen>

		test_data++;
 800094e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000950:	3301      	adds	r3, #1
 8000952:	64fb      	str	r3, [r7, #76]	; 0x4c
		i++;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <NRF24L01_Transmission+0x23c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <NRF24L01_Transmission+0x23c>)
 800095c:	6013      	str	r3, [r2, #0]

		HAL_Delay(1000);
 800095e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000962:	f001 f801 	bl	8001968 <HAL_Delay>
	{
 8000966:	e6fd      	b.n	8000764 <NRF24L01_Transmission+0x24>
 8000968:	080057b0 	.word	0x080057b0
 800096c:	080057b4 	.word	0x080057b4
 8000970:	20000008 	.word	0x20000008
 8000974:	200000d8 	.word	0x200000d8
 8000978:	080057bc 	.word	0x080057bc
 800097c:	20000004 	.word	0x20000004
 8000980:	080057cc 	.word	0x080057cc
 8000984:	200000dc 	.word	0x200000dc
 8000988:	080057d8 	.word	0x080057d8

0800098c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af04      	add	r7, sp, #16
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8000996:	230a      	movs	r3, #10
 8000998:	9302      	str	r3, [sp, #8]
 800099a:	2301      	movs	r3, #1
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2301      	movs	r3, #1
 80009a4:	2200      	movs	r2, #0
 80009a6:	2178      	movs	r1, #120	; 0x78
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <ssd1306_WriteCommand+0x2c>)
 80009aa:	f001 fce7 	bl	800237c <HAL_I2C_Mem_Write>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000578 	.word	0x20000578

080009bc <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80009c0:	2064      	movs	r0, #100	; 0x64
 80009c2:	f000 ffd1 	bl	8001968 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80009c6:	20ae      	movs	r0, #174	; 0xae
 80009c8:	f7ff ffe0 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80009cc:	2020      	movs	r0, #32
 80009ce:	f7ff ffdd 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009d2:	2010      	movs	r0, #16
 80009d4:	f7ff ffda 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80009d8:	20b0      	movs	r0, #176	; 0xb0
 80009da:	f7ff ffd7 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80009de:	20c8      	movs	r0, #200	; 0xc8
 80009e0:	f7ff ffd4 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff ffd1 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80009ea:	2010      	movs	r0, #16
 80009ec:	f7ff ffce 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80009f0:	2040      	movs	r0, #64	; 0x40
 80009f2:	f7ff ffcb 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80009f6:	2081      	movs	r0, #129	; 0x81
 80009f8:	f7ff ffc8 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80009fc:	20ff      	movs	r0, #255	; 0xff
 80009fe:	f7ff ffc5 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8000a02:	20a1      	movs	r0, #161	; 0xa1
 8000a04:	f7ff ffc2 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8000a08:	20a6      	movs	r0, #166	; 0xa6
 8000a0a:	f7ff ffbf 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000a0e:	20a8      	movs	r0, #168	; 0xa8
 8000a10:	f7ff ffbc 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8000a14:	203f      	movs	r0, #63	; 0x3f
 8000a16:	f7ff ffb9 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a1a:	20a4      	movs	r0, #164	; 0xa4
 8000a1c:	f7ff ffb6 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000a20:	20d3      	movs	r0, #211	; 0xd3
 8000a22:	f7ff ffb3 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff ffb0 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a2c:	20d5      	movs	r0, #213	; 0xd5
 8000a2e:	f7ff ffad 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000a32:	20f0      	movs	r0, #240	; 0xf0
 8000a34:	f7ff ffaa 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000a38:	20d9      	movs	r0, #217	; 0xd9
 8000a3a:	f7ff ffa7 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000a3e:	2022      	movs	r0, #34	; 0x22
 8000a40:	f7ff ffa4 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000a44:	20da      	movs	r0, #218	; 0xda
 8000a46:	f7ff ffa1 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000a4a:	2012      	movs	r0, #18
 8000a4c:	f7ff ff9e 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000a50:	20db      	movs	r0, #219	; 0xdb
 8000a52:	f7ff ff9b 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000a56:	2020      	movs	r0, #32
 8000a58:	f7ff ff98 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000a5c:	208d      	movs	r0, #141	; 0x8d
 8000a5e:	f7ff ff95 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000a62:	2014      	movs	r0, #20
 8000a64:	f7ff ff92 	bl	800098c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000a68:	20af      	movs	r0, #175	; 0xaf
 8000a6a:	f7ff ff8f 	bl	800098c <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 f810 	bl	8000a94 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000a74:	f000 f830 	bl	8000ad8 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <ssd1306_Init+0xd4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <ssd1306_Init+0xd4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000a84:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <ssd1306_Init+0xd4>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	715a      	strb	r2, [r3, #5]

	return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200004e0 	.word	0x200004e0

08000a94 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	e00d      	b.n	8000ac0 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <ssd1306_Fill+0x1a>
 8000aaa:	2100      	movs	r1, #0
 8000aac:	e000      	b.n	8000ab0 <ssd1306_Fill+0x1c>
 8000aae:	21ff      	movs	r1, #255	; 0xff
 8000ab0:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <ssd1306_Fill+0x40>)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	460a      	mov	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3301      	adds	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ac6:	d3ed      	bcc.n	8000aa4 <ssd1306_Fill+0x10>
	}
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	200000e0 	.word	0x200000e0

08000ad8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000ade:	2300      	movs	r3, #0
 8000ae0:	71fb      	strb	r3, [r7, #7]
 8000ae2:	e01d      	b.n	8000b20 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	3b50      	subs	r3, #80	; 0x50
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff4e 	bl	800098c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff ff4b 	bl	800098c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000af6:	2010      	movs	r0, #16
 8000af8:	f7ff ff48 	bl	800098c <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	01db      	lsls	r3, r3, #7
 8000b00:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <ssd1306_UpdateScreen+0x58>)
 8000b02:	4413      	add	r3, r2
 8000b04:	2264      	movs	r2, #100	; 0x64
 8000b06:	9202      	str	r2, [sp, #8]
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	9201      	str	r2, [sp, #4]
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2301      	movs	r3, #1
 8000b10:	2240      	movs	r2, #64	; 0x40
 8000b12:	2178      	movs	r1, #120	; 0x78
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <ssd1306_UpdateScreen+0x5c>)
 8000b16:	f001 fc31 	bl	800237c <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	2b07      	cmp	r3, #7
 8000b24:	d9de      	bls.n	8000ae4 <ssd1306_UpdateScreen+0xc>
	}
}
 8000b26:	bf00      	nop
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000e0 	.word	0x200000e0
 8000b34:	20000578 	.word	0x20000578

08000b38 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	460b      	mov	r3, r1
 8000b44:	71bb      	strb	r3, [r7, #6]
 8000b46:	4613      	mov	r3, r2
 8000b48:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db48      	blt.n	8000be4 <ssd1306_DrawPixel+0xac>
 8000b52:	79bb      	ldrb	r3, [r7, #6]
 8000b54:	2b3f      	cmp	r3, #63	; 0x3f
 8000b56:	d845      	bhi.n	8000be4 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000b58:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <ssd1306_DrawPixel+0xb8>)
 8000b5a:	791b      	ldrb	r3, [r3, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d006      	beq.n	8000b6e <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000b60:	797b      	ldrb	r3, [r7, #5]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	bf0c      	ite	eq
 8000b66:	2301      	moveq	r3, #1
 8000b68:	2300      	movne	r3, #0
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000b6e:	797b      	ldrb	r3, [r7, #5]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d11a      	bne.n	8000baa <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	79bb      	ldrb	r3, [r7, #6]
 8000b78:	08db      	lsrs	r3, r3, #3
 8000b7a:	b2d8      	uxtb	r0, r3
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	01db      	lsls	r3, r3, #7
 8000b80:	4413      	add	r3, r2
 8000b82:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <ssd1306_DrawPixel+0xbc>)
 8000b84:	5cd3      	ldrb	r3, [r2, r3]
 8000b86:	b25a      	sxtb	r2, r3
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b259      	sxtb	r1, r3
 8000b9a:	79fa      	ldrb	r2, [r7, #7]
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	01db      	lsls	r3, r3, #7
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b2c9      	uxtb	r1, r1
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <ssd1306_DrawPixel+0xbc>)
 8000ba6:	54d1      	strb	r1, [r2, r3]
 8000ba8:	e01d      	b.n	8000be6 <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000baa:	79fa      	ldrb	r2, [r7, #7]
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	08db      	lsrs	r3, r3, #3
 8000bb0:	b2d8      	uxtb	r0, r3
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <ssd1306_DrawPixel+0xbc>)
 8000bba:	5cd3      	ldrb	r3, [r2, r3]
 8000bbc:	b25a      	sxtb	r2, r3
 8000bbe:	79bb      	ldrb	r3, [r7, #6]
 8000bc0:	f003 0307 	and.w	r3, r3, #7
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	b259      	sxtb	r1, r3
 8000bd4:	79fa      	ldrb	r2, [r7, #7]
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	01db      	lsls	r3, r3, #7
 8000bda:	4413      	add	r3, r2
 8000bdc:	b2c9      	uxtb	r1, r1
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <ssd1306_DrawPixel+0xbc>)
 8000be0:	54d1      	strb	r1, [r2, r3]
 8000be2:	e000      	b.n	8000be6 <ssd1306_DrawPixel+0xae>
		return;
 8000be4:	bf00      	nop
	}
}
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200004e0 	.word	0x200004e0
 8000bf4:	200000e0 	.word	0x200000e0

08000bf8 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4604      	mov	r4, r0
 8000c00:	1d38      	adds	r0, r7, #4
 8000c02:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c06:	461a      	mov	r2, r3
 8000c08:	4623      	mov	r3, r4
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000c10:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <ssd1306_WriteChar+0xfc>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	793b      	ldrb	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c1c:	dc06      	bgt.n	8000c2c <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000c1e:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <ssd1306_WriteChar+0xfc>)
 8000c20:	885b      	ldrh	r3, [r3, #2]
 8000c22:	461a      	mov	r2, r3
 8000c24:	797b      	ldrb	r3, [r7, #5]
 8000c26:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000c28:	2b3f      	cmp	r3, #63	; 0x3f
 8000c2a:	dd01      	ble.n	8000c30 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e05d      	b.n	8000cec <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	e04c      	b.n	8000cd0 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	3b20      	subs	r3, #32
 8000c3c:	7979      	ldrb	r1, [r7, #5]
 8000c3e:	fb01 f303 	mul.w	r3, r1, r3
 8000c42:	4619      	mov	r1, r3
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	440b      	add	r3, r1
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4413      	add	r3, r2
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	e034      	b.n	8000cc0 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d012      	beq.n	8000c8c <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <ssd1306_WriteChar+0xfc>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	b2d8      	uxtb	r0, r3
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <ssd1306_WriteChar+0xfc>)
 8000c76:	885b      	ldrh	r3, [r3, #2]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4413      	add	r3, r2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	7bba      	ldrb	r2, [r7, #14]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f7ff ff57 	bl	8000b38 <ssd1306_DrawPixel>
 8000c8a:	e016      	b.n	8000cba <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <ssd1306_WriteChar+0xfc>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4413      	add	r3, r2
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <ssd1306_WriteChar+0xfc>)
 8000c9c:	885b      	ldrh	r3, [r3, #2]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b2d9      	uxtb	r1, r3
 8000ca8:	7bbb      	ldrb	r3, [r7, #14]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf0c      	ite	eq
 8000cae:	2301      	moveq	r3, #1
 8000cb0:	2300      	movne	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f7ff ff3f 	bl	8000b38 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	793b      	ldrb	r3, [r7, #4]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d3c5      	bcc.n	8000c56 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	61fb      	str	r3, [r7, #28]
 8000cd0:	797b      	ldrb	r3, [r7, #5]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d3ad      	bcc.n	8000c36 <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <ssd1306_WriteChar+0xfc>)
 8000cdc:	881a      	ldrh	r2, [r3, #0]
 8000cde:	793b      	ldrb	r3, [r7, #4]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <ssd1306_WriteChar+0xfc>)
 8000ce8:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3724      	adds	r7, #36	; 0x24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	200004e0 	.word	0x200004e0

08000cf8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	1d38      	adds	r0, r7, #4
 8000d02:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d06:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8000d08:	e012      	b.n	8000d30 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	7818      	ldrb	r0, [r3, #0]
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	1d3a      	adds	r2, r7, #4
 8000d12:	ca06      	ldmia	r2, {r1, r2}
 8000d14:	f7ff ff70 	bl	8000bf8 <ssd1306_WriteChar>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d002      	beq.n	8000d2a <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	e008      	b.n	8000d3c <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1e8      	bne.n	8000d0a <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <ssd1306_SetCursor+0x2c>)
 8000d5a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <ssd1306_SetCursor+0x2c>)
 8000d62:	805a      	strh	r2, [r3, #2]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	200004e0 	.word	0x200004e0

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d78:	f000 fd94 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7c:	f000 f826 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d80:	f000 f972 	bl	8001068 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d84:	f000 f868 	bl	8000e58 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d88:	f000 f894 	bl	8000eb4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000d8c:	f000 f918 	bl	8000fc0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000d90:	f000 f8c6 	bl	8000f20 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000d94:	f000 f93e 	bl	8001014 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9e:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <main+0x54>)
 8000da0:	f001 f95f 	bl	8002062 <HAL_GPIO_WritePin>

  // Init interrupt (For LoRa)
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2025      	movs	r0, #37	; 0x25
 8000daa:	f000 fed8 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dae:	2025      	movs	r0, #37	; 0x25
 8000db0:	f000 fef1 	bl	8001b96 <HAL_NVIC_EnableIRQ>

  // OLED init
  ssd1306_Init();
 8000db4:	f7ff fe02 	bl	80009bc <ssd1306_Init>
  ssd1306_Fill(Black);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff fe6b 	bl	8000a94 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000dbe:	f7ff fe8b 	bl	8000ad8 <ssd1306_UpdateScreen>
  {
	//menu();

	  //nrf_RX();

     nrf_TX();		// <<<<<<<<<<<<<<<<<<<<<,,
 8000dc2:	f7ff fbb1 	bl	8000528 <nrf_TX>
 8000dc6:	e7fc      	b.n	8000dc2 <main+0x4e>
 8000dc8:	40011000 	.word	0x40011000

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b090      	sub	sp, #64	; 0x40
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	2228      	movs	r2, #40	; 0x28
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f004 f84a 	bl	8004e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2302      	movs	r3, #2
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000e0a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fdc7 	bl	80029a8 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e20:	f000 fa40 	bl	80012a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 f832 	bl	8002ea8 <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e4a:	f000 fa2b 	bl	80012a4 <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3740      	adds	r7, #64	; 0x40
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <MX_I2C1_Init+0x50>)
 8000e5e:	4a13      	ldr	r2, [pc, #76]	; (8000eac <MX_I2C1_Init+0x54>)
 8000e60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_I2C1_Init+0x50>)
 8000e64:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <MX_I2C1_Init+0x58>)
 8000e66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_I2C1_Init+0x50>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_I2C1_Init+0x50>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_I2C1_Init+0x50>)
 8000e76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <MX_I2C1_Init+0x50>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_I2C1_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <MX_I2C1_Init+0x50>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_I2C1_Init+0x50>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <MX_I2C1_Init+0x50>)
 8000e96:	f001 f92d 	bl	80020f4 <HAL_I2C_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea0:	f000 fa00 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000578 	.word	0x20000578
 8000eac:	40005400 	.word	0x40005400
 8000eb0:	00061a80 	.word	0x00061a80

08000eb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000eba:	4a18      	ldr	r2, [pc, #96]	; (8000f1c <MX_SPI1_Init+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000ec0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ec4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000ee8:	2220      	movs	r2, #32
 8000eea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000f00:	220a      	movs	r2, #10
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_SPI1_Init+0x64>)
 8000f06:	f002 f969 	bl	80031dc <HAL_SPI_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f10:	f000 f9c8 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000658 	.word	0x20000658
 8000f1c:	40013000 	.word	0x40013000

08000f20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <MX_TIM1_Init+0x98>)
 8000f3e:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <MX_TIM1_Init+0x9c>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_TIM1_Init+0x98>)
 8000f44:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000f48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_TIM1_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_TIM1_Init+0x98>)
 8000f52:	2264      	movs	r2, #100	; 0x64
 8000f54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_TIM1_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_TIM1_Init+0x98>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_TIM1_Init+0x98>)
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <MX_TIM1_Init+0x98>)
 8000f6a:	f002 fea3 	bl	8003cb4 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f74:	f000 f996 	bl	80012a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <MX_TIM1_Init+0x98>)
 8000f86:	f003 f86d 	bl	8004064 <HAL_TIM_ConfigClockSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f90:	f000 f988 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000f94:	2310      	movs	r3, #16
 8000f96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_TIM1_Init+0x98>)
 8000fa2:	f003 fa49 	bl	8004438 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fac:	f000 f97a 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000610 	.word	0x20000610
 8000fbc:	40012c00 	.word	0x40012c00

08000fc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <MX_USART1_UART_Init+0x50>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_USART1_UART_Init+0x4c>)
 8000ff8:	f003 fa8e 	bl	8004518 <HAL_UART_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001002:	f000 f94f 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200005cc 	.word	0x200005cc
 8001010:	40013800 	.word	0x40013800

08001014 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <MX_USART3_UART_Init+0x50>)
 800101c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 8001020:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001024:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_USART3_UART_Init+0x4c>)
 800104c:	f003 fa64 	bl	8004518 <HAL_UART_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001056:	f000 f925 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000534 	.word	0x20000534
 8001064:	40004800 	.word	0x40004800

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107c:	4b5f      	ldr	r3, [pc, #380]	; (80011fc <MX_GPIO_Init+0x194>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a5e      	ldr	r2, [pc, #376]	; (80011fc <MX_GPIO_Init+0x194>)
 8001082:	f043 0310 	orr.w	r3, r3, #16
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b5c      	ldr	r3, [pc, #368]	; (80011fc <MX_GPIO_Init+0x194>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0310 	and.w	r3, r3, #16
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001094:	4b59      	ldr	r3, [pc, #356]	; (80011fc <MX_GPIO_Init+0x194>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a58      	ldr	r2, [pc, #352]	; (80011fc <MX_GPIO_Init+0x194>)
 800109a:	f043 0320 	orr.w	r3, r3, #32
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b56      	ldr	r3, [pc, #344]	; (80011fc <MX_GPIO_Init+0x194>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0320 	and.w	r3, r3, #32
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b53      	ldr	r3, [pc, #332]	; (80011fc <MX_GPIO_Init+0x194>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a52      	ldr	r2, [pc, #328]	; (80011fc <MX_GPIO_Init+0x194>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b50      	ldr	r3, [pc, #320]	; (80011fc <MX_GPIO_Init+0x194>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <MX_GPIO_Init+0x194>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a4c      	ldr	r2, [pc, #304]	; (80011fc <MX_GPIO_Init+0x194>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b4a      	ldr	r3, [pc, #296]	; (80011fc <MX_GPIO_Init+0x194>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e2:	4847      	ldr	r0, [pc, #284]	; (8001200 <MX_GPIO_Init+0x198>)
 80010e4:	f000 ffbd 	bl	8002062 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2108      	movs	r1, #8
 80010ec:	4845      	ldr	r0, [pc, #276]	; (8001204 <MX_GPIO_Init+0x19c>)
 80010ee:	f000 ffb8 	bl	8002062 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2110      	movs	r1, #16
 80010f6:	4843      	ldr	r0, [pc, #268]	; (8001204 <MX_GPIO_Init+0x19c>)
 80010f8:	f000 ffb3 	bl	8002062 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f242 0101 	movw	r1, #8193	; 0x2001
 8001102:	4841      	ldr	r0, [pc, #260]	; (8001208 <MX_GPIO_Init+0x1a0>)
 8001104:	f000 ffad 	bl	8002062 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2302      	movs	r3, #2
 8001118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	4837      	ldr	r0, [pc, #220]	; (8001200 <MX_GPIO_Init+0x198>)
 8001122:	f000 fe03 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001126:	2304      	movs	r3, #4
 8001128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <MX_GPIO_Init+0x1a4>)
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4619      	mov	r1, r3
 8001138:	4832      	ldr	r0, [pc, #200]	; (8001204 <MX_GPIO_Init+0x19c>)
 800113a:	f000 fdf7 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800113e:	2318      	movs	r3, #24
 8001140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4619      	mov	r1, r3
 8001154:	482b      	ldr	r0, [pc, #172]	; (8001204 <MX_GPIO_Init+0x19c>)
 8001156:	f000 fde9 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 800115a:	f242 0301 	movw	r3, #8193	; 0x2001
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2302      	movs	r3, #2
 800116a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	4825      	ldr	r0, [pc, #148]	; (8001208 <MX_GPIO_Init+0x1a0>)
 8001174:	f000 fdda 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8001178:	2302      	movs	r3, #2
 800117a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	481f      	ldr	r0, [pc, #124]	; (8001208 <MX_GPIO_Init+0x1a0>)
 800118c:	f000 fdce 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001190:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_GPIO_Init+0x1a4>)
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	4818      	ldr	r0, [pc, #96]	; (8001208 <MX_GPIO_Init+0x1a0>)
 80011a6:	f000 fdc1 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_GPIO_Init+0x1a4>)
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	4811      	ldr	r0, [pc, #68]	; (8001204 <MX_GPIO_Init+0x19c>)
 80011c0:	f000 fdb4 	bl	8001d2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2100      	movs	r1, #0
 80011c8:	2008      	movs	r0, #8
 80011ca:	f000 fcc8 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011ce:	2008      	movs	r0, #8
 80011d0:	f000 fce1 	bl	8001b96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2017      	movs	r0, #23
 80011da:	f000 fcc0 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011de:	2017      	movs	r0, #23
 80011e0:	f000 fcd9 	bl	8001b96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	2028      	movs	r0, #40	; 0x28
 80011ea:	f000 fcb8 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ee:	2028      	movs	r0, #40	; 0x28
 80011f0:	f000 fcd1 	bl	8001b96 <HAL_NVIC_EnableIRQ>

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021000 	.word	0x40021000
 8001200:	40011000 	.word	0x40011000
 8001204:	40010800 	.word	0x40010800
 8001208:	40010c00 	.word	0x40010c00
 800120c:	10210000 	.word	0x10210000

08001210 <HAL_GPIO_EXTI_Callback>:



//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	2b04      	cmp	r3, #4
 800121e:	d102      	bne.n	8001226 <HAL_GPIO_EXTI_Callback+0x16>
  {
	  IRQ_Callback();					// Call Callback
 8001220:	f7ff f922 	bl	8000468 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8001224:	e000      	b.n	8001228 <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8001226:	bf00      	nop
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_UART_RxCpltCallback>:
//----------------------------------------------------------------------------------------
// Receive data from LoRa module
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <HAL_UART_RxCpltCallback+0x60>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d123      	bne.n	8001288 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_UART_RxCpltCallback+0x64>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_UART_RxCpltCallback+0x20>
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <HAL_UART_RxCpltCallback+0x68>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b31      	cmp	r3, #49	; 0x31
 800124e:	d906      	bls.n	800125e <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_UART_RxCpltCallback+0x6c>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_UART_RxCpltCallback+0x68>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 800125c:	e014      	b.n	8001288 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_UART_RxCpltCallback+0x6c>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_UART_RxCpltCallback+0x68>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_UART_RxCpltCallback+0x64>)
 800126c:	7819      	ldrb	r1, [r3, #0]
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_UART_RxCpltCallback+0x70>)
 8001270:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8001272:	2201      	movs	r2, #1
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <HAL_UART_RxCpltCallback+0x64>)
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <HAL_UART_RxCpltCallback+0x60>)
 8001278:	f003 f99b 	bl	80045b2 <HAL_UART_Receive_IT>
			rx_data_counter ++;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_UART_RxCpltCallback+0x68>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <HAL_UART_RxCpltCallback+0x68>)
 8001286:	701a      	strb	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200005cc 	.word	0x200005cc
 8001294:	2000051c 	.word	0x2000051c
 8001298:	2000051e 	.word	0x2000051e
 800129c:	2000051d 	.word	0x2000051d
 80012a0:	200004e8 	.word	0x200004e8

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>
	...

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_MspInit+0x5c>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_MspInit+0x5c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_MspInit+0x5c>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_MspInit+0x5c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <HAL_MspInit+0x5c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_MspInit+0x5c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_MspInit+0x60>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <HAL_MspInit+0x60>)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000

08001314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a15      	ldr	r2, [pc, #84]	; (8001384 <HAL_I2C_MspInit+0x70>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d123      	bne.n	800137c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_I2C_MspInit+0x74>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a13      	ldr	r2, [pc, #76]	; (8001388 <HAL_I2C_MspInit+0x74>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_I2C_MspInit+0x74>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800134c:	23c0      	movs	r3, #192	; 0xc0
 800134e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001350:	2312      	movs	r3, #18
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <HAL_I2C_MspInit+0x78>)
 8001360:	f000 fce4 	bl	8001d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_I2C_MspInit+0x74>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_I2C_MspInit+0x74>)
 800136a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136e:	61d3      	str	r3, [r2, #28]
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_I2C_MspInit+0x74>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40005400 	.word	0x40005400
 8001388:	40021000 	.word	0x40021000
 800138c:	40010c00 	.word	0x40010c00

08001390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d12f      	bne.n	8001410 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_SPI_MspInit+0x8c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a19      	ldr	r2, [pc, #100]	; (800141c <HAL_SPI_MspInit+0x8c>)
 80013b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_SPI_MspInit+0x8c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_SPI_MspInit+0x8c>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a13      	ldr	r2, [pc, #76]	; (800141c <HAL_SPI_MspInit+0x8c>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_SPI_MspInit+0x8c>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013e0:	23a0      	movs	r3, #160	; 0xa0
 80013e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <HAL_SPI_MspInit+0x90>)
 80013f4:	f000 fc9a 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f8:	2340      	movs	r3, #64	; 0x40
 80013fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4619      	mov	r1, r3
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_SPI_MspInit+0x90>)
 800140c:	f000 fc8e 	bl	8001d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001410:	bf00      	nop
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40013000 	.word	0x40013000
 800141c:	40021000 	.word	0x40021000
 8001420:	40010800 	.word	0x40010800

08001424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <HAL_TIM_Base_MspInit+0x44>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d113      	bne.n	800145e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_TIM_Base_MspInit+0x48>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	4a0c      	ldr	r2, [pc, #48]	; (800146c <HAL_TIM_Base_MspInit+0x48>)
 800143c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001440:	6193      	str	r3, [r2, #24]
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_TIM_Base_MspInit+0x48>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2019      	movs	r0, #25
 8001454:	f000 fb83 	bl	8001b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001458:	2019      	movs	r0, #25
 800145a:	f000 fb9c 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40012c00 	.word	0x40012c00
 800146c:	40021000 	.word	0x40021000

08001470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a3c      	ldr	r2, [pc, #240]	; (800157c <HAL_UART_MspInit+0x10c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d13a      	bne.n	8001506 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001490:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a3a      	ldr	r2, [pc, #232]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b38      	ldr	r3, [pc, #224]	; (8001580 <HAL_UART_MspInit+0x110>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b35      	ldr	r3, [pc, #212]	; (8001580 <HAL_UART_MspInit+0x110>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a34      	ldr	r2, [pc, #208]	; (8001580 <HAL_UART_MspInit+0x110>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_UART_MspInit+0x110>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0318 	add.w	r3, r7, #24
 80014d2:	4619      	mov	r1, r3
 80014d4:	482b      	ldr	r0, [pc, #172]	; (8001584 <HAL_UART_MspInit+0x114>)
 80014d6:	f000 fc29 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	4619      	mov	r1, r3
 80014ee:	4825      	ldr	r0, [pc, #148]	; (8001584 <HAL_UART_MspInit+0x114>)
 80014f0:	f000 fc1c 	bl	8001d2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	2025      	movs	r0, #37	; 0x25
 80014fa:	f000 fb30 	bl	8001b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014fe:	2025      	movs	r0, #37	; 0x25
 8001500:	f000 fb49 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001504:	e036      	b.n	8001574 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <HAL_UART_MspInit+0x118>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d131      	bne.n	8001574 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001516:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151a:	61d3      	str	r3, [r2, #28]
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_UART_MspInit+0x110>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_UART_MspInit+0x110>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_UART_MspInit+0x110>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0318 	add.w	r3, r7, #24
 8001552:	4619      	mov	r1, r3
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <HAL_UART_MspInit+0x11c>)
 8001556:	f000 fbe9 	bl	8001d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800155a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 0318 	add.w	r3, r7, #24
 800156c:	4619      	mov	r1, r3
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <HAL_UART_MspInit+0x11c>)
 8001570:	f000 fbdc 	bl	8001d2c <HAL_GPIO_Init>
}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	; 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40013800 	.word	0x40013800
 8001580:	40021000 	.word	0x40021000
 8001584:	40010800 	.word	0x40010800
 8001588:	40004800 	.word	0x40004800
 800158c:	40010c00 	.word	0x40010c00

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <NMI_Handler+0x4>

08001596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <MemManage_Handler+0x4>

080015a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <UsageFault_Handler+0x4>

080015ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d6:	f000 f9ab 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}

080015de <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80015e2:	2004      	movs	r0, #4
 80015e4:	f000 fd6e 	bl	80020c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <EXTI9_5_IRQHandler+0x44>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	f083 0301 	eor.w	r3, r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d012      	beq.n	8001624 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <EXTI9_5_IRQHandler+0x48>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00c      	beq.n	8001624 <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <EXTI9_5_IRQHandler+0x4c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <EXTI9_5_IRQHandler+0x50>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d105      	bne.n	8001624 <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8001618:	4809      	ldr	r0, [pc, #36]	; (8001640 <EXTI9_5_IRQHandler+0x54>)
 800161a:	f002 fb9b 	bl	8003d54 <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <EXTI9_5_IRQHandler+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001624:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001628:	f000 fd4c 	bl	80020c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000528 	.word	0x20000528
 8001634:	40010400 	.word	0x40010400
 8001638:	20000010 	.word	0x20000010
 800163c:	20000014 	.word	0x20000014
 8001640:	20000610 	.word	0x20000610

08001644 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8001648:	4b37      	ldr	r3, [pc, #220]	; (8001728 <TIM1_UP_IRQHandler+0xe4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d165      	bne.n	800171c <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 8001650:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001654:	4835      	ldr	r0, [pc, #212]	; (800172c <TIM1_UP_IRQHandler+0xe8>)
 8001656:	f000 fced 	bl	8002034 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d118      	bne.n	8001692 <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 8001660:	4b33      	ldr	r3, [pc, #204]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	4a32      	ldr	r2, [pc, #200]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 8001668:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 800166a:	4b32      	ldr	r3, [pc, #200]	; (8001734 <TIM1_UP_IRQHandler+0xf0>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	dc51      	bgt.n	800171c <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8001678:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <TIM1_UP_IRQHandler+0xe4>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800167e:	482e      	ldr	r0, [pc, #184]	; (8001738 <TIM1_UP_IRQHandler+0xf4>)
 8001680:	f002 fbba 	bl	8003df8 <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <TIM1_UP_IRQHandler+0xf8>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 800168a:	4b29      	ldr	r3, [pc, #164]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e044      	b.n	800171c <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 8001692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001696:	482a      	ldr	r0, [pc, #168]	; (8001740 <TIM1_UP_IRQHandler+0xfc>)
 8001698:	f000 fccc 	bl	8002034 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d118      	bne.n	80016d4 <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a21      	ldr	r2, [pc, #132]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 80016aa:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <TIM1_UP_IRQHandler+0xf0>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dc30      	bgt.n	800171c <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <TIM1_UP_IRQHandler+0xe4>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80016c0:	481d      	ldr	r0, [pc, #116]	; (8001738 <TIM1_UP_IRQHandler+0xf4>)
 80016c2:	f002 fb99 	bl	8003df8 <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <TIM1_UP_IRQHandler+0xf8>)
 80016c8:	2203      	movs	r2, #3
 80016ca:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e023      	b.n	800171c <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 80016d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d8:	4814      	ldr	r0, [pc, #80]	; (800172c <TIM1_UP_IRQHandler+0xe8>)
 80016da:	f000 fcab 	bl	8002034 <HAL_GPIO_ReadPin>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d118      	bne.n	8001716 <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	4a11      	ldr	r2, [pc, #68]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 80016ec:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <TIM1_UP_IRQHandler+0xf0>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dc0f      	bgt.n	800171c <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <TIM1_UP_IRQHandler+0xe4>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <TIM1_UP_IRQHandler+0xf8>)
 8001704:	2202      	movs	r2, #2
 8001706:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800170e:	480a      	ldr	r0, [pc, #40]	; (8001738 <TIM1_UP_IRQHandler+0xf4>)
 8001710:	f002 fb72 	bl	8003df8 <HAL_TIM_Base_Stop_IT>
 8001714:	e002      	b.n	800171c <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <TIM1_UP_IRQHandler+0xec>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800171c:	4806      	ldr	r0, [pc, #24]	; (8001738 <TIM1_UP_IRQHandler+0xf4>)
 800171e:	f002 fb99 	bl	8003e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000014 	.word	0x20000014
 800172c:	40010c00 	.word	0x40010c00
 8001730:	20000520 	.word	0x20000520
 8001734:	20000011 	.word	0x20000011
 8001738:	20000610 	.word	0x20000610
 800173c:	20000529 	.word	0x20000529
 8001740:	40010800 	.word	0x40010800

08001744 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <USART1_IRQHandler+0x10>)
 800174a:	f002 ff63 	bl	8004614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200005cc 	.word	0x200005cc

08001758 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <EXTI15_10_IRQHandler+0x74>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	f083 0301 	eor.w	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d012      	beq.n	8001790 <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <EXTI15_10_IRQHandler+0x78>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00c      	beq.n	8001790 <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <EXTI15_10_IRQHandler+0x7c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <EXTI15_10_IRQHandler+0x80>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d105      	bne.n	8001790 <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001784:	4815      	ldr	r0, [pc, #84]	; (80017dc <EXTI15_10_IRQHandler+0x84>)
 8001786:	f002 fae5 	bl	8003d54 <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <EXTI15_10_IRQHandler+0x80>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <EXTI15_10_IRQHandler+0x78>)
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00c      	beq.n	80017b6 <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <EXTI15_10_IRQHandler+0x7c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <EXTI15_10_IRQHandler+0x80>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d105      	bne.n	80017b6 <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 80017aa:	480c      	ldr	r0, [pc, #48]	; (80017dc <EXTI15_10_IRQHandler+0x84>)
 80017ac:	f002 fad2 	bl	8003d54 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <EXTI15_10_IRQHandler+0x80>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80017b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017ba:	f000 fc83 	bl	80020c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80017be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017c2:	f000 fc7f 	bl	80020c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000528 	.word	0x20000528
 80017d0:	40010400 	.word	0x40010400
 80017d4:	20000010 	.word	0x20000010
 80017d8:	20000014 	.word	0x20000014
 80017dc:	20000610 	.word	0x20000610

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f003 fade 	bl	8004dd0 <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20005000 	.word	0x20005000
 8001840:	00000400 	.word	0x00000400
 8001844:	20000524 	.word	0x20000524
 8001848:	200006c8 	.word	0x200006c8

0800184c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185a:	490d      	ldr	r1, [pc, #52]	; (8001890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001870:	4c0a      	ldr	r4, [pc, #40]	; (800189c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800187e:	f7ff ffe5 	bl	800184c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001882:	f003 faab 	bl	8004ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001886:	f7ff fa75 	bl	8000d74 <main>
  bx lr
 800188a:	4770      	bx	lr
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001894:	08005fd4 	.word	0x08005fd4
  ldr r2, =_sbss
 8001898:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800189c:	200006c4 	.word	0x200006c4

080018a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC1_2_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_Init+0x28>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_Init+0x28>)
 80018ae:	f043 0310 	orr.w	r3, r3, #16
 80018b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f000 f947 	bl	8001b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f000 f808 	bl	80018d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c0:	f7ff fcf6 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40022000 	.word	0x40022000

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x54>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x58>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f95f 	bl	8001bb2 <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00e      	b.n	800191c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d80a      	bhi.n	800191a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001904:	2200      	movs	r2, #0
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800190c:	f000 f927 	bl	8001b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	4a06      	ldr	r2, [pc, #24]	; (800192c <HAL_InitTick+0x5c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000018 	.word	0x20000018
 8001928:	20000020 	.word	0x20000020
 800192c:	2000001c 	.word	0x2000001c

08001930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_IncTick+0x1c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_IncTick+0x20>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a03      	ldr	r2, [pc, #12]	; (8001950 <HAL_IncTick+0x20>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	20000020 	.word	0x20000020
 8001950:	200006b0 	.word	0x200006b0

08001954 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <HAL_GetTick+0x10>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	200006b0 	.word	0x200006b0

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff fff0 	bl	8001954 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_Delay+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffe0 	bl	8001954 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000020 	.word	0x20000020

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0b      	blt.n	8001a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4906      	ldr	r1, [pc, #24]	; (8001a48 <__NVIC_EnableIRQ+0x34>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	; (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b14:	d301      	bcc.n	8001b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00f      	b.n	8001b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <SysTick_Config+0x40>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b22:	210f      	movs	r1, #15
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b28:	f7ff ff90 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <SysTick_Config+0x40>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <SysTick_Config+0x40>)
 8001b34:	2207      	movs	r2, #7
 8001b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	e000e010 	.word	0xe000e010

08001b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff2d 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b70:	f7ff ff42 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f7ff ff90 	bl	8001aa0 <NVIC_EncodePriority>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff5f 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff35 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffa2 	bl	8001b04 <SysTick_Config>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d008      	beq.n	8001bf2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2204      	movs	r2, #4
 8001be4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e020      	b.n	8001c34 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 020e 	bic.w	r2, r2, #14
 8001c00:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0201 	bic.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d005      	beq.n	8001c62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2204      	movs	r2, #4
 8001c5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
 8001c60:	e051      	b.n	8001d06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 020e 	bic.w	r2, r2, #14
 8001c70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a22      	ldr	r2, [pc, #136]	; (8001d10 <HAL_DMA_Abort_IT+0xd0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d029      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0xa0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a20      	ldr	r2, [pc, #128]	; (8001d14 <HAL_DMA_Abort_IT+0xd4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d022      	beq.n	8001cdc <HAL_DMA_Abort_IT+0x9c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_DMA_Abort_IT+0xd8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d01a      	beq.n	8001cd6 <HAL_DMA_Abort_IT+0x96>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <HAL_DMA_Abort_IT+0xdc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d012      	beq.n	8001cd0 <HAL_DMA_Abort_IT+0x90>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <HAL_DMA_Abort_IT+0xe0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00a      	beq.n	8001cca <HAL_DMA_Abort_IT+0x8a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <HAL_DMA_Abort_IT+0xe4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d102      	bne.n	8001cc4 <HAL_DMA_Abort_IT+0x84>
 8001cbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cc2:	e00e      	b.n	8001ce2 <HAL_DMA_Abort_IT+0xa2>
 8001cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc8:	e00b      	b.n	8001ce2 <HAL_DMA_Abort_IT+0xa2>
 8001cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cce:	e008      	b.n	8001ce2 <HAL_DMA_Abort_IT+0xa2>
 8001cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd4:	e005      	b.n	8001ce2 <HAL_DMA_Abort_IT+0xa2>
 8001cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cda:	e002      	b.n	8001ce2 <HAL_DMA_Abort_IT+0xa2>
 8001cdc:	2310      	movs	r3, #16
 8001cde:	e000      	b.n	8001ce2 <HAL_DMA_Abort_IT+0xa2>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <HAL_DMA_Abort_IT+0xe8>)
 8001ce4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
    } 
  }
  return status;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40020008 	.word	0x40020008
 8001d14:	4002001c 	.word	0x4002001c
 8001d18:	40020030 	.word	0x40020030
 8001d1c:	40020044 	.word	0x40020044
 8001d20:	40020058 	.word	0x40020058
 8001d24:	4002006c 	.word	0x4002006c
 8001d28:	40020000 	.word	0x40020000

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b08b      	sub	sp, #44	; 0x2c
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3e:	e169      	b.n	8002014 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d40:	2201      	movs	r2, #1
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	f040 8158 	bne.w	800200e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4a9a      	ldr	r2, [pc, #616]	; (8001fcc <HAL_GPIO_Init+0x2a0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d05e      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d68:	4a98      	ldr	r2, [pc, #608]	; (8001fcc <HAL_GPIO_Init+0x2a0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d875      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d6e:	4a98      	ldr	r2, [pc, #608]	; (8001fd0 <HAL_GPIO_Init+0x2a4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d058      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d74:	4a96      	ldr	r2, [pc, #600]	; (8001fd0 <HAL_GPIO_Init+0x2a4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d86f      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d7a:	4a96      	ldr	r2, [pc, #600]	; (8001fd4 <HAL_GPIO_Init+0x2a8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d052      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d80:	4a94      	ldr	r2, [pc, #592]	; (8001fd4 <HAL_GPIO_Init+0x2a8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d869      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d86:	4a94      	ldr	r2, [pc, #592]	; (8001fd8 <HAL_GPIO_Init+0x2ac>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d04c      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d8c:	4a92      	ldr	r2, [pc, #584]	; (8001fd8 <HAL_GPIO_Init+0x2ac>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d863      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d92:	4a92      	ldr	r2, [pc, #584]	; (8001fdc <HAL_GPIO_Init+0x2b0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d046      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d98:	4a90      	ldr	r2, [pc, #576]	; (8001fdc <HAL_GPIO_Init+0x2b0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d85d      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d9e:	2b12      	cmp	r3, #18
 8001da0:	d82a      	bhi.n	8001df8 <HAL_GPIO_Init+0xcc>
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d859      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001da6:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <HAL_GPIO_Init+0x80>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001e27 	.word	0x08001e27
 8001db0:	08001e01 	.word	0x08001e01
 8001db4:	08001e13 	.word	0x08001e13
 8001db8:	08001e55 	.word	0x08001e55
 8001dbc:	08001e5b 	.word	0x08001e5b
 8001dc0:	08001e5b 	.word	0x08001e5b
 8001dc4:	08001e5b 	.word	0x08001e5b
 8001dc8:	08001e5b 	.word	0x08001e5b
 8001dcc:	08001e5b 	.word	0x08001e5b
 8001dd0:	08001e5b 	.word	0x08001e5b
 8001dd4:	08001e5b 	.word	0x08001e5b
 8001dd8:	08001e5b 	.word	0x08001e5b
 8001ddc:	08001e5b 	.word	0x08001e5b
 8001de0:	08001e5b 	.word	0x08001e5b
 8001de4:	08001e5b 	.word	0x08001e5b
 8001de8:	08001e5b 	.word	0x08001e5b
 8001dec:	08001e5b 	.word	0x08001e5b
 8001df0:	08001e09 	.word	0x08001e09
 8001df4:	08001e1d 	.word	0x08001e1d
 8001df8:	4a79      	ldr	r2, [pc, #484]	; (8001fe0 <HAL_GPIO_Init+0x2b4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dfe:	e02c      	b.n	8001e5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e029      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e024      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	3308      	adds	r3, #8
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e01f      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	330c      	adds	r3, #12
 8001e22:	623b      	str	r3, [r7, #32]
          break;
 8001e24:	e01a      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d102      	bne.n	8001e34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	623b      	str	r3, [r7, #32]
          break;
 8001e32:	e013      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d105      	bne.n	8001e48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e3c:	2308      	movs	r3, #8
 8001e3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	611a      	str	r2, [r3, #16]
          break;
 8001e46:	e009      	b.n	8001e5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	615a      	str	r2, [r3, #20]
          break;
 8001e52:	e003      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
          break;
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          break;
 8001e5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2bff      	cmp	r3, #255	; 0xff
 8001e60:	d801      	bhi.n	8001e66 <HAL_GPIO_Init+0x13a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	e001      	b.n	8001e6a <HAL_GPIO_Init+0x13e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2bff      	cmp	r3, #255	; 0xff
 8001e70:	d802      	bhi.n	8001e78 <HAL_GPIO_Init+0x14c>
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x152>
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	3b08      	subs	r3, #8
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	210f      	movs	r1, #15
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	401a      	ands	r2, r3
 8001e90:	6a39      	ldr	r1, [r7, #32]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80b1 	beq.w	800200e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eac:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <HAL_GPIO_Init+0x2b8>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a4c      	ldr	r2, [pc, #304]	; (8001fe4 <HAL_GPIO_Init+0x2b8>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <HAL_GPIO_Init+0x2b8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ec4:	4a48      	ldr	r2, [pc, #288]	; (8001fe8 <HAL_GPIO_Init+0x2bc>)
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a40      	ldr	r2, [pc, #256]	; (8001fec <HAL_GPIO_Init+0x2c0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_GPIO_Init+0x1ec>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3f      	ldr	r2, [pc, #252]	; (8001ff0 <HAL_GPIO_Init+0x2c4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <HAL_GPIO_Init+0x1e8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3e      	ldr	r2, [pc, #248]	; (8001ff4 <HAL_GPIO_Init+0x2c8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x1e4>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3d      	ldr	r2, [pc, #244]	; (8001ff8 <HAL_GPIO_Init+0x2cc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_GPIO_Init+0x1e0>
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e006      	b.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	e004      	b.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e002      	b.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	f002 0203 	and.w	r2, r2, #3
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	4093      	lsls	r3, r2
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f2a:	492f      	ldr	r1, [pc, #188]	; (8001fe8 <HAL_GPIO_Init+0x2bc>)
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f44:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	492c      	ldr	r1, [pc, #176]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4928      	ldr	r1, [pc, #160]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4922      	ldr	r1, [pc, #136]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	491e      	ldr	r1, [pc, #120]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	4918      	ldr	r1, [pc, #96]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4914      	ldr	r1, [pc, #80]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d021      	beq.n	8002000 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	490e      	ldr	r1, [pc, #56]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
 8001fc8:	e021      	b.n	800200e <HAL_GPIO_Init+0x2e2>
 8001fca:	bf00      	nop
 8001fcc:	10320000 	.word	0x10320000
 8001fd0:	10310000 	.word	0x10310000
 8001fd4:	10220000 	.word	0x10220000
 8001fd8:	10210000 	.word	0x10210000
 8001fdc:	10120000 	.word	0x10120000
 8001fe0:	10110000 	.word	0x10110000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40010800 	.word	0x40010800
 8001ff0:	40010c00 	.word	0x40010c00
 8001ff4:	40011000 	.word	0x40011000
 8001ff8:	40011400 	.word	0x40011400
 8001ffc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_GPIO_Init+0x304>)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	43db      	mvns	r3, r3
 8002008:	4909      	ldr	r1, [pc, #36]	; (8002030 <HAL_GPIO_Init+0x304>)
 800200a:	4013      	ands	r3, r2
 800200c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	3301      	adds	r3, #1
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	f47f ae8e 	bne.w	8001d40 <HAL_GPIO_Init+0x14>
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	372c      	adds	r7, #44	; 0x2c
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	40010400 	.word	0x40010400

08002034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e001      	b.n	8002056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	807b      	strh	r3, [r7, #2]
 800206e:	4613      	mov	r3, r2
 8002070:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002072:	787b      	ldrb	r3, [r7, #1]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002078:	887a      	ldrh	r2, [r7, #2]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800207e:	e003      	b.n	8002088 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	041a      	lsls	r2, r3, #16
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	611a      	str	r2, [r3, #16]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002092:	b480      	push	{r7}
 8002094:	b085      	sub	sp, #20
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020a4:	887a      	ldrh	r2, [r7, #2]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	041a      	lsls	r2, r3, #16
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	400b      	ands	r3, r1
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	611a      	str	r2, [r3, #16]
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f894 	bl	8001210 <HAL_GPIO_EXTI_Callback>
  }
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e12b      	b.n	800235e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff f8fa 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2224      	movs	r2, #36	; 0x24
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002146:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002156:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002158:	f000 fffa 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 800215c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4a81      	ldr	r2, [pc, #516]	; (8002368 <HAL_I2C_Init+0x274>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d807      	bhi.n	8002178 <HAL_I2C_Init+0x84>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4a80      	ldr	r2, [pc, #512]	; (800236c <HAL_I2C_Init+0x278>)
 800216c:	4293      	cmp	r3, r2
 800216e:	bf94      	ite	ls
 8002170:	2301      	movls	r3, #1
 8002172:	2300      	movhi	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	e006      	b.n	8002186 <HAL_I2C_Init+0x92>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4a7d      	ldr	r2, [pc, #500]	; (8002370 <HAL_I2C_Init+0x27c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	bf94      	ite	ls
 8002180:	2301      	movls	r3, #1
 8002182:	2300      	movhi	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0e7      	b.n	800235e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4a78      	ldr	r2, [pc, #480]	; (8002374 <HAL_I2C_Init+0x280>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0c9b      	lsrs	r3, r3, #18
 8002198:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a6a      	ldr	r2, [pc, #424]	; (8002368 <HAL_I2C_Init+0x274>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d802      	bhi.n	80021c8 <HAL_I2C_Init+0xd4>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	3301      	adds	r3, #1
 80021c6:	e009      	b.n	80021dc <HAL_I2C_Init+0xe8>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	4a69      	ldr	r2, [pc, #420]	; (8002378 <HAL_I2C_Init+0x284>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	099b      	lsrs	r3, r3, #6
 80021da:	3301      	adds	r3, #1
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	430b      	orrs	r3, r1
 80021e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	495c      	ldr	r1, [pc, #368]	; (8002368 <HAL_I2C_Init+0x274>)
 80021f8:	428b      	cmp	r3, r1
 80021fa:	d819      	bhi.n	8002230 <HAL_I2C_Init+0x13c>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1e59      	subs	r1, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fbb1 f3f3 	udiv	r3, r1, r3
 800220a:	1c59      	adds	r1, r3, #1
 800220c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002210:	400b      	ands	r3, r1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_I2C_Init+0x138>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1e59      	subs	r1, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fbb1 f3f3 	udiv	r3, r1, r3
 8002224:	3301      	adds	r3, #1
 8002226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222a:	e051      	b.n	80022d0 <HAL_I2C_Init+0x1dc>
 800222c:	2304      	movs	r3, #4
 800222e:	e04f      	b.n	80022d0 <HAL_I2C_Init+0x1dc>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d111      	bne.n	800225c <HAL_I2C_Init+0x168>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1e58      	subs	r0, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	440b      	add	r3, r1
 8002246:	fbb0 f3f3 	udiv	r3, r0, r3
 800224a:	3301      	adds	r3, #1
 800224c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	e012      	b.n	8002282 <HAL_I2C_Init+0x18e>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1e58      	subs	r0, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	0099      	lsls	r1, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002272:	3301      	adds	r3, #1
 8002274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Init+0x196>
 8002286:	2301      	movs	r3, #1
 8002288:	e022      	b.n	80022d0 <HAL_I2C_Init+0x1dc>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10e      	bne.n	80022b0 <HAL_I2C_Init+0x1bc>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1e58      	subs	r0, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6859      	ldr	r1, [r3, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	440b      	add	r3, r1
 80022a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ae:	e00f      	b.n	80022d0 <HAL_I2C_Init+0x1dc>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1e58      	subs	r0, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	0099      	lsls	r1, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	6809      	ldr	r1, [r1, #0]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69da      	ldr	r2, [r3, #28]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6911      	ldr	r1, [r2, #16]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68d2      	ldr	r2, [r2, #12]
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	430b      	orrs	r3, r1
 8002312:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	000186a0 	.word	0x000186a0
 800236c:	001e847f 	.word	0x001e847f
 8002370:	003d08ff 	.word	0x003d08ff
 8002374:	431bde83 	.word	0x431bde83
 8002378:	10624dd3 	.word	0x10624dd3

0800237c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4603      	mov	r3, r0
 800238c:	817b      	strh	r3, [r7, #10]
 800238e:	460b      	mov	r3, r1
 8002390:	813b      	strh	r3, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002396:	f7ff fadd 	bl	8001954 <HAL_GetTick>
 800239a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	f040 80d9 	bne.w	800255c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2319      	movs	r3, #25
 80023b0:	2201      	movs	r2, #1
 80023b2:	496d      	ldr	r1, [pc, #436]	; (8002568 <HAL_I2C_Mem_Write+0x1ec>)
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f971 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
 80023c2:	e0cc      	b.n	800255e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_I2C_Mem_Write+0x56>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e0c5      	b.n	800255e <HAL_I2C_Mem_Write+0x1e2>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d007      	beq.n	80023f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002406:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2221      	movs	r2, #33	; 0x21
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2240      	movs	r2, #64	; 0x40
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a3a      	ldr	r2, [r7, #32]
 8002422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002428:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a4d      	ldr	r2, [pc, #308]	; (800256c <HAL_I2C_Mem_Write+0x1f0>)
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800243a:	88f8      	ldrh	r0, [r7, #6]
 800243c:	893a      	ldrh	r2, [r7, #8]
 800243e:	8979      	ldrh	r1, [r7, #10]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	4603      	mov	r3, r0
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f890 	bl	8002570 <I2C_RequestMemoryWrite>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d052      	beq.n	80024fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e081      	b.n	800255e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f9f2 	bl	8002848 <I2C_WaitOnTXEFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00d      	beq.n	8002486 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b04      	cmp	r3, #4
 8002470:	d107      	bne.n	8002482 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002480:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e06b      	b.n	800255e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	781a      	ldrb	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d11b      	bne.n	80024fc <HAL_I2C_Mem_Write+0x180>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d017      	beq.n	80024fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1aa      	bne.n	800245a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f9de 	bl	80028ca <I2C_WaitOnBTFFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00d      	beq.n	8002530 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	2b04      	cmp	r3, #4
 800251a:	d107      	bne.n	800252c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e016      	b.n	800255e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
  }
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	00100002 	.word	0x00100002
 800256c:	ffff0000 	.word	0xffff0000

08002570 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	4608      	mov	r0, r1
 800257a:	4611      	mov	r1, r2
 800257c:	461a      	mov	r2, r3
 800257e:	4603      	mov	r3, r0
 8002580:	817b      	strh	r3, [r7, #10]
 8002582:	460b      	mov	r3, r1
 8002584:	813b      	strh	r3, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002598:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f878 	bl	800269c <I2C_WaitOnFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00d      	beq.n	80025ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c0:	d103      	bne.n	80025ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e05f      	b.n	800268e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ce:	897b      	ldrh	r3, [r7, #10]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	6a3a      	ldr	r2, [r7, #32]
 80025e2:	492d      	ldr	r1, [pc, #180]	; (8002698 <I2C_RequestMemoryWrite+0x128>)
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f8b0 	bl	800274a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e04c      	b.n	800268e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260c:	6a39      	ldr	r1, [r7, #32]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f91a 	bl	8002848 <I2C_WaitOnTXEFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	2b04      	cmp	r3, #4
 8002620:	d107      	bne.n	8002632 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002630:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e02b      	b.n	800268e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800263c:	893b      	ldrh	r3, [r7, #8]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	611a      	str	r2, [r3, #16]
 8002646:	e021      	b.n	800268c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002648:	893b      	ldrh	r3, [r7, #8]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	b29b      	uxth	r3, r3
 800264e:	b2da      	uxtb	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	6a39      	ldr	r1, [r7, #32]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f8f4 	bl	8002848 <I2C_WaitOnTXEFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b04      	cmp	r3, #4
 800266c:	d107      	bne.n	800267e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e005      	b.n	800268e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002682:	893b      	ldrh	r3, [r7, #8]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	00010002 	.word	0x00010002

0800269c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ac:	e025      	b.n	80026fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b4:	d021      	beq.n	80026fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b6:	f7ff f94d 	bl	8001954 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d302      	bcc.n	80026cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d116      	bne.n	80026fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f043 0220 	orr.w	r2, r3, #32
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e023      	b.n	8002742 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	0c1b      	lsrs	r3, r3, #16
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d10d      	bne.n	8002720 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4013      	ands	r3, r2
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf0c      	ite	eq
 8002716:	2301      	moveq	r3, #1
 8002718:	2300      	movne	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	e00c      	b.n	800273a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4013      	ands	r3, r2
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	bf0c      	ite	eq
 8002732:	2301      	moveq	r3, #1
 8002734:	2300      	movne	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	429a      	cmp	r2, r3
 800273e:	d0b6      	beq.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002758:	e051      	b.n	80027fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002768:	d123      	bne.n	80027b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002778:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002782:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f043 0204 	orr.w	r2, r3, #4
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e046      	b.n	8002840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b8:	d021      	beq.n	80027fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ba:	f7ff f8cb 	bl	8001954 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d302      	bcc.n	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d116      	bne.n	80027fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f043 0220 	orr.w	r2, r3, #32
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e020      	b.n	8002840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10c      	bne.n	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4013      	ands	r3, r2
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf14      	ite	ne
 800281a:	2301      	movne	r3, #1
 800281c:	2300      	moveq	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	e00b      	b.n	800283a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	43da      	mvns	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d18d      	bne.n	800275a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002854:	e02d      	b.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f878 	bl	800294c <I2C_IsAcknowledgeFailed>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e02d      	b.n	80028c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800286c:	d021      	beq.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286e:	f7ff f871 	bl	8001954 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	429a      	cmp	r2, r3
 800287c:	d302      	bcc.n	8002884 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d116      	bne.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f043 0220 	orr.w	r2, r3, #32
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e007      	b.n	80028c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028bc:	2b80      	cmp	r3, #128	; 0x80
 80028be:	d1ca      	bne.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028d6:	e02d      	b.n	8002934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f837 	bl	800294c <I2C_IsAcknowledgeFailed>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e02d      	b.n	8002944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ee:	d021      	beq.n	8002934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f0:	f7ff f830 	bl	8001954 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d302      	bcc.n	8002906 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d116      	bne.n	8002934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e007      	b.n	8002944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b04      	cmp	r3, #4
 8002940:	d1ca      	bne.n	80028d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002962:	d11b      	bne.n	800299c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800296c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f043 0204 	orr.w	r2, r3, #4
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e26c      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8087 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c8:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d00c      	beq.n	80029ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029d4:	4b8f      	ldr	r3, [pc, #572]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d112      	bne.n	8002a06 <HAL_RCC_OscConfig+0x5e>
 80029e0:	4b8c      	ldr	r3, [pc, #560]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ec:	d10b      	bne.n	8002a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ee:	4b89      	ldr	r3, [pc, #548]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d06c      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x12c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d168      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e246      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x76>
 8002a10:	4b80      	ldr	r3, [pc, #512]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a7f      	ldr	r2, [pc, #508]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	e02e      	b.n	8002a7c <HAL_RCC_OscConfig+0xd4>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x98>
 8002a26:	4b7b      	ldr	r3, [pc, #492]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a7a      	ldr	r2, [pc, #488]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b78      	ldr	r3, [pc, #480]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a77      	ldr	r2, [pc, #476]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e01d      	b.n	8002a7c <HAL_RCC_OscConfig+0xd4>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0xbc>
 8002a4a:	4b72      	ldr	r3, [pc, #456]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a71      	ldr	r2, [pc, #452]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a6e      	ldr	r2, [pc, #440]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0xd4>
 8002a64:	4b6b      	ldr	r3, [pc, #428]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a6a      	ldr	r2, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a67      	ldr	r2, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d013      	beq.n	8002aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe ff66 	bl	8001954 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe ff62 	bl	8001954 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1fa      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b5d      	ldr	r3, [pc, #372]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0xe4>
 8002aaa:	e014      	b.n	8002ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe ff52 	bl	8001954 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fe ff4e 	bl	8001954 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1e6      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x10c>
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d063      	beq.n	8002baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae2:	4b4c      	ldr	r3, [pc, #304]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aee:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d11c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x18c>
 8002afa:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_RCC_OscConfig+0x176>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1ba      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4939      	ldr	r1, [pc, #228]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	e03a      	b.n	8002baa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3c:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe ff07 	bl	8001954 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7fe ff03 	bl	8001954 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e19b      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4927      	ldr	r1, [pc, #156]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
 8002b7c:	e015      	b.n	8002baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7e:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe fee6 	bl	8001954 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7fe fee2 	bl	8001954 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e17a      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d03a      	beq.n	8002c2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d019      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fec6 	bl	8001954 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7fe fec2 	bl	8001954 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e15a      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bea:	2001      	movs	r0, #1
 8002bec:	f000 fad8 	bl	80031a0 <RCC_Delay>
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf8:	f7fe feac 	bl	8001954 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfe:	e00f      	b.n	8002c20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c00:	f7fe fea8 	bl	8001954 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d908      	bls.n	8002c20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e140      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
 8002c18:	42420000 	.word	0x42420000
 8002c1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	4b9e      	ldr	r3, [pc, #632]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e9      	bne.n	8002c00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80a6 	beq.w	8002d86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3e:	4b97      	ldr	r3, [pc, #604]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10d      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	4b94      	ldr	r3, [pc, #592]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	4a93      	ldr	r2, [pc, #588]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	61d3      	str	r3, [r2, #28]
 8002c56:	4b91      	ldr	r3, [pc, #580]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b8e      	ldr	r3, [pc, #568]	; (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d118      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c72:	4b8b      	ldr	r3, [pc, #556]	; (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a8a      	ldr	r2, [pc, #552]	; (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7e:	f7fe fe69 	bl	8001954 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c86:	f7fe fe65 	bl	8001954 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b64      	cmp	r3, #100	; 0x64
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0fd      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b81      	ldr	r3, [pc, #516]	; (8002ea0 <HAL_RCC_OscConfig+0x4f8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x312>
 8002cac:	4b7b      	ldr	r3, [pc, #492]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4a7a      	ldr	r2, [pc, #488]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6213      	str	r3, [r2, #32]
 8002cb8:	e02d      	b.n	8002d16 <HAL_RCC_OscConfig+0x36e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x334>
 8002cc2:	4b76      	ldr	r3, [pc, #472]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4a75      	ldr	r2, [pc, #468]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	6213      	str	r3, [r2, #32]
 8002cce:	4b73      	ldr	r3, [pc, #460]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4a72      	ldr	r2, [pc, #456]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	f023 0304 	bic.w	r3, r3, #4
 8002cd8:	6213      	str	r3, [r2, #32]
 8002cda:	e01c      	b.n	8002d16 <HAL_RCC_OscConfig+0x36e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCC_OscConfig+0x356>
 8002ce4:	4b6d      	ldr	r3, [pc, #436]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4a6c      	ldr	r2, [pc, #432]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002cea:	f043 0304 	orr.w	r3, r3, #4
 8002cee:	6213      	str	r3, [r2, #32]
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4a69      	ldr	r2, [pc, #420]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6213      	str	r3, [r2, #32]
 8002cfc:	e00b      	b.n	8002d16 <HAL_RCC_OscConfig+0x36e>
 8002cfe:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a66      	ldr	r2, [pc, #408]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6213      	str	r3, [r2, #32]
 8002d0a:	4b64      	ldr	r3, [pc, #400]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4a63      	ldr	r2, [pc, #396]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d015      	beq.n	8002d4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fe19 	bl	8001954 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fe fe15 	bl	8001954 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e0ab      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	4b57      	ldr	r3, [pc, #348]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ee      	beq.n	8002d26 <HAL_RCC_OscConfig+0x37e>
 8002d48:	e014      	b.n	8002d74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7fe fe03 	bl	8001954 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d52:	f7fe fdff 	bl	8001954 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e095      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d68:	4b4c      	ldr	r3, [pc, #304]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ee      	bne.n	8002d52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d105      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7a:	4b48      	ldr	r3, [pc, #288]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	4a47      	ldr	r2, [pc, #284]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8081 	beq.w	8002e92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d90:	4b42      	ldr	r3, [pc, #264]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 030c 	and.w	r3, r3, #12
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d061      	beq.n	8002e60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d146      	bne.n	8002e32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da4:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <HAL_RCC_OscConfig+0x4fc>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fe fdd3 	bl	8001954 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fe fdcf 	bl	8001954 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e067      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc4:	4b35      	ldr	r3, [pc, #212]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd8:	d108      	bne.n	8002dec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dda:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	492d      	ldr	r1, [pc, #180]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a19      	ldr	r1, [r3, #32]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	4927      	ldr	r1, [pc, #156]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_RCC_OscConfig+0x4fc>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fda3 	bl	8001954 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fe fd9f 	bl	8001954 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e037      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x46a>
 8002e30:	e02f      	b.n	8002e92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <HAL_RCC_OscConfig+0x4fc>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe fd8c 	bl	8001954 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe fd88 	bl	8001954 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e020      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x498>
 8002e5e:	e018      	b.n	8002e92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e013      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_OscConfig+0x4f4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	42420060 	.word	0x42420060

08002ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0d0      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b6a      	ldr	r3, [pc, #424]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d910      	bls.n	8002eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b67      	ldr	r3, [pc, #412]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 0207 	bic.w	r2, r3, #7
 8002ed2:	4965      	ldr	r1, [pc, #404]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0b8      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f04:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a58      	ldr	r2, [pc, #352]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f1c:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a52      	ldr	r2, [pc, #328]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b50      	ldr	r3, [pc, #320]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	494d      	ldr	r1, [pc, #308]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d040      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d115      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e07f      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f66:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e073      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e06b      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4936      	ldr	r1, [pc, #216]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f98:	f7fe fcdc 	bl	8001954 <HAL_GetTick>
 8002f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa0:	f7fe fcd8 	bl	8001954 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e053      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 020c 	and.w	r2, r3, #12
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d1eb      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d210      	bcs.n	8002ff8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 0207 	bic.w	r2, r3, #7
 8002fde:	4922      	ldr	r1, [pc, #136]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e032      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4916      	ldr	r1, [pc, #88]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	490e      	ldr	r1, [pc, #56]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003036:	f000 f821 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800303a:	4602      	mov	r2, r0
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	490a      	ldr	r1, [pc, #40]	; (8003070 <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	5ccb      	ldrb	r3, [r1, r3]
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	4a09      	ldr	r2, [pc, #36]	; (8003074 <HAL_RCC_ClockConfig+0x1cc>)
 8003050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1d0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fc3a 	bl	80018d0 <HAL_InitTick>

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40022000 	.word	0x40022000
 800306c:	40021000 	.word	0x40021000
 8003070:	08005f5c 	.word	0x08005f5c
 8003074:	20000018 	.word	0x20000018
 8003078:	2000001c 	.word	0x2000001c

0800307c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	b490      	push	{r4, r7}
 800307e:	b08a      	sub	sp, #40	; 0x28
 8003080:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003082:	4b2a      	ldr	r3, [pc, #168]	; (800312c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003084:	1d3c      	adds	r4, r7, #4
 8003086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800308c:	f240 2301 	movw	r3, #513	; 0x201
 8003090:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030a6:	4b22      	ldr	r3, [pc, #136]	; (8003130 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d002      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x40>
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x46>
 80030ba:	e02d      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030be:	623b      	str	r3, [r7, #32]
      break;
 80030c0:	e02d      	b.n	800311e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	0c9b      	lsrs	r3, r3, #18
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030ce:	4413      	add	r3, r2
 80030d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	0c5b      	lsrs	r3, r3, #17
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030ee:	4413      	add	r3, r2
 80030f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	4a0e      	ldr	r2, [pc, #56]	; (8003134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030fa:	fb02 f203 	mul.w	r2, r2, r3
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	e004      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <HAL_RCC_GetSysClockFreq+0xbc>)
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	623b      	str	r3, [r7, #32]
      break;
 8003116:	e002      	b.n	800311e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_RCC_GetSysClockFreq+0xb8>)
 800311a:	623b      	str	r3, [r7, #32]
      break;
 800311c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800311e:	6a3b      	ldr	r3, [r7, #32]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3728      	adds	r7, #40	; 0x28
 8003124:	46bd      	mov	sp, r7
 8003126:	bc90      	pop	{r4, r7}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	080057e0 	.word	0x080057e0
 8003130:	40021000 	.word	0x40021000
 8003134:	007a1200 	.word	0x007a1200
 8003138:	003d0900 	.word	0x003d0900

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b02      	ldr	r3, [pc, #8]	; (800314c <HAL_RCC_GetHCLKFreq+0x10>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	20000018 	.word	0x20000018

08003150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003154:	f7ff fff2 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	; (8003174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	08005f6c 	.word	0x08005f6c

08003178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800317c:	f7ff ffde 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	0adb      	lsrs	r3, r3, #11
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4903      	ldr	r1, [pc, #12]	; (800319c <HAL_RCC_GetPCLK2Freq+0x24>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	08005f6c 	.word	0x08005f6c

080031a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <RCC_Delay+0x34>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <RCC_Delay+0x38>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0a5b      	lsrs	r3, r3, #9
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031bc:	bf00      	nop
  }
  while (Delay --);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	60fa      	str	r2, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f9      	bne.n	80031bc <RCC_Delay+0x1c>
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	20000018 	.word	0x20000018
 80031d8:	10624dd3 	.word	0x10624dd3

080031dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e076      	b.n	80032dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031fe:	d009      	beq.n	8003214 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	61da      	str	r2, [r3, #28]
 8003206:	e005      	b.n	8003214 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe f8ae 	bl	8001390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003298:	ea42 0103 	orr.w	r1, r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	0c1a      	lsrs	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f002 0204 	and.w	r2, r2, #4
 80032ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_SPI_Transmit+0x22>
 8003302:	2302      	movs	r3, #2
 8003304:	e126      	b.n	8003554 <HAL_SPI_Transmit+0x270>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800330e:	f7fe fb21 	bl	8001954 <HAL_GetTick>
 8003312:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d002      	beq.n	800332a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003324:	2302      	movs	r3, #2
 8003326:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003328:	e10b      	b.n	8003542 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_SPI_Transmit+0x52>
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	77fb      	strb	r3, [r7, #31]
    goto error;
 800333a:	e102      	b.n	8003542 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2203      	movs	r2, #3
 8003340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	88fa      	ldrh	r2, [r7, #6]
 8003354:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	88fa      	ldrh	r2, [r7, #6]
 800335a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003382:	d10f      	bne.n	80033a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003392:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d007      	beq.n	80033c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ca:	d14b      	bne.n	8003464 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_SPI_Transmit+0xf6>
 80033d4:	8afb      	ldrh	r3, [r7, #22]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d13e      	bne.n	8003458 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	881a      	ldrh	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	1c9a      	adds	r2, r3, #2
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033fe:	e02b      	b.n	8003458 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b02      	cmp	r3, #2
 800340c:	d112      	bne.n	8003434 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	881a      	ldrh	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	1c9a      	adds	r2, r3, #2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	86da      	strh	r2, [r3, #54]	; 0x36
 8003432:	e011      	b.n	8003458 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003434:	f7fe fa8e 	bl	8001954 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d803      	bhi.n	800344c <HAL_SPI_Transmit+0x168>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800344a:	d102      	bne.n	8003452 <HAL_SPI_Transmit+0x16e>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003456:	e074      	b.n	8003542 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ce      	bne.n	8003400 <HAL_SPI_Transmit+0x11c>
 8003462:	e04c      	b.n	80034fe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_SPI_Transmit+0x18e>
 800346c:	8afb      	ldrh	r3, [r7, #22]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d140      	bne.n	80034f4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	330c      	adds	r3, #12
 800347c:	7812      	ldrb	r2, [r2, #0]
 800347e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003498:	e02c      	b.n	80034f4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d113      	bne.n	80034d0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	330c      	adds	r3, #12
 80034b2:	7812      	ldrb	r2, [r2, #0]
 80034b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80034ce:	e011      	b.n	80034f4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034d0:	f7fe fa40 	bl	8001954 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d803      	bhi.n	80034e8 <HAL_SPI_Transmit+0x204>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e6:	d102      	bne.n	80034ee <HAL_SPI_Transmit+0x20a>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034f2:	e026      	b.n	8003542 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1cd      	bne.n	800349a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fbb8 	bl	8003c78 <SPI_EndRxTxTransaction>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800351c:	2300      	movs	r3, #0
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	77fb      	strb	r3, [r7, #31]
 800353e:	e000      	b.n	8003542 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003540:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003552:	7ffb      	ldrb	r3, [r7, #31]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003578:	d112      	bne.n	80035a0 <HAL_SPI_Receive+0x44>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10e      	bne.n	80035a0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2204      	movs	r2, #4
 8003586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800358a:	88fa      	ldrh	r2, [r7, #6]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f8f1 	bl	800377e <HAL_SPI_TransmitReceive>
 800359c:	4603      	mov	r3, r0
 800359e:	e0ea      	b.n	8003776 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_SPI_Receive+0x52>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e0e3      	b.n	8003776 <HAL_SPI_Receive+0x21a>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035b6:	f7fe f9cd 	bl	8001954 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d002      	beq.n	80035ce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
 80035ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035cc:	e0ca      	b.n	8003764 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_SPI_Receive+0x7e>
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035de:	e0c1      	b.n	8003764 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2204      	movs	r2, #4
 80035e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	88fa      	ldrh	r2, [r7, #6]
 80035fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003626:	d10f      	bne.n	8003648 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003636:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003646:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d007      	beq.n	8003666 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d162      	bne.n	8003734 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800366e:	e02e      	b.n	80036ce <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d115      	bne.n	80036aa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f103 020c 	add.w	r2, r3, #12
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	7812      	ldrb	r2, [r2, #0]
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036a8:	e011      	b.n	80036ce <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036aa:	f7fe f953 	bl	8001954 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d803      	bhi.n	80036c2 <HAL_SPI_Receive+0x166>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c0:	d102      	bne.n	80036c8 <HAL_SPI_Receive+0x16c>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036cc:	e04a      	b.n	8003764 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1cb      	bne.n	8003670 <HAL_SPI_Receive+0x114>
 80036d8:	e031      	b.n	800373e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d113      	bne.n	8003710 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	b292      	uxth	r2, r2
 80036f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	1c9a      	adds	r2, r3, #2
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800370e:	e011      	b.n	8003734 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003710:	f7fe f920 	bl	8001954 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d803      	bhi.n	8003728 <HAL_SPI_Receive+0x1cc>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003726:	d102      	bne.n	800372e <HAL_SPI_Receive+0x1d2>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003732:	e017      	b.n	8003764 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1cd      	bne.n	80036da <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	6839      	ldr	r1, [r7, #0]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fa46 	bl	8003bd4 <SPI_EndRxTransaction>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	75fb      	strb	r3, [r7, #23]
 8003760:	e000      	b.n	8003764 <HAL_SPI_Receive+0x208>
  }

error :
 8003762:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003774:	7dfb      	ldrb	r3, [r7, #23]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b08c      	sub	sp, #48	; 0x30
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800378c:	2301      	movs	r3, #1
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x26>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e18a      	b.n	8003aba <HAL_SPI_TransmitReceive+0x33c>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ac:	f7fe f8d2 	bl	8001954 <HAL_GetTick>
 80037b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037c2:	887b      	ldrh	r3, [r7, #2]
 80037c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d00f      	beq.n	80037ee <HAL_SPI_TransmitReceive+0x70>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037d4:	d107      	bne.n	80037e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d103      	bne.n	80037e6 <HAL_SPI_TransmitReceive+0x68>
 80037de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d003      	beq.n	80037ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
 80037e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037ec:	e15b      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_SPI_TransmitReceive+0x82>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_SPI_TransmitReceive+0x82>
 80037fa:	887b      	ldrh	r3, [r7, #2]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d103      	bne.n	8003808 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003806:	e14e      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b04      	cmp	r3, #4
 8003812:	d003      	beq.n	800381c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2205      	movs	r2, #5
 8003818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	887a      	ldrh	r2, [r7, #2]
 800382c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	887a      	ldrh	r2, [r7, #2]
 8003832:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	887a      	ldrh	r2, [r7, #2]
 800383e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d007      	beq.n	8003870 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800386e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003878:	d178      	bne.n	800396c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_SPI_TransmitReceive+0x10a>
 8003882:	8b7b      	ldrh	r3, [r7, #26]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d166      	bne.n	8003956 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	881a      	ldrh	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	1c9a      	adds	r2, r3, #2
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ac:	e053      	b.n	8003956 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d11b      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x176>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x176>
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d113      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	881a      	ldrh	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	1c9a      	adds	r2, r3, #2
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d119      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x1b8>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d014      	beq.n	8003936 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	b292      	uxth	r2, r2
 8003918:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	1c9a      	adds	r2, r3, #2
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003932:	2301      	movs	r3, #1
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003936:	f7fe f80d 	bl	8001954 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003942:	429a      	cmp	r2, r3
 8003944:	d807      	bhi.n	8003956 <HAL_SPI_TransmitReceive+0x1d8>
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800394c:	d003      	beq.n	8003956 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003954:	e0a7      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1a6      	bne.n	80038ae <HAL_SPI_TransmitReceive+0x130>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1a1      	bne.n	80038ae <HAL_SPI_TransmitReceive+0x130>
 800396a:	e07c      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_SPI_TransmitReceive+0x1fc>
 8003974:	8b7b      	ldrh	r3, [r7, #26]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d16b      	bne.n	8003a52 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	330c      	adds	r3, #12
 8003984:	7812      	ldrb	r2, [r2, #0]
 8003986:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a0:	e057      	b.n	8003a52 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d11c      	bne.n	80039ea <HAL_SPI_TransmitReceive+0x26c>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d017      	beq.n	80039ea <HAL_SPI_TransmitReceive+0x26c>
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d114      	bne.n	80039ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	7812      	ldrb	r2, [r2, #0]
 80039cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d119      	bne.n	8003a2c <HAL_SPI_TransmitReceive+0x2ae>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d014      	beq.n	8003a2c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a2c:	f7fd ff92 	bl	8001954 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d803      	bhi.n	8003a44 <HAL_SPI_TransmitReceive+0x2c6>
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a42:	d102      	bne.n	8003a4a <HAL_SPI_TransmitReceive+0x2cc>
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a50:	e029      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1a2      	bne.n	80039a2 <HAL_SPI_TransmitReceive+0x224>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d19d      	bne.n	80039a2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f904 	bl	8003c78 <SPI_EndRxTxTransaction>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a82:	e010      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10b      	bne.n	8003aa4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	e000      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003aa4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ab6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3730      	adds	r7, #48	; 0x30
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ad4:	f7fd ff3e 	bl	8001954 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ae4:	f7fd ff36 	bl	8001954 <HAL_GetTick>
 8003ae8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aea:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	015b      	lsls	r3, r3, #5
 8003af0:	0d1b      	lsrs	r3, r3, #20
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	fb02 f303 	mul.w	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003afa:	e054      	b.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b02:	d050      	beq.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b04:	f7fd ff26 	bl	8001954 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d902      	bls.n	8003b1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d13d      	bne.n	8003b96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b32:	d111      	bne.n	8003b58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3c:	d004      	beq.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b46:	d107      	bne.n	8003b58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b60:	d10f      	bne.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e017      	b.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d19b      	bne.n	8003afc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000018 	.word	0x20000018

08003bd4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be8:	d111      	bne.n	8003c0e <SPI_EndRxTransaction+0x3a>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf2:	d004      	beq.n	8003bfe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfc:	d107      	bne.n	8003c0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c0c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c16:	d117      	bne.n	8003c48 <SPI_EndRxTransaction+0x74>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c20:	d112      	bne.n	8003c48 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff ff49 	bl	8003ac4 <SPI_WaitFlagStateUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01a      	beq.n	8003c6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e013      	b.n	8003c70 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2180      	movs	r1, #128	; 0x80
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff ff36 	bl	8003ac4 <SPI_WaitFlagStateUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	f043 0220 	orr.w	r2, r3, #32
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e000      	b.n	8003c70 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff ff18 	bl	8003ac4 <SPI_WaitFlagStateUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e000      	b.n	8003cac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e041      	b.n	8003d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fd fba2 	bl	8001424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f000 faa8 	bl	8004248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d001      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e03a      	b.n	8003de2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a18      	ldr	r2, [pc, #96]	; (8003dec <HAL_TIM_Base_Start_IT+0x98>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00e      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x58>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d96:	d009      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x58>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x58>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a13      	ldr	r2, [pc, #76]	; (8003df4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d111      	bne.n	8003dd0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d010      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dce:	e007      	b.n	8003de0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	40012c00 	.word	0x40012c00
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800

08003df8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6a1a      	ldr	r2, [r3, #32]
 8003e16:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10f      	bne.n	8003e40 <HAL_TIM_Base_Stop_IT+0x48>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6a1a      	ldr	r2, [r3, #32]
 8003e26:	f240 4344 	movw	r3, #1092	; 0x444
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_Base_Stop_IT+0x48>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d122      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d11b      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0202 	mvn.w	r2, #2
 8003e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9ba 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9ad 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f9bc 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d122      	bne.n	8003f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d11b      	bne.n	8003f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0204 	mvn.w	r2, #4
 8003ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f990 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f983 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f992 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d122      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d11b      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0208 	mvn.w	r2, #8
 8003f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f966 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f959 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f968 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d122      	bne.n	8003fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d11b      	bne.n	8003fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0210 	mvn.w	r2, #16
 8003f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2208      	movs	r2, #8
 8003f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f93c 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f92f 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f93e 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0201 	mvn.w	r2, #1
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f90a 	bl	80041ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b80      	cmp	r3, #128	; 0x80
 8003fe4:	d10e      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff0:	2b80      	cmp	r3, #128	; 0x80
 8003ff2:	d107      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa81 	bl	8004506 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d10e      	bne.n	8004030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d107      	bne.n	8004030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f902 	bl	8004234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b20      	cmp	r3, #32
 800403c:	d10e      	bne.n	800405c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b20      	cmp	r3, #32
 800404a:	d107      	bne.n	800405c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0220 	mvn.w	r2, #32
 8004054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fa4c 	bl	80044f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_TIM_ConfigClockSource+0x18>
 8004078:	2302      	movs	r3, #2
 800407a:	e0b3      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x180>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800409a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b4:	d03e      	beq.n	8004134 <HAL_TIM_ConfigClockSource+0xd0>
 80040b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ba:	f200 8087 	bhi.w	80041cc <HAL_TIM_ConfigClockSource+0x168>
 80040be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c2:	f000 8085 	beq.w	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ca:	d87f      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x168>
 80040cc:	2b70      	cmp	r3, #112	; 0x70
 80040ce:	d01a      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0xa2>
 80040d0:	2b70      	cmp	r3, #112	; 0x70
 80040d2:	d87b      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x168>
 80040d4:	2b60      	cmp	r3, #96	; 0x60
 80040d6:	d050      	beq.n	800417a <HAL_TIM_ConfigClockSource+0x116>
 80040d8:	2b60      	cmp	r3, #96	; 0x60
 80040da:	d877      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x168>
 80040dc:	2b50      	cmp	r3, #80	; 0x50
 80040de:	d03c      	beq.n	800415a <HAL_TIM_ConfigClockSource+0xf6>
 80040e0:	2b50      	cmp	r3, #80	; 0x50
 80040e2:	d873      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x168>
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d058      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x136>
 80040e8:	2b40      	cmp	r3, #64	; 0x40
 80040ea:	d86f      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x168>
 80040ec:	2b30      	cmp	r3, #48	; 0x30
 80040ee:	d064      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x156>
 80040f0:	2b30      	cmp	r3, #48	; 0x30
 80040f2:	d86b      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x168>
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d060      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x156>
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d867      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x168>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05c      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x156>
 8004100:	2b10      	cmp	r3, #16
 8004102:	d05a      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004104:	e062      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6899      	ldr	r1, [r3, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f000 f970 	bl	80043fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004128:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	609a      	str	r2, [r3, #8]
      break;
 8004132:	e04e      	b.n	80041d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	6899      	ldr	r1, [r3, #8]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f000 f959 	bl	80043fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004156:	609a      	str	r2, [r3, #8]
      break;
 8004158:	e03b      	b.n	80041d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6859      	ldr	r1, [r3, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	461a      	mov	r2, r3
 8004168:	f000 f8d0 	bl	800430c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2150      	movs	r1, #80	; 0x50
 8004172:	4618      	mov	r0, r3
 8004174:	f000 f927 	bl	80043c6 <TIM_ITRx_SetConfig>
      break;
 8004178:	e02b      	b.n	80041d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	461a      	mov	r2, r3
 8004188:	f000 f8ee 	bl	8004368 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2160      	movs	r1, #96	; 0x60
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f917 	bl	80043c6 <TIM_ITRx_SetConfig>
      break;
 8004198:	e01b      	b.n	80041d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6859      	ldr	r1, [r3, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f000 f8b0 	bl	800430c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2140      	movs	r1, #64	; 0x40
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f907 	bl	80043c6 <TIM_ITRx_SetConfig>
      break;
 80041b8:	e00b      	b.n	80041d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f000 f8fe 	bl	80043c6 <TIM_ITRx_SetConfig>
        break;
 80041ca:	e002      	b.n	80041d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041cc:	bf00      	nop
 80041ce:	e000      	b.n	80041d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr
	...

08004248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a29      	ldr	r2, [pc, #164]	; (8004300 <TIM_Base_SetConfig+0xb8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00b      	beq.n	8004278 <TIM_Base_SetConfig+0x30>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004266:	d007      	beq.n	8004278 <TIM_Base_SetConfig+0x30>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a26      	ldr	r2, [pc, #152]	; (8004304 <TIM_Base_SetConfig+0xbc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_Base_SetConfig+0x30>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a25      	ldr	r2, [pc, #148]	; (8004308 <TIM_Base_SetConfig+0xc0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d108      	bne.n	800428a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <TIM_Base_SetConfig+0xb8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00b      	beq.n	80042aa <TIM_Base_SetConfig+0x62>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d007      	beq.n	80042aa <TIM_Base_SetConfig+0x62>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a19      	ldr	r2, [pc, #100]	; (8004304 <TIM_Base_SetConfig+0xbc>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d003      	beq.n	80042aa <TIM_Base_SetConfig+0x62>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a18      	ldr	r2, [pc, #96]	; (8004308 <TIM_Base_SetConfig+0xc0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d108      	bne.n	80042bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a07      	ldr	r2, [pc, #28]	; (8004300 <TIM_Base_SetConfig+0xb8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d103      	bne.n	80042f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	615a      	str	r2, [r3, #20]
}
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800

0800430c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f023 0201 	bic.w	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f023 030a 	bic.w	r3, r3, #10
 8004348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f023 0210 	bic.w	r2, r3, #16
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004392:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	031b      	lsls	r3, r3, #12
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b085      	sub	sp, #20
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f043 0307 	orr.w	r3, r3, #7
 80043e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	609a      	str	r2, [r3, #8]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b087      	sub	sp, #28
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
 8004406:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004414:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	021a      	lsls	r2, r3, #8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	431a      	orrs	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4313      	orrs	r3, r2
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	609a      	str	r2, [r3, #8]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800444c:	2302      	movs	r3, #2
 800444e:	e046      	b.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449c:	d009      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a12      	ldr	r2, [pc, #72]	; (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a10      	ldr	r2, [pc, #64]	; (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10c      	bne.n	80044cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40000400 	.word	0x40000400
 80044f0:	40000800 	.word	0x40000800

080044f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr

08004506 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e03f      	b.n	80045aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc ff96 	bl	8001470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2224      	movs	r2, #36	; 0x24
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800455a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fba9 	bl	8004cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	4613      	mov	r3, r2
 80045be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d11d      	bne.n	8004608 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_UART_Receive_IT+0x26>
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e016      	b.n	800460a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_UART_Receive_IT+0x38>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e00f      	b.n	800460a <HAL_UART_Receive_IT+0x58>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	461a      	mov	r2, r3
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f9cf 	bl	80049a2 <UART_Start_Receive_IT>
 8004604:	4603      	mov	r3, r0
 8004606:	e000      	b.n	800460a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004608:	2302      	movs	r3, #2
  }
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	; 0x28
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10d      	bne.n	8004666 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_UART_IRQHandler+0x52>
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fa7f 	bl	8004b62 <UART_Receive_IT>
      return;
 8004664:	e17b      	b.n	800495e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80b1 	beq.w	80047d0 <HAL_UART_IRQHandler+0x1bc>
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d105      	bne.n	8004684 <HAL_UART_IRQHandler+0x70>
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 80a6 	beq.w	80047d0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_UART_IRQHandler+0x90>
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f043 0201 	orr.w	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_UART_IRQHandler+0xb0>
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	f043 0202 	orr.w	r2, r3, #2
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_UART_IRQHandler+0xd0>
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f043 0204 	orr.w	r2, r3, #4
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00f      	beq.n	800470e <HAL_UART_IRQHandler+0xfa>
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_UART_IRQHandler+0xee>
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f043 0208 	orr.w	r2, r3, #8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 811e 	beq.w	8004954 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <HAL_UART_IRQHandler+0x11e>
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fa18 	bl	8004b62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf14      	ite	ne
 8004740:	2301      	movne	r3, #1
 8004742:	2300      	moveq	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <HAL_UART_IRQHandler+0x146>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d031      	beq.n	80047be <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f95a 	bl	8004a14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d023      	beq.n	80047b6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695a      	ldr	r2, [r3, #20]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	2b00      	cmp	r3, #0
 8004784:	d013      	beq.n	80047ae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	4a76      	ldr	r2, [pc, #472]	; (8004964 <HAL_UART_IRQHandler+0x350>)
 800478c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	4618      	mov	r0, r3
 8004794:	f7fd fa54 	bl	8001c40 <HAL_DMA_Abort_IT>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047a8:	4610      	mov	r0, r2
 80047aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	e00e      	b.n	80047cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8e3 	bl	800497a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	e00a      	b.n	80047cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f8df 	bl	800497a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047bc:	e006      	b.n	80047cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f8db 	bl	800497a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047ca:	e0c3      	b.n	8004954 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047cc:	bf00      	nop
    return;
 80047ce:	e0c1      	b.n	8004954 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	f040 80a1 	bne.w	800491c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 809b 	beq.w	800491c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8095 	beq.w	800491c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d04e      	beq.n	80048b4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004820:	8a3b      	ldrh	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 8098 	beq.w	8004958 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800482c:	8a3a      	ldrh	r2, [r7, #16]
 800482e:	429a      	cmp	r2, r3
 8004830:	f080 8092 	bcs.w	8004958 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8a3a      	ldrh	r2, [r7, #16]
 8004838:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b20      	cmp	r3, #32
 8004842:	d02b      	beq.n	800489c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004852:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695a      	ldr	r2, [r3, #20]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004872:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0210 	bic.w	r2, r2, #16
 8004890:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd f997 	bl	8001bca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	4619      	mov	r1, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f86d 	bl	800498c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80048b2:	e051      	b.n	8004958 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048bc:	b29b      	uxth	r3, r3
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d047      	beq.n	800495c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80048cc:	8a7b      	ldrh	r3, [r7, #18]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d044      	beq.n	800495c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048e0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695a      	ldr	r2, [r3, #20]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0201 	bic.w	r2, r2, #1
 80048f0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0210 	bic.w	r2, r2, #16
 800490e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004910:	8a7b      	ldrh	r3, [r7, #18]
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f839 	bl	800498c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800491a:	e01f      	b.n	800495c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_UART_IRQHandler+0x324>
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f8af 	bl	8004a94 <UART_Transmit_IT>
    return;
 8004936:	e012      	b.n	800495e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00d      	beq.n	800495e <HAL_UART_IRQHandler+0x34a>
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f8f0 	bl	8004b32 <UART_EndTransmit_IT>
    return;
 8004952:	e004      	b.n	800495e <HAL_UART_IRQHandler+0x34a>
    return;
 8004954:	bf00      	nop
 8004956:	e002      	b.n	800495e <HAL_UART_IRQHandler+0x34a>
      return;
 8004958:	bf00      	nop
 800495a:	e000      	b.n	800495e <HAL_UART_IRQHandler+0x34a>
      return;
 800495c:	bf00      	nop
  }
}
 800495e:	3728      	adds	r7, #40	; 0x28
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	08004a6d 	.word	0x08004a6d

08004968 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr

0800497a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr

080049a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	4613      	mov	r3, r2
 80049ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	88fa      	ldrh	r2, [r7, #6]
 80049ba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	88fa      	ldrh	r2, [r7, #6]
 80049c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2222      	movs	r2, #34	; 0x22
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0220 	orr.w	r2, r2, #32
 8004a06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d107      	bne.n	8004a54 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0210 	bic.w	r2, r2, #16
 8004a52:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f7ff ff77 	bl	800497a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b21      	cmp	r3, #33	; 0x21
 8004aa6:	d13e      	bne.n	8004b26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab0:	d114      	bne.n	8004adc <UART_Transmit_IT+0x48>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d110      	bne.n	8004adc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ace:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	1c9a      	adds	r2, r3, #2
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	621a      	str	r2, [r3, #32]
 8004ada:	e008      	b.n	8004aee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	1c59      	adds	r1, r3, #1
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6211      	str	r1, [r2, #32]
 8004ae6:	781a      	ldrb	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4619      	mov	r1, r3
 8004afc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10f      	bne.n	8004b22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e000      	b.n	8004b28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
  }
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff ff08 	bl	8004968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b086      	sub	sp, #24
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b22      	cmp	r3, #34	; 0x22
 8004b74:	f040 8099 	bne.w	8004caa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b80:	d117      	bne.n	8004bb2 <UART_Receive_IT+0x50>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d113      	bne.n	8004bb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	1c9a      	adds	r2, r3, #2
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28
 8004bb0:	e026      	b.n	8004c00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc4:	d007      	beq.n	8004bd6 <UART_Receive_IT+0x74>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <UART_Receive_IT+0x82>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	e008      	b.n	8004bf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d148      	bne.n	8004ca6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0220 	bic.w	r2, r2, #32
 8004c22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695a      	ldr	r2, [r3, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0201 	bic.w	r2, r2, #1
 8004c42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d123      	bne.n	8004c9c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0210 	bic.w	r2, r2, #16
 8004c68:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d10a      	bne.n	8004c8e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fe79 	bl	800498c <HAL_UARTEx_RxEventCallback>
 8004c9a:	e002      	b.n	8004ca2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7fc fac7 	bl	8001230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e002      	b.n	8004cac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e000      	b.n	8004cac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004caa:	2302      	movs	r3, #2
  }
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cee:	f023 030c 	bic.w	r3, r3, #12
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a2c      	ldr	r2, [pc, #176]	; (8004dc8 <UART_SetConfig+0x114>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d103      	bne.n	8004d24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d1c:	f7fe fa2c 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	e002      	b.n	8004d2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d24:	f7fe fa14 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8004d28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <UART_SetConfig+0x118>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	0119      	lsls	r1, r3, #4
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009a      	lsls	r2, r3, #2
 8004d54:	441a      	add	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d60:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <UART_SetConfig+0x118>)
 8004d62:	fba3 0302 	umull	r0, r3, r3, r2
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	2064      	movs	r0, #100	; 0x64
 8004d6a:	fb00 f303 	mul.w	r3, r0, r3
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	3332      	adds	r3, #50	; 0x32
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <UART_SetConfig+0x118>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d80:	4419      	add	r1, r3
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009a      	lsls	r2, r3, #2
 8004d8c:	441a      	add	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d98:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <UART_SetConfig+0x118>)
 8004d9a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2064      	movs	r0, #100	; 0x64
 8004da2:	fb00 f303 	mul.w	r3, r0, r3
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	3332      	adds	r3, #50	; 0x32
 8004dac:	4a07      	ldr	r2, [pc, #28]	; (8004dcc <UART_SetConfig+0x118>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	f003 020f 	and.w	r2, r3, #15
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40013800 	.word	0x40013800
 8004dcc:	51eb851f 	.word	0x51eb851f

08004dd0 <__errno>:
 8004dd0:	4b01      	ldr	r3, [pc, #4]	; (8004dd8 <__errno+0x8>)
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000024 	.word	0x20000024

08004ddc <__libc_init_array>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	2600      	movs	r6, #0
 8004de0:	4d0c      	ldr	r5, [pc, #48]	; (8004e14 <__libc_init_array+0x38>)
 8004de2:	4c0d      	ldr	r4, [pc, #52]	; (8004e18 <__libc_init_array+0x3c>)
 8004de4:	1b64      	subs	r4, r4, r5
 8004de6:	10a4      	asrs	r4, r4, #2
 8004de8:	42a6      	cmp	r6, r4
 8004dea:	d109      	bne.n	8004e00 <__libc_init_array+0x24>
 8004dec:	f000 fcc8 	bl	8005780 <_init>
 8004df0:	2600      	movs	r6, #0
 8004df2:	4d0a      	ldr	r5, [pc, #40]	; (8004e1c <__libc_init_array+0x40>)
 8004df4:	4c0a      	ldr	r4, [pc, #40]	; (8004e20 <__libc_init_array+0x44>)
 8004df6:	1b64      	subs	r4, r4, r5
 8004df8:	10a4      	asrs	r4, r4, #2
 8004dfa:	42a6      	cmp	r6, r4
 8004dfc:	d105      	bne.n	8004e0a <__libc_init_array+0x2e>
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e04:	4798      	blx	r3
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7ee      	b.n	8004de8 <__libc_init_array+0xc>
 8004e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0e:	4798      	blx	r3
 8004e10:	3601      	adds	r6, #1
 8004e12:	e7f2      	b.n	8004dfa <__libc_init_array+0x1e>
 8004e14:	08005fcc 	.word	0x08005fcc
 8004e18:	08005fcc 	.word	0x08005fcc
 8004e1c:	08005fcc 	.word	0x08005fcc
 8004e20:	08005fd0 	.word	0x08005fd0

08004e24 <__itoa>:
 8004e24:	1e93      	subs	r3, r2, #2
 8004e26:	2b22      	cmp	r3, #34	; 0x22
 8004e28:	b510      	push	{r4, lr}
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	d904      	bls.n	8004e38 <__itoa+0x14>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	461c      	mov	r4, r3
 8004e32:	700b      	strb	r3, [r1, #0]
 8004e34:	4620      	mov	r0, r4
 8004e36:	bd10      	pop	{r4, pc}
 8004e38:	2a0a      	cmp	r2, #10
 8004e3a:	d109      	bne.n	8004e50 <__itoa+0x2c>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	da07      	bge.n	8004e50 <__itoa+0x2c>
 8004e40:	232d      	movs	r3, #45	; 0x2d
 8004e42:	700b      	strb	r3, [r1, #0]
 8004e44:	2101      	movs	r1, #1
 8004e46:	4240      	negs	r0, r0
 8004e48:	4421      	add	r1, r4
 8004e4a:	f000 f901 	bl	8005050 <__utoa>
 8004e4e:	e7f1      	b.n	8004e34 <__itoa+0x10>
 8004e50:	2100      	movs	r1, #0
 8004e52:	e7f9      	b.n	8004e48 <__itoa+0x24>

08004e54 <itoa>:
 8004e54:	f7ff bfe6 	b.w	8004e24 <__itoa>

08004e58 <memcpy>:
 8004e58:	440a      	add	r2, r1
 8004e5a:	4291      	cmp	r1, r2
 8004e5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e60:	d100      	bne.n	8004e64 <memcpy+0xc>
 8004e62:	4770      	bx	lr
 8004e64:	b510      	push	{r4, lr}
 8004e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e6a:	4291      	cmp	r1, r2
 8004e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e70:	d1f9      	bne.n	8004e66 <memcpy+0xe>
 8004e72:	bd10      	pop	{r4, pc}

08004e74 <memset>:
 8004e74:	4603      	mov	r3, r0
 8004e76:	4402      	add	r2, r0
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <memset+0xa>
 8004e7c:	4770      	bx	lr
 8004e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e82:	e7f9      	b.n	8004e78 <memset+0x4>

08004e84 <_free_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4605      	mov	r5, r0
 8004e88:	2900      	cmp	r1, #0
 8004e8a:	d043      	beq.n	8004f14 <_free_r+0x90>
 8004e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e90:	1f0c      	subs	r4, r1, #4
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bfb8      	it	lt
 8004e96:	18e4      	addlt	r4, r4, r3
 8004e98:	f000 f91c 	bl	80050d4 <__malloc_lock>
 8004e9c:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <_free_r+0x94>)
 8004e9e:	6813      	ldr	r3, [r2, #0]
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	b933      	cbnz	r3, 8004eb2 <_free_r+0x2e>
 8004ea4:	6063      	str	r3, [r4, #4]
 8004ea6:	6014      	str	r4, [r2, #0]
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eae:	f000 b917 	b.w	80050e0 <__malloc_unlock>
 8004eb2:	42a3      	cmp	r3, r4
 8004eb4:	d90a      	bls.n	8004ecc <_free_r+0x48>
 8004eb6:	6821      	ldr	r1, [r4, #0]
 8004eb8:	1862      	adds	r2, r4, r1
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	bf01      	itttt	eq
 8004ebe:	681a      	ldreq	r2, [r3, #0]
 8004ec0:	685b      	ldreq	r3, [r3, #4]
 8004ec2:	1852      	addeq	r2, r2, r1
 8004ec4:	6022      	streq	r2, [r4, #0]
 8004ec6:	6063      	str	r3, [r4, #4]
 8004ec8:	6004      	str	r4, [r0, #0]
 8004eca:	e7ed      	b.n	8004ea8 <_free_r+0x24>
 8004ecc:	461a      	mov	r2, r3
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	b10b      	cbz	r3, 8004ed6 <_free_r+0x52>
 8004ed2:	42a3      	cmp	r3, r4
 8004ed4:	d9fa      	bls.n	8004ecc <_free_r+0x48>
 8004ed6:	6811      	ldr	r1, [r2, #0]
 8004ed8:	1850      	adds	r0, r2, r1
 8004eda:	42a0      	cmp	r0, r4
 8004edc:	d10b      	bne.n	8004ef6 <_free_r+0x72>
 8004ede:	6820      	ldr	r0, [r4, #0]
 8004ee0:	4401      	add	r1, r0
 8004ee2:	1850      	adds	r0, r2, r1
 8004ee4:	4283      	cmp	r3, r0
 8004ee6:	6011      	str	r1, [r2, #0]
 8004ee8:	d1de      	bne.n	8004ea8 <_free_r+0x24>
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	4401      	add	r1, r0
 8004ef0:	6011      	str	r1, [r2, #0]
 8004ef2:	6053      	str	r3, [r2, #4]
 8004ef4:	e7d8      	b.n	8004ea8 <_free_r+0x24>
 8004ef6:	d902      	bls.n	8004efe <_free_r+0x7a>
 8004ef8:	230c      	movs	r3, #12
 8004efa:	602b      	str	r3, [r5, #0]
 8004efc:	e7d4      	b.n	8004ea8 <_free_r+0x24>
 8004efe:	6820      	ldr	r0, [r4, #0]
 8004f00:	1821      	adds	r1, r4, r0
 8004f02:	428b      	cmp	r3, r1
 8004f04:	bf01      	itttt	eq
 8004f06:	6819      	ldreq	r1, [r3, #0]
 8004f08:	685b      	ldreq	r3, [r3, #4]
 8004f0a:	1809      	addeq	r1, r1, r0
 8004f0c:	6021      	streq	r1, [r4, #0]
 8004f0e:	6063      	str	r3, [r4, #4]
 8004f10:	6054      	str	r4, [r2, #4]
 8004f12:	e7c9      	b.n	8004ea8 <_free_r+0x24>
 8004f14:	bd38      	pop	{r3, r4, r5, pc}
 8004f16:	bf00      	nop
 8004f18:	2000052c 	.word	0x2000052c

08004f1c <_malloc_r>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	1ccd      	adds	r5, r1, #3
 8004f20:	f025 0503 	bic.w	r5, r5, #3
 8004f24:	3508      	adds	r5, #8
 8004f26:	2d0c      	cmp	r5, #12
 8004f28:	bf38      	it	cc
 8004f2a:	250c      	movcc	r5, #12
 8004f2c:	2d00      	cmp	r5, #0
 8004f2e:	4606      	mov	r6, r0
 8004f30:	db01      	blt.n	8004f36 <_malloc_r+0x1a>
 8004f32:	42a9      	cmp	r1, r5
 8004f34:	d903      	bls.n	8004f3e <_malloc_r+0x22>
 8004f36:	230c      	movs	r3, #12
 8004f38:	6033      	str	r3, [r6, #0]
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f3e:	f000 f8c9 	bl	80050d4 <__malloc_lock>
 8004f42:	4921      	ldr	r1, [pc, #132]	; (8004fc8 <_malloc_r+0xac>)
 8004f44:	680a      	ldr	r2, [r1, #0]
 8004f46:	4614      	mov	r4, r2
 8004f48:	b99c      	cbnz	r4, 8004f72 <_malloc_r+0x56>
 8004f4a:	4f20      	ldr	r7, [pc, #128]	; (8004fcc <_malloc_r+0xb0>)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	b923      	cbnz	r3, 8004f5a <_malloc_r+0x3e>
 8004f50:	4621      	mov	r1, r4
 8004f52:	4630      	mov	r0, r6
 8004f54:	f000 f83c 	bl	8004fd0 <_sbrk_r>
 8004f58:	6038      	str	r0, [r7, #0]
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f000 f837 	bl	8004fd0 <_sbrk_r>
 8004f62:	1c43      	adds	r3, r0, #1
 8004f64:	d123      	bne.n	8004fae <_malloc_r+0x92>
 8004f66:	230c      	movs	r3, #12
 8004f68:	4630      	mov	r0, r6
 8004f6a:	6033      	str	r3, [r6, #0]
 8004f6c:	f000 f8b8 	bl	80050e0 <__malloc_unlock>
 8004f70:	e7e3      	b.n	8004f3a <_malloc_r+0x1e>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	1b5b      	subs	r3, r3, r5
 8004f76:	d417      	bmi.n	8004fa8 <_malloc_r+0x8c>
 8004f78:	2b0b      	cmp	r3, #11
 8004f7a:	d903      	bls.n	8004f84 <_malloc_r+0x68>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	441c      	add	r4, r3
 8004f80:	6025      	str	r5, [r4, #0]
 8004f82:	e004      	b.n	8004f8e <_malloc_r+0x72>
 8004f84:	6863      	ldr	r3, [r4, #4]
 8004f86:	42a2      	cmp	r2, r4
 8004f88:	bf0c      	ite	eq
 8004f8a:	600b      	streq	r3, [r1, #0]
 8004f8c:	6053      	strne	r3, [r2, #4]
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f000 f8a6 	bl	80050e0 <__malloc_unlock>
 8004f94:	f104 000b 	add.w	r0, r4, #11
 8004f98:	1d23      	adds	r3, r4, #4
 8004f9a:	f020 0007 	bic.w	r0, r0, #7
 8004f9e:	1ac2      	subs	r2, r0, r3
 8004fa0:	d0cc      	beq.n	8004f3c <_malloc_r+0x20>
 8004fa2:	1a1b      	subs	r3, r3, r0
 8004fa4:	50a3      	str	r3, [r4, r2]
 8004fa6:	e7c9      	b.n	8004f3c <_malloc_r+0x20>
 8004fa8:	4622      	mov	r2, r4
 8004faa:	6864      	ldr	r4, [r4, #4]
 8004fac:	e7cc      	b.n	8004f48 <_malloc_r+0x2c>
 8004fae:	1cc4      	adds	r4, r0, #3
 8004fb0:	f024 0403 	bic.w	r4, r4, #3
 8004fb4:	42a0      	cmp	r0, r4
 8004fb6:	d0e3      	beq.n	8004f80 <_malloc_r+0x64>
 8004fb8:	1a21      	subs	r1, r4, r0
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f000 f808 	bl	8004fd0 <_sbrk_r>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d1dd      	bne.n	8004f80 <_malloc_r+0x64>
 8004fc4:	e7cf      	b.n	8004f66 <_malloc_r+0x4a>
 8004fc6:	bf00      	nop
 8004fc8:	2000052c 	.word	0x2000052c
 8004fcc:	20000530 	.word	0x20000530

08004fd0 <_sbrk_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	4d05      	ldr	r5, [pc, #20]	; (8004fec <_sbrk_r+0x1c>)
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	4608      	mov	r0, r1
 8004fda:	602b      	str	r3, [r5, #0]
 8004fdc:	f7fc fc00 	bl	80017e0 <_sbrk>
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	d102      	bne.n	8004fea <_sbrk_r+0x1a>
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	b103      	cbz	r3, 8004fea <_sbrk_r+0x1a>
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	200006b4 	.word	0x200006b4

08004ff0 <siprintf>:
 8004ff0:	b40e      	push	{r1, r2, r3}
 8004ff2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ff6:	b500      	push	{lr}
 8004ff8:	b09c      	sub	sp, #112	; 0x70
 8004ffa:	ab1d      	add	r3, sp, #116	; 0x74
 8004ffc:	9002      	str	r0, [sp, #8]
 8004ffe:	9006      	str	r0, [sp, #24]
 8005000:	9107      	str	r1, [sp, #28]
 8005002:	9104      	str	r1, [sp, #16]
 8005004:	4808      	ldr	r0, [pc, #32]	; (8005028 <siprintf+0x38>)
 8005006:	4909      	ldr	r1, [pc, #36]	; (800502c <siprintf+0x3c>)
 8005008:	f853 2b04 	ldr.w	r2, [r3], #4
 800500c:	9105      	str	r1, [sp, #20]
 800500e:	6800      	ldr	r0, [r0, #0]
 8005010:	a902      	add	r1, sp, #8
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	f000 f8c6 	bl	80051a4 <_svfiprintf_r>
 8005018:	2200      	movs	r2, #0
 800501a:	9b02      	ldr	r3, [sp, #8]
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	b01c      	add	sp, #112	; 0x70
 8005020:	f85d eb04 	ldr.w	lr, [sp], #4
 8005024:	b003      	add	sp, #12
 8005026:	4770      	bx	lr
 8005028:	20000024 	.word	0x20000024
 800502c:	ffff0208 	.word	0xffff0208

08005030 <strcat>:
 8005030:	4602      	mov	r2, r0
 8005032:	b510      	push	{r4, lr}
 8005034:	7814      	ldrb	r4, [r2, #0]
 8005036:	4613      	mov	r3, r2
 8005038:	3201      	adds	r2, #1
 800503a:	2c00      	cmp	r4, #0
 800503c:	d1fa      	bne.n	8005034 <strcat+0x4>
 800503e:	3b01      	subs	r3, #1
 8005040:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005044:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005048:	2a00      	cmp	r2, #0
 800504a:	d1f9      	bne.n	8005040 <strcat+0x10>
 800504c:	bd10      	pop	{r4, pc}
	...

08005050 <__utoa>:
 8005050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005052:	b08b      	sub	sp, #44	; 0x2c
 8005054:	4605      	mov	r5, r0
 8005056:	460b      	mov	r3, r1
 8005058:	466e      	mov	r6, sp
 800505a:	4c1d      	ldr	r4, [pc, #116]	; (80050d0 <__utoa+0x80>)
 800505c:	f104 0c20 	add.w	ip, r4, #32
 8005060:	4637      	mov	r7, r6
 8005062:	6820      	ldr	r0, [r4, #0]
 8005064:	6861      	ldr	r1, [r4, #4]
 8005066:	3408      	adds	r4, #8
 8005068:	c703      	stmia	r7!, {r0, r1}
 800506a:	4564      	cmp	r4, ip
 800506c:	463e      	mov	r6, r7
 800506e:	d1f7      	bne.n	8005060 <__utoa+0x10>
 8005070:	7921      	ldrb	r1, [r4, #4]
 8005072:	6820      	ldr	r0, [r4, #0]
 8005074:	7139      	strb	r1, [r7, #4]
 8005076:	1e91      	subs	r1, r2, #2
 8005078:	2922      	cmp	r1, #34	; 0x22
 800507a:	6038      	str	r0, [r7, #0]
 800507c:	f04f 0100 	mov.w	r1, #0
 8005080:	d904      	bls.n	800508c <__utoa+0x3c>
 8005082:	7019      	strb	r1, [r3, #0]
 8005084:	460b      	mov	r3, r1
 8005086:	4618      	mov	r0, r3
 8005088:	b00b      	add	sp, #44	; 0x2c
 800508a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800508c:	1e58      	subs	r0, r3, #1
 800508e:	4684      	mov	ip, r0
 8005090:	fbb5 f7f2 	udiv	r7, r5, r2
 8005094:	fb02 5617 	mls	r6, r2, r7, r5
 8005098:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800509c:	4476      	add	r6, lr
 800509e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80050a2:	460c      	mov	r4, r1
 80050a4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80050a8:	462e      	mov	r6, r5
 80050aa:	42b2      	cmp	r2, r6
 80050ac:	463d      	mov	r5, r7
 80050ae:	f101 0101 	add.w	r1, r1, #1
 80050b2:	d9ed      	bls.n	8005090 <__utoa+0x40>
 80050b4:	2200      	movs	r2, #0
 80050b6:	545a      	strb	r2, [r3, r1]
 80050b8:	1919      	adds	r1, r3, r4
 80050ba:	1aa5      	subs	r5, r4, r2
 80050bc:	42aa      	cmp	r2, r5
 80050be:	dae2      	bge.n	8005086 <__utoa+0x36>
 80050c0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80050c4:	780e      	ldrb	r6, [r1, #0]
 80050c6:	3201      	adds	r2, #1
 80050c8:	7006      	strb	r6, [r0, #0]
 80050ca:	f801 5901 	strb.w	r5, [r1], #-1
 80050ce:	e7f4      	b.n	80050ba <__utoa+0x6a>
 80050d0:	08005f74 	.word	0x08005f74

080050d4 <__malloc_lock>:
 80050d4:	4801      	ldr	r0, [pc, #4]	; (80050dc <__malloc_lock+0x8>)
 80050d6:	f000 bafb 	b.w	80056d0 <__retarget_lock_acquire_recursive>
 80050da:	bf00      	nop
 80050dc:	200006bc 	.word	0x200006bc

080050e0 <__malloc_unlock>:
 80050e0:	4801      	ldr	r0, [pc, #4]	; (80050e8 <__malloc_unlock+0x8>)
 80050e2:	f000 baf6 	b.w	80056d2 <__retarget_lock_release_recursive>
 80050e6:	bf00      	nop
 80050e8:	200006bc 	.word	0x200006bc

080050ec <__ssputs_r>:
 80050ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f0:	688e      	ldr	r6, [r1, #8]
 80050f2:	4682      	mov	sl, r0
 80050f4:	429e      	cmp	r6, r3
 80050f6:	460c      	mov	r4, r1
 80050f8:	4690      	mov	r8, r2
 80050fa:	461f      	mov	r7, r3
 80050fc:	d838      	bhi.n	8005170 <__ssputs_r+0x84>
 80050fe:	898a      	ldrh	r2, [r1, #12]
 8005100:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005104:	d032      	beq.n	800516c <__ssputs_r+0x80>
 8005106:	6825      	ldr	r5, [r4, #0]
 8005108:	6909      	ldr	r1, [r1, #16]
 800510a:	3301      	adds	r3, #1
 800510c:	eba5 0901 	sub.w	r9, r5, r1
 8005110:	6965      	ldr	r5, [r4, #20]
 8005112:	444b      	add	r3, r9
 8005114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800511c:	106d      	asrs	r5, r5, #1
 800511e:	429d      	cmp	r5, r3
 8005120:	bf38      	it	cc
 8005122:	461d      	movcc	r5, r3
 8005124:	0553      	lsls	r3, r2, #21
 8005126:	d531      	bpl.n	800518c <__ssputs_r+0xa0>
 8005128:	4629      	mov	r1, r5
 800512a:	f7ff fef7 	bl	8004f1c <_malloc_r>
 800512e:	4606      	mov	r6, r0
 8005130:	b950      	cbnz	r0, 8005148 <__ssputs_r+0x5c>
 8005132:	230c      	movs	r3, #12
 8005134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005138:	f8ca 3000 	str.w	r3, [sl]
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005148:	464a      	mov	r2, r9
 800514a:	6921      	ldr	r1, [r4, #16]
 800514c:	f7ff fe84 	bl	8004e58 <memcpy>
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515a:	81a3      	strh	r3, [r4, #12]
 800515c:	6126      	str	r6, [r4, #16]
 800515e:	444e      	add	r6, r9
 8005160:	6026      	str	r6, [r4, #0]
 8005162:	463e      	mov	r6, r7
 8005164:	6165      	str	r5, [r4, #20]
 8005166:	eba5 0509 	sub.w	r5, r5, r9
 800516a:	60a5      	str	r5, [r4, #8]
 800516c:	42be      	cmp	r6, r7
 800516e:	d900      	bls.n	8005172 <__ssputs_r+0x86>
 8005170:	463e      	mov	r6, r7
 8005172:	4632      	mov	r2, r6
 8005174:	4641      	mov	r1, r8
 8005176:	6820      	ldr	r0, [r4, #0]
 8005178:	f000 faba 	bl	80056f0 <memmove>
 800517c:	68a3      	ldr	r3, [r4, #8]
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	1b9b      	subs	r3, r3, r6
 8005182:	4432      	add	r2, r6
 8005184:	2000      	movs	r0, #0
 8005186:	60a3      	str	r3, [r4, #8]
 8005188:	6022      	str	r2, [r4, #0]
 800518a:	e7db      	b.n	8005144 <__ssputs_r+0x58>
 800518c:	462a      	mov	r2, r5
 800518e:	f000 fac9 	bl	8005724 <_realloc_r>
 8005192:	4606      	mov	r6, r0
 8005194:	2800      	cmp	r0, #0
 8005196:	d1e1      	bne.n	800515c <__ssputs_r+0x70>
 8005198:	4650      	mov	r0, sl
 800519a:	6921      	ldr	r1, [r4, #16]
 800519c:	f7ff fe72 	bl	8004e84 <_free_r>
 80051a0:	e7c7      	b.n	8005132 <__ssputs_r+0x46>
	...

080051a4 <_svfiprintf_r>:
 80051a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a8:	4698      	mov	r8, r3
 80051aa:	898b      	ldrh	r3, [r1, #12]
 80051ac:	4607      	mov	r7, r0
 80051ae:	061b      	lsls	r3, r3, #24
 80051b0:	460d      	mov	r5, r1
 80051b2:	4614      	mov	r4, r2
 80051b4:	b09d      	sub	sp, #116	; 0x74
 80051b6:	d50e      	bpl.n	80051d6 <_svfiprintf_r+0x32>
 80051b8:	690b      	ldr	r3, [r1, #16]
 80051ba:	b963      	cbnz	r3, 80051d6 <_svfiprintf_r+0x32>
 80051bc:	2140      	movs	r1, #64	; 0x40
 80051be:	f7ff fead 	bl	8004f1c <_malloc_r>
 80051c2:	6028      	str	r0, [r5, #0]
 80051c4:	6128      	str	r0, [r5, #16]
 80051c6:	b920      	cbnz	r0, 80051d2 <_svfiprintf_r+0x2e>
 80051c8:	230c      	movs	r3, #12
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051d0:	e0d1      	b.n	8005376 <_svfiprintf_r+0x1d2>
 80051d2:	2340      	movs	r3, #64	; 0x40
 80051d4:	616b      	str	r3, [r5, #20]
 80051d6:	2300      	movs	r3, #0
 80051d8:	9309      	str	r3, [sp, #36]	; 0x24
 80051da:	2320      	movs	r3, #32
 80051dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051e0:	2330      	movs	r3, #48	; 0x30
 80051e2:	f04f 0901 	mov.w	r9, #1
 80051e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005390 <_svfiprintf_r+0x1ec>
 80051ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051f2:	4623      	mov	r3, r4
 80051f4:	469a      	mov	sl, r3
 80051f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051fa:	b10a      	cbz	r2, 8005200 <_svfiprintf_r+0x5c>
 80051fc:	2a25      	cmp	r2, #37	; 0x25
 80051fe:	d1f9      	bne.n	80051f4 <_svfiprintf_r+0x50>
 8005200:	ebba 0b04 	subs.w	fp, sl, r4
 8005204:	d00b      	beq.n	800521e <_svfiprintf_r+0x7a>
 8005206:	465b      	mov	r3, fp
 8005208:	4622      	mov	r2, r4
 800520a:	4629      	mov	r1, r5
 800520c:	4638      	mov	r0, r7
 800520e:	f7ff ff6d 	bl	80050ec <__ssputs_r>
 8005212:	3001      	adds	r0, #1
 8005214:	f000 80aa 	beq.w	800536c <_svfiprintf_r+0x1c8>
 8005218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800521a:	445a      	add	r2, fp
 800521c:	9209      	str	r2, [sp, #36]	; 0x24
 800521e:	f89a 3000 	ldrb.w	r3, [sl]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80a2 	beq.w	800536c <_svfiprintf_r+0x1c8>
 8005228:	2300      	movs	r3, #0
 800522a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800522e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005232:	f10a 0a01 	add.w	sl, sl, #1
 8005236:	9304      	str	r3, [sp, #16]
 8005238:	9307      	str	r3, [sp, #28]
 800523a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800523e:	931a      	str	r3, [sp, #104]	; 0x68
 8005240:	4654      	mov	r4, sl
 8005242:	2205      	movs	r2, #5
 8005244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005248:	4851      	ldr	r0, [pc, #324]	; (8005390 <_svfiprintf_r+0x1ec>)
 800524a:	f000 fa43 	bl	80056d4 <memchr>
 800524e:	9a04      	ldr	r2, [sp, #16]
 8005250:	b9d8      	cbnz	r0, 800528a <_svfiprintf_r+0xe6>
 8005252:	06d0      	lsls	r0, r2, #27
 8005254:	bf44      	itt	mi
 8005256:	2320      	movmi	r3, #32
 8005258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800525c:	0711      	lsls	r1, r2, #28
 800525e:	bf44      	itt	mi
 8005260:	232b      	movmi	r3, #43	; 0x2b
 8005262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005266:	f89a 3000 	ldrb.w	r3, [sl]
 800526a:	2b2a      	cmp	r3, #42	; 0x2a
 800526c:	d015      	beq.n	800529a <_svfiprintf_r+0xf6>
 800526e:	4654      	mov	r4, sl
 8005270:	2000      	movs	r0, #0
 8005272:	f04f 0c0a 	mov.w	ip, #10
 8005276:	9a07      	ldr	r2, [sp, #28]
 8005278:	4621      	mov	r1, r4
 800527a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800527e:	3b30      	subs	r3, #48	; 0x30
 8005280:	2b09      	cmp	r3, #9
 8005282:	d94e      	bls.n	8005322 <_svfiprintf_r+0x17e>
 8005284:	b1b0      	cbz	r0, 80052b4 <_svfiprintf_r+0x110>
 8005286:	9207      	str	r2, [sp, #28]
 8005288:	e014      	b.n	80052b4 <_svfiprintf_r+0x110>
 800528a:	eba0 0308 	sub.w	r3, r0, r8
 800528e:	fa09 f303 	lsl.w	r3, r9, r3
 8005292:	4313      	orrs	r3, r2
 8005294:	46a2      	mov	sl, r4
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	e7d2      	b.n	8005240 <_svfiprintf_r+0x9c>
 800529a:	9b03      	ldr	r3, [sp, #12]
 800529c:	1d19      	adds	r1, r3, #4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	9103      	str	r1, [sp, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bfbb      	ittet	lt
 80052a6:	425b      	neglt	r3, r3
 80052a8:	f042 0202 	orrlt.w	r2, r2, #2
 80052ac:	9307      	strge	r3, [sp, #28]
 80052ae:	9307      	strlt	r3, [sp, #28]
 80052b0:	bfb8      	it	lt
 80052b2:	9204      	strlt	r2, [sp, #16]
 80052b4:	7823      	ldrb	r3, [r4, #0]
 80052b6:	2b2e      	cmp	r3, #46	; 0x2e
 80052b8:	d10c      	bne.n	80052d4 <_svfiprintf_r+0x130>
 80052ba:	7863      	ldrb	r3, [r4, #1]
 80052bc:	2b2a      	cmp	r3, #42	; 0x2a
 80052be:	d135      	bne.n	800532c <_svfiprintf_r+0x188>
 80052c0:	9b03      	ldr	r3, [sp, #12]
 80052c2:	3402      	adds	r4, #2
 80052c4:	1d1a      	adds	r2, r3, #4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	9203      	str	r2, [sp, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bfb8      	it	lt
 80052ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80052d2:	9305      	str	r3, [sp, #20]
 80052d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80053a0 <_svfiprintf_r+0x1fc>
 80052d8:	2203      	movs	r2, #3
 80052da:	4650      	mov	r0, sl
 80052dc:	7821      	ldrb	r1, [r4, #0]
 80052de:	f000 f9f9 	bl	80056d4 <memchr>
 80052e2:	b140      	cbz	r0, 80052f6 <_svfiprintf_r+0x152>
 80052e4:	2340      	movs	r3, #64	; 0x40
 80052e6:	eba0 000a 	sub.w	r0, r0, sl
 80052ea:	fa03 f000 	lsl.w	r0, r3, r0
 80052ee:	9b04      	ldr	r3, [sp, #16]
 80052f0:	3401      	adds	r4, #1
 80052f2:	4303      	orrs	r3, r0
 80052f4:	9304      	str	r3, [sp, #16]
 80052f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052fa:	2206      	movs	r2, #6
 80052fc:	4825      	ldr	r0, [pc, #148]	; (8005394 <_svfiprintf_r+0x1f0>)
 80052fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005302:	f000 f9e7 	bl	80056d4 <memchr>
 8005306:	2800      	cmp	r0, #0
 8005308:	d038      	beq.n	800537c <_svfiprintf_r+0x1d8>
 800530a:	4b23      	ldr	r3, [pc, #140]	; (8005398 <_svfiprintf_r+0x1f4>)
 800530c:	bb1b      	cbnz	r3, 8005356 <_svfiprintf_r+0x1b2>
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	3307      	adds	r3, #7
 8005312:	f023 0307 	bic.w	r3, r3, #7
 8005316:	3308      	adds	r3, #8
 8005318:	9303      	str	r3, [sp, #12]
 800531a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800531c:	4433      	add	r3, r6
 800531e:	9309      	str	r3, [sp, #36]	; 0x24
 8005320:	e767      	b.n	80051f2 <_svfiprintf_r+0x4e>
 8005322:	460c      	mov	r4, r1
 8005324:	2001      	movs	r0, #1
 8005326:	fb0c 3202 	mla	r2, ip, r2, r3
 800532a:	e7a5      	b.n	8005278 <_svfiprintf_r+0xd4>
 800532c:	2300      	movs	r3, #0
 800532e:	f04f 0c0a 	mov.w	ip, #10
 8005332:	4619      	mov	r1, r3
 8005334:	3401      	adds	r4, #1
 8005336:	9305      	str	r3, [sp, #20]
 8005338:	4620      	mov	r0, r4
 800533a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800533e:	3a30      	subs	r2, #48	; 0x30
 8005340:	2a09      	cmp	r2, #9
 8005342:	d903      	bls.n	800534c <_svfiprintf_r+0x1a8>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0c5      	beq.n	80052d4 <_svfiprintf_r+0x130>
 8005348:	9105      	str	r1, [sp, #20]
 800534a:	e7c3      	b.n	80052d4 <_svfiprintf_r+0x130>
 800534c:	4604      	mov	r4, r0
 800534e:	2301      	movs	r3, #1
 8005350:	fb0c 2101 	mla	r1, ip, r1, r2
 8005354:	e7f0      	b.n	8005338 <_svfiprintf_r+0x194>
 8005356:	ab03      	add	r3, sp, #12
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	462a      	mov	r2, r5
 800535c:	4638      	mov	r0, r7
 800535e:	4b0f      	ldr	r3, [pc, #60]	; (800539c <_svfiprintf_r+0x1f8>)
 8005360:	a904      	add	r1, sp, #16
 8005362:	f3af 8000 	nop.w
 8005366:	1c42      	adds	r2, r0, #1
 8005368:	4606      	mov	r6, r0
 800536a:	d1d6      	bne.n	800531a <_svfiprintf_r+0x176>
 800536c:	89ab      	ldrh	r3, [r5, #12]
 800536e:	065b      	lsls	r3, r3, #25
 8005370:	f53f af2c 	bmi.w	80051cc <_svfiprintf_r+0x28>
 8005374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005376:	b01d      	add	sp, #116	; 0x74
 8005378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537c:	ab03      	add	r3, sp, #12
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	462a      	mov	r2, r5
 8005382:	4638      	mov	r0, r7
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <_svfiprintf_r+0x1f8>)
 8005386:	a904      	add	r1, sp, #16
 8005388:	f000 f87c 	bl	8005484 <_printf_i>
 800538c:	e7eb      	b.n	8005366 <_svfiprintf_r+0x1c2>
 800538e:	bf00      	nop
 8005390:	08005f99 	.word	0x08005f99
 8005394:	08005fa3 	.word	0x08005fa3
 8005398:	00000000 	.word	0x00000000
 800539c:	080050ed 	.word	0x080050ed
 80053a0:	08005f9f 	.word	0x08005f9f

080053a4 <_printf_common>:
 80053a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a8:	4616      	mov	r6, r2
 80053aa:	4699      	mov	r9, r3
 80053ac:	688a      	ldr	r2, [r1, #8]
 80053ae:	690b      	ldr	r3, [r1, #16]
 80053b0:	4607      	mov	r7, r0
 80053b2:	4293      	cmp	r3, r2
 80053b4:	bfb8      	it	lt
 80053b6:	4613      	movlt	r3, r2
 80053b8:	6033      	str	r3, [r6, #0]
 80053ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053be:	460c      	mov	r4, r1
 80053c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053c4:	b10a      	cbz	r2, 80053ca <_printf_common+0x26>
 80053c6:	3301      	adds	r3, #1
 80053c8:	6033      	str	r3, [r6, #0]
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	0699      	lsls	r1, r3, #26
 80053ce:	bf42      	ittt	mi
 80053d0:	6833      	ldrmi	r3, [r6, #0]
 80053d2:	3302      	addmi	r3, #2
 80053d4:	6033      	strmi	r3, [r6, #0]
 80053d6:	6825      	ldr	r5, [r4, #0]
 80053d8:	f015 0506 	ands.w	r5, r5, #6
 80053dc:	d106      	bne.n	80053ec <_printf_common+0x48>
 80053de:	f104 0a19 	add.w	sl, r4, #25
 80053e2:	68e3      	ldr	r3, [r4, #12]
 80053e4:	6832      	ldr	r2, [r6, #0]
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	42ab      	cmp	r3, r5
 80053ea:	dc28      	bgt.n	800543e <_printf_common+0x9a>
 80053ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053f0:	1e13      	subs	r3, r2, #0
 80053f2:	6822      	ldr	r2, [r4, #0]
 80053f4:	bf18      	it	ne
 80053f6:	2301      	movne	r3, #1
 80053f8:	0692      	lsls	r2, r2, #26
 80053fa:	d42d      	bmi.n	8005458 <_printf_common+0xb4>
 80053fc:	4649      	mov	r1, r9
 80053fe:	4638      	mov	r0, r7
 8005400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005404:	47c0      	blx	r8
 8005406:	3001      	adds	r0, #1
 8005408:	d020      	beq.n	800544c <_printf_common+0xa8>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	68e5      	ldr	r5, [r4, #12]
 800540e:	f003 0306 	and.w	r3, r3, #6
 8005412:	2b04      	cmp	r3, #4
 8005414:	bf18      	it	ne
 8005416:	2500      	movne	r5, #0
 8005418:	6832      	ldr	r2, [r6, #0]
 800541a:	f04f 0600 	mov.w	r6, #0
 800541e:	68a3      	ldr	r3, [r4, #8]
 8005420:	bf08      	it	eq
 8005422:	1aad      	subeq	r5, r5, r2
 8005424:	6922      	ldr	r2, [r4, #16]
 8005426:	bf08      	it	eq
 8005428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800542c:	4293      	cmp	r3, r2
 800542e:	bfc4      	itt	gt
 8005430:	1a9b      	subgt	r3, r3, r2
 8005432:	18ed      	addgt	r5, r5, r3
 8005434:	341a      	adds	r4, #26
 8005436:	42b5      	cmp	r5, r6
 8005438:	d11a      	bne.n	8005470 <_printf_common+0xcc>
 800543a:	2000      	movs	r0, #0
 800543c:	e008      	b.n	8005450 <_printf_common+0xac>
 800543e:	2301      	movs	r3, #1
 8005440:	4652      	mov	r2, sl
 8005442:	4649      	mov	r1, r9
 8005444:	4638      	mov	r0, r7
 8005446:	47c0      	blx	r8
 8005448:	3001      	adds	r0, #1
 800544a:	d103      	bne.n	8005454 <_printf_common+0xb0>
 800544c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005454:	3501      	adds	r5, #1
 8005456:	e7c4      	b.n	80053e2 <_printf_common+0x3e>
 8005458:	2030      	movs	r0, #48	; 0x30
 800545a:	18e1      	adds	r1, r4, r3
 800545c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005466:	4422      	add	r2, r4
 8005468:	3302      	adds	r3, #2
 800546a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800546e:	e7c5      	b.n	80053fc <_printf_common+0x58>
 8005470:	2301      	movs	r3, #1
 8005472:	4622      	mov	r2, r4
 8005474:	4649      	mov	r1, r9
 8005476:	4638      	mov	r0, r7
 8005478:	47c0      	blx	r8
 800547a:	3001      	adds	r0, #1
 800547c:	d0e6      	beq.n	800544c <_printf_common+0xa8>
 800547e:	3601      	adds	r6, #1
 8005480:	e7d9      	b.n	8005436 <_printf_common+0x92>
	...

08005484 <_printf_i>:
 8005484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	460c      	mov	r4, r1
 800548a:	7e27      	ldrb	r7, [r4, #24]
 800548c:	4691      	mov	r9, r2
 800548e:	2f78      	cmp	r7, #120	; 0x78
 8005490:	4680      	mov	r8, r0
 8005492:	469a      	mov	sl, r3
 8005494:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005496:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800549a:	d807      	bhi.n	80054ac <_printf_i+0x28>
 800549c:	2f62      	cmp	r7, #98	; 0x62
 800549e:	d80a      	bhi.n	80054b6 <_printf_i+0x32>
 80054a0:	2f00      	cmp	r7, #0
 80054a2:	f000 80d9 	beq.w	8005658 <_printf_i+0x1d4>
 80054a6:	2f58      	cmp	r7, #88	; 0x58
 80054a8:	f000 80a4 	beq.w	80055f4 <_printf_i+0x170>
 80054ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054b4:	e03a      	b.n	800552c <_printf_i+0xa8>
 80054b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ba:	2b15      	cmp	r3, #21
 80054bc:	d8f6      	bhi.n	80054ac <_printf_i+0x28>
 80054be:	a001      	add	r0, pc, #4	; (adr r0, 80054c4 <_printf_i+0x40>)
 80054c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054c4:	0800551d 	.word	0x0800551d
 80054c8:	08005531 	.word	0x08005531
 80054cc:	080054ad 	.word	0x080054ad
 80054d0:	080054ad 	.word	0x080054ad
 80054d4:	080054ad 	.word	0x080054ad
 80054d8:	080054ad 	.word	0x080054ad
 80054dc:	08005531 	.word	0x08005531
 80054e0:	080054ad 	.word	0x080054ad
 80054e4:	080054ad 	.word	0x080054ad
 80054e8:	080054ad 	.word	0x080054ad
 80054ec:	080054ad 	.word	0x080054ad
 80054f0:	0800563f 	.word	0x0800563f
 80054f4:	08005561 	.word	0x08005561
 80054f8:	08005621 	.word	0x08005621
 80054fc:	080054ad 	.word	0x080054ad
 8005500:	080054ad 	.word	0x080054ad
 8005504:	08005661 	.word	0x08005661
 8005508:	080054ad 	.word	0x080054ad
 800550c:	08005561 	.word	0x08005561
 8005510:	080054ad 	.word	0x080054ad
 8005514:	080054ad 	.word	0x080054ad
 8005518:	08005629 	.word	0x08005629
 800551c:	680b      	ldr	r3, [r1, #0]
 800551e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005522:	1d1a      	adds	r2, r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	600a      	str	r2, [r1, #0]
 8005528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800552c:	2301      	movs	r3, #1
 800552e:	e0a4      	b.n	800567a <_printf_i+0x1f6>
 8005530:	6825      	ldr	r5, [r4, #0]
 8005532:	6808      	ldr	r0, [r1, #0]
 8005534:	062e      	lsls	r6, r5, #24
 8005536:	f100 0304 	add.w	r3, r0, #4
 800553a:	d50a      	bpl.n	8005552 <_printf_i+0xce>
 800553c:	6805      	ldr	r5, [r0, #0]
 800553e:	600b      	str	r3, [r1, #0]
 8005540:	2d00      	cmp	r5, #0
 8005542:	da03      	bge.n	800554c <_printf_i+0xc8>
 8005544:	232d      	movs	r3, #45	; 0x2d
 8005546:	426d      	negs	r5, r5
 8005548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800554c:	230a      	movs	r3, #10
 800554e:	485e      	ldr	r0, [pc, #376]	; (80056c8 <_printf_i+0x244>)
 8005550:	e019      	b.n	8005586 <_printf_i+0x102>
 8005552:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005556:	6805      	ldr	r5, [r0, #0]
 8005558:	600b      	str	r3, [r1, #0]
 800555a:	bf18      	it	ne
 800555c:	b22d      	sxthne	r5, r5
 800555e:	e7ef      	b.n	8005540 <_printf_i+0xbc>
 8005560:	680b      	ldr	r3, [r1, #0]
 8005562:	6825      	ldr	r5, [r4, #0]
 8005564:	1d18      	adds	r0, r3, #4
 8005566:	6008      	str	r0, [r1, #0]
 8005568:	0628      	lsls	r0, r5, #24
 800556a:	d501      	bpl.n	8005570 <_printf_i+0xec>
 800556c:	681d      	ldr	r5, [r3, #0]
 800556e:	e002      	b.n	8005576 <_printf_i+0xf2>
 8005570:	0669      	lsls	r1, r5, #25
 8005572:	d5fb      	bpl.n	800556c <_printf_i+0xe8>
 8005574:	881d      	ldrh	r5, [r3, #0]
 8005576:	2f6f      	cmp	r7, #111	; 0x6f
 8005578:	bf0c      	ite	eq
 800557a:	2308      	moveq	r3, #8
 800557c:	230a      	movne	r3, #10
 800557e:	4852      	ldr	r0, [pc, #328]	; (80056c8 <_printf_i+0x244>)
 8005580:	2100      	movs	r1, #0
 8005582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005586:	6866      	ldr	r6, [r4, #4]
 8005588:	2e00      	cmp	r6, #0
 800558a:	bfa8      	it	ge
 800558c:	6821      	ldrge	r1, [r4, #0]
 800558e:	60a6      	str	r6, [r4, #8]
 8005590:	bfa4      	itt	ge
 8005592:	f021 0104 	bicge.w	r1, r1, #4
 8005596:	6021      	strge	r1, [r4, #0]
 8005598:	b90d      	cbnz	r5, 800559e <_printf_i+0x11a>
 800559a:	2e00      	cmp	r6, #0
 800559c:	d04d      	beq.n	800563a <_printf_i+0x1b6>
 800559e:	4616      	mov	r6, r2
 80055a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80055a4:	fb03 5711 	mls	r7, r3, r1, r5
 80055a8:	5dc7      	ldrb	r7, [r0, r7]
 80055aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055ae:	462f      	mov	r7, r5
 80055b0:	42bb      	cmp	r3, r7
 80055b2:	460d      	mov	r5, r1
 80055b4:	d9f4      	bls.n	80055a0 <_printf_i+0x11c>
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d10b      	bne.n	80055d2 <_printf_i+0x14e>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	07df      	lsls	r7, r3, #31
 80055be:	d508      	bpl.n	80055d2 <_printf_i+0x14e>
 80055c0:	6923      	ldr	r3, [r4, #16]
 80055c2:	6861      	ldr	r1, [r4, #4]
 80055c4:	4299      	cmp	r1, r3
 80055c6:	bfde      	ittt	le
 80055c8:	2330      	movle	r3, #48	; 0x30
 80055ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055ce:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80055d2:	1b92      	subs	r2, r2, r6
 80055d4:	6122      	str	r2, [r4, #16]
 80055d6:	464b      	mov	r3, r9
 80055d8:	4621      	mov	r1, r4
 80055da:	4640      	mov	r0, r8
 80055dc:	f8cd a000 	str.w	sl, [sp]
 80055e0:	aa03      	add	r2, sp, #12
 80055e2:	f7ff fedf 	bl	80053a4 <_printf_common>
 80055e6:	3001      	adds	r0, #1
 80055e8:	d14c      	bne.n	8005684 <_printf_i+0x200>
 80055ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055ee:	b004      	add	sp, #16
 80055f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f4:	4834      	ldr	r0, [pc, #208]	; (80056c8 <_printf_i+0x244>)
 80055f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055fa:	680e      	ldr	r6, [r1, #0]
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005602:	061f      	lsls	r7, r3, #24
 8005604:	600e      	str	r6, [r1, #0]
 8005606:	d514      	bpl.n	8005632 <_printf_i+0x1ae>
 8005608:	07d9      	lsls	r1, r3, #31
 800560a:	bf44      	itt	mi
 800560c:	f043 0320 	orrmi.w	r3, r3, #32
 8005610:	6023      	strmi	r3, [r4, #0]
 8005612:	b91d      	cbnz	r5, 800561c <_printf_i+0x198>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	f023 0320 	bic.w	r3, r3, #32
 800561a:	6023      	str	r3, [r4, #0]
 800561c:	2310      	movs	r3, #16
 800561e:	e7af      	b.n	8005580 <_printf_i+0xfc>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	f043 0320 	orr.w	r3, r3, #32
 8005626:	6023      	str	r3, [r4, #0]
 8005628:	2378      	movs	r3, #120	; 0x78
 800562a:	4828      	ldr	r0, [pc, #160]	; (80056cc <_printf_i+0x248>)
 800562c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005630:	e7e3      	b.n	80055fa <_printf_i+0x176>
 8005632:	065e      	lsls	r6, r3, #25
 8005634:	bf48      	it	mi
 8005636:	b2ad      	uxthmi	r5, r5
 8005638:	e7e6      	b.n	8005608 <_printf_i+0x184>
 800563a:	4616      	mov	r6, r2
 800563c:	e7bb      	b.n	80055b6 <_printf_i+0x132>
 800563e:	680b      	ldr	r3, [r1, #0]
 8005640:	6826      	ldr	r6, [r4, #0]
 8005642:	1d1d      	adds	r5, r3, #4
 8005644:	6960      	ldr	r0, [r4, #20]
 8005646:	600d      	str	r5, [r1, #0]
 8005648:	0635      	lsls	r5, r6, #24
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	d501      	bpl.n	8005652 <_printf_i+0x1ce>
 800564e:	6018      	str	r0, [r3, #0]
 8005650:	e002      	b.n	8005658 <_printf_i+0x1d4>
 8005652:	0671      	lsls	r1, r6, #25
 8005654:	d5fb      	bpl.n	800564e <_printf_i+0x1ca>
 8005656:	8018      	strh	r0, [r3, #0]
 8005658:	2300      	movs	r3, #0
 800565a:	4616      	mov	r6, r2
 800565c:	6123      	str	r3, [r4, #16]
 800565e:	e7ba      	b.n	80055d6 <_printf_i+0x152>
 8005660:	680b      	ldr	r3, [r1, #0]
 8005662:	1d1a      	adds	r2, r3, #4
 8005664:	600a      	str	r2, [r1, #0]
 8005666:	681e      	ldr	r6, [r3, #0]
 8005668:	2100      	movs	r1, #0
 800566a:	4630      	mov	r0, r6
 800566c:	6862      	ldr	r2, [r4, #4]
 800566e:	f000 f831 	bl	80056d4 <memchr>
 8005672:	b108      	cbz	r0, 8005678 <_printf_i+0x1f4>
 8005674:	1b80      	subs	r0, r0, r6
 8005676:	6060      	str	r0, [r4, #4]
 8005678:	6863      	ldr	r3, [r4, #4]
 800567a:	6123      	str	r3, [r4, #16]
 800567c:	2300      	movs	r3, #0
 800567e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005682:	e7a8      	b.n	80055d6 <_printf_i+0x152>
 8005684:	4632      	mov	r2, r6
 8005686:	4649      	mov	r1, r9
 8005688:	4640      	mov	r0, r8
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	47d0      	blx	sl
 800568e:	3001      	adds	r0, #1
 8005690:	d0ab      	beq.n	80055ea <_printf_i+0x166>
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	079b      	lsls	r3, r3, #30
 8005696:	d413      	bmi.n	80056c0 <_printf_i+0x23c>
 8005698:	68e0      	ldr	r0, [r4, #12]
 800569a:	9b03      	ldr	r3, [sp, #12]
 800569c:	4298      	cmp	r0, r3
 800569e:	bfb8      	it	lt
 80056a0:	4618      	movlt	r0, r3
 80056a2:	e7a4      	b.n	80055ee <_printf_i+0x16a>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4632      	mov	r2, r6
 80056a8:	4649      	mov	r1, r9
 80056aa:	4640      	mov	r0, r8
 80056ac:	47d0      	blx	sl
 80056ae:	3001      	adds	r0, #1
 80056b0:	d09b      	beq.n	80055ea <_printf_i+0x166>
 80056b2:	3501      	adds	r5, #1
 80056b4:	68e3      	ldr	r3, [r4, #12]
 80056b6:	9903      	ldr	r1, [sp, #12]
 80056b8:	1a5b      	subs	r3, r3, r1
 80056ba:	42ab      	cmp	r3, r5
 80056bc:	dcf2      	bgt.n	80056a4 <_printf_i+0x220>
 80056be:	e7eb      	b.n	8005698 <_printf_i+0x214>
 80056c0:	2500      	movs	r5, #0
 80056c2:	f104 0619 	add.w	r6, r4, #25
 80056c6:	e7f5      	b.n	80056b4 <_printf_i+0x230>
 80056c8:	08005faa 	.word	0x08005faa
 80056cc:	08005fbb 	.word	0x08005fbb

080056d0 <__retarget_lock_acquire_recursive>:
 80056d0:	4770      	bx	lr

080056d2 <__retarget_lock_release_recursive>:
 80056d2:	4770      	bx	lr

080056d4 <memchr>:
 80056d4:	4603      	mov	r3, r0
 80056d6:	b510      	push	{r4, lr}
 80056d8:	b2c9      	uxtb	r1, r1
 80056da:	4402      	add	r2, r0
 80056dc:	4293      	cmp	r3, r2
 80056de:	4618      	mov	r0, r3
 80056e0:	d101      	bne.n	80056e6 <memchr+0x12>
 80056e2:	2000      	movs	r0, #0
 80056e4:	e003      	b.n	80056ee <memchr+0x1a>
 80056e6:	7804      	ldrb	r4, [r0, #0]
 80056e8:	3301      	adds	r3, #1
 80056ea:	428c      	cmp	r4, r1
 80056ec:	d1f6      	bne.n	80056dc <memchr+0x8>
 80056ee:	bd10      	pop	{r4, pc}

080056f0 <memmove>:
 80056f0:	4288      	cmp	r0, r1
 80056f2:	b510      	push	{r4, lr}
 80056f4:	eb01 0402 	add.w	r4, r1, r2
 80056f8:	d902      	bls.n	8005700 <memmove+0x10>
 80056fa:	4284      	cmp	r4, r0
 80056fc:	4623      	mov	r3, r4
 80056fe:	d807      	bhi.n	8005710 <memmove+0x20>
 8005700:	1e43      	subs	r3, r0, #1
 8005702:	42a1      	cmp	r1, r4
 8005704:	d008      	beq.n	8005718 <memmove+0x28>
 8005706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800570a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800570e:	e7f8      	b.n	8005702 <memmove+0x12>
 8005710:	4601      	mov	r1, r0
 8005712:	4402      	add	r2, r0
 8005714:	428a      	cmp	r2, r1
 8005716:	d100      	bne.n	800571a <memmove+0x2a>
 8005718:	bd10      	pop	{r4, pc}
 800571a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800571e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005722:	e7f7      	b.n	8005714 <memmove+0x24>

08005724 <_realloc_r>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	4607      	mov	r7, r0
 8005728:	4614      	mov	r4, r2
 800572a:	460e      	mov	r6, r1
 800572c:	b921      	cbnz	r1, 8005738 <_realloc_r+0x14>
 800572e:	4611      	mov	r1, r2
 8005730:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005734:	f7ff bbf2 	b.w	8004f1c <_malloc_r>
 8005738:	b922      	cbnz	r2, 8005744 <_realloc_r+0x20>
 800573a:	f7ff fba3 	bl	8004e84 <_free_r>
 800573e:	4625      	mov	r5, r4
 8005740:	4628      	mov	r0, r5
 8005742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005744:	f000 f814 	bl	8005770 <_malloc_usable_size_r>
 8005748:	42a0      	cmp	r0, r4
 800574a:	d20f      	bcs.n	800576c <_realloc_r+0x48>
 800574c:	4621      	mov	r1, r4
 800574e:	4638      	mov	r0, r7
 8005750:	f7ff fbe4 	bl	8004f1c <_malloc_r>
 8005754:	4605      	mov	r5, r0
 8005756:	2800      	cmp	r0, #0
 8005758:	d0f2      	beq.n	8005740 <_realloc_r+0x1c>
 800575a:	4631      	mov	r1, r6
 800575c:	4622      	mov	r2, r4
 800575e:	f7ff fb7b 	bl	8004e58 <memcpy>
 8005762:	4631      	mov	r1, r6
 8005764:	4638      	mov	r0, r7
 8005766:	f7ff fb8d 	bl	8004e84 <_free_r>
 800576a:	e7e9      	b.n	8005740 <_realloc_r+0x1c>
 800576c:	4635      	mov	r5, r6
 800576e:	e7e7      	b.n	8005740 <_realloc_r+0x1c>

08005770 <_malloc_usable_size_r>:
 8005770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005774:	1f18      	subs	r0, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	bfbc      	itt	lt
 800577a:	580b      	ldrlt	r3, [r1, r0]
 800577c:	18c0      	addlt	r0, r0, r3
 800577e:	4770      	bx	lr

08005780 <_init>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	bf00      	nop
 8005784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005786:	bc08      	pop	{r3}
 8005788:	469e      	mov	lr, r3
 800578a:	4770      	bx	lr

0800578c <_fini>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	bf00      	nop
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr
