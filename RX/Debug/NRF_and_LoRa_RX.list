
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006890  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000980  0800699c  0800699c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800731c  0800731c  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  0800731c  0800731c  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800731c  0800731c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800731c  0800731c  0001731c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007320  08007320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08007324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  20000034  08007358  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a08  08007358  00020a08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017216  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e10  00000000  00000000  00037273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0003a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019683  00000000  00000000  0003c600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a2c  00000000  00000000  00055c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff17  00000000  00000000  0006d6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd5c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000511c  00000000  00000000  000fd61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08006984 	.word	0x08006984

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08006984 	.word	0x08006984

0800014c <init_lora>:



//----------------------------------------------------------------------------------------
bool init_lora(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	static uint8_t data[10] = {0};
	set_config_deep_sleep_mode();
 8000150:	f000 f862 	bl	8000218 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 8000154:	2064      	movs	r0, #100	; 0x64
 8000156:	f003 f8f9 	bl	800334c <HAL_Delay>

	data[0] = 0xC0;
 800015a:	4b1e      	ldr	r3, [pc, #120]	; (80001d4 <init_lora+0x88>)
 800015c:	22c0      	movs	r2, #192	; 0xc0
 800015e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8000160:	4b1c      	ldr	r3, [pc, #112]	; (80001d4 <init_lora+0x88>)
 8000162:	2200      	movs	r2, #0
 8000164:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 8000166:	4b1b      	ldr	r3, [pc, #108]	; (80001d4 <init_lora+0x88>)
 8000168:	2203      	movs	r2, #3
 800016a:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 800016c:	4b19      	ldr	r3, [pc, #100]	; (80001d4 <init_lora+0x88>)
 800016e:	2212      	movs	r2, #18
 8000170:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 8000172:	4b18      	ldr	r3, [pc, #96]	; (80001d4 <init_lora+0x88>)
 8000174:	2234      	movs	r2, #52	; 0x34
 8000176:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register ()
 8000178:	4b16      	ldr	r3, [pc, #88]	; (80001d4 <init_lora+0x88>)
 800017a:	2262      	movs	r2, #98	; 0x62
 800017c:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 800017e:	2206      	movs	r2, #6
 8000180:	4914      	ldr	r1, [pc, #80]	; (80001d4 <init_lora+0x88>)
 8000182:	4815      	ldr	r0, [pc, #84]	; (80001d8 <init_lora+0x8c>)
 8000184:	f005 ff07 	bl	8005f96 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000188:	2064      	movs	r0, #100	; 0x64
 800018a:	f003 f8df 	bl	800334c <HAL_Delay>

	memset(data, 0, sizeof(data));
 800018e:	220a      	movs	r2, #10
 8000190:	2100      	movs	r1, #0
 8000192:	4810      	ldr	r0, [pc, #64]	; (80001d4 <init_lora+0x88>)
 8000194:	f006 fb90 	bl	80068b8 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 8000198:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <init_lora+0x88>)
 800019a:	22c0      	movs	r2, #192	; 0xc0
 800019c:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 800019e:	4b0d      	ldr	r3, [pc, #52]	; (80001d4 <init_lora+0x88>)
 80001a0:	2205      	movs	r2, #5
 80001a2:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 80001a4:	4b0b      	ldr	r3, [pc, #44]	; (80001d4 <init_lora+0x88>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 80001aa:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <init_lora+0x88>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 80001b0:	2204      	movs	r2, #4
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <init_lora+0x88>)
 80001b4:	4808      	ldr	r0, [pc, #32]	; (80001d8 <init_lora+0x8c>)
 80001b6:	f005 feee 	bl	8005f96 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80001ba:	2064      	movs	r0, #100	; 0x64
 80001bc:	f003 f8c6 	bl	800334c <HAL_Delay>

	read_settings_from_module();
 80001c0:	f000 f80c 	bl	80001dc <read_settings_from_module>

	set_WOR_RX_mode();
 80001c4:	f000 f83a 	bl	800023c <set_WOR_RX_mode>

	HAL_Delay(100);
 80001c8:	2064      	movs	r0, #100	; 0x64
 80001ca:	f003 f8bf 	bl	800334c <HAL_Delay>
}
 80001ce:	bf00      	nop
 80001d0:	4618      	mov	r0, r3
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000050 	.word	0x20000050
 80001d8:	20000554 	.word	0x20000554

080001dc <read_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_settings_from_module(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 80001e0:	f000 f81a 	bl	8000218 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 80001e4:	200a      	movs	r0, #10
 80001e6:	f003 f8b1 	bl	800334c <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;
 80001ea:	4b09      	ldr	r3, [pc, #36]	; (8000210 <read_settings_from_module+0x34>)
 80001ec:	22c1      	movs	r2, #193	; 0xc1
 80001ee:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <read_settings_from_module+0x34>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;
 80001f6:	4b06      	ldr	r3, [pc, #24]	; (8000210 <read_settings_from_module+0x34>)
 80001f8:	2208      	movs	r2, #8
 80001fa:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 80001fc:	2203      	movs	r2, #3
 80001fe:	4904      	ldr	r1, [pc, #16]	; (8000210 <read_settings_from_module+0x34>)
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <read_settings_from_module+0x38>)
 8000202:	f005 fec8 	bl	8005f96 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000206:	2064      	movs	r0, #100	; 0x64
 8000208:	f003 f8a0 	bl	800334c <HAL_Delay>
	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate

	return true;
 800020c:	bf00      	nop
}
 800020e:	bd80      	pop	{r7, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	20000554 	.word	0x20000554

08000218 <set_config_deep_sleep_mode>:
//-------------------------------------------------------------------------------------------------
void set_config_deep_sleep_mode (void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	// Function use for go to deep sleep and configuration mode
	// Set M0 and M1 PINs
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000222:	4805      	ldr	r0, [pc, #20]	; (8000238 <set_config_deep_sleep_mode+0x20>)
 8000224:	f003 fc0f 	bl	8003a46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	2101      	movs	r1, #1
 800022c:	4802      	ldr	r0, [pc, #8]	; (8000238 <set_config_deep_sleep_mode+0x20>)
 800022e:	f003 fc0a 	bl	8003a46 <HAL_GPIO_WritePin>
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40010c00 	.word	0x40010c00

0800023c <set_WOR_RX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_RX_mode (void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Receiving mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4805      	ldr	r0, [pc, #20]	; (800025c <set_WOR_RX_mode+0x20>)
 8000248:	f003 fbfd 	bl	8003a46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	2101      	movs	r1, #1
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <set_WOR_RX_mode+0x20>)
 8000252:	f003 fbf8 	bl	8003a46 <HAL_GPIO_WritePin>
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40010c00 	.word	0x40010c00

08000260 <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <DelayMicro+0x3c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <DelayMicro+0x3c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a0b      	ldr	r2, [pc, #44]	; (80002a0 <DelayMicro+0x40>)
 8000274:	fba2 2303 	umull	r2, r3, r2, r3
 8000278:	0ddb      	lsrs	r3, r3, #23
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	fb02 f303 	mul.w	r3, r2, r3
 8000280:	607b      	str	r3, [r7, #4]
	while (micros--);
 8000282:	bf00      	nop
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	1e5a      	subs	r2, r3, #1
 8000288:	607a      	str	r2, [r7, #4]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1fa      	bne.n	8000284 <DelayMicro+0x24>
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000010 	.word	0x20000010
 80002a0:	ffa71ee7 	.word	0xffa71ee7

080002a4 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af02      	add	r7, sp, #8
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 80002ae:	2300      	movs	r3, #0
 80002b0:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 80002b2:	2200      	movs	r2, #0
 80002b4:	2110      	movs	r1, #16
 80002b6:	4813      	ldr	r0, [pc, #76]	; (8000304 <NRF24_ReadReg+0x60>)
 80002b8:	f003 fbc5 	bl	8003a46 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80002bc:	f107 020f 	add.w	r2, r7, #15
 80002c0:	1df9      	adds	r1, r7, #7
 80002c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2301      	movs	r3, #1
 80002ca:	480f      	ldr	r0, [pc, #60]	; (8000308 <NRF24_ReadReg+0x64>)
 80002cc:	f004 ff49 	bl	8005162 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	2b07      	cmp	r3, #7
 80002d4:	d00c      	beq.n	80002f0 <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80002d6:	23ff      	movs	r3, #255	; 0xff
 80002d8:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80002da:	f107 020f 	add.w	r2, r7, #15
 80002de:	f107 010e 	add.w	r1, r7, #14
 80002e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2301      	movs	r3, #1
 80002ea:	4807      	ldr	r0, [pc, #28]	; (8000308 <NRF24_ReadReg+0x64>)
 80002ec:	f004 ff39 	bl	8005162 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80002f0:	2201      	movs	r2, #1
 80002f2:	2110      	movs	r1, #16
 80002f4:	4803      	ldr	r0, [pc, #12]	; (8000304 <NRF24_ReadReg+0x60>)
 80002f6:	f003 fba6 	bl	8003a46 <HAL_GPIO_WritePin>
  return dt;
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40010800 	.word	0x40010800
 8000308:	200005e0 	.word	0x200005e0

0800030c <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	b2db      	uxtb	r3, r3
 8000324:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000326:	2200      	movs	r2, #0
 8000328:	2110      	movs	r1, #16
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <NRF24_WriteReg+0x54>)
 800032c:	f003 fb8b 	bl	8003a46 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000330:	1df9      	adds	r1, r7, #7
 8000332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000336:	2201      	movs	r2, #1
 8000338:	480a      	ldr	r0, [pc, #40]	; (8000364 <NRF24_WriteReg+0x58>)
 800033a:	f004 fcc5 	bl	8004cc8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800033e:	1db9      	adds	r1, r7, #6
 8000340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000344:	2201      	movs	r2, #1
 8000346:	4807      	ldr	r0, [pc, #28]	; (8000364 <NRF24_WriteReg+0x58>)
 8000348:	f004 fcbe 	bl	8004cc8 <HAL_SPI_Transmit>
  CS_OFF;
 800034c:	2201      	movs	r2, #1
 800034e:	2110      	movs	r1, #16
 8000350:	4803      	ldr	r0, [pc, #12]	; (8000360 <NRF24_WriteReg+0x54>)
 8000352:	f003 fb78 	bl	8003a46 <HAL_GPIO_WritePin>
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40010800 	.word	0x40010800
 8000364:	200005e0 	.word	0x200005e0

08000368 <NRF24_Read_Buf>:
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
  CS_OFF;
}
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	6039      	str	r1, [r7, #0]
 8000372:	71fb      	strb	r3, [r7, #7]
 8000374:	4613      	mov	r3, r2
 8000376:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000378:	2200      	movs	r2, #0
 800037a:	2110      	movs	r1, #16
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <NRF24_Read_Buf+0x4c>)
 800037e:	f003 fb62 	bl	8003a46 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000382:	1df9      	adds	r1, r7, #7
 8000384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000388:	2201      	movs	r2, #1
 800038a:	480b      	ldr	r0, [pc, #44]	; (80003b8 <NRF24_Read_Buf+0x50>)
 800038c:	f004 fc9c 	bl	8004cc8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	b29a      	uxth	r2, r3
 8000394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000398:	6839      	ldr	r1, [r7, #0]
 800039a:	4807      	ldr	r0, [pc, #28]	; (80003b8 <NRF24_Read_Buf+0x50>)
 800039c:	f004 fdd0 	bl	8004f40 <HAL_SPI_Receive>
  CS_OFF;
 80003a0:	2201      	movs	r2, #1
 80003a2:	2110      	movs	r1, #16
 80003a4:	4803      	ldr	r0, [pc, #12]	; (80003b4 <NRF24_Read_Buf+0x4c>)
 80003a6:	f003 fb4e 	bl	8003a46 <HAL_GPIO_WritePin>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40010800 	.word	0x40010800
 80003b8:	200005e0 	.word	0x200005e0

080003bc <IRQ_Callback>:
	status = read_config_registers();
	return status;
}
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 80003c2:	2301      	movs	r3, #1
 80003c4:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	4814      	ldr	r0, [pc, #80]	; (8000420 <IRQ_Callback+0x64>)
 80003d0:	f003 fb51 	bl	8003a76 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80003d4:	200a      	movs	r0, #10
 80003d6:	f7ff ff43 	bl	8000260 <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 80003da:	2007      	movs	r0, #7
 80003dc:	f7ff ff62 	bl	80002a4 <NRF24_ReadReg>
 80003e0:	4603      	mov	r3, r0
 80003e2:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d013      	beq.n	8000416 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	085b      	lsrs	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	f003 0307 	and.w	r3, r3, #7
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <IRQ_Callback+0x68>)
 80003fc:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80003fe:	220a      	movs	r2, #10
 8000400:	4909      	ldr	r1, [pc, #36]	; (8000428 <IRQ_Callback+0x6c>)
 8000402:	2061      	movs	r0, #97	; 0x61
 8000404:	f7ff ffb0 	bl	8000368 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 8000408:	2140      	movs	r1, #64	; 0x40
 800040a:	2007      	movs	r0, #7
 800040c:	f7ff ff7e 	bl	800030c <NRF24_WriteReg>
		rx_flag = 1;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <IRQ_Callback+0x70>)
 8000412:	2201      	movs	r2, #1
 8000414:	701a      	strb	r2, [r3, #0]
	}
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40011000 	.word	0x40011000
 8000424:	20000073 	.word	0x20000073
 8000428:	20000068 	.word	0x20000068
 800042c:	20000072 	.word	0x20000072

08000430 <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8000434:	2000      	movs	r0, #0
 8000436:	f000 f889 	bl	800054c <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 800043a:	f000 f8a9 	bl	8000590 <ssd1306_UpdateScreen>
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af04      	add	r7, sp, #16
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800044e:	230a      	movs	r3, #10
 8000450:	9302      	str	r3, [sp, #8]
 8000452:	2301      	movs	r3, #1
 8000454:	9301      	str	r3, [sp, #4]
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2301      	movs	r3, #1
 800045c:	2200      	movs	r2, #0
 800045e:	2178      	movs	r1, #120	; 0x78
 8000460:	4803      	ldr	r0, [pc, #12]	; (8000470 <ssd1306_WriteCommand+0x2c>)
 8000462:	f003 fc7d 	bl	8003d60 <HAL_I2C_Mem_Write>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000500 	.word	0x20000500

08000474 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000478:	2064      	movs	r0, #100	; 0x64
 800047a:	f002 ff67 	bl	800334c <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800047e:	20ae      	movs	r0, #174	; 0xae
 8000480:	f7ff ffe0 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000484:	2020      	movs	r0, #32
 8000486:	f7ff ffdd 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800048a:	2010      	movs	r0, #16
 800048c:	f7ff ffda 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000490:	20b0      	movs	r0, #176	; 0xb0
 8000492:	f7ff ffd7 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000496:	20c8      	movs	r0, #200	; 0xc8
 8000498:	f7ff ffd4 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 800049c:	2000      	movs	r0, #0
 800049e:	f7ff ffd1 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80004a2:	2010      	movs	r0, #16
 80004a4:	f7ff ffce 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80004a8:	2040      	movs	r0, #64	; 0x40
 80004aa:	f7ff ffcb 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80004ae:	2081      	movs	r0, #129	; 0x81
 80004b0:	f7ff ffc8 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80004b4:	20ff      	movs	r0, #255	; 0xff
 80004b6:	f7ff ffc5 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80004ba:	20a1      	movs	r0, #161	; 0xa1
 80004bc:	f7ff ffc2 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80004c0:	20a6      	movs	r0, #166	; 0xa6
 80004c2:	f7ff ffbf 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80004c6:	20a8      	movs	r0, #168	; 0xa8
 80004c8:	f7ff ffbc 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80004cc:	203f      	movs	r0, #63	; 0x3f
 80004ce:	f7ff ffb9 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80004d2:	20a4      	movs	r0, #164	; 0xa4
 80004d4:	f7ff ffb6 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80004d8:	20d3      	movs	r0, #211	; 0xd3
 80004da:	f7ff ffb3 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff ffb0 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80004e4:	20d5      	movs	r0, #213	; 0xd5
 80004e6:	f7ff ffad 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80004ea:	20f0      	movs	r0, #240	; 0xf0
 80004ec:	f7ff ffaa 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80004f0:	20d9      	movs	r0, #217	; 0xd9
 80004f2:	f7ff ffa7 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80004f6:	2022      	movs	r0, #34	; 0x22
 80004f8:	f7ff ffa4 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80004fc:	20da      	movs	r0, #218	; 0xda
 80004fe:	f7ff ffa1 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000502:	2012      	movs	r0, #18
 8000504:	f7ff ff9e 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000508:	20db      	movs	r0, #219	; 0xdb
 800050a:	f7ff ff9b 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800050e:	2020      	movs	r0, #32
 8000510:	f7ff ff98 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000514:	208d      	movs	r0, #141	; 0x8d
 8000516:	f7ff ff95 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800051a:	2014      	movs	r0, #20
 800051c:	f7ff ff92 	bl	8000444 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000520:	20af      	movs	r0, #175	; 0xaf
 8000522:	f7ff ff8f 	bl	8000444 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000526:	2000      	movs	r0, #0
 8000528:	f000 f810 	bl	800054c <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800052c:	f000 f830 	bl	8000590 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <ssd1306_Init+0xd4>)
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <ssd1306_Init+0xd4>)
 8000538:	2200      	movs	r2, #0
 800053a:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 800053c:	4b02      	ldr	r3, [pc, #8]	; (8000548 <ssd1306_Init+0xd4>)
 800053e:	2201      	movs	r2, #1
 8000540:	715a      	strb	r2, [r3, #5]

	return 1;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000474 	.word	0x20000474

0800054c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e00d      	b.n	8000578 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <ssd1306_Fill+0x1a>
 8000562:	2100      	movs	r1, #0
 8000564:	e000      	b.n	8000568 <ssd1306_Fill+0x1c>
 8000566:	21ff      	movs	r1, #255	; 0xff
 8000568:	4a08      	ldr	r2, [pc, #32]	; (800058c <ssd1306_Fill+0x40>)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	4413      	add	r3, r2
 800056e:	460a      	mov	r2, r1
 8000570:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3301      	adds	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800057e:	d3ed      	bcc.n	800055c <ssd1306_Fill+0x10>
	}
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	20000074 	.word	0x20000074

08000590 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	e01d      	b.n	80005d8 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	3b50      	subs	r3, #80	; 0x50
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff ff4e 	bl	8000444 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff ff4b 	bl	8000444 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80005ae:	2010      	movs	r0, #16
 80005b0:	f7ff ff48 	bl	8000444 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	01db      	lsls	r3, r3, #7
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <ssd1306_UpdateScreen+0x58>)
 80005ba:	4413      	add	r3, r2
 80005bc:	2264      	movs	r2, #100	; 0x64
 80005be:	9202      	str	r2, [sp, #8]
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	9201      	str	r2, [sp, #4]
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	2240      	movs	r2, #64	; 0x40
 80005ca:	2178      	movs	r1, #120	; 0x78
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <ssd1306_UpdateScreen+0x5c>)
 80005ce:	f003 fbc7 	bl	8003d60 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	3301      	adds	r3, #1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	d9de      	bls.n	800059c <ssd1306_UpdateScreen+0xc>
	}
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000074 	.word	0x20000074
 80005ec:	20000500 	.word	0x20000500

080005f0 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	460b      	mov	r3, r1
 80005fc:	71bb      	strb	r3, [r7, #6]
 80005fe:	4613      	mov	r3, r2
 8000600:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	db48      	blt.n	800069c <ssd1306_DrawPixel+0xac>
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	2b3f      	cmp	r3, #63	; 0x3f
 800060e:	d845      	bhi.n	800069c <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <ssd1306_DrawPixel+0xb8>)
 8000612:	791b      	ldrb	r3, [r3, #4]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d006      	beq.n	8000626 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000618:	797b      	ldrb	r3, [r7, #5]
 800061a:	2b00      	cmp	r3, #0
 800061c:	bf0c      	ite	eq
 800061e:	2301      	moveq	r3, #1
 8000620:	2300      	movne	r3, #0
 8000622:	b2db      	uxtb	r3, r3
 8000624:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000626:	797b      	ldrb	r3, [r7, #5]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d11a      	bne.n	8000662 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800062c:	79fa      	ldrb	r2, [r7, #7]
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	08db      	lsrs	r3, r3, #3
 8000632:	b2d8      	uxtb	r0, r3
 8000634:	4603      	mov	r3, r0
 8000636:	01db      	lsls	r3, r3, #7
 8000638:	4413      	add	r3, r2
 800063a:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <ssd1306_DrawPixel+0xbc>)
 800063c:	5cd3      	ldrb	r3, [r2, r3]
 800063e:	b25a      	sxtb	r2, r3
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	2101      	movs	r1, #1
 8000648:	fa01 f303 	lsl.w	r3, r1, r3
 800064c:	b25b      	sxtb	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b259      	sxtb	r1, r3
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	4603      	mov	r3, r0
 8000656:	01db      	lsls	r3, r3, #7
 8000658:	4413      	add	r3, r2
 800065a:	b2c9      	uxtb	r1, r1
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <ssd1306_DrawPixel+0xbc>)
 800065e:	54d1      	strb	r1, [r2, r3]
 8000660:	e01d      	b.n	800069e <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	08db      	lsrs	r3, r3, #3
 8000668:	b2d8      	uxtb	r0, r3
 800066a:	4603      	mov	r3, r0
 800066c:	01db      	lsls	r3, r3, #7
 800066e:	4413      	add	r3, r2
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <ssd1306_DrawPixel+0xbc>)
 8000672:	5cd3      	ldrb	r3, [r2, r3]
 8000674:	b25a      	sxtb	r2, r3
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	f003 0307 	and.w	r3, r3, #7
 800067c:	2101      	movs	r1, #1
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	b25b      	sxtb	r3, r3
 8000684:	43db      	mvns	r3, r3
 8000686:	b25b      	sxtb	r3, r3
 8000688:	4013      	ands	r3, r2
 800068a:	b259      	sxtb	r1, r3
 800068c:	79fa      	ldrb	r2, [r7, #7]
 800068e:	4603      	mov	r3, r0
 8000690:	01db      	lsls	r3, r3, #7
 8000692:	4413      	add	r3, r2
 8000694:	b2c9      	uxtb	r1, r1
 8000696:	4a05      	ldr	r2, [pc, #20]	; (80006ac <ssd1306_DrawPixel+0xbc>)
 8000698:	54d1      	strb	r1, [r2, r3]
 800069a:	e000      	b.n	800069e <ssd1306_DrawPixel+0xae>
		return;
 800069c:	bf00      	nop
	}
}
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000474 	.word	0x20000474
 80006ac:	20000074 	.word	0x20000074

080006b0 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4604      	mov	r4, r0
 80006b8:	1d38      	adds	r0, r7, #4
 80006ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80006be:	461a      	mov	r2, r3
 80006c0:	4623      	mov	r3, r4
 80006c2:	73fb      	strb	r3, [r7, #15]
 80006c4:	4613      	mov	r3, r2
 80006c6:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80006c8:	4b38      	ldr	r3, [pc, #224]	; (80007ac <ssd1306_WriteChar+0xfc>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	793b      	ldrb	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	2b7f      	cmp	r3, #127	; 0x7f
 80006d4:	dc06      	bgt.n	80006e4 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80006d6:	4b35      	ldr	r3, [pc, #212]	; (80007ac <ssd1306_WriteChar+0xfc>)
 80006d8:	885b      	ldrh	r3, [r3, #2]
 80006da:	461a      	mov	r2, r3
 80006dc:	797b      	ldrb	r3, [r7, #5]
 80006de:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80006e0:	2b3f      	cmp	r3, #63	; 0x3f
 80006e2:	dd01      	ble.n	80006e8 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	e05d      	b.n	80007a4 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
 80006ec:	e04c      	b.n	8000788 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	3b20      	subs	r3, #32
 80006f4:	7979      	ldrb	r1, [r7, #5]
 80006f6:	fb01 f303 	mul.w	r3, r1, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	440b      	add	r3, r1
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4413      	add	r3, r2
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	e034      	b.n	8000778 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d012      	beq.n	8000744 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <ssd1306_WriteChar+0xfc>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4413      	add	r3, r2
 800072a:	b2d8      	uxtb	r0, r3
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <ssd1306_WriteChar+0xfc>)
 800072e:	885b      	ldrh	r3, [r3, #2]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4413      	add	r3, r2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	7bba      	ldrb	r2, [r7, #14]
 800073c:	4619      	mov	r1, r3
 800073e:	f7ff ff57 	bl	80005f0 <ssd1306_DrawPixel>
 8000742:	e016      	b.n	8000772 <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <ssd1306_WriteChar+0xfc>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4413      	add	r3, r2
 8000750:	b2d8      	uxtb	r0, r3
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <ssd1306_WriteChar+0xfc>)
 8000754:	885b      	ldrh	r3, [r3, #2]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4413      	add	r3, r2
 800075e:	b2d9      	uxtb	r1, r3
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf0c      	ite	eq
 8000766:	2301      	moveq	r3, #1
 8000768:	2300      	movne	r3, #0
 800076a:	b2db      	uxtb	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	f7ff ff3f 	bl	80005f0 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	3301      	adds	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	793b      	ldrb	r3, [r7, #4]
 800077a:	461a      	mov	r2, r3
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	4293      	cmp	r3, r2
 8000780:	d3c5      	bcc.n	800070e <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3301      	adds	r3, #1
 8000786:	61fb      	str	r3, [r7, #28]
 8000788:	797b      	ldrb	r3, [r7, #5]
 800078a:	461a      	mov	r2, r3
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	4293      	cmp	r3, r2
 8000790:	d3ad      	bcc.n	80006ee <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <ssd1306_WriteChar+0xfc>)
 8000794:	881a      	ldrh	r2, [r3, #0]
 8000796:	793b      	ldrb	r3, [r7, #4]
 8000798:	b29b      	uxth	r3, r3
 800079a:	4413      	add	r3, r2
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b03      	ldr	r3, [pc, #12]	; (80007ac <ssd1306_WriteChar+0xfc>)
 80007a0:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3724      	adds	r7, #36	; 0x24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd90      	pop	{r4, r7, pc}
 80007ac:	20000474 	.word	0x20000474

080007b0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	1d38      	adds	r0, r7, #4
 80007ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80007be:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80007c0:	e012      	b.n	80007e8 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	7818      	ldrb	r0, [r3, #0]
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	1d3a      	adds	r2, r7, #4
 80007ca:	ca06      	ldmia	r2, {r1, r2}
 80007cc:	f7ff ff70 	bl	80006b0 <ssd1306_WriteChar>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d002      	beq.n	80007e2 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	e008      	b.n	80007f4 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	3301      	adds	r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
	while (*str)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1e8      	bne.n	80007c2 <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	781b      	ldrb	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	460a      	mov	r2, r1
 8000806:	71fb      	strb	r3, [r7, #7]
 8000808:	4613      	mov	r3, r2
 800080a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	b29a      	uxth	r2, r3
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <ssd1306_SetCursor+0x2c>)
 8000812:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <ssd1306_SetCursor+0x2c>)
 800081a:	805a      	strh	r2, [r3, #2]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000474 	.word	0x20000474

0800082c <ssd1306_Line>:

void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	4604      	mov	r4, r0
 8000834:	4608      	mov	r0, r1
 8000836:	4611      	mov	r1, r2
 8000838:	461a      	mov	r2, r3
 800083a:	4623      	mov	r3, r4
 800083c:	71fb      	strb	r3, [r7, #7]
 800083e:	4603      	mov	r3, r0
 8000840:	71bb      	strb	r3, [r7, #6]
 8000842:	460b      	mov	r3, r1
 8000844:	717b      	strb	r3, [r7, #5]
 8000846:	4613      	mov	r3, r2
 8000848:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800084a:	797a      	ldrb	r2, [r7, #5]
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	bfb8      	it	lt
 8000854:	425b      	neglt	r3, r3
 8000856:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8000858:	793a      	ldrb	r2, [r7, #4]
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	bfb8      	it	lt
 8000862:	425b      	neglt	r3, r3
 8000864:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	797b      	ldrb	r3, [r7, #5]
 800086a:	429a      	cmp	r2, r3
 800086c:	d201      	bcs.n	8000872 <ssd1306_Line+0x46>
 800086e:	2301      	movs	r3, #1
 8000870:	e001      	b.n	8000876 <ssd1306_Line+0x4a>
 8000872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000876:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8000878:	79ba      	ldrb	r2, [r7, #6]
 800087a:	793b      	ldrb	r3, [r7, #4]
 800087c:	429a      	cmp	r2, r3
 800087e:	d201      	bcs.n	8000884 <ssd1306_Line+0x58>
 8000880:	2301      	movs	r3, #1
 8000882:	e001      	b.n	8000888 <ssd1306_Line+0x5c>
 8000884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000888:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 8000892:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000896:	7939      	ldrb	r1, [r7, #4]
 8000898:	797b      	ldrb	r3, [r7, #5]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fea8 	bl	80005f0 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80008a0:	e024      	b.n	80008ec <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80008a2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80008a6:	79b9      	ldrb	r1, [r7, #6]
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fea0 	bl	80005f0 <ssd1306_DrawPixel>
    error2 = error * 2;
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	425b      	negs	r3, r3
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	429a      	cmp	r2, r3
 80008be:	dd08      	ble.n	80008d2 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80008c0:	69fa      	ldr	r2, [r7, #28]
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	4413      	add	r3, r2
 80008d0:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	da08      	bge.n	80008ec <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	4413      	add	r3, r2
 80008e0:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	79bb      	ldrb	r3, [r7, #6]
 80008e8:	4413      	add	r3, r2
 80008ea:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80008ec:	79fa      	ldrb	r2, [r7, #7]
 80008ee:	797b      	ldrb	r3, [r7, #5]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d1d6      	bne.n	80008a2 <ssd1306_Line+0x76>
 80008f4:	79ba      	ldrb	r2, [r7, #6]
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d1d2      	bne.n	80008a2 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80008fc:	bf00      	nop
}
 80008fe:	3724      	adds	r7, #36	; 0x24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b085      	sub	sp, #20
 8000908:	af02      	add	r7, sp, #8
 800090a:	4604      	mov	r4, r0
 800090c:	4608      	mov	r0, r1
 800090e:	4611      	mov	r1, r2
 8000910:	461a      	mov	r2, r3
 8000912:	4623      	mov	r3, r4
 8000914:	71fb      	strb	r3, [r7, #7]
 8000916:	4603      	mov	r3, r0
 8000918:	71bb      	strb	r3, [r7, #6]
 800091a:	460b      	mov	r3, r1
 800091c:	717b      	strb	r3, [r7, #5]
 800091e:	4613      	mov	r3, r2
 8000920:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8000922:	79bc      	ldrb	r4, [r7, #6]
 8000924:	797a      	ldrb	r2, [r7, #5]
 8000926:	79b9      	ldrb	r1, [r7, #6]
 8000928:	79f8      	ldrb	r0, [r7, #7]
 800092a:	7e3b      	ldrb	r3, [r7, #24]
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	4623      	mov	r3, r4
 8000930:	f7ff ff7c 	bl	800082c <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8000934:	793c      	ldrb	r4, [r7, #4]
 8000936:	797a      	ldrb	r2, [r7, #5]
 8000938:	79b9      	ldrb	r1, [r7, #6]
 800093a:	7978      	ldrb	r0, [r7, #5]
 800093c:	7e3b      	ldrb	r3, [r7, #24]
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	4623      	mov	r3, r4
 8000942:	f7ff ff73 	bl	800082c <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8000946:	793c      	ldrb	r4, [r7, #4]
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	7939      	ldrb	r1, [r7, #4]
 800094c:	7978      	ldrb	r0, [r7, #5]
 800094e:	7e3b      	ldrb	r3, [r7, #24]
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	4623      	mov	r3, r4
 8000954:	f7ff ff6a 	bl	800082c <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8000958:	79bc      	ldrb	r4, [r7, #6]
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	7939      	ldrb	r1, [r7, #4]
 800095e:	79f8      	ldrb	r0, [r7, #7]
 8000960:	7e3b      	ldrb	r3, [r7, #24]
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	4623      	mov	r3, r4
 8000966:	f7ff ff61 	bl	800082c <ssd1306_Line>

  return;
 800096a:	bf00      	nop
}
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bd90      	pop	{r4, r7, pc}

08000972 <ssd1306FillRect>:
void ssd1306FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
 8000972:	b590      	push	{r4, r7, lr}
 8000974:	b085      	sub	sp, #20
 8000976:	af00      	add	r7, sp, #0
 8000978:	4604      	mov	r4, r0
 800097a:	4608      	mov	r0, r1
 800097c:	4611      	mov	r1, r2
 800097e:	461a      	mov	r2, r3
 8000980:	4623      	mov	r3, r4
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	4603      	mov	r3, r0
 8000986:	71bb      	strb	r3, [r7, #6]
 8000988:	460b      	mov	r3, r1
 800098a:	717b      	strb	r3, [r7, #5]
 800098c:	4613      	mov	r3, r2
 800098e:	713b      	strb	r3, [r7, #4]
    uint8_t x0, x1, y1;

    x0 = x;
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	73fb      	strb	r3, [r7, #15]
    x1 = x + w;
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	797b      	ldrb	r3, [r7, #5]
 8000998:	4413      	add	r3, r2
 800099a:	73bb      	strb	r3, [r7, #14]
    y1 = y + h;
 800099c:	79ba      	ldrb	r2, [r7, #6]
 800099e:	793b      	ldrb	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	737b      	strb	r3, [r7, #13]
    for(; y < y1; y++)
 80009a4:	e013      	b.n	80009ce <ssd1306FillRect+0x5c>
        for(x = x0; x < x1; x++)
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	71fb      	strb	r3, [r7, #7]
 80009aa:	e009      	b.n	80009c0 <ssd1306FillRect+0x4e>
        	ssd1306_DrawPixel(x, y, color);
 80009ac:	8c3b      	ldrh	r3, [r7, #32]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	79b9      	ldrb	r1, [r7, #6]
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fe1b 	bl	80005f0 <ssd1306_DrawPixel>
        for(x = x0; x < x1; x++)
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	3301      	adds	r3, #1
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	79fa      	ldrb	r2, [r7, #7]
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d3f1      	bcc.n	80009ac <ssd1306FillRect+0x3a>
    for(; y < y1; y++)
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	3301      	adds	r3, #1
 80009cc:	71bb      	strb	r3, [r7, #6]
 80009ce:	79ba      	ldrb	r2, [r7, #6]
 80009d0:	7b7b      	ldrb	r3, [r7, #13]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d3e7      	bcc.n	80009a6 <ssd1306FillRect+0x34>
            //ssd1306DrawPixel( x, y, color, layer);
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd90      	pop	{r4, r7, pc}

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b098      	sub	sp, #96	; 0x60
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e6:	f002 fc4f 	bl	8003288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ea:	f000 f8d1 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ee:	f000 fa1d 	bl	8000e2c <MX_GPIO_Init>
  MX_I2C1_Init();
 80009f2:	f000 f913 	bl	8000c1c <MX_I2C1_Init>
  MX_SPI1_Init();
 80009f6:	f000 f93f 	bl	8000c78 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80009fa:	f000 f9c3 	bl	8000d84 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80009fe:	f000 f971 	bl	8000ce4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000a02:	f000 f9e9 	bl	8000dd8 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0c:	4856      	ldr	r0, [pc, #344]	; (8000b68 <main+0x188>)
 8000a0e:	f003 f81a 	bl	8003a46 <HAL_GPIO_WritePin>

  // Init interrupp
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2025      	movs	r0, #37	; 0x25
 8000a18:	f002 fd93 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a1c:	2025      	movs	r0, #37	; 0x25
 8000a1e:	f002 fdac 	bl	800357a <HAL_NVIC_EnableIRQ>


  // OLED init
  ssd1306_Init();
 8000a22:	f7ff fd27 	bl	8000474 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff fd90 	bl	800054c <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000a2c:	f7ff fdb0 	bl	8000590 <ssd1306_UpdateScreen>
  NRF24_ini();
  read_config_registers();
#endif

#if lora_on_off
  ssd1306_SetCursor(0, 0);
 8000a30:	2100      	movs	r1, #0
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fee2 	bl	80007fc <ssd1306_SetCursor>
  char test_main[50] = {0};
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a40:	222e      	movs	r2, #46	; 0x2e
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f005 ff37 	bl	80068b8 <memset>
  strcpy(test_main, "LoRa RX");
 8000a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4e:	4a47      	ldr	r2, [pc, #284]	; (8000b6c <main+0x18c>)
 8000a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a54:	e883 0003 	stmia.w	r3, {r0, r1}
  ssd1306_WriteString(test_main,  Font_7x10, White);
 8000a58:	4a45      	ldr	r2, [pc, #276]	; (8000b70 <main+0x190>)
 8000a5a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000a5e:	2301      	movs	r3, #1
 8000a60:	ca06      	ldmia	r2, {r1, r2}
 8000a62:	f7ff fea5 	bl	80007b0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000a66:	f7ff fd93 	bl	8000590 <ssd1306_UpdateScreen>
 // state_machine
  HAL_Delay(1000);
 8000a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6e:	f002 fc6d 	bl	800334c <HAL_Delay>
  init_lora();
 8000a72:	f7ff fb6b 	bl	800014c <init_lora>
  HAL_Delay(1000);
 8000a76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a7a:	f002 fc67 	bl	800334c <HAL_Delay>

  ssd1306_SetCursor(65, 0);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2041      	movs	r0, #65	; 0x41
 8000a82:	f7ff febb 	bl	80007fc <ssd1306_SetCursor>
  strcpy(test_main, "Ready");
 8000a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8a:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <main+0x194>)
 8000a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a90:	6018      	str	r0, [r3, #0]
 8000a92:	3304      	adds	r3, #4
 8000a94:	8019      	strh	r1, [r3, #0]
  ssd1306_WriteString(test_main,  Font_7x10, White);
 8000a96:	4a36      	ldr	r2, [pc, #216]	; (8000b70 <main+0x190>)
 8000a98:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	ca06      	ldmia	r2, {r1, r2}
 8000aa0:	f7ff fe86 	bl	80007b0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000aa4:	f7ff fd74 	bl	8000590 <ssd1306_UpdateScreen>

  ssd1306_SetCursor(0, 16);
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fea6 	bl	80007fc <ssd1306_SetCursor>
  strcpy(test_main, "RX data: ");
 8000ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <main+0x198>)
 8000ab6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ab8:	c303      	stmia	r3!, {r0, r1}
 8000aba:	801a      	strh	r2, [r3, #0]
  ssd1306_WriteString(test_main,  Font_7x10, White);
 8000abc:	4a2c      	ldr	r2, [pc, #176]	; (8000b70 <main+0x190>)
 8000abe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	ca06      	ldmia	r2, {r1, r2}
 8000ac6:	f7ff fe73 	bl	80007b0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000aca:	f7ff fd61 	bl	8000590 <ssd1306_UpdateScreen>

  HAL_UART_Receive_IT(&huart1, str, 1);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	492a      	ldr	r1, [pc, #168]	; (8000b7c <main+0x19c>)
 8000ad2:	482b      	ldr	r0, [pc, #172]	; (8000b80 <main+0x1a0>)
 8000ad4:	f005 faa3 	bl	800601e <HAL_UART_Receive_IT>
	  bool init_nrf_status = init_nrf();    // For debug
	  nrf_communication_test();      // Main function LORA
	#endif

	#if lora_on_off
	  char test_main[30] = {0};
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
 8000aec:	615a      	str	r2, [r3, #20]
 8000aee:	831a      	strh	r2, [r3, #24]

	  if(flag_command_received == true)			// If data is ready
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <main+0x1a4>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d033      	beq.n	8000b60 <main+0x180>
	  {
		// Data received

		//   Print on OLED
		char clearn_array[10] = "         ";
 8000af8:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <main+0x1a8>)
 8000afa:	463b      	mov	r3, r7
 8000afc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000afe:	c303      	stmia	r3!, {r0, r1}
 8000b00:	801a      	strh	r2, [r3, #0]
		ssd1306_SetCursor(60, 16);
 8000b02:	2110      	movs	r1, #16
 8000b04:	203c      	movs	r0, #60	; 0x3c
 8000b06:	f7ff fe79 	bl	80007fc <ssd1306_SetCursor>

		ssd1306_WriteString(clearn_array,  Font_7x10, White);
 8000b0a:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <main+0x190>)
 8000b0c:	4638      	mov	r0, r7
 8000b0e:	2301      	movs	r3, #1
 8000b10:	ca06      	ldmia	r2, {r1, r2}
 8000b12:	f7ff fe4d 	bl	80007b0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000b16:	f7ff fd3b 	bl	8000590 <ssd1306_UpdateScreen>

		ssd1306_SetCursor(60, 16);
 8000b1a:	2110      	movs	r1, #16
 8000b1c:	203c      	movs	r0, #60	; 0x3c
 8000b1e:	f7ff fe6d 	bl	80007fc <ssd1306_SetCursor>
		strcpy(test_main, uart_rx_data);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4919      	ldr	r1, [pc, #100]	; (8000b8c <main+0x1ac>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f005 fecd 	bl	80068c8 <strcpy>

		ssd1306_WriteString(test_main,  Font_7x10, White);
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <main+0x190>)
 8000b30:	f107 000c 	add.w	r0, r7, #12
 8000b34:	2301      	movs	r3, #1
 8000b36:	ca06      	ldmia	r2, {r1, r2}
 8000b38:	f7ff fe3a 	bl	80007b0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000b3c:	f7ff fd28 	bl	8000590 <ssd1306_UpdateScreen>

		HAL_Delay(100);
 8000b40:	2064      	movs	r0, #100	; 0x64
 8000b42:	f002 fc03 	bl	800334c <HAL_Delay>
		memset(uart_rx_data, 0, sizeof(uart_rx_data));
 8000b46:	2232      	movs	r2, #50	; 0x32
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4810      	ldr	r0, [pc, #64]	; (8000b8c <main+0x1ac>)
 8000b4c:	f005 feb4 	bl	80068b8 <memset>
		flag_command_received = false;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <main+0x1a4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart1, str, 1);		// Start interrupt again
 8000b56:	2201      	movs	r2, #1
 8000b58:	4908      	ldr	r1, [pc, #32]	; (8000b7c <main+0x19c>)
 8000b5a:	4809      	ldr	r0, [pc, #36]	; (8000b80 <main+0x1a0>)
 8000b5c:	f005 fa5f 	bl	800601e <HAL_UART_Receive_IT>
	  }
	#endif


	 menu();
 8000b60:	f002 fb40 	bl	80031e4 <menu>
  {
 8000b64:	e7b8      	b.n	8000ad8 <main+0xf8>
 8000b66:	bf00      	nop
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	0800699c 	.word	0x0800699c
 8000b70:	20000000 	.word	0x20000000
 8000b74:	080069a4 	.word	0x080069a4
 8000b78:	080069ac 	.word	0x080069ac
 8000b7c:	200004b0 	.word	0x200004b0
 8000b80:	20000554 	.word	0x20000554
 8000b84:	200004b1 	.word	0x200004b1
 8000b88:	080069b8 	.word	0x080069b8
 8000b8c:	2000047c 	.word	0x2000047c

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b090      	sub	sp, #64	; 0x40
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2228      	movs	r2, #40	; 0x28
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f005 fe8a 	bl	80068b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000bce:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fbd7 	bl	800438c <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000be4:	f000 fa40 	bl	8001068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be8:	230f      	movs	r3, #15
 8000bea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bec:	2302      	movs	r3, #2
 8000bee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2102      	movs	r1, #2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 fe42 	bl	800488c <HAL_RCC_ClockConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c0e:	f000 fa2b 	bl	8001068 <Error_Handler>
  }
}
 8000c12:	bf00      	nop
 8000c14:	3740      	adds	r7, #64	; 0x40
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c22:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <MX_I2C1_Init+0x54>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c28:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <MX_I2C1_Init+0x58>)
 8000c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c5a:	f002 ff3d 	bl	8003ad8 <HAL_I2C_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c64:	f000 fa00 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000500 	.word	0x20000500
 8000c70:	40005400 	.word	0x40005400
 8000c74:	00061a80 	.word	0x00061a80

08000c78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000c84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000cac:	2220      	movs	r2, #32
 8000cae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000cc4:	220a      	movs	r2, #10
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000cca:	f003 ff79 	bl	8004bc0 <HAL_SPI_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cd4:	f000 f9c8 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200005e0 	.word	0x200005e0
 8000ce0:	40013000 	.word	0x40013000

08000ce4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_TIM1_Init+0x98>)
 8000d02:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <MX_TIM1_Init+0x9c>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_TIM1_Init+0x98>)
 8000d08:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000d0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_TIM1_Init+0x98>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_TIM1_Init+0x98>)
 8000d16:	2264      	movs	r2, #100	; 0x64
 8000d18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_TIM1_Init+0x98>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_TIM1_Init+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM1_Init+0x98>)
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d2c:	4813      	ldr	r0, [pc, #76]	; (8000d7c <MX_TIM1_Init+0x98>)
 8000d2e:	f004 fcb3 	bl	8005698 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d38:	f000 f996 	bl	8001068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4619      	mov	r1, r3
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <MX_TIM1_Init+0x98>)
 8000d4a:	f004 fe7d 	bl	8005a48 <HAL_TIM_ConfigClockSource>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d54:	f000 f988 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000d58:	2310      	movs	r3, #16
 8000d5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d60:	463b      	mov	r3, r7
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_TIM1_Init+0x98>)
 8000d66:	f005 f859 	bl	8005e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d70:	f000 f97a 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000598 	.word	0x20000598
 8000d80:	40012c00 	.word	0x40012c00

08000d84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <MX_USART1_UART_Init+0x50>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000d90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000dbc:	f005 f89e 	bl	8005efc <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dc6:	f000 f94f 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000554 	.word	0x20000554
 8000dd4:	40013800 	.word	0x40013800

08000dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <MX_USART3_UART_Init+0x50>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000de4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000e10:	f005 f874 	bl	8005efc <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e1a:	f000 f925 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200004bc 	.word	0x200004bc
 8000e28:	40004800 	.word	0x40004800

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e40:	4b5f      	ldr	r3, [pc, #380]	; (8000fc0 <MX_GPIO_Init+0x194>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a5e      	ldr	r2, [pc, #376]	; (8000fc0 <MX_GPIO_Init+0x194>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b5c      	ldr	r3, [pc, #368]	; (8000fc0 <MX_GPIO_Init+0x194>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0310 	and.w	r3, r3, #16
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e58:	4b59      	ldr	r3, [pc, #356]	; (8000fc0 <MX_GPIO_Init+0x194>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a58      	ldr	r2, [pc, #352]	; (8000fc0 <MX_GPIO_Init+0x194>)
 8000e5e:	f043 0320 	orr.w	r3, r3, #32
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b56      	ldr	r3, [pc, #344]	; (8000fc0 <MX_GPIO_Init+0x194>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0320 	and.w	r3, r3, #32
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b53      	ldr	r3, [pc, #332]	; (8000fc0 <MX_GPIO_Init+0x194>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a52      	ldr	r2, [pc, #328]	; (8000fc0 <MX_GPIO_Init+0x194>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b50      	ldr	r3, [pc, #320]	; (8000fc0 <MX_GPIO_Init+0x194>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	4b4d      	ldr	r3, [pc, #308]	; (8000fc0 <MX_GPIO_Init+0x194>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a4c      	ldr	r2, [pc, #304]	; (8000fc0 <MX_GPIO_Init+0x194>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b4a      	ldr	r3, [pc, #296]	; (8000fc0 <MX_GPIO_Init+0x194>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea6:	4847      	ldr	r0, [pc, #284]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000ea8:	f002 fdcd 	bl	8003a46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2108      	movs	r1, #8
 8000eb0:	4845      	ldr	r0, [pc, #276]	; (8000fc8 <MX_GPIO_Init+0x19c>)
 8000eb2:	f002 fdc8 	bl	8003a46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2110      	movs	r1, #16
 8000eba:	4843      	ldr	r0, [pc, #268]	; (8000fc8 <MX_GPIO_Init+0x19c>)
 8000ebc:	f002 fdc3 	bl	8003a46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f242 0101 	movw	r1, #8193	; 0x2001
 8000ec6:	4841      	ldr	r0, [pc, #260]	; (8000fcc <MX_GPIO_Init+0x1a0>)
 8000ec8:	f002 fdbd 	bl	8003a46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4837      	ldr	r0, [pc, #220]	; (8000fc4 <MX_GPIO_Init+0x198>)
 8000ee6:	f002 fc13 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eea:	2304      	movs	r3, #4
 8000eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eee:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <MX_GPIO_Init+0x1a4>)
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4619      	mov	r1, r3
 8000efc:	4832      	ldr	r0, [pc, #200]	; (8000fc8 <MX_GPIO_Init+0x19c>)
 8000efe:	f002 fc07 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000f02:	2318      	movs	r3, #24
 8000f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	4619      	mov	r1, r3
 8000f18:	482b      	ldr	r0, [pc, #172]	; (8000fc8 <MX_GPIO_Init+0x19c>)
 8000f1a:	f002 fbf9 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8000f1e:	f242 0301 	movw	r3, #8193	; 0x2001
 8000f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	4825      	ldr	r0, [pc, #148]	; (8000fcc <MX_GPIO_Init+0x1a0>)
 8000f38:	f002 fbea 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	481f      	ldr	r0, [pc, #124]	; (8000fcc <MX_GPIO_Init+0x1a0>)
 8000f50:	f002 fbde 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f54:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_GPIO_Init+0x1a4>)
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4619      	mov	r1, r3
 8000f68:	4818      	ldr	r0, [pc, #96]	; (8000fcc <MX_GPIO_Init+0x1a0>)
 8000f6a:	f002 fbd1 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_GPIO_Init+0x1a4>)
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <MX_GPIO_Init+0x19c>)
 8000f84:	f002 fbc4 	bl	8003710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2008      	movs	r0, #8
 8000f8e:	f002 fad8 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f92:	2008      	movs	r0, #8
 8000f94:	f002 faf1 	bl	800357a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2017      	movs	r0, #23
 8000f9e:	f002 fad0 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fa2:	2017      	movs	r0, #23
 8000fa4:	f002 fae9 	bl	800357a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	2028      	movs	r0, #40	; 0x28
 8000fae:	f002 fac8 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fb2:	2028      	movs	r0, #40	; 0x28
 8000fb4:	f002 fae1 	bl	800357a <HAL_NVIC_EnableIRQ>

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40011000 	.word	0x40011000
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	40010c00 	.word	0x40010c00
 8000fd0:	10210000 	.word	0x10210000

08000fd4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d102      	bne.n	8000fea <HAL_GPIO_EXTI_Callback+0x16>
  {
    IRQ_Callback();					// Call Callback
 8000fe4:	f7ff f9ea 	bl	80003bc <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8000fe8:	e000      	b.n	8000fec <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8000fea:	bf00      	nop
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_UART_RxCpltCallback>:

//----------------------------------------------------------------------------------------
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a15      	ldr	r2, [pc, #84]	; (8001054 <HAL_UART_RxCpltCallback+0x60>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d123      	bne.n	800104c <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_UART_RxCpltCallback+0x64>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_UART_RxCpltCallback+0x20>
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_UART_RxCpltCallback+0x68>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b31      	cmp	r3, #49	; 0x31
 8001012:	d906      	bls.n	8001022 <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_UART_RxCpltCallback+0x6c>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_UART_RxCpltCallback+0x68>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8001020:	e014      	b.n	800104c <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_UART_RxCpltCallback+0x6c>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <HAL_UART_RxCpltCallback+0x68>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_UART_RxCpltCallback+0x64>)
 8001030:	7819      	ldrb	r1, [r3, #0]
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_UART_RxCpltCallback+0x70>)
 8001034:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8001036:	2201      	movs	r2, #1
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <HAL_UART_RxCpltCallback+0x64>)
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <HAL_UART_RxCpltCallback+0x60>)
 800103c:	f004 ffef 	bl	800601e <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_UART_RxCpltCallback+0x68>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <HAL_UART_RxCpltCallback+0x68>)
 800104a:	701a      	strb	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000554 	.word	0x20000554
 8001058:	200004b0 	.word	0x200004b0
 800105c:	200004b2 	.word	0x200004b2
 8001060:	200004b1 	.word	0x200004b1
 8001064:	2000047c 	.word	0x2000047c

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_MspInit+0x5c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_MspInit+0x5c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_MspInit+0x5c>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_MspInit+0x5c>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_MspInit+0x5c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_MspInit+0x5c>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_MspInit+0x60>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_MspInit+0x60>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000

080010d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a15      	ldr	r2, [pc, #84]	; (8001148 <HAL_I2C_MspInit+0x70>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d123      	bne.n	8001140 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_I2C_MspInit+0x74>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <HAL_I2C_MspInit+0x74>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_I2C_MspInit+0x74>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001110:	23c0      	movs	r3, #192	; 0xc0
 8001112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001114:	2312      	movs	r3, #18
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	4619      	mov	r1, r3
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <HAL_I2C_MspInit+0x78>)
 8001124:	f002 faf4 	bl	8003710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_I2C_MspInit+0x74>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_I2C_MspInit+0x74>)
 800112e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001132:	61d3      	str	r3, [r2, #28]
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_I2C_MspInit+0x74>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40005400 	.word	0x40005400
 800114c:	40021000 	.word	0x40021000
 8001150:	40010c00 	.word	0x40010c00

08001154 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <HAL_SPI_MspInit+0x88>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d12f      	bne.n	80011d4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_SPI_MspInit+0x8c>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_SPI_MspInit+0x8c>)
 800117a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_SPI_MspInit+0x8c>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_SPI_MspInit+0x8c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <HAL_SPI_MspInit+0x8c>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_SPI_MspInit+0x8c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011a4:	23a0      	movs	r3, #160	; 0xa0
 80011a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <HAL_SPI_MspInit+0x90>)
 80011b8:	f002 faaa 	bl	8003710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011bc:	2340      	movs	r3, #64	; 0x40
 80011be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4619      	mov	r1, r3
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <HAL_SPI_MspInit+0x90>)
 80011d0:	f002 fa9e 	bl	8003710 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40013000 	.word	0x40013000
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010800 	.word	0x40010800

080011e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <HAL_TIM_Base_MspInit+0x44>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d113      	bne.n	8001222 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <HAL_TIM_Base_MspInit+0x48>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <HAL_TIM_Base_MspInit+0x48>)
 8001200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_TIM_Base_MspInit+0x48>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2019      	movs	r0, #25
 8001218:	f002 f993 	bl	8003542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800121c:	2019      	movs	r0, #25
 800121e:	f002 f9ac 	bl	800357a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40012c00 	.word	0x40012c00
 8001230:	40021000 	.word	0x40021000

08001234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a3c      	ldr	r2, [pc, #240]	; (8001340 <HAL_UART_MspInit+0x10c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d13a      	bne.n	80012ca <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001254:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_UART_MspInit+0x110>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a3a      	ldr	r2, [pc, #232]	; (8001344 <HAL_UART_MspInit+0x110>)
 800125a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b38      	ldr	r3, [pc, #224]	; (8001344 <HAL_UART_MspInit+0x110>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b35      	ldr	r3, [pc, #212]	; (8001344 <HAL_UART_MspInit+0x110>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a34      	ldr	r2, [pc, #208]	; (8001344 <HAL_UART_MspInit+0x110>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b32      	ldr	r3, [pc, #200]	; (8001344 <HAL_UART_MspInit+0x110>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4619      	mov	r1, r3
 8001298:	482b      	ldr	r0, [pc, #172]	; (8001348 <HAL_UART_MspInit+0x114>)
 800129a:	f002 fa39 	bl	8003710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800129e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	4619      	mov	r1, r3
 80012b2:	4825      	ldr	r0, [pc, #148]	; (8001348 <HAL_UART_MspInit+0x114>)
 80012b4:	f002 fa2c 	bl	8003710 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2101      	movs	r1, #1
 80012bc:	2025      	movs	r0, #37	; 0x25
 80012be:	f002 f940 	bl	8003542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012c2:	2025      	movs	r0, #37	; 0x25
 80012c4:	f002 f959 	bl	800357a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012c8:	e036      	b.n	8001338 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a1f      	ldr	r2, [pc, #124]	; (800134c <HAL_UART_MspInit+0x118>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d131      	bne.n	8001338 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_UART_MspInit+0x110>)
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <HAL_UART_MspInit+0x110>)
 80012da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012de:	61d3      	str	r3, [r2, #28]
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_UART_MspInit+0x110>)
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_UART_MspInit+0x110>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <HAL_UART_MspInit+0x110>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_UART_MspInit+0x110>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	4619      	mov	r1, r3
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <HAL_UART_MspInit+0x11c>)
 800131a:	f002 f9f9 	bl	8003710 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800131e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	4619      	mov	r1, r3
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <HAL_UART_MspInit+0x11c>)
 8001334:	f002 f9ec 	bl	8003710 <HAL_GPIO_Init>
}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013800 	.word	0x40013800
 8001344:	40021000 	.word	0x40021000
 8001348:	40010800 	.word	0x40010800
 800134c:	40004800 	.word	0x40004800
 8001350:	40010c00 	.word	0x40010c00

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <NMI_Handler+0x4>

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler+0x4>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler+0x4>

08001372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139a:	f001 ffbb 	bl	8003314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80013a6:	2004      	movs	r0, #4
 80013a8:	f002 fb7e 	bl	8003aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <EXTI9_5_IRQHandler+0x44>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f083 0301 	eor.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d012      	beq.n	80013e8 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <EXTI9_5_IRQHandler+0x48>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00c      	beq.n	80013e8 <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <EXTI9_5_IRQHandler+0x4c>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <EXTI9_5_IRQHandler+0x50>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d105      	bne.n	80013e8 <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 80013dc:	4809      	ldr	r0, [pc, #36]	; (8001404 <EXTI9_5_IRQHandler+0x54>)
 80013de:	f004 f9ab 	bl	8005738 <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <EXTI9_5_IRQHandler+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80013e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013ec:	f002 fb5c 	bl	8003aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200004b8 	.word	0x200004b8
 80013f8:	40010400 	.word	0x40010400
 80013fc:	20000008 	.word	0x20000008
 8001400:	2000000c 	.word	0x2000000c
 8001404:	20000598 	.word	0x20000598

08001408 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <TIM1_UP_IRQHandler+0xe4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d165      	bne.n	80014e0 <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 8001414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001418:	4835      	ldr	r0, [pc, #212]	; (80014f0 <TIM1_UP_IRQHandler+0xe8>)
 800141a:	f002 fafd 	bl	8003a18 <HAL_GPIO_ReadPin>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d118      	bne.n	8001456 <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 8001424:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a32      	ldr	r2, [pc, #200]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 800142c:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 800142e:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <TIM1_UP_IRQHandler+0xf0>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	dc51      	bgt.n	80014e0 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <TIM1_UP_IRQHandler+0xe4>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8001442:	482e      	ldr	r0, [pc, #184]	; (80014fc <TIM1_UP_IRQHandler+0xf4>)
 8001444:	f004 f9ca 	bl	80057dc <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 8001448:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <TIM1_UP_IRQHandler+0xf8>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	e044      	b.n	80014e0 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 8001456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145a:	482a      	ldr	r0, [pc, #168]	; (8001504 <TIM1_UP_IRQHandler+0xfc>)
 800145c:	f002 fadc 	bl	8003a18 <HAL_GPIO_ReadPin>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d118      	bne.n	8001498 <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 800146e:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <TIM1_UP_IRQHandler+0xf0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	dc30      	bgt.n	80014e0 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <TIM1_UP_IRQHandler+0xe4>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8001484:	481d      	ldr	r0, [pc, #116]	; (80014fc <TIM1_UP_IRQHandler+0xf4>)
 8001486:	f004 f9a9 	bl	80057dc <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <TIM1_UP_IRQHandler+0xf8>)
 800148c:	2203      	movs	r2, #3
 800148e:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e023      	b.n	80014e0 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 8001498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800149c:	4814      	ldr	r0, [pc, #80]	; (80014f0 <TIM1_UP_IRQHandler+0xe8>)
 800149e:	f002 fabb 	bl	8003a18 <HAL_GPIO_ReadPin>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d118      	bne.n	80014da <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 80014b0:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <TIM1_UP_IRQHandler+0xf0>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dc0f      	bgt.n	80014e0 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <TIM1_UP_IRQHandler+0xe4>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <TIM1_UP_IRQHandler+0xf8>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80014d2:	480a      	ldr	r0, [pc, #40]	; (80014fc <TIM1_UP_IRQHandler+0xf4>)
 80014d4:	f004 f982 	bl	80057dc <HAL_TIM_Base_Stop_IT>
 80014d8:	e002      	b.n	80014e0 <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <TIM1_UP_IRQHandler+0xec>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014e0:	4806      	ldr	r0, [pc, #24]	; (80014fc <TIM1_UP_IRQHandler+0xf4>)
 80014e2:	f004 f9a9 	bl	8005838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	40010c00 	.word	0x40010c00
 80014f4:	200004b4 	.word	0x200004b4
 80014f8:	20000009 	.word	0x20000009
 80014fc:	20000598 	.word	0x20000598
 8001500:	200004b9 	.word	0x200004b9
 8001504:	40010800 	.word	0x40010800

08001508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <USART1_IRQHandler+0x10>)
 800150e:	f004 fdb7 	bl	8006080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000554 	.word	0x20000554

0800151c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <EXTI15_10_IRQHandler+0x74>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	f083 0301 	eor.w	r3, r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d012      	beq.n	8001554 <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <EXTI15_10_IRQHandler+0x78>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00c      	beq.n	8001554 <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <EXTI15_10_IRQHandler+0x7c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <EXTI15_10_IRQHandler+0x80>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d105      	bne.n	8001554 <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001548:	4815      	ldr	r0, [pc, #84]	; (80015a0 <EXTI15_10_IRQHandler+0x84>)
 800154a:	f004 f8f5 	bl	8005738 <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <EXTI15_10_IRQHandler+0x80>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <EXTI15_10_IRQHandler+0x78>)
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00c      	beq.n	800157a <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <EXTI15_10_IRQHandler+0x7c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <EXTI15_10_IRQHandler+0x80>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d105      	bne.n	800157a <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 800156e:	480c      	ldr	r0, [pc, #48]	; (80015a0 <EXTI15_10_IRQHandler+0x84>)
 8001570:	f004 f8e2 	bl	8005738 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <EXTI15_10_IRQHandler+0x80>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800157a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800157e:	f002 fa93 	bl	8003aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001582:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001586:	f002 fa8f 	bl	8003aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200004b8 	.word	0x200004b8
 8001594:	40010400 	.word	0x40010400
 8001598:	20000008 	.word	0x20000008
 800159c:	2000000c 	.word	0x2000000c
 80015a0:	20000598 	.word	0x20000598

080015a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <scroll_bar>:
/*
This function print scrollbar on right part of OLED.

 */
void scroll_bar(void)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af02      	add	r7, sp, #8
	// Work size scrollbar
	uint16_t start_x_scrollbar = 124;
 80015b6:	237c      	movs	r3, #124	; 0x7c
 80015b8:	81fb      	strh	r3, [r7, #14]
	uint16_t start_y_scrollbar = 17;
 80015ba:	2311      	movs	r3, #17
 80015bc:	81bb      	strh	r3, [r7, #12]
	uint16_t active_width = 3;
 80015be:	2303      	movs	r3, #3
 80015c0:	817b      	strh	r3, [r7, #10]
	uint16_t lenght_all_scrollbar = 48;
 80015c2:	2330      	movs	r3, #48	; 0x30
 80015c4:	813b      	strh	r3, [r7, #8]

	uint8_t menu_items_counter = 1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
	// 1. Скопіювати показник на меню в буффер
	// 2. Піднятися до останнього елемента меню
	// 3. Інкрементувати лічильник елементів меню, до останього елемента меню
	// 4. записати нараховані емементи в

	MenuItem_t * currentItem_buff = currentItem;
 80015ca:	4b32      	ldr	r3, [pc, #200]	; (8001694 <scroll_bar+0xe4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	613b      	str	r3, [r7, #16]

	if ((currentItem_buff -> up) != 0)							// Step up if existing up
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <scroll_bar+0x36>
	{
		do{
			currentItem_buff = currentItem_buff -> up;			// Step up to the top of menu
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	613b      	str	r3, [r7, #16]
		}
		while ((currentItem_buff -> up) != 0);					// If the top of item doesen't found
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f8      	bne.n	80015d8 <scroll_bar+0x28>
	}

	if ((currentItem_buff -> up) == 0)							// If found top of menu item
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <scroll_bar+0x52>
	{
		do{
			currentItem_buff = currentItem_buff -> down;
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	613b      	str	r3, [r7, #16]
			menu_items_counter++;								// Count how many list on menu
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	3301      	adds	r3, #1
 80015f8:	75fb      	strb	r3, [r7, #23]
		}
		while ((currentItem_buff -> down) != 0);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f5      	bne.n	80015ee <scroll_bar+0x3e>
	}
	 // Очистити частину керану де є скролбар
	ssd1306FillRect(start_x_scrollbar, start_y_scrollbar, active_width, lenght_all_scrollbar - 2, Black);
 8001602:	89fb      	ldrh	r3, [r7, #14]
 8001604:	b2d8      	uxtb	r0, r3
 8001606:	89bb      	ldrh	r3, [r7, #12]
 8001608:	b2d9      	uxtb	r1, r3
 800160a:	897b      	ldrh	r3, [r7, #10]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	893b      	ldrh	r3, [r7, #8]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	3b02      	subs	r3, #2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2400      	movs	r4, #0
 8001618:	9400      	str	r4, [sp, #0]
 800161a:	f7ff f9aa 	bl	8000972 <ssd1306FillRect>

	// Вивести подовгастий квадрат на край екрану
	ssd1306_DrawRectangle(start_x_scrollbar - 1, start_y_scrollbar - 1, start_x_scrollbar + active_width, 63, White);
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	3b01      	subs	r3, #1
 8001624:	b2d8      	uxtb	r0, r3
 8001626:	89bb      	ldrh	r3, [r7, #12]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	3b01      	subs	r3, #1
 800162c:	b2d9      	uxtb	r1, r3
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	897b      	ldrh	r3, [r7, #10]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4413      	add	r3, r2
 8001638:	b2da      	uxtb	r2, r3
 800163a:	2301      	movs	r3, #1
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	233f      	movs	r3, #63	; 0x3f
 8001640:	f7ff f960 	bl	8000904 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8001644:	f7fe ffa4 	bl	8000590 <ssd1306_UpdateScreen>

	 // Print scroling line
	int id_for_line = currentItem -> id;				// Скопіювати порядковий номер меню
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <scroll_bar+0xe4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	7c1b      	ldrb	r3, [r3, #16]
 800164e:	607b      	str	r3, [r7, #4]
	// Print scroling line
	uint16_t line_lenght = (lenght_all_scrollbar/menu_items_counter + 1);					   	// Довжина лінії яка відповідає одному меню
 8001650:	893a      	ldrh	r2, [r7, #8]
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	fb92 f3f3 	sdiv	r3, r2, r3
 8001658:	b29b      	uxth	r3, r3
 800165a:	3301      	adds	r3, #1
 800165c:	807b      	strh	r3, [r7, #2]
	uint16_t start_lenght = 16 + ((id_for_line - 1)*line_lenght);			// Початок лінії
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3b01      	subs	r3, #1
 8001662:	b29b      	uxth	r3, r3
 8001664:	887a      	ldrh	r2, [r7, #2]
 8001666:	fb02 f303 	mul.w	r3, r2, r3
 800166a:	b29b      	uxth	r3, r3
 800166c:	3310      	adds	r3, #16
 800166e:	803b      	strh	r3, [r7, #0]
	// Print active scrollbar part (line)
	ssd1306FillRect(start_x_scrollbar, start_lenght, active_width, line_lenght, White);
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	b2d8      	uxtb	r0, r3
 8001674:	883b      	ldrh	r3, [r7, #0]
 8001676:	b2d9      	uxtb	r1, r3
 8001678:	897b      	ldrh	r3, [r7, #10]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2401      	movs	r4, #1
 8001682:	9400      	str	r4, [sp, #0]
 8001684:	f7ff f975 	bl	8000972 <ssd1306FillRect>

	ssd1306_UpdateScreen();
 8001688:	f7fe ff82 	bl	8000590 <ssd1306_UpdateScreen>
}
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd90      	pop	{r4, r7, pc}
 8001694:	20000014 	.word	0x20000014

08001698 <print_rectangle_on_head>:
// ----------------------------------------------------------------------------------------
void print_rectangle_on_head(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(0, 0, 127 , 15, White);
 800169e:	2301      	movs	r3, #1
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	230f      	movs	r3, #15
 80016a4:	227f      	movs	r2, #127	; 0x7f
 80016a6:	2100      	movs	r1, #0
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff f92b 	bl	8000904 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 80016ae:	f7fe ff6f 	bl	8000590 <ssd1306_UpdateScreen>
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <clear_menu_items>:
// ----------------------------------------------------------------------------------------
// Clear some menu items.
void clear_menu_items (bool first, bool second, bool third, bool fourth)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4604      	mov	r4, r0
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	4623      	mov	r3, r4
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	4603      	mov	r3, r0
 80016cc:	71bb      	strb	r3, [r7, #6]
 80016ce:	460b      	mov	r3, r1
 80016d0:	717b      	strb	r3, [r7, #5]
 80016d2:	4613      	mov	r3, r2
 80016d4:	713b      	strb	r3, [r7, #4]
	uint8_t start_row_x = 15;
 80016d6:	230f      	movs	r3, #15
 80016d8:	77fb      	strb	r3, [r7, #31]
	char str[16] = "              ";   // Must be 15
 80016da:	4b2c      	ldr	r3, [pc, #176]	; (800178c <clear_menu_items+0xd4>)
 80016dc:	f107 040c 	add.w	r4, r7, #12
 80016e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e2:	c407      	stmia	r4!, {r0, r1, r2}
 80016e4:	8023      	strh	r3, [r4, #0]
 80016e6:	3402      	adds	r4, #2
 80016e8:	0c1b      	lsrs	r3, r3, #16
 80016ea:	7023      	strb	r3, [r4, #0]
 80016ec:	2300      	movs	r3, #0
 80016ee:	76fb      	strb	r3, [r7, #27]

	if(first == true)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00e      	beq.n	8001714 <clear_menu_items+0x5c>
	{
		ssd1306_SetCursor(start_row_x, first_menu_row);
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <clear_menu_items+0xd8>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	7ffb      	ldrb	r3, [r7, #31]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff f87b 	bl	80007fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8001706:	4a23      	ldr	r2, [pc, #140]	; (8001794 <clear_menu_items+0xdc>)
 8001708:	f107 000c 	add.w	r0, r7, #12
 800170c:	2301      	movs	r3, #1
 800170e:	ca06      	ldmia	r2, {r1, r2}
 8001710:	f7ff f84e 	bl	80007b0 <ssd1306_WriteString>
	}
	if(second == true)
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00e      	beq.n	8001738 <clear_menu_items+0x80>
	{
		ssd1306_SetCursor(start_row_x, second_menu_row);
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <clear_menu_items+0xe0>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	7ffb      	ldrb	r3, [r7, #31]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff f869 	bl	80007fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800172a:	4a1a      	ldr	r2, [pc, #104]	; (8001794 <clear_menu_items+0xdc>)
 800172c:	f107 000c 	add.w	r0, r7, #12
 8001730:	2301      	movs	r3, #1
 8001732:	ca06      	ldmia	r2, {r1, r2}
 8001734:	f7ff f83c 	bl	80007b0 <ssd1306_WriteString>
	}
	if(first == true)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00e      	beq.n	800175c <clear_menu_items+0xa4>
	{
		ssd1306_SetCursor(start_row_x, third_menu_row);
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <clear_menu_items+0xe4>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	7ffb      	ldrb	r3, [r7, #31]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff f857 	bl	80007fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800174e:	4a11      	ldr	r2, [pc, #68]	; (8001794 <clear_menu_items+0xdc>)
 8001750:	f107 000c 	add.w	r0, r7, #12
 8001754:	2301      	movs	r3, #1
 8001756:	ca06      	ldmia	r2, {r1, r2}
 8001758:	f7ff f82a 	bl	80007b0 <ssd1306_WriteString>
	}
	if(fourth == true)
 800175c:	793b      	ldrb	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00e      	beq.n	8001780 <clear_menu_items+0xc8>
	{
		ssd1306_SetCursor(start_row_x, fourth_menu_row);
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <clear_menu_items+0xe8>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	7ffb      	ldrb	r3, [r7, #31]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff f845 	bl	80007fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <clear_menu_items+0xdc>)
 8001774:	f107 000c 	add.w	r0, r7, #12
 8001778:	2301      	movs	r3, #1
 800177a:	ca06      	ldmia	r2, {r1, r2}
 800177c:	f7ff f818 	bl	80007b0 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8001780:	f7fe ff06 	bl	8000590 <ssd1306_UpdateScreen>
}
 8001784:	bf00      	nop
 8001786:	3724      	adds	r7, #36	; 0x24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}
 800178c:	080069c4 	.word	0x080069c4
 8001790:	2000001c 	.word	0x2000001c
 8001794:	20000000 	.word	0x20000000
 8001798:	2000001e 	.word	0x2000001e
 800179c:	20000020 	.word	0x20000020
 80017a0:	20000022 	.word	0x20000022

080017a4 <print_rows_on_oled_if_up>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_up(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
	char str[16] = {0};
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]

	clear_menu_items (true , true , true , true );
 80017b8:	2301      	movs	r3, #1
 80017ba:	2201      	movs	r2, #1
 80017bc:	2101      	movs	r1, #1
 80017be:	2001      	movs	r0, #1
 80017c0:	f7ff ff7a 	bl	80016b8 <clear_menu_items>

	print_rectangle_on_head();
 80017c4:	f7ff ff68 	bl	8001698 <print_rectangle_on_head>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 80017c8:	4b2c      	ldr	r3, [pc, #176]	; (800187c <print_rows_on_oled_if_up+0xd8>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4619      	mov	r1, r3
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff f813 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 80017d6:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <print_rows_on_oled_if_up+0xdc>)
 80017d8:	2301      	movs	r3, #1
 80017da:	ca06      	ldmia	r2, {r1, r2}
 80017dc:	4829      	ldr	r0, [pc, #164]	; (8001884 <print_rows_on_oled_if_up+0xe0>)
 80017de:	f7fe ffe7 	bl	80007b0 <ssd1306_WriteString>

	MenuItem_t * currentItem_buff_up = currentItem;				// Create buffer on selected current item pointer.
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <print_rows_on_oled_if_up+0xe4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <print_rows_on_oled_if_up+0xd8>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	74fb      	strb	r3, [r7, #19]
 80017ee:	e035      	b.n	800185c <print_rows_on_oled_if_up+0xb8>
	{
		// Print number of menu item
		itoa(currentItem_buff_up -> id, str, 10);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	7c1b      	ldrb	r3, [r3, #16]
 80017f4:	4618      	mov	r0, r3
 80017f6:	463b      	mov	r3, r7
 80017f8:	220a      	movs	r2, #10
 80017fa:	4619      	mov	r1, r3
 80017fc:	f005 f85a 	bl	80068b4 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <print_rows_on_oled_if_up+0xe8>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	7cfa      	ldrb	r2, [r7, #19]
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fff6 	bl	80007fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8001810:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <print_rows_on_oled_if_up+0xdc>)
 8001812:	4638      	mov	r0, r7
 8001814:	2301      	movs	r3, #1
 8001816:	ca06      	ldmia	r2, {r1, r2}
 8001818:	f7fe ffca 	bl	80007b0 <ssd1306_WriteString>

		// Print name of menu item
		strncpy(str, currentItem_buff_up -> name, 15);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	6959      	ldr	r1, [r3, #20]
 8001820:	463b      	mov	r3, r7
 8001822:	220f      	movs	r2, #15
 8001824:	4618      	mov	r0, r3
 8001826:	f005 f857 	bl	80068d8 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <print_rows_on_oled_if_up+0xec>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	7cfa      	ldrb	r2, [r7, #19]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe ffe1 	bl	80007fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800183a:	4a11      	ldr	r2, [pc, #68]	; (8001880 <print_rows_on_oled_if_up+0xdc>)
 800183c:	4638      	mov	r0, r7
 800183e:	2301      	movs	r3, #1
 8001840:	ca06      	ldmia	r2, {r1, r2}
 8001842:	f7fe ffb5 	bl	80007b0 <ssd1306_WriteString>

		currentItem_buff_up = currentItem_buff_up -> down;		// Make a step down
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	617b      	str	r3, [r7, #20]

		// Print only existing items
		if(currentItem_buff_up == 0)							// If no next item
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00b      	beq.n	800186a <print_rows_on_oled_if_up+0xc6>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <print_rows_on_oled_if_up+0xf0>)
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	7cfb      	ldrb	r3, [r7, #19]
 8001858:	4413      	add	r3, r2
 800185a:	74fb      	strb	r3, [r7, #19]
 800185c:	7cfb      	ldrb	r3, [r7, #19]
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <print_rows_on_oled_if_up+0xf4>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d9c3      	bls.n	80017f0 <print_rows_on_oled_if_up+0x4c>
 8001868:	e000      	b.n	800186c <print_rows_on_oled_if_up+0xc8>
		{
			break;
 800186a:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 800186c:	f7fe fe90 	bl	8000590 <ssd1306_UpdateScreen>
	scroll_bar();
 8001870:	f7ff fe9e 	bl	80015b0 <scroll_bar>
}
 8001874:	bf00      	nop
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000001c 	.word	0x2000001c
 8001880:	20000000 	.word	0x20000000
 8001884:	20000018 	.word	0x20000018
 8001888:	20000014 	.word	0x20000014
 800188c:	20000026 	.word	0x20000026
 8001890:	20000028 	.word	0x20000028
 8001894:	20000024 	.word	0x20000024
 8001898:	20000022 	.word	0x20000022

0800189c <print_rows_on_oled_if_down>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_down(void)	// print text menu item
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
	char str[16] = {0};
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]

	clear_menu_items (true , true , true , true );
 80018b0:	2301      	movs	r3, #1
 80018b2:	2201      	movs	r2, #1
 80018b4:	2101      	movs	r1, #1
 80018b6:	2001      	movs	r0, #1
 80018b8:	f7ff fefe 	bl	80016b8 <clear_menu_items>

	print_rectangle_on_head();
 80018bc:	f7ff feec 	bl	8001698 <print_rectangle_on_head>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 80018c0:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <print_rows_on_oled_if_down+0xe4>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7fe ff97 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 80018ce:	4a2d      	ldr	r2, [pc, #180]	; (8001984 <print_rows_on_oled_if_down+0xe8>)
 80018d0:	2301      	movs	r3, #1
 80018d2:	ca06      	ldmia	r2, {r1, r2}
 80018d4:	482c      	ldr	r0, [pc, #176]	; (8001988 <print_rows_on_oled_if_down+0xec>)
 80018d6:	f7fe ff6b 	bl	80007b0 <ssd1306_WriteString>

	MenuItem_t * currentItem_buff = currentItem;
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <print_rows_on_oled_if_down+0xf0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80018e0:	4b27      	ldr	r3, [pc, #156]	; (8001980 <print_rows_on_oled_if_down+0xe4>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	74fb      	strb	r3, [r7, #19]
 80018e6:	e03b      	b.n	8001960 <print_rows_on_oled_if_down+0xc4>
	{
		// Print number of menu item
        itoa(currentItem_buff -> id, str, 10);
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	7c1b      	ldrb	r3, [r3, #16]
 80018ec:	4618      	mov	r0, r3
 80018ee:	463b      	mov	r3, r7
 80018f0:	220a      	movs	r2, #10
 80018f2:	4619      	mov	r1, r3
 80018f4:	f004 ffde 	bl	80068b4 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <print_rows_on_oled_if_down+0xf4>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	7cfa      	ldrb	r2, [r7, #19]
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe ff7a 	bl	80007fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8001908:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <print_rows_on_oled_if_down+0xe8>)
 800190a:	4638      	mov	r0, r7
 800190c:	2301      	movs	r3, #1
 800190e:	ca06      	ldmia	r2, {r1, r2}
 8001910:	f7fe ff4e 	bl	80007b0 <ssd1306_WriteString>

		// Print name of menu item
		memset(str, 0, sizeof(str));
 8001914:	463b      	mov	r3, r7
 8001916:	2210      	movs	r2, #16
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f004 ffcc 	bl	80068b8 <memset>
	    strncpy(str, currentItem_buff -> name, 15);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	6959      	ldr	r1, [r3, #20]
 8001924:	463b      	mov	r3, r7
 8001926:	220f      	movs	r2, #15
 8001928:	4618      	mov	r0, r3
 800192a:	f004 ffd5 	bl	80068d8 <strncpy>
	    ssd1306_SetCursor(start_print_name_menu_x, row);
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <print_rows_on_oled_if_down+0xf8>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	7cfa      	ldrb	r2, [r7, #19]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe ff5f 	bl	80007fc <ssd1306_SetCursor>
	    ssd1306_WriteString(str,  Font_7x10, White);
 800193e:	4a11      	ldr	r2, [pc, #68]	; (8001984 <print_rows_on_oled_if_down+0xe8>)
 8001940:	4638      	mov	r0, r7
 8001942:	2301      	movs	r3, #1
 8001944:	ca06      	ldmia	r2, {r1, r2}
 8001946:	f7fe ff33 	bl	80007b0 <ssd1306_WriteString>

	    currentItem_buff = currentItem_buff -> down;			// Make a step down
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	617b      	str	r3, [r7, #20]

	    // Print only existing items
	    if(currentItem_buff == 0)		 						// If no next item
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <print_rows_on_oled_if_down+0xd2>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <print_rows_on_oled_if_down+0xfc>)
 8001958:	781a      	ldrb	r2, [r3, #0]
 800195a:	7cfb      	ldrb	r3, [r7, #19]
 800195c:	4413      	add	r3, r2
 800195e:	74fb      	strb	r3, [r7, #19]
 8001960:	7cfb      	ldrb	r3, [r7, #19]
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <print_rows_on_oled_if_down+0x100>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d9bd      	bls.n	80018e8 <print_rows_on_oled_if_down+0x4c>
 800196c:	e000      	b.n	8001970 <print_rows_on_oled_if_down+0xd4>
	    {
	    	break;
 800196e:	bf00      	nop
	    }
	 }
	 ssd1306_UpdateScreen();
 8001970:	f7fe fe0e 	bl	8000590 <ssd1306_UpdateScreen>
	 scroll_bar();
 8001974:	f7ff fe1c 	bl	80015b0 <scroll_bar>
}
 8001978:	bf00      	nop
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2000001c 	.word	0x2000001c
 8001984:	20000000 	.word	0x20000000
 8001988:	20000018 	.word	0x20000018
 800198c:	20000014 	.word	0x20000014
 8001990:	20000026 	.word	0x20000026
 8001994:	20000028 	.word	0x20000028
 8001998:	20000024 	.word	0x20000024
 800199c:	20000022 	.word	0x20000022

080019a0 <print_menu_init>:
// ----------------------------------------------------------------------------------------
// Print first 4 items of menu (only first time)
void print_menu_init(void)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
	MenuItem_t * currentItem_buff = currentItem;
 80019a6:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <print_menu_init+0x100>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	61fb      	str	r3, [r7, #28]

	print_rectangle_on_head();
 80019ac:	f7ff fe74 	bl	8001698 <print_rectangle_on_head>

	//Print selected name of menu
	char str[20] = ">> MAIN MENU <<";
 80019b0:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <print_menu_init+0x104>)
 80019b2:	1d3c      	adds	r4, r7, #4
 80019b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 80019be:	2103      	movs	r1, #3
 80019c0:	200a      	movs	r0, #10
 80019c2:	f7fe ff1b 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80019c6:	4a38      	ldr	r2, [pc, #224]	; (8001aa8 <print_menu_init+0x108>)
 80019c8:	1d38      	adds	r0, r7, #4
 80019ca:	2301      	movs	r3, #1
 80019cc:	ca06      	ldmia	r2, {r1, r2}
 80019ce:	f7fe feef 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80019d2:	f7fe fddd 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2214      	movs	r2, #20
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f004 ff6b 	bl	80068b8 <memset>

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80019e2:	4b32      	ldr	r3, [pc, #200]	; (8001aac <print_menu_init+0x10c>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	76fb      	strb	r3, [r7, #27]
 80019e8:	e04e      	b.n	8001a88 <print_menu_init+0xe8>
	{
		if(row == first_menu_row)
 80019ea:	7efb      	ldrb	r3, [r7, #27]
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <print_menu_init+0x10c>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d10d      	bne.n	8001a12 <print_menu_init+0x72>
		{
			// Print pointer on menu (On top)
			char str_pointer[4] = "->";
 80019f6:	f643 632d 	movw	r3, #15917	; 0x3e2d
 80019fa:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 80019fc:	7efb      	ldrb	r3, [r7, #27]
 80019fe:	4619      	mov	r1, r3
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7fe fefb 	bl	80007fc <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8001a06:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <print_menu_init+0x108>)
 8001a08:	4638      	mov	r0, r7
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	ca06      	ldmia	r2, {r1, r2}
 8001a0e:	f7fe fecf 	bl	80007b0 <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	7c1b      	ldrb	r3, [r3, #16]
 8001a16:	4618      	mov	r0, r3
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	220a      	movs	r2, #10
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f004 ff49 	bl	80068b4 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <print_menu_init+0x110>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	7efa      	ldrb	r2, [r7, #27]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fee5 	bl	80007fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8001a32:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <print_menu_init+0x108>)
 8001a34:	1d38      	adds	r0, r7, #4
 8001a36:	2301      	movs	r3, #1
 8001a38:	ca06      	ldmia	r2, {r1, r2}
 8001a3a:	f7fe feb9 	bl	80007b0 <ssd1306_WriteString>
		memset(str, 0, sizeof(str));
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2214      	movs	r2, #20
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 ff37 	bl	80068b8 <memset>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	6959      	ldr	r1, [r3, #20]
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	220f      	movs	r2, #15
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 ff40 	bl	80068d8 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <print_menu_init+0x114>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	7efa      	ldrb	r2, [r7, #27]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe feca 	bl	80007fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8001a68:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <print_menu_init+0x108>)
 8001a6a:	1d38      	adds	r0, r7, #4
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	ca06      	ldmia	r2, {r1, r2}
 8001a70:	f7fe fe9e 	bl	80007b0 <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8001a74:	f7fe fd8c 	bl	8000590 <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	61fb      	str	r3, [r7, #28]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <print_menu_init+0x118>)
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	7efb      	ldrb	r3, [r7, #27]
 8001a84:	4413      	add	r3, r2
 8001a86:	76fb      	strb	r3, [r7, #27]
 8001a88:	7efb      	ldrb	r3, [r7, #27]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <print_menu_init+0x11c>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d9aa      	bls.n	80019ea <print_menu_init+0x4a>
	}
	scroll_bar();
 8001a94:	f7ff fd8c 	bl	80015b0 <scroll_bar>
}
 8001a98:	bf00      	nop
 8001a9a:	3724      	adds	r7, #36	; 0x24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd90      	pop	{r4, r7, pc}
 8001aa0:	20000014 	.word	0x20000014
 8001aa4:	080069d4 	.word	0x080069d4
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	2000001c 	.word	0x2000001c
 8001ab0:	20000026 	.word	0x20000026
 8001ab4:	20000028 	.word	0x20000028
 8001ab8:	20000024 	.word	0x20000024
 8001abc:	20000022 	.word	0x20000022

08001ac0 <action>:
// ----------------------------------------------------------------------------------------
void action(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]

	clearn_oled();
 8001ad6:	f7fe fcab 	bl	8000430 <clearn_oled>

	print_rectangle_on_head();
 8001ada:	f7ff fddd 	bl	8001698 <print_rectangle_on_head>

	//Print selected name of menu on top of OLED
	MenuItem_t * currentItem_buff_parent = currentItem;
 8001ade:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <action+0x120>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	617b      	str	r3, [r7, #20]
	currentItem_buff_parent = currentItem_buff_parent -> parent;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	617b      	str	r3, [r7, #20]

	strncpy(str, currentItem_buff_parent -> name, 15);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	6959      	ldr	r1, [r3, #20]
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	220f      	movs	r2, #15
 8001af2:	4618      	mov	r0, r3
 8001af4:	f004 fef0 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001af8:	2103      	movs	r1, #3
 8001afa:	200a      	movs	r0, #10
 8001afc:	f7fe fe7e 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001b00:	4a38      	ldr	r2, [pc, #224]	; (8001be4 <action+0x124>)
 8001b02:	1d38      	adds	r0, r7, #4
 8001b04:	2301      	movs	r3, #1
 8001b06:	ca06      	ldmia	r2, {r1, r2}
 8001b08:	f7fe fe52 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001b0c:	f7fe fd40 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2210      	movs	r2, #16
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 fece 	bl	80068b8 <memset>

	MenuItem_t * currentItem_buff = currentItem;
 8001b1c:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <action+0x120>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61fb      	str	r3, [r7, #28]

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <action+0x128>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	76fb      	strb	r3, [r7, #27]
 8001b28:	e04b      	b.n	8001bc2 <action+0x102>
	{
		if(row == first_menu_row)
 8001b2a:	7efb      	ldrb	r3, [r7, #27]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <action+0x128>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d10d      	bne.n	8001b52 <action+0x92>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 8001b36:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8001b3a:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8001b3c:	7efb      	ldrb	r3, [r7, #27]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7fe fe5b 	bl	80007fc <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8001b46:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <action+0x124>)
 8001b48:	4638      	mov	r0, r7
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	ca06      	ldmia	r2, {r1, r2}
 8001b4e:	f7fe fe2f 	bl	80007b0 <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	7c1b      	ldrb	r3, [r3, #16]
 8001b56:	4618      	mov	r0, r3
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	220a      	movs	r2, #10
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f004 fea9 	bl	80068b4 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <action+0x12c>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	7efa      	ldrb	r2, [r7, #27]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fe45 	bl	80007fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <action+0x124>)
 8001b74:	1d38      	adds	r0, r7, #4
 8001b76:	2301      	movs	r3, #1
 8001b78:	ca06      	ldmia	r2, {r1, r2}
 8001b7a:	f7fe fe19 	bl	80007b0 <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	6959      	ldr	r1, [r3, #20]
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	220f      	movs	r2, #15
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 fea6 	bl	80068d8 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <action+0x130>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	7efa      	ldrb	r2, [r7, #27]
 8001b94:	4611      	mov	r1, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fe30 	bl	80007fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8001b9c:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <action+0x124>)
 8001b9e:	1d38      	adds	r0, r7, #4
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	ca06      	ldmia	r2, {r1, r2}
 8001ba4:	f7fe fe04 	bl	80007b0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001ba8:	f7fe fcf2 	bl	8000590 <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00b      	beq.n	8001bd0 <action+0x110>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <action+0x134>)
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	7efb      	ldrb	r3, [r7, #27]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	76fb      	strb	r3, [r7, #27]
 8001bc2:	7efb      	ldrb	r3, [r7, #27]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <action+0x138>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d9ad      	bls.n	8001b2a <action+0x6a>
 8001bce:	e000      	b.n	8001bd2 <action+0x112>
		{
			break;
 8001bd0:	bf00      	nop
		}
	}
	scroll_bar();
 8001bd2:	f7ff fced 	bl	80015b0 <scroll_bar>
}
 8001bd6:	bf00      	nop
 8001bd8:	3720      	adds	r7, #32
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000014 	.word	0x20000014
 8001be4:	20000000 	.word	0x20000000
 8001be8:	2000001c 	.word	0x2000001c
 8001bec:	20000026 	.word	0x20000026
 8001bf0:	20000028 	.word	0x20000028
 8001bf4:	20000024 	.word	0x20000024
 8001bf8:	20000022 	.word	0x20000022

08001bfc <return_from_menu>:
// ----------------------------------------------------------------------------------------
void return_from_menu(void)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
	currentItem = &items[0];											// Jump to main menu
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <return_from_menu+0x44>)
 8001c04:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <return_from_menu+0x48>)
 8001c06:	601a      	str	r2, [r3, #0]
	clearn_oled();
 8001c08:	f7fe fc12 	bl	8000430 <clearn_oled>

	// Print "MAIN MENU:"
	char str[20] = ">> MAIN MENU <<";
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <return_from_menu+0x4c>)
 8001c0e:	1d3c      	adds	r4, r7, #4
 8001c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	200a      	movs	r0, #10
 8001c1e:	f7fe fded 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <return_from_menu+0x50>)
 8001c24:	1d38      	adds	r0, r7, #4
 8001c26:	2301      	movs	r3, #1
 8001c28:	ca06      	ldmia	r2, {r1, r2}
 8001c2a:	f7fe fdc1 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001c2e:	f7fe fcaf 	bl	8000590 <ssd1306_UpdateScreen>

	print_menu_init();													// Print all start menu
 8001c32:	f7ff feb5 	bl	80019a0 <print_menu_init>
}
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd90      	pop	{r4, r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000014 	.word	0x20000014
 8001c44:	20000908 	.word	0x20000908
 8001c48:	080069d4 	.word	0x080069d4
 8001c4c:	20000000 	.word	0x20000000

08001c50 <do_it_function_menu_1>:
// ----------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_1(void)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
	clearn_oled();
 8001c56:	f7fe fbeb 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <do_it_function_menu_1+0xc4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6959      	ldr	r1, [r3, #20]
 8001c6e:	463b      	mov	r3, r7
 8001c70:	220f      	movs	r2, #15
 8001c72:	4618      	mov	r0, r3
 8001c74:	f004 fe30 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001c78:	2103      	movs	r1, #3
 8001c7a:	200a      	movs	r0, #10
 8001c7c:	f7fe fdbe 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001c80:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <do_it_function_menu_1+0xc8>)
 8001c82:	4638      	mov	r0, r7
 8001c84:	2301      	movs	r3, #1
 8001c86:	ca06      	ldmia	r2, {r1, r2}
 8001c88:	f7fe fd92 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001c8c:	f7fe fc80 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001c90:	463b      	mov	r3, r7
 8001c92:	2210      	movs	r2, #16
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 fe0e 	bl	80068b8 <memset>

	strncpy(str, "Doing something 1", sizeof(str));
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <do_it_function_menu_1+0xcc>)
 8001c9e:	463c      	mov	r4, r7
 8001ca0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <do_it_function_menu_1+0xd0>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4619      	mov	r1, r3
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7fe fda4 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001cb4:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <do_it_function_menu_1+0xc8>)
 8001cb6:	4638      	mov	r0, r7
 8001cb8:	2301      	movs	r3, #1
 8001cba:	ca06      	ldmia	r2, {r1, r2}
 8001cbc:	f7fe fd78 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001cc0:	f7fe fc66 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <do_it_function_menu_1+0xd4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <do_it_function_menu_1+0xd8>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd6:	4815      	ldr	r0, [pc, #84]	; (8001d2c <do_it_function_menu_1+0xdc>)
 8001cd8:	f001 feb5 	bl	8003a46 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001cdc:	20c8      	movs	r0, #200	; 0xc8
 8001cde:	f001 fb35 	bl	800334c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce8:	4810      	ldr	r0, [pc, #64]	; (8001d2c <do_it_function_menu_1+0xdc>)
 8001cea:	f001 feac 	bl	8003a46 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001cee:	20c8      	movs	r0, #200	; 0xc8
 8001cf0:	f001 fb2c 	bl	800334c <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <do_it_function_menu_1+0xd4>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d1e9      	bne.n	8001cd0 <do_it_function_menu_1+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <do_it_function_menu_1+0xd8>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8001d02:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <do_it_function_menu_1+0xc4>)
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <do_it_function_menu_1+0xe0>)
 8001d06:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001d08:	f7ff feda 	bl	8001ac0 <action>
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd90      	pop	{r4, r7, pc}
 8001d14:	20000014 	.word	0x20000014
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	080069e8 	.word	0x080069e8
 8001d20:	2000001c 	.word	0x2000001c
 8001d24:	200004b9 	.word	0x200004b9
 8001d28:	200004b8 	.word	0x200004b8
 8001d2c:	40011000 	.word	0x40011000
 8001d30:	2000080c 	.word	0x2000080c

08001d34 <items_menu_1_set_par_1>:
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_1(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
	clearn_oled();
 8001d3a:	f7fe fb79 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001d3e:	2300      	movs	r3, #0
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <items_menu_1_set_par_1+0xa4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6959      	ldr	r1, [r3, #20]
 8001d52:	463b      	mov	r3, r7
 8001d54:	220f      	movs	r2, #15
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fdbe 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001d5c:	2103      	movs	r1, #3
 8001d5e:	200a      	movs	r0, #10
 8001d60:	f7fe fd4c 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001d64:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <items_menu_1_set_par_1+0xa8>)
 8001d66:	4638      	mov	r0, r7
 8001d68:	2301      	movs	r3, #1
 8001d6a:	ca06      	ldmia	r2, {r1, r2}
 8001d6c:	f7fe fd20 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001d70:	f7fe fc0e 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001d74:	463b      	mov	r3, r7
 8001d76:	2210      	movs	r2, #16
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fd9c 	bl	80068b8 <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 8001d80:	463b      	mov	r3, r7
 8001d82:	2210      	movs	r2, #16
 8001d84:	4916      	ldr	r1, [pc, #88]	; (8001de0 <items_menu_1_set_par_1+0xac>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f004 fda6 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <items_menu_1_set_par_1+0xb0>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	4619      	mov	r1, r3
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7fe fd31 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001d9a:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <items_menu_1_set_par_1+0xa8>)
 8001d9c:	4638      	mov	r0, r7
 8001d9e:	2301      	movs	r3, #1
 8001da0:	ca06      	ldmia	r2, {r1, r2}
 8001da2:	f7fe fd05 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001da6:	f7fe fbf3 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <items_menu_1_set_par_1+0xb4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <items_menu_1_set_par_1+0xb8>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	}while (button_status != BUTTON_ENTER);
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <items_menu_1_set_par_1+0xb4>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d1fb      	bne.n	8001db6 <items_menu_1_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <items_menu_1_set_par_1+0xb8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <items_menu_1_set_par_1+0xa4>)
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <items_menu_1_set_par_1+0xbc>)
 8001dc8:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001dca:	f7ff fe79 	bl	8001ac0 <action>
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000014 	.word	0x20000014
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	080069fc 	.word	0x080069fc
 8001de4:	2000001c 	.word	0x2000001c
 8001de8:	200004b9 	.word	0x200004b9
 8001dec:	200004b8 	.word	0x200004b8
 8001df0:	2000080c 	.word	0x2000080c

08001df4 <items_menu_1_set_par_2>:
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_2(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
	clearn_oled();
 8001dfa:	f7fe fb19 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <items_menu_1_set_par_2+0xa4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6959      	ldr	r1, [r3, #20]
 8001e12:	463b      	mov	r3, r7
 8001e14:	220f      	movs	r2, #15
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 fd5e 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001e1c:	2103      	movs	r1, #3
 8001e1e:	200a      	movs	r0, #10
 8001e20:	f7fe fcec 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001e24:	4a1d      	ldr	r2, [pc, #116]	; (8001e9c <items_menu_1_set_par_2+0xa8>)
 8001e26:	4638      	mov	r0, r7
 8001e28:	2301      	movs	r3, #1
 8001e2a:	ca06      	ldmia	r2, {r1, r2}
 8001e2c:	f7fe fcc0 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001e30:	f7fe fbae 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001e34:	463b      	mov	r3, r7
 8001e36:	2210      	movs	r2, #16
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 fd3c 	bl	80068b8 <memset>

	strncpy(str, "Set parametr 2", sizeof(str));
 8001e40:	463b      	mov	r3, r7
 8001e42:	2210      	movs	r2, #16
 8001e44:	4916      	ldr	r1, [pc, #88]	; (8001ea0 <items_menu_1_set_par_2+0xac>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 fd46 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <items_menu_1_set_par_2+0xb0>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4619      	mov	r1, r3
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7fe fcd1 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001e5a:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <items_menu_1_set_par_2+0xa8>)
 8001e5c:	4638      	mov	r0, r7
 8001e5e:	2301      	movs	r3, #1
 8001e60:	ca06      	ldmia	r2, {r1, r2}
 8001e62:	f7fe fca5 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001e66:	f7fe fb93 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <items_menu_1_set_par_2+0xb4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <items_menu_1_set_par_2+0xb8>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <items_menu_1_set_par_2+0xb4>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d1fb      	bne.n	8001e76 <items_menu_1_set_par_2+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <items_menu_1_set_par_2+0xb8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <items_menu_1_set_par_2+0xa4>)
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <items_menu_1_set_par_2+0xbc>)
 8001e88:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001e8a:	f7ff fe19 	bl	8001ac0 <action>
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000014 	.word	0x20000014
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	08006a0c 	.word	0x08006a0c
 8001ea4:	2000001c 	.word	0x2000001c
 8001ea8:	200004b9 	.word	0x200004b9
 8001eac:	200004b8 	.word	0x200004b8
 8001eb0:	2000080c 	.word	0x2000080c

08001eb4 <items_menu_1_set_par_3>:
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_3(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
	clearn_oled();
 8001eba:	f7fe fab9 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <items_menu_1_set_par_3+0xa4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6959      	ldr	r1, [r3, #20]
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 fcfe 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001edc:	2103      	movs	r1, #3
 8001ede:	200a      	movs	r0, #10
 8001ee0:	f7fe fc8c 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <items_menu_1_set_par_3+0xa8>)
 8001ee6:	4638      	mov	r0, r7
 8001ee8:	2301      	movs	r3, #1
 8001eea:	ca06      	ldmia	r2, {r1, r2}
 8001eec:	f7fe fc60 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001ef0:	f7fe fb4e 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f004 fcdc 	bl	80068b8 <memset>

	strncpy(str, "Set parametr 3", sizeof(str));
 8001f00:	463b      	mov	r3, r7
 8001f02:	2210      	movs	r2, #16
 8001f04:	4916      	ldr	r1, [pc, #88]	; (8001f60 <items_menu_1_set_par_3+0xac>)
 8001f06:	4618      	mov	r0, r3
 8001f08:	f004 fce6 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <items_menu_1_set_par_3+0xb0>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4619      	mov	r1, r3
 8001f14:	2000      	movs	r0, #0
 8001f16:	f7fe fc71 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001f1a:	4a10      	ldr	r2, [pc, #64]	; (8001f5c <items_menu_1_set_par_3+0xa8>)
 8001f1c:	4638      	mov	r0, r7
 8001f1e:	2301      	movs	r3, #1
 8001f20:	ca06      	ldmia	r2, {r1, r2}
 8001f22:	f7fe fc45 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001f26:	f7fe fb33 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <items_menu_1_set_par_3+0xb4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <items_menu_1_set_par_3+0xb8>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <items_menu_1_set_par_3+0xb4>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d1fb      	bne.n	8001f36 <items_menu_1_set_par_3+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <items_menu_1_set_par_3+0xb8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <items_menu_1_set_par_3+0xa4>)
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <items_menu_1_set_par_3+0xbc>)
 8001f48:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001f4a:	f7ff fdb9 	bl	8001ac0 <action>
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000014 	.word	0x20000014
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	08006a1c 	.word	0x08006a1c
 8001f64:	2000001c 	.word	0x2000001c
 8001f68:	200004b9 	.word	0x200004b9
 8001f6c:	200004b8 	.word	0x200004b8
 8001f70:	2000080c 	.word	0x2000080c

08001f74 <do_it_function_menu_2>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_2(void)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
	clearn_oled();
 8001f7a:	f7fe fa59 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001f7e:	2300      	movs	r3, #0
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001f8c:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <do_it_function_menu_2+0xc4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6959      	ldr	r1, [r3, #20]
 8001f92:	463b      	mov	r3, r7
 8001f94:	220f      	movs	r2, #15
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 fc9e 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001f9c:	2103      	movs	r1, #3
 8001f9e:	200a      	movs	r0, #10
 8001fa0:	f7fe fc2c 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001fa4:	4a25      	ldr	r2, [pc, #148]	; (800203c <do_it_function_menu_2+0xc8>)
 8001fa6:	4638      	mov	r0, r7
 8001fa8:	2301      	movs	r3, #1
 8001faa:	ca06      	ldmia	r2, {r1, r2}
 8001fac:	f7fe fc00 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001fb0:	f7fe faee 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 fc7c 	bl	80068b8 <memset>

	strncpy(str, "Doing something 2", sizeof(str));
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <do_it_function_menu_2+0xcc>)
 8001fc2:	463c      	mov	r4, r7
 8001fc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <do_it_function_menu_2+0xd0>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7fe fc12 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001fd8:	4a18      	ldr	r2, [pc, #96]	; (800203c <do_it_function_menu_2+0xc8>)
 8001fda:	4638      	mov	r0, r7
 8001fdc:	2301      	movs	r3, #1
 8001fde:	ca06      	ldmia	r2, {r1, r2}
 8001fe0:	f7fe fbe6 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001fe4:	f7fe fad4 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <do_it_function_menu_2+0xd4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <do_it_function_menu_2+0xd8>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ffa:	4815      	ldr	r0, [pc, #84]	; (8002050 <do_it_function_menu_2+0xdc>)
 8001ffc:	f001 fd23 	bl	8003a46 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8002000:	2032      	movs	r0, #50	; 0x32
 8002002:	f001 f9a3 	bl	800334c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800200c:	4810      	ldr	r0, [pc, #64]	; (8002050 <do_it_function_menu_2+0xdc>)
 800200e:	f001 fd1a 	bl	8003a46 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8002012:	2032      	movs	r0, #50	; 0x32
 8002014:	f001 f99a 	bl	800334c <HAL_Delay>
	}while (button_status != BUTTON_ENTER);
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <do_it_function_menu_2+0xd4>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d1e9      	bne.n	8001ff4 <do_it_function_menu_2+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <do_it_function_menu_2+0xd8>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <do_it_function_menu_2+0xc4>)
 8002028:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <do_it_function_menu_2+0xe0>)
 800202a:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800202c:	f7ff fd48 	bl	8001ac0 <action>
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	20000014 	.word	0x20000014
 800203c:	20000000 	.word	0x20000000
 8002040:	08006a2c 	.word	0x08006a2c
 8002044:	2000001c 	.word	0x2000001c
 8002048:	200004b9 	.word	0x200004b9
 800204c:	200004b8 	.word	0x200004b8
 8002050:	40011000 	.word	0x40011000
 8002054:	20000638 	.word	0x20000638

08002058 <items_menu_2_set_par_1>:
// ----------------------------------------------------------------------------------------
void items_menu_2_set_par_1(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
	clearn_oled();
 800205e:	f7fe f9e7 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002062:	2300      	movs	r3, #0
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <items_menu_2_set_par_1+0xa4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6959      	ldr	r1, [r3, #20]
 8002076:	463b      	mov	r3, r7
 8002078:	220f      	movs	r2, #15
 800207a:	4618      	mov	r0, r3
 800207c:	f004 fc2c 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002080:	2103      	movs	r1, #3
 8002082:	200a      	movs	r0, #10
 8002084:	f7fe fbba 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002088:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <items_menu_2_set_par_1+0xa8>)
 800208a:	4638      	mov	r0, r7
 800208c:	2301      	movs	r3, #1
 800208e:	ca06      	ldmia	r2, {r1, r2}
 8002090:	f7fe fb8e 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002094:	f7fe fa7c 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002098:	463b      	mov	r3, r7
 800209a:	2210      	movs	r2, #16
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f004 fc0a 	bl	80068b8 <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 80020a4:	463b      	mov	r3, r7
 80020a6:	2210      	movs	r2, #16
 80020a8:	4916      	ldr	r1, [pc, #88]	; (8002104 <items_menu_2_set_par_1+0xac>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 fc14 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <items_menu_2_set_par_1+0xb0>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	4619      	mov	r1, r3
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7fe fb9f 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <items_menu_2_set_par_1+0xa8>)
 80020c0:	4638      	mov	r0, r7
 80020c2:	2301      	movs	r3, #1
 80020c4:	ca06      	ldmia	r2, {r1, r2}
 80020c6:	f7fe fb73 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80020ca:	f7fe fa61 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <items_menu_2_set_par_1+0xb4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <items_menu_2_set_par_1+0xb8>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <items_menu_2_set_par_1+0xb4>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d1fb      	bne.n	80020da <items_menu_2_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <items_menu_2_set_par_1+0xb8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <items_menu_2_set_par_1+0xa4>)
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <items_menu_2_set_par_1+0xbc>)
 80020ec:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80020ee:	f7ff fce7 	bl	8001ac0 <action>
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000014 	.word	0x20000014
 8002100:	20000000 	.word	0x20000000
 8002104:	080069fc 	.word	0x080069fc
 8002108:	2000001c 	.word	0x2000001c
 800210c:	200004b9 	.word	0x200004b9
 8002110:	200004b8 	.word	0x200004b8
 8002114:	20000638 	.word	0x20000638

08002118 <do_it_function_menu_3>:
// ----------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_3(void)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
	clearn_oled();
 800211e:	f7fe f987 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002122:	2300      	movs	r3, #0
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <do_it_function_menu_3+0xc8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6959      	ldr	r1, [r3, #20]
 8002136:	463b      	mov	r3, r7
 8002138:	220f      	movs	r2, #15
 800213a:	4618      	mov	r0, r3
 800213c:	f004 fbcc 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002140:	2103      	movs	r1, #3
 8002142:	200a      	movs	r0, #10
 8002144:	f7fe fb5a 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002148:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <do_it_function_menu_3+0xcc>)
 800214a:	4638      	mov	r0, r7
 800214c:	2301      	movs	r3, #1
 800214e:	ca06      	ldmia	r2, {r1, r2}
 8002150:	f7fe fb2e 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002154:	f7fe fa1c 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002158:	463b      	mov	r3, r7
 800215a:	2210      	movs	r2, #16
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f004 fbaa 	bl	80068b8 <memset>

	strncpy(str, "Doing something 3", sizeof(str));
 8002164:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <do_it_function_menu_3+0xd0>)
 8002166:	463c      	mov	r4, r7
 8002168:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <do_it_function_menu_3+0xd4>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4619      	mov	r1, r3
 8002176:	2000      	movs	r0, #0
 8002178:	f7fe fb40 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <do_it_function_menu_3+0xcc>)
 800217e:	4638      	mov	r0, r7
 8002180:	2301      	movs	r3, #1
 8002182:	ca06      	ldmia	r2, {r1, r2}
 8002184:	f7fe fb14 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002188:	f7fe fa02 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800218c:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <do_it_function_menu_3+0xd8>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <do_it_function_menu_3+0xdc>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800219e:	4816      	ldr	r0, [pc, #88]	; (80021f8 <do_it_function_menu_3+0xe0>)
 80021a0:	f001 fc51 	bl	8003a46 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80021a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021a8:	f001 f8d0 	bl	800334c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021b2:	4811      	ldr	r0, [pc, #68]	; (80021f8 <do_it_function_menu_3+0xe0>)
 80021b4:	f001 fc47 	bl	8003a46 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80021b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021bc:	f001 f8c6 	bl	800334c <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <do_it_function_menu_3+0xd8>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d1e7      	bne.n	8002198 <do_it_function_menu_3+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <do_it_function_menu_3+0xdc>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <do_it_function_menu_3+0xc8>)
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <do_it_function_menu_3+0xe4>)
 80021d2:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80021d4:	f7ff fc74 	bl	8001ac0 <action>
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	20000014 	.word	0x20000014
 80021e4:	20000000 	.word	0x20000000
 80021e8:	08006a40 	.word	0x08006a40
 80021ec:	2000001c 	.word	0x2000001c
 80021f0:	200004b9 	.word	0x200004b9
 80021f4:	200004b8 	.word	0x200004b8
 80021f8:	40011000 	.word	0x40011000
 80021fc:	200008c0 	.word	0x200008c0

08002200 <do_it_function_menu_4>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// ----------------------------------------------------------------------------------------
void do_it_function_menu_4(void)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
	clearn_oled();
 8002206:	f7fe f913 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 800220a:	2300      	movs	r3, #0
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <do_it_function_menu_4+0xc8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6959      	ldr	r1, [r3, #20]
 800221e:	463b      	mov	r3, r7
 8002220:	220f      	movs	r2, #15
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fb58 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002228:	2103      	movs	r1, #3
 800222a:	200a      	movs	r0, #10
 800222c:	f7fe fae6 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002230:	4a26      	ldr	r2, [pc, #152]	; (80022cc <do_it_function_menu_4+0xcc>)
 8002232:	4638      	mov	r0, r7
 8002234:	2301      	movs	r3, #1
 8002236:	ca06      	ldmia	r2, {r1, r2}
 8002238:	f7fe faba 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800223c:	f7fe f9a8 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002240:	463b      	mov	r3, r7
 8002242:	2210      	movs	r2, #16
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f004 fb36 	bl	80068b8 <memset>

	strncpy(str, "Doing something 4", sizeof(str));
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <do_it_function_menu_4+0xd0>)
 800224e:	463c      	mov	r4, r7
 8002250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002252:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 8002256:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <do_it_function_menu_4+0xd4>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4619      	mov	r1, r3
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe facc 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <do_it_function_menu_4+0xcc>)
 8002266:	4638      	mov	r0, r7
 8002268:	2301      	movs	r3, #1
 800226a:	ca06      	ldmia	r2, {r1, r2}
 800226c:	f7fe faa0 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002270:	f7fe f98e 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <do_it_function_menu_4+0xd8>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <do_it_function_menu_4+0xdc>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002280:	2200      	movs	r2, #0
 8002282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002286:	4816      	ldr	r0, [pc, #88]	; (80022e0 <do_it_function_menu_4+0xe0>)
 8002288:	f001 fbdd 	bl	8003a46 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 800228c:	2014      	movs	r0, #20
 800228e:	f001 f85d 	bl	800334c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002298:	4811      	ldr	r0, [pc, #68]	; (80022e0 <do_it_function_menu_4+0xe0>)
 800229a:	f001 fbd4 	bl	8003a46 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800229e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022a2:	f001 f853 	bl	800334c <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <do_it_function_menu_4+0xd8>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d1e8      	bne.n	8002280 <do_it_function_menu_4+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <do_it_function_menu_4+0xdc>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <do_it_function_menu_4+0xc8>)
 80022b6:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <do_it_function_menu_4+0xe4>)
 80022b8:	601a      	str	r2, [r3, #0]
	action();
 80022ba:	f7ff fc01 	bl	8001ac0 <action>
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd90      	pop	{r4, r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000014 	.word	0x20000014
 80022cc:	20000000 	.word	0x20000000
 80022d0:	08006a54 	.word	0x08006a54
 80022d4:	2000001c 	.word	0x2000001c
 80022d8:	200004b9 	.word	0x200004b9
 80022dc:	200004b8 	.word	0x200004b8
 80022e0:	40011000 	.word	0x40011000
 80022e4:	200006a4 	.word	0x200006a4

080022e8 <items_menu_4_set_par_1>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_1(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
	clearn_oled();
 80022ee:	f7fe f89f 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <items_menu_4_set_par_1+0xa4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6959      	ldr	r1, [r3, #20]
 8002306:	463b      	mov	r3, r7
 8002308:	220f      	movs	r2, #15
 800230a:	4618      	mov	r0, r3
 800230c:	f004 fae4 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002310:	2103      	movs	r1, #3
 8002312:	200a      	movs	r0, #10
 8002314:	f7fe fa72 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <items_menu_4_set_par_1+0xa8>)
 800231a:	4638      	mov	r0, r7
 800231c:	2301      	movs	r3, #1
 800231e:	ca06      	ldmia	r2, {r1, r2}
 8002320:	f7fe fa46 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002324:	f7fe f934 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002328:	463b      	mov	r3, r7
 800232a:	2210      	movs	r2, #16
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f004 fac2 	bl	80068b8 <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 8002334:	463b      	mov	r3, r7
 8002336:	2210      	movs	r2, #16
 8002338:	4916      	ldr	r1, [pc, #88]	; (8002394 <items_menu_4_set_par_1+0xac>)
 800233a:	4618      	mov	r0, r3
 800233c:	f004 facc 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <items_menu_4_set_par_1+0xb0>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4619      	mov	r1, r3
 8002348:	2000      	movs	r0, #0
 800234a:	f7fe fa57 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800234e:	4a10      	ldr	r2, [pc, #64]	; (8002390 <items_menu_4_set_par_1+0xa8>)
 8002350:	4638      	mov	r0, r7
 8002352:	2301      	movs	r3, #1
 8002354:	ca06      	ldmia	r2, {r1, r2}
 8002356:	f7fe fa2b 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800235a:	f7fe f919 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <items_menu_4_set_par_1+0xb4>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <items_menu_4_set_par_1+0xb8>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <items_menu_4_set_par_1+0xb4>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d1fb      	bne.n	800236a <items_menu_4_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <items_menu_4_set_par_1+0xb8>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <items_menu_4_set_par_1+0xa4>)
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <items_menu_4_set_par_1+0xbc>)
 800237c:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800237e:	f7ff fb9f 	bl	8001ac0 <action>
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000014 	.word	0x20000014
 8002390:	20000000 	.word	0x20000000
 8002394:	080069fc 	.word	0x080069fc
 8002398:	2000001c 	.word	0x2000001c
 800239c:	200004b9 	.word	0x200004b9
 80023a0:	200004b8 	.word	0x200004b8
 80023a4:	200006a4 	.word	0x200006a4

080023a8 <items_menu_4_set_par_2>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_2(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
	clearn_oled();
 80023ae:	f7fe f83f 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <items_menu_4_set_par_2+0xa4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6959      	ldr	r1, [r3, #20]
 80023c6:	463b      	mov	r3, r7
 80023c8:	220f      	movs	r2, #15
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 fa84 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 80023d0:	2103      	movs	r1, #3
 80023d2:	200a      	movs	r0, #10
 80023d4:	f7fe fa12 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80023d8:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <items_menu_4_set_par_2+0xa8>)
 80023da:	4638      	mov	r0, r7
 80023dc:	2301      	movs	r3, #1
 80023de:	ca06      	ldmia	r2, {r1, r2}
 80023e0:	f7fe f9e6 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80023e4:	f7fe f8d4 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80023e8:	463b      	mov	r3, r7
 80023ea:	2210      	movs	r2, #16
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f004 fa62 	bl	80068b8 <memset>

	strncpy(str, "Set parametr 2", sizeof(str));
 80023f4:	463b      	mov	r3, r7
 80023f6:	2210      	movs	r2, #16
 80023f8:	4916      	ldr	r1, [pc, #88]	; (8002454 <items_menu_4_set_par_2+0xac>)
 80023fa:	4618      	mov	r0, r3
 80023fc:	f004 fa6c 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8002400:	4b15      	ldr	r3, [pc, #84]	; (8002458 <items_menu_4_set_par_2+0xb0>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4619      	mov	r1, r3
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe f9f7 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <items_menu_4_set_par_2+0xa8>)
 8002410:	4638      	mov	r0, r7
 8002412:	2301      	movs	r3, #1
 8002414:	ca06      	ldmia	r2, {r1, r2}
 8002416:	f7fe f9cb 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800241a:	f7fe f8b9 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <items_menu_4_set_par_2+0xb4>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <items_menu_4_set_par_2+0xb8>)
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <items_menu_4_set_par_2+0xb4>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d1fb      	bne.n	800242a <items_menu_4_set_par_2+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <items_menu_4_set_par_2+0xb8>)
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <items_menu_4_set_par_2+0xa4>)
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <items_menu_4_set_par_2+0xbc>)
 800243c:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800243e:	f7ff fb3f 	bl	8001ac0 <action>
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000014 	.word	0x20000014
 8002450:	20000000 	.word	0x20000000
 8002454:	08006a0c 	.word	0x08006a0c
 8002458:	2000001c 	.word	0x2000001c
 800245c:	200004b9 	.word	0x200004b9
 8002460:	200004b8 	.word	0x200004b8
 8002464:	200006a4 	.word	0x200006a4

08002468 <items_menu_4_set_par_3>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_3(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
	clearn_oled();
 800246e:	f7fd ffdf 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002472:	2300      	movs	r3, #0
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002480:	4b22      	ldr	r3, [pc, #136]	; (800250c <items_menu_4_set_par_3+0xa4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6959      	ldr	r1, [r3, #20]
 8002486:	463b      	mov	r3, r7
 8002488:	220f      	movs	r2, #15
 800248a:	4618      	mov	r0, r3
 800248c:	f004 fa24 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002490:	2103      	movs	r1, #3
 8002492:	200a      	movs	r0, #10
 8002494:	f7fe f9b2 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002498:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <items_menu_4_set_par_3+0xa8>)
 800249a:	4638      	mov	r0, r7
 800249c:	2301      	movs	r3, #1
 800249e:	ca06      	ldmia	r2, {r1, r2}
 80024a0:	f7fe f986 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80024a4:	f7fe f874 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80024a8:	463b      	mov	r3, r7
 80024aa:	2210      	movs	r2, #16
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 fa02 	bl	80068b8 <memset>

	strncpy(str, "Set parametr 3", sizeof(str));
 80024b4:	463b      	mov	r3, r7
 80024b6:	2210      	movs	r2, #16
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <items_menu_4_set_par_3+0xac>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 fa0c 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <items_menu_4_set_par_3+0xb0>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	4619      	mov	r1, r3
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7fe f997 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80024ce:	4a10      	ldr	r2, [pc, #64]	; (8002510 <items_menu_4_set_par_3+0xa8>)
 80024d0:	4638      	mov	r0, r7
 80024d2:	2301      	movs	r3, #1
 80024d4:	ca06      	ldmia	r2, {r1, r2}
 80024d6:	f7fe f96b 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80024da:	f7fe f859 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <items_menu_4_set_par_3+0xb4>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80024e4:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <items_menu_4_set_par_3+0xb8>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <items_menu_4_set_par_3+0xb4>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d1fb      	bne.n	80024ea <items_menu_4_set_par_3+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <items_menu_4_set_par_3+0xb8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <items_menu_4_set_par_3+0xa4>)
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <items_menu_4_set_par_3+0xbc>)
 80024fc:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80024fe:	f7ff fadf 	bl	8001ac0 <action>
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000014 	.word	0x20000014
 8002510:	20000000 	.word	0x20000000
 8002514:	08006a1c 	.word	0x08006a1c
 8002518:	2000001c 	.word	0x2000001c
 800251c:	200004b9 	.word	0x200004b9
 8002520:	200004b8 	.word	0x200004b8
 8002524:	200006a4 	.word	0x200006a4

08002528 <items_menu_4_set_par_4>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_4(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
	clearn_oled();
 800252e:	f7fd ff7f 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002532:	2300      	movs	r3, #0
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002540:	4b22      	ldr	r3, [pc, #136]	; (80025cc <items_menu_4_set_par_4+0xa4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6959      	ldr	r1, [r3, #20]
 8002546:	463b      	mov	r3, r7
 8002548:	220f      	movs	r2, #15
 800254a:	4618      	mov	r0, r3
 800254c:	f004 f9c4 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002550:	2103      	movs	r1, #3
 8002552:	200a      	movs	r0, #10
 8002554:	f7fe f952 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002558:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <items_menu_4_set_par_4+0xa8>)
 800255a:	4638      	mov	r0, r7
 800255c:	2301      	movs	r3, #1
 800255e:	ca06      	ldmia	r2, {r1, r2}
 8002560:	f7fe f926 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002564:	f7fe f814 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002568:	463b      	mov	r3, r7
 800256a:	2210      	movs	r2, #16
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f004 f9a2 	bl	80068b8 <memset>

	strncpy(str, "Set parametr 4", sizeof(str));
 8002574:	463b      	mov	r3, r7
 8002576:	2210      	movs	r2, #16
 8002578:	4916      	ldr	r1, [pc, #88]	; (80025d4 <items_menu_4_set_par_4+0xac>)
 800257a:	4618      	mov	r0, r3
 800257c:	f004 f9ac 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <items_menu_4_set_par_4+0xb0>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4619      	mov	r1, r3
 8002588:	2000      	movs	r0, #0
 800258a:	f7fe f937 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800258e:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <items_menu_4_set_par_4+0xa8>)
 8002590:	4638      	mov	r0, r7
 8002592:	2301      	movs	r3, #1
 8002594:	ca06      	ldmia	r2, {r1, r2}
 8002596:	f7fe f90b 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800259a:	f7fd fff9 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <items_menu_4_set_par_4+0xb4>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <items_menu_4_set_par_4+0xb8>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <items_menu_4_set_par_4+0xb4>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d1fb      	bne.n	80025aa <items_menu_4_set_par_4+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <items_menu_4_set_par_4+0xb8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <items_menu_4_set_par_4+0xa4>)
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <items_menu_4_set_par_4+0xbc>)
 80025bc:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80025be:	f7ff fa7f 	bl	8001ac0 <action>
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000014 	.word	0x20000014
 80025d0:	20000000 	.word	0x20000000
 80025d4:	08006a68 	.word	0x08006a68
 80025d8:	2000001c 	.word	0x2000001c
 80025dc:	200004b9 	.word	0x200004b9
 80025e0:	200004b8 	.word	0x200004b8
 80025e4:	200006a4 	.word	0x200006a4

080025e8 <items_menu_4_set_par_5>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_5(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
	clearn_oled();
 80025ee:	f7fd ff1f 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80025f2:	2300      	movs	r3, #0
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002600:	4b22      	ldr	r3, [pc, #136]	; (800268c <items_menu_4_set_par_5+0xa4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6959      	ldr	r1, [r3, #20]
 8002606:	463b      	mov	r3, r7
 8002608:	220f      	movs	r2, #15
 800260a:	4618      	mov	r0, r3
 800260c:	f004 f964 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002610:	2103      	movs	r1, #3
 8002612:	200a      	movs	r0, #10
 8002614:	f7fe f8f2 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <items_menu_4_set_par_5+0xa8>)
 800261a:	4638      	mov	r0, r7
 800261c:	2301      	movs	r3, #1
 800261e:	ca06      	ldmia	r2, {r1, r2}
 8002620:	f7fe f8c6 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002624:	f7fd ffb4 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002628:	463b      	mov	r3, r7
 800262a:	2210      	movs	r2, #16
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f004 f942 	bl	80068b8 <memset>

	strncpy(str, "Set parametr 5", sizeof(str));
 8002634:	463b      	mov	r3, r7
 8002636:	2210      	movs	r2, #16
 8002638:	4916      	ldr	r1, [pc, #88]	; (8002694 <items_menu_4_set_par_5+0xac>)
 800263a:	4618      	mov	r0, r3
 800263c:	f004 f94c 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <items_menu_4_set_par_5+0xb0>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	4619      	mov	r1, r3
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe f8d7 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800264e:	4a10      	ldr	r2, [pc, #64]	; (8002690 <items_menu_4_set_par_5+0xa8>)
 8002650:	4638      	mov	r0, r7
 8002652:	2301      	movs	r3, #1
 8002654:	ca06      	ldmia	r2, {r1, r2}
 8002656:	f7fe f8ab 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800265a:	f7fd ff99 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <items_menu_4_set_par_5+0xb4>)
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <items_menu_4_set_par_5+0xb8>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <items_menu_4_set_par_5+0xb4>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d1fb      	bne.n	800266a <items_menu_4_set_par_5+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <items_menu_4_set_par_5+0xb8>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <items_menu_4_set_par_5+0xa4>)
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <items_menu_4_set_par_5+0xbc>)
 800267c:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800267e:	f7ff fa1f 	bl	8001ac0 <action>
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000014 	.word	0x20000014
 8002690:	20000000 	.word	0x20000000
 8002694:	08006a78 	.word	0x08006a78
 8002698:	2000001c 	.word	0x2000001c
 800269c:	200004b9 	.word	0x200004b9
 80026a0:	200004b8 	.word	0x200004b8
 80026a4:	200006a4 	.word	0x200006a4

080026a8 <items_menu_4_set_par_6>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_6(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
	clearn_oled();
 80026ae:	f7fd febf 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80026b2:	2300      	movs	r3, #0
 80026b4:	603b      	str	r3, [r7, #0]
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <items_menu_4_set_par_6+0xa4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6959      	ldr	r1, [r3, #20]
 80026c6:	463b      	mov	r3, r7
 80026c8:	220f      	movs	r2, #15
 80026ca:	4618      	mov	r0, r3
 80026cc:	f004 f904 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 80026d0:	2103      	movs	r1, #3
 80026d2:	200a      	movs	r0, #10
 80026d4:	f7fe f892 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80026d8:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <items_menu_4_set_par_6+0xa8>)
 80026da:	4638      	mov	r0, r7
 80026dc:	2301      	movs	r3, #1
 80026de:	ca06      	ldmia	r2, {r1, r2}
 80026e0:	f7fe f866 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80026e4:	f7fd ff54 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80026e8:	463b      	mov	r3, r7
 80026ea:	2210      	movs	r2, #16
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f004 f8e2 	bl	80068b8 <memset>

	strncpy(str, "Set parametr 6", sizeof(str));
 80026f4:	463b      	mov	r3, r7
 80026f6:	2210      	movs	r2, #16
 80026f8:	4916      	ldr	r1, [pc, #88]	; (8002754 <items_menu_4_set_par_6+0xac>)
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 f8ec 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <items_menu_4_set_par_6+0xb0>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4619      	mov	r1, r3
 8002708:	2000      	movs	r0, #0
 800270a:	f7fe f877 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800270e:	4a10      	ldr	r2, [pc, #64]	; (8002750 <items_menu_4_set_par_6+0xa8>)
 8002710:	4638      	mov	r0, r7
 8002712:	2301      	movs	r3, #1
 8002714:	ca06      	ldmia	r2, {r1, r2}
 8002716:	f7fe f84b 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800271a:	f7fd ff39 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <items_menu_4_set_par_6+0xb4>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002724:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <items_menu_4_set_par_6+0xb8>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <items_menu_4_set_par_6+0xb4>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d1fb      	bne.n	800272a <items_menu_4_set_par_6+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <items_menu_4_set_par_6+0xb8>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <items_menu_4_set_par_6+0xa4>)
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <items_menu_4_set_par_6+0xbc>)
 800273c:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800273e:	f7ff f9bf 	bl	8001ac0 <action>
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000014 	.word	0x20000014
 8002750:	20000000 	.word	0x20000000
 8002754:	08006a88 	.word	0x08006a88
 8002758:	2000001c 	.word	0x2000001c
 800275c:	200004b9 	.word	0x200004b9
 8002760:	200004b8 	.word	0x200004b8
 8002764:	200006a4 	.word	0x200006a4

08002768 <items_menu_4_set_par_7>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_7(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
	clearn_oled();
 800276e:	f7fd fe5f 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002772:	2300      	movs	r3, #0
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <items_menu_4_set_par_7+0xa4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6959      	ldr	r1, [r3, #20]
 8002786:	463b      	mov	r3, r7
 8002788:	220f      	movs	r2, #15
 800278a:	4618      	mov	r0, r3
 800278c:	f004 f8a4 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002790:	2103      	movs	r1, #3
 8002792:	200a      	movs	r0, #10
 8002794:	f7fe f832 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002798:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <items_menu_4_set_par_7+0xa8>)
 800279a:	4638      	mov	r0, r7
 800279c:	2301      	movs	r3, #1
 800279e:	ca06      	ldmia	r2, {r1, r2}
 80027a0:	f7fe f806 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80027a4:	f7fd fef4 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80027a8:	463b      	mov	r3, r7
 80027aa:	2210      	movs	r2, #16
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f004 f882 	bl	80068b8 <memset>

	strncpy(str, "Set parametr 7", sizeof(str));
 80027b4:	463b      	mov	r3, r7
 80027b6:	2210      	movs	r2, #16
 80027b8:	4916      	ldr	r1, [pc, #88]	; (8002814 <items_menu_4_set_par_7+0xac>)
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 f88c 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80027c0:	4b15      	ldr	r3, [pc, #84]	; (8002818 <items_menu_4_set_par_7+0xb0>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	4619      	mov	r1, r3
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe f817 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80027ce:	4a10      	ldr	r2, [pc, #64]	; (8002810 <items_menu_4_set_par_7+0xa8>)
 80027d0:	4638      	mov	r0, r7
 80027d2:	2301      	movs	r3, #1
 80027d4:	ca06      	ldmia	r2, {r1, r2}
 80027d6:	f7fd ffeb 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80027da:	f7fd fed9 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <items_menu_4_set_par_7+0xb4>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80027e4:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <items_menu_4_set_par_7+0xb8>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <items_menu_4_set_par_7+0xb4>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d1fb      	bne.n	80027ea <items_menu_4_set_par_7+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <items_menu_4_set_par_7+0xb8>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <items_menu_4_set_par_7+0xa4>)
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <items_menu_4_set_par_7+0xbc>)
 80027fc:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80027fe:	f7ff f95f 	bl	8001ac0 <action>
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000014 	.word	0x20000014
 8002810:	20000000 	.word	0x20000000
 8002814:	08006a98 	.word	0x08006a98
 8002818:	2000001c 	.word	0x2000001c
 800281c:	200004b9 	.word	0x200004b9
 8002820:	200004b8 	.word	0x200004b8
 8002824:	200006a4 	.word	0x200006a4

08002828 <items_menu_4_set_par_8>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_8(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
	clearn_oled();
 800282e:	f7fd fdff 	bl	8000430 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002832:	2300      	movs	r3, #0
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <items_menu_4_set_par_8+0xa4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6959      	ldr	r1, [r3, #20]
 8002846:	463b      	mov	r3, r7
 8002848:	220f      	movs	r2, #15
 800284a:	4618      	mov	r0, r3
 800284c:	f004 f844 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(10, 3);
 8002850:	2103      	movs	r1, #3
 8002852:	200a      	movs	r0, #10
 8002854:	f7fd ffd2 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <items_menu_4_set_par_8+0xa8>)
 800285a:	4638      	mov	r0, r7
 800285c:	2301      	movs	r3, #1
 800285e:	ca06      	ldmia	r2, {r1, r2}
 8002860:	f7fd ffa6 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002864:	f7fd fe94 	bl	8000590 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002868:	463b      	mov	r3, r7
 800286a:	2210      	movs	r2, #16
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f004 f822 	bl	80068b8 <memset>

	strncpy(str, "Set parametr 8", sizeof(str));
 8002874:	463b      	mov	r3, r7
 8002876:	2210      	movs	r2, #16
 8002878:	4916      	ldr	r1, [pc, #88]	; (80028d4 <items_menu_4_set_par_8+0xac>)
 800287a:	4618      	mov	r0, r3
 800287c:	f004 f82c 	bl	80068d8 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <items_menu_4_set_par_8+0xb0>)
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4619      	mov	r1, r3
 8002888:	2000      	movs	r0, #0
 800288a:	f7fd ffb7 	bl	80007fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800288e:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <items_menu_4_set_par_8+0xa8>)
 8002890:	4638      	mov	r0, r7
 8002892:	2301      	movs	r3, #1
 8002894:	ca06      	ldmia	r2, {r1, r2}
 8002896:	f7fd ff8b 	bl	80007b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800289a:	f7fd fe79 	bl	8000590 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <items_menu_4_set_par_8+0xb4>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <items_menu_4_set_par_8+0xb8>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <items_menu_4_set_par_8+0xb4>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d1fb      	bne.n	80028aa <items_menu_4_set_par_8+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <items_menu_4_set_par_8+0xb8>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <items_menu_4_set_par_8+0xa4>)
 80028ba:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <items_menu_4_set_par_8+0xbc>)
 80028bc:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80028be:	f7ff f8ff 	bl	8001ac0 <action>
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000014 	.word	0x20000014
 80028d0:	20000000 	.word	0x20000000
 80028d4:	08006aa8 	.word	0x08006aa8
 80028d8:	2000001c 	.word	0x2000001c
 80028dc:	200004b9 	.word	0x200004b9
 80028e0:	200004b8 	.word	0x200004b8
 80028e4:	200006a4 	.word	0x200006a4

080028e8 <Menu_Init>:
// ----------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------
void Menu_Init (void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b095      	sub	sp, #84	; 0x54
 80028ec:	af00      	add	r7, sp, #0
	// Make pointers on funsctions
	// Main functions
	void (*p_print_rows_on_oled_if_up) (void);
	p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
 80028ee:	4b98      	ldr	r3, [pc, #608]	; (8002b50 <Menu_Init+0x268>)
 80028f0:	64fb      	str	r3, [r7, #76]	; 0x4c

	void (*p_print_rows_on_oled_if_down) (void);					// Create pointer on function
	p_print_rows_on_oled_if_down = print_rows_on_oled_if_down;		// Save function print on pointer print_p
 80028f2:	4b98      	ldr	r3, [pc, #608]	; (8002b54 <Menu_Init+0x26c>)
 80028f4:	64bb      	str	r3, [r7, #72]	; 0x48

	void (*p_return_from_menu)(void);
	p_return_from_menu = return_from_menu;
 80028f6:	4b98      	ldr	r3, [pc, #608]	; (8002b58 <Menu_Init+0x270>)
 80028f8:	647b      	str	r3, [r7, #68]	; 0x44

	void (*p_action) (void);										// Create pointer on function
	p_action = action;												// Save function action on pointer action_p
 80028fa:	4b98      	ldr	r3, [pc, #608]	; (8002b5c <Menu_Init+0x274>)
 80028fc:	643b      	str	r3, [r7, #64]	; 0x40

	// items_menu_1 menu functions
	void (*p_do_it_function_menu_1) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_1 = do_it_function_menu_1;
 80028fe:	4b98      	ldr	r3, [pc, #608]	; (8002b60 <Menu_Init+0x278>)
 8002900:	63fb      	str	r3, [r7, #60]	; 0x3c

	void (*p_items_menu_1_set_par_1) (void);
	p_items_menu_1_set_par_1 = items_menu_1_set_par_1;
 8002902:	4b98      	ldr	r3, [pc, #608]	; (8002b64 <Menu_Init+0x27c>)
 8002904:	63bb      	str	r3, [r7, #56]	; 0x38

	void (*p_items_menu_1_set_par_2) (void);
	p_items_menu_1_set_par_2 = items_menu_1_set_par_2;
 8002906:	4b98      	ldr	r3, [pc, #608]	; (8002b68 <Menu_Init+0x280>)
 8002908:	637b      	str	r3, [r7, #52]	; 0x34

	void (*p_items_menu_1_set_par_3) (void);
	p_items_menu_1_set_par_3 = items_menu_1_set_par_3;
 800290a:	4b98      	ldr	r3, [pc, #608]	; (8002b6c <Menu_Init+0x284>)
 800290c:	633b      	str	r3, [r7, #48]	; 0x30

	// items_menu_2 menu functions
	void (*p_do_it_function_menu_2) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_2 = do_it_function_menu_2;
 800290e:	4b98      	ldr	r3, [pc, #608]	; (8002b70 <Menu_Init+0x288>)
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c

	void (*p_items_menu_2_set_par_1) (void);
	p_items_menu_2_set_par_1 = items_menu_2_set_par_1;
 8002912:	4b98      	ldr	r3, [pc, #608]	; (8002b74 <Menu_Init+0x28c>)
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28

	// items_menu_3 menu functions
	void (*p_do_it_function_menu_3) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_3 = do_it_function_menu_3;
 8002916:	4b98      	ldr	r3, [pc, #608]	; (8002b78 <Menu_Init+0x290>)
 8002918:	627b      	str	r3, [r7, #36]	; 0x24

	// items_menu_4 menu functions
	void (*p_items_menu_4_set_par_1) (void);
	p_items_menu_4_set_par_1 = items_menu_4_set_par_1;
 800291a:	4b98      	ldr	r3, [pc, #608]	; (8002b7c <Menu_Init+0x294>)
 800291c:	623b      	str	r3, [r7, #32]

	void (*p_items_menu_4_set_par_2) (void);
	p_items_menu_4_set_par_2 = items_menu_4_set_par_2;
 800291e:	4b98      	ldr	r3, [pc, #608]	; (8002b80 <Menu_Init+0x298>)
 8002920:	61fb      	str	r3, [r7, #28]

	void (*p_items_menu_4_set_par_3) (void);
	p_items_menu_4_set_par_3 = items_menu_4_set_par_3;
 8002922:	4b98      	ldr	r3, [pc, #608]	; (8002b84 <Menu_Init+0x29c>)
 8002924:	61bb      	str	r3, [r7, #24]

	void (*p_items_menu_4_set_par_4) (void);
	p_items_menu_4_set_par_4 = items_menu_4_set_par_4;
 8002926:	4b98      	ldr	r3, [pc, #608]	; (8002b88 <Menu_Init+0x2a0>)
 8002928:	617b      	str	r3, [r7, #20]

	void (*p_items_menu_4_set_par_5) (void);
	p_items_menu_4_set_par_5 = items_menu_4_set_par_5;
 800292a:	4b98      	ldr	r3, [pc, #608]	; (8002b8c <Menu_Init+0x2a4>)
 800292c:	613b      	str	r3, [r7, #16]

	void (*p_items_menu_4_set_par_6) (void);
	p_items_menu_4_set_par_6 = items_menu_4_set_par_6;
 800292e:	4b98      	ldr	r3, [pc, #608]	; (8002b90 <Menu_Init+0x2a8>)
 8002930:	60fb      	str	r3, [r7, #12]

	void (*p_items_menu_4_set_par_7) (void);
	p_items_menu_4_set_par_7 = items_menu_4_set_par_7;
 8002932:	4b98      	ldr	r3, [pc, #608]	; (8002b94 <Menu_Init+0x2ac>)
 8002934:	60bb      	str	r3, [r7, #8]

	void (*p_items_menu_4_set_par_8) (void);
	p_items_menu_4_set_par_8 = items_menu_4_set_par_8;
 8002936:	4b98      	ldr	r3, [pc, #608]	; (8002b98 <Menu_Init+0x2b0>)
 8002938:	607b      	str	r3, [r7, #4]

	void (*p_do_it_function_menu_4) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_4 = do_it_function_menu_4;
 800293a:	4b98      	ldr	r3, [pc, #608]	; (8002b9c <Menu_Init+0x2b4>)
 800293c:	603b      	str	r3, [r7, #0]

	// Fill in elements(nodes) of list (7 items)
	// Main menu items
	/////////////////////////////////////////////////////////////////

	items[0].up = 0;
 800293e:	4b98      	ldr	r3, [pc, #608]	; (8002ba0 <Menu_Init+0x2b8>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
	items[0].down = &items[1];
 8002944:	4b96      	ldr	r3, [pc, #600]	; (8002ba0 <Menu_Init+0x2b8>)
 8002946:	4a97      	ldr	r2, [pc, #604]	; (8002ba4 <Menu_Init+0x2bc>)
 8002948:	605a      	str	r2, [r3, #4]
	items[0].child = &items_menu_1[0];
 800294a:	4b95      	ldr	r3, [pc, #596]	; (8002ba0 <Menu_Init+0x2b8>)
 800294c:	4a96      	ldr	r2, [pc, #600]	; (8002ba8 <Menu_Init+0x2c0>)
 800294e:	609a      	str	r2, [r3, #8]
	items[0].parent = 0;
 8002950:	4b93      	ldr	r3, [pc, #588]	; (8002ba0 <Menu_Init+0x2b8>)
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
	items[0].id = 1;
 8002956:	4b92      	ldr	r3, [pc, #584]	; (8002ba0 <Menu_Init+0x2b8>)
 8002958:	2201      	movs	r2, #1
 800295a:	741a      	strb	r2, [r3, #16]
	items[0].name = "Menu_1";
 800295c:	4b90      	ldr	r3, [pc, #576]	; (8002ba0 <Menu_Init+0x2b8>)
 800295e:	4a93      	ldr	r2, [pc, #588]	; (8002bac <Menu_Init+0x2c4>)
 8002960:	615a      	str	r2, [r3, #20]
	items[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8002962:	4a8f      	ldr	r2, [pc, #572]	; (8002ba0 <Menu_Init+0x2b8>)
 8002964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002966:	6193      	str	r3, [r2, #24]
	items[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8002968:	4a8d      	ldr	r2, [pc, #564]	; (8002ba0 <Menu_Init+0x2b8>)
 800296a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296c:	61d3      	str	r3, [r2, #28]
	items[0].makeAction = 0;
 800296e:	4b8c      	ldr	r3, [pc, #560]	; (8002ba0 <Menu_Init+0x2b8>)
 8002970:	2200      	movs	r2, #0
 8002972:	621a      	str	r2, [r3, #32]

	items[1].up = &items[0];
 8002974:	4b8a      	ldr	r3, [pc, #552]	; (8002ba0 <Menu_Init+0x2b8>)
 8002976:	4a8a      	ldr	r2, [pc, #552]	; (8002ba0 <Menu_Init+0x2b8>)
 8002978:	625a      	str	r2, [r3, #36]	; 0x24
	items[1].down = &items[2];
 800297a:	4b89      	ldr	r3, [pc, #548]	; (8002ba0 <Menu_Init+0x2b8>)
 800297c:	4a8c      	ldr	r2, [pc, #560]	; (8002bb0 <Menu_Init+0x2c8>)
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
	items[1].child = &items_menu_2[0];
 8002980:	4b87      	ldr	r3, [pc, #540]	; (8002ba0 <Menu_Init+0x2b8>)
 8002982:	4a8c      	ldr	r2, [pc, #560]	; (8002bb4 <Menu_Init+0x2cc>)
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c
	items[1].parent = 0;
 8002986:	4b86      	ldr	r3, [pc, #536]	; (8002ba0 <Menu_Init+0x2b8>)
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
	items[1].id = 2;
 800298c:	4b84      	ldr	r3, [pc, #528]	; (8002ba0 <Menu_Init+0x2b8>)
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items[1].name = "Menu_2";
 8002994:	4b82      	ldr	r3, [pc, #520]	; (8002ba0 <Menu_Init+0x2b8>)
 8002996:	4a88      	ldr	r2, [pc, #544]	; (8002bb8 <Menu_Init+0x2d0>)
 8002998:	639a      	str	r2, [r3, #56]	; 0x38
	items[1].updateScreen_up = p_print_rows_on_oled_if_up;
 800299a:	4a81      	ldr	r2, [pc, #516]	; (8002ba0 <Menu_Init+0x2b8>)
 800299c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299e:	63d3      	str	r3, [r2, #60]	; 0x3c
	items[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80029a0:	4a7f      	ldr	r2, [pc, #508]	; (8002ba0 <Menu_Init+0x2b8>)
 80029a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a4:	6413      	str	r3, [r2, #64]	; 0x40
	items[1].makeAction = 0;
 80029a6:	4b7e      	ldr	r3, [pc, #504]	; (8002ba0 <Menu_Init+0x2b8>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44

	items[2].up = &items[1];
 80029ac:	4b7c      	ldr	r3, [pc, #496]	; (8002ba0 <Menu_Init+0x2b8>)
 80029ae:	4a7d      	ldr	r2, [pc, #500]	; (8002ba4 <Menu_Init+0x2bc>)
 80029b0:	649a      	str	r2, [r3, #72]	; 0x48
	items[2].down = &items[3];
 80029b2:	4b7b      	ldr	r3, [pc, #492]	; (8002ba0 <Menu_Init+0x2b8>)
 80029b4:	4a81      	ldr	r2, [pc, #516]	; (8002bbc <Menu_Init+0x2d4>)
 80029b6:	64da      	str	r2, [r3, #76]	; 0x4c
	items[2].child = &items_menu_3[0];
 80029b8:	4b79      	ldr	r3, [pc, #484]	; (8002ba0 <Menu_Init+0x2b8>)
 80029ba:	4a81      	ldr	r2, [pc, #516]	; (8002bc0 <Menu_Init+0x2d8>)
 80029bc:	651a      	str	r2, [r3, #80]	; 0x50
	items[2].parent = 0;
 80029be:	4b78      	ldr	r3, [pc, #480]	; (8002ba0 <Menu_Init+0x2b8>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
	items[2].id = 3;
 80029c4:	4b76      	ldr	r3, [pc, #472]	; (8002ba0 <Menu_Init+0x2b8>)
 80029c6:	2203      	movs	r2, #3
 80029c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items[2].name = "Menu_3";
 80029cc:	4b74      	ldr	r3, [pc, #464]	; (8002ba0 <Menu_Init+0x2b8>)
 80029ce:	4a7d      	ldr	r2, [pc, #500]	; (8002bc4 <Menu_Init+0x2dc>)
 80029d0:	65da      	str	r2, [r3, #92]	; 0x5c
	items[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80029d2:	4a73      	ldr	r2, [pc, #460]	; (8002ba0 <Menu_Init+0x2b8>)
 80029d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d6:	6613      	str	r3, [r2, #96]	; 0x60
	items[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80029d8:	4a71      	ldr	r2, [pc, #452]	; (8002ba0 <Menu_Init+0x2b8>)
 80029da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029dc:	6653      	str	r3, [r2, #100]	; 0x64
	items[2].makeAction = 0;
 80029de:	4b70      	ldr	r3, [pc, #448]	; (8002ba0 <Menu_Init+0x2b8>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	669a      	str	r2, [r3, #104]	; 0x68

	items[3].up = &items[2];
 80029e4:	4b6e      	ldr	r3, [pc, #440]	; (8002ba0 <Menu_Init+0x2b8>)
 80029e6:	4a72      	ldr	r2, [pc, #456]	; (8002bb0 <Menu_Init+0x2c8>)
 80029e8:	66da      	str	r2, [r3, #108]	; 0x6c
	items[3].down = &items[4];
 80029ea:	4b6d      	ldr	r3, [pc, #436]	; (8002ba0 <Menu_Init+0x2b8>)
 80029ec:	4a76      	ldr	r2, [pc, #472]	; (8002bc8 <Menu_Init+0x2e0>)
 80029ee:	671a      	str	r2, [r3, #112]	; 0x70
	items[3].child = &items_menu_4[0];
 80029f0:	4b6b      	ldr	r3, [pc, #428]	; (8002ba0 <Menu_Init+0x2b8>)
 80029f2:	4a76      	ldr	r2, [pc, #472]	; (8002bcc <Menu_Init+0x2e4>)
 80029f4:	675a      	str	r2, [r3, #116]	; 0x74
	items[3].parent = 0;
 80029f6:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <Menu_Init+0x2b8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	679a      	str	r2, [r3, #120]	; 0x78
	items[3].id = 4;
 80029fc:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <Menu_Init+0x2b8>)
 80029fe:	2204      	movs	r2, #4
 8002a00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items[3].name = "Menu_4";
 8002a04:	4b66      	ldr	r3, [pc, #408]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a06:	4a72      	ldr	r2, [pc, #456]	; (8002bd0 <Menu_Init+0x2e8>)
 8002a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8002a0c:	4a64      	ldr	r2, [pc, #400]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8002a14:	4a62      	ldr	r2, [pc, #392]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items[3].makeAction = 0;
 8002a1c:	4b60      	ldr	r3, [pc, #384]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	items[4].up = &items[3];
 8002a24:	4b5e      	ldr	r3, [pc, #376]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a26:	4a65      	ldr	r2, [pc, #404]	; (8002bbc <Menu_Init+0x2d4>)
 8002a28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	items[4].down = &items[5];
 8002a2c:	4b5c      	ldr	r3, [pc, #368]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a2e:	4a69      	ldr	r2, [pc, #420]	; (8002bd4 <Menu_Init+0x2ec>)
 8002a30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	items[4].child = 0;
 8002a34:	4b5a      	ldr	r3, [pc, #360]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	items[4].parent = 0;
 8002a3c:	4b58      	ldr	r3, [pc, #352]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	items[4].id = 5;
 8002a44:	4b56      	ldr	r3, [pc, #344]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a46:	2205      	movs	r2, #5
 8002a48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	items[4].name = "Menu_5";
 8002a4c:	4b54      	ldr	r3, [pc, #336]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a4e:	4a62      	ldr	r2, [pc, #392]	; (8002bd8 <Menu_Init+0x2f0>)
 8002a50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	items[4].updateScreen_up = p_print_rows_on_oled_if_up;
 8002a54:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a58:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	items[4].updateScreen_down = p_print_rows_on_oled_if_down;
 8002a5c:	4a50      	ldr	r2, [pc, #320]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a60:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	items[4].makeAction = 0;
 8002a64:	4b4e      	ldr	r3, [pc, #312]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	items[5].up = &items[4];
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a6e:	4a56      	ldr	r2, [pc, #344]	; (8002bc8 <Menu_Init+0x2e0>)
 8002a70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	items[5].down = &items[6];
 8002a74:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a76:	4a59      	ldr	r2, [pc, #356]	; (8002bdc <Menu_Init+0x2f4>)
 8002a78:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	items[5].child = 0;
 8002a7c:	4b48      	ldr	r3, [pc, #288]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	items[5].parent = 0;
 8002a84:	4b46      	ldr	r3, [pc, #280]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	items[5].id = 6;
 8002a8c:	4b44      	ldr	r3, [pc, #272]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a8e:	2206      	movs	r2, #6
 8002a90:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	items[5].name = "Menu_6";
 8002a94:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a96:	4a52      	ldr	r2, [pc, #328]	; (8002be0 <Menu_Init+0x2f8>)
 8002a98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	items[5].updateScreen_up = p_print_rows_on_oled_if_up;
 8002a9c:	4a40      	ldr	r2, [pc, #256]	; (8002ba0 <Menu_Init+0x2b8>)
 8002a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa0:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
	items[5].updateScreen_down = p_print_rows_on_oled_if_down;
 8002aa4:	4a3e      	ldr	r2, [pc, #248]	; (8002ba0 <Menu_Init+0x2b8>)
 8002aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa8:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	items[5].makeAction  = 0;
 8002aac:	4b3c      	ldr	r3, [pc, #240]	; (8002ba0 <Menu_Init+0x2b8>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	items[6].up = &items[5];
 8002ab4:	4b3a      	ldr	r3, [pc, #232]	; (8002ba0 <Menu_Init+0x2b8>)
 8002ab6:	4a47      	ldr	r2, [pc, #284]	; (8002bd4 <Menu_Init+0x2ec>)
 8002ab8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	items[6].down = 0;
 8002abc:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <Menu_Init+0x2b8>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	items[6].child = 0;
 8002ac4:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <Menu_Init+0x2b8>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	items[6].parent = 0;
 8002acc:	4b34      	ldr	r3, [pc, #208]	; (8002ba0 <Menu_Init+0x2b8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	items[6].id = 7;
 8002ad4:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <Menu_Init+0x2b8>)
 8002ad6:	2207      	movs	r2, #7
 8002ad8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	items[6].name = "Menu_7";
 8002adc:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <Menu_Init+0x2b8>)
 8002ade:	4a41      	ldr	r2, [pc, #260]	; (8002be4 <Menu_Init+0x2fc>)
 8002ae0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	items[6].updateScreen_up = p_print_rows_on_oled_if_up;
 8002ae4:	4a2e      	ldr	r2, [pc, #184]	; (8002ba0 <Menu_Init+0x2b8>)
 8002ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	items[6].updateScreen_down = p_print_rows_on_oled_if_down;
 8002aec:	4a2c      	ldr	r2, [pc, #176]	; (8002ba0 <Menu_Init+0x2b8>)
 8002aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
	items[6].makeAction  = 0;
 8002af4:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <Menu_Init+0x2b8>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_1[0].up = 0;
 8002afc:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <Menu_Init+0x2c0>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
	items_menu_1[0].down = &items_menu_1[1];
 8002b02:	4b29      	ldr	r3, [pc, #164]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b04:	4a38      	ldr	r2, [pc, #224]	; (8002be8 <Menu_Init+0x300>)
 8002b06:	605a      	str	r2, [r3, #4]
	items_menu_1[0].id = 1;
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	741a      	strb	r2, [r3, #16]
	items_menu_1[0].child = 0;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
	items_menu_1[0].parent = &items[0];
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b16:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <Menu_Init+0x2b8>)
 8002b18:	60da      	str	r2, [r3, #12]
	items_menu_1[0].name = "set par 1";
 8002b1a:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b1c:	4a33      	ldr	r2, [pc, #204]	; (8002bec <Menu_Init+0x304>)
 8002b1e:	615a      	str	r2, [r3, #20]
	items_menu_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8002b20:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b24:	6193      	str	r3, [r2, #24]
	items_menu_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8002b26:	4a20      	ldr	r2, [pc, #128]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2a:	61d3      	str	r3, [r2, #28]
	items_menu_1[0].makeAction = p_items_menu_1_set_par_1;
 8002b2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b30:	6213      	str	r3, [r2, #32]

	items_menu_1[1].up = &items_menu_1[0];
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b34:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1[1].down = &items_menu_1[2];
 8002b38:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b3a:	4a2d      	ldr	r2, [pc, #180]	; (8002bf0 <Menu_Init+0x308>)
 8002b3c:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1[1].child = 0;
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1[1].parent = &items[0];
 8002b44:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b46:	4a16      	ldr	r2, [pc, #88]	; (8002ba0 <Menu_Init+0x2b8>)
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1[1].id = 2;
 8002b4a:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <Menu_Init+0x2c0>)
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	e051      	b.n	8002bf4 <Menu_Init+0x30c>
 8002b50:	080017a5 	.word	0x080017a5
 8002b54:	0800189d 	.word	0x0800189d
 8002b58:	08001bfd 	.word	0x08001bfd
 8002b5c:	08001ac1 	.word	0x08001ac1
 8002b60:	08001c51 	.word	0x08001c51
 8002b64:	08001d35 	.word	0x08001d35
 8002b68:	08001df5 	.word	0x08001df5
 8002b6c:	08001eb5 	.word	0x08001eb5
 8002b70:	08001f75 	.word	0x08001f75
 8002b74:	08002059 	.word	0x08002059
 8002b78:	08002119 	.word	0x08002119
 8002b7c:	080022e9 	.word	0x080022e9
 8002b80:	080023a9 	.word	0x080023a9
 8002b84:	08002469 	.word	0x08002469
 8002b88:	08002529 	.word	0x08002529
 8002b8c:	080025e9 	.word	0x080025e9
 8002b90:	080026a9 	.word	0x080026a9
 8002b94:	08002769 	.word	0x08002769
 8002b98:	08002829 	.word	0x08002829
 8002b9c:	08002201 	.word	0x08002201
 8002ba0:	20000908 	.word	0x20000908
 8002ba4:	2000092c 	.word	0x2000092c
 8002ba8:	2000080c 	.word	0x2000080c
 8002bac:	08006ab8 	.word	0x08006ab8
 8002bb0:	20000950 	.word	0x20000950
 8002bb4:	20000638 	.word	0x20000638
 8002bb8:	08006ac0 	.word	0x08006ac0
 8002bbc:	20000974 	.word	0x20000974
 8002bc0:	200008c0 	.word	0x200008c0
 8002bc4:	08006ac8 	.word	0x08006ac8
 8002bc8:	20000998 	.word	0x20000998
 8002bcc:	200006a4 	.word	0x200006a4
 8002bd0:	08006ad0 	.word	0x08006ad0
 8002bd4:	200009bc 	.word	0x200009bc
 8002bd8:	08006ad8 	.word	0x08006ad8
 8002bdc:	200009e0 	.word	0x200009e0
 8002be0:	08006ae0 	.word	0x08006ae0
 8002be4:	08006ae8 	.word	0x08006ae8
 8002be8:	20000830 	.word	0x20000830
 8002bec:	08006af0 	.word	0x08006af0
 8002bf0:	20000854 	.word	0x20000854
 8002bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1[1].name = "set par 2";
 8002bf8:	4b8e      	ldr	r3, [pc, #568]	; (8002e34 <Menu_Init+0x54c>)
 8002bfa:	4a8f      	ldr	r2, [pc, #572]	; (8002e38 <Menu_Init+0x550>)
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8002bfe:	4a8d      	ldr	r2, [pc, #564]	; (8002e34 <Menu_Init+0x54c>)
 8002c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c02:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8002c04:	4a8b      	ldr	r2, [pc, #556]	; (8002e34 <Menu_Init+0x54c>)
 8002c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1[1].makeAction = p_items_menu_1_set_par_2;
 8002c0a:	4a8a      	ldr	r2, [pc, #552]	; (8002e34 <Menu_Init+0x54c>)
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0e:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_1[2].up = &items_menu_1[1];
 8002c10:	4b88      	ldr	r3, [pc, #544]	; (8002e34 <Menu_Init+0x54c>)
 8002c12:	4a8a      	ldr	r2, [pc, #552]	; (8002e3c <Menu_Init+0x554>)
 8002c14:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1[2].down = &items_menu_1[3];
 8002c16:	4b87      	ldr	r3, [pc, #540]	; (8002e34 <Menu_Init+0x54c>)
 8002c18:	4a89      	ldr	r2, [pc, #548]	; (8002e40 <Menu_Init+0x558>)
 8002c1a:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1[2].child = 0;
 8002c1c:	4b85      	ldr	r3, [pc, #532]	; (8002e34 <Menu_Init+0x54c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1[2].parent = &items[0];
 8002c22:	4b84      	ldr	r3, [pc, #528]	; (8002e34 <Menu_Init+0x54c>)
 8002c24:	4a87      	ldr	r2, [pc, #540]	; (8002e44 <Menu_Init+0x55c>)
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1[2].id = 3;
 8002c28:	4b82      	ldr	r3, [pc, #520]	; (8002e34 <Menu_Init+0x54c>)
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1[2].name = "set par 3";
 8002c30:	4b80      	ldr	r3, [pc, #512]	; (8002e34 <Menu_Init+0x54c>)
 8002c32:	4a85      	ldr	r2, [pc, #532]	; (8002e48 <Menu_Init+0x560>)
 8002c34:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8002c36:	4a7f      	ldr	r2, [pc, #508]	; (8002e34 <Menu_Init+0x54c>)
 8002c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3a:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8002c3c:	4a7d      	ldr	r2, [pc, #500]	; (8002e34 <Menu_Init+0x54c>)
 8002c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c40:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1[2].makeAction = p_items_menu_1_set_par_3;
 8002c42:	4a7c      	ldr	r2, [pc, #496]	; (8002e34 <Menu_Init+0x54c>)
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	6693      	str	r3, [r2, #104]	; 0x68

	items_menu_1[3].up = &items_menu_1[2];
 8002c48:	4b7a      	ldr	r3, [pc, #488]	; (8002e34 <Menu_Init+0x54c>)
 8002c4a:	4a80      	ldr	r2, [pc, #512]	; (8002e4c <Menu_Init+0x564>)
 8002c4c:	66da      	str	r2, [r3, #108]	; 0x6c
	items_menu_1[3].down = &items_menu_1[4];
 8002c4e:	4b79      	ldr	r3, [pc, #484]	; (8002e34 <Menu_Init+0x54c>)
 8002c50:	4a7f      	ldr	r2, [pc, #508]	; (8002e50 <Menu_Init+0x568>)
 8002c52:	671a      	str	r2, [r3, #112]	; 0x70
	items_menu_1[3].child = 0;
 8002c54:	4b77      	ldr	r3, [pc, #476]	; (8002e34 <Menu_Init+0x54c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	675a      	str	r2, [r3, #116]	; 0x74
	items_menu_1[3].parent = &items[0];
 8002c5a:	4b76      	ldr	r3, [pc, #472]	; (8002e34 <Menu_Init+0x54c>)
 8002c5c:	4a79      	ldr	r2, [pc, #484]	; (8002e44 <Menu_Init+0x55c>)
 8002c5e:	679a      	str	r2, [r3, #120]	; 0x78
	items_menu_1[3].id = 4;
 8002c60:	4b74      	ldr	r3, [pc, #464]	; (8002e34 <Menu_Init+0x54c>)
 8002c62:	2204      	movs	r2, #4
 8002c64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items_menu_1[3].name = "DO IT";						// Name of item
 8002c68:	4b72      	ldr	r3, [pc, #456]	; (8002e34 <Menu_Init+0x54c>)
 8002c6a:	4a7a      	ldr	r2, [pc, #488]	; (8002e54 <Menu_Init+0x56c>)
 8002c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items_menu_1[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8002c70:	4a70      	ldr	r2, [pc, #448]	; (8002e34 <Menu_Init+0x54c>)
 8002c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items_menu_1[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8002c78:	4a6e      	ldr	r2, [pc, #440]	; (8002e34 <Menu_Init+0x54c>)
 8002c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items_menu_1[3].makeAction = p_do_it_function_menu_1;
 8002c80:	4a6c      	ldr	r2, [pc, #432]	; (8002e34 <Menu_Init+0x54c>)
 8002c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c84:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

	items_menu_1[4].up = &items_menu_1[3];
 8002c88:	4b6a      	ldr	r3, [pc, #424]	; (8002e34 <Menu_Init+0x54c>)
 8002c8a:	4a6d      	ldr	r2, [pc, #436]	; (8002e40 <Menu_Init+0x558>)
 8002c8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	items_menu_1[4].down = 0;
 8002c90:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <Menu_Init+0x54c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	items_menu_1[4].child = 0;
 8002c98:	4b66      	ldr	r3, [pc, #408]	; (8002e34 <Menu_Init+0x54c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	items_menu_1[4].parent = &items[0];
 8002ca0:	4b64      	ldr	r3, [pc, #400]	; (8002e34 <Menu_Init+0x54c>)
 8002ca2:	4a68      	ldr	r2, [pc, #416]	; (8002e44 <Menu_Init+0x55c>)
 8002ca4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	items_menu_1[4].id = 5;
 8002ca8:	4b62      	ldr	r3, [pc, #392]	; (8002e34 <Menu_Init+0x54c>)
 8002caa:	2205      	movs	r2, #5
 8002cac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	items_menu_1[4].name = "EXIT";						// Name of item
 8002cb0:	4b60      	ldr	r3, [pc, #384]	; (8002e34 <Menu_Init+0x54c>)
 8002cb2:	4a69      	ldr	r2, [pc, #420]	; (8002e58 <Menu_Init+0x570>)
 8002cb4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	items_menu_1[4].updateScreen_up = p_print_rows_on_oled_if_up;
 8002cb8:	4a5e      	ldr	r2, [pc, #376]	; (8002e34 <Menu_Init+0x54c>)
 8002cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cbc:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	items_menu_1[4].updateScreen_down = p_print_rows_on_oled_if_down;
 8002cc0:	4a5c      	ldr	r2, [pc, #368]	; (8002e34 <Menu_Init+0x54c>)
 8002cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	items_menu_1[4].makeAction = p_return_from_menu;
 8002cc8:	4a5a      	ldr	r2, [pc, #360]	; (8002e34 <Menu_Init+0x54c>)
 8002cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ccc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_2[0].up = 0;
 8002cd0:	4b62      	ldr	r3, [pc, #392]	; (8002e5c <Menu_Init+0x574>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
	items_menu_2[0].down = &items_menu_2[1];
 8002cd6:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <Menu_Init+0x574>)
 8002cd8:	4a61      	ldr	r2, [pc, #388]	; (8002e60 <Menu_Init+0x578>)
 8002cda:	605a      	str	r2, [r3, #4]
	items_menu_2[0].child = 0;
 8002cdc:	4b5f      	ldr	r3, [pc, #380]	; (8002e5c <Menu_Init+0x574>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
	items_menu_2[0].parent = &items[1];
 8002ce2:	4b5e      	ldr	r3, [pc, #376]	; (8002e5c <Menu_Init+0x574>)
 8002ce4:	4a5f      	ldr	r2, [pc, #380]	; (8002e64 <Menu_Init+0x57c>)
 8002ce6:	60da      	str	r2, [r3, #12]
	items_menu_2[0].id = 1;
 8002ce8:	4b5c      	ldr	r3, [pc, #368]	; (8002e5c <Menu_Init+0x574>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	741a      	strb	r2, [r3, #16]
	items_menu_2[0].name = "set par 1";						// Name of item
 8002cee:	4b5b      	ldr	r3, [pc, #364]	; (8002e5c <Menu_Init+0x574>)
 8002cf0:	4a5d      	ldr	r2, [pc, #372]	; (8002e68 <Menu_Init+0x580>)
 8002cf2:	615a      	str	r2, [r3, #20]
	items_menu_2[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8002cf4:	4a59      	ldr	r2, [pc, #356]	; (8002e5c <Menu_Init+0x574>)
 8002cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf8:	6193      	str	r3, [r2, #24]
	items_menu_2[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8002cfa:	4a58      	ldr	r2, [pc, #352]	; (8002e5c <Menu_Init+0x574>)
 8002cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cfe:	61d3      	str	r3, [r2, #28]
	items_menu_2[0].makeAction = p_items_menu_2_set_par_1;
 8002d00:	4a56      	ldr	r2, [pc, #344]	; (8002e5c <Menu_Init+0x574>)
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	6213      	str	r3, [r2, #32]

	items_menu_2[1].up = &items_menu_2[0];
 8002d06:	4b55      	ldr	r3, [pc, #340]	; (8002e5c <Menu_Init+0x574>)
 8002d08:	4a54      	ldr	r2, [pc, #336]	; (8002e5c <Menu_Init+0x574>)
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2[1].down = &items_menu_2[2];
 8002d0c:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <Menu_Init+0x574>)
 8002d0e:	4a57      	ldr	r2, [pc, #348]	; (8002e6c <Menu_Init+0x584>)
 8002d10:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2[1].child = 0;
 8002d12:	4b52      	ldr	r3, [pc, #328]	; (8002e5c <Menu_Init+0x574>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2[1].parent = &items[1];
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <Menu_Init+0x574>)
 8002d1a:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <Menu_Init+0x57c>)
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2[1].id = 2;
 8002d1e:	4b4f      	ldr	r3, [pc, #316]	; (8002e5c <Menu_Init+0x574>)
 8002d20:	2202      	movs	r2, #2
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2[1].name = "DO IT";						// Name of item
 8002d26:	4b4d      	ldr	r3, [pc, #308]	; (8002e5c <Menu_Init+0x574>)
 8002d28:	4a4a      	ldr	r2, [pc, #296]	; (8002e54 <Menu_Init+0x56c>)
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8002d2c:	4a4b      	ldr	r2, [pc, #300]	; (8002e5c <Menu_Init+0x574>)
 8002d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d30:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8002d32:	4a4a      	ldr	r2, [pc, #296]	; (8002e5c <Menu_Init+0x574>)
 8002d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d36:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2[1].makeAction = p_do_it_function_menu_2;
 8002d38:	4a48      	ldr	r2, [pc, #288]	; (8002e5c <Menu_Init+0x574>)
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_2[2].up = &items_menu_2[1];
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <Menu_Init+0x574>)
 8002d40:	4a47      	ldr	r2, [pc, #284]	; (8002e60 <Menu_Init+0x578>)
 8002d42:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2[2].down = 0;
 8002d44:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <Menu_Init+0x574>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2[2].child = 0;
 8002d4a:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <Menu_Init+0x574>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2[2].parent = &items[1];
 8002d50:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <Menu_Init+0x574>)
 8002d52:	4a44      	ldr	r2, [pc, #272]	; (8002e64 <Menu_Init+0x57c>)
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2[2].id = 3;
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <Menu_Init+0x574>)
 8002d58:	2203      	movs	r2, #3
 8002d5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2[2].name = "EXIT";						// Name of item
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <Menu_Init+0x574>)
 8002d60:	4a3d      	ldr	r2, [pc, #244]	; (8002e58 <Menu_Init+0x570>)
 8002d62:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8002d64:	4a3d      	ldr	r2, [pc, #244]	; (8002e5c <Menu_Init+0x574>)
 8002d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d68:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8002d6a:	4a3c      	ldr	r2, [pc, #240]	; (8002e5c <Menu_Init+0x574>)
 8002d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6e:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2[2].makeAction = p_return_from_menu;
 8002d70:	4a3a      	ldr	r2, [pc, #232]	; (8002e5c <Menu_Init+0x574>)
 8002d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d74:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_3[0].up = 0;
 8002d76:	4b3e      	ldr	r3, [pc, #248]	; (8002e70 <Menu_Init+0x588>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
	items_menu_3[0].down = &items_menu_3[1];
 8002d7c:	4b3c      	ldr	r3, [pc, #240]	; (8002e70 <Menu_Init+0x588>)
 8002d7e:	4a3d      	ldr	r2, [pc, #244]	; (8002e74 <Menu_Init+0x58c>)
 8002d80:	605a      	str	r2, [r3, #4]
	items_menu_3[0].child = 0;
 8002d82:	4b3b      	ldr	r3, [pc, #236]	; (8002e70 <Menu_Init+0x588>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
	items_menu_3[0].parent = &items[2];
 8002d88:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <Menu_Init+0x588>)
 8002d8a:	4a3b      	ldr	r2, [pc, #236]	; (8002e78 <Menu_Init+0x590>)
 8002d8c:	60da      	str	r2, [r3, #12]
	items_menu_3[0].id = 1;
 8002d8e:	4b38      	ldr	r3, [pc, #224]	; (8002e70 <Menu_Init+0x588>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	741a      	strb	r2, [r3, #16]
	items_menu_3[0].name = "DO IT";						// Name of item
 8002d94:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <Menu_Init+0x588>)
 8002d96:	4a2f      	ldr	r2, [pc, #188]	; (8002e54 <Menu_Init+0x56c>)
 8002d98:	615a      	str	r2, [r3, #20]
	items_menu_3[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8002d9a:	4a35      	ldr	r2, [pc, #212]	; (8002e70 <Menu_Init+0x588>)
 8002d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9e:	6193      	str	r3, [r2, #24]
	items_menu_3[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8002da0:	4a33      	ldr	r2, [pc, #204]	; (8002e70 <Menu_Init+0x588>)
 8002da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da4:	61d3      	str	r3, [r2, #28]
	items_menu_3[0].makeAction = p_do_it_function_menu_3;
 8002da6:	4a32      	ldr	r2, [pc, #200]	; (8002e70 <Menu_Init+0x588>)
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	6213      	str	r3, [r2, #32]

	items_menu_3[1].up = &items_menu_3[0];
 8002dac:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <Menu_Init+0x588>)
 8002dae:	4a30      	ldr	r2, [pc, #192]	; (8002e70 <Menu_Init+0x588>)
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_3[1].down = 0;
 8002db2:	4b2f      	ldr	r3, [pc, #188]	; (8002e70 <Menu_Init+0x588>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_3[1].child = 0;
 8002db8:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <Menu_Init+0x588>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_3[1].parent = &items[2];
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <Menu_Init+0x588>)
 8002dc0:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <Menu_Init+0x590>)
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_3[1].id = 2;
 8002dc4:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <Menu_Init+0x588>)
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_3[1].name = "EXIT";						// Name of item
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <Menu_Init+0x588>)
 8002dce:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <Menu_Init+0x570>)
 8002dd0:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_3[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8002dd2:	4a27      	ldr	r2, [pc, #156]	; (8002e70 <Menu_Init+0x588>)
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd6:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_3[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8002dd8:	4a25      	ldr	r2, [pc, #148]	; (8002e70 <Menu_Init+0x588>)
 8002dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_3[1].makeAction = p_return_from_menu;
 8002dde:	4a24      	ldr	r2, [pc, #144]	; (8002e70 <Menu_Init+0x588>)
 8002de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de2:	6453      	str	r3, [r2, #68]	; 0x44

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_4[0].up = 0;
 8002de4:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <Menu_Init+0x594>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
	items_menu_4[0].down = &items_menu_4[1];
 8002dea:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <Menu_Init+0x594>)
 8002dec:	4a24      	ldr	r2, [pc, #144]	; (8002e80 <Menu_Init+0x598>)
 8002dee:	605a      	str	r2, [r3, #4]
	items_menu_4[0].child = 0;
 8002df0:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <Menu_Init+0x594>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
	items_menu_4[0].parent = &items[3];
 8002df6:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <Menu_Init+0x594>)
 8002df8:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <Menu_Init+0x59c>)
 8002dfa:	60da      	str	r2, [r3, #12]
	items_menu_4[0].id = 1;
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <Menu_Init+0x594>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	741a      	strb	r2, [r3, #16]
	items_menu_4[0].name = "set par 1";						// Name of item
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <Menu_Init+0x594>)
 8002e04:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <Menu_Init+0x580>)
 8002e06:	615a      	str	r2, [r3, #20]
	items_menu_4[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8002e08:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <Menu_Init+0x594>)
 8002e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0c:	6193      	str	r3, [r2, #24]
	items_menu_4[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8002e0e:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <Menu_Init+0x594>)
 8002e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e12:	61d3      	str	r3, [r2, #28]
	items_menu_4[0].makeAction = p_items_menu_4_set_par_1;
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <Menu_Init+0x594>)
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	6213      	str	r3, [r2, #32]

	items_menu_4[1].up = &items_menu_4[0];
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <Menu_Init+0x594>)
 8002e1c:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <Menu_Init+0x594>)
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_4[1].down = &items_menu_4[2];
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <Menu_Init+0x594>)
 8002e22:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <Menu_Init+0x5a0>)
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_4[1].child = 0;
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <Menu_Init+0x594>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_4[1].parent = &items[3];
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <Menu_Init+0x594>)
 8002e2e:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <Menu_Init+0x59c>)
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
 8002e32:	e02b      	b.n	8002e8c <Menu_Init+0x5a4>
 8002e34:	2000080c 	.word	0x2000080c
 8002e38:	08006afc 	.word	0x08006afc
 8002e3c:	20000830 	.word	0x20000830
 8002e40:	20000878 	.word	0x20000878
 8002e44:	20000908 	.word	0x20000908
 8002e48:	08006b08 	.word	0x08006b08
 8002e4c:	20000854 	.word	0x20000854
 8002e50:	2000089c 	.word	0x2000089c
 8002e54:	08006b14 	.word	0x08006b14
 8002e58:	08006b1c 	.word	0x08006b1c
 8002e5c:	20000638 	.word	0x20000638
 8002e60:	2000065c 	.word	0x2000065c
 8002e64:	2000092c 	.word	0x2000092c
 8002e68:	08006af0 	.word	0x08006af0
 8002e6c:	20000680 	.word	0x20000680
 8002e70:	200008c0 	.word	0x200008c0
 8002e74:	200008e4 	.word	0x200008e4
 8002e78:	20000950 	.word	0x20000950
 8002e7c:	200006a4 	.word	0x200006a4
 8002e80:	200006c8 	.word	0x200006c8
 8002e84:	20000974 	.word	0x20000974
 8002e88:	200006ec 	.word	0x200006ec
	items_menu_4[1].id = 2;
 8002e8c:	4b94      	ldr	r3, [pc, #592]	; (80030e0 <Menu_Init+0x7f8>)
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_4[1].name = "set par 2";						// Name of item
 8002e94:	4b92      	ldr	r3, [pc, #584]	; (80030e0 <Menu_Init+0x7f8>)
 8002e96:	4a93      	ldr	r2, [pc, #588]	; (80030e4 <Menu_Init+0x7fc>)
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_4[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8002e9a:	4a91      	ldr	r2, [pc, #580]	; (80030e0 <Menu_Init+0x7f8>)
 8002e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9e:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_4[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8002ea0:	4a8f      	ldr	r2, [pc, #572]	; (80030e0 <Menu_Init+0x7f8>)
 8002ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_4[1].makeAction = p_items_menu_4_set_par_2;
 8002ea6:	4a8e      	ldr	r2, [pc, #568]	; (80030e0 <Menu_Init+0x7f8>)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_4[2].up = &items_menu_4[1];
 8002eac:	4b8c      	ldr	r3, [pc, #560]	; (80030e0 <Menu_Init+0x7f8>)
 8002eae:	4a8e      	ldr	r2, [pc, #568]	; (80030e8 <Menu_Init+0x800>)
 8002eb0:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_4[2].down = &items_menu_4[3];
 8002eb2:	4b8b      	ldr	r3, [pc, #556]	; (80030e0 <Menu_Init+0x7f8>)
 8002eb4:	4a8d      	ldr	r2, [pc, #564]	; (80030ec <Menu_Init+0x804>)
 8002eb6:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_4[2].child = 0;
 8002eb8:	4b89      	ldr	r3, [pc, #548]	; (80030e0 <Menu_Init+0x7f8>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_4[2].parent = &items[3];
 8002ebe:	4b88      	ldr	r3, [pc, #544]	; (80030e0 <Menu_Init+0x7f8>)
 8002ec0:	4a8b      	ldr	r2, [pc, #556]	; (80030f0 <Menu_Init+0x808>)
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_4[2].id = 3;
 8002ec4:	4b86      	ldr	r3, [pc, #536]	; (80030e0 <Menu_Init+0x7f8>)
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_4[2].name = "set par 3";						// Name of item
 8002ecc:	4b84      	ldr	r3, [pc, #528]	; (80030e0 <Menu_Init+0x7f8>)
 8002ece:	4a89      	ldr	r2, [pc, #548]	; (80030f4 <Menu_Init+0x80c>)
 8002ed0:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_4[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8002ed2:	4a83      	ldr	r2, [pc, #524]	; (80030e0 <Menu_Init+0x7f8>)
 8002ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed6:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_4[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8002ed8:	4a81      	ldr	r2, [pc, #516]	; (80030e0 <Menu_Init+0x7f8>)
 8002eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002edc:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_4[2].makeAction = p_items_menu_4_set_par_3;
 8002ede:	4a80      	ldr	r2, [pc, #512]	; (80030e0 <Menu_Init+0x7f8>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6693      	str	r3, [r2, #104]	; 0x68

	items_menu_4[3].up = &items_menu_4[2];
 8002ee4:	4b7e      	ldr	r3, [pc, #504]	; (80030e0 <Menu_Init+0x7f8>)
 8002ee6:	4a84      	ldr	r2, [pc, #528]	; (80030f8 <Menu_Init+0x810>)
 8002ee8:	66da      	str	r2, [r3, #108]	; 0x6c
	items_menu_4[3].down = &items_menu_4[4];
 8002eea:	4b7d      	ldr	r3, [pc, #500]	; (80030e0 <Menu_Init+0x7f8>)
 8002eec:	4a83      	ldr	r2, [pc, #524]	; (80030fc <Menu_Init+0x814>)
 8002eee:	671a      	str	r2, [r3, #112]	; 0x70
	items_menu_4[3].child = 0;
 8002ef0:	4b7b      	ldr	r3, [pc, #492]	; (80030e0 <Menu_Init+0x7f8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	675a      	str	r2, [r3, #116]	; 0x74
	items_menu_4[3].parent = &items[3];
 8002ef6:	4b7a      	ldr	r3, [pc, #488]	; (80030e0 <Menu_Init+0x7f8>)
 8002ef8:	4a7d      	ldr	r2, [pc, #500]	; (80030f0 <Menu_Init+0x808>)
 8002efa:	679a      	str	r2, [r3, #120]	; 0x78
	items_menu_4[3].id = 4;
 8002efc:	4b78      	ldr	r3, [pc, #480]	; (80030e0 <Menu_Init+0x7f8>)
 8002efe:	2204      	movs	r2, #4
 8002f00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items_menu_4[3].name = "set par 4";						// Name of item
 8002f04:	4b76      	ldr	r3, [pc, #472]	; (80030e0 <Menu_Init+0x7f8>)
 8002f06:	4a7e      	ldr	r2, [pc, #504]	; (8003100 <Menu_Init+0x818>)
 8002f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items_menu_4[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8002f0c:	4a74      	ldr	r2, [pc, #464]	; (80030e0 <Menu_Init+0x7f8>)
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items_menu_4[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8002f14:	4a72      	ldr	r2, [pc, #456]	; (80030e0 <Menu_Init+0x7f8>)
 8002f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items_menu_4[3].makeAction = p_items_menu_4_set_par_4;
 8002f1c:	4a70      	ldr	r2, [pc, #448]	; (80030e0 <Menu_Init+0x7f8>)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

	items_menu_4[4].up = &items_menu_4[3];
 8002f24:	4b6e      	ldr	r3, [pc, #440]	; (80030e0 <Menu_Init+0x7f8>)
 8002f26:	4a71      	ldr	r2, [pc, #452]	; (80030ec <Menu_Init+0x804>)
 8002f28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	items_menu_4[4].down = &items_menu_4[5];
 8002f2c:	4b6c      	ldr	r3, [pc, #432]	; (80030e0 <Menu_Init+0x7f8>)
 8002f2e:	4a75      	ldr	r2, [pc, #468]	; (8003104 <Menu_Init+0x81c>)
 8002f30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	items_menu_4[4].child = 0;
 8002f34:	4b6a      	ldr	r3, [pc, #424]	; (80030e0 <Menu_Init+0x7f8>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	items_menu_4[4].parent = &items[3];
 8002f3c:	4b68      	ldr	r3, [pc, #416]	; (80030e0 <Menu_Init+0x7f8>)
 8002f3e:	4a6c      	ldr	r2, [pc, #432]	; (80030f0 <Menu_Init+0x808>)
 8002f40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	items_menu_4[4].id = 5;
 8002f44:	4b66      	ldr	r3, [pc, #408]	; (80030e0 <Menu_Init+0x7f8>)
 8002f46:	2205      	movs	r2, #5
 8002f48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	items_menu_4[4].name = "set par 5";						// Name of item
 8002f4c:	4b64      	ldr	r3, [pc, #400]	; (80030e0 <Menu_Init+0x7f8>)
 8002f4e:	4a6e      	ldr	r2, [pc, #440]	; (8003108 <Menu_Init+0x820>)
 8002f50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	items_menu_4[4].updateScreen_up = p_print_rows_on_oled_if_up;
 8002f54:	4a62      	ldr	r2, [pc, #392]	; (80030e0 <Menu_Init+0x7f8>)
 8002f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f58:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	items_menu_4[4].updateScreen_down = p_print_rows_on_oled_if_down;
 8002f5c:	4a60      	ldr	r2, [pc, #384]	; (80030e0 <Menu_Init+0x7f8>)
 8002f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f60:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	items_menu_4[4].makeAction = p_items_menu_4_set_par_5;
 8002f64:	4a5e      	ldr	r2, [pc, #376]	; (80030e0 <Menu_Init+0x7f8>)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

	items_menu_4[5].up = &items_menu_4[4];
 8002f6c:	4b5c      	ldr	r3, [pc, #368]	; (80030e0 <Menu_Init+0x7f8>)
 8002f6e:	4a63      	ldr	r2, [pc, #396]	; (80030fc <Menu_Init+0x814>)
 8002f70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	items_menu_4[5].down = &items_menu_4[6];
 8002f74:	4b5a      	ldr	r3, [pc, #360]	; (80030e0 <Menu_Init+0x7f8>)
 8002f76:	4a65      	ldr	r2, [pc, #404]	; (800310c <Menu_Init+0x824>)
 8002f78:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	items_menu_4[5].child = 0;
 8002f7c:	4b58      	ldr	r3, [pc, #352]	; (80030e0 <Menu_Init+0x7f8>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	items_menu_4[5].parent = &items[3];
 8002f84:	4b56      	ldr	r3, [pc, #344]	; (80030e0 <Menu_Init+0x7f8>)
 8002f86:	4a5a      	ldr	r2, [pc, #360]	; (80030f0 <Menu_Init+0x808>)
 8002f88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	items_menu_4[5].id = 6;
 8002f8c:	4b54      	ldr	r3, [pc, #336]	; (80030e0 <Menu_Init+0x7f8>)
 8002f8e:	2206      	movs	r2, #6
 8002f90:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	items_menu_4[5].name = "set par 6";						// Name of item
 8002f94:	4b52      	ldr	r3, [pc, #328]	; (80030e0 <Menu_Init+0x7f8>)
 8002f96:	4a5e      	ldr	r2, [pc, #376]	; (8003110 <Menu_Init+0x828>)
 8002f98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	items_menu_4[5].updateScreen_up = p_print_rows_on_oled_if_up;
 8002f9c:	4a50      	ldr	r2, [pc, #320]	; (80030e0 <Menu_Init+0x7f8>)
 8002f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa0:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
	items_menu_4[5].updateScreen_down = p_print_rows_on_oled_if_down;
 8002fa4:	4a4e      	ldr	r2, [pc, #312]	; (80030e0 <Menu_Init+0x7f8>)
 8002fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa8:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	items_menu_4[5].makeAction = p_items_menu_4_set_par_6;
 8002fac:	4a4c      	ldr	r2, [pc, #304]	; (80030e0 <Menu_Init+0x7f8>)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

	items_menu_4[6].up = &items_menu_4[5];
 8002fb4:	4b4a      	ldr	r3, [pc, #296]	; (80030e0 <Menu_Init+0x7f8>)
 8002fb6:	4a53      	ldr	r2, [pc, #332]	; (8003104 <Menu_Init+0x81c>)
 8002fb8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	items_menu_4[6].down = &items_menu_4[7];
 8002fbc:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <Menu_Init+0x7f8>)
 8002fbe:	4a55      	ldr	r2, [pc, #340]	; (8003114 <Menu_Init+0x82c>)
 8002fc0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	items_menu_4[6].child = 0;
 8002fc4:	4b46      	ldr	r3, [pc, #280]	; (80030e0 <Menu_Init+0x7f8>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	items_menu_4[6].parent = &items[3];
 8002fcc:	4b44      	ldr	r3, [pc, #272]	; (80030e0 <Menu_Init+0x7f8>)
 8002fce:	4a48      	ldr	r2, [pc, #288]	; (80030f0 <Menu_Init+0x808>)
 8002fd0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	items_menu_4[6].id = 7;
 8002fd4:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <Menu_Init+0x7f8>)
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	items_menu_4[6].name = "set par 7";						// Name of item
 8002fdc:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <Menu_Init+0x7f8>)
 8002fde:	4a4e      	ldr	r2, [pc, #312]	; (8003118 <Menu_Init+0x830>)
 8002fe0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	items_menu_4[6].updateScreen_up = p_print_rows_on_oled_if_up;
 8002fe4:	4a3e      	ldr	r2, [pc, #248]	; (80030e0 <Menu_Init+0x7f8>)
 8002fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	items_menu_4[6].updateScreen_down = p_print_rows_on_oled_if_down;
 8002fec:	4a3c      	ldr	r2, [pc, #240]	; (80030e0 <Menu_Init+0x7f8>)
 8002fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
	items_menu_4[6].makeAction = p_items_menu_4_set_par_7;
 8002ff4:	4a3a      	ldr	r2, [pc, #232]	; (80030e0 <Menu_Init+0x7f8>)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

	items_menu_4[7].up = &items_menu_4[6];
 8002ffc:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <Menu_Init+0x7f8>)
 8002ffe:	4a43      	ldr	r2, [pc, #268]	; (800310c <Menu_Init+0x824>)
 8003000:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	items_menu_4[7].down = &items_menu_4[8];
 8003004:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <Menu_Init+0x7f8>)
 8003006:	4a45      	ldr	r2, [pc, #276]	; (800311c <Menu_Init+0x834>)
 8003008:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	items_menu_4[7].child = 0;
 800300c:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <Menu_Init+0x7f8>)
 800300e:	2200      	movs	r2, #0
 8003010:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	items_menu_4[7].parent = &items[3];
 8003014:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <Menu_Init+0x7f8>)
 8003016:	4a36      	ldr	r2, [pc, #216]	; (80030f0 <Menu_Init+0x808>)
 8003018:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	items_menu_4[7].id = 8;
 800301c:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <Menu_Init+0x7f8>)
 800301e:	2208      	movs	r2, #8
 8003020:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	items_menu_4[7].name = "set par 8";						// Name of item
 8003024:	4b2e      	ldr	r3, [pc, #184]	; (80030e0 <Menu_Init+0x7f8>)
 8003026:	4a3e      	ldr	r2, [pc, #248]	; (8003120 <Menu_Init+0x838>)
 8003028:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	items_menu_4[7].updateScreen_up = p_print_rows_on_oled_if_up;
 800302c:	4a2c      	ldr	r2, [pc, #176]	; (80030e0 <Menu_Init+0x7f8>)
 800302e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003030:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	items_menu_4[7].updateScreen_down = p_print_rows_on_oled_if_down;
 8003034:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <Menu_Init+0x7f8>)
 8003036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003038:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	items_menu_4[7].makeAction = p_items_menu_4_set_par_8;
 800303c:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <Menu_Init+0x7f8>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	items_menu_4[8].up = &items_menu_4[7];
 8003044:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <Menu_Init+0x7f8>)
 8003046:	4a33      	ldr	r2, [pc, #204]	; (8003114 <Menu_Init+0x82c>)
 8003048:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	items_menu_4[8].down = &items_menu_4[9];
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <Menu_Init+0x7f8>)
 800304e:	4a35      	ldr	r2, [pc, #212]	; (8003124 <Menu_Init+0x83c>)
 8003050:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	items_menu_4[8].child = 0;
 8003054:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <Menu_Init+0x7f8>)
 8003056:	2200      	movs	r2, #0
 8003058:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	items_menu_4[8].parent = &items[3];
 800305c:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <Menu_Init+0x7f8>)
 800305e:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <Menu_Init+0x808>)
 8003060:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	items_menu_4[8].id = 9;
 8003064:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <Menu_Init+0x7f8>)
 8003066:	2209      	movs	r2, #9
 8003068:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	items_menu_4[8].name = "DO IT";						// Name of item
 800306c:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <Menu_Init+0x7f8>)
 800306e:	4a2e      	ldr	r2, [pc, #184]	; (8003128 <Menu_Init+0x840>)
 8003070:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	items_menu_4[8].updateScreen_up = p_print_rows_on_oled_if_up;
 8003074:	4a1a      	ldr	r2, [pc, #104]	; (80030e0 <Menu_Init+0x7f8>)
 8003076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003078:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	items_menu_4[8].updateScreen_down = p_print_rows_on_oled_if_down;
 800307c:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <Menu_Init+0x7f8>)
 800307e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003080:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
	items_menu_4[8].makeAction = p_do_it_function_menu_4;
 8003084:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <Menu_Init+0x7f8>)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	items_menu_4[9].up = &items_menu_4[8];
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <Menu_Init+0x7f8>)
 800308e:	4a23      	ldr	r2, [pc, #140]	; (800311c <Menu_Init+0x834>)
 8003090:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	items_menu_4[9].down = 0;
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <Menu_Init+0x7f8>)
 8003096:	2200      	movs	r2, #0
 8003098:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	items_menu_4[9].child = 0;
 800309c:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <Menu_Init+0x7f8>)
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	items_menu_4[9].parent = &items[3];
 80030a4:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <Menu_Init+0x7f8>)
 80030a6:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <Menu_Init+0x808>)
 80030a8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	items_menu_4[9].id = 10;
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <Menu_Init+0x7f8>)
 80030ae:	220a      	movs	r2, #10
 80030b0:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	items_menu_4[9].name = "EXIT";						// Name of item
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <Menu_Init+0x7f8>)
 80030b6:	4a1d      	ldr	r2, [pc, #116]	; (800312c <Menu_Init+0x844>)
 80030b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	items_menu_4[9].updateScreen_up = p_print_rows_on_oled_if_up;
 80030bc:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <Menu_Init+0x7f8>)
 80030be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c0:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	items_menu_4[9].updateScreen_down = p_print_rows_on_oled_if_down;
 80030c4:	4a06      	ldr	r2, [pc, #24]	; (80030e0 <Menu_Init+0x7f8>)
 80030c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c8:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	items_menu_4[9].makeAction = p_return_from_menu;
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <Menu_Init+0x7f8>)
 80030ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d0:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
}
 80030d4:	bf00      	nop
 80030d6:	3754      	adds	r7, #84	; 0x54
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	200006a4 	.word	0x200006a4
 80030e4:	08006afc 	.word	0x08006afc
 80030e8:	200006c8 	.word	0x200006c8
 80030ec:	20000710 	.word	0x20000710
 80030f0:	20000974 	.word	0x20000974
 80030f4:	08006b08 	.word	0x08006b08
 80030f8:	200006ec 	.word	0x200006ec
 80030fc:	20000734 	.word	0x20000734
 8003100:	08006b24 	.word	0x08006b24
 8003104:	20000758 	.word	0x20000758
 8003108:	08006b30 	.word	0x08006b30
 800310c:	2000077c 	.word	0x2000077c
 8003110:	08006b3c 	.word	0x08006b3c
 8003114:	200007a0 	.word	0x200007a0
 8003118:	08006b48 	.word	0x08006b48
 800311c:	200007c4 	.word	0x200007c4
 8003120:	08006b54 	.word	0x08006b54
 8003124:	200007e8 	.word	0x200007e8
 8003128:	08006b14 	.word	0x08006b14
 800312c:	08006b1c 	.word	0x08006b1c

08003130 <up>:
// ----------------------------------------------------------------------------------------
void up(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
	if (currentItem->up)
 8003134:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <up+0x30>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <up+0x2a>
	{
	    currentItem = currentItem->up;
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <up+0x30>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a06      	ldr	r2, [pc, #24]	; (8003160 <up+0x30>)
 8003146:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_up )
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <up+0x30>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <up+0x2a>
	    {
	        currentItem->updateScreen_up();
 8003152:	4b03      	ldr	r3, [pc, #12]	; (8003160 <up+0x30>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	4798      	blx	r3
	    }
	}
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000014 	.word	0x20000014

08003164 <down>:
// ----------------------------------------------------------------------------------------
void down(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
	if (currentItem->down)
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <down+0x30>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <down+0x2a>
	{
	    currentItem = currentItem->down;
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <down+0x30>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4a06      	ldr	r2, [pc, #24]	; (8003194 <down+0x30>)
 800317a:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_down )
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <down+0x30>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <down+0x2a>
	    {
	        currentItem->updateScreen_down();
 8003186:	4b03      	ldr	r3, [pc, #12]	; (8003194 <down+0x30>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	4798      	blx	r3
	    }
	}
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000014 	.word	0x20000014

08003198 <enter>:
// ----------------------------------------------------------------------------------------
void enter(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
	bool status = true;
 800319e:	2301      	movs	r3, #1
 80031a0:	71fb      	strb	r3, [r7, #7]
	// Якщо є функція "makeAction" тоді виконати її
	if (currentItem->makeAction)
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <enter+0x48>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <enter+0x20>
	{
		currentItem->makeAction();
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <enter+0x48>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4798      	blx	r3
		status = false;
 80031b4:	2300      	movs	r3, #0
 80031b6:	71fb      	strb	r3, [r7, #7]
	}
	// Якщо є перехід на  "child" і "makeAction" не була виконана, тоді виконати перехід
	if((currentItem->child) && (status == true))
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <enter+0x48>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <enter+0x3e>
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d006      	beq.n	80031d6 <enter+0x3e>
	{
		currentItem = currentItem->child;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <enter+0x48>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <enter+0x48>)
 80031d0:	6013      	str	r3, [r2, #0]
		action();
 80031d2:	f7fe fc75 	bl	8001ac0 <action>
	}
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000014 	.word	0x20000014

080031e4 <menu>:
// ----------------------------------------------------------------------------------------
void menu(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
	Menu_Init();									// Init all structures
 80031e8:	f7ff fb7e 	bl	80028e8 <Menu_Init>

	print_menu_init();								// Print start menu and scrolingbar
 80031ec:	f7fe fbd8 	bl	80019a0 <print_menu_init>

	HAL_Delay(10);
 80031f0:	200a      	movs	r0, #10
 80031f2:	f000 f8ab 	bl	800334c <HAL_Delay>

	while(1)
	{
		if(button_processed_status == 1)			// If buttons was pressed
 80031f6:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <menu+0x50>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d1fb      	bne.n	80031f6 <menu+0x12>
		{

			button_processed_status = 1;
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <menu+0x50>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]
			switch (button_status)
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <menu+0x54>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d00c      	beq.n	8003226 <menu+0x42>
 800320c:	2b03      	cmp	r3, #3
 800320e:	dc0d      	bgt.n	800322c <menu+0x48>
 8003210:	2b01      	cmp	r3, #1
 8003212:	d002      	beq.n	800321a <menu+0x36>
 8003214:	2b02      	cmp	r3, #2
 8003216:	d003      	beq.n	8003220 <menu+0x3c>
 8003218:	e008      	b.n	800322c <menu+0x48>
			{
				case BOTTON_UP:
					up();
 800321a:	f7ff ff89 	bl	8003130 <up>
					break;
 800321e:	e005      	b.n	800322c <menu+0x48>
				case BUTTON_ENTER:
					enter();
 8003220:	f7ff ffba 	bl	8003198 <enter>
					break;
 8003224:	e002      	b.n	800322c <menu+0x48>
				case BUTTON_DOWN:
					down();
 8003226:	f7ff ff9d 	bl	8003164 <down>
					break;
 800322a:	bf00      	nop
			}
			button_status = BOTTON_DOESENT_PRESS;
 800322c:	4b02      	ldr	r3, [pc, #8]	; (8003238 <menu+0x54>)
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
		if(button_processed_status == 1)			// If buttons was pressed
 8003232:	e7e0      	b.n	80031f6 <menu+0x12>
 8003234:	2000000c 	.word	0x2000000c
 8003238:	200004b9 	.word	0x200004b9

0800323c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800323c:	480c      	ldr	r0, [pc, #48]	; (8003270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800323e:	490d      	ldr	r1, [pc, #52]	; (8003274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003240:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003244:	e002      	b.n	800324c <LoopCopyDataInit>

08003246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800324a:	3304      	adds	r3, #4

0800324c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800324c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800324e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003250:	d3f9      	bcc.n	8003246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003254:	4c0a      	ldr	r4, [pc, #40]	; (8003280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003258:	e001      	b.n	800325e <LoopFillZerobss>

0800325a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800325a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800325c:	3204      	adds	r2, #4

0800325e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800325e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003260:	d3fb      	bcc.n	800325a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003262:	f7fe f99f 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003266:	f003 fae9 	bl	800683c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800326a:	f7fd fbb9 	bl	80009e0 <main>
  bx lr
 800326e:	4770      	bx	lr
  ldr r0, =_sdata
 8003270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003274:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8003278:	08007324 	.word	0x08007324
  ldr r2, =_sbss
 800327c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8003280:	20000a08 	.word	0x20000a08

08003284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003284:	e7fe      	b.n	8003284 <ADC1_2_IRQHandler>
	...

08003288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_Init+0x28>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <HAL_Init+0x28>)
 8003292:	f043 0310 	orr.w	r3, r3, #16
 8003296:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003298:	2003      	movs	r0, #3
 800329a:	f000 f947 	bl	800352c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800329e:	2000      	movs	r0, #0
 80032a0:	f000 f808 	bl	80032b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a4:	f7fd fee6 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40022000 	.word	0x40022000

080032b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_InitTick+0x54>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_InitTick+0x58>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	4619      	mov	r1, r3
 80032c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f95f 	bl	8003596 <HAL_SYSTICK_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e00e      	b.n	8003300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d80a      	bhi.n	80032fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e8:	2200      	movs	r2, #0
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032f0:	f000 f927 	bl	8003542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f4:	4a06      	ldr	r2, [pc, #24]	; (8003310 <HAL_InitTick+0x5c>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000010 	.word	0x20000010
 800330c:	20000030 	.word	0x20000030
 8003310:	2000002c 	.word	0x2000002c

08003314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_IncTick+0x1c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_IncTick+0x20>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4413      	add	r3, r2
 8003324:	4a03      	ldr	r2, [pc, #12]	; (8003334 <HAL_IncTick+0x20>)
 8003326:	6013      	str	r3, [r2, #0]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	20000030 	.word	0x20000030
 8003334:	20000a04 	.word	0x20000a04

08003338 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return uwTick;
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <HAL_GetTick+0x10>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	20000a04 	.word	0x20000a04

0800334c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003354:	f7ff fff0 	bl	8003338 <HAL_GetTick>
 8003358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003364:	d005      	beq.n	8003372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_Delay+0x44>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003372:	bf00      	nop
 8003374:	f7ff ffe0 	bl	8003338 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	429a      	cmp	r2, r3
 8003382:	d8f7      	bhi.n	8003374 <HAL_Delay+0x28>
  {
  }
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000030 	.word	0x20000030

08003394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c6:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	60d3      	str	r3, [r2, #12]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 0307 	and.w	r3, r3, #7
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db0b      	blt.n	8003422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4906      	ldr	r1, [pc, #24]	; (800342c <__NVIC_EnableIRQ+0x34>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2001      	movs	r0, #1
 800341a:	fa00 f202 	lsl.w	r2, r0, r2
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr
 800342c:	e000e100 	.word	0xe000e100

08003430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	6039      	str	r1, [r7, #0]
 800343a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003440:	2b00      	cmp	r3, #0
 8003442:	db0a      	blt.n	800345a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	b2da      	uxtb	r2, r3
 8003448:	490c      	ldr	r1, [pc, #48]	; (800347c <__NVIC_SetPriority+0x4c>)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	0112      	lsls	r2, r2, #4
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	440b      	add	r3, r1
 8003454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003458:	e00a      	b.n	8003470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4908      	ldr	r1, [pc, #32]	; (8003480 <__NVIC_SetPriority+0x50>)
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	3b04      	subs	r3, #4
 8003468:	0112      	lsls	r2, r2, #4
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	440b      	add	r3, r1
 800346e:	761a      	strb	r2, [r3, #24]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e100 	.word	0xe000e100
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f1c3 0307 	rsb	r3, r3, #7
 800349e:	2b04      	cmp	r3, #4
 80034a0:	bf28      	it	cs
 80034a2:	2304      	movcs	r3, #4
 80034a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3304      	adds	r3, #4
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d902      	bls.n	80034b4 <NVIC_EncodePriority+0x30>
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3b03      	subs	r3, #3
 80034b2:	e000      	b.n	80034b6 <NVIC_EncodePriority+0x32>
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	401a      	ands	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	43d9      	mvns	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034dc:	4313      	orrs	r3, r2
         );
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3724      	adds	r7, #36	; 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f8:	d301      	bcc.n	80034fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00f      	b.n	800351e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fe:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <SysTick_Config+0x40>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003506:	210f      	movs	r1, #15
 8003508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800350c:	f7ff ff90 	bl	8003430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <SysTick_Config+0x40>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <SysTick_Config+0x40>)
 8003518:	2207      	movs	r2, #7
 800351a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	e000e010 	.word	0xe000e010

0800352c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff2d 	bl	8003394 <__NVIC_SetPriorityGrouping>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003554:	f7ff ff42 	bl	80033dc <__NVIC_GetPriorityGrouping>
 8003558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	f7ff ff90 	bl	8003484 <NVIC_EncodePriority>
 8003564:	4602      	mov	r2, r0
 8003566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff5f 	bl	8003430 <__NVIC_SetPriority>
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff35 	bl	80033f8 <__NVIC_EnableIRQ>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ffa2 	bl	80034e8 <SysTick_Config>
 80035a4:	4603      	mov	r3, r0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d008      	beq.n	80035d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2204      	movs	r2, #4
 80035c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e020      	b.n	8003618 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 020e 	bic.w	r2, r2, #14
 80035e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003616:	7bfb      	ldrb	r3, [r7, #15]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
	...

08003624 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003636:	2b02      	cmp	r3, #2
 8003638:	d005      	beq.n	8003646 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2204      	movs	r2, #4
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e051      	b.n	80036ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 020e 	bic.w	r2, r2, #14
 8003654:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <HAL_DMA_Abort_IT+0xd0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d029      	beq.n	80036c4 <HAL_DMA_Abort_IT+0xa0>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <HAL_DMA_Abort_IT+0xd4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x9c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_DMA_Abort_IT+0xd8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01a      	beq.n	80036ba <HAL_DMA_Abort_IT+0x96>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <HAL_DMA_Abort_IT+0xdc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d012      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x90>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_DMA_Abort_IT+0xe0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00a      	beq.n	80036ae <HAL_DMA_Abort_IT+0x8a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <HAL_DMA_Abort_IT+0xe4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d102      	bne.n	80036a8 <HAL_DMA_Abort_IT+0x84>
 80036a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036a6:	e00e      	b.n	80036c6 <HAL_DMA_Abort_IT+0xa2>
 80036a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036ac:	e00b      	b.n	80036c6 <HAL_DMA_Abort_IT+0xa2>
 80036ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036b2:	e008      	b.n	80036c6 <HAL_DMA_Abort_IT+0xa2>
 80036b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b8:	e005      	b.n	80036c6 <HAL_DMA_Abort_IT+0xa2>
 80036ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036be:	e002      	b.n	80036c6 <HAL_DMA_Abort_IT+0xa2>
 80036c0:	2310      	movs	r3, #16
 80036c2:	e000      	b.n	80036c6 <HAL_DMA_Abort_IT+0xa2>
 80036c4:	2301      	movs	r3, #1
 80036c6:	4a11      	ldr	r2, [pc, #68]	; (800370c <HAL_DMA_Abort_IT+0xe8>)
 80036c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
    } 
  }
  return status;
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40020008 	.word	0x40020008
 80036f8:	4002001c 	.word	0x4002001c
 80036fc:	40020030 	.word	0x40020030
 8003700:	40020044 	.word	0x40020044
 8003704:	40020058 	.word	0x40020058
 8003708:	4002006c 	.word	0x4002006c
 800370c:	40020000 	.word	0x40020000

08003710 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003710:	b480      	push	{r7}
 8003712:	b08b      	sub	sp, #44	; 0x2c
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003722:	e169      	b.n	80039f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003724:	2201      	movs	r2, #1
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	429a      	cmp	r2, r3
 800373e:	f040 8158 	bne.w	80039f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4a9a      	ldr	r2, [pc, #616]	; (80039b0 <HAL_GPIO_Init+0x2a0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d05e      	beq.n	800380a <HAL_GPIO_Init+0xfa>
 800374c:	4a98      	ldr	r2, [pc, #608]	; (80039b0 <HAL_GPIO_Init+0x2a0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d875      	bhi.n	800383e <HAL_GPIO_Init+0x12e>
 8003752:	4a98      	ldr	r2, [pc, #608]	; (80039b4 <HAL_GPIO_Init+0x2a4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d058      	beq.n	800380a <HAL_GPIO_Init+0xfa>
 8003758:	4a96      	ldr	r2, [pc, #600]	; (80039b4 <HAL_GPIO_Init+0x2a4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d86f      	bhi.n	800383e <HAL_GPIO_Init+0x12e>
 800375e:	4a96      	ldr	r2, [pc, #600]	; (80039b8 <HAL_GPIO_Init+0x2a8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d052      	beq.n	800380a <HAL_GPIO_Init+0xfa>
 8003764:	4a94      	ldr	r2, [pc, #592]	; (80039b8 <HAL_GPIO_Init+0x2a8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d869      	bhi.n	800383e <HAL_GPIO_Init+0x12e>
 800376a:	4a94      	ldr	r2, [pc, #592]	; (80039bc <HAL_GPIO_Init+0x2ac>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d04c      	beq.n	800380a <HAL_GPIO_Init+0xfa>
 8003770:	4a92      	ldr	r2, [pc, #584]	; (80039bc <HAL_GPIO_Init+0x2ac>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d863      	bhi.n	800383e <HAL_GPIO_Init+0x12e>
 8003776:	4a92      	ldr	r2, [pc, #584]	; (80039c0 <HAL_GPIO_Init+0x2b0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d046      	beq.n	800380a <HAL_GPIO_Init+0xfa>
 800377c:	4a90      	ldr	r2, [pc, #576]	; (80039c0 <HAL_GPIO_Init+0x2b0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d85d      	bhi.n	800383e <HAL_GPIO_Init+0x12e>
 8003782:	2b12      	cmp	r3, #18
 8003784:	d82a      	bhi.n	80037dc <HAL_GPIO_Init+0xcc>
 8003786:	2b12      	cmp	r3, #18
 8003788:	d859      	bhi.n	800383e <HAL_GPIO_Init+0x12e>
 800378a:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <HAL_GPIO_Init+0x80>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	0800380b 	.word	0x0800380b
 8003794:	080037e5 	.word	0x080037e5
 8003798:	080037f7 	.word	0x080037f7
 800379c:	08003839 	.word	0x08003839
 80037a0:	0800383f 	.word	0x0800383f
 80037a4:	0800383f 	.word	0x0800383f
 80037a8:	0800383f 	.word	0x0800383f
 80037ac:	0800383f 	.word	0x0800383f
 80037b0:	0800383f 	.word	0x0800383f
 80037b4:	0800383f 	.word	0x0800383f
 80037b8:	0800383f 	.word	0x0800383f
 80037bc:	0800383f 	.word	0x0800383f
 80037c0:	0800383f 	.word	0x0800383f
 80037c4:	0800383f 	.word	0x0800383f
 80037c8:	0800383f 	.word	0x0800383f
 80037cc:	0800383f 	.word	0x0800383f
 80037d0:	0800383f 	.word	0x0800383f
 80037d4:	080037ed 	.word	0x080037ed
 80037d8:	08003801 	.word	0x08003801
 80037dc:	4a79      	ldr	r2, [pc, #484]	; (80039c4 <HAL_GPIO_Init+0x2b4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037e2:	e02c      	b.n	800383e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	623b      	str	r3, [r7, #32]
          break;
 80037ea:	e029      	b.n	8003840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	3304      	adds	r3, #4
 80037f2:	623b      	str	r3, [r7, #32]
          break;
 80037f4:	e024      	b.n	8003840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	3308      	adds	r3, #8
 80037fc:	623b      	str	r3, [r7, #32]
          break;
 80037fe:	e01f      	b.n	8003840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	330c      	adds	r3, #12
 8003806:	623b      	str	r3, [r7, #32]
          break;
 8003808:	e01a      	b.n	8003840 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003812:	2304      	movs	r3, #4
 8003814:	623b      	str	r3, [r7, #32]
          break;
 8003816:	e013      	b.n	8003840 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003820:	2308      	movs	r3, #8
 8003822:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	611a      	str	r2, [r3, #16]
          break;
 800382a:	e009      	b.n	8003840 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800382c:	2308      	movs	r3, #8
 800382e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	615a      	str	r2, [r3, #20]
          break;
 8003836:	e003      	b.n	8003840 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003838:	2300      	movs	r3, #0
 800383a:	623b      	str	r3, [r7, #32]
          break;
 800383c:	e000      	b.n	8003840 <HAL_GPIO_Init+0x130>
          break;
 800383e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2bff      	cmp	r3, #255	; 0xff
 8003844:	d801      	bhi.n	800384a <HAL_GPIO_Init+0x13a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	e001      	b.n	800384e <HAL_GPIO_Init+0x13e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2bff      	cmp	r3, #255	; 0xff
 8003854:	d802      	bhi.n	800385c <HAL_GPIO_Init+0x14c>
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	e002      	b.n	8003862 <HAL_GPIO_Init+0x152>
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	3b08      	subs	r3, #8
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	210f      	movs	r1, #15
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	401a      	ands	r2, r3
 8003874:	6a39      	ldr	r1, [r7, #32]
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	fa01 f303 	lsl.w	r3, r1, r3
 800387c:	431a      	orrs	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80b1 	beq.w	80039f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003890:	4b4d      	ldr	r3, [pc, #308]	; (80039c8 <HAL_GPIO_Init+0x2b8>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	4a4c      	ldr	r2, [pc, #304]	; (80039c8 <HAL_GPIO_Init+0x2b8>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6193      	str	r3, [r2, #24]
 800389c:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <HAL_GPIO_Init+0x2b8>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038a8:	4a48      	ldr	r2, [pc, #288]	; (80039cc <HAL_GPIO_Init+0x2bc>)
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	3302      	adds	r3, #2
 80038b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	220f      	movs	r2, #15
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4013      	ands	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a40      	ldr	r2, [pc, #256]	; (80039d0 <HAL_GPIO_Init+0x2c0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <HAL_GPIO_Init+0x1ec>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3f      	ldr	r2, [pc, #252]	; (80039d4 <HAL_GPIO_Init+0x2c4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00d      	beq.n	80038f8 <HAL_GPIO_Init+0x1e8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3e      	ldr	r2, [pc, #248]	; (80039d8 <HAL_GPIO_Init+0x2c8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d007      	beq.n	80038f4 <HAL_GPIO_Init+0x1e4>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3d      	ldr	r2, [pc, #244]	; (80039dc <HAL_GPIO_Init+0x2cc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d101      	bne.n	80038f0 <HAL_GPIO_Init+0x1e0>
 80038ec:	2303      	movs	r3, #3
 80038ee:	e006      	b.n	80038fe <HAL_GPIO_Init+0x1ee>
 80038f0:	2304      	movs	r3, #4
 80038f2:	e004      	b.n	80038fe <HAL_GPIO_Init+0x1ee>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e002      	b.n	80038fe <HAL_GPIO_Init+0x1ee>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <HAL_GPIO_Init+0x1ee>
 80038fc:	2300      	movs	r3, #0
 80038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003900:	f002 0203 	and.w	r2, r2, #3
 8003904:	0092      	lsls	r2, r2, #2
 8003906:	4093      	lsls	r3, r2
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800390e:	492f      	ldr	r1, [pc, #188]	; (80039cc <HAL_GPIO_Init+0x2bc>)
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	3302      	adds	r3, #2
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d006      	beq.n	8003936 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003928:	4b2d      	ldr	r3, [pc, #180]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	492c      	ldr	r1, [pc, #176]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	4313      	orrs	r3, r2
 8003932:	600b      	str	r3, [r1, #0]
 8003934:	e006      	b.n	8003944 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003936:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	43db      	mvns	r3, r3
 800393e:	4928      	ldr	r1, [pc, #160]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 8003940:	4013      	ands	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d006      	beq.n	800395e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003950:	4b23      	ldr	r3, [pc, #140]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	4922      	ldr	r1, [pc, #136]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
 800395c:	e006      	b.n	800396c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	43db      	mvns	r3, r3
 8003966:	491e      	ldr	r1, [pc, #120]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 8003968:	4013      	ands	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d006      	beq.n	8003986 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	4918      	ldr	r1, [pc, #96]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	608b      	str	r3, [r1, #8]
 8003984:	e006      	b.n	8003994 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003986:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	43db      	mvns	r3, r3
 800398e:	4914      	ldr	r1, [pc, #80]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 8003990:	4013      	ands	r3, r2
 8003992:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d021      	beq.n	80039e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	490e      	ldr	r1, [pc, #56]	; (80039e0 <HAL_GPIO_Init+0x2d0>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60cb      	str	r3, [r1, #12]
 80039ac:	e021      	b.n	80039f2 <HAL_GPIO_Init+0x2e2>
 80039ae:	bf00      	nop
 80039b0:	10320000 	.word	0x10320000
 80039b4:	10310000 	.word	0x10310000
 80039b8:	10220000 	.word	0x10220000
 80039bc:	10210000 	.word	0x10210000
 80039c0:	10120000 	.word	0x10120000
 80039c4:	10110000 	.word	0x10110000
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40010000 	.word	0x40010000
 80039d0:	40010800 	.word	0x40010800
 80039d4:	40010c00 	.word	0x40010c00
 80039d8:	40011000 	.word	0x40011000
 80039dc:	40011400 	.word	0x40011400
 80039e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_GPIO_Init+0x304>)
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	4909      	ldr	r1, [pc, #36]	; (8003a14 <HAL_GPIO_Init+0x304>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	3301      	adds	r3, #1
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f47f ae8e 	bne.w	8003724 <HAL_GPIO_Init+0x14>
  }
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	372c      	adds	r7, #44	; 0x2c
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	40010400 	.word	0x40010400

08003a18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	887b      	ldrh	r3, [r7, #2]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	e001      	b.n	8003a3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	807b      	strh	r3, [r7, #2]
 8003a52:	4613      	mov	r3, r2
 8003a54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a56:	787b      	ldrb	r3, [r7, #1]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a5c:	887a      	ldrh	r2, [r7, #2]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a62:	e003      	b.n	8003a6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	041a      	lsls	r2, r3, #16
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	611a      	str	r2, [r3, #16]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b085      	sub	sp, #20
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a88:	887a      	ldrh	r2, [r7, #2]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	041a      	lsls	r2, r3, #16
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	43d9      	mvns	r1, r3
 8003a94:	887b      	ldrh	r3, [r7, #2]
 8003a96:	400b      	ands	r3, r1
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	611a      	str	r2, [r3, #16]
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ab2:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003abe:	4a05      	ldr	r2, [pc, #20]	; (8003ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd fa84 	bl	8000fd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40010400 	.word	0x40010400

08003ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e12b      	b.n	8003d42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd faea 	bl	80010d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2224      	movs	r2, #36	; 0x24
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f000 fffa 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8003b40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4a81      	ldr	r2, [pc, #516]	; (8003d4c <HAL_I2C_Init+0x274>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d807      	bhi.n	8003b5c <HAL_I2C_Init+0x84>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a80      	ldr	r2, [pc, #512]	; (8003d50 <HAL_I2C_Init+0x278>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	bf94      	ite	ls
 8003b54:	2301      	movls	r3, #1
 8003b56:	2300      	movhi	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e006      	b.n	8003b6a <HAL_I2C_Init+0x92>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a7d      	ldr	r2, [pc, #500]	; (8003d54 <HAL_I2C_Init+0x27c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	bf94      	ite	ls
 8003b64:	2301      	movls	r3, #1
 8003b66:	2300      	movhi	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e0e7      	b.n	8003d42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4a78      	ldr	r2, [pc, #480]	; (8003d58 <HAL_I2C_Init+0x280>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	0c9b      	lsrs	r3, r3, #18
 8003b7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a6a      	ldr	r2, [pc, #424]	; (8003d4c <HAL_I2C_Init+0x274>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d802      	bhi.n	8003bac <HAL_I2C_Init+0xd4>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	e009      	b.n	8003bc0 <HAL_I2C_Init+0xe8>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	4a69      	ldr	r2, [pc, #420]	; (8003d5c <HAL_I2C_Init+0x284>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	099b      	lsrs	r3, r3, #6
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	495c      	ldr	r1, [pc, #368]	; (8003d4c <HAL_I2C_Init+0x274>)
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	d819      	bhi.n	8003c14 <HAL_I2C_Init+0x13c>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e59      	subs	r1, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bee:	1c59      	adds	r1, r3, #1
 8003bf0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_I2C_Init+0x138>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1e59      	subs	r1, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0e:	e051      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c10:	2304      	movs	r3, #4
 8003c12:	e04f      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d111      	bne.n	8003c40 <HAL_I2C_Init+0x168>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1e58      	subs	r0, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	440b      	add	r3, r1
 8003c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e012      	b.n	8003c66 <HAL_I2C_Init+0x18e>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1e58      	subs	r0, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	0099      	lsls	r1, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf0c      	ite	eq
 8003c60:	2301      	moveq	r3, #1
 8003c62:	2300      	movne	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_I2C_Init+0x196>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e022      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10e      	bne.n	8003c94 <HAL_I2C_Init+0x1bc>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1e58      	subs	r0, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	440b      	add	r3, r1
 8003c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c92:	e00f      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e58      	subs	r0, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	0099      	lsls	r1, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003caa:	3301      	adds	r3, #1
 8003cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	6809      	ldr	r1, [r1, #0]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69da      	ldr	r2, [r3, #28]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ce2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6911      	ldr	r1, [r2, #16]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68d2      	ldr	r2, [r2, #12]
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	000186a0 	.word	0x000186a0
 8003d50:	001e847f 	.word	0x001e847f
 8003d54:	003d08ff 	.word	0x003d08ff
 8003d58:	431bde83 	.word	0x431bde83
 8003d5c:	10624dd3 	.word	0x10624dd3

08003d60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	4608      	mov	r0, r1
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	817b      	strh	r3, [r7, #10]
 8003d72:	460b      	mov	r3, r1
 8003d74:	813b      	strh	r3, [r7, #8]
 8003d76:	4613      	mov	r3, r2
 8003d78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d7a:	f7ff fadd 	bl	8003338 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	f040 80d9 	bne.w	8003f40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2319      	movs	r3, #25
 8003d94:	2201      	movs	r2, #1
 8003d96:	496d      	ldr	r1, [pc, #436]	; (8003f4c <HAL_I2C_Mem_Write+0x1ec>)
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f971 	bl	8004080 <I2C_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
 8003da6:	e0cc      	b.n	8003f42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_I2C_Mem_Write+0x56>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e0c5      	b.n	8003f42 <HAL_I2C_Mem_Write+0x1e2>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d007      	beq.n	8003ddc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2221      	movs	r2, #33	; 0x21
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2240      	movs	r2, #64	; 0x40
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a4d      	ldr	r2, [pc, #308]	; (8003f50 <HAL_I2C_Mem_Write+0x1f0>)
 8003e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e1e:	88f8      	ldrh	r0, [r7, #6]
 8003e20:	893a      	ldrh	r2, [r7, #8]
 8003e22:	8979      	ldrh	r1, [r7, #10]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f890 	bl	8003f54 <I2C_RequestMemoryWrite>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d052      	beq.n	8003ee0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e081      	b.n	8003f42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f9f2 	bl	800422c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00d      	beq.n	8003e6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d107      	bne.n	8003e66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06b      	b.n	8003f42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d11b      	bne.n	8003ee0 <HAL_I2C_Mem_Write+0x180>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d017      	beq.n	8003ee0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1aa      	bne.n	8003e3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f9de 	bl	80042ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00d      	beq.n	8003f14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d107      	bne.n	8003f10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e016      	b.n	8003f42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e000      	b.n	8003f42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	00100002 	.word	0x00100002
 8003f50:	ffff0000 	.word	0xffff0000

08003f54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	817b      	strh	r3, [r7, #10]
 8003f66:	460b      	mov	r3, r1
 8003f68:	813b      	strh	r3, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f878 	bl	8004080 <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa4:	d103      	bne.n	8003fae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e05f      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fb2:	897b      	ldrh	r3, [r7, #10]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	492d      	ldr	r1, [pc, #180]	; (800407c <I2C_RequestMemoryWrite+0x128>)
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f8b0 	bl	800412e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e04c      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	6a39      	ldr	r1, [r7, #32]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f91a 	bl	800422c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	2b04      	cmp	r3, #4
 8004004:	d107      	bne.n	8004016 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e02b      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004020:	893b      	ldrh	r3, [r7, #8]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	611a      	str	r2, [r3, #16]
 800402a:	e021      	b.n	8004070 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800402c:	893b      	ldrh	r3, [r7, #8]
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	b29b      	uxth	r3, r3
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	6a39      	ldr	r1, [r7, #32]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f8f4 	bl	800422c <I2C_WaitOnTXEFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b04      	cmp	r3, #4
 8004050:	d107      	bne.n	8004062 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e005      	b.n	8004072 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004066:	893b      	ldrh	r3, [r7, #8]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	00010002 	.word	0x00010002

08004080 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004090:	e025      	b.n	80040de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004098:	d021      	beq.n	80040de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409a:	f7ff f94d 	bl	8003338 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d302      	bcc.n	80040b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d116      	bne.n	80040de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f043 0220 	orr.w	r2, r3, #32
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e023      	b.n	8004126 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	0c1b      	lsrs	r3, r3, #16
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d10d      	bne.n	8004104 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	43da      	mvns	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4013      	ands	r3, r2
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bf0c      	ite	eq
 80040fa:	2301      	moveq	r3, #1
 80040fc:	2300      	movne	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	e00c      	b.n	800411e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	43da      	mvns	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	bf0c      	ite	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	2300      	movne	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	429a      	cmp	r2, r3
 8004122:	d0b6      	beq.n	8004092 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800413c:	e051      	b.n	80041e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414c:	d123      	bne.n	8004196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004166:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f043 0204 	orr.w	r2, r3, #4
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e046      	b.n	8004224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800419c:	d021      	beq.n	80041e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419e:	f7ff f8cb 	bl	8003338 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d302      	bcc.n	80041b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d116      	bne.n	80041e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e020      	b.n	8004224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d10c      	bne.n	8004206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	43da      	mvns	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4013      	ands	r3, r2
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	bf14      	ite	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	2300      	moveq	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	e00b      	b.n	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	43da      	mvns	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4013      	ands	r3, r2
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d18d      	bne.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004238:	e02d      	b.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f878 	bl	8004330 <I2C_IsAcknowledgeFailed>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e02d      	b.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004250:	d021      	beq.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004252:	f7ff f871 	bl	8003338 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	429a      	cmp	r2, r3
 8004260:	d302      	bcc.n	8004268 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d116      	bne.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f043 0220 	orr.w	r2, r3, #32
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e007      	b.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a0:	2b80      	cmp	r3, #128	; 0x80
 80042a2:	d1ca      	bne.n	800423a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ba:	e02d      	b.n	8004318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f837 	bl	8004330 <I2C_IsAcknowledgeFailed>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e02d      	b.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d2:	d021      	beq.n	8004318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d4:	f7ff f830 	bl	8003338 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d302      	bcc.n	80042ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d116      	bne.n	8004318 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	f043 0220 	orr.w	r2, r3, #32
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e007      	b.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b04      	cmp	r3, #4
 8004324:	d1ca      	bne.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004346:	d11b      	bne.n	8004380 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004350:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	f043 0204 	orr.w	r2, r3, #4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e26c      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8087 	beq.w	80044ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043ac:	4b92      	ldr	r3, [pc, #584]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d00c      	beq.n	80043d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043b8:	4b8f      	ldr	r3, [pc, #572]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d112      	bne.n	80043ea <HAL_RCC_OscConfig+0x5e>
 80043c4:	4b8c      	ldr	r3, [pc, #560]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d10b      	bne.n	80043ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d2:	4b89      	ldr	r3, [pc, #548]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d06c      	beq.n	80044b8 <HAL_RCC_OscConfig+0x12c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d168      	bne.n	80044b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e246      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0x76>
 80043f4:	4b80      	ldr	r3, [pc, #512]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a7f      	ldr	r2, [pc, #508]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80043fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	e02e      	b.n	8004460 <HAL_RCC_OscConfig+0xd4>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x98>
 800440a:	4b7b      	ldr	r3, [pc, #492]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a7a      	ldr	r2, [pc, #488]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	4b78      	ldr	r3, [pc, #480]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a77      	ldr	r2, [pc, #476]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800441c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	e01d      	b.n	8004460 <HAL_RCC_OscConfig+0xd4>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0xbc>
 800442e:	4b72      	ldr	r3, [pc, #456]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a71      	ldr	r2, [pc, #452]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b6f      	ldr	r3, [pc, #444]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a6e      	ldr	r2, [pc, #440]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0xd4>
 8004448:	4b6b      	ldr	r3, [pc, #428]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a6a      	ldr	r2, [pc, #424]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800444e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b68      	ldr	r3, [pc, #416]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a67      	ldr	r2, [pc, #412]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800445a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800445e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d013      	beq.n	8004490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fe ff66 	bl	8003338 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004470:	f7fe ff62 	bl	8003338 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	; 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e1fa      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b5d      	ldr	r3, [pc, #372]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0xe4>
 800448e:	e014      	b.n	80044ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fe ff52 	bl	8003338 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004498:	f7fe ff4e 	bl	8003338 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b64      	cmp	r3, #100	; 0x64
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e1e6      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044aa:	4b53      	ldr	r3, [pc, #332]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x10c>
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d063      	beq.n	800458e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044c6:	4b4c      	ldr	r3, [pc, #304]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044d2:	4b49      	ldr	r3, [pc, #292]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d11c      	bne.n	8004518 <HAL_RCC_OscConfig+0x18c>
 80044de:	4b46      	ldr	r3, [pc, #280]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d116      	bne.n	8004518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	4b43      	ldr	r3, [pc, #268]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_RCC_OscConfig+0x176>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e1ba      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004502:	4b3d      	ldr	r3, [pc, #244]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4939      	ldr	r1, [pc, #228]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004512:	4313      	orrs	r3, r2
 8004514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004516:	e03a      	b.n	800458e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d020      	beq.n	8004562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004520:	4b36      	ldr	r3, [pc, #216]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fe ff07 	bl	8003338 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452e:	f7fe ff03 	bl	8003338 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e19b      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004540:	4b2d      	ldr	r3, [pc, #180]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454c:	4b2a      	ldr	r3, [pc, #168]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4927      	ldr	r1, [pc, #156]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]
 8004560:	e015      	b.n	800458e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004562:	4b26      	ldr	r3, [pc, #152]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fe fee6 	bl	8003338 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004570:	f7fe fee2 	bl	8003338 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e17a      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004582:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d03a      	beq.n	8004610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d019      	beq.n	80045d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a2:	4b17      	ldr	r3, [pc, #92]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a8:	f7fe fec6 	bl	8003338 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b0:	f7fe fec2 	bl	8003338 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e15a      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c2:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045ce:	2001      	movs	r0, #1
 80045d0:	f000 fad8 	bl	8004b84 <RCC_Delay>
 80045d4:	e01c      	b.n	8004610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045dc:	f7fe feac 	bl	8003338 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e2:	e00f      	b.n	8004604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e4:	f7fe fea8 	bl	8003338 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d908      	bls.n	8004604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e140      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000
 80045fc:	42420000 	.word	0x42420000
 8004600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004604:	4b9e      	ldr	r3, [pc, #632]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e9      	bne.n	80045e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80a6 	beq.w	800476a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004622:	4b97      	ldr	r3, [pc, #604]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10d      	bne.n	800464a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462e:	4b94      	ldr	r3, [pc, #592]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	4a93      	ldr	r2, [pc, #588]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 8004634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004638:	61d3      	str	r3, [r2, #28]
 800463a:	4b91      	ldr	r3, [pc, #580]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004646:	2301      	movs	r3, #1
 8004648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464a:	4b8e      	ldr	r3, [pc, #568]	; (8004884 <HAL_RCC_OscConfig+0x4f8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d118      	bne.n	8004688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004656:	4b8b      	ldr	r3, [pc, #556]	; (8004884 <HAL_RCC_OscConfig+0x4f8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a8a      	ldr	r2, [pc, #552]	; (8004884 <HAL_RCC_OscConfig+0x4f8>)
 800465c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004662:	f7fe fe69 	bl	8003338 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466a:	f7fe fe65 	bl	8003338 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b64      	cmp	r3, #100	; 0x64
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e0fd      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467c:	4b81      	ldr	r3, [pc, #516]	; (8004884 <HAL_RCC_OscConfig+0x4f8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d106      	bne.n	800469e <HAL_RCC_OscConfig+0x312>
 8004690:	4b7b      	ldr	r3, [pc, #492]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	4a7a      	ldr	r2, [pc, #488]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	6213      	str	r3, [r2, #32]
 800469c:	e02d      	b.n	80046fa <HAL_RCC_OscConfig+0x36e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x334>
 80046a6:	4b76      	ldr	r3, [pc, #472]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	4a75      	ldr	r2, [pc, #468]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6213      	str	r3, [r2, #32]
 80046b2:	4b73      	ldr	r3, [pc, #460]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	4a72      	ldr	r2, [pc, #456]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80046b8:	f023 0304 	bic.w	r3, r3, #4
 80046bc:	6213      	str	r3, [r2, #32]
 80046be:	e01c      	b.n	80046fa <HAL_RCC_OscConfig+0x36e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b05      	cmp	r3, #5
 80046c6:	d10c      	bne.n	80046e2 <HAL_RCC_OscConfig+0x356>
 80046c8:	4b6d      	ldr	r3, [pc, #436]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	4a6c      	ldr	r2, [pc, #432]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80046ce:	f043 0304 	orr.w	r3, r3, #4
 80046d2:	6213      	str	r3, [r2, #32]
 80046d4:	4b6a      	ldr	r3, [pc, #424]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	4a69      	ldr	r2, [pc, #420]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	6213      	str	r3, [r2, #32]
 80046e0:	e00b      	b.n	80046fa <HAL_RCC_OscConfig+0x36e>
 80046e2:	4b67      	ldr	r3, [pc, #412]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	4a66      	ldr	r2, [pc, #408]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	6213      	str	r3, [r2, #32]
 80046ee:	4b64      	ldr	r3, [pc, #400]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	4a63      	ldr	r2, [pc, #396]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80046f4:	f023 0304 	bic.w	r3, r3, #4
 80046f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d015      	beq.n	800472e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004702:	f7fe fe19 	bl	8003338 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004708:	e00a      	b.n	8004720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f7fe fe15 	bl	8003338 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f241 3288 	movw	r2, #5000	; 0x1388
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e0ab      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004720:	4b57      	ldr	r3, [pc, #348]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ee      	beq.n	800470a <HAL_RCC_OscConfig+0x37e>
 800472c:	e014      	b.n	8004758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472e:	f7fe fe03 	bl	8003338 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004734:	e00a      	b.n	800474c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fe fdff 	bl	8003338 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	; 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e095      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800474c:	4b4c      	ldr	r3, [pc, #304]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ee      	bne.n	8004736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004758:	7dfb      	ldrb	r3, [r7, #23]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d105      	bne.n	800476a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800475e:	4b48      	ldr	r3, [pc, #288]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	4a47      	ldr	r2, [pc, #284]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 8004764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8081 	beq.w	8004876 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004774:	4b42      	ldr	r3, [pc, #264]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 030c 	and.w	r3, r3, #12
 800477c:	2b08      	cmp	r3, #8
 800477e:	d061      	beq.n	8004844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d146      	bne.n	8004816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004788:	4b3f      	ldr	r3, [pc, #252]	; (8004888 <HAL_RCC_OscConfig+0x4fc>)
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478e:	f7fe fdd3 	bl	8003338 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004796:	f7fe fdcf 	bl	8003338 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e067      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a8:	4b35      	ldr	r3, [pc, #212]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f0      	bne.n	8004796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047bc:	d108      	bne.n	80047d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047be:	4b30      	ldr	r3, [pc, #192]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	492d      	ldr	r1, [pc, #180]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d0:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a19      	ldr	r1, [r3, #32]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	430b      	orrs	r3, r1
 80047e2:	4927      	ldr	r1, [pc, #156]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e8:	4b27      	ldr	r3, [pc, #156]	; (8004888 <HAL_RCC_OscConfig+0x4fc>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7fe fda3 	bl	8003338 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f6:	f7fe fd9f 	bl	8003338 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e037      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004808:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x46a>
 8004814:	e02f      	b.n	8004876 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004816:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <HAL_RCC_OscConfig+0x4fc>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481c:	f7fe fd8c 	bl	8003338 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004824:	f7fe fd88 	bl	8003338 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e020      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x498>
 8004842:	e018      	b.n	8004876 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e013      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_OscConfig+0x4f4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	429a      	cmp	r2, r3
 8004862:	d106      	bne.n	8004872 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d001      	beq.n	8004876 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000
 8004884:	40007000 	.word	0x40007000
 8004888:	42420060 	.word	0x42420060

0800488c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0d0      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048a0:	4b6a      	ldr	r3, [pc, #424]	; (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d910      	bls.n	80048d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b67      	ldr	r3, [pc, #412]	; (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 0207 	bic.w	r2, r3, #7
 80048b6:	4965      	ldr	r1, [pc, #404]	; (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b63      	ldr	r3, [pc, #396]	; (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0b8      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d020      	beq.n	800491e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e8:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	4a58      	ldr	r2, [pc, #352]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 80048ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004900:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4a52      	ldr	r2, [pc, #328]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 8004906:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800490a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800490c:	4b50      	ldr	r3, [pc, #320]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	494d      	ldr	r1, [pc, #308]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d040      	beq.n	80049ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004932:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d115      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e07f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d107      	bne.n	800495a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494a:	4b41      	ldr	r3, [pc, #260]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e073      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495a:	4b3d      	ldr	r3, [pc, #244]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e06b      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496a:	4b39      	ldr	r3, [pc, #228]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f023 0203 	bic.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4936      	ldr	r1, [pc, #216]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 8004978:	4313      	orrs	r3, r2
 800497a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800497c:	f7fe fcdc 	bl	8003338 <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	e00a      	b.n	800499a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004984:	f7fe fcd8 	bl	8003338 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e053      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499a:	4b2d      	ldr	r3, [pc, #180]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 020c 	and.w	r2, r3, #12
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d1eb      	bne.n	8004984 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049ac:	4b27      	ldr	r3, [pc, #156]	; (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d210      	bcs.n	80049dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b24      	ldr	r3, [pc, #144]	; (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 0207 	bic.w	r2, r3, #7
 80049c2:	4922      	ldr	r1, [pc, #136]	; (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e032      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e8:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4916      	ldr	r1, [pc, #88]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	490e      	ldr	r1, [pc, #56]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a1a:	f000 f821 	bl	8004a60 <HAL_RCC_GetSysClockFreq>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	490a      	ldr	r1, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2c:	5ccb      	ldrb	r3, [r1, r3]
 8004a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <HAL_RCC_ClockConfig+0x1cc>)
 8004a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCC_ClockConfig+0x1d0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fc3a 	bl	80032b4 <HAL_InitTick>

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40022000 	.word	0x40022000
 8004a50:	40021000 	.word	0x40021000
 8004a54:	080072dc 	.word	0x080072dc
 8004a58:	20000010 	.word	0x20000010
 8004a5c:	2000002c 	.word	0x2000002c

08004a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a60:	b490      	push	{r4, r7}
 8004a62:	b08a      	sub	sp, #40	; 0x28
 8004a64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a66:	4b2a      	ldr	r3, [pc, #168]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a68:	1d3c      	adds	r4, r7, #4
 8004a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a70:	f240 2301 	movw	r3, #513	; 0x201
 8004a74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d002      	beq.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x46>
 8004a9e:	e02d      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004aa0:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa2:	623b      	str	r3, [r7, #32]
      break;
 8004aa4:	e02d      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	0c9b      	lsrs	r3, r3, #18
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ab8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d013      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ac4:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	0c5b      	lsrs	r3, r3, #17
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ad8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	4a0e      	ldr	r2, [pc, #56]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ade:	fb02 f203 	mul.w	r2, r2, r3
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aea:	e004      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	4a0b      	ldr	r2, [pc, #44]	; (8004b1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004af0:	fb02 f303 	mul.w	r3, r2, r3
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	623b      	str	r3, [r7, #32]
      break;
 8004afa:	e002      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004afe:	623b      	str	r3, [r7, #32]
      break;
 8004b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b02:	6a3b      	ldr	r3, [r7, #32]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3728      	adds	r7, #40	; 0x28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc90      	pop	{r4, r7}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	08006b60 	.word	0x08006b60
 8004b14:	40021000 	.word	0x40021000
 8004b18:	007a1200 	.word	0x007a1200
 8004b1c:	003d0900 	.word	0x003d0900

08004b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b24:	4b02      	ldr	r3, [pc, #8]	; (8004b30 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr
 8004b30:	20000010 	.word	0x20000010

08004b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b38:	f7ff fff2 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	4903      	ldr	r1, [pc, #12]	; (8004b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000
 8004b58:	080072ec 	.word	0x080072ec

08004b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b60:	f7ff ffde 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	0adb      	lsrs	r3, r3, #11
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4903      	ldr	r1, [pc, #12]	; (8004b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	080072ec 	.word	0x080072ec

08004b84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <RCC_Delay+0x34>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0a      	ldr	r2, [pc, #40]	; (8004bbc <RCC_Delay+0x38>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	0a5b      	lsrs	r3, r3, #9
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ba0:	bf00      	nop
  }
  while (Delay --);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1e5a      	subs	r2, r3, #1
 8004ba6:	60fa      	str	r2, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1f9      	bne.n	8004ba0 <RCC_Delay+0x1c>
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	20000010 	.word	0x20000010
 8004bbc:	10624dd3 	.word	0x10624dd3

08004bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e076      	b.n	8004cc0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d108      	bne.n	8004bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be2:	d009      	beq.n	8004bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	61da      	str	r2, [r3, #28]
 8004bea:	e005      	b.n	8004bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fa9e 	bl	8001154 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7c:	ea42 0103 	orr.w	r1, r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	0c1a      	lsrs	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f002 0204 	and.w	r2, r2, #4
 8004c9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_SPI_Transmit+0x22>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e126      	b.n	8004f38 <HAL_SPI_Transmit+0x270>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cf2:	f7fe fb21 	bl	8003338 <HAL_GetTick>
 8004cf6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d002      	beq.n	8004d0e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d0c:	e10b      	b.n	8004f26 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <HAL_SPI_Transmit+0x52>
 8004d14:	88fb      	ldrh	r3, [r7, #6]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d1e:	e102      	b.n	8004f26 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2203      	movs	r2, #3
 8004d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	88fa      	ldrh	r2, [r7, #6]
 8004d3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d66:	d10f      	bne.n	8004d88 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d007      	beq.n	8004da6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dae:	d14b      	bne.n	8004e48 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_SPI_Transmit+0xf6>
 8004db8:	8afb      	ldrh	r3, [r7, #22]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d13e      	bne.n	8004e3c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	881a      	ldrh	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004de2:	e02b      	b.n	8004e3c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d112      	bne.n	8004e18 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	881a      	ldrh	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	1c9a      	adds	r2, r3, #2
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e16:	e011      	b.n	8004e3c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e18:	f7fe fa8e 	bl	8003338 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d803      	bhi.n	8004e30 <HAL_SPI_Transmit+0x168>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e2e:	d102      	bne.n	8004e36 <HAL_SPI_Transmit+0x16e>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e3a:	e074      	b.n	8004f26 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1ce      	bne.n	8004de4 <HAL_SPI_Transmit+0x11c>
 8004e46:	e04c      	b.n	8004ee2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_SPI_Transmit+0x18e>
 8004e50:	8afb      	ldrh	r3, [r7, #22]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d140      	bne.n	8004ed8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	7812      	ldrb	r2, [r2, #0]
 8004e62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e7c:	e02c      	b.n	8004ed8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d113      	bne.n	8004eb4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	330c      	adds	r3, #12
 8004e96:	7812      	ldrb	r2, [r2, #0]
 8004e98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004eb2:	e011      	b.n	8004ed8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eb4:	f7fe fa40 	bl	8003338 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d803      	bhi.n	8004ecc <HAL_SPI_Transmit+0x204>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eca:	d102      	bne.n	8004ed2 <HAL_SPI_Transmit+0x20a>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ed6:	e026      	b.n	8004f26 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1cd      	bne.n	8004e7e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fbb8 	bl	800565c <SPI_EndRxTxTransaction>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f00:	2300      	movs	r3, #0
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e000      	b.n	8004f26 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f36:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3720      	adds	r7, #32
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5c:	d112      	bne.n	8004f84 <HAL_SPI_Receive+0x44>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10e      	bne.n	8004f84 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2204      	movs	r2, #4
 8004f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f6e:	88fa      	ldrh	r2, [r7, #6]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 f8f1 	bl	8005162 <HAL_SPI_TransmitReceive>
 8004f80:	4603      	mov	r3, r0
 8004f82:	e0ea      	b.n	800515a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_SPI_Receive+0x52>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e0e3      	b.n	800515a <HAL_SPI_Receive+0x21a>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f9a:	f7fe f9cd 	bl	8003338 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d002      	beq.n	8004fb2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
 8004fae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fb0:	e0ca      	b.n	8005148 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <HAL_SPI_Receive+0x7e>
 8004fb8:	88fb      	ldrh	r3, [r7, #6]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fc2:	e0c1      	b.n	8005148 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	88fa      	ldrh	r2, [r7, #6]
 8004fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	88fa      	ldrh	r2, [r7, #6]
 8004fe2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800500a:	d10f      	bne.n	800502c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800501a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800502a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b40      	cmp	r3, #64	; 0x40
 8005038:	d007      	beq.n	800504a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005048:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d162      	bne.n	8005118 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005052:	e02e      	b.n	80050b2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b01      	cmp	r3, #1
 8005060:	d115      	bne.n	800508e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f103 020c 	add.w	r2, r3, #12
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	7812      	ldrb	r2, [r2, #0]
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800508c:	e011      	b.n	80050b2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800508e:	f7fe f953 	bl	8003338 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d803      	bhi.n	80050a6 <HAL_SPI_Receive+0x166>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050a4:	d102      	bne.n	80050ac <HAL_SPI_Receive+0x16c>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d102      	bne.n	80050b2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050b0:	e04a      	b.n	8005148 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1cb      	bne.n	8005054 <HAL_SPI_Receive+0x114>
 80050bc:	e031      	b.n	8005122 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d113      	bne.n	80050f4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	b292      	uxth	r2, r2
 80050d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	1c9a      	adds	r2, r3, #2
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050f2:	e011      	b.n	8005118 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050f4:	f7fe f920 	bl	8003338 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d803      	bhi.n	800510c <HAL_SPI_Receive+0x1cc>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800510a:	d102      	bne.n	8005112 <HAL_SPI_Receive+0x1d2>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d102      	bne.n	8005118 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005116:	e017      	b.n	8005148 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1cd      	bne.n	80050be <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 fa46 	bl	80055b8 <SPI_EndRxTransaction>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	75fb      	strb	r3, [r7, #23]
 8005144:	e000      	b.n	8005148 <HAL_SPI_Receive+0x208>
  }

error :
 8005146:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b08c      	sub	sp, #48	; 0x30
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
 800516e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005170:	2301      	movs	r3, #1
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x26>
 8005184:	2302      	movs	r3, #2
 8005186:	e18a      	b.n	800549e <HAL_SPI_TransmitReceive+0x33c>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005190:	f7fe f8d2 	bl	8003338 <HAL_GetTick>
 8005194:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800519c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80051a6:	887b      	ldrh	r3, [r7, #2]
 80051a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d00f      	beq.n	80051d2 <HAL_SPI_TransmitReceive+0x70>
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b8:	d107      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x68>
 80051c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d003      	beq.n	80051d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80051ca:	2302      	movs	r3, #2
 80051cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051d0:	e15b      	b.n	800548a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_SPI_TransmitReceive+0x82>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <HAL_SPI_TransmitReceive+0x82>
 80051de:	887b      	ldrh	r3, [r7, #2]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d103      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051ea:	e14e      	b.n	800548a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d003      	beq.n	8005200 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2205      	movs	r2, #5
 80051fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	887a      	ldrh	r2, [r7, #2]
 8005210:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	887a      	ldrh	r2, [r7, #2]
 8005216:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	887a      	ldrh	r2, [r7, #2]
 8005222:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	887a      	ldrh	r2, [r7, #2]
 8005228:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d007      	beq.n	8005254 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005252:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525c:	d178      	bne.n	8005350 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_SPI_TransmitReceive+0x10a>
 8005266:	8b7b      	ldrh	r3, [r7, #26]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d166      	bne.n	800533a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	881a      	ldrh	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	1c9a      	adds	r2, r3, #2
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005290:	e053      	b.n	800533a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b02      	cmp	r3, #2
 800529e:	d11b      	bne.n	80052d8 <HAL_SPI_TransmitReceive+0x176>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d016      	beq.n	80052d8 <HAL_SPI_TransmitReceive+0x176>
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d113      	bne.n	80052d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	881a      	ldrh	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	1c9a      	adds	r2, r3, #2
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d119      	bne.n	800531a <HAL_SPI_TransmitReceive+0x1b8>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d014      	beq.n	800531a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	b292      	uxth	r2, r2
 80052fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	1c9a      	adds	r2, r3, #2
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005316:	2301      	movs	r3, #1
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800531a:	f7fe f80d 	bl	8003338 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005326:	429a      	cmp	r2, r3
 8005328:	d807      	bhi.n	800533a <HAL_SPI_TransmitReceive+0x1d8>
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005330:	d003      	beq.n	800533a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005338:	e0a7      	b.n	800548a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1a6      	bne.n	8005292 <HAL_SPI_TransmitReceive+0x130>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1a1      	bne.n	8005292 <HAL_SPI_TransmitReceive+0x130>
 800534e:	e07c      	b.n	800544a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_SPI_TransmitReceive+0x1fc>
 8005358:	8b7b      	ldrh	r3, [r7, #26]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d16b      	bne.n	8005436 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	7812      	ldrb	r2, [r2, #0]
 800536a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005384:	e057      	b.n	8005436 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b02      	cmp	r3, #2
 8005392:	d11c      	bne.n	80053ce <HAL_SPI_TransmitReceive+0x26c>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d017      	beq.n	80053ce <HAL_SPI_TransmitReceive+0x26c>
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d114      	bne.n	80053ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d119      	bne.n	8005410 <HAL_SPI_TransmitReceive+0x2ae>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d014      	beq.n	8005410 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800540c:	2301      	movs	r3, #1
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005410:	f7fd ff92 	bl	8003338 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800541c:	429a      	cmp	r2, r3
 800541e:	d803      	bhi.n	8005428 <HAL_SPI_TransmitReceive+0x2c6>
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005426:	d102      	bne.n	800542e <HAL_SPI_TransmitReceive+0x2cc>
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	2b00      	cmp	r3, #0
 800542c:	d103      	bne.n	8005436 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005434:	e029      	b.n	800548a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1a2      	bne.n	8005386 <HAL_SPI_TransmitReceive+0x224>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d19d      	bne.n	8005386 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800544a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f904 	bl	800565c <SPI_EndRxTxTransaction>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d006      	beq.n	8005468 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005466:	e010      	b.n	800548a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10b      	bne.n	8005488 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	e000      	b.n	800548a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005488:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800549a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3730      	adds	r7, #48	; 0x30
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054b8:	f7fd ff3e 	bl	8003338 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	4413      	add	r3, r2
 80054c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054c8:	f7fd ff36 	bl	8003338 <HAL_GetTick>
 80054cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054ce:	4b39      	ldr	r3, [pc, #228]	; (80055b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	015b      	lsls	r3, r3, #5
 80054d4:	0d1b      	lsrs	r3, r3, #20
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	fb02 f303 	mul.w	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054de:	e054      	b.n	800558a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e6:	d050      	beq.n	800558a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054e8:	f7fd ff26 	bl	8003338 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d902      	bls.n	80054fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d13d      	bne.n	800557a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800550c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005516:	d111      	bne.n	800553c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005520:	d004      	beq.n	800552c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552a:	d107      	bne.n	800553c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800553a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005544:	d10f      	bne.n	8005566 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e017      	b.n	80055aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	3b01      	subs	r3, #1
 8005588:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4013      	ands	r3, r2
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	429a      	cmp	r2, r3
 8005598:	bf0c      	ite	eq
 800559a:	2301      	moveq	r3, #1
 800559c:	2300      	movne	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d19b      	bne.n	80054e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000010 	.word	0x20000010

080055b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055cc:	d111      	bne.n	80055f2 <SPI_EndRxTransaction+0x3a>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d6:	d004      	beq.n	80055e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e0:	d107      	bne.n	80055f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055fa:	d117      	bne.n	800562c <SPI_EndRxTransaction+0x74>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005604:	d112      	bne.n	800562c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2200      	movs	r2, #0
 800560e:	2101      	movs	r1, #1
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff ff49 	bl	80054a8 <SPI_WaitFlagStateUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01a      	beq.n	8005652 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005620:	f043 0220 	orr.w	r2, r3, #32
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e013      	b.n	8005654 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2200      	movs	r2, #0
 8005634:	2180      	movs	r1, #128	; 0x80
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f7ff ff36 	bl	80054a8 <SPI_WaitFlagStateUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d007      	beq.n	8005652 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	f043 0220 	orr.w	r2, r3, #32
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e000      	b.n	8005654 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af02      	add	r7, sp, #8
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2200      	movs	r2, #0
 8005670:	2180      	movs	r1, #128	; 0x80
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7ff ff18 	bl	80054a8 <SPI_WaitFlagStateUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e000      	b.n	8005690 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e041      	b.n	800572e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fb fd92 	bl	80011e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3304      	adds	r3, #4
 80056d4:	4619      	mov	r1, r3
 80056d6:	4610      	mov	r0, r2
 80056d8:	f000 faa8 	bl	8005c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	d001      	beq.n	8005750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e03a      	b.n	80057c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <HAL_TIM_Base_Start_IT+0x98>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00e      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0x58>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577a:	d009      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0x58>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0x58>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a13      	ldr	r2, [pc, #76]	; (80057d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d111      	bne.n	80057b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b06      	cmp	r3, #6
 80057a0:	d010      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b2:	e007      	b.n	80057c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800

080057dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0201 	bic.w	r2, r2, #1
 80057f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10f      	bne.n	8005824 <HAL_TIM_Base_Stop_IT+0x48>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6a1a      	ldr	r2, [r3, #32]
 800580a:	f240 4344 	movw	r3, #1092	; 0x444
 800580e:	4013      	ands	r3, r2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <HAL_TIM_Base_Stop_IT+0x48>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 0201 	bic.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b02      	cmp	r3, #2
 800584c:	d122      	bne.n	8005894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0202 	mvn.w	r2, #2
 8005864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9ba 	bl	8005bf4 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f9ad 	bl	8005be2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f9bc 	bl	8005c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0304 	and.w	r3, r3, #4
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d122      	bne.n	80058e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d11b      	bne.n	80058e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0204 	mvn.w	r2, #4
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f990 	bl	8005bf4 <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f983 	bl	8005be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f992 	bl	8005c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d122      	bne.n	800593c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d11b      	bne.n	800593c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0208 	mvn.w	r2, #8
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2204      	movs	r2, #4
 8005912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f966 	bl	8005bf4 <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f959 	bl	8005be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f968 	bl	8005c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b10      	cmp	r3, #16
 8005948:	d122      	bne.n	8005990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b10      	cmp	r3, #16
 8005956:	d11b      	bne.n	8005990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0210 	mvn.w	r2, #16
 8005960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2208      	movs	r2, #8
 8005966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f93c 	bl	8005bf4 <HAL_TIM_IC_CaptureCallback>
 800597c:	e005      	b.n	800598a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f92f 	bl	8005be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f93e 	bl	8005c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	d10e      	bne.n	80059bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d107      	bne.n	80059bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0201 	mvn.w	r2, #1
 80059b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f90a 	bl	8005bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c6:	2b80      	cmp	r3, #128	; 0x80
 80059c8:	d10e      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	d107      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa81 	bl	8005eea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d10e      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d107      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f902 	bl	8005c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d10e      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d107      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0220 	mvn.w	r2, #32
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fa4c 	bl	8005ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_TIM_ConfigClockSource+0x18>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e0b3      	b.n	8005bc8 <HAL_TIM_ConfigClockSource+0x180>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a98:	d03e      	beq.n	8005b18 <HAL_TIM_ConfigClockSource+0xd0>
 8005a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9e:	f200 8087 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x168>
 8005aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa6:	f000 8085 	beq.w	8005bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aae:	d87f      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x168>
 8005ab0:	2b70      	cmp	r3, #112	; 0x70
 8005ab2:	d01a      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0xa2>
 8005ab4:	2b70      	cmp	r3, #112	; 0x70
 8005ab6:	d87b      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x168>
 8005ab8:	2b60      	cmp	r3, #96	; 0x60
 8005aba:	d050      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0x116>
 8005abc:	2b60      	cmp	r3, #96	; 0x60
 8005abe:	d877      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x168>
 8005ac0:	2b50      	cmp	r3, #80	; 0x50
 8005ac2:	d03c      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0xf6>
 8005ac4:	2b50      	cmp	r3, #80	; 0x50
 8005ac6:	d873      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x168>
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d058      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x136>
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d86f      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x168>
 8005ad0:	2b30      	cmp	r3, #48	; 0x30
 8005ad2:	d064      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x156>
 8005ad4:	2b30      	cmp	r3, #48	; 0x30
 8005ad6:	d86b      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x168>
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d060      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x156>
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d867      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x168>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d05c      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x156>
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d05a      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005ae8:	e062      	b.n	8005bb0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6899      	ldr	r1, [r3, #8]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f000 f970 	bl	8005dde <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	609a      	str	r2, [r3, #8]
      break;
 8005b16:	e04e      	b.n	8005bb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	6899      	ldr	r1, [r3, #8]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f000 f959 	bl	8005dde <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b3a:	609a      	str	r2, [r3, #8]
      break;
 8005b3c:	e03b      	b.n	8005bb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6859      	ldr	r1, [r3, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f000 f8d0 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2150      	movs	r1, #80	; 0x50
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 f927 	bl	8005daa <TIM_ITRx_SetConfig>
      break;
 8005b5c:	e02b      	b.n	8005bb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6859      	ldr	r1, [r3, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f000 f8ee 	bl	8005d4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2160      	movs	r1, #96	; 0x60
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f917 	bl	8005daa <TIM_ITRx_SetConfig>
      break;
 8005b7c:	e01b      	b.n	8005bb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6859      	ldr	r1, [r3, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f000 f8b0 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2140      	movs	r1, #64	; 0x40
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f907 	bl	8005daa <TIM_ITRx_SetConfig>
      break;
 8005b9c:	e00b      	b.n	8005bb6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4610      	mov	r0, r2
 8005baa:	f000 f8fe 	bl	8005daa <TIM_ITRx_SetConfig>
        break;
 8005bae:	e002      	b.n	8005bb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr

08005be2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr

08005c06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr
	...

08005c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a29      	ldr	r2, [pc, #164]	; (8005ce4 <TIM_Base_SetConfig+0xb8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00b      	beq.n	8005c5c <TIM_Base_SetConfig+0x30>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4a:	d007      	beq.n	8005c5c <TIM_Base_SetConfig+0x30>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a26      	ldr	r2, [pc, #152]	; (8005ce8 <TIM_Base_SetConfig+0xbc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_Base_SetConfig+0x30>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a25      	ldr	r2, [pc, #148]	; (8005cec <TIM_Base_SetConfig+0xc0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d108      	bne.n	8005c6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a1c      	ldr	r2, [pc, #112]	; (8005ce4 <TIM_Base_SetConfig+0xb8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00b      	beq.n	8005c8e <TIM_Base_SetConfig+0x62>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7c:	d007      	beq.n	8005c8e <TIM_Base_SetConfig+0x62>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a19      	ldr	r2, [pc, #100]	; (8005ce8 <TIM_Base_SetConfig+0xbc>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d003      	beq.n	8005c8e <TIM_Base_SetConfig+0x62>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a18      	ldr	r2, [pc, #96]	; (8005cec <TIM_Base_SetConfig+0xc0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d108      	bne.n	8005ca0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a07      	ldr	r2, [pc, #28]	; (8005ce4 <TIM_Base_SetConfig+0xb8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d103      	bne.n	8005cd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	615a      	str	r2, [r3, #20]
}
 8005cda:	bf00      	nop
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr
 8005ce4:	40012c00 	.word	0x40012c00
 8005ce8:	40000400 	.word	0x40000400
 8005cec:	40000800 	.word	0x40000800

08005cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f023 030a 	bic.w	r3, r3, #10
 8005d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr

08005d4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f023 0210 	bic.w	r2, r3, #16
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	031b      	lsls	r3, r3, #12
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	621a      	str	r2, [r3, #32]
}
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	4770      	bx	lr

08005daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f043 0307 	orr.w	r3, r3, #7
 8005dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	609a      	str	r2, [r3, #8]
}
 8005dd4:	bf00      	nop
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr

08005dde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b087      	sub	sp, #28
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607a      	str	r2, [r7, #4]
 8005dea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005df8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	021a      	lsls	r2, r3, #8
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	431a      	orrs	r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	609a      	str	r2, [r3, #8]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e046      	b.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a16      	ldr	r2, [pc, #88]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e80:	d009      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a12      	ldr	r2, [pc, #72]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a10      	ldr	r2, [pc, #64]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d10c      	bne.n	8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40000800 	.word	0x40000800

08005ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr

08005eea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr

08005efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e03f      	b.n	8005f8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fb f986 	bl	8001234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2224      	movs	r2, #36	; 0x24
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fbed 	bl	8006720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691a      	ldr	r2, [r3, #16]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695a      	ldr	r2, [r3, #20]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b085      	sub	sp, #20
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d130      	bne.n	8006012 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <HAL_UART_Transmit_IT+0x26>
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e029      	b.n	8006014 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_UART_Transmit_IT+0x38>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e022      	b.n	8006014 <HAL_UART_Transmit_IT+0x7e>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	88fa      	ldrh	r2, [r7, #6]
 8005fe0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	88fa      	ldrh	r2, [r7, #6]
 8005fe6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2221      	movs	r2, #33	; 0x21
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800600c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	e000      	b.n	8006014 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006012:	2302      	movs	r3, #2
  }
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr

0800601e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	4613      	mov	r3, r2
 800602a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b20      	cmp	r3, #32
 8006036:	d11d      	bne.n	8006074 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_UART_Receive_IT+0x26>
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e016      	b.n	8006076 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_UART_Receive_IT+0x38>
 8006052:	2302      	movs	r3, #2
 8006054:	e00f      	b.n	8006076 <HAL_UART_Receive_IT+0x58>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006064:	88fb      	ldrh	r3, [r7, #6]
 8006066:	461a      	mov	r2, r3
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f9cf 	bl	800640e <UART_Start_Receive_IT>
 8006070:	4603      	mov	r3, r0
 8006072:	e000      	b.n	8006076 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006074:	2302      	movs	r3, #2
  }
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	; 0x28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10d      	bne.n	80060d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_UART_IRQHandler+0x52>
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fa7f 	bl	80065ce <UART_Receive_IT>
      return;
 80060d0:	e17b      	b.n	80063ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80b1 	beq.w	800623c <HAL_UART_IRQHandler+0x1bc>
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d105      	bne.n	80060f0 <HAL_UART_IRQHandler+0x70>
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 80a6 	beq.w	800623c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <HAL_UART_IRQHandler+0x90>
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	f043 0201 	orr.w	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <HAL_UART_IRQHandler+0xb0>
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	f043 0202 	orr.w	r2, r3, #2
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <HAL_UART_IRQHandler+0xd0>
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d005      	beq.n	8006150 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	f043 0204 	orr.w	r2, r3, #4
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00f      	beq.n	800617a <HAL_UART_IRQHandler+0xfa>
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d104      	bne.n	800616e <HAL_UART_IRQHandler+0xee>
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f043 0208 	orr.w	r2, r3, #8
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 811e 	beq.w	80063c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <HAL_UART_IRQHandler+0x11e>
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fa18 	bl	80065ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bf14      	ite	ne
 80061ac:	2301      	movne	r3, #1
 80061ae:	2300      	moveq	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <HAL_UART_IRQHandler+0x146>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d031      	beq.n	800622a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f95a 	bl	8006480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d023      	beq.n	8006222 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695a      	ldr	r2, [r3, #20]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d013      	beq.n	800621a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	4a76      	ldr	r2, [pc, #472]	; (80063d0 <HAL_UART_IRQHandler+0x350>)
 80061f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fd fa10 	bl	8003624 <HAL_DMA_Abort_IT>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d016      	beq.n	8006238 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006214:	4610      	mov	r0, r2
 8006216:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006218:	e00e      	b.n	8006238 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f8e3 	bl	80063e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006220:	e00a      	b.n	8006238 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f8df 	bl	80063e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006228:	e006      	b.n	8006238 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f8db 	bl	80063e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006236:	e0c3      	b.n	80063c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	bf00      	nop
    return;
 800623a:	e0c1      	b.n	80063c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006240:	2b01      	cmp	r3, #1
 8006242:	f040 80a1 	bne.w	8006388 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 809b 	beq.w	8006388 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8095 	beq.w	8006388 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d04e      	beq.n	8006320 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800628c:	8a3b      	ldrh	r3, [r7, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8098 	beq.w	80063c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006298:	8a3a      	ldrh	r2, [r7, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	f080 8092 	bcs.w	80063c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	8a3a      	ldrh	r2, [r7, #16]
 80062a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d02b      	beq.n	8006308 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062be:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695a      	ldr	r2, [r3, #20]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0201 	bic.w	r2, r2, #1
 80062ce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695a      	ldr	r2, [r3, #20]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062de:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0210 	bic.w	r2, r2, #16
 80062fc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	4618      	mov	r0, r3
 8006304:	f7fd f953 	bl	80035ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006310:	b29b      	uxth	r3, r3
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	b29b      	uxth	r3, r3
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f86d 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800631e:	e051      	b.n	80063c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006328:	b29b      	uxth	r3, r3
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d047      	beq.n	80063c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006338:	8a7b      	ldrh	r3, [r7, #18]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d044      	beq.n	80063c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800634c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695a      	ldr	r2, [r3, #20]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0210 	bic.w	r2, r2, #16
 800637a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800637c:	8a7b      	ldrh	r3, [r7, #18]
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f839 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006386:	e01f      	b.n	80063c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638e:	2b00      	cmp	r3, #0
 8006390:	d008      	beq.n	80063a4 <HAL_UART_IRQHandler+0x324>
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f8af 	bl	8006500 <UART_Transmit_IT>
    return;
 80063a2:	e012      	b.n	80063ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00d      	beq.n	80063ca <HAL_UART_IRQHandler+0x34a>
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d008      	beq.n	80063ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f8f0 	bl	800659e <UART_EndTransmit_IT>
    return;
 80063be:	e004      	b.n	80063ca <HAL_UART_IRQHandler+0x34a>
    return;
 80063c0:	bf00      	nop
 80063c2:	e002      	b.n	80063ca <HAL_UART_IRQHandler+0x34a>
      return;
 80063c4:	bf00      	nop
 80063c6:	e000      	b.n	80063ca <HAL_UART_IRQHandler+0x34a>
      return;
 80063c8:	bf00      	nop
  }
}
 80063ca:	3728      	adds	r7, #40	; 0x28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	080064d9 	.word	0x080064d9

080063d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bc80      	pop	{r7}
 80063e4:	4770      	bx	lr

080063e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr

080063f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr

0800640e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	4613      	mov	r3, r2
 800641a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	88fa      	ldrh	r2, [r7, #6]
 8006426:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2222      	movs	r2, #34	; 0x22
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006452:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695a      	ldr	r2, [r3, #20]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0201 	orr.w	r2, r2, #1
 8006462:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0220 	orr.w	r2, r2, #32
 8006472:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr

08006480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006496:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695a      	ldr	r2, [r3, #20]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0201 	bic.w	r2, r2, #1
 80064a6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d107      	bne.n	80064c0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0210 	bic.w	r2, r2, #16
 80064be:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr

080064d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7ff ff77 	bl	80063e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064f8:	bf00      	nop
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b21      	cmp	r3, #33	; 0x21
 8006512:	d13e      	bne.n	8006592 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651c:	d114      	bne.n	8006548 <UART_Transmit_IT+0x48>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d110      	bne.n	8006548 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800653a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	1c9a      	adds	r2, r3, #2
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	621a      	str	r2, [r3, #32]
 8006546:	e008      	b.n	800655a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	1c59      	adds	r1, r3, #1
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6211      	str	r1, [r2, #32]
 8006552:	781a      	ldrb	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29b      	uxth	r3, r3
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	4619      	mov	r1, r3
 8006568:	84d1      	strh	r1, [r2, #38]	; 0x26
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10f      	bne.n	800658e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800657c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800658c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	e000      	b.n	8006594 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006592:	2302      	movs	r3, #2
  }
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr

0800659e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff ff08 	bl	80063d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b086      	sub	sp, #24
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b22      	cmp	r3, #34	; 0x22
 80065e0:	f040 8099 	bne.w	8006716 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ec:	d117      	bne.n	800661e <UART_Receive_IT+0x50>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d113      	bne.n	800661e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	b29b      	uxth	r3, r3
 8006608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660c:	b29a      	uxth	r2, r3
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	1c9a      	adds	r2, r3, #2
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	629a      	str	r2, [r3, #40]	; 0x28
 800661c:	e026      	b.n	800666c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006624:	2300      	movs	r3, #0
 8006626:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006630:	d007      	beq.n	8006642 <UART_Receive_IT+0x74>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <UART_Receive_IT+0x82>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d106      	bne.n	8006650 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	e008      	b.n	8006662 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800665c:	b2da      	uxtb	r2, r3
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b29b      	uxth	r3, r3
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	4619      	mov	r1, r3
 800667a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800667c:	2b00      	cmp	r3, #0
 800667e:	d148      	bne.n	8006712 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0220 	bic.w	r2, r2, #32
 800668e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800669e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d123      	bne.n	8006708 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0210 	bic.w	r2, r2, #16
 80066d4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b10      	cmp	r3, #16
 80066e2:	d10a      	bne.n	80066fa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff fe79 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
 8006706:	e002      	b.n	800670e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7fa fc73 	bl	8000ff4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	e002      	b.n	8006718 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	e000      	b.n	8006718 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006716:	2302      	movs	r3, #2
  }
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800675a:	f023 030c 	bic.w	r3, r3, #12
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	68b9      	ldr	r1, [r7, #8]
 8006764:	430b      	orrs	r3, r1
 8006766:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a2c      	ldr	r2, [pc, #176]	; (8006834 <UART_SetConfig+0x114>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d103      	bne.n	8006790 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006788:	f7fe f9e8 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	e002      	b.n	8006796 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006790:	f7fe f9d0 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8006794:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	009a      	lsls	r2, r3, #2
 80067a0:	441a      	add	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	4a22      	ldr	r2, [pc, #136]	; (8006838 <UART_SetConfig+0x118>)
 80067ae:	fba2 2303 	umull	r2, r3, r2, r3
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	0119      	lsls	r1, r3, #4
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	009a      	lsls	r2, r3, #2
 80067c0:	441a      	add	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80067cc:	4b1a      	ldr	r3, [pc, #104]	; (8006838 <UART_SetConfig+0x118>)
 80067ce:	fba3 0302 	umull	r0, r3, r3, r2
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	2064      	movs	r0, #100	; 0x64
 80067d6:	fb00 f303 	mul.w	r3, r0, r3
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	3332      	adds	r3, #50	; 0x32
 80067e0:	4a15      	ldr	r2, [pc, #84]	; (8006838 <UART_SetConfig+0x118>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067ec:	4419      	add	r1, r3
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009a      	lsls	r2, r3, #2
 80067f8:	441a      	add	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	fbb2 f2f3 	udiv	r2, r2, r3
 8006804:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <UART_SetConfig+0x118>)
 8006806:	fba3 0302 	umull	r0, r3, r3, r2
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	2064      	movs	r0, #100	; 0x64
 800680e:	fb00 f303 	mul.w	r3, r0, r3
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	3332      	adds	r3, #50	; 0x32
 8006818:	4a07      	ldr	r2, [pc, #28]	; (8006838 <UART_SetConfig+0x118>)
 800681a:	fba2 2303 	umull	r2, r3, r2, r3
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	f003 020f 	and.w	r2, r3, #15
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	440a      	add	r2, r1
 800682a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800682c:	bf00      	nop
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40013800 	.word	0x40013800
 8006838:	51eb851f 	.word	0x51eb851f

0800683c <__libc_init_array>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	2600      	movs	r6, #0
 8006840:	4d0c      	ldr	r5, [pc, #48]	; (8006874 <__libc_init_array+0x38>)
 8006842:	4c0d      	ldr	r4, [pc, #52]	; (8006878 <__libc_init_array+0x3c>)
 8006844:	1b64      	subs	r4, r4, r5
 8006846:	10a4      	asrs	r4, r4, #2
 8006848:	42a6      	cmp	r6, r4
 800684a:	d109      	bne.n	8006860 <__libc_init_array+0x24>
 800684c:	f000 f89a 	bl	8006984 <_init>
 8006850:	2600      	movs	r6, #0
 8006852:	4d0a      	ldr	r5, [pc, #40]	; (800687c <__libc_init_array+0x40>)
 8006854:	4c0a      	ldr	r4, [pc, #40]	; (8006880 <__libc_init_array+0x44>)
 8006856:	1b64      	subs	r4, r4, r5
 8006858:	10a4      	asrs	r4, r4, #2
 800685a:	42a6      	cmp	r6, r4
 800685c:	d105      	bne.n	800686a <__libc_init_array+0x2e>
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	f855 3b04 	ldr.w	r3, [r5], #4
 8006864:	4798      	blx	r3
 8006866:	3601      	adds	r6, #1
 8006868:	e7ee      	b.n	8006848 <__libc_init_array+0xc>
 800686a:	f855 3b04 	ldr.w	r3, [r5], #4
 800686e:	4798      	blx	r3
 8006870:	3601      	adds	r6, #1
 8006872:	e7f2      	b.n	800685a <__libc_init_array+0x1e>
 8006874:	0800731c 	.word	0x0800731c
 8006878:	0800731c 	.word	0x0800731c
 800687c:	0800731c 	.word	0x0800731c
 8006880:	08007320 	.word	0x08007320

08006884 <__itoa>:
 8006884:	1e93      	subs	r3, r2, #2
 8006886:	2b22      	cmp	r3, #34	; 0x22
 8006888:	b510      	push	{r4, lr}
 800688a:	460c      	mov	r4, r1
 800688c:	d904      	bls.n	8006898 <__itoa+0x14>
 800688e:	2300      	movs	r3, #0
 8006890:	461c      	mov	r4, r3
 8006892:	700b      	strb	r3, [r1, #0]
 8006894:	4620      	mov	r0, r4
 8006896:	bd10      	pop	{r4, pc}
 8006898:	2a0a      	cmp	r2, #10
 800689a:	d109      	bne.n	80068b0 <__itoa+0x2c>
 800689c:	2800      	cmp	r0, #0
 800689e:	da07      	bge.n	80068b0 <__itoa+0x2c>
 80068a0:	232d      	movs	r3, #45	; 0x2d
 80068a2:	700b      	strb	r3, [r1, #0]
 80068a4:	2101      	movs	r1, #1
 80068a6:	4240      	negs	r0, r0
 80068a8:	4421      	add	r1, r4
 80068aa:	f000 f829 	bl	8006900 <__utoa>
 80068ae:	e7f1      	b.n	8006894 <__itoa+0x10>
 80068b0:	2100      	movs	r1, #0
 80068b2:	e7f9      	b.n	80068a8 <__itoa+0x24>

080068b4 <itoa>:
 80068b4:	f7ff bfe6 	b.w	8006884 <__itoa>

080068b8 <memset>:
 80068b8:	4603      	mov	r3, r0
 80068ba:	4402      	add	r2, r0
 80068bc:	4293      	cmp	r3, r2
 80068be:	d100      	bne.n	80068c2 <memset+0xa>
 80068c0:	4770      	bx	lr
 80068c2:	f803 1b01 	strb.w	r1, [r3], #1
 80068c6:	e7f9      	b.n	80068bc <memset+0x4>

080068c8 <strcpy>:
 80068c8:	4603      	mov	r3, r0
 80068ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ce:	f803 2b01 	strb.w	r2, [r3], #1
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	d1f9      	bne.n	80068ca <strcpy+0x2>
 80068d6:	4770      	bx	lr

080068d8 <strncpy>:
 80068d8:	4603      	mov	r3, r0
 80068da:	b510      	push	{r4, lr}
 80068dc:	3901      	subs	r1, #1
 80068de:	b132      	cbz	r2, 80068ee <strncpy+0x16>
 80068e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80068e4:	3a01      	subs	r2, #1
 80068e6:	f803 4b01 	strb.w	r4, [r3], #1
 80068ea:	2c00      	cmp	r4, #0
 80068ec:	d1f7      	bne.n	80068de <strncpy+0x6>
 80068ee:	2100      	movs	r1, #0
 80068f0:	441a      	add	r2, r3
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d100      	bne.n	80068f8 <strncpy+0x20>
 80068f6:	bd10      	pop	{r4, pc}
 80068f8:	f803 1b01 	strb.w	r1, [r3], #1
 80068fc:	e7f9      	b.n	80068f2 <strncpy+0x1a>
	...

08006900 <__utoa>:
 8006900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006902:	b08b      	sub	sp, #44	; 0x2c
 8006904:	4605      	mov	r5, r0
 8006906:	460b      	mov	r3, r1
 8006908:	466e      	mov	r6, sp
 800690a:	4c1d      	ldr	r4, [pc, #116]	; (8006980 <__utoa+0x80>)
 800690c:	f104 0c20 	add.w	ip, r4, #32
 8006910:	4637      	mov	r7, r6
 8006912:	6820      	ldr	r0, [r4, #0]
 8006914:	6861      	ldr	r1, [r4, #4]
 8006916:	3408      	adds	r4, #8
 8006918:	c703      	stmia	r7!, {r0, r1}
 800691a:	4564      	cmp	r4, ip
 800691c:	463e      	mov	r6, r7
 800691e:	d1f7      	bne.n	8006910 <__utoa+0x10>
 8006920:	7921      	ldrb	r1, [r4, #4]
 8006922:	6820      	ldr	r0, [r4, #0]
 8006924:	7139      	strb	r1, [r7, #4]
 8006926:	1e91      	subs	r1, r2, #2
 8006928:	2922      	cmp	r1, #34	; 0x22
 800692a:	6038      	str	r0, [r7, #0]
 800692c:	f04f 0100 	mov.w	r1, #0
 8006930:	d904      	bls.n	800693c <__utoa+0x3c>
 8006932:	7019      	strb	r1, [r3, #0]
 8006934:	460b      	mov	r3, r1
 8006936:	4618      	mov	r0, r3
 8006938:	b00b      	add	sp, #44	; 0x2c
 800693a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800693c:	1e58      	subs	r0, r3, #1
 800693e:	4684      	mov	ip, r0
 8006940:	fbb5 f7f2 	udiv	r7, r5, r2
 8006944:	fb02 5617 	mls	r6, r2, r7, r5
 8006948:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800694c:	4476      	add	r6, lr
 800694e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006952:	460c      	mov	r4, r1
 8006954:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006958:	462e      	mov	r6, r5
 800695a:	42b2      	cmp	r2, r6
 800695c:	463d      	mov	r5, r7
 800695e:	f101 0101 	add.w	r1, r1, #1
 8006962:	d9ed      	bls.n	8006940 <__utoa+0x40>
 8006964:	2200      	movs	r2, #0
 8006966:	545a      	strb	r2, [r3, r1]
 8006968:	1919      	adds	r1, r3, r4
 800696a:	1aa5      	subs	r5, r4, r2
 800696c:	42aa      	cmp	r2, r5
 800696e:	dae2      	bge.n	8006936 <__utoa+0x36>
 8006970:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006974:	780e      	ldrb	r6, [r1, #0]
 8006976:	3201      	adds	r2, #1
 8006978:	7006      	strb	r6, [r0, #0]
 800697a:	f801 5901 	strb.w	r5, [r1], #-1
 800697e:	e7f4      	b.n	800696a <__utoa+0x6a>
 8006980:	080072f4 	.word	0x080072f4

08006984 <_init>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	bf00      	nop
 8006988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698a:	bc08      	pop	{r3}
 800698c:	469e      	mov	lr, r3
 800698e:	4770      	bx	lr

08006990 <_fini>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	bf00      	nop
 8006994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006996:	bc08      	pop	{r3}
 8006998:	469e      	mov	lr, r3
 800699a:	4770      	bx	lr
