
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000515c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005290  08005290  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005290  08005290  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005290  08005290  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  20000014  080052ac  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  080052ac  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ca6  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af0  00000000  00000000  00034ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  000377d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  00038aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000297a  00000000  00000000  00039ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016408  00000000  00000000  0003c622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008feac  00000000  00000000  00052a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e28d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005148  00000000  00000000  000e292c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08005250 	.word	0x08005250

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08005250 	.word	0x08005250

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2f>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004cc:	bf24      	itt	cs
 80004ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004d6:	d90d      	bls.n	80004f4 <__aeabi_d2f+0x30>
 80004d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004ec:	bf08      	it	eq
 80004ee:	f020 0001 	biceq.w	r0, r0, #1
 80004f2:	4770      	bx	lr
 80004f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80004f8:	d121      	bne.n	800053e <__aeabi_d2f+0x7a>
 80004fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80004fe:	bfbc      	itt	lt
 8000500:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000504:	4770      	bxlt	lr
 8000506:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800050e:	f1c2 0218 	rsb	r2, r2, #24
 8000512:	f1c2 0c20 	rsb	ip, r2, #32
 8000516:	fa10 f30c 	lsls.w	r3, r0, ip
 800051a:	fa20 f002 	lsr.w	r0, r0, r2
 800051e:	bf18      	it	ne
 8000520:	f040 0001 	orrne.w	r0, r0, #1
 8000524:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000528:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800052c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000530:	ea40 000c 	orr.w	r0, r0, ip
 8000534:	fa23 f302 	lsr.w	r3, r3, r2
 8000538:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800053c:	e7cc      	b.n	80004d8 <__aeabi_d2f+0x14>
 800053e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000542:	d107      	bne.n	8000554 <__aeabi_d2f+0x90>
 8000544:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000548:	bf1e      	ittt	ne
 800054a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800054e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000552:	4770      	bxne	lr
 8000554:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000558:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800055c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_frsub>:
 8000564:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000568:	e002      	b.n	8000570 <__addsf3>
 800056a:	bf00      	nop

0800056c <__aeabi_fsub>:
 800056c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000570 <__addsf3>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	bf1f      	itttt	ne
 8000574:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000578:	ea92 0f03 	teqne	r2, r3
 800057c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000580:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000584:	d06a      	beq.n	800065c <__addsf3+0xec>
 8000586:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800058a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800058e:	bfc1      	itttt	gt
 8000590:	18d2      	addgt	r2, r2, r3
 8000592:	4041      	eorgt	r1, r0
 8000594:	4048      	eorgt	r0, r1
 8000596:	4041      	eorgt	r1, r0
 8000598:	bfb8      	it	lt
 800059a:	425b      	neglt	r3, r3
 800059c:	2b19      	cmp	r3, #25
 800059e:	bf88      	it	hi
 80005a0:	4770      	bxhi	lr
 80005a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005ae:	bf18      	it	ne
 80005b0:	4240      	negne	r0, r0
 80005b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005be:	bf18      	it	ne
 80005c0:	4249      	negne	r1, r1
 80005c2:	ea92 0f03 	teq	r2, r3
 80005c6:	d03f      	beq.n	8000648 <__addsf3+0xd8>
 80005c8:	f1a2 0201 	sub.w	r2, r2, #1
 80005cc:	fa41 fc03 	asr.w	ip, r1, r3
 80005d0:	eb10 000c 	adds.w	r0, r0, ip
 80005d4:	f1c3 0320 	rsb	r3, r3, #32
 80005d8:	fa01 f103 	lsl.w	r1, r1, r3
 80005dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005e0:	d502      	bpl.n	80005e8 <__addsf3+0x78>
 80005e2:	4249      	negs	r1, r1
 80005e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005ec:	d313      	bcc.n	8000616 <__addsf3+0xa6>
 80005ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005f2:	d306      	bcc.n	8000602 <__addsf3+0x92>
 80005f4:	0840      	lsrs	r0, r0, #1
 80005f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005fa:	f102 0201 	add.w	r2, r2, #1
 80005fe:	2afe      	cmp	r2, #254	; 0xfe
 8000600:	d251      	bcs.n	80006a6 <__addsf3+0x136>
 8000602:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000606:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800060a:	bf08      	it	eq
 800060c:	f020 0001 	biceq.w	r0, r0, #1
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	4770      	bx	lr
 8000616:	0049      	lsls	r1, r1, #1
 8000618:	eb40 0000 	adc.w	r0, r0, r0
 800061c:	3a01      	subs	r2, #1
 800061e:	bf28      	it	cs
 8000620:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000624:	d2ed      	bcs.n	8000602 <__addsf3+0x92>
 8000626:	fab0 fc80 	clz	ip, r0
 800062a:	f1ac 0c08 	sub.w	ip, ip, #8
 800062e:	ebb2 020c 	subs.w	r2, r2, ip
 8000632:	fa00 f00c 	lsl.w	r0, r0, ip
 8000636:	bfaa      	itet	ge
 8000638:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800063c:	4252      	neglt	r2, r2
 800063e:	4318      	orrge	r0, r3
 8000640:	bfbc      	itt	lt
 8000642:	40d0      	lsrlt	r0, r2
 8000644:	4318      	orrlt	r0, r3
 8000646:	4770      	bx	lr
 8000648:	f092 0f00 	teq	r2, #0
 800064c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000650:	bf06      	itte	eq
 8000652:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000656:	3201      	addeq	r2, #1
 8000658:	3b01      	subne	r3, #1
 800065a:	e7b5      	b.n	80005c8 <__addsf3+0x58>
 800065c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000660:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000664:	bf18      	it	ne
 8000666:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066a:	d021      	beq.n	80006b0 <__addsf3+0x140>
 800066c:	ea92 0f03 	teq	r2, r3
 8000670:	d004      	beq.n	800067c <__addsf3+0x10c>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	bf08      	it	eq
 8000678:	4608      	moveq	r0, r1
 800067a:	4770      	bx	lr
 800067c:	ea90 0f01 	teq	r0, r1
 8000680:	bf1c      	itt	ne
 8000682:	2000      	movne	r0, #0
 8000684:	4770      	bxne	lr
 8000686:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800068a:	d104      	bne.n	8000696 <__addsf3+0x126>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	bf28      	it	cs
 8000690:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000694:	4770      	bx	lr
 8000696:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800069a:	bf3c      	itt	cc
 800069c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006a0:	4770      	bxcc	lr
 80006a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ae:	4770      	bx	lr
 80006b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006b4:	bf16      	itet	ne
 80006b6:	4608      	movne	r0, r1
 80006b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006bc:	4601      	movne	r1, r0
 80006be:	0242      	lsls	r2, r0, #9
 80006c0:	bf06      	itte	eq
 80006c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006c6:	ea90 0f01 	teqeq	r0, r1
 80006ca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006ce:	4770      	bx	lr

080006d0 <__aeabi_ui2f>:
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e004      	b.n	80006e0 <__aeabi_i2f+0x8>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2f>:
 80006d8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	bf48      	it	mi
 80006de:	4240      	negmi	r0, r0
 80006e0:	ea5f 0c00 	movs.w	ip, r0
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006ec:	4601      	mov	r1, r0
 80006ee:	f04f 0000 	mov.w	r0, #0
 80006f2:	e01c      	b.n	800072e <__aeabi_l2f+0x2a>

080006f4 <__aeabi_ul2f>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	e00a      	b.n	8000718 <__aeabi_l2f+0x14>
 8000702:	bf00      	nop

08000704 <__aeabi_l2f>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000710:	d502      	bpl.n	8000718 <__aeabi_l2f+0x14>
 8000712:	4240      	negs	r0, r0
 8000714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000718:	ea5f 0c01 	movs.w	ip, r1
 800071c:	bf02      	ittt	eq
 800071e:	4684      	moveq	ip, r0
 8000720:	4601      	moveq	r1, r0
 8000722:	2000      	moveq	r0, #0
 8000724:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000728:	bf08      	it	eq
 800072a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800072e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000732:	fabc f28c 	clz	r2, ip
 8000736:	3a08      	subs	r2, #8
 8000738:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800073c:	db10      	blt.n	8000760 <__aeabi_l2f+0x5c>
 800073e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000742:	4463      	add	r3, ip
 8000744:	fa00 fc02 	lsl.w	ip, r0, r2
 8000748:	f1c2 0220 	rsb	r2, r2, #32
 800074c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000750:	fa20 f202 	lsr.w	r2, r0, r2
 8000754:	eb43 0002 	adc.w	r0, r3, r2
 8000758:	bf08      	it	eq
 800075a:	f020 0001 	biceq.w	r0, r0, #1
 800075e:	4770      	bx	lr
 8000760:	f102 0220 	add.w	r2, r2, #32
 8000764:	fa01 fc02 	lsl.w	ip, r1, r2
 8000768:	f1c2 0220 	rsb	r2, r2, #32
 800076c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000770:	fa21 f202 	lsr.w	r2, r1, r2
 8000774:	eb43 0002 	adc.w	r0, r3, r2
 8000778:	bf08      	it	eq
 800077a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800077e:	4770      	bx	lr

08000780 <__aeabi_fmul>:
 8000780:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000784:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000788:	bf1e      	ittt	ne
 800078a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800078e:	ea92 0f0c 	teqne	r2, ip
 8000792:	ea93 0f0c 	teqne	r3, ip
 8000796:	d06f      	beq.n	8000878 <__aeabi_fmul+0xf8>
 8000798:	441a      	add	r2, r3
 800079a:	ea80 0c01 	eor.w	ip, r0, r1
 800079e:	0240      	lsls	r0, r0, #9
 80007a0:	bf18      	it	ne
 80007a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007a6:	d01e      	beq.n	80007e6 <__aeabi_fmul+0x66>
 80007a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007b4:	fba0 3101 	umull	r3, r1, r0, r1
 80007b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007c0:	bf3e      	ittt	cc
 80007c2:	0049      	lslcc	r1, r1, #1
 80007c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007c8:	005b      	lslcc	r3, r3, #1
 80007ca:	ea40 0001 	orr.w	r0, r0, r1
 80007ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007d2:	2afd      	cmp	r2, #253	; 0xfd
 80007d4:	d81d      	bhi.n	8000812 <__aeabi_fmul+0x92>
 80007d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007de:	bf08      	it	eq
 80007e0:	f020 0001 	biceq.w	r0, r0, #1
 80007e4:	4770      	bx	lr
 80007e6:	f090 0f00 	teq	r0, #0
 80007ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007ee:	bf08      	it	eq
 80007f0:	0249      	lsleq	r1, r1, #9
 80007f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007fa:	3a7f      	subs	r2, #127	; 0x7f
 80007fc:	bfc2      	ittt	gt
 80007fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000802:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000806:	4770      	bxgt	lr
 8000808:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800080c:	f04f 0300 	mov.w	r3, #0
 8000810:	3a01      	subs	r2, #1
 8000812:	dc5d      	bgt.n	80008d0 <__aeabi_fmul+0x150>
 8000814:	f112 0f19 	cmn.w	r2, #25
 8000818:	bfdc      	itt	le
 800081a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800081e:	4770      	bxle	lr
 8000820:	f1c2 0200 	rsb	r2, r2, #0
 8000824:	0041      	lsls	r1, r0, #1
 8000826:	fa21 f102 	lsr.w	r1, r1, r2
 800082a:	f1c2 0220 	rsb	r2, r2, #32
 800082e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000832:	ea5f 0031 	movs.w	r0, r1, rrx
 8000836:	f140 0000 	adc.w	r0, r0, #0
 800083a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800083e:	bf08      	it	eq
 8000840:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000844:	4770      	bx	lr
 8000846:	f092 0f00 	teq	r2, #0
 800084a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800084e:	bf02      	ittt	eq
 8000850:	0040      	lsleq	r0, r0, #1
 8000852:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000856:	3a01      	subeq	r2, #1
 8000858:	d0f9      	beq.n	800084e <__aeabi_fmul+0xce>
 800085a:	ea40 000c 	orr.w	r0, r0, ip
 800085e:	f093 0f00 	teq	r3, #0
 8000862:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000866:	bf02      	ittt	eq
 8000868:	0049      	lsleq	r1, r1, #1
 800086a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800086e:	3b01      	subeq	r3, #1
 8000870:	d0f9      	beq.n	8000866 <__aeabi_fmul+0xe6>
 8000872:	ea41 010c 	orr.w	r1, r1, ip
 8000876:	e78f      	b.n	8000798 <__aeabi_fmul+0x18>
 8000878:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800087c:	ea92 0f0c 	teq	r2, ip
 8000880:	bf18      	it	ne
 8000882:	ea93 0f0c 	teqne	r3, ip
 8000886:	d00a      	beq.n	800089e <__aeabi_fmul+0x11e>
 8000888:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800088c:	bf18      	it	ne
 800088e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000892:	d1d8      	bne.n	8000846 <__aeabi_fmul+0xc6>
 8000894:	ea80 0001 	eor.w	r0, r0, r1
 8000898:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800089c:	4770      	bx	lr
 800089e:	f090 0f00 	teq	r0, #0
 80008a2:	bf17      	itett	ne
 80008a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008a8:	4608      	moveq	r0, r1
 80008aa:	f091 0f00 	teqne	r1, #0
 80008ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008b2:	d014      	beq.n	80008de <__aeabi_fmul+0x15e>
 80008b4:	ea92 0f0c 	teq	r2, ip
 80008b8:	d101      	bne.n	80008be <__aeabi_fmul+0x13e>
 80008ba:	0242      	lsls	r2, r0, #9
 80008bc:	d10f      	bne.n	80008de <__aeabi_fmul+0x15e>
 80008be:	ea93 0f0c 	teq	r3, ip
 80008c2:	d103      	bne.n	80008cc <__aeabi_fmul+0x14c>
 80008c4:	024b      	lsls	r3, r1, #9
 80008c6:	bf18      	it	ne
 80008c8:	4608      	movne	r0, r1
 80008ca:	d108      	bne.n	80008de <__aeabi_fmul+0x15e>
 80008cc:	ea80 0001 	eor.w	r0, r0, r1
 80008d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008dc:	4770      	bx	lr
 80008de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008e6:	4770      	bx	lr

080008e8 <__aeabi_fdiv>:
 80008e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008f0:	bf1e      	ittt	ne
 80008f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008f6:	ea92 0f0c 	teqne	r2, ip
 80008fa:	ea93 0f0c 	teqne	r3, ip
 80008fe:	d069      	beq.n	80009d4 <__aeabi_fdiv+0xec>
 8000900:	eba2 0203 	sub.w	r2, r2, r3
 8000904:	ea80 0c01 	eor.w	ip, r0, r1
 8000908:	0249      	lsls	r1, r1, #9
 800090a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800090e:	d037      	beq.n	8000980 <__aeabi_fdiv+0x98>
 8000910:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000914:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000918:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800091c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000920:	428b      	cmp	r3, r1
 8000922:	bf38      	it	cc
 8000924:	005b      	lslcc	r3, r3, #1
 8000926:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800092a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800092e:	428b      	cmp	r3, r1
 8000930:	bf24      	itt	cs
 8000932:	1a5b      	subcs	r3, r3, r1
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800093c:	bf24      	itt	cs
 800093e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000942:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000946:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800094a:	bf24      	itt	cs
 800094c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000958:	bf24      	itt	cs
 800095a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800095e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000962:	011b      	lsls	r3, r3, #4
 8000964:	bf18      	it	ne
 8000966:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800096a:	d1e0      	bne.n	800092e <__aeabi_fdiv+0x46>
 800096c:	2afd      	cmp	r2, #253	; 0xfd
 800096e:	f63f af50 	bhi.w	8000812 <__aeabi_fmul+0x92>
 8000972:	428b      	cmp	r3, r1
 8000974:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000978:	bf08      	it	eq
 800097a:	f020 0001 	biceq.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000984:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000988:	327f      	adds	r2, #127	; 0x7f
 800098a:	bfc2      	ittt	gt
 800098c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000990:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000994:	4770      	bxgt	lr
 8000996:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800099a:	f04f 0300 	mov.w	r3, #0
 800099e:	3a01      	subs	r2, #1
 80009a0:	e737      	b.n	8000812 <__aeabi_fmul+0x92>
 80009a2:	f092 0f00 	teq	r2, #0
 80009a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009aa:	bf02      	ittt	eq
 80009ac:	0040      	lsleq	r0, r0, #1
 80009ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009b2:	3a01      	subeq	r2, #1
 80009b4:	d0f9      	beq.n	80009aa <__aeabi_fdiv+0xc2>
 80009b6:	ea40 000c 	orr.w	r0, r0, ip
 80009ba:	f093 0f00 	teq	r3, #0
 80009be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c2:	bf02      	ittt	eq
 80009c4:	0049      	lsleq	r1, r1, #1
 80009c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ca:	3b01      	subeq	r3, #1
 80009cc:	d0f9      	beq.n	80009c2 <__aeabi_fdiv+0xda>
 80009ce:	ea41 010c 	orr.w	r1, r1, ip
 80009d2:	e795      	b.n	8000900 <__aeabi_fdiv+0x18>
 80009d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009d8:	ea92 0f0c 	teq	r2, ip
 80009dc:	d108      	bne.n	80009f0 <__aeabi_fdiv+0x108>
 80009de:	0242      	lsls	r2, r0, #9
 80009e0:	f47f af7d 	bne.w	80008de <__aeabi_fmul+0x15e>
 80009e4:	ea93 0f0c 	teq	r3, ip
 80009e8:	f47f af70 	bne.w	80008cc <__aeabi_fmul+0x14c>
 80009ec:	4608      	mov	r0, r1
 80009ee:	e776      	b.n	80008de <__aeabi_fmul+0x15e>
 80009f0:	ea93 0f0c 	teq	r3, ip
 80009f4:	d104      	bne.n	8000a00 <__aeabi_fdiv+0x118>
 80009f6:	024b      	lsls	r3, r1, #9
 80009f8:	f43f af4c 	beq.w	8000894 <__aeabi_fmul+0x114>
 80009fc:	4608      	mov	r0, r1
 80009fe:	e76e      	b.n	80008de <__aeabi_fmul+0x15e>
 8000a00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a04:	bf18      	it	ne
 8000a06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a0a:	d1ca      	bne.n	80009a2 <__aeabi_fdiv+0xba>
 8000a0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a10:	f47f af5c 	bne.w	80008cc <__aeabi_fmul+0x14c>
 8000a14:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a18:	f47f af3c 	bne.w	8000894 <__aeabi_fmul+0x114>
 8000a1c:	e75f      	b.n	80008de <__aeabi_fmul+0x15e>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_f2uiz>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	d20e      	bcs.n	8000a42 <__aeabi_f2uiz+0x22>
 8000a24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a28:	d30b      	bcc.n	8000a42 <__aeabi_f2uiz+0x22>
 8000a2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a32:	d409      	bmi.n	8000a48 <__aeabi_f2uiz+0x28>
 8000a34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0000 	mov.w	r0, #0
 8000a46:	4770      	bx	lr
 8000a48:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a4c:	d101      	bne.n	8000a52 <__aeabi_f2uiz+0x32>
 8000a4e:	0242      	lsls	r2, r0, #9
 8000a50:	d102      	bne.n	8000a58 <__aeabi_f2uiz+0x38>
 8000a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <IRQ_Callback>:
}

//----------------------------------------------------------------------------------------
// Callback generate when stm32 get falling  signal from IRQ pin (NRF module show that it has data in buffer)
void IRQ_Callback(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 8000a66:	2301      	movs	r3, #1
 8000a68:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a72:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <IRQ_Callback+0x64>)
 8000a74:	f001 fd21 	bl	80024ba <HAL_GPIO_TogglePin>

	DelayMicro(10);
 8000a78:	200a      	movs	r0, #10
 8000a7a:	f000 f82b 	bl	8000ad4 <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 8000a7e:	2007      	movs	r0, #7
 8000a80:	f000 f84a 	bl	8000b18 <NRF24_ReadReg>
 8000a84:	4603      	mov	r3, r0
 8000a86:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d013      	beq.n	8000aba <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	085b      	lsrs	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f003 0307 	and.w	r3, r3, #7
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <IRQ_Callback+0x68>)
 8000aa0:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 8000aa2:	220a      	movs	r2, #10
 8000aa4:	4909      	ldr	r1, [pc, #36]	; (8000acc <IRQ_Callback+0x6c>)
 8000aa6:	2061      	movs	r0, #97	; 0x61
 8000aa8:	f000 f898 	bl	8000bdc <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 8000aac:	2140      	movs	r1, #64	; 0x40
 8000aae:	2007      	movs	r0, #7
 8000ab0:	f000 f866 	bl	8000b80 <NRF24_WriteReg>
		rx_flag = 1;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <IRQ_Callback+0x70>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
	}
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	2000003f 	.word	0x2000003f
 8000acc:	20000034 	.word	0x20000034
 8000ad0:	2000003e 	.word	0x2000003e

08000ad4 <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <DelayMicro+0x3c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <DelayMicro+0x3c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <DelayMicro+0x40>)
 8000ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aec:	0ddb      	lsrs	r3, r3, #23
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	fb02 f303 	mul.w	r3, r2, r3
 8000af4:	607b      	str	r3, [r7, #4]
	while (micros--);
 8000af6:	bf00      	nop
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	1e5a      	subs	r2, r3, #1
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1fa      	bne.n	8000af8 <DelayMicro+0x24>
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008
 8000b14:	ffa71ee7 	.word	0xffa71ee7

08000b18 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 8000b22:	2300      	movs	r3, #0
 8000b24:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 8000b26:	2200      	movs	r2, #0
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4813      	ldr	r0, [pc, #76]	; (8000b78 <NRF24_ReadReg+0x60>)
 8000b2c:	f001 fcad 	bl	800248a <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8000b30:	f107 020f 	add.w	r2, r7, #15
 8000b34:	1df9      	adds	r1, r7, #7
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	480f      	ldr	r0, [pc, #60]	; (8000b7c <NRF24_ReadReg+0x64>)
 8000b40:	f003 f831 	bl	8003ba6 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2b07      	cmp	r3, #7
 8000b48:	d00c      	beq.n	8000b64 <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 8000b4a:	23ff      	movs	r3, #255	; 0xff
 8000b4c:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8000b4e:	f107 020f 	add.w	r2, r7, #15
 8000b52:	f107 010e 	add.w	r1, r7, #14
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <NRF24_ReadReg+0x64>)
 8000b60:	f003 f821 	bl	8003ba6 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 8000b64:	2201      	movs	r2, #1
 8000b66:	2110      	movs	r1, #16
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <NRF24_ReadReg+0x60>)
 8000b6a:	f001 fc8e 	bl	800248a <HAL_GPIO_WritePin>
  return dt;
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	200005b0 	.word	0x200005b0

08000b80 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f043 0320 	orr.w	r3, r3, #32
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2110      	movs	r1, #16
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <NRF24_WriteReg+0x54>)
 8000ba0:	f001 fc73 	bl	800248a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000ba4:	1df9      	adds	r1, r7, #7
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	2201      	movs	r2, #1
 8000bac:	480a      	ldr	r0, [pc, #40]	; (8000bd8 <NRF24_WriteReg+0x58>)
 8000bae:	f002 fdad 	bl	800370c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 8000bb2:	1db9      	adds	r1, r7, #6
 8000bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <NRF24_WriteReg+0x58>)
 8000bbc:	f002 fda6 	bl	800370c <HAL_SPI_Transmit>
  CS_OFF;
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <NRF24_WriteReg+0x54>)
 8000bc6:	f001 fc60 	bl	800248a <HAL_GPIO_WritePin>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	200005b0 	.word	0x200005b0

08000bdc <NRF24_Read_Buf>:
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
  CS_OFF;
}
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000bec:	2200      	movs	r2, #0
 8000bee:	2110      	movs	r1, #16
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <NRF24_Read_Buf+0x4c>)
 8000bf2:	f001 fc4a 	bl	800248a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000bf6:	1df9      	adds	r1, r7, #7
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	480b      	ldr	r0, [pc, #44]	; (8000c2c <NRF24_Read_Buf+0x50>)
 8000c00:	f002 fd84 	bl	800370c <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0c:	6839      	ldr	r1, [r7, #0]
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <NRF24_Read_Buf+0x50>)
 8000c10:	f002 feb8 	bl	8003984 <HAL_SPI_Receive>
  CS_OFF;
 8000c14:	2201      	movs	r2, #1
 8000c16:	2110      	movs	r1, #16
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <NRF24_Read_Buf+0x4c>)
 8000c1a:	f001 fc36 	bl	800248a <HAL_GPIO_WritePin>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40010800 	.word	0x40010800
 8000c2c:	200005b0 	.word	0x200005b0

08000c30 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af04      	add	r7, sp, #16
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	9302      	str	r3, [sp, #8]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2178      	movs	r1, #120	; 0x78
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <ssd1306_WriteCommand+0x2c>)
 8000c4e:	f001 fda9 	bl	80027a4 <HAL_I2C_Mem_Write>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200004d0 	.word	0x200004d0

08000c60 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000c64:	2064      	movs	r0, #100	; 0x64
 8000c66:	f000 ffd7 	bl	8001c18 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8000c6a:	20ae      	movs	r0, #174	; 0xae
 8000c6c:	f7ff ffe0 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c70:	2020      	movs	r0, #32
 8000c72:	f7ff ffdd 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c76:	2010      	movs	r0, #16
 8000c78:	f7ff ffda 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c7c:	20b0      	movs	r0, #176	; 0xb0
 8000c7e:	f7ff ffd7 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000c82:	20c8      	movs	r0, #200	; 0xc8
 8000c84:	f7ff ffd4 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff ffd1 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8000c8e:	2010      	movs	r0, #16
 8000c90:	f7ff ffce 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000c94:	2040      	movs	r0, #64	; 0x40
 8000c96:	f7ff ffcb 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8000c9a:	2081      	movs	r0, #129	; 0x81
 8000c9c:	f7ff ffc8 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8000ca0:	20ff      	movs	r0, #255	; 0xff
 8000ca2:	f7ff ffc5 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8000ca6:	20a1      	movs	r0, #161	; 0xa1
 8000ca8:	f7ff ffc2 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8000cac:	20a6      	movs	r0, #166	; 0xa6
 8000cae:	f7ff ffbf 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000cb2:	20a8      	movs	r0, #168	; 0xa8
 8000cb4:	f7ff ffbc 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8000cb8:	203f      	movs	r0, #63	; 0x3f
 8000cba:	f7ff ffb9 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000cbe:	20a4      	movs	r0, #164	; 0xa4
 8000cc0:	f7ff ffb6 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000cc4:	20d3      	movs	r0, #211	; 0xd3
 8000cc6:	f7ff ffb3 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff ffb0 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000cd0:	20d5      	movs	r0, #213	; 0xd5
 8000cd2:	f7ff ffad 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000cd6:	20f0      	movs	r0, #240	; 0xf0
 8000cd8:	f7ff ffaa 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000cdc:	20d9      	movs	r0, #217	; 0xd9
 8000cde:	f7ff ffa7 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000ce2:	2022      	movs	r0, #34	; 0x22
 8000ce4:	f7ff ffa4 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000ce8:	20da      	movs	r0, #218	; 0xda
 8000cea:	f7ff ffa1 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000cee:	2012      	movs	r0, #18
 8000cf0:	f7ff ff9e 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000cf4:	20db      	movs	r0, #219	; 0xdb
 8000cf6:	f7ff ff9b 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000cfa:	2020      	movs	r0, #32
 8000cfc:	f7ff ff98 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000d00:	208d      	movs	r0, #141	; 0x8d
 8000d02:	f7ff ff95 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000d06:	2014      	movs	r0, #20
 8000d08:	f7ff ff92 	bl	8000c30 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000d0c:	20af      	movs	r0, #175	; 0xaf
 8000d0e:	f7ff ff8f 	bl	8000c30 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f810 	bl	8000d38 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000d18:	f000 f830 	bl	8000d7c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <ssd1306_Init+0xd4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <ssd1306_Init+0xd4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <ssd1306_Init+0xd4>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	715a      	strb	r2, [r3, #5]

	return 1;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000440 	.word	0x20000440

08000d38 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	e00d      	b.n	8000d64 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <ssd1306_Fill+0x1a>
 8000d4e:	2100      	movs	r1, #0
 8000d50:	e000      	b.n	8000d54 <ssd1306_Fill+0x1c>
 8000d52:	21ff      	movs	r1, #255	; 0xff
 8000d54:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <ssd1306_Fill+0x40>)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	460a      	mov	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3301      	adds	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d6a:	d3ed      	bcc.n	8000d48 <ssd1306_Fill+0x10>
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000040 	.word	0x20000040

08000d7c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	71fb      	strb	r3, [r7, #7]
 8000d86:	e01d      	b.n	8000dc4 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	3b50      	subs	r3, #80	; 0x50
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff4e 	bl	8000c30 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff ff4b 	bl	8000c30 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000d9a:	2010      	movs	r0, #16
 8000d9c:	f7ff ff48 	bl	8000c30 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	01db      	lsls	r3, r3, #7
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <ssd1306_UpdateScreen+0x58>)
 8000da6:	4413      	add	r3, r2
 8000da8:	2264      	movs	r2, #100	; 0x64
 8000daa:	9202      	str	r2, [sp, #8]
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	9201      	str	r2, [sp, #4]
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2301      	movs	r3, #1
 8000db4:	2240      	movs	r2, #64	; 0x40
 8000db6:	2178      	movs	r1, #120	; 0x78
 8000db8:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <ssd1306_UpdateScreen+0x5c>)
 8000dba:	f001 fcf3 	bl	80027a4 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b07      	cmp	r3, #7
 8000dc8:	d9de      	bls.n	8000d88 <ssd1306_UpdateScreen+0xc>
	}
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000040 	.word	0x20000040
 8000dd8:	200004d0 	.word	0x200004d0

08000ddc <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <DelayMicro+0x3c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <DelayMicro+0x3c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <DelayMicro+0x40>)
 8000df0:	fba2 2303 	umull	r2, r3, r2, r3
 8000df4:	0ddb      	lsrs	r3, r3, #23
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	fb02 f303 	mul.w	r3, r2, r3
 8000dfc:	607b      	str	r3, [r7, #4]
	while (micros--);
 8000dfe:	bf00      	nop
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1fa      	bne.n	8000e00 <DelayMicro+0x24>
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	ffa71ee7 	.word	0xffa71ee7

08000e20 <init_am2302>:
//----------------------------------------------------------------------------------------
void init_am2302(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = GPIO_PIN_12;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
	HAL_Delay(2000); 							// First init must be 2 seconds delay
 8000e24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e28:	f000 fef6 	bl	8001c18 <HAL_Delay>
//	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
//	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
//	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
//	HAL_Delay(2000); 							// First init must be 2 seconds delay
//	am2302_measure(); 							// For fill in i2c_device.AM2302_ready_status
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <am2302_measure>:
//----------------------------------------------------------------------------------------
void am2302_measure(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 * __                ________________________
 * 	 \			    /				         \
 * 	  \____________/			              \_
 */

	bool get_data_status = false;
 8000e36:	2300      	movs	r3, #0
 8000e38:	76fb      	strb	r3, [r7, #27]
	int j = 0;   							// Counter bytes
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;								// Counter bits
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
	float temper, hum;						// Buffer variables

	// Init GPIO like output
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8000e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4a:	4884      	ldr	r0, [pc, #528]	; (800105c <am2302_measure+0x22c>)
 8000e4c:	f001 fa4a 	bl	80022e4 <HAL_GPIO_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};		// Make struct
 8000e50:	463b      	mov	r3, r7
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000e66:	2302      	movs	r3, #2
 8000e68:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	487b      	ldr	r0, [pc, #492]	; (800105c <am2302_measure+0x22c>)
 8000e70:	f001 f8b4 	bl	8001fdc <HAL_GPIO_Init>

	// Make output pin C1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e7a:	4878      	ldr	r0, [pc, #480]	; (800105c <am2302_measure+0x22c>)
 8000e7c:	f001 fb05 	bl	800248a <HAL_GPIO_WritePin>
	DelayMicro(18000);
 8000e80:	f244 6050 	movw	r0, #18000	; 0x4650
 8000e84:	f7ff ffaa 	bl	8000ddc <DelayMicro>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e8e:	4873      	ldr	r0, [pc, #460]	; (800105c <am2302_measure+0x22c>)
 8000e90:	f001 fafb 	bl	800248a <HAL_GPIO_WritePin>
	DelayMicro(39);
 8000e94:	2027      	movs	r0, #39	; 0x27
 8000e96:	f7ff ffa1 	bl	8000ddc <DelayMicro>

	// Make input pin C1
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8000e9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e9e:	486f      	ldr	r0, [pc, #444]	; (800105c <am2302_measure+0x22c>)
 8000ea0:	f001 fa20 	bl	80022e4 <HAL_GPIO_DeInit>
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4869      	ldr	r0, [pc, #420]	; (800105c <am2302_measure+0x22c>)
 8000eb8:	f001 f890 	bl	8001fdc <HAL_GPIO_Init>

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
 8000ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec0:	4866      	ldr	r0, [pc, #408]	; (800105c <am2302_measure+0x22c>)
 8000ec2:	f001 facb 	bl	800245c <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d004      	beq.n	8000ed6 <am2302_measure+0xa6>
	{
		am3202_sensor.status = error_state; 					// Error. Sensor not response
 8000ecc:	4b64      	ldr	r3, [pc, #400]	; (8001060 <am2302_measure+0x230>)
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	4b64      	ldr	r3, [pc, #400]	; (8001064 <am2302_measure+0x234>)
 8000ed2:	709a      	strb	r2, [r3, #2]
 8000ed4:	e003      	b.n	8000ede <am2302_measure+0xae>
	}
	else
	{
		am3202_sensor.status = ready_to_work;
 8000ed6:	4b64      	ldr	r3, [pc, #400]	; (8001068 <am2302_measure+0x238>)
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	4b62      	ldr	r3, [pc, #392]	; (8001064 <am2302_measure+0x234>)
 8000edc:	709a      	strb	r2, [r3, #2]
	}

	DelayMicro(80);
 8000ede:	2050      	movs	r0, #80	; 0x50
 8000ee0:	f7ff ff7c 	bl	8000ddc <DelayMicro>
	if(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)))
 8000ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee8:	485c      	ldr	r0, [pc, #368]	; (800105c <am2302_measure+0x22c>)
 8000eea:	f001 fab7 	bl	800245c <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d104      	bne.n	8000efe <am2302_measure+0xce>
	{
		am3202_sensor.status = error_state; 					// Error. Sensor not response
 8000ef4:	4b5a      	ldr	r3, [pc, #360]	; (8001060 <am2302_measure+0x230>)
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	4b5a      	ldr	r3, [pc, #360]	; (8001064 <am2302_measure+0x234>)
 8000efa:	709a      	strb	r2, [r3, #2]
 8000efc:	e003      	b.n	8000f06 <am2302_measure+0xd6>
	}
	else
	{
		am3202_sensor.status = ready_to_work;
 8000efe:	4b5a      	ldr	r3, [pc, #360]	; (8001068 <am2302_measure+0x238>)
 8000f00:	781a      	ldrb	r2, [r3, #0]
 8000f02:	4b58      	ldr	r3, [pc, #352]	; (8001064 <am2302_measure+0x234>)
 8000f04:	709a      	strb	r2, [r3, #2]
	}

	DelayMicro(80);
 8000f06:	2050      	movs	r0, #80	; 0x50
 8000f08:	f7ff ff68 	bl	8000ddc <DelayMicro>

	if(am3202_sensor.status == ready_to_work)
 8000f0c:	4b55      	ldr	r3, [pc, #340]	; (8001064 <am2302_measure+0x234>)
 8000f0e:	789a      	ldrb	r2, [r3, #2]
 8000f10:	4b55      	ldr	r3, [pc, #340]	; (8001068 <am2302_measure+0x238>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 8098 	bne.w	800104a <am2302_measure+0x21a>
	{
		for(j = 0; j <5; j++)							// Reading 5 bytes
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1e:	e04f      	b.n	8000fc0 <am2302_measure+0x190>
		{
			data[4-j] = 0;
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	f1c3 0304 	rsb	r3, r3, #4
 8000f26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f2a:	4413      	add	r3, r2
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(i = 0; i < 8; i++)						// Reading 8 bits
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
 8000f36:	e03a      	b.n	8000fae <am2302_measure+0x17e>
			{

				while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)));    // While signal is "0"
 8000f38:	bf00      	nop
 8000f3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f3e:	4847      	ldr	r0, [pc, #284]	; (800105c <am2302_measure+0x22c>)
 8000f40:	f001 fa8c 	bl	800245c <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f7      	beq.n	8000f3a <am2302_measure+0x10a>
				DelayMicro(30);
 8000f4a:	201e      	movs	r0, #30
 8000f4c:	f7ff ff46 	bl	8000ddc <DelayMicro>

				if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))   // If signal is high when wrute "1" in buffer (data[])
 8000f50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f54:	4841      	ldr	r0, [pc, #260]	; (800105c <am2302_measure+0x22c>)
 8000f56:	f001 fa81 	bl	800245c <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d01a      	beq.n	8000f96 <am2302_measure+0x166>
				{
					data[4-j] |= (1 << (7 - i));        // Shift received bite
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	f1c3 0304 	rsb	r3, r3, #4
 8000f66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f6a:	4413      	add	r3, r2
 8000f6c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f70:	b25a      	sxtb	r2, r3
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	f1c3 0307 	rsb	r3, r3, #7
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	f1c3 0304 	rsb	r3, r3, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f90:	440b      	add	r3, r1
 8000f92:	f803 2c18 	strb.w	r2, [r3, #-24]
				}

				while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12));		// Wait end of "1" signal
 8000f96:	bf00      	nop
 8000f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9c:	482f      	ldr	r0, [pc, #188]	; (800105c <am2302_measure+0x22c>)
 8000f9e:	f001 fa5d 	bl	800245c <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f7      	bne.n	8000f98 <am2302_measure+0x168>
			for(i = 0; i < 8; i++)						// Reading 8 bits
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	3301      	adds	r3, #1
 8000fac:	623b      	str	r3, [r7, #32]
 8000fae:	6a3b      	ldr	r3, [r7, #32]
 8000fb0:	2b07      	cmp	r3, #7
 8000fb2:	ddc1      	ble.n	8000f38 <am2302_measure+0x108>
			}
			am3202_sensor.status = true;										// Data was been written okay
 8000fb4:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <am2302_measure+0x234>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	709a      	strb	r2, [r3, #2]
		for(j = 0; j <5; j++)							// Reading 5 bytes
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	ddac      	ble.n	8000f20 <am2302_measure+0xf0>
		}

		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	3301      	adds	r3, #1
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fb80 	bl	80006d8 <__aeabi_i2f>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4924      	ldr	r1, [pc, #144]	; (800106c <am2302_measure+0x23c>)
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fc83 	bl	80008e8 <__aeabi_fdiv>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	61fb      	str	r3, [r7, #28]
		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	3301      	adds	r3, #1
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da0c      	bge.n	800100e <am2302_measure+0x1de>
 8000ff4:	69f8      	ldr	r0, [r7, #28]
 8000ff6:	f7ff fa0d 	bl	8000414 <__aeabi_f2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fa5f 	bl	80004c4 <__aeabi_d2f>
 8001006:	4603      	mov	r3, r0
 8001008:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800100c:	61fb      	str	r3, [r7, #28]
		am3202_sensor.temterature = temper;
 800100e:	69f8      	ldr	r0, [r7, #28]
 8001010:	f7ff fd06 	bl	8000a20 <__aeabi_f2uiz>
 8001014:	4603      	mov	r3, r0
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <am2302_measure+0x234>)
 800101a:	701a      	strb	r2, [r3, #0]

		hum = (float)(*(int16_t*)(data+3)) / 10;
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	3303      	adds	r3, #3
 8001022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fb56 	bl	80006d8 <__aeabi_i2f>
 800102c:	4603      	mov	r3, r0
 800102e:	490f      	ldr	r1, [pc, #60]	; (800106c <am2302_measure+0x23c>)
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fc59 	bl	80008e8 <__aeabi_fdiv>
 8001036:	4603      	mov	r3, r0
 8001038:	617b      	str	r3, [r7, #20]
		am3202_sensor.humidity = hum;
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff fcf0 	bl	8000a20 <__aeabi_f2uiz>
 8001040:	4603      	mov	r3, r0
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <am2302_measure+0x234>)
 8001046:	705a      	strb	r2, [r3, #1]
	{
		am3202_sensor.status = error_state;
		// PRINT MESSAGE ON OLLED <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}

}
 8001048:	e003      	b.n	8001052 <am2302_measure+0x222>
		am3202_sensor.status = error_state;
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <am2302_measure+0x230>)
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <am2302_measure+0x234>)
 8001050:	709a      	strb	r2, [r3, #2]
}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40010c00 	.word	0x40010c00
 8001060:	20000446 	.word	0x20000446
 8001064:	20000488 	.word	0x20000488
 8001068:	20000001 	.word	0x20000001
 800106c:	41200000 	.word	0x41200000

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001074:	f000 fd6e 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001078:	f000 f82c 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107c:	f000 f978 	bl	8001370 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001080:	f000 f86e 	bl	8001160 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001084:	f000 f89a 	bl	80011bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001088:	f000 f91e 	bl	80012c8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800108c:	f000 f8cc 	bl	8001228 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001090:	f000 f944 	bl	800131c <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <main+0x60>)
 800109c:	f001 f9f5 	bl	800248a <HAL_GPIO_WritePin>

  // Init interrupt (For LoRa)
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	2025      	movs	r0, #37	; 0x25
 80010a6:	f000 feb2 	bl	8001e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010aa:	2025      	movs	r0, #37	; 0x25
 80010ac:	f000 fecb 	bl	8001e46 <HAL_NVIC_EnableIRQ>

  // OLED init
  ssd1306_Init();
 80010b0:	f7ff fdd6 	bl	8000c60 <ssd1306_Init>
  ssd1306_Fill(Black);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff fe3f 	bl	8000d38 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80010ba:	f7ff fe5f 	bl	8000d7c <ssd1306_UpdateScreen>

  while (1)
  {
	//menu();
	  init_am2302();
 80010be:	f7ff feaf 	bl	8000e20 <init_am2302>
	  while(1)
	  {
		  am2302_measure();
 80010c2:	f7ff feb5 	bl	8000e30 <am2302_measure>
		  HAL_Delay(2000);
 80010c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ca:	f000 fda5 	bl	8001c18 <HAL_Delay>
	  {
 80010ce:	e7f8      	b.n	80010c2 <main+0x52>
 80010d0:	40011000 	.word	0x40011000

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b090      	sub	sp, #64	; 0x40
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	2228      	movs	r2, #40	; 0x28
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 f8ac 	bl	8005240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001108:	2302      	movs	r3, #2
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001112:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fe57 	bl	8002dd0 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001128:	f000 fa4a 	bl	80015c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2102      	movs	r1, #2
 8001146:	4618      	mov	r0, r3
 8001148:	f002 f8c2 	bl	80032d0 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001152:	f000 fa35 	bl	80015c0 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3740      	adds	r7, #64	; 0x40
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <MX_I2C1_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C1_Init+0x50>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_I2C1_Init+0x50>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_I2C1_Init+0x50>)
 800119e:	f001 f9bd 	bl	800251c <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a8:	f000 fa0a 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200004d0 	.word	0x200004d0
 80011b4:	40005400 	.word	0x40005400
 80011b8:	00061a80 	.word	0x00061a80

080011bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_SPI1_Init+0x64>)
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <MX_SPI1_Init+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_SPI1_Init+0x64>)
 80011c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_SPI1_Init+0x64>)
 80011e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_SPI1_Init+0x64>)
 80011f0:	2220      	movs	r2, #32
 80011f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <MX_SPI1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_SPI1_Init+0x64>)
 8001208:	220a      	movs	r2, #10
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_SPI1_Init+0x64>)
 800120e:	f002 f9f9 	bl	8003604 <HAL_SPI_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001218:	f000 f9d2 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200005b0 	.word	0x200005b0
 8001224:	40013000 	.word	0x40013000

08001228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_TIM1_Init+0x98>)
 8001246:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <MX_TIM1_Init+0x9c>)
 8001248:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_TIM1_Init+0x98>)
 800124c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001250:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_TIM1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_TIM1_Init+0x98>)
 800125a:	2264      	movs	r2, #100	; 0x64
 800125c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_TIM1_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_TIM1_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_TIM1_Init+0x98>)
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001270:	4813      	ldr	r0, [pc, #76]	; (80012c0 <MX_TIM1_Init+0x98>)
 8001272:	f002 ff33 	bl	80040dc <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800127c:	f000 f9a0 	bl	80015c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MX_TIM1_Init+0x98>)
 800128e:	f003 f8fd 	bl	800448c <HAL_TIM_ConfigClockSource>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001298:	f000 f992 	bl	80015c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800129c:	2310      	movs	r3, #16
 800129e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_TIM1_Init+0x98>)
 80012aa:	f003 fad9 	bl	8004860 <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012b4:	f000 f984 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000568 	.word	0x20000568
 80012c4:	40012c00 	.word	0x40012c00

080012c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_USART1_UART_Init+0x4c>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <MX_USART1_UART_Init+0x50>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <MX_USART1_UART_Init+0x4c>)
 80012d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_USART1_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_USART1_UART_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_USART1_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_USART1_UART_Init+0x4c>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_USART1_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_USART1_UART_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_USART1_UART_Init+0x4c>)
 8001300:	f003 fb1e 	bl	8004940 <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800130a:	f000 f959 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000524 	.word	0x20000524
 8001318:	40013800 	.word	0x40013800

0800131c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_USART3_UART_Init+0x4c>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <MX_USART3_UART_Init+0x50>)
 8001324:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_USART3_UART_Init+0x4c>)
 8001328:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800132c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_USART3_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_USART3_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_USART3_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_USART3_UART_Init+0x4c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_USART3_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_USART3_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USART3_UART_Init+0x4c>)
 8001354:	f003 faf4 	bl	8004940 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800135e:	f000 f92f 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2000048c 	.word	0x2000048c
 800136c:	40004800 	.word	0x40004800

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001384:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <MX_GPIO_Init+0x194>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a5e      	ldr	r2, [pc, #376]	; (8001504 <MX_GPIO_Init+0x194>)
 800138a:	f043 0310 	orr.w	r3, r3, #16
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <MX_GPIO_Init+0x194>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139c:	4b59      	ldr	r3, [pc, #356]	; (8001504 <MX_GPIO_Init+0x194>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a58      	ldr	r2, [pc, #352]	; (8001504 <MX_GPIO_Init+0x194>)
 80013a2:	f043 0320 	orr.w	r3, r3, #32
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b56      	ldr	r3, [pc, #344]	; (8001504 <MX_GPIO_Init+0x194>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <MX_GPIO_Init+0x194>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a52      	ldr	r2, [pc, #328]	; (8001504 <MX_GPIO_Init+0x194>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b50      	ldr	r3, [pc, #320]	; (8001504 <MX_GPIO_Init+0x194>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013cc:	4b4d      	ldr	r3, [pc, #308]	; (8001504 <MX_GPIO_Init+0x194>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <MX_GPIO_Init+0x194>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <MX_GPIO_Init+0x194>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	4847      	ldr	r0, [pc, #284]	; (8001508 <MX_GPIO_Init+0x198>)
 80013ec:	f001 f84d 	bl	800248a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2108      	movs	r1, #8
 80013f4:	4845      	ldr	r0, [pc, #276]	; (800150c <MX_GPIO_Init+0x19c>)
 80013f6:	f001 f848 	bl	800248a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2110      	movs	r1, #16
 80013fe:	4843      	ldr	r0, [pc, #268]	; (800150c <MX_GPIO_Init+0x19c>)
 8001400:	f001 f843 	bl	800248a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f242 0101 	movw	r1, #8193	; 0x2001
 800140a:	4841      	ldr	r0, [pc, #260]	; (8001510 <MX_GPIO_Init+0x1a0>)
 800140c:	f001 f83d 	bl	800248a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2302      	movs	r3, #2
 8001420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	4619      	mov	r1, r3
 8001428:	4837      	ldr	r0, [pc, #220]	; (8001508 <MX_GPIO_Init+0x198>)
 800142a:	f000 fdd7 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800142e:	2304      	movs	r3, #4
 8001430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001432:	4b38      	ldr	r3, [pc, #224]	; (8001514 <MX_GPIO_Init+0x1a4>)
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	4619      	mov	r1, r3
 8001440:	4832      	ldr	r0, [pc, #200]	; (800150c <MX_GPIO_Init+0x19c>)
 8001442:	f000 fdcb 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001446:	2318      	movs	r3, #24
 8001448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	4619      	mov	r1, r3
 800145c:	482b      	ldr	r0, [pc, #172]	; (800150c <MX_GPIO_Init+0x19c>)
 800145e:	f000 fdbd 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8001462:	f242 0301 	movw	r3, #8193	; 0x2001
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2302      	movs	r3, #2
 8001472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	4825      	ldr	r0, [pc, #148]	; (8001510 <MX_GPIO_Init+0x1a0>)
 800147c:	f000 fdae 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8001480:	2302      	movs	r3, #2
 8001482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	4619      	mov	r1, r3
 8001492:	481f      	ldr	r0, [pc, #124]	; (8001510 <MX_GPIO_Init+0x1a0>)
 8001494:	f000 fda2 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001498:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800149c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <MX_GPIO_Init+0x1a4>)
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4619      	mov	r1, r3
 80014ac:	4818      	ldr	r0, [pc, #96]	; (8001510 <MX_GPIO_Init+0x1a0>)
 80014ae:	f000 fd95 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_GPIO_Init+0x1a4>)
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	4811      	ldr	r0, [pc, #68]	; (800150c <MX_GPIO_Init+0x19c>)
 80014c8:	f000 fd88 	bl	8001fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	2008      	movs	r0, #8
 80014d2:	f000 fc9c 	bl	8001e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80014d6:	2008      	movs	r0, #8
 80014d8:	f000 fcb5 	bl	8001e46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	2017      	movs	r0, #23
 80014e2:	f000 fc94 	bl	8001e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014e6:	2017      	movs	r0, #23
 80014e8:	f000 fcad 	bl	8001e46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2028      	movs	r0, #40	; 0x28
 80014f2:	f000 fc8c 	bl	8001e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014f6:	2028      	movs	r0, #40	; 0x28
 80014f8:	f000 fca5 	bl	8001e46 <HAL_NVIC_EnableIRQ>

}
 80014fc:	bf00      	nop
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	40011000 	.word	0x40011000
 800150c:	40010800 	.word	0x40010800
 8001510:	40010c00 	.word	0x40010c00
 8001514:	10210000 	.word	0x10210000

08001518 <HAL_GPIO_EXTI_Callback>:
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);

}
//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2   (IRQ from NRF module)
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	2b04      	cmp	r3, #4
 8001526:	d108      	bne.n	800153a <HAL_GPIO_EXTI_Callback+0x22>
  {
	  if(tx_or_rx_mode == rx_mode)
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_GPIO_EXTI_Callback+0x2c>)
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_GPIO_EXTI_Callback+0x30>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d103      	bne.n	800153c <HAL_GPIO_EXTI_Callback+0x24>
	  {
		  IRQ_Callback();					// Call Callback
 8001534:	f7ff fa94 	bl	8000a60 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8001538:	e000      	b.n	800153c <HAL_GPIO_EXTI_Callback+0x24>
    __NOP();
 800153a:	bf00      	nop
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000000 	.word	0x20000000
 8001548:	20000030 	.word	0x20000030

0800154c <HAL_UART_RxCpltCallback>:
//----------------------------------------------------------------------------------------
// Receive data from LoRa module
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <HAL_UART_RxCpltCallback+0x60>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d123      	bne.n	80015a4 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_UART_RxCpltCallback+0x64>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_UART_RxCpltCallback+0x20>
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_UART_RxCpltCallback+0x68>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b31      	cmp	r3, #49	; 0x31
 800156a:	d906      	bls.n	800157a <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_UART_RxCpltCallback+0x6c>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <HAL_UART_RxCpltCallback+0x68>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8001578:	e014      	b.n	80015a4 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_UART_RxCpltCallback+0x6c>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_UART_RxCpltCallback+0x68>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_UART_RxCpltCallback+0x64>)
 8001588:	7819      	ldrb	r1, [r3, #0]
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_UART_RxCpltCallback+0x70>)
 800158c:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 800158e:	2201      	movs	r2, #1
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <HAL_UART_RxCpltCallback+0x64>)
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_UART_RxCpltCallback+0x60>)
 8001594:	f003 fa21 	bl	80049da <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_UART_RxCpltCallback+0x68>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <HAL_UART_RxCpltCallback+0x68>)
 80015a2:	701a      	strb	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000524 	.word	0x20000524
 80015b0:	2000047c 	.word	0x2000047c
 80015b4:	2000047e 	.word	0x2000047e
 80015b8:	2000047d 	.word	0x2000047d
 80015bc:	20000448 	.word	0x20000448

080015c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c4:	b672      	cpsid	i
}
 80015c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <Error_Handler+0x8>
	...

080015cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_MspInit+0x5c>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	4a14      	ldr	r2, [pc, #80]	; (8001628 <HAL_MspInit+0x5c>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6193      	str	r3, [r2, #24]
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_MspInit+0x5c>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_MspInit+0x5c>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_MspInit+0x5c>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_MspInit+0x5c>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_MspInit+0x60>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <HAL_MspInit+0x60>)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40021000 	.word	0x40021000
 800162c:	40010000 	.word	0x40010000

08001630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <HAL_I2C_MspInit+0x70>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d123      	bne.n	8001698 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_I2C_MspInit+0x74>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <HAL_I2C_MspInit+0x74>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_I2C_MspInit+0x74>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001668:	23c0      	movs	r3, #192	; 0xc0
 800166a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166c:	2312      	movs	r3, #18
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4619      	mov	r1, r3
 800167a:	480b      	ldr	r0, [pc, #44]	; (80016a8 <HAL_I2C_MspInit+0x78>)
 800167c:	f000 fcae 	bl	8001fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_I2C_MspInit+0x74>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_I2C_MspInit+0x74>)
 8001686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800168a:	61d3      	str	r3, [r2, #28]
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_I2C_MspInit+0x74>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40005400 	.word	0x40005400
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010c00 	.word	0x40010c00

080016ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_SPI_MspInit+0x88>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d12f      	bne.n	800172c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 80016d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a13      	ldr	r2, [pc, #76]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016fc:	23a0      	movs	r3, #160	; 0xa0
 80016fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4619      	mov	r1, r3
 800170e:	480b      	ldr	r0, [pc, #44]	; (800173c <HAL_SPI_MspInit+0x90>)
 8001710:	f000 fc64 	bl	8001fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001714:	2340      	movs	r3, #64	; 0x40
 8001716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_SPI_MspInit+0x90>)
 8001728:	f000 fc58 	bl	8001fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40013000 	.word	0x40013000
 8001738:	40021000 	.word	0x40021000
 800173c:	40010800 	.word	0x40010800

08001740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_TIM_Base_MspInit+0x44>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d113      	bne.n	800177a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <HAL_TIM_Base_MspInit+0x48>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <HAL_TIM_Base_MspInit+0x48>)
 8001758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800175c:	6193      	str	r3, [r2, #24]
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_TIM_Base_MspInit+0x48>)
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	2019      	movs	r0, #25
 8001770:	f000 fb4d 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001774:	2019      	movs	r0, #25
 8001776:	f000 fb66 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40012c00 	.word	0x40012c00
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0318 	add.w	r3, r7, #24
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a3c      	ldr	r2, [pc, #240]	; (8001898 <HAL_UART_MspInit+0x10c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d13a      	bne.n	8001822 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ac:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_UART_MspInit+0x110>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a3a      	ldr	r2, [pc, #232]	; (800189c <HAL_UART_MspInit+0x110>)
 80017b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_UART_MspInit+0x110>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_UART_MspInit+0x110>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a34      	ldr	r2, [pc, #208]	; (800189c <HAL_UART_MspInit+0x110>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_UART_MspInit+0x110>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0318 	add.w	r3, r7, #24
 80017ee:	4619      	mov	r1, r3
 80017f0:	482b      	ldr	r0, [pc, #172]	; (80018a0 <HAL_UART_MspInit+0x114>)
 80017f2:	f000 fbf3 	bl	8001fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	4619      	mov	r1, r3
 800180a:	4825      	ldr	r0, [pc, #148]	; (80018a0 <HAL_UART_MspInit+0x114>)
 800180c:	f000 fbe6 	bl	8001fdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2101      	movs	r1, #1
 8001814:	2025      	movs	r0, #37	; 0x25
 8001816:	f000 fafa 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800181a:	2025      	movs	r0, #37	; 0x25
 800181c:	f000 fb13 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001820:	e036      	b.n	8001890 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <HAL_UART_MspInit+0x118>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d131      	bne.n	8001890 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_UART_MspInit+0x110>)
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	4a1a      	ldr	r2, [pc, #104]	; (800189c <HAL_UART_MspInit+0x110>)
 8001832:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001836:	61d3      	str	r3, [r2, #28]
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_UART_MspInit+0x110>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_UART_MspInit+0x110>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <HAL_UART_MspInit+0x110>)
 800184a:	f043 0308 	orr.w	r3, r3, #8
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_UART_MspInit+0x110>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800185c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f107 0318 	add.w	r3, r7, #24
 800186e:	4619      	mov	r1, r3
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <HAL_UART_MspInit+0x11c>)
 8001872:	f000 fbb3 	bl	8001fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001876:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800187a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	4619      	mov	r1, r3
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <HAL_UART_MspInit+0x11c>)
 800188c:	f000 fba6 	bl	8001fdc <HAL_GPIO_Init>
}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40013800 	.word	0x40013800
 800189c:	40021000 	.word	0x40021000
 80018a0:	40010800 	.word	0x40010800
 80018a4:	40004800 	.word	0x40004800
 80018a8:	40010c00 	.word	0x40010c00

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <NMI_Handler+0x4>

080018b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <MemManage_Handler+0x4>

080018be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <BusFault_Handler+0x4>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <UsageFault_Handler+0x4>

080018ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f2:	f000 f975 	bl	8001be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}

080018fa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80018fe:	2004      	movs	r0, #4
 8001900:	f000 fdf4 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <EXTI9_5_IRQHandler+0x44>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f083 0301 	eor.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d012      	beq.n	8001940 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <EXTI9_5_IRQHandler+0x48>)
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00c      	beq.n	8001940 <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <EXTI9_5_IRQHandler+0x4c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <EXTI9_5_IRQHandler+0x50>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d105      	bne.n	8001940 <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8001934:	4809      	ldr	r0, [pc, #36]	; (800195c <EXTI9_5_IRQHandler+0x54>)
 8001936:	f002 fc21 	bl	800417c <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <EXTI9_5_IRQHandler+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001940:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001944:	f000 fdd2 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000484 	.word	0x20000484
 8001950:	40010400 	.word	0x40010400
 8001954:	20000002 	.word	0x20000002
 8001958:	20000004 	.word	0x20000004
 800195c:	20000568 	.word	0x20000568

08001960 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8001964:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <TIM1_UP_IRQHandler+0xe4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d165      	bne.n	8001a38 <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 800196c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001970:	4835      	ldr	r0, [pc, #212]	; (8001a48 <TIM1_UP_IRQHandler+0xe8>)
 8001972:	f000 fd73 	bl	800245c <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d118      	bne.n	80019ae <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 800197c:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	4a32      	ldr	r2, [pc, #200]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 8001984:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001986:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <TIM1_UP_IRQHandler+0xf0>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	dc51      	bgt.n	8001a38 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8001994:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <TIM1_UP_IRQHandler+0xe4>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800199a:	482e      	ldr	r0, [pc, #184]	; (8001a54 <TIM1_UP_IRQHandler+0xf4>)
 800199c:	f002 fc40 	bl	8004220 <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 80019a0:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <TIM1_UP_IRQHandler+0xf8>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e044      	b.n	8001a38 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 80019ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b2:	482a      	ldr	r0, [pc, #168]	; (8001a5c <TIM1_UP_IRQHandler+0xfc>)
 80019b4:	f000 fd52 	bl	800245c <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d118      	bne.n	80019f0 <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 80019c6:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80019c8:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <TIM1_UP_IRQHandler+0xf0>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	dc30      	bgt.n	8001a38 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <TIM1_UP_IRQHandler+0xe4>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80019dc:	481d      	ldr	r0, [pc, #116]	; (8001a54 <TIM1_UP_IRQHandler+0xf4>)
 80019de:	f002 fc1f 	bl	8004220 <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <TIM1_UP_IRQHandler+0xf8>)
 80019e4:	2203      	movs	r2, #3
 80019e6:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e023      	b.n	8001a38 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 80019f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f4:	4814      	ldr	r0, [pc, #80]	; (8001a48 <TIM1_UP_IRQHandler+0xe8>)
 80019f6:	f000 fd31 	bl	800245c <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d118      	bne.n	8001a32 <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 8001a08:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <TIM1_UP_IRQHandler+0xf0>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dc0f      	bgt.n	8001a38 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <TIM1_UP_IRQHandler+0xe4>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <TIM1_UP_IRQHandler+0xf8>)
 8001a20:	2202      	movs	r2, #2
 8001a22:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8001a2a:	480a      	ldr	r0, [pc, #40]	; (8001a54 <TIM1_UP_IRQHandler+0xf4>)
 8001a2c:	f002 fbf8 	bl	8004220 <HAL_TIM_Base_Stop_IT>
 8001a30:	e002      	b.n	8001a38 <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <TIM1_UP_IRQHandler+0xec>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a38:	4806      	ldr	r0, [pc, #24]	; (8001a54 <TIM1_UP_IRQHandler+0xf4>)
 8001a3a:	f002 fc1f 	bl	800427c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000004 	.word	0x20000004
 8001a48:	40010c00 	.word	0x40010c00
 8001a4c:	20000480 	.word	0x20000480
 8001a50:	20000003 	.word	0x20000003
 8001a54:	20000568 	.word	0x20000568
 8001a58:	20000485 	.word	0x20000485
 8001a5c:	40010800 	.word	0x40010800

08001a60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <USART1_IRQHandler+0x10>)
 8001a66:	f002 ffe9 	bl	8004a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000524 	.word	0x20000524

08001a74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <EXTI15_10_IRQHandler+0x74>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	f083 0301 	eor.w	r3, r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d012      	beq.n	8001aac <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <EXTI15_10_IRQHandler+0x78>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00c      	beq.n	8001aac <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <EXTI15_10_IRQHandler+0x7c>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <EXTI15_10_IRQHandler+0x80>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d105      	bne.n	8001aac <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001aa0:	4815      	ldr	r0, [pc, #84]	; (8001af8 <EXTI15_10_IRQHandler+0x84>)
 8001aa2:	f002 fb6b 	bl	800417c <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 8001aa6:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <EXTI15_10_IRQHandler+0x80>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <EXTI15_10_IRQHandler+0x78>)
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00c      	beq.n	8001ad2 <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <EXTI15_10_IRQHandler+0x7c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <EXTI15_10_IRQHandler+0x80>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d105      	bne.n	8001ad2 <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001ac6:	480c      	ldr	r0, [pc, #48]	; (8001af8 <EXTI15_10_IRQHandler+0x84>)
 8001ac8:	f002 fb58 	bl	800417c <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <EXTI15_10_IRQHandler+0x80>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001ad2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ad6:	f000 fd09 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001ada:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ade:	f000 fd05 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000484 	.word	0x20000484
 8001aec:	40010400 	.word	0x40010400
 8001af0:	20000002 	.word	0x20000002
 8001af4:	20000004 	.word	0x20000004
 8001af8:	20000568 	.word	0x20000568

08001afc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b0a:	490d      	ldr	r1, [pc, #52]	; (8001b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b20:	4c0a      	ldr	r4, [pc, #40]	; (8001b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b2e:	f7ff ffe5 	bl	8001afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b32:	f003 fb61 	bl	80051f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b36:	f7ff fa9b 	bl	8001070 <main>
  bx lr
 8001b3a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b44:	08005298 	.word	0x08005298
  ldr r2, =_sbss
 8001b48:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b4c:	2000060c 	.word	0x2000060c

08001b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC1_2_IRQHandler>
	...

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_Init+0x28>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_Init+0x28>)
 8001b5e:	f043 0310 	orr.w	r3, r3, #16
 8001b62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f000 f947 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f000 f808 	bl	8001b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b70:	f7ff fd2c 	bl	80015cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40022000 	.word	0x40022000

08001b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_InitTick+0x54>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x58>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f95f 	bl	8001e62 <HAL_SYSTICK_Config>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00e      	b.n	8001bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b0f      	cmp	r3, #15
 8001bb2:	d80a      	bhi.n	8001bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bbc:	f000 f927 	bl	8001e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc0:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <HAL_InitTick+0x5c>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	20000010 	.word	0x20000010
 8001bdc:	2000000c 	.word	0x2000000c

08001be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_IncTick+0x1c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_IncTick+0x20>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a03      	ldr	r2, [pc, #12]	; (8001c00 <HAL_IncTick+0x20>)
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	20000010 	.word	0x20000010
 8001c00:	20000608 	.word	0x20000608

08001c04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return uwTick;
 8001c08:	4b02      	ldr	r3, [pc, #8]	; (8001c14 <HAL_GetTick+0x10>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	20000608 	.word	0x20000608

08001c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff fff0 	bl	8001c04 <HAL_GetTick>
 8001c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c30:	d005      	beq.n	8001c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_Delay+0x44>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c3e:	bf00      	nop
 8001c40:	f7ff ffe0 	bl	8001c04 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d8f7      	bhi.n	8001c40 <HAL_Delay+0x28>
  {
  }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000010 	.word	0x20000010

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4906      	ldr	r1, [pc, #24]	; (8001cf8 <__NVIC_EnableIRQ+0x34>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd8:	f7ff ff90 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff2d 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff42 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff90 	bl	8001d50 <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5f 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff35 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa2 	bl	8001db4 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d008      	beq.n	8001ea2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2204      	movs	r2, #4
 8001e94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e020      	b.n	8001ee4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 020e 	bic.w	r2, r2, #14
 8001eb0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0201 	bic.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	2101      	movs	r1, #1
 8001ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
	...

08001ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d005      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2204      	movs	r2, #4
 8001f0a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	e051      	b.n	8001fb6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 020e 	bic.w	r2, r2, #14
 8001f20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_DMA_Abort_IT+0xd0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d029      	beq.n	8001f90 <HAL_DMA_Abort_IT+0xa0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a20      	ldr	r2, [pc, #128]	; (8001fc4 <HAL_DMA_Abort_IT+0xd4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d022      	beq.n	8001f8c <HAL_DMA_Abort_IT+0x9c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_DMA_Abort_IT+0xd8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d01a      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x96>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_DMA_Abort_IT+0xdc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d012      	beq.n	8001f80 <HAL_DMA_Abort_IT+0x90>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <HAL_DMA_Abort_IT+0xe0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00a      	beq.n	8001f7a <HAL_DMA_Abort_IT+0x8a>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <HAL_DMA_Abort_IT+0xe4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d102      	bne.n	8001f74 <HAL_DMA_Abort_IT+0x84>
 8001f6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f72:	e00e      	b.n	8001f92 <HAL_DMA_Abort_IT+0xa2>
 8001f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f78:	e00b      	b.n	8001f92 <HAL_DMA_Abort_IT+0xa2>
 8001f7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f7e:	e008      	b.n	8001f92 <HAL_DMA_Abort_IT+0xa2>
 8001f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f84:	e005      	b.n	8001f92 <HAL_DMA_Abort_IT+0xa2>
 8001f86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f8a:	e002      	b.n	8001f92 <HAL_DMA_Abort_IT+0xa2>
 8001f8c:	2310      	movs	r3, #16
 8001f8e:	e000      	b.n	8001f92 <HAL_DMA_Abort_IT+0xa2>
 8001f90:	2301      	movs	r3, #1
 8001f92:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <HAL_DMA_Abort_IT+0xe8>)
 8001f94:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	4798      	blx	r3
    } 
  }
  return status;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40020008 	.word	0x40020008
 8001fc4:	4002001c 	.word	0x4002001c
 8001fc8:	40020030 	.word	0x40020030
 8001fcc:	40020044 	.word	0x40020044
 8001fd0:	40020058 	.word	0x40020058
 8001fd4:	4002006c 	.word	0x4002006c
 8001fd8:	40020000 	.word	0x40020000

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b08b      	sub	sp, #44	; 0x2c
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fee:	e169      	b.n	80022c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	429a      	cmp	r2, r3
 800200a:	f040 8158 	bne.w	80022be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a9a      	ldr	r2, [pc, #616]	; (800227c <HAL_GPIO_Init+0x2a0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d05e      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002018:	4a98      	ldr	r2, [pc, #608]	; (800227c <HAL_GPIO_Init+0x2a0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d875      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 800201e:	4a98      	ldr	r2, [pc, #608]	; (8002280 <HAL_GPIO_Init+0x2a4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d058      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002024:	4a96      	ldr	r2, [pc, #600]	; (8002280 <HAL_GPIO_Init+0x2a4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d86f      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 800202a:	4a96      	ldr	r2, [pc, #600]	; (8002284 <HAL_GPIO_Init+0x2a8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d052      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002030:	4a94      	ldr	r2, [pc, #592]	; (8002284 <HAL_GPIO_Init+0x2a8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d869      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 8002036:	4a94      	ldr	r2, [pc, #592]	; (8002288 <HAL_GPIO_Init+0x2ac>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d04c      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 800203c:	4a92      	ldr	r2, [pc, #584]	; (8002288 <HAL_GPIO_Init+0x2ac>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d863      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 8002042:	4a92      	ldr	r2, [pc, #584]	; (800228c <HAL_GPIO_Init+0x2b0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d046      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002048:	4a90      	ldr	r2, [pc, #576]	; (800228c <HAL_GPIO_Init+0x2b0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d85d      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 800204e:	2b12      	cmp	r3, #18
 8002050:	d82a      	bhi.n	80020a8 <HAL_GPIO_Init+0xcc>
 8002052:	2b12      	cmp	r3, #18
 8002054:	d859      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 8002056:	a201      	add	r2, pc, #4	; (adr r2, 800205c <HAL_GPIO_Init+0x80>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	080020d7 	.word	0x080020d7
 8002060:	080020b1 	.word	0x080020b1
 8002064:	080020c3 	.word	0x080020c3
 8002068:	08002105 	.word	0x08002105
 800206c:	0800210b 	.word	0x0800210b
 8002070:	0800210b 	.word	0x0800210b
 8002074:	0800210b 	.word	0x0800210b
 8002078:	0800210b 	.word	0x0800210b
 800207c:	0800210b 	.word	0x0800210b
 8002080:	0800210b 	.word	0x0800210b
 8002084:	0800210b 	.word	0x0800210b
 8002088:	0800210b 	.word	0x0800210b
 800208c:	0800210b 	.word	0x0800210b
 8002090:	0800210b 	.word	0x0800210b
 8002094:	0800210b 	.word	0x0800210b
 8002098:	0800210b 	.word	0x0800210b
 800209c:	0800210b 	.word	0x0800210b
 80020a0:	080020b9 	.word	0x080020b9
 80020a4:	080020cd 	.word	0x080020cd
 80020a8:	4a79      	ldr	r2, [pc, #484]	; (8002290 <HAL_GPIO_Init+0x2b4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ae:	e02c      	b.n	800210a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	623b      	str	r3, [r7, #32]
          break;
 80020b6:	e029      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	3304      	adds	r3, #4
 80020be:	623b      	str	r3, [r7, #32]
          break;
 80020c0:	e024      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	3308      	adds	r3, #8
 80020c8:	623b      	str	r3, [r7, #32]
          break;
 80020ca:	e01f      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	330c      	adds	r3, #12
 80020d2:	623b      	str	r3, [r7, #32]
          break;
 80020d4:	e01a      	b.n	800210c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020de:	2304      	movs	r3, #4
 80020e0:	623b      	str	r3, [r7, #32]
          break;
 80020e2:	e013      	b.n	800210c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020ec:	2308      	movs	r3, #8
 80020ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	611a      	str	r2, [r3, #16]
          break;
 80020f6:	e009      	b.n	800210c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f8:	2308      	movs	r3, #8
 80020fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	615a      	str	r2, [r3, #20]
          break;
 8002102:	e003      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
          break;
 8002108:	e000      	b.n	800210c <HAL_GPIO_Init+0x130>
          break;
 800210a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2bff      	cmp	r3, #255	; 0xff
 8002110:	d801      	bhi.n	8002116 <HAL_GPIO_Init+0x13a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	e001      	b.n	800211a <HAL_GPIO_Init+0x13e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2bff      	cmp	r3, #255	; 0xff
 8002120:	d802      	bhi.n	8002128 <HAL_GPIO_Init+0x14c>
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x152>
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	3b08      	subs	r3, #8
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	210f      	movs	r1, #15
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	401a      	ands	r2, r3
 8002140:	6a39      	ldr	r1, [r7, #32]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	431a      	orrs	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80b1 	beq.w	80022be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800215c:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4a4c      	ldr	r2, [pc, #304]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6193      	str	r3, [r2, #24]
 8002168:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002174:	4a48      	ldr	r2, [pc, #288]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a40      	ldr	r2, [pc, #256]	; (800229c <HAL_GPIO_Init+0x2c0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <HAL_GPIO_Init+0x1ec>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3f      	ldr	r2, [pc, #252]	; (80022a0 <HAL_GPIO_Init+0x2c4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00d      	beq.n	80021c4 <HAL_GPIO_Init+0x1e8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3e      	ldr	r2, [pc, #248]	; (80022a4 <HAL_GPIO_Init+0x2c8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x1e4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3d      	ldr	r2, [pc, #244]	; (80022a8 <HAL_GPIO_Init+0x2cc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_GPIO_Init+0x1e0>
 80021b8:	2303      	movs	r3, #3
 80021ba:	e006      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021bc:	2304      	movs	r3, #4
 80021be:	e004      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e002      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c8:	2300      	movs	r3, #0
 80021ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021cc:	f002 0203 	and.w	r2, r2, #3
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	4093      	lsls	r3, r2
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021da:	492f      	ldr	r1, [pc, #188]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	492c      	ldr	r1, [pc, #176]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	43db      	mvns	r3, r3
 800220a:	4928      	ldr	r1, [pc, #160]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800220c:	4013      	ands	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800221c:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	43db      	mvns	r3, r3
 8002232:	491e      	ldr	r1, [pc, #120]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002234:	4013      	ands	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	4918      	ldr	r1, [pc, #96]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	43db      	mvns	r3, r3
 800225a:	4914      	ldr	r1, [pc, #80]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800225c:	4013      	ands	r3, r2
 800225e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d021      	beq.n	80022b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	490e      	ldr	r1, [pc, #56]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	60cb      	str	r3, [r1, #12]
 8002278:	e021      	b.n	80022be <HAL_GPIO_Init+0x2e2>
 800227a:	bf00      	nop
 800227c:	10320000 	.word	0x10320000
 8002280:	10310000 	.word	0x10310000
 8002284:	10220000 	.word	0x10220000
 8002288:	10210000 	.word	0x10210000
 800228c:	10120000 	.word	0x10120000
 8002290:	10110000 	.word	0x10110000
 8002294:	40021000 	.word	0x40021000
 8002298:	40010000 	.word	0x40010000
 800229c:	40010800 	.word	0x40010800
 80022a0:	40010c00 	.word	0x40010c00
 80022a4:	40011000 	.word	0x40011000
 80022a8:	40011400 	.word	0x40011400
 80022ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_GPIO_Init+0x304>)
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	4909      	ldr	r1, [pc, #36]	; (80022e0 <HAL_GPIO_Init+0x304>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	3301      	adds	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f47f ae8e 	bne.w	8001ff0 <HAL_GPIO_Init+0x14>
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	372c      	adds	r7, #44	; 0x2c
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	40010400 	.word	0x40010400

080022e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80022f2:	e09a      	b.n	800242a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80022f4:	2201      	movs	r2, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 808d 	beq.w	8002424 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800230a:	4a4e      	ldr	r2, [pc, #312]	; (8002444 <HAL_GPIO_DeInit+0x160>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4013      	ands	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a46      	ldr	r2, [pc, #280]	; (8002448 <HAL_GPIO_DeInit+0x164>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_GPIO_DeInit+0x78>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a45      	ldr	r2, [pc, #276]	; (800244c <HAL_GPIO_DeInit+0x168>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00d      	beq.n	8002358 <HAL_GPIO_DeInit+0x74>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a44      	ldr	r2, [pc, #272]	; (8002450 <HAL_GPIO_DeInit+0x16c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <HAL_GPIO_DeInit+0x70>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a43      	ldr	r2, [pc, #268]	; (8002454 <HAL_GPIO_DeInit+0x170>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d101      	bne.n	8002350 <HAL_GPIO_DeInit+0x6c>
 800234c:	2303      	movs	r3, #3
 800234e:	e006      	b.n	800235e <HAL_GPIO_DeInit+0x7a>
 8002350:	2304      	movs	r3, #4
 8002352:	e004      	b.n	800235e <HAL_GPIO_DeInit+0x7a>
 8002354:	2302      	movs	r3, #2
 8002356:	e002      	b.n	800235e <HAL_GPIO_DeInit+0x7a>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_GPIO_DeInit+0x7a>
 800235c:	2300      	movs	r3, #0
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	f002 0203 	and.w	r2, r2, #3
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	4093      	lsls	r3, r2
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	429a      	cmp	r2, r3
 800236c:	d132      	bne.n	80023d4 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	220f      	movs	r2, #15
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800237e:	4a31      	ldr	r2, [pc, #196]	; (8002444 <HAL_GPIO_DeInit+0x160>)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	43da      	mvns	r2, r3
 800238e:	482d      	ldr	r0, [pc, #180]	; (8002444 <HAL_GPIO_DeInit+0x160>)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	400a      	ands	r2, r1
 8002396:	3302      	adds	r3, #2
 8002398:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800239c:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <HAL_GPIO_DeInit+0x174>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	492c      	ldr	r1, [pc, #176]	; (8002458 <HAL_GPIO_DeInit+0x174>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80023aa:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <HAL_GPIO_DeInit+0x174>)
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	4929      	ldr	r1, [pc, #164]	; (8002458 <HAL_GPIO_DeInit+0x174>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_GPIO_DeInit+0x174>)
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	43db      	mvns	r3, r3
 80023c0:	4925      	ldr	r1, [pc, #148]	; (8002458 <HAL_GPIO_DeInit+0x174>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_GPIO_DeInit+0x174>)
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	4922      	ldr	r1, [pc, #136]	; (8002458 <HAL_GPIO_DeInit+0x174>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2bff      	cmp	r3, #255	; 0xff
 80023d8:	d801      	bhi.n	80023de <HAL_GPIO_DeInit+0xfa>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	e001      	b.n	80023e2 <HAL_GPIO_DeInit+0xfe>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2bff      	cmp	r3, #255	; 0xff
 80023e8:	d802      	bhi.n	80023f0 <HAL_GPIO_DeInit+0x10c>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	e002      	b.n	80023f6 <HAL_GPIO_DeInit+0x112>
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	3b08      	subs	r3, #8
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	210f      	movs	r1, #15
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	401a      	ands	r2, r3
 8002408:	2104      	movs	r1, #4
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	431a      	orrs	r2, r3
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	43db      	mvns	r3, r3
 800241e:	401a      	ands	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	3301      	adds	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	f47f af5e 	bne.w	80022f4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3724      	adds	r7, #36	; 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40010000 	.word	0x40010000
 8002448:	40010800 	.word	0x40010800
 800244c:	40010c00 	.word	0x40010c00
 8002450:	40011000 	.word	0x40011000
 8002454:	40011400 	.word	0x40011400
 8002458:	40010400 	.word	0x40010400

0800245c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e001      	b.n	800247e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	807b      	strh	r3, [r7, #2]
 8002496:	4613      	mov	r3, r2
 8002498:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800249a:	787b      	ldrb	r3, [r7, #1]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a0:	887a      	ldrh	r2, [r7, #2]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024a6:	e003      	b.n	80024b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024a8:	887b      	ldrh	r3, [r7, #2]
 80024aa:	041a      	lsls	r2, r3, #16
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	611a      	str	r2, [r3, #16]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024cc:	887a      	ldrh	r2, [r7, #2]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	041a      	lsls	r2, r3, #16
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	400b      	ands	r3, r1
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	611a      	str	r2, [r3, #16]
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002502:	4a05      	ldr	r2, [pc, #20]	; (8002518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f804 	bl	8001518 <HAL_GPIO_EXTI_Callback>
  }
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40010400 	.word	0x40010400

0800251c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e12b      	b.n	8002786 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff f874 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2224      	movs	r2, #36	; 0x24
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800256e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800257e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002580:	f000 fffa 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8002584:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4a81      	ldr	r2, [pc, #516]	; (8002790 <HAL_I2C_Init+0x274>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d807      	bhi.n	80025a0 <HAL_I2C_Init+0x84>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a80      	ldr	r2, [pc, #512]	; (8002794 <HAL_I2C_Init+0x278>)
 8002594:	4293      	cmp	r3, r2
 8002596:	bf94      	ite	ls
 8002598:	2301      	movls	r3, #1
 800259a:	2300      	movhi	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	e006      	b.n	80025ae <HAL_I2C_Init+0x92>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a7d      	ldr	r2, [pc, #500]	; (8002798 <HAL_I2C_Init+0x27c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	bf94      	ite	ls
 80025a8:	2301      	movls	r3, #1
 80025aa:	2300      	movhi	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0e7      	b.n	8002786 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4a78      	ldr	r2, [pc, #480]	; (800279c <HAL_I2C_Init+0x280>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0c9b      	lsrs	r3, r3, #18
 80025c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a6a      	ldr	r2, [pc, #424]	; (8002790 <HAL_I2C_Init+0x274>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d802      	bhi.n	80025f0 <HAL_I2C_Init+0xd4>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3301      	adds	r3, #1
 80025ee:	e009      	b.n	8002604 <HAL_I2C_Init+0xe8>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	4a69      	ldr	r2, [pc, #420]	; (80027a0 <HAL_I2C_Init+0x284>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	3301      	adds	r3, #1
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	430b      	orrs	r3, r1
 800260a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002616:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	495c      	ldr	r1, [pc, #368]	; (8002790 <HAL_I2C_Init+0x274>)
 8002620:	428b      	cmp	r3, r1
 8002622:	d819      	bhi.n	8002658 <HAL_I2C_Init+0x13c>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1e59      	subs	r1, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002632:	1c59      	adds	r1, r3, #1
 8002634:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002638:	400b      	ands	r3, r1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_I2C_Init+0x138>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e59      	subs	r1, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fbb1 f3f3 	udiv	r3, r1, r3
 800264c:	3301      	adds	r3, #1
 800264e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002652:	e051      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 8002654:	2304      	movs	r3, #4
 8002656:	e04f      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d111      	bne.n	8002684 <HAL_I2C_Init+0x168>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	440b      	add	r3, r1
 800266e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e012      	b.n	80026aa <HAL_I2C_Init+0x18e>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1e58      	subs	r0, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	0099      	lsls	r1, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	fbb0 f3f3 	udiv	r3, r0, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Init+0x196>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e022      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10e      	bne.n	80026d8 <HAL_I2C_Init+0x1bc>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1e58      	subs	r0, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	440b      	add	r3, r1
 80026c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d6:	e00f      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1e58      	subs	r0, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	0099      	lsls	r1, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	6809      	ldr	r1, [r1, #0]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6911      	ldr	r1, [r2, #16]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68d2      	ldr	r2, [r2, #12]
 8002732:	4311      	orrs	r1, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	430b      	orrs	r3, r1
 800273a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	000186a0 	.word	0x000186a0
 8002794:	001e847f 	.word	0x001e847f
 8002798:	003d08ff 	.word	0x003d08ff
 800279c:	431bde83 	.word	0x431bde83
 80027a0:	10624dd3 	.word	0x10624dd3

080027a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027be:	f7ff fa21 	bl	8001c04 <HAL_GetTick>
 80027c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	f040 80d9 	bne.w	8002984 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2319      	movs	r3, #25
 80027d8:	2201      	movs	r2, #1
 80027da:	496d      	ldr	r1, [pc, #436]	; (8002990 <HAL_I2C_Mem_Write+0x1ec>)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f971 	bl	8002ac4 <I2C_WaitOnFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
 80027ea:	e0cc      	b.n	8002986 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_I2C_Mem_Write+0x56>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e0c5      	b.n	8002986 <HAL_I2C_Mem_Write+0x1e2>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d007      	beq.n	8002820 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2221      	movs	r2, #33	; 0x21
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2240      	movs	r2, #64	; 0x40
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a3a      	ldr	r2, [r7, #32]
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002850:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4a4d      	ldr	r2, [pc, #308]	; (8002994 <HAL_I2C_Mem_Write+0x1f0>)
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002862:	88f8      	ldrh	r0, [r7, #6]
 8002864:	893a      	ldrh	r2, [r7, #8]
 8002866:	8979      	ldrh	r1, [r7, #10]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4603      	mov	r3, r0
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f890 	bl	8002998 <I2C_RequestMemoryWrite>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d052      	beq.n	8002924 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e081      	b.n	8002986 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f9f2 	bl	8002c70 <I2C_WaitOnTXEFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2b04      	cmp	r3, #4
 8002898:	d107      	bne.n	80028aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e06b      	b.n	8002986 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	781a      	ldrb	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d11b      	bne.n	8002924 <HAL_I2C_Mem_Write+0x180>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d017      	beq.n	8002924 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1aa      	bne.n	8002882 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f9de 	bl	8002cf2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00d      	beq.n	8002958 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	2b04      	cmp	r3, #4
 8002942:	d107      	bne.n	8002954 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e016      	b.n	8002986 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	e000      	b.n	8002986 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	00100002 	.word	0x00100002
 8002994:	ffff0000 	.word	0xffff0000

08002998 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	4608      	mov	r0, r1
 80029a2:	4611      	mov	r1, r2
 80029a4:	461a      	mov	r2, r3
 80029a6:	4603      	mov	r3, r0
 80029a8:	817b      	strh	r3, [r7, #10]
 80029aa:	460b      	mov	r3, r1
 80029ac:	813b      	strh	r3, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f878 	bl	8002ac4 <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00d      	beq.n	80029f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e8:	d103      	bne.n	80029f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e05f      	b.n	8002ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	6a3a      	ldr	r2, [r7, #32]
 8002a0a:	492d      	ldr	r1, [pc, #180]	; (8002ac0 <I2C_RequestMemoryWrite+0x128>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f8b0 	bl	8002b72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e04c      	b.n	8002ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a34:	6a39      	ldr	r1, [r7, #32]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f91a 	bl	8002c70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d107      	bne.n	8002a5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e02b      	b.n	8002ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a64:	893b      	ldrh	r3, [r7, #8]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	611a      	str	r2, [r3, #16]
 8002a6e:	e021      	b.n	8002ab4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a70:	893b      	ldrh	r3, [r7, #8]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a80:	6a39      	ldr	r1, [r7, #32]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f8f4 	bl	8002c70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d107      	bne.n	8002aa6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e005      	b.n	8002ab6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aaa:	893b      	ldrh	r3, [r7, #8]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	00010002 	.word	0x00010002

08002ac4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ad4:	e025      	b.n	8002b22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002adc:	d021      	beq.n	8002b22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ade:	f7ff f891 	bl	8001c04 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d302      	bcc.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d116      	bne.n	8002b22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f043 0220 	orr.w	r2, r3, #32
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e023      	b.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d10d      	bne.n	8002b48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4013      	ands	r3, r2
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf0c      	ite	eq
 8002b3e:	2301      	moveq	r3, #1
 8002b40:	2300      	movne	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	e00c      	b.n	8002b62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf0c      	ite	eq
 8002b5a:	2301      	moveq	r3, #1
 8002b5c:	2300      	movne	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d0b6      	beq.n	8002ad6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b80:	e051      	b.n	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b90:	d123      	bne.n	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002baa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f043 0204 	orr.w	r2, r3, #4
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e046      	b.n	8002c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002be0:	d021      	beq.n	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be2:	f7ff f80f 	bl	8001c04 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d302      	bcc.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d116      	bne.n	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f043 0220 	orr.w	r2, r3, #32
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e020      	b.n	8002c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d10c      	bne.n	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	e00b      	b.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	43da      	mvns	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	4013      	ands	r3, r2
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d18d      	bne.n	8002b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c7c:	e02d      	b.n	8002cda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f878 	bl	8002d74 <I2C_IsAcknowledgeFailed>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e02d      	b.n	8002cea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c94:	d021      	beq.n	8002cda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c96:	f7fe ffb5 	bl	8001c04 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d116      	bne.n	8002cda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f043 0220 	orr.w	r2, r3, #32
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e007      	b.n	8002cea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce4:	2b80      	cmp	r3, #128	; 0x80
 8002ce6:	d1ca      	bne.n	8002c7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cfe:	e02d      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f837 	bl	8002d74 <I2C_IsAcknowledgeFailed>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e02d      	b.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d16:	d021      	beq.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d18:	f7fe ff74 	bl	8001c04 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d302      	bcc.n	8002d2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d116      	bne.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e007      	b.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d1ca      	bne.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8a:	d11b      	bne.n	8002dc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e26c      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8087 	beq.w	8002efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df0:	4b92      	ldr	r3, [pc, #584]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d00c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dfc:	4b8f      	ldr	r3, [pc, #572]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d112      	bne.n	8002e2e <HAL_RCC_OscConfig+0x5e>
 8002e08:	4b8c      	ldr	r3, [pc, #560]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d10b      	bne.n	8002e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e16:	4b89      	ldr	r3, [pc, #548]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d06c      	beq.n	8002efc <HAL_RCC_OscConfig+0x12c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d168      	bne.n	8002efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e246      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x76>
 8002e38:	4b80      	ldr	r3, [pc, #512]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a7f      	ldr	r2, [pc, #508]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e02e      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd4>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x98>
 8002e4e:	4b7b      	ldr	r3, [pc, #492]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a7a      	ldr	r2, [pc, #488]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b78      	ldr	r3, [pc, #480]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a77      	ldr	r2, [pc, #476]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e01d      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0xbc>
 8002e72:	4b72      	ldr	r3, [pc, #456]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a71      	ldr	r2, [pc, #452]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd4>
 8002e8c:	4b6b      	ldr	r3, [pc, #428]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a6a      	ldr	r2, [pc, #424]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b68      	ldr	r3, [pc, #416]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a67      	ldr	r2, [pc, #412]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe feaa 	bl	8001c04 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fea6 	bl	8001c04 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e1fa      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b5d      	ldr	r3, [pc, #372]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xe4>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fe96 	bl	8001c04 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fe92 	bl	8001c04 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1e6      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	4b53      	ldr	r3, [pc, #332]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x10c>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d063      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0a:	4b4c      	ldr	r3, [pc, #304]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f16:	4b49      	ldr	r3, [pc, #292]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d11c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x18c>
 8002f22:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	4b43      	ldr	r3, [pc, #268]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x176>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1ba      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4939      	ldr	r1, [pc, #228]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	e03a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fe4b 	bl	8001c04 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fe fe47 	bl	8001c04 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e19b      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4927      	ldr	r1, [pc, #156]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
 8002fa4:	e015      	b.n	8002fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe fe2a 	bl	8001c04 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fe26 	bl	8001c04 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e17a      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d03a      	beq.n	8003054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d019      	beq.n	800301a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fec:	f7fe fe0a 	bl	8001c04 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7fe fe06 	bl	8001c04 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e15a      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <HAL_RCC_OscConfig+0x26c>)
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003012:	2001      	movs	r0, #1
 8003014:	f000 fad8 	bl	80035c8 <RCC_Delay>
 8003018:	e01c      	b.n	8003054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <HAL_RCC_OscConfig+0x274>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003020:	f7fe fdf0 	bl	8001c04 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003026:	e00f      	b.n	8003048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003028:	f7fe fdec 	bl	8001c04 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d908      	bls.n	8003048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e140      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	42420000 	.word	0x42420000
 8003044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	4b9e      	ldr	r3, [pc, #632]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e9      	bne.n	8003028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a6 	beq.w	80031ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003062:	2300      	movs	r3, #0
 8003064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003066:	4b97      	ldr	r3, [pc, #604]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10d      	bne.n	800308e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	4b94      	ldr	r3, [pc, #592]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4a93      	ldr	r2, [pc, #588]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	61d3      	str	r3, [r2, #28]
 800307e:	4b91      	ldr	r3, [pc, #580]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308e:	4b8e      	ldr	r3, [pc, #568]	; (80032c8 <HAL_RCC_OscConfig+0x4f8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309a:	4b8b      	ldr	r3, [pc, #556]	; (80032c8 <HAL_RCC_OscConfig+0x4f8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a8a      	ldr	r2, [pc, #552]	; (80032c8 <HAL_RCC_OscConfig+0x4f8>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a6:	f7fe fdad 	bl	8001c04 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7fe fda9 	bl	8001c04 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b64      	cmp	r3, #100	; 0x64
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e0fd      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	4b81      	ldr	r3, [pc, #516]	; (80032c8 <HAL_RCC_OscConfig+0x4f8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x312>
 80030d4:	4b7b      	ldr	r3, [pc, #492]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4a7a      	ldr	r2, [pc, #488]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6213      	str	r3, [r2, #32]
 80030e0:	e02d      	b.n	800313e <HAL_RCC_OscConfig+0x36e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x334>
 80030ea:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4a75      	ldr	r2, [pc, #468]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	6213      	str	r3, [r2, #32]
 80030f6:	4b73      	ldr	r3, [pc, #460]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4a72      	ldr	r2, [pc, #456]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	f023 0304 	bic.w	r3, r3, #4
 8003100:	6213      	str	r3, [r2, #32]
 8003102:	e01c      	b.n	800313e <HAL_RCC_OscConfig+0x36e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b05      	cmp	r3, #5
 800310a:	d10c      	bne.n	8003126 <HAL_RCC_OscConfig+0x356>
 800310c:	4b6d      	ldr	r3, [pc, #436]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a6c      	ldr	r2, [pc, #432]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4a69      	ldr	r2, [pc, #420]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6213      	str	r3, [r2, #32]
 8003124:	e00b      	b.n	800313e <HAL_RCC_OscConfig+0x36e>
 8003126:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a66      	ldr	r2, [pc, #408]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	6213      	str	r3, [r2, #32]
 8003132:	4b64      	ldr	r3, [pc, #400]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4a63      	ldr	r2, [pc, #396]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d015      	beq.n	8003172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003146:	f7fe fd5d 	bl	8001c04 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7fe fd59 	bl	8001c04 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f241 3288 	movw	r2, #5000	; 0x1388
 800315c:	4293      	cmp	r3, r2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0ab      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	4b57      	ldr	r3, [pc, #348]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0ee      	beq.n	800314e <HAL_RCC_OscConfig+0x37e>
 8003170:	e014      	b.n	800319c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003172:	f7fe fd47 	bl	8001c04 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003178:	e00a      	b.n	8003190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7fe fd43 	bl	8001c04 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	; 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e095      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	4b4c      	ldr	r3, [pc, #304]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ee      	bne.n	800317a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a2:	4b48      	ldr	r3, [pc, #288]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a47      	ldr	r2, [pc, #284]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 80031a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8081 	beq.w	80032ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b8:	4b42      	ldr	r3, [pc, #264]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d061      	beq.n	8003288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d146      	bne.n	800325a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031cc:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_RCC_OscConfig+0x4fc>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe fd17 	bl	8001c04 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031da:	f7fe fd13 	bl	8001c04 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e067      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ec:	4b35      	ldr	r3, [pc, #212]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d108      	bne.n	8003214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003202:	4b30      	ldr	r3, [pc, #192]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	492d      	ldr	r1, [pc, #180]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003214:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a19      	ldr	r1, [r3, #32]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	430b      	orrs	r3, r1
 8003226:	4927      	ldr	r1, [pc, #156]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b27      	ldr	r3, [pc, #156]	; (80032cc <HAL_RCC_OscConfig+0x4fc>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fe fce7 	bl	8001c04 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe fce3 	bl	8001c04 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e037      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x46a>
 8003258:	e02f      	b.n	80032ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b1c      	ldr	r3, [pc, #112]	; (80032cc <HAL_RCC_OscConfig+0x4fc>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fcd0 	bl	8001c04 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fccc 	bl	8001c04 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e020      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x498>
 8003286:	e018      	b.n	80032ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e013      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x4f4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40007000 	.word	0x40007000
 80032cc:	42420060 	.word	0x42420060

080032d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0d0      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b6a      	ldr	r3, [pc, #424]	; (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d910      	bls.n	8003314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b67      	ldr	r3, [pc, #412]	; (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 0207 	bic.w	r2, r3, #7
 80032fa:	4965      	ldr	r1, [pc, #404]	; (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b63      	ldr	r3, [pc, #396]	; (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0b8      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800332c:	4b59      	ldr	r3, [pc, #356]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a58      	ldr	r2, [pc, #352]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003336:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003344:	4b53      	ldr	r3, [pc, #332]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a52      	ldr	r2, [pc, #328]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800334e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003350:	4b50      	ldr	r3, [pc, #320]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	494d      	ldr	r1, [pc, #308]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d040      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d107      	bne.n	8003386 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003376:	4b47      	ldr	r3, [pc, #284]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d115      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e07f      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	4b41      	ldr	r3, [pc, #260]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e073      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339e:	4b3d      	ldr	r3, [pc, #244]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e06b      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ae:	4b39      	ldr	r3, [pc, #228]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f023 0203 	bic.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4936      	ldr	r1, [pc, #216]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c0:	f7fe fc20 	bl	8001c04 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	e00a      	b.n	80033de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7fe fc1c 	bl	8001c04 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e053      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 020c 	and.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d1eb      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f0:	4b27      	ldr	r3, [pc, #156]	; (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d210      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 0207 	bic.w	r2, r3, #7
 8003406:	4922      	ldr	r1, [pc, #136]	; (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b20      	ldr	r3, [pc, #128]	; (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e032      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4916      	ldr	r1, [pc, #88]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800344a:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	490e      	ldr	r1, [pc, #56]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800345e:	f000 f821 	bl	80034a4 <HAL_RCC_GetSysClockFreq>
 8003462:	4602      	mov	r2, r0
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	490a      	ldr	r1, [pc, #40]	; (8003498 <HAL_RCC_ClockConfig+0x1c8>)
 8003470:	5ccb      	ldrb	r3, [r1, r3]
 8003472:	fa22 f303 	lsr.w	r3, r2, r3
 8003476:	4a09      	ldr	r2, [pc, #36]	; (800349c <HAL_RCC_ClockConfig+0x1cc>)
 8003478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCC_ClockConfig+0x1d0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe fb7e 	bl	8001b80 <HAL_InitTick>

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40022000 	.word	0x40022000
 8003494:	40021000 	.word	0x40021000
 8003498:	08005278 	.word	0x08005278
 800349c:	20000008 	.word	0x20000008
 80034a0:	2000000c 	.word	0x2000000c

080034a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a4:	b490      	push	{r4, r7}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034aa:	4b2a      	ldr	r3, [pc, #168]	; (8003554 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034ac:	1d3c      	adds	r4, r7, #4
 80034ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034b4:	f240 2301 	movw	r3, #513	; 0x201
 80034b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034ce:	4b22      	ldr	r3, [pc, #136]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d002      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x40>
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d003      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x46>
 80034e2:	e02d      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034e6:	623b      	str	r3, [r7, #32]
      break;
 80034e8:	e02d      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	0c9b      	lsrs	r3, r3, #18
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034f6:	4413      	add	r3, r2
 80034f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	0c5b      	lsrs	r3, r3, #17
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003516:	4413      	add	r3, r2
 8003518:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800351c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	4a0e      	ldr	r2, [pc, #56]	; (800355c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003522:	fb02 f203 	mul.w	r2, r2, r3
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
 800352e:	e004      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	4a0b      	ldr	r2, [pc, #44]	; (8003560 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003534:	fb02 f303 	mul.w	r3, r2, r3
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	623b      	str	r3, [r7, #32]
      break;
 800353e:	e002      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003542:	623b      	str	r3, [r7, #32]
      break;
 8003544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003546:	6a3b      	ldr	r3, [r7, #32]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3728      	adds	r7, #40	; 0x28
 800354c:	46bd      	mov	sp, r7
 800354e:	bc90      	pop	{r4, r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	08005268 	.word	0x08005268
 8003558:	40021000 	.word	0x40021000
 800355c:	007a1200 	.word	0x007a1200
 8003560:	003d0900 	.word	0x003d0900

08003564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003568:	4b02      	ldr	r3, [pc, #8]	; (8003574 <HAL_RCC_GetHCLKFreq+0x10>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	20000008 	.word	0x20000008

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800357c:	f7ff fff2 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4903      	ldr	r1, [pc, #12]	; (800359c <HAL_RCC_GetPCLK1Freq+0x24>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	08005288 	.word	0x08005288

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a4:	f7ff ffde 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	0adb      	lsrs	r3, r3, #11
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4903      	ldr	r1, [pc, #12]	; (80035c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000
 80035c4:	08005288 	.word	0x08005288

080035c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <RCC_Delay+0x34>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <RCC_Delay+0x38>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0a5b      	lsrs	r3, r3, #9
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035e4:	bf00      	nop
  }
  while (Delay --);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1e5a      	subs	r2, r3, #1
 80035ea:	60fa      	str	r2, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f9      	bne.n	80035e4 <RCC_Delay+0x1c>
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	20000008 	.word	0x20000008
 8003600:	10624dd3 	.word	0x10624dd3

08003604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e076      	b.n	8003704 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d108      	bne.n	8003630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003626:	d009      	beq.n	800363c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	61da      	str	r2, [r3, #28]
 800362e:	e005      	b.n	800363c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fe f828 	bl	80016ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003672:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c0:	ea42 0103 	orr.w	r1, r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	0c1a      	lsrs	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f002 0204 	and.w	r2, r2, #4
 80036e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_SPI_Transmit+0x22>
 800372a:	2302      	movs	r3, #2
 800372c:	e126      	b.n	800397c <HAL_SPI_Transmit+0x270>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003736:	f7fe fa65 	bl	8001c04 <HAL_GetTick>
 800373a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d002      	beq.n	8003752 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800374c:	2302      	movs	r3, #2
 800374e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003750:	e10b      	b.n	800396a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_SPI_Transmit+0x52>
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003762:	e102      	b.n	800396a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2203      	movs	r2, #3
 8003768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	88fa      	ldrh	r2, [r7, #6]
 8003782:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037aa:	d10f      	bne.n	80037cc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b40      	cmp	r3, #64	; 0x40
 80037d8:	d007      	beq.n	80037ea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f2:	d14b      	bne.n	800388c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_SPI_Transmit+0xf6>
 80037fc:	8afb      	ldrh	r3, [r7, #22]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d13e      	bne.n	8003880 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	881a      	ldrh	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	1c9a      	adds	r2, r3, #2
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003826:	e02b      	b.n	8003880 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d112      	bne.n	800385c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	881a      	ldrh	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	1c9a      	adds	r2, r3, #2
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	86da      	strh	r2, [r3, #54]	; 0x36
 800385a:	e011      	b.n	8003880 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800385c:	f7fe f9d2 	bl	8001c04 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d803      	bhi.n	8003874 <HAL_SPI_Transmit+0x168>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003872:	d102      	bne.n	800387a <HAL_SPI_Transmit+0x16e>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800387e:	e074      	b.n	800396a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1ce      	bne.n	8003828 <HAL_SPI_Transmit+0x11c>
 800388a:	e04c      	b.n	8003926 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_SPI_Transmit+0x18e>
 8003894:	8afb      	ldrh	r3, [r7, #22]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d140      	bne.n	800391c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	7812      	ldrb	r2, [r2, #0]
 80038a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038c0:	e02c      	b.n	800391c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d113      	bne.n	80038f8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	7812      	ldrb	r2, [r2, #0]
 80038dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80038f6:	e011      	b.n	800391c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038f8:	f7fe f984 	bl	8001c04 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d803      	bhi.n	8003910 <HAL_SPI_Transmit+0x204>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390e:	d102      	bne.n	8003916 <HAL_SPI_Transmit+0x20a>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	77fb      	strb	r3, [r7, #31]
          goto error;
 800391a:	e026      	b.n	800396a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1cd      	bne.n	80038c2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	6839      	ldr	r1, [r7, #0]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fbb8 	bl	80040a0 <SPI_EndRxTxTransaction>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	77fb      	strb	r3, [r7, #31]
 8003966:	e000      	b.n	800396a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003968:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800397a:	7ffb      	ldrb	r3, [r7, #31]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	4613      	mov	r3, r2
 8003992:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039a0:	d112      	bne.n	80039c8 <HAL_SPI_Receive+0x44>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10e      	bne.n	80039c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2204      	movs	r2, #4
 80039ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f8f1 	bl	8003ba6 <HAL_SPI_TransmitReceive>
 80039c4:	4603      	mov	r3, r0
 80039c6:	e0ea      	b.n	8003b9e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_SPI_Receive+0x52>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e0e3      	b.n	8003b9e <HAL_SPI_Receive+0x21a>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039de:	f7fe f911 	bl	8001c04 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d002      	beq.n	80039f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
 80039f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039f4:	e0ca      	b.n	8003b8c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_SPI_Receive+0x7e>
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d102      	bne.n	8003a08 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a06:	e0c1      	b.n	8003b8c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a4e:	d10f      	bne.n	8003a70 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a6e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b40      	cmp	r3, #64	; 0x40
 8003a7c:	d007      	beq.n	8003a8e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d162      	bne.n	8003b5c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a96:	e02e      	b.n	8003af6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d115      	bne.n	8003ad2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f103 020c 	add.w	r2, r3, #12
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	7812      	ldrb	r2, [r2, #0]
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ad0:	e011      	b.n	8003af6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad2:	f7fe f897 	bl	8001c04 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d803      	bhi.n	8003aea <HAL_SPI_Receive+0x166>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae8:	d102      	bne.n	8003af0 <HAL_SPI_Receive+0x16c>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003af4:	e04a      	b.n	8003b8c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1cb      	bne.n	8003a98 <HAL_SPI_Receive+0x114>
 8003b00:	e031      	b.n	8003b66 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d113      	bne.n	8003b38 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	b292      	uxth	r2, r2
 8003b1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	1c9a      	adds	r2, r3, #2
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b36:	e011      	b.n	8003b5c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b38:	f7fe f864 	bl	8001c04 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d803      	bhi.n	8003b50 <HAL_SPI_Receive+0x1cc>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b4e:	d102      	bne.n	8003b56 <HAL_SPI_Receive+0x1d2>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b5a:	e017      	b.n	8003b8c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1cd      	bne.n	8003b02 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	6839      	ldr	r1, [r7, #0]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fa46 	bl	8003ffc <SPI_EndRxTransaction>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
 8003b88:	e000      	b.n	8003b8c <HAL_SPI_Receive+0x208>
  }

error :
 8003b8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b08c      	sub	sp, #48	; 0x30
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
 8003bb2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x26>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e18a      	b.n	8003ee2 <HAL_SPI_TransmitReceive+0x33c>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bd4:	f7fe f816 	bl	8001c04 <HAL_GetTick>
 8003bd8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d00f      	beq.n	8003c16 <HAL_SPI_TransmitReceive+0x70>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bfc:	d107      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x68>
 8003c06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d003      	beq.n	8003c16 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c14:	e15b      	b.n	8003ece <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x82>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x82>
 8003c22:	887b      	ldrh	r3, [r7, #2]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d103      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c2e:	e14e      	b.n	8003ece <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d003      	beq.n	8003c44 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2205      	movs	r2, #5
 8003c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	887a      	ldrh	r2, [r7, #2]
 8003c5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	887a      	ldrh	r2, [r7, #2]
 8003c66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	887a      	ldrh	r2, [r7, #2]
 8003c6c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b40      	cmp	r3, #64	; 0x40
 8003c86:	d007      	beq.n	8003c98 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca0:	d178      	bne.n	8003d94 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <HAL_SPI_TransmitReceive+0x10a>
 8003caa:	8b7b      	ldrh	r3, [r7, #26]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d166      	bne.n	8003d7e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	881a      	ldrh	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	1c9a      	adds	r2, r3, #2
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cd4:	e053      	b.n	8003d7e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d11b      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x176>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <HAL_SPI_TransmitReceive+0x176>
 8003cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d113      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	1c9a      	adds	r2, r3, #2
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d119      	bne.n	8003d5e <HAL_SPI_TransmitReceive+0x1b8>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d014      	beq.n	8003d5e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	1c9a      	adds	r2, r3, #2
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d5e:	f7fd ff51 	bl	8001c04 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d807      	bhi.n	8003d7e <HAL_SPI_TransmitReceive+0x1d8>
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d74:	d003      	beq.n	8003d7e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d7c:	e0a7      	b.n	8003ece <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1a6      	bne.n	8003cd6 <HAL_SPI_TransmitReceive+0x130>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1a1      	bne.n	8003cd6 <HAL_SPI_TransmitReceive+0x130>
 8003d92:	e07c      	b.n	8003e8e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_SPI_TransmitReceive+0x1fc>
 8003d9c:	8b7b      	ldrh	r3, [r7, #26]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d16b      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	7812      	ldrb	r2, [r2, #0]
 8003dae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc8:	e057      	b.n	8003e7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d11c      	bne.n	8003e12 <HAL_SPI_TransmitReceive+0x26c>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d017      	beq.n	8003e12 <HAL_SPI_TransmitReceive+0x26c>
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d114      	bne.n	8003e12 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	7812      	ldrb	r2, [r2, #0]
 8003df4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d119      	bne.n	8003e54 <HAL_SPI_TransmitReceive+0x2ae>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d014      	beq.n	8003e54 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e50:	2301      	movs	r3, #1
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e54:	f7fd fed6 	bl	8001c04 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d803      	bhi.n	8003e6c <HAL_SPI_TransmitReceive+0x2c6>
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e6a:	d102      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x2cc>
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d103      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e78:	e029      	b.n	8003ece <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1a2      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x224>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d19d      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f904 	bl	80040a0 <SPI_EndRxTxTransaction>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003eaa:	e010      	b.n	8003ece <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	e000      	b.n	8003ece <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ecc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ede:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3730      	adds	r7, #48	; 0x30
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003efc:	f7fd fe82 	bl	8001c04 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	4413      	add	r3, r2
 8003f0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f0c:	f7fd fe7a 	bl	8001c04 <HAL_GetTick>
 8003f10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f12:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	015b      	lsls	r3, r3, #5
 8003f18:	0d1b      	lsrs	r3, r3, #20
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	fb02 f303 	mul.w	r3, r2, r3
 8003f20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f22:	e054      	b.n	8003fce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f2a:	d050      	beq.n	8003fce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f2c:	f7fd fe6a 	bl	8001c04 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d902      	bls.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d13d      	bne.n	8003fbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f5a:	d111      	bne.n	8003f80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f64:	d004      	beq.n	8003f70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d107      	bne.n	8003f80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f88:	d10f      	bne.n	8003faa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e017      	b.n	8003fee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	bf0c      	ite	eq
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	2300      	movne	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d19b      	bne.n	8003f24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000008 	.word	0x20000008

08003ffc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004010:	d111      	bne.n	8004036 <SPI_EndRxTransaction+0x3a>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401a:	d004      	beq.n	8004026 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004024:	d107      	bne.n	8004036 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004034:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403e:	d117      	bne.n	8004070 <SPI_EndRxTransaction+0x74>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004048:	d112      	bne.n	8004070 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2200      	movs	r2, #0
 8004052:	2101      	movs	r1, #1
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7ff ff49 	bl	8003eec <SPI_WaitFlagStateUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01a      	beq.n	8004096 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e013      	b.n	8004098 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2200      	movs	r2, #0
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7ff ff36 	bl	8003eec <SPI_WaitFlagStateUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d007      	beq.n	8004096 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	f043 0220 	orr.w	r2, r3, #32
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e000      	b.n	8004098 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2200      	movs	r2, #0
 80040b4:	2180      	movs	r1, #128	; 0x80
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff ff18 	bl	8003eec <SPI_WaitFlagStateUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	f043 0220 	orr.w	r2, r3, #32
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e000      	b.n	80040d4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e041      	b.n	8004172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fd fb1c 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3304      	adds	r3, #4
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f000 faa8 	bl	8004670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d001      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e03a      	b.n	800420a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a18      	ldr	r2, [pc, #96]	; (8004214 <HAL_TIM_Base_Start_IT+0x98>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00e      	beq.n	80041d4 <HAL_TIM_Base_Start_IT+0x58>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041be:	d009      	beq.n	80041d4 <HAL_TIM_Base_Start_IT+0x58>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a14      	ldr	r2, [pc, #80]	; (8004218 <HAL_TIM_Base_Start_IT+0x9c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d004      	beq.n	80041d4 <HAL_TIM_Base_Start_IT+0x58>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a13      	ldr	r2, [pc, #76]	; (800421c <HAL_TIM_Base_Start_IT+0xa0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d111      	bne.n	80041f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b06      	cmp	r3, #6
 80041e4:	d010      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f6:	e007      	b.n	8004208 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800

08004220 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6a1a      	ldr	r2, [r3, #32]
 800423e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10f      	bne.n	8004268 <HAL_TIM_Base_Stop_IT+0x48>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a1a      	ldr	r2, [r3, #32]
 800424e:	f240 4344 	movw	r3, #1092	; 0x444
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <HAL_TIM_Base_Stop_IT+0x48>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b02      	cmp	r3, #2
 8004290:	d122      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d11b      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0202 	mvn.w	r2, #2
 80042a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f9ba 	bl	8004638 <HAL_TIM_IC_CaptureCallback>
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9ad 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f9bc 	bl	800464a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0204 	mvn.w	r2, #4
 80042fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f990 	bl	8004638 <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f983 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f992 	bl	800464a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b08      	cmp	r3, #8
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b08      	cmp	r3, #8
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0208 	mvn.w	r2, #8
 8004350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2204      	movs	r2, #4
 8004356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f966 	bl	8004638 <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f959 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f968 	bl	800464a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b10      	cmp	r3, #16
 800438c:	d122      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b10      	cmp	r3, #16
 800439a:	d11b      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0210 	mvn.w	r2, #16
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2208      	movs	r2, #8
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f93c 	bl	8004638 <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f92f 	bl	8004626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f93e 	bl	800464a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d10e      	bne.n	8004400 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d107      	bne.n	8004400 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0201 	mvn.w	r2, #1
 80043f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f90a 	bl	8004614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b80      	cmp	r3, #128	; 0x80
 800440c:	d10e      	bne.n	800442c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d107      	bne.n	800442c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa81 	bl	800492e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d107      	bne.n	8004458 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f902 	bl	800465c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b20      	cmp	r3, #32
 8004464:	d10e      	bne.n	8004484 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b20      	cmp	r3, #32
 8004472:	d107      	bne.n	8004484 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0220 	mvn.w	r2, #32
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fa4c 	bl	800491c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_TIM_ConfigClockSource+0x18>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0b3      	b.n	800460c <HAL_TIM_ConfigClockSource+0x180>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044dc:	d03e      	beq.n	800455c <HAL_TIM_ConfigClockSource+0xd0>
 80044de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e2:	f200 8087 	bhi.w	80045f4 <HAL_TIM_ConfigClockSource+0x168>
 80044e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ea:	f000 8085 	beq.w	80045f8 <HAL_TIM_ConfigClockSource+0x16c>
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f2:	d87f      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x168>
 80044f4:	2b70      	cmp	r3, #112	; 0x70
 80044f6:	d01a      	beq.n	800452e <HAL_TIM_ConfigClockSource+0xa2>
 80044f8:	2b70      	cmp	r3, #112	; 0x70
 80044fa:	d87b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x168>
 80044fc:	2b60      	cmp	r3, #96	; 0x60
 80044fe:	d050      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x116>
 8004500:	2b60      	cmp	r3, #96	; 0x60
 8004502:	d877      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x168>
 8004504:	2b50      	cmp	r3, #80	; 0x50
 8004506:	d03c      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0xf6>
 8004508:	2b50      	cmp	r3, #80	; 0x50
 800450a:	d873      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x168>
 800450c:	2b40      	cmp	r3, #64	; 0x40
 800450e:	d058      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x136>
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	d86f      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x168>
 8004514:	2b30      	cmp	r3, #48	; 0x30
 8004516:	d064      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x156>
 8004518:	2b30      	cmp	r3, #48	; 0x30
 800451a:	d86b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x168>
 800451c:	2b20      	cmp	r3, #32
 800451e:	d060      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x156>
 8004520:	2b20      	cmp	r3, #32
 8004522:	d867      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x168>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d05c      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x156>
 8004528:	2b10      	cmp	r3, #16
 800452a:	d05a      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800452c:	e062      	b.n	80045f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6899      	ldr	r1, [r3, #8]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f000 f970 	bl	8004822 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004550:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	609a      	str	r2, [r3, #8]
      break;
 800455a:	e04e      	b.n	80045fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6899      	ldr	r1, [r3, #8]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f000 f959 	bl	8004822 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800457e:	609a      	str	r2, [r3, #8]
      break;
 8004580:	e03b      	b.n	80045fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	461a      	mov	r2, r3
 8004590:	f000 f8d0 	bl	8004734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2150      	movs	r1, #80	; 0x50
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f927 	bl	80047ee <TIM_ITRx_SetConfig>
      break;
 80045a0:	e02b      	b.n	80045fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6859      	ldr	r1, [r3, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f000 f8ee 	bl	8004790 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2160      	movs	r1, #96	; 0x60
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f917 	bl	80047ee <TIM_ITRx_SetConfig>
      break;
 80045c0:	e01b      	b.n	80045fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6859      	ldr	r1, [r3, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f000 f8b0 	bl	8004734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2140      	movs	r1, #64	; 0x40
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f907 	bl	80047ee <TIM_ITRx_SetConfig>
      break;
 80045e0:	e00b      	b.n	80045fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f000 f8fe 	bl	80047ee <TIM_ITRx_SetConfig>
        break;
 80045f2:	e002      	b.n	80045fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045f4:	bf00      	nop
 80045f6:	e000      	b.n	80045fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
	...

08004670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a29      	ldr	r2, [pc, #164]	; (8004728 <TIM_Base_SetConfig+0xb8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00b      	beq.n	80046a0 <TIM_Base_SetConfig+0x30>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468e:	d007      	beq.n	80046a0 <TIM_Base_SetConfig+0x30>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a26      	ldr	r2, [pc, #152]	; (800472c <TIM_Base_SetConfig+0xbc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_Base_SetConfig+0x30>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a25      	ldr	r2, [pc, #148]	; (8004730 <TIM_Base_SetConfig+0xc0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d108      	bne.n	80046b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <TIM_Base_SetConfig+0xb8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00b      	beq.n	80046d2 <TIM_Base_SetConfig+0x62>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d007      	beq.n	80046d2 <TIM_Base_SetConfig+0x62>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a19      	ldr	r2, [pc, #100]	; (800472c <TIM_Base_SetConfig+0xbc>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d003      	beq.n	80046d2 <TIM_Base_SetConfig+0x62>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a18      	ldr	r2, [pc, #96]	; (8004730 <TIM_Base_SetConfig+0xc0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d108      	bne.n	80046e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a07      	ldr	r2, [pc, #28]	; (8004728 <TIM_Base_SetConfig+0xb8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d103      	bne.n	8004718 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	615a      	str	r2, [r3, #20]
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800

08004734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0201 	bic.w	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f023 030a 	bic.w	r3, r3, #10
 8004770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr

08004790 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f023 0210 	bic.w	r2, r3, #16
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	031b      	lsls	r3, r3, #12
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	621a      	str	r2, [r3, #32]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr

080047ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	f043 0307 	orr.w	r3, r3, #7
 8004810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004822:	b480      	push	{r7}
 8004824:	b087      	sub	sp, #28
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800483c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	021a      	lsls	r2, r3, #8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	431a      	orrs	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4313      	orrs	r3, r2
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	609a      	str	r2, [r3, #8]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004874:	2302      	movs	r3, #2
 8004876:	e046      	b.n	8004906 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00e      	beq.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c4:	d009      	beq.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a12      	ldr	r2, [pc, #72]	; (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a10      	ldr	r2, [pc, #64]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d10c      	bne.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	40012c00 	.word	0x40012c00
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800

0800491c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e03f      	b.n	80049d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fc ff10 	bl	800178c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2224      	movs	r2, #36	; 0x24
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fba9 	bl	80050dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	4613      	mov	r3, r2
 80049e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d11d      	bne.n	8004a30 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_UART_Receive_IT+0x26>
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e016      	b.n	8004a32 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Receive_IT+0x38>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e00f      	b.n	8004a32 <HAL_UART_Receive_IT+0x58>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	461a      	mov	r2, r3
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f9cf 	bl	8004dca <UART_Start_Receive_IT>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	e000      	b.n	8004a32 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a30:	2302      	movs	r3, #2
  }
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_UART_IRQHandler+0x52>
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa7f 	bl	8004f8a <UART_Receive_IT>
      return;
 8004a8c:	e17b      	b.n	8004d86 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80b1 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x1bc>
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <HAL_UART_IRQHandler+0x70>
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80a6 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <HAL_UART_IRQHandler+0x90>
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_UART_IRQHandler+0xb0>
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	f043 0202 	orr.w	r2, r3, #2
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_UART_IRQHandler+0xd0>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	f043 0204 	orr.w	r2, r3, #4
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00f      	beq.n	8004b36 <HAL_UART_IRQHandler+0xfa>
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d104      	bne.n	8004b2a <HAL_UART_IRQHandler+0xee>
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f043 0208 	orr.w	r2, r3, #8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 811e 	beq.w	8004d7c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d007      	beq.n	8004b5a <HAL_UART_IRQHandler+0x11e>
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fa18 	bl	8004f8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d102      	bne.n	8004b82 <HAL_UART_IRQHandler+0x146>
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d031      	beq.n	8004be6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f95a 	bl	8004e3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d023      	beq.n	8004bde <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695a      	ldr	r2, [r3, #20]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d013      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	4a76      	ldr	r2, [pc, #472]	; (8004d8c <HAL_UART_IRQHandler+0x350>)
 8004bb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fd f998 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d016      	beq.n	8004bf4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd4:	e00e      	b.n	8004bf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f8e3 	bl	8004da2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bdc:	e00a      	b.n	8004bf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f8df 	bl	8004da2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be4:	e006      	b.n	8004bf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8db 	bl	8004da2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004bf2:	e0c3      	b.n	8004d7c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf4:	bf00      	nop
    return;
 8004bf6:	e0c1      	b.n	8004d7c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	f040 80a1 	bne.w	8004d44 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 809b 	beq.w	8004d44 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8095 	beq.w	8004d44 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d04e      	beq.n	8004cdc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004c48:	8a3b      	ldrh	r3, [r7, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8098 	beq.w	8004d80 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c54:	8a3a      	ldrh	r2, [r7, #16]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	f080 8092 	bcs.w	8004d80 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8a3a      	ldrh	r2, [r7, #16]
 8004c60:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d02b      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c7a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c9a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0210 	bic.w	r2, r2, #16
 8004cb8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fd f8db 	bl	8001e7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f86d 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004cda:	e051      	b.n	8004d80 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d047      	beq.n	8004d84 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004cf4:	8a7b      	ldrh	r3, [r7, #18]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d044      	beq.n	8004d84 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d08:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0210 	bic.w	r2, r2, #16
 8004d36:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d38:	8a7b      	ldrh	r3, [r7, #18]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f839 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d42:	e01f      	b.n	8004d84 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d008      	beq.n	8004d60 <HAL_UART_IRQHandler+0x324>
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f8af 	bl	8004ebc <UART_Transmit_IT>
    return;
 8004d5e:	e012      	b.n	8004d86 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00d      	beq.n	8004d86 <HAL_UART_IRQHandler+0x34a>
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f8f0 	bl	8004f5a <UART_EndTransmit_IT>
    return;
 8004d7a:	e004      	b.n	8004d86 <HAL_UART_IRQHandler+0x34a>
    return;
 8004d7c:	bf00      	nop
 8004d7e:	e002      	b.n	8004d86 <HAL_UART_IRQHandler+0x34a>
      return;
 8004d80:	bf00      	nop
 8004d82:	e000      	b.n	8004d86 <HAL_UART_IRQHandler+0x34a>
      return;
 8004d84:	bf00      	nop
  }
}
 8004d86:	3728      	adds	r7, #40	; 0x28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	08004e95 	.word	0x08004e95

08004d90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr

08004da2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr

08004db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2222      	movs	r2, #34	; 0x22
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e0e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0220 	orr.w	r2, r2, #32
 8004e2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d107      	bne.n	8004e7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0210 	bic.w	r2, r2, #16
 8004e7a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f7ff ff77 	bl	8004da2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b21      	cmp	r3, #33	; 0x21
 8004ece:	d13e      	bne.n	8004f4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed8:	d114      	bne.n	8004f04 <UART_Transmit_IT+0x48>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d110      	bne.n	8004f04 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ef6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	621a      	str	r2, [r3, #32]
 8004f02:	e008      	b.n	8004f16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	1c59      	adds	r1, r3, #1
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6211      	str	r1, [r2, #32]
 8004f0e:	781a      	ldrb	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4619      	mov	r1, r3
 8004f24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10f      	bne.n	8004f4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e000      	b.n	8004f50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
  }
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff ff08 	bl	8004d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b086      	sub	sp, #24
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b22      	cmp	r3, #34	; 0x22
 8004f9c:	f040 8099 	bne.w	80050d2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa8:	d117      	bne.n	8004fda <UART_Receive_IT+0x50>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d113      	bne.n	8004fda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	1c9a      	adds	r2, r3, #2
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fd8:	e026      	b.n	8005028 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fec:	d007      	beq.n	8004ffe <UART_Receive_IT+0x74>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <UART_Receive_IT+0x82>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	e008      	b.n	800501e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005018:	b2da      	uxtb	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29b      	uxth	r3, r3
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	4619      	mov	r1, r3
 8005036:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005038:	2b00      	cmp	r3, #0
 800503a:	d148      	bne.n	80050ce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0220 	bic.w	r2, r2, #32
 800504a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800505a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	2b01      	cmp	r3, #1
 800507a:	d123      	bne.n	80050c4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0210 	bic.w	r2, r2, #16
 8005090:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b10      	cmp	r3, #16
 800509e:	d10a      	bne.n	80050b6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050ba:	4619      	mov	r1, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff fe79 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
 80050c2:	e002      	b.n	80050ca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7fc fa41 	bl	800154c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	e002      	b.n	80050d4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e000      	b.n	80050d4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
  }
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005116:	f023 030c 	bic.w	r3, r3, #12
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	430b      	orrs	r3, r1
 8005122:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a2c      	ldr	r2, [pc, #176]	; (80051f0 <UART_SetConfig+0x114>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d103      	bne.n	800514c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005144:	f7fe fa2c 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	e002      	b.n	8005152 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800514c:	f7fe fa14 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8005150:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009a      	lsls	r2, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	4a22      	ldr	r2, [pc, #136]	; (80051f4 <UART_SetConfig+0x118>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	0119      	lsls	r1, r3, #4
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	009a      	lsls	r2, r3, #2
 800517c:	441a      	add	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	fbb2 f2f3 	udiv	r2, r2, r3
 8005188:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <UART_SetConfig+0x118>)
 800518a:	fba3 0302 	umull	r0, r3, r3, r2
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2064      	movs	r0, #100	; 0x64
 8005192:	fb00 f303 	mul.w	r3, r0, r3
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	3332      	adds	r3, #50	; 0x32
 800519c:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <UART_SetConfig+0x118>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a8:	4419      	add	r1, r3
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009a      	lsls	r2, r3, #2
 80051b4:	441a      	add	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c0:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <UART_SetConfig+0x118>)
 80051c2:	fba3 0302 	umull	r0, r3, r3, r2
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	2064      	movs	r0, #100	; 0x64
 80051ca:	fb00 f303 	mul.w	r3, r0, r3
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	3332      	adds	r3, #50	; 0x32
 80051d4:	4a07      	ldr	r2, [pc, #28]	; (80051f4 <UART_SetConfig+0x118>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	f003 020f 	and.w	r2, r3, #15
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	440a      	add	r2, r1
 80051e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40013800 	.word	0x40013800
 80051f4:	51eb851f 	.word	0x51eb851f

080051f8 <__libc_init_array>:
 80051f8:	b570      	push	{r4, r5, r6, lr}
 80051fa:	2600      	movs	r6, #0
 80051fc:	4d0c      	ldr	r5, [pc, #48]	; (8005230 <__libc_init_array+0x38>)
 80051fe:	4c0d      	ldr	r4, [pc, #52]	; (8005234 <__libc_init_array+0x3c>)
 8005200:	1b64      	subs	r4, r4, r5
 8005202:	10a4      	asrs	r4, r4, #2
 8005204:	42a6      	cmp	r6, r4
 8005206:	d109      	bne.n	800521c <__libc_init_array+0x24>
 8005208:	f000 f822 	bl	8005250 <_init>
 800520c:	2600      	movs	r6, #0
 800520e:	4d0a      	ldr	r5, [pc, #40]	; (8005238 <__libc_init_array+0x40>)
 8005210:	4c0a      	ldr	r4, [pc, #40]	; (800523c <__libc_init_array+0x44>)
 8005212:	1b64      	subs	r4, r4, r5
 8005214:	10a4      	asrs	r4, r4, #2
 8005216:	42a6      	cmp	r6, r4
 8005218:	d105      	bne.n	8005226 <__libc_init_array+0x2e>
 800521a:	bd70      	pop	{r4, r5, r6, pc}
 800521c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005220:	4798      	blx	r3
 8005222:	3601      	adds	r6, #1
 8005224:	e7ee      	b.n	8005204 <__libc_init_array+0xc>
 8005226:	f855 3b04 	ldr.w	r3, [r5], #4
 800522a:	4798      	blx	r3
 800522c:	3601      	adds	r6, #1
 800522e:	e7f2      	b.n	8005216 <__libc_init_array+0x1e>
 8005230:	08005290 	.word	0x08005290
 8005234:	08005290 	.word	0x08005290
 8005238:	08005290 	.word	0x08005290
 800523c:	08005294 	.word	0x08005294

08005240 <memset>:
 8005240:	4603      	mov	r3, r0
 8005242:	4402      	add	r2, r0
 8005244:	4293      	cmp	r3, r2
 8005246:	d100      	bne.n	800524a <memset+0xa>
 8005248:	4770      	bx	lr
 800524a:	f803 1b01 	strb.w	r1, [r3], #1
 800524e:	e7f9      	b.n	8005244 <memset+0x4>

08005250 <_init>:
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005252:	bf00      	nop
 8005254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005256:	bc08      	pop	{r3}
 8005258:	469e      	mov	lr, r3
 800525a:	4770      	bx	lr

0800525c <_fini>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	bf00      	nop
 8005260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005262:	bc08      	pop	{r3}
 8005264:	469e      	mov	lr, r3
 8005266:	4770      	bx	lr
