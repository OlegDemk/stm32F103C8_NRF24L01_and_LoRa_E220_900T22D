
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000658c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  08006698  08006698  00016698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff0  08006ff0  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08006ff0  08006ff0  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ff0  08006ff0  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff0  08006ff0  00016ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ff4  08006ff4  00016ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08006ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b8  20000030  08007028  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e8  08007028  000209e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e47  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b8b  00000000  00000000  00035ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00038a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  00039d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003037  00000000  00000000  0003af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f7d  00000000  00000000  0003df7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008feb1  00000000  00000000  00054efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4dad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005078  00000000  00000000  000e4e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08006680 	.word	0x08006680

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08006680 	.word	0x08006680

0800014c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000024 	.word	0x20000024
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001a4:	f003 fb19 	bl	80037da <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001b8:	f004 fe9d 	bl	8004ef6 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001d8:	f004 fe8d 	bl	8004ef6 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001e2:	f003 fafa 	bl	80037da <HAL_GPIO_WritePin>
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	2000098c 	.word	0x2000098c

080001f8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
 8000218:	f003 fadf 	bl	80037da <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
 8000226:	f004 fc19 	bl	8004a5c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
 8000234:	f004 fc12 	bl	8004a5c <HAL_SPI_Transmit>
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
 800023e:	f003 facc 	bl	80037da <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	2000098c 	.word	0x2000098c

08000254 <NRF24_Read_Buf>:
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
  CS_OFF;
}
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	4613      	mov	r3, r2
 8000262:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000264:	2200      	movs	r2, #0
 8000266:	2110      	movs	r1, #16
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <NRF24_Read_Buf+0x4c>)
 800026a:	f003 fab6 	bl	80037da <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800026e:	1df9      	adds	r1, r7, #7
 8000270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000274:	2201      	movs	r2, #1
 8000276:	480b      	ldr	r0, [pc, #44]	; (80002a4 <NRF24_Read_Buf+0x50>)
 8000278:	f004 fbf0 	bl	8004a5c <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 800027c:	79bb      	ldrb	r3, [r7, #6]
 800027e:	b29a      	uxth	r2, r3
 8000280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000284:	6839      	ldr	r1, [r7, #0]
 8000286:	4807      	ldr	r0, [pc, #28]	; (80002a4 <NRF24_Read_Buf+0x50>)
 8000288:	f004 fd24 	bl	8004cd4 <HAL_SPI_Receive>
  CS_OFF;
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_Read_Buf+0x4c>)
 8000292:	f003 faa2 	bl	80037da <HAL_GPIO_WritePin>
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800
 80002a4:	2000098c 	.word	0x2000098c

080002a8 <IRQ_Callback>:
	status = read_config_registers();
	return status;
}
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 80002ae:	2301      	movs	r3, #1
 80002b0:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ba:	4814      	ldr	r0, [pc, #80]	; (800030c <IRQ_Callback+0x64>)
 80002bc:	f003 faa5 	bl	800380a <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80002c0:	200a      	movs	r0, #10
 80002c2:	f7ff ff43 	bl	800014c <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 80002c6:	2007      	movs	r0, #7
 80002c8:	f7ff ff62 	bl	8000190 <NRF24_ReadReg>
 80002cc:	4603      	mov	r3, r0
 80002ce:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d013      	beq.n	8000302 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	085b      	lsrs	r3, r3, #1
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	f003 0307 	and.w	r3, r3, #7
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <IRQ_Callback+0x68>)
 80002e8:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80002ea:	220a      	movs	r2, #10
 80002ec:	4909      	ldr	r1, [pc, #36]	; (8000314 <IRQ_Callback+0x6c>)
 80002ee:	2061      	movs	r0, #97	; 0x61
 80002f0:	f7ff ffb0 	bl	8000254 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 80002f4:	2140      	movs	r1, #64	; 0x40
 80002f6:	2007      	movs	r0, #7
 80002f8:	f7ff ff7e 	bl	80001f8 <NRF24_WriteReg>
		rx_flag = 1;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <IRQ_Callback+0x70>)
 80002fe:	2201      	movs	r2, #1
 8000300:	701a      	strb	r2, [r3, #0]
	}
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40011000 	.word	0x40011000
 8000310:	20000057 	.word	0x20000057
 8000314:	2000004c 	.word	0x2000004c
 8000318:	20000056 	.word	0x20000056

0800031c <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8000320:	2000      	movs	r0, #0
 8000322:	f000 f889 	bl	8000438 <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 8000326:	f000 f8a9 	bl	800047c <ssd1306_UpdateScreen>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af04      	add	r7, sp, #16
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800033a:	230a      	movs	r3, #10
 800033c:	9302      	str	r3, [sp, #8]
 800033e:	2301      	movs	r3, #1
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2301      	movs	r3, #1
 8000348:	2200      	movs	r2, #0
 800034a:	2178      	movs	r1, #120	; 0x78
 800034c:	4803      	ldr	r0, [pc, #12]	; (800035c <ssd1306_WriteCommand+0x2c>)
 800034e:	f003 fbd1 	bl	8003af4 <HAL_I2C_Mem_Write>
}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200008ac 	.word	0x200008ac

08000360 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000364:	2064      	movs	r0, #100	; 0x64
 8000366:	f002 febb 	bl	80030e0 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800036a:	20ae      	movs	r0, #174	; 0xae
 800036c:	f7ff ffe0 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000370:	2020      	movs	r0, #32
 8000372:	f7ff ffdd 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000376:	2010      	movs	r0, #16
 8000378:	f7ff ffda 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800037c:	20b0      	movs	r0, #176	; 0xb0
 800037e:	f7ff ffd7 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000382:	20c8      	movs	r0, #200	; 0xc8
 8000384:	f7ff ffd4 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000388:	2000      	movs	r0, #0
 800038a:	f7ff ffd1 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800038e:	2010      	movs	r0, #16
 8000390:	f7ff ffce 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000394:	2040      	movs	r0, #64	; 0x40
 8000396:	f7ff ffcb 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800039a:	2081      	movs	r0, #129	; 0x81
 800039c:	f7ff ffc8 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80003a0:	20ff      	movs	r0, #255	; 0xff
 80003a2:	f7ff ffc5 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80003a6:	20a1      	movs	r0, #161	; 0xa1
 80003a8:	f7ff ffc2 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80003ac:	20a6      	movs	r0, #166	; 0xa6
 80003ae:	f7ff ffbf 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80003b2:	20a8      	movs	r0, #168	; 0xa8
 80003b4:	f7ff ffbc 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80003b8:	203f      	movs	r0, #63	; 0x3f
 80003ba:	f7ff ffb9 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80003be:	20a4      	movs	r0, #164	; 0xa4
 80003c0:	f7ff ffb6 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80003c4:	20d3      	movs	r0, #211	; 0xd3
 80003c6:	f7ff ffb3 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff ffb0 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80003d0:	20d5      	movs	r0, #213	; 0xd5
 80003d2:	f7ff ffad 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80003d6:	20f0      	movs	r0, #240	; 0xf0
 80003d8:	f7ff ffaa 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80003dc:	20d9      	movs	r0, #217	; 0xd9
 80003de:	f7ff ffa7 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80003e2:	2022      	movs	r0, #34	; 0x22
 80003e4:	f7ff ffa4 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80003e8:	20da      	movs	r0, #218	; 0xda
 80003ea:	f7ff ffa1 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80003ee:	2012      	movs	r0, #18
 80003f0:	f7ff ff9e 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80003f4:	20db      	movs	r0, #219	; 0xdb
 80003f6:	f7ff ff9b 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80003fa:	2020      	movs	r0, #32
 80003fc:	f7ff ff98 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000400:	208d      	movs	r0, #141	; 0x8d
 8000402:	f7ff ff95 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000406:	2014      	movs	r0, #20
 8000408:	f7ff ff92 	bl	8000330 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800040c:	20af      	movs	r0, #175	; 0xaf
 800040e:	f7ff ff8f 	bl	8000330 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000412:	2000      	movs	r0, #0
 8000414:	f000 f810 	bl	8000438 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000418:	f000 f830 	bl	800047c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <ssd1306_Init+0xd4>)
 800041e:	2200      	movs	r2, #0
 8000420:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <ssd1306_Init+0xd4>)
 8000424:	2200      	movs	r2, #0
 8000426:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000428:	4b02      	ldr	r3, [pc, #8]	; (8000434 <ssd1306_Init+0xd4>)
 800042a:	2201      	movs	r2, #1
 800042c:	715a      	strb	r2, [r3, #5]

	return 1;
 800042e:	2301      	movs	r3, #1
}
 8000430:	4618      	mov	r0, r3
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000458 	.word	0x20000458

08000438 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	e00d      	b.n	8000464 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d101      	bne.n	8000452 <ssd1306_Fill+0x1a>
 800044e:	2100      	movs	r1, #0
 8000450:	e000      	b.n	8000454 <ssd1306_Fill+0x1c>
 8000452:	21ff      	movs	r1, #255	; 0xff
 8000454:	4a08      	ldr	r2, [pc, #32]	; (8000478 <ssd1306_Fill+0x40>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	4413      	add	r3, r2
 800045a:	460a      	mov	r2, r1
 800045c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	3301      	adds	r3, #1
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800046a:	d3ed      	bcc.n	8000448 <ssd1306_Fill+0x10>
	}
}
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	20000058 	.word	0x20000058

0800047c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000482:	2300      	movs	r3, #0
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	e01d      	b.n	80004c4 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	3b50      	subs	r3, #80	; 0x50
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff4e 	bl	8000330 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000494:	2000      	movs	r0, #0
 8000496:	f7ff ff4b 	bl	8000330 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800049a:	2010      	movs	r0, #16
 800049c:	f7ff ff48 	bl	8000330 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	01db      	lsls	r3, r3, #7
 80004a4:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <ssd1306_UpdateScreen+0x58>)
 80004a6:	4413      	add	r3, r2
 80004a8:	2264      	movs	r2, #100	; 0x64
 80004aa:	9202      	str	r2, [sp, #8]
 80004ac:	2280      	movs	r2, #128	; 0x80
 80004ae:	9201      	str	r2, [sp, #4]
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	2301      	movs	r3, #1
 80004b4:	2240      	movs	r2, #64	; 0x40
 80004b6:	2178      	movs	r1, #120	; 0x78
 80004b8:	4807      	ldr	r0, [pc, #28]	; (80004d8 <ssd1306_UpdateScreen+0x5c>)
 80004ba:	f003 fb1b 	bl	8003af4 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	3301      	adds	r3, #1
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	2b07      	cmp	r3, #7
 80004c8:	d9de      	bls.n	8000488 <ssd1306_UpdateScreen+0xc>
	}
}
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000058 	.word	0x20000058
 80004d8:	200008ac 	.word	0x200008ac

080004dc <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	460b      	mov	r3, r1
 80004e8:	71bb      	strb	r3, [r7, #6]
 80004ea:	4613      	mov	r3, r2
 80004ec:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80004ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	db48      	blt.n	8000588 <ssd1306_DrawPixel+0xac>
 80004f6:	79bb      	ldrb	r3, [r7, #6]
 80004f8:	2b3f      	cmp	r3, #63	; 0x3f
 80004fa:	d845      	bhi.n	8000588 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80004fc:	4b25      	ldr	r3, [pc, #148]	; (8000594 <ssd1306_DrawPixel+0xb8>)
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d006      	beq.n	8000512 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000504:	797b      	ldrb	r3, [r7, #5]
 8000506:	2b00      	cmp	r3, #0
 8000508:	bf0c      	ite	eq
 800050a:	2301      	moveq	r3, #1
 800050c:	2300      	movne	r3, #0
 800050e:	b2db      	uxtb	r3, r3
 8000510:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000512:	797b      	ldrb	r3, [r7, #5]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d11a      	bne.n	800054e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000518:	79fa      	ldrb	r2, [r7, #7]
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	08db      	lsrs	r3, r3, #3
 800051e:	b2d8      	uxtb	r0, r3
 8000520:	4603      	mov	r3, r0
 8000522:	01db      	lsls	r3, r3, #7
 8000524:	4413      	add	r3, r2
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 8000528:	5cd3      	ldrb	r3, [r2, r3]
 800052a:	b25a      	sxtb	r2, r3
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	f003 0307 	and.w	r3, r3, #7
 8000532:	2101      	movs	r1, #1
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	b25b      	sxtb	r3, r3
 800053a:	4313      	orrs	r3, r2
 800053c:	b259      	sxtb	r1, r3
 800053e:	79fa      	ldrb	r2, [r7, #7]
 8000540:	4603      	mov	r3, r0
 8000542:	01db      	lsls	r3, r3, #7
 8000544:	4413      	add	r3, r2
 8000546:	b2c9      	uxtb	r1, r1
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 800054a:	54d1      	strb	r1, [r2, r3]
 800054c:	e01d      	b.n	800058a <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	08db      	lsrs	r3, r3, #3
 8000554:	b2d8      	uxtb	r0, r3
 8000556:	4603      	mov	r3, r0
 8000558:	01db      	lsls	r3, r3, #7
 800055a:	4413      	add	r3, r2
 800055c:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 800055e:	5cd3      	ldrb	r3, [r2, r3]
 8000560:	b25a      	sxtb	r2, r3
 8000562:	79bb      	ldrb	r3, [r7, #6]
 8000564:	f003 0307 	and.w	r3, r3, #7
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	b25b      	sxtb	r3, r3
 8000570:	43db      	mvns	r3, r3
 8000572:	b25b      	sxtb	r3, r3
 8000574:	4013      	ands	r3, r2
 8000576:	b259      	sxtb	r1, r3
 8000578:	79fa      	ldrb	r2, [r7, #7]
 800057a:	4603      	mov	r3, r0
 800057c:	01db      	lsls	r3, r3, #7
 800057e:	4413      	add	r3, r2
 8000580:	b2c9      	uxtb	r1, r1
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <ssd1306_DrawPixel+0xbc>)
 8000584:	54d1      	strb	r1, [r2, r3]
 8000586:	e000      	b.n	800058a <ssd1306_DrawPixel+0xae>
		return;
 8000588:	bf00      	nop
	}
}
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000458 	.word	0x20000458
 8000598:	20000058 	.word	0x20000058

0800059c <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b089      	sub	sp, #36	; 0x24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4604      	mov	r4, r0
 80005a4:	1d38      	adds	r0, r7, #4
 80005a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80005aa:	461a      	mov	r2, r3
 80005ac:	4623      	mov	r3, r4
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	4613      	mov	r3, r2
 80005b2:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80005b4:	4b38      	ldr	r3, [pc, #224]	; (8000698 <ssd1306_WriteChar+0xfc>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	793b      	ldrb	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	2b7f      	cmp	r3, #127	; 0x7f
 80005c0:	dc06      	bgt.n	80005d0 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80005c2:	4b35      	ldr	r3, [pc, #212]	; (8000698 <ssd1306_WriteChar+0xfc>)
 80005c4:	885b      	ldrh	r3, [r3, #2]
 80005c6:	461a      	mov	r2, r3
 80005c8:	797b      	ldrb	r3, [r7, #5]
 80005ca:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80005cc:	2b3f      	cmp	r3, #63	; 0x3f
 80005ce:	dd01      	ble.n	80005d4 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	e05d      	b.n	8000690 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
 80005d8:	e04c      	b.n	8000674 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	3b20      	subs	r3, #32
 80005e0:	7979      	ldrb	r1, [r7, #5]
 80005e2:	fb01 f303 	mul.w	r3, r1, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	440b      	add	r3, r1
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
 80005f8:	e034      	b.n	8000664 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000606:	2b00      	cmp	r3, #0
 8000608:	d012      	beq.n	8000630 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <ssd1306_WriteChar+0xfc>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4413      	add	r3, r2
 8000616:	b2d8      	uxtb	r0, r3
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <ssd1306_WriteChar+0xfc>)
 800061a:	885b      	ldrh	r3, [r3, #2]
 800061c:	b2da      	uxtb	r2, r3
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4413      	add	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	7bba      	ldrb	r2, [r7, #14]
 8000628:	4619      	mov	r1, r3
 800062a:	f7ff ff57 	bl	80004dc <ssd1306_DrawPixel>
 800062e:	e016      	b.n	800065e <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <ssd1306_WriteChar+0xfc>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4413      	add	r3, r2
 800063c:	b2d8      	uxtb	r0, r3
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <ssd1306_WriteChar+0xfc>)
 8000640:	885b      	ldrh	r3, [r3, #2]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4413      	add	r3, r2
 800064a:	b2d9      	uxtb	r1, r3
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	2b00      	cmp	r3, #0
 8000650:	bf0c      	ite	eq
 8000652:	2301      	moveq	r3, #1
 8000654:	2300      	movne	r3, #0
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	f7ff ff3f 	bl	80004dc <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	3301      	adds	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	793b      	ldrb	r3, [r7, #4]
 8000666:	461a      	mov	r2, r3
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4293      	cmp	r3, r2
 800066c:	d3c5      	bcc.n	80005fa <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	3301      	adds	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	797b      	ldrb	r3, [r7, #5]
 8000676:	461a      	mov	r2, r3
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	4293      	cmp	r3, r2
 800067c:	d3ad      	bcc.n	80005da <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <ssd1306_WriteChar+0xfc>)
 8000680:	881a      	ldrh	r2, [r3, #0]
 8000682:	793b      	ldrb	r3, [r7, #4]
 8000684:	b29b      	uxth	r3, r3
 8000686:	4413      	add	r3, r2
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b03      	ldr	r3, [pc, #12]	; (8000698 <ssd1306_WriteChar+0xfc>)
 800068c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3724      	adds	r7, #36	; 0x24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd90      	pop	{r4, r7, pc}
 8000698:	20000458 	.word	0x20000458

0800069c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	1d38      	adds	r0, r7, #4
 80006a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80006aa:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80006ac:	e012      	b.n	80006d4 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	7818      	ldrb	r0, [r3, #0]
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	1d3a      	adds	r2, r7, #4
 80006b6:	ca06      	ldmia	r2, {r1, r2}
 80006b8:	f7ff ff70 	bl	800059c <ssd1306_WriteChar>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d002      	beq.n	80006ce <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	e008      	b.n	80006e0 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
	while (*str)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1e8      	bne.n	80006ae <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	781b      	ldrb	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <ssd1306_SetCursor+0x2c>)
 80006fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <ssd1306_SetCursor+0x2c>)
 8000706:	805a      	strh	r2, [r3, #2]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000458 	.word	0x20000458

08000718 <ssd1306_Line>:

void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	4604      	mov	r4, r0
 8000720:	4608      	mov	r0, r1
 8000722:	4611      	mov	r1, r2
 8000724:	461a      	mov	r2, r3
 8000726:	4623      	mov	r3, r4
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	4603      	mov	r3, r0
 800072c:	71bb      	strb	r3, [r7, #6]
 800072e:	460b      	mov	r3, r1
 8000730:	717b      	strb	r3, [r7, #5]
 8000732:	4613      	mov	r3, r2
 8000734:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8000736:	797a      	ldrb	r2, [r7, #5]
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	bfb8      	it	lt
 8000740:	425b      	neglt	r3, r3
 8000742:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8000744:	793a      	ldrb	r2, [r7, #4]
 8000746:	79bb      	ldrb	r3, [r7, #6]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	bfb8      	it	lt
 800074e:	425b      	neglt	r3, r3
 8000750:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	797b      	ldrb	r3, [r7, #5]
 8000756:	429a      	cmp	r2, r3
 8000758:	d201      	bcs.n	800075e <ssd1306_Line+0x46>
 800075a:	2301      	movs	r3, #1
 800075c:	e001      	b.n	8000762 <ssd1306_Line+0x4a>
 800075e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000762:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	793b      	ldrb	r3, [r7, #4]
 8000768:	429a      	cmp	r2, r3
 800076a:	d201      	bcs.n	8000770 <ssd1306_Line+0x58>
 800076c:	2301      	movs	r3, #1
 800076e:	e001      	b.n	8000774 <ssd1306_Line+0x5c>
 8000770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000774:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 800077e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000782:	7939      	ldrb	r1, [r7, #4]
 8000784:	797b      	ldrb	r3, [r7, #5]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fea8 	bl	80004dc <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 800078c:	e024      	b.n	80007d8 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 800078e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000792:	79b9      	ldrb	r1, [r7, #6]
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fea0 	bl	80004dc <ssd1306_DrawPixel>
    error2 = error * 2;
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	425b      	negs	r3, r3
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dd08      	ble.n	80007be <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80007ac:	69fa      	ldr	r2, [r7, #28]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4413      	add	r3, r2
 80007bc:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	da08      	bge.n	80007d8 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80007c6:	69fa      	ldr	r2, [r7, #28]
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	4413      	add	r3, r2
 80007cc:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	4413      	add	r3, r2
 80007d6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	797b      	ldrb	r3, [r7, #5]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d1d6      	bne.n	800078e <ssd1306_Line+0x76>
 80007e0:	79ba      	ldrb	r2, [r7, #6]
 80007e2:	793b      	ldrb	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d1d2      	bne.n	800078e <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80007e8:	bf00      	nop
}
 80007ea:	3724      	adds	r7, #36	; 0x24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	4604      	mov	r4, r0
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	461a      	mov	r2, r3
 80007fe:	4623      	mov	r3, r4
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	4603      	mov	r3, r0
 8000804:	71bb      	strb	r3, [r7, #6]
 8000806:	460b      	mov	r3, r1
 8000808:	717b      	strb	r3, [r7, #5]
 800080a:	4613      	mov	r3, r2
 800080c:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 800080e:	79bc      	ldrb	r4, [r7, #6]
 8000810:	797a      	ldrb	r2, [r7, #5]
 8000812:	79b9      	ldrb	r1, [r7, #6]
 8000814:	79f8      	ldrb	r0, [r7, #7]
 8000816:	7e3b      	ldrb	r3, [r7, #24]
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	4623      	mov	r3, r4
 800081c:	f7ff ff7c 	bl	8000718 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8000820:	793c      	ldrb	r4, [r7, #4]
 8000822:	797a      	ldrb	r2, [r7, #5]
 8000824:	79b9      	ldrb	r1, [r7, #6]
 8000826:	7978      	ldrb	r0, [r7, #5]
 8000828:	7e3b      	ldrb	r3, [r7, #24]
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	4623      	mov	r3, r4
 800082e:	f7ff ff73 	bl	8000718 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8000832:	793c      	ldrb	r4, [r7, #4]
 8000834:	79fa      	ldrb	r2, [r7, #7]
 8000836:	7939      	ldrb	r1, [r7, #4]
 8000838:	7978      	ldrb	r0, [r7, #5]
 800083a:	7e3b      	ldrb	r3, [r7, #24]
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	4623      	mov	r3, r4
 8000840:	f7ff ff6a 	bl	8000718 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8000844:	79bc      	ldrb	r4, [r7, #6]
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	7939      	ldrb	r1, [r7, #4]
 800084a:	79f8      	ldrb	r0, [r7, #7]
 800084c:	7e3b      	ldrb	r3, [r7, #24]
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	4623      	mov	r3, r4
 8000852:	f7ff ff61 	bl	8000718 <ssd1306_Line>

  return;
 8000856:	bf00      	nop
}
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bd90      	pop	{r4, r7, pc}

0800085e <ssd1306FillRect>:
void ssd1306FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
 800085e:	b590      	push	{r4, r7, lr}
 8000860:	b085      	sub	sp, #20
 8000862:	af00      	add	r7, sp, #0
 8000864:	4604      	mov	r4, r0
 8000866:	4608      	mov	r0, r1
 8000868:	4611      	mov	r1, r2
 800086a:	461a      	mov	r2, r3
 800086c:	4623      	mov	r3, r4
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4603      	mov	r3, r0
 8000872:	71bb      	strb	r3, [r7, #6]
 8000874:	460b      	mov	r3, r1
 8000876:	717b      	strb	r3, [r7, #5]
 8000878:	4613      	mov	r3, r2
 800087a:	713b      	strb	r3, [r7, #4]
    uint8_t x0, x1, y1;

    x0 = x;
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	73fb      	strb	r3, [r7, #15]
    x1 = x + w;
 8000880:	79fa      	ldrb	r2, [r7, #7]
 8000882:	797b      	ldrb	r3, [r7, #5]
 8000884:	4413      	add	r3, r2
 8000886:	73bb      	strb	r3, [r7, #14]
    y1 = y + h;
 8000888:	79ba      	ldrb	r2, [r7, #6]
 800088a:	793b      	ldrb	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	737b      	strb	r3, [r7, #13]
    for(; y < y1; y++)
 8000890:	e013      	b.n	80008ba <ssd1306FillRect+0x5c>
        for(x = x0; x < x1; x++)
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	e009      	b.n	80008ac <ssd1306FillRect+0x4e>
        	ssd1306_DrawPixel(x, y, color);
 8000898:	8c3b      	ldrh	r3, [r7, #32]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	79b9      	ldrb	r1, [r7, #6]
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe1b 	bl	80004dc <ssd1306_DrawPixel>
        for(x = x0; x < x1; x++)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	3301      	adds	r3, #1
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	79fa      	ldrb	r2, [r7, #7]
 80008ae:	7bbb      	ldrb	r3, [r7, #14]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3f1      	bcc.n	8000898 <ssd1306FillRect+0x3a>
    for(; y < y1; y++)
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	3301      	adds	r3, #1
 80008b8:	71bb      	strb	r3, [r7, #6]
 80008ba:	79ba      	ldrb	r2, [r7, #6]
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d3e7      	bcc.n	8000892 <ssd1306FillRect+0x34>
            //ssd1306DrawPixel( x, y, color, layer);
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd90      	pop	{r4, r7, pc}

080008cc <scroll_bar>:
/*
This function print scrollbar on right part of OLED.

 */
void scroll_bar(void)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af02      	add	r7, sp, #8
	// Work size scrollbar
	uint16_t start_x_scrollbar = 124;
 80008d2:	237c      	movs	r3, #124	; 0x7c
 80008d4:	81fb      	strh	r3, [r7, #14]
	uint16_t start_y_scrollbar = 17;
 80008d6:	2311      	movs	r3, #17
 80008d8:	81bb      	strh	r3, [r7, #12]
	uint16_t active_width = 3;
 80008da:	2303      	movs	r3, #3
 80008dc:	817b      	strh	r3, [r7, #10]
	uint16_t lenght_all_scrollbar = 48;
 80008de:	2330      	movs	r3, #48	; 0x30
 80008e0:	813b      	strh	r3, [r7, #8]

	uint8_t menu_items_counter = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	75fb      	strb	r3, [r7, #23]
	// 1. Скопіювати показник на меню в буффер
	// 2. Піднятися до останнього елемента меню
	// 3. Інкрементувати лічильник елементів меню, до останього елемента меню
	// 4. записати нараховані емементи в

	MenuItem_t * currentItem_buff = currentItem;
 80008e6:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <scroll_bar+0xe4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	613b      	str	r3, [r7, #16]

	if ((currentItem_buff -> up) != 0)							// Step up if existing up
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d006      	beq.n	8000902 <scroll_bar+0x36>
	{
		do{
			currentItem_buff = currentItem_buff -> up;			// Step up to the top of menu
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	613b      	str	r3, [r7, #16]
		}
		while ((currentItem_buff -> up) != 0);					// If the top of item doesen't found
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1f8      	bne.n	80008f4 <scroll_bar+0x28>
	}

	if ((currentItem_buff -> up) == 0)							// If found top of menu item
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d109      	bne.n	800091e <scroll_bar+0x52>
	{
		do{
			currentItem_buff = currentItem_buff -> down;
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	613b      	str	r3, [r7, #16]
			menu_items_counter++;								// Count how many list on menu
 8000910:	7dfb      	ldrb	r3, [r7, #23]
 8000912:	3301      	adds	r3, #1
 8000914:	75fb      	strb	r3, [r7, #23]
		}
		while ((currentItem_buff -> down) != 0);
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d1f5      	bne.n	800090a <scroll_bar+0x3e>
	}
	 // Очистити частину керану де є скролбар
	ssd1306FillRect(start_x_scrollbar, start_y_scrollbar, active_width, lenght_all_scrollbar - 2, Black);
 800091e:	89fb      	ldrh	r3, [r7, #14]
 8000920:	b2d8      	uxtb	r0, r3
 8000922:	89bb      	ldrh	r3, [r7, #12]
 8000924:	b2d9      	uxtb	r1, r3
 8000926:	897b      	ldrh	r3, [r7, #10]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	893b      	ldrh	r3, [r7, #8]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	3b02      	subs	r3, #2
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2400      	movs	r4, #0
 8000934:	9400      	str	r4, [sp, #0]
 8000936:	f7ff ff92 	bl	800085e <ssd1306FillRect>

	// Вивести подовгастий квадрат на край екрану
	ssd1306_DrawRectangle(start_x_scrollbar - 1, start_y_scrollbar - 1, start_x_scrollbar + active_width, 63, White);
 800093a:	89fb      	ldrh	r3, [r7, #14]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	3b01      	subs	r3, #1
 8000940:	b2d8      	uxtb	r0, r3
 8000942:	89bb      	ldrh	r3, [r7, #12]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	3b01      	subs	r3, #1
 8000948:	b2d9      	uxtb	r1, r3
 800094a:	89fb      	ldrh	r3, [r7, #14]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	897b      	ldrh	r3, [r7, #10]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4413      	add	r3, r2
 8000954:	b2da      	uxtb	r2, r3
 8000956:	2301      	movs	r3, #1
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	233f      	movs	r3, #63	; 0x3f
 800095c:	f7ff ff48 	bl	80007f0 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8000960:	f7ff fd8c 	bl	800047c <ssd1306_UpdateScreen>

	 // Print scroling line
	int id_for_line = currentItem -> id;				// Скопіювати порядковий номер меню
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <scroll_bar+0xe4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	7c1b      	ldrb	r3, [r3, #16]
 800096a:	607b      	str	r3, [r7, #4]
	// Print scroling line
	uint16_t line_lenght = (lenght_all_scrollbar/menu_items_counter + 1);					   	// Довжина лінії яка відповідає одному меню
 800096c:	893a      	ldrh	r2, [r7, #8]
 800096e:	7dfb      	ldrb	r3, [r7, #23]
 8000970:	fb92 f3f3 	sdiv	r3, r2, r3
 8000974:	b29b      	uxth	r3, r3
 8000976:	3301      	adds	r3, #1
 8000978:	807b      	strh	r3, [r7, #2]
	uint16_t start_lenght = 16 + ((id_for_line - 1)*line_lenght);			// Початок лінії
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3b01      	subs	r3, #1
 800097e:	b29b      	uxth	r3, r3
 8000980:	887a      	ldrh	r2, [r7, #2]
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	b29b      	uxth	r3, r3
 8000988:	3310      	adds	r3, #16
 800098a:	803b      	strh	r3, [r7, #0]
	// Print active scrollbar part (line)
	ssd1306FillRect(start_x_scrollbar, start_lenght, active_width, line_lenght, White);
 800098c:	89fb      	ldrh	r3, [r7, #14]
 800098e:	b2d8      	uxtb	r0, r3
 8000990:	883b      	ldrh	r3, [r7, #0]
 8000992:	b2d9      	uxtb	r1, r3
 8000994:	897b      	ldrh	r3, [r7, #10]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	887b      	ldrh	r3, [r7, #2]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2401      	movs	r4, #1
 800099e:	9400      	str	r4, [sp, #0]
 80009a0:	f7ff ff5d 	bl	800085e <ssd1306FillRect>

	ssd1306_UpdateScreen();
 80009a4:	f7ff fd6a 	bl	800047c <ssd1306_UpdateScreen>
}
 80009a8:	bf00      	nop
 80009aa:	371c      	adds	r7, #28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	20000008 	.word	0x20000008

080009b4 <print_rectangle_on_head>:
// ----------------------------------------------------------------------------------------
void print_rectangle_on_head(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(0, 0, 127 , 15, White);
 80009ba:	2301      	movs	r3, #1
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	230f      	movs	r3, #15
 80009c0:	227f      	movs	r2, #127	; 0x7f
 80009c2:	2100      	movs	r1, #0
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff ff13 	bl	80007f0 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 80009ca:	f7ff fd57 	bl	800047c <ssd1306_UpdateScreen>
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <clear_menu_items>:
// ----------------------------------------------------------------------------------------
// Clear some menu items.
void clear_menu_items (bool first, bool second, bool third, bool fourth)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b089      	sub	sp, #36	; 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4604      	mov	r4, r0
 80009dc:	4608      	mov	r0, r1
 80009de:	4611      	mov	r1, r2
 80009e0:	461a      	mov	r2, r3
 80009e2:	4623      	mov	r3, r4
 80009e4:	71fb      	strb	r3, [r7, #7]
 80009e6:	4603      	mov	r3, r0
 80009e8:	71bb      	strb	r3, [r7, #6]
 80009ea:	460b      	mov	r3, r1
 80009ec:	717b      	strb	r3, [r7, #5]
 80009ee:	4613      	mov	r3, r2
 80009f0:	713b      	strb	r3, [r7, #4]
	uint8_t start_row_x = 15;
 80009f2:	230f      	movs	r3, #15
 80009f4:	77fb      	strb	r3, [r7, #31]
	char str[16] = "              ";   // Must be 15
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <clear_menu_items+0xd4>)
 80009f8:	f107 040c 	add.w	r4, r7, #12
 80009fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009fe:	c407      	stmia	r4!, {r0, r1, r2}
 8000a00:	8023      	strh	r3, [r4, #0]
 8000a02:	3402      	adds	r4, #2
 8000a04:	0c1b      	lsrs	r3, r3, #16
 8000a06:	7023      	strb	r3, [r4, #0]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	76fb      	strb	r3, [r7, #27]

	if(first == true)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00e      	beq.n	8000a30 <clear_menu_items+0x5c>
	{
		ssd1306_SetCursor(start_row_x, first_menu_row);
 8000a12:	4b26      	ldr	r3, [pc, #152]	; (8000aac <clear_menu_items+0xd8>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	7ffb      	ldrb	r3, [r7, #31]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fe63 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <clear_menu_items+0xdc>)
 8000a24:	f107 000c 	add.w	r0, r7, #12
 8000a28:	2301      	movs	r3, #1
 8000a2a:	ca06      	ldmia	r2, {r1, r2}
 8000a2c:	f7ff fe36 	bl	800069c <ssd1306_WriteString>
	}
	if(second == true)
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d00e      	beq.n	8000a54 <clear_menu_items+0x80>
	{
		ssd1306_SetCursor(start_row_x, second_menu_row);
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <clear_menu_items+0xe0>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe51 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000a46:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <clear_menu_items+0xdc>)
 8000a48:	f107 000c 	add.w	r0, r7, #12
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	ca06      	ldmia	r2, {r1, r2}
 8000a50:	f7ff fe24 	bl	800069c <ssd1306_WriteString>
	}
	if(first == true)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00e      	beq.n	8000a78 <clear_menu_items+0xa4>
	{
		ssd1306_SetCursor(start_row_x, third_menu_row);
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <clear_menu_items+0xe4>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	7ffb      	ldrb	r3, [r7, #31]
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe3f 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000a6a:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <clear_menu_items+0xdc>)
 8000a6c:	f107 000c 	add.w	r0, r7, #12
 8000a70:	2301      	movs	r3, #1
 8000a72:	ca06      	ldmia	r2, {r1, r2}
 8000a74:	f7ff fe12 	bl	800069c <ssd1306_WriteString>
	}
	if(fourth == true)
 8000a78:	793b      	ldrb	r3, [r7, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00e      	beq.n	8000a9c <clear_menu_items+0xc8>
	{
		ssd1306_SetCursor(start_row_x, fourth_menu_row);
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <clear_menu_items+0xe8>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	7ffb      	ldrb	r3, [r7, #31]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fe2d 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <clear_menu_items+0xdc>)
 8000a90:	f107 000c 	add.w	r0, r7, #12
 8000a94:	2301      	movs	r3, #1
 8000a96:	ca06      	ldmia	r2, {r1, r2}
 8000a98:	f7ff fe00 	bl	800069c <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8000a9c:	f7ff fcee 	bl	800047c <ssd1306_UpdateScreen>
}
 8000aa0:	bf00      	nop
 8000aa2:	3724      	adds	r7, #36	; 0x24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	08006698 	.word	0x08006698
 8000aac:	20000010 	.word	0x20000010
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000012 	.word	0x20000012
 8000ab8:	20000014 	.word	0x20000014
 8000abc:	20000016 	.word	0x20000016

08000ac0 <print_rows_on_oled_if_up>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_up(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]

	clear_menu_items (true , true , true , true );
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2101      	movs	r1, #1
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff ff7a 	bl	80009d4 <clear_menu_items>

	print_rectangle_on_head();
 8000ae0:	f7ff ff68 	bl	80009b4 <print_rectangle_on_head>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <print_rows_on_oled_if_up+0xd8>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4619      	mov	r1, r3
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff fdfb 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8000af2:	4a2a      	ldr	r2, [pc, #168]	; (8000b9c <print_rows_on_oled_if_up+0xdc>)
 8000af4:	2301      	movs	r3, #1
 8000af6:	ca06      	ldmia	r2, {r1, r2}
 8000af8:	4829      	ldr	r0, [pc, #164]	; (8000ba0 <print_rows_on_oled_if_up+0xe0>)
 8000afa:	f7ff fdcf 	bl	800069c <ssd1306_WriteString>

	MenuItem_t * currentItem_buff_up = currentItem;				// Create buffer on selected current item pointer.
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <print_rows_on_oled_if_up+0xe4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <print_rows_on_oled_if_up+0xd8>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	74fb      	strb	r3, [r7, #19]
 8000b0a:	e035      	b.n	8000b78 <print_rows_on_oled_if_up+0xb8>
	{
		// Print number of menu item
		itoa(currentItem_buff_up -> id, str, 10);
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	7c1b      	ldrb	r3, [r3, #16]
 8000b10:	4618      	mov	r0, r3
 8000b12:	463b      	mov	r3, r7
 8000b14:	220a      	movs	r2, #10
 8000b16:	4619      	mov	r1, r3
 8000b18:	f005 fd52 	bl	80065c0 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <print_rows_on_oled_if_up+0xe8>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	7cfa      	ldrb	r2, [r7, #19]
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fdde 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <print_rows_on_oled_if_up+0xdc>)
 8000b2e:	4638      	mov	r0, r7
 8000b30:	2301      	movs	r3, #1
 8000b32:	ca06      	ldmia	r2, {r1, r2}
 8000b34:	f7ff fdb2 	bl	800069c <ssd1306_WriteString>

		// Print name of menu item
		strncpy(str, currentItem_buff_up -> name, 15);
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	6959      	ldr	r1, [r3, #20]
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	220f      	movs	r2, #15
 8000b40:	4618      	mov	r0, r3
 8000b42:	f005 fd47 	bl	80065d4 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <print_rows_on_oled_if_up+0xec>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	7cfa      	ldrb	r2, [r7, #19]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fdc9 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000b56:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <print_rows_on_oled_if_up+0xdc>)
 8000b58:	4638      	mov	r0, r7
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	ca06      	ldmia	r2, {r1, r2}
 8000b5e:	f7ff fd9d 	bl	800069c <ssd1306_WriteString>

		currentItem_buff_up = currentItem_buff_up -> down;		// Make a step down
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	617b      	str	r3, [r7, #20]

		// Print only existing items
		if(currentItem_buff_up == 0)							// If no next item
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00b      	beq.n	8000b86 <print_rows_on_oled_if_up+0xc6>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <print_rows_on_oled_if_up+0xf0>)
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	7cfb      	ldrb	r3, [r7, #19]
 8000b74:	4413      	add	r3, r2
 8000b76:	74fb      	strb	r3, [r7, #19]
 8000b78:	7cfb      	ldrb	r3, [r7, #19]
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <print_rows_on_oled_if_up+0xf4>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d9c3      	bls.n	8000b0c <print_rows_on_oled_if_up+0x4c>
 8000b84:	e000      	b.n	8000b88 <print_rows_on_oled_if_up+0xc8>
		{
			break;
 8000b86:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 8000b88:	f7ff fc78 	bl	800047c <ssd1306_UpdateScreen>
	scroll_bar();
 8000b8c:	f7ff fe9e 	bl	80008cc <scroll_bar>
}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000010 	.word	0x20000010
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	2000000c 	.word	0x2000000c
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	2000001a 	.word	0x2000001a
 8000bac:	2000001c 	.word	0x2000001c
 8000bb0:	20000018 	.word	0x20000018
 8000bb4:	20000016 	.word	0x20000016

08000bb8 <print_rows_on_oled_if_down>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_down(void)	// print text menu item
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]

	clear_menu_items (true , true , true , true );
 8000bcc:	2301      	movs	r3, #1
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff fefe 	bl	80009d4 <clear_menu_items>

	print_rectangle_on_head();
 8000bd8:	f7ff feec 	bl	80009b4 <print_rectangle_on_head>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <print_rows_on_oled_if_down+0xe4>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4619      	mov	r1, r3
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fd7f 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8000bea:	4a2d      	ldr	r2, [pc, #180]	; (8000ca0 <print_rows_on_oled_if_down+0xe8>)
 8000bec:	2301      	movs	r3, #1
 8000bee:	ca06      	ldmia	r2, {r1, r2}
 8000bf0:	482c      	ldr	r0, [pc, #176]	; (8000ca4 <print_rows_on_oled_if_down+0xec>)
 8000bf2:	f7ff fd53 	bl	800069c <ssd1306_WriteString>

	MenuItem_t * currentItem_buff = currentItem;
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <print_rows_on_oled_if_down+0xf0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000bfc:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <print_rows_on_oled_if_down+0xe4>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	74fb      	strb	r3, [r7, #19]
 8000c02:	e03b      	b.n	8000c7c <print_rows_on_oled_if_down+0xc4>
	{
		// Print number of menu item
        itoa(currentItem_buff -> id, str, 10);
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	7c1b      	ldrb	r3, [r3, #16]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	220a      	movs	r2, #10
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f005 fcd6 	bl	80065c0 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <print_rows_on_oled_if_down+0xf4>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	7cfa      	ldrb	r2, [r7, #19]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fd62 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000c24:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <print_rows_on_oled_if_down+0xe8>)
 8000c26:	4638      	mov	r0, r7
 8000c28:	2301      	movs	r3, #1
 8000c2a:	ca06      	ldmia	r2, {r1, r2}
 8000c2c:	f7ff fd36 	bl	800069c <ssd1306_WriteString>

		// Print name of menu item
		memset(str, 0, sizeof(str));
 8000c30:	463b      	mov	r3, r7
 8000c32:	2210      	movs	r2, #16
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f005 fcc4 	bl	80065c4 <memset>
	    strncpy(str, currentItem_buff -> name, 15);
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	6959      	ldr	r1, [r3, #20]
 8000c40:	463b      	mov	r3, r7
 8000c42:	220f      	movs	r2, #15
 8000c44:	4618      	mov	r0, r3
 8000c46:	f005 fcc5 	bl	80065d4 <strncpy>
	    ssd1306_SetCursor(start_print_name_menu_x, row);
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <print_rows_on_oled_if_down+0xf8>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	7cfa      	ldrb	r2, [r7, #19]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fd47 	bl	80006e8 <ssd1306_SetCursor>
	    ssd1306_WriteString(str,  Font_7x10, White);
 8000c5a:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <print_rows_on_oled_if_down+0xe8>)
 8000c5c:	4638      	mov	r0, r7
 8000c5e:	2301      	movs	r3, #1
 8000c60:	ca06      	ldmia	r2, {r1, r2}
 8000c62:	f7ff fd1b 	bl	800069c <ssd1306_WriteString>

	    currentItem_buff = currentItem_buff -> down;			// Make a step down
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	617b      	str	r3, [r7, #20]

	    // Print only existing items
	    if(currentItem_buff == 0)		 						// If no next item
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00b      	beq.n	8000c8a <print_rows_on_oled_if_down+0xd2>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <print_rows_on_oled_if_down+0xfc>)
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	7cfb      	ldrb	r3, [r7, #19]
 8000c78:	4413      	add	r3, r2
 8000c7a:	74fb      	strb	r3, [r7, #19]
 8000c7c:	7cfb      	ldrb	r3, [r7, #19]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <print_rows_on_oled_if_down+0x100>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d9bd      	bls.n	8000c04 <print_rows_on_oled_if_down+0x4c>
 8000c88:	e000      	b.n	8000c8c <print_rows_on_oled_if_down+0xd4>
	    {
	    	break;
 8000c8a:	bf00      	nop
	    }
	 }
	 ssd1306_UpdateScreen();
 8000c8c:	f7ff fbf6 	bl	800047c <ssd1306_UpdateScreen>
	 scroll_bar();
 8000c90:	f7ff fe1c 	bl	80008cc <scroll_bar>
}
 8000c94:	bf00      	nop
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000010 	.word	0x20000010
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	2000000c 	.word	0x2000000c
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	2000001a 	.word	0x2000001a
 8000cb0:	2000001c 	.word	0x2000001c
 8000cb4:	20000018 	.word	0x20000018
 8000cb8:	20000016 	.word	0x20000016

08000cbc <print_menu_init>:
// ----------------------------------------------------------------------------------------
// Print first 4 items of menu (only first time)
void print_menu_init(void)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
	MenuItem_t * currentItem_buff = currentItem;
 8000cc2:	4b3e      	ldr	r3, [pc, #248]	; (8000dbc <print_menu_init+0x100>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	61fb      	str	r3, [r7, #28]

	print_rectangle_on_head();
 8000cc8:	f7ff fe74 	bl	80009b4 <print_rectangle_on_head>

	//Print selected name of menu
	char str[20] = ">> MAIN MENU <<";
 8000ccc:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <print_menu_init+0x104>)
 8000cce:	1d3c      	adds	r4, r7, #4
 8000cd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8000cda:	2103      	movs	r1, #3
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f7ff fd03 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000ce2:	4a38      	ldr	r2, [pc, #224]	; (8000dc4 <print_menu_init+0x108>)
 8000ce4:	1d38      	adds	r0, r7, #4
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	ca06      	ldmia	r2, {r1, r2}
 8000cea:	f7ff fcd7 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000cee:	f7ff fbc5 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2214      	movs	r2, #20
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f005 fc63 	bl	80065c4 <memset>

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000cfe:	4b32      	ldr	r3, [pc, #200]	; (8000dc8 <print_menu_init+0x10c>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	76fb      	strb	r3, [r7, #27]
 8000d04:	e04e      	b.n	8000da4 <print_menu_init+0xe8>
	{
		if(row == first_menu_row)
 8000d06:	7efb      	ldrb	r3, [r7, #27]
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <print_menu_init+0x10c>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d10d      	bne.n	8000d2e <print_menu_init+0x72>
		{
			// Print pointer on menu (On top)
			char str_pointer[4] = "->";
 8000d12:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8000d16:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8000d18:	7efb      	ldrb	r3, [r7, #27]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff fce3 	bl	80006e8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8000d22:	4a28      	ldr	r2, [pc, #160]	; (8000dc4 <print_menu_init+0x108>)
 8000d24:	4638      	mov	r0, r7
 8000d26:	2301      	movs	r3, #1
 8000d28:	ca06      	ldmia	r2, {r1, r2}
 8000d2a:	f7ff fcb7 	bl	800069c <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	7c1b      	ldrb	r3, [r3, #16]
 8000d32:	4618      	mov	r0, r3
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	220a      	movs	r2, #10
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f005 fc41 	bl	80065c0 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8000d3e:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <print_menu_init+0x110>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	7efa      	ldrb	r2, [r7, #27]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fccd 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000d4e:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <print_menu_init+0x108>)
 8000d50:	1d38      	adds	r0, r7, #4
 8000d52:	2301      	movs	r3, #1
 8000d54:	ca06      	ldmia	r2, {r1, r2}
 8000d56:	f7ff fca1 	bl	800069c <ssd1306_WriteString>
		memset(str, 0, sizeof(str));
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2214      	movs	r2, #20
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f005 fc2f 	bl	80065c4 <memset>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	6959      	ldr	r1, [r3, #20]
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f005 fc30 	bl	80065d4 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <print_menu_init+0x114>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	7efa      	ldrb	r2, [r7, #27]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fcb2 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000d84:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <print_menu_init+0x108>)
 8000d86:	1d38      	adds	r0, r7, #4
 8000d88:	2301      	movs	r3, #1
 8000d8a:	ca06      	ldmia	r2, {r1, r2}
 8000d8c:	f7ff fc86 	bl	800069c <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8000d90:	f7ff fb74 	bl	800047c <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	61fb      	str	r3, [r7, #28]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <print_menu_init+0x118>)
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	7efb      	ldrb	r3, [r7, #27]
 8000da0:	4413      	add	r3, r2
 8000da2:	76fb      	strb	r3, [r7, #27]
 8000da4:	7efb      	ldrb	r3, [r7, #27]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <print_menu_init+0x11c>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d9aa      	bls.n	8000d06 <print_menu_init+0x4a>
	}
	scroll_bar();
 8000db0:	f7ff fd8c 	bl	80008cc <scroll_bar>
}
 8000db4:	bf00      	nop
 8000db6:	3724      	adds	r7, #36	; 0x24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	080066a8 	.word	0x080066a8
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000010 	.word	0x20000010
 8000dcc:	2000001a 	.word	0x2000001a
 8000dd0:	2000001c 	.word	0x2000001c
 8000dd4:	20000018 	.word	0x20000018
 8000dd8:	20000016 	.word	0x20000016

08000ddc <action>:
// ----------------------------------------------------------------------------------------
void action(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]

	clearn_oled();
 8000df2:	f7ff fa93 	bl	800031c <clearn_oled>

	print_rectangle_on_head();
 8000df6:	f7ff fddd 	bl	80009b4 <print_rectangle_on_head>

	//Print selected name of menu on top of OLED
	MenuItem_t * currentItem_buff_parent = currentItem;
 8000dfa:	4b40      	ldr	r3, [pc, #256]	; (8000efc <action+0x120>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	617b      	str	r3, [r7, #20]
	currentItem_buff_parent = currentItem_buff_parent -> parent;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	617b      	str	r3, [r7, #20]

	strncpy(str, currentItem_buff_parent -> name, 15);
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	6959      	ldr	r1, [r3, #20]
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f005 fbe0 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 8000e14:	2103      	movs	r1, #3
 8000e16:	200a      	movs	r0, #10
 8000e18:	f7ff fc66 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000e1c:	4a38      	ldr	r2, [pc, #224]	; (8000f00 <action+0x124>)
 8000e1e:	1d38      	adds	r0, r7, #4
 8000e20:	2301      	movs	r3, #1
 8000e22:	ca06      	ldmia	r2, {r1, r2}
 8000e24:	f7ff fc3a 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000e28:	f7ff fb28 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2210      	movs	r2, #16
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f005 fbc6 	bl	80065c4 <memset>

	MenuItem_t * currentItem_buff = currentItem;
 8000e38:	4b30      	ldr	r3, [pc, #192]	; (8000efc <action+0x120>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	61fb      	str	r3, [r7, #28]

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <action+0x128>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	76fb      	strb	r3, [r7, #27]
 8000e44:	e04b      	b.n	8000ede <action+0x102>
	{
		if(row == first_menu_row)
 8000e46:	7efb      	ldrb	r3, [r7, #27]
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <action+0x128>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d10d      	bne.n	8000e6e <action+0x92>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 8000e52:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8000e56:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8000e58:	7efb      	ldrb	r3, [r7, #27]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fc43 	bl	80006e8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8000e62:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <action+0x124>)
 8000e64:	4638      	mov	r0, r7
 8000e66:	2301      	movs	r3, #1
 8000e68:	ca06      	ldmia	r2, {r1, r2}
 8000e6a:	f7ff fc17 	bl	800069c <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	7c1b      	ldrb	r3, [r3, #16]
 8000e72:	4618      	mov	r0, r3
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	220a      	movs	r2, #10
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f005 fba1 	bl	80065c0 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <action+0x12c>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	7efa      	ldrb	r2, [r7, #27]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fc2d 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000e8e:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <action+0x124>)
 8000e90:	1d38      	adds	r0, r7, #4
 8000e92:	2301      	movs	r3, #1
 8000e94:	ca06      	ldmia	r2, {r1, r2}
 8000e96:	f7ff fc01 	bl	800069c <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	6959      	ldr	r1, [r3, #20]
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f005 fb96 	bl	80065d4 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <action+0x130>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	7efa      	ldrb	r2, [r7, #27]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fc18 	bl	80006e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000eb8:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <action+0x124>)
 8000eba:	1d38      	adds	r0, r7, #4
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	ca06      	ldmia	r2, {r1, r2}
 8000ec0:	f7ff fbec 	bl	800069c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000ec4:	f7ff fada 	bl	800047c <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00b      	beq.n	8000eec <action+0x110>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <action+0x134>)
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	7efb      	ldrb	r3, [r7, #27]
 8000eda:	4413      	add	r3, r2
 8000edc:	76fb      	strb	r3, [r7, #27]
 8000ede:	7efb      	ldrb	r3, [r7, #27]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <action+0x138>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d9ad      	bls.n	8000e46 <action+0x6a>
 8000eea:	e000      	b.n	8000eee <action+0x112>
		{
			break;
 8000eec:	bf00      	nop
		}
	}
	scroll_bar();
 8000eee:	f7ff fced 	bl	80008cc <scroll_bar>
}
 8000ef2:	bf00      	nop
 8000ef4:	3720      	adds	r7, #32
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000010 	.word	0x20000010
 8000f08:	2000001a 	.word	0x2000001a
 8000f0c:	2000001c 	.word	0x2000001c
 8000f10:	20000018 	.word	0x20000018
 8000f14:	20000016 	.word	0x20000016

08000f18 <return_from_menu>:
// ----------------------------------------------------------------------------------------
void return_from_menu(void)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
	currentItem = &items[0];											// Jump to main menu
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <return_from_menu+0x44>)
 8000f20:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <return_from_menu+0x48>)
 8000f22:	601a      	str	r2, [r3, #0]
	clearn_oled();
 8000f24:	f7ff f9fa 	bl	800031c <clearn_oled>

	// Print "MAIN MENU:"
	char str[20] = ">> MAIN MENU <<";
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <return_from_menu+0x4c>)
 8000f2a:	1d3c      	adds	r4, r7, #4
 8000f2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8000f36:	2103      	movs	r1, #3
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f7ff fbd5 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <return_from_menu+0x50>)
 8000f40:	1d38      	adds	r0, r7, #4
 8000f42:	2301      	movs	r3, #1
 8000f44:	ca06      	ldmia	r2, {r1, r2}
 8000f46:	f7ff fba9 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000f4a:	f7ff fa97 	bl	800047c <ssd1306_UpdateScreen>

	print_menu_init();													// Print all start menu
 8000f4e:	f7ff feb5 	bl	8000cbc <print_menu_init>
}
 8000f52:	bf00      	nop
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	2000076c 	.word	0x2000076c
 8000f64:	080066a8 	.word	0x080066a8
 8000f68:	20000000 	.word	0x20000000

08000f6c <do_it_function_menu_1>:
// ----------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_1(void)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
	clearn_oled();
 8000f72:	f7ff f9d3 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8000f84:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <do_it_function_menu_1+0xc4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6959      	ldr	r1, [r3, #20]
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f005 fb20 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 8000f94:	2103      	movs	r1, #3
 8000f96:	200a      	movs	r0, #10
 8000f98:	f7ff fba6 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000f9c:	4a25      	ldr	r2, [pc, #148]	; (8001034 <do_it_function_menu_1+0xc8>)
 8000f9e:	4638      	mov	r0, r7
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	ca06      	ldmia	r2, {r1, r2}
 8000fa4:	f7ff fb7a 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000fa8:	f7ff fa68 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8000fac:	463b      	mov	r3, r7
 8000fae:	2210      	movs	r2, #16
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f005 fb06 	bl	80065c4 <memset>

	strncpy(str, "Doing something 1", sizeof(str));
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <do_it_function_menu_1+0xcc>)
 8000fba:	463c      	mov	r4, r7
 8000fbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <do_it_function_menu_1+0xd0>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fb8c 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000fd0:	4a18      	ldr	r2, [pc, #96]	; (8001034 <do_it_function_menu_1+0xc8>)
 8000fd2:	4638      	mov	r0, r7
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	ca06      	ldmia	r2, {r1, r2}
 8000fd8:	f7ff fb60 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000fdc:	f7ff fa4e 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <do_it_function_menu_1+0xd4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <do_it_function_menu_1+0xd8>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff2:	4815      	ldr	r0, [pc, #84]	; (8001048 <do_it_function_menu_1+0xdc>)
 8000ff4:	f002 fbf1 	bl	80037da <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000ff8:	20c8      	movs	r0, #200	; 0xc8
 8000ffa:	f002 f871 	bl	80030e0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <do_it_function_menu_1+0xdc>)
 8001006:	f002 fbe8 	bl	80037da <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800100a:	20c8      	movs	r0, #200	; 0xc8
 800100c:	f002 f868 	bl	80030e0 <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <do_it_function_menu_1+0xd4>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d1e9      	bne.n	8000fec <do_it_function_menu_1+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <do_it_function_menu_1+0xd8>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <do_it_function_menu_1+0xc4>)
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <do_it_function_menu_1+0xe0>)
 8001022:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001024:	f7ff feda 	bl	8000ddc <action>
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	bd90      	pop	{r4, r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000000 	.word	0x20000000
 8001038:	080066bc 	.word	0x080066bc
 800103c:	20000010 	.word	0x20000010
 8001040:	2000045f 	.word	0x2000045f
 8001044:	2000045e 	.word	0x2000045e
 8001048:	40011000 	.word	0x40011000
 800104c:	20000670 	.word	0x20000670

08001050 <items_menu_1_set_par_1>:
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_1(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
	clearn_oled();
 8001056:	f7ff f961 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <items_menu_1_set_par_1+0xa4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6959      	ldr	r1, [r3, #20]
 800106e:	463b      	mov	r3, r7
 8001070:	220f      	movs	r2, #15
 8001072:	4618      	mov	r0, r3
 8001074:	f005 faae 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001078:	2103      	movs	r1, #3
 800107a:	200a      	movs	r0, #10
 800107c:	f7ff fb34 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001080:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <items_menu_1_set_par_1+0xa8>)
 8001082:	4638      	mov	r0, r7
 8001084:	2301      	movs	r3, #1
 8001086:	ca06      	ldmia	r2, {r1, r2}
 8001088:	f7ff fb08 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800108c:	f7ff f9f6 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001090:	463b      	mov	r3, r7
 8001092:	2210      	movs	r2, #16
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f005 fa94 	bl	80065c4 <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 800109c:	463b      	mov	r3, r7
 800109e:	2210      	movs	r2, #16
 80010a0:	4916      	ldr	r1, [pc, #88]	; (80010fc <items_menu_1_set_par_1+0xac>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f005 fa96 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <items_menu_1_set_par_1+0xb0>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fb19 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <items_menu_1_set_par_1+0xa8>)
 80010b8:	4638      	mov	r0, r7
 80010ba:	2301      	movs	r3, #1
 80010bc:	ca06      	ldmia	r2, {r1, r2}
 80010be:	f7ff faed 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80010c2:	f7ff f9db 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <items_menu_1_set_par_1+0xb4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <items_menu_1_set_par_1+0xb8>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	}while (button_status != BUTTON_ENTER);
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <items_menu_1_set_par_1+0xb4>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d1fb      	bne.n	80010d2 <items_menu_1_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <items_menu_1_set_par_1+0xb8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <items_menu_1_set_par_1+0xa4>)
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <items_menu_1_set_par_1+0xbc>)
 80010e4:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80010e6:	f7ff fe79 	bl	8000ddc <action>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000000 	.word	0x20000000
 80010fc:	080066d0 	.word	0x080066d0
 8001100:	20000010 	.word	0x20000010
 8001104:	2000045f 	.word	0x2000045f
 8001108:	2000045e 	.word	0x2000045e
 800110c:	20000670 	.word	0x20000670

08001110 <items_menu_1_set_par_2>:
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_2(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
	clearn_oled();
 8001116:	f7ff f901 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <items_menu_1_set_par_2+0xa4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6959      	ldr	r1, [r3, #20]
 800112e:	463b      	mov	r3, r7
 8001130:	220f      	movs	r2, #15
 8001132:	4618      	mov	r0, r3
 8001134:	f005 fa4e 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001138:	2103      	movs	r1, #3
 800113a:	200a      	movs	r0, #10
 800113c:	f7ff fad4 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001140:	4a1d      	ldr	r2, [pc, #116]	; (80011b8 <items_menu_1_set_par_2+0xa8>)
 8001142:	4638      	mov	r0, r7
 8001144:	2301      	movs	r3, #1
 8001146:	ca06      	ldmia	r2, {r1, r2}
 8001148:	f7ff faa8 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800114c:	f7ff f996 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001150:	463b      	mov	r3, r7
 8001152:	2210      	movs	r2, #16
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f005 fa34 	bl	80065c4 <memset>

	strncpy(str, "Set parametr 2", sizeof(str));
 800115c:	463b      	mov	r3, r7
 800115e:	2210      	movs	r2, #16
 8001160:	4916      	ldr	r1, [pc, #88]	; (80011bc <items_menu_1_set_par_2+0xac>)
 8001162:	4618      	mov	r0, r3
 8001164:	f005 fa36 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <items_menu_1_set_par_2+0xb0>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	4619      	mov	r1, r3
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fab9 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <items_menu_1_set_par_2+0xa8>)
 8001178:	4638      	mov	r0, r7
 800117a:	2301      	movs	r3, #1
 800117c:	ca06      	ldmia	r2, {r1, r2}
 800117e:	f7ff fa8d 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001182:	f7ff f97b 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <items_menu_1_set_par_2+0xb4>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <items_menu_1_set_par_2+0xb8>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <items_menu_1_set_par_2+0xb4>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d1fb      	bne.n	8001192 <items_menu_1_set_par_2+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <items_menu_1_set_par_2+0xb8>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <items_menu_1_set_par_2+0xa4>)
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <items_menu_1_set_par_2+0xbc>)
 80011a4:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80011a6:	f7ff fe19 	bl	8000ddc <action>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000000 	.word	0x20000000
 80011bc:	080066e0 	.word	0x080066e0
 80011c0:	20000010 	.word	0x20000010
 80011c4:	2000045f 	.word	0x2000045f
 80011c8:	2000045e 	.word	0x2000045e
 80011cc:	20000670 	.word	0x20000670

080011d0 <items_menu_1_set_par_3>:
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_3(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
	clearn_oled();
 80011d6:	f7ff f8a1 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <items_menu_1_set_par_3+0xa4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6959      	ldr	r1, [r3, #20]
 80011ee:	463b      	mov	r3, r7
 80011f0:	220f      	movs	r2, #15
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 f9ee 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 80011f8:	2103      	movs	r1, #3
 80011fa:	200a      	movs	r0, #10
 80011fc:	f7ff fa74 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001200:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <items_menu_1_set_par_3+0xa8>)
 8001202:	4638      	mov	r0, r7
 8001204:	2301      	movs	r3, #1
 8001206:	ca06      	ldmia	r2, {r1, r2}
 8001208:	f7ff fa48 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800120c:	f7ff f936 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001210:	463b      	mov	r3, r7
 8001212:	2210      	movs	r2, #16
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f005 f9d4 	bl	80065c4 <memset>

	strncpy(str, "Set parametr 3", sizeof(str));
 800121c:	463b      	mov	r3, r7
 800121e:	2210      	movs	r2, #16
 8001220:	4916      	ldr	r1, [pc, #88]	; (800127c <items_menu_1_set_par_3+0xac>)
 8001222:	4618      	mov	r0, r3
 8001224:	f005 f9d6 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <items_menu_1_set_par_3+0xb0>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4619      	mov	r1, r3
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff fa59 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <items_menu_1_set_par_3+0xa8>)
 8001238:	4638      	mov	r0, r7
 800123a:	2301      	movs	r3, #1
 800123c:	ca06      	ldmia	r2, {r1, r2}
 800123e:	f7ff fa2d 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001242:	f7ff f91b 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <items_menu_1_set_par_3+0xb4>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <items_menu_1_set_par_3+0xb8>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <items_menu_1_set_par_3+0xb4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d1fb      	bne.n	8001252 <items_menu_1_set_par_3+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <items_menu_1_set_par_3+0xb8>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <items_menu_1_set_par_3+0xa4>)
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <items_menu_1_set_par_3+0xbc>)
 8001264:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001266:	f7ff fdb9 	bl	8000ddc <action>
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	20000000 	.word	0x20000000
 800127c:	080066f0 	.word	0x080066f0
 8001280:	20000010 	.word	0x20000010
 8001284:	2000045f 	.word	0x2000045f
 8001288:	2000045e 	.word	0x2000045e
 800128c:	20000670 	.word	0x20000670

08001290 <do_it_function_menu_2>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_2(void)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
	clearn_oled();
 8001296:	f7ff f841 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <do_it_function_menu_2+0xc4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6959      	ldr	r1, [r3, #20]
 80012ae:	463b      	mov	r3, r7
 80012b0:	220f      	movs	r2, #15
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 f98e 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 80012b8:	2103      	movs	r1, #3
 80012ba:	200a      	movs	r0, #10
 80012bc:	f7ff fa14 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80012c0:	4a25      	ldr	r2, [pc, #148]	; (8001358 <do_it_function_menu_2+0xc8>)
 80012c2:	4638      	mov	r0, r7
 80012c4:	2301      	movs	r3, #1
 80012c6:	ca06      	ldmia	r2, {r1, r2}
 80012c8:	f7ff f9e8 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80012cc:	f7ff f8d6 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80012d0:	463b      	mov	r3, r7
 80012d2:	2210      	movs	r2, #16
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f005 f974 	bl	80065c4 <memset>

	strncpy(str, "Doing something 2", sizeof(str));
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <do_it_function_menu_2+0xcc>)
 80012de:	463c      	mov	r4, r7
 80012e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <do_it_function_menu_2+0xd0>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4619      	mov	r1, r3
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff f9fa 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80012f4:	4a18      	ldr	r2, [pc, #96]	; (8001358 <do_it_function_menu_2+0xc8>)
 80012f6:	4638      	mov	r0, r7
 80012f8:	2301      	movs	r3, #1
 80012fa:	ca06      	ldmia	r2, {r1, r2}
 80012fc:	f7ff f9ce 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001300:	f7ff f8bc 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <do_it_function_menu_2+0xd4>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <do_it_function_menu_2+0xd8>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001316:	4815      	ldr	r0, [pc, #84]	; (800136c <do_it_function_menu_2+0xdc>)
 8001318:	f002 fa5f 	bl	80037da <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800131c:	2032      	movs	r0, #50	; 0x32
 800131e:	f001 fedf 	bl	80030e0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001322:	2201      	movs	r2, #1
 8001324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001328:	4810      	ldr	r0, [pc, #64]	; (800136c <do_it_function_menu_2+0xdc>)
 800132a:	f002 fa56 	bl	80037da <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800132e:	2032      	movs	r0, #50	; 0x32
 8001330:	f001 fed6 	bl	80030e0 <HAL_Delay>
	}while (button_status != BUTTON_ENTER);
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <do_it_function_menu_2+0xd4>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d1e9      	bne.n	8001310 <do_it_function_menu_2+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <do_it_function_menu_2+0xd8>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <do_it_function_menu_2+0xc4>)
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <do_it_function_menu_2+0xe0>)
 8001346:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001348:	f7ff fd48 	bl	8000ddc <action>
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	20000008 	.word	0x20000008
 8001358:	20000000 	.word	0x20000000
 800135c:	08006700 	.word	0x08006700
 8001360:	20000010 	.word	0x20000010
 8001364:	2000045f 	.word	0x2000045f
 8001368:	2000045e 	.word	0x2000045e
 800136c:	40011000 	.word	0x40011000
 8001370:	2000049c 	.word	0x2000049c

08001374 <items_menu_2_set_par_1>:
// ----------------------------------------------------------------------------------------
void items_menu_2_set_par_1(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
	clearn_oled();
 800137a:	f7fe ffcf 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <items_menu_2_set_par_1+0xa4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6959      	ldr	r1, [r3, #20]
 8001392:	463b      	mov	r3, r7
 8001394:	220f      	movs	r2, #15
 8001396:	4618      	mov	r0, r3
 8001398:	f005 f91c 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 800139c:	2103      	movs	r1, #3
 800139e:	200a      	movs	r0, #10
 80013a0:	f7ff f9a2 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <items_menu_2_set_par_1+0xa8>)
 80013a6:	4638      	mov	r0, r7
 80013a8:	2301      	movs	r3, #1
 80013aa:	ca06      	ldmia	r2, {r1, r2}
 80013ac:	f7ff f976 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80013b0:	f7ff f864 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80013b4:	463b      	mov	r3, r7
 80013b6:	2210      	movs	r2, #16
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f005 f902 	bl	80065c4 <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 80013c0:	463b      	mov	r3, r7
 80013c2:	2210      	movs	r2, #16
 80013c4:	4916      	ldr	r1, [pc, #88]	; (8001420 <items_menu_2_set_par_1+0xac>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f005 f904 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <items_menu_2_set_par_1+0xb0>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4619      	mov	r1, r3
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff f987 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <items_menu_2_set_par_1+0xa8>)
 80013dc:	4638      	mov	r0, r7
 80013de:	2301      	movs	r3, #1
 80013e0:	ca06      	ldmia	r2, {r1, r2}
 80013e2:	f7ff f95b 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80013e6:	f7ff f849 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <items_menu_2_set_par_1+0xb4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <items_menu_2_set_par_1+0xb8>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <items_menu_2_set_par_1+0xb4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d1fb      	bne.n	80013f6 <items_menu_2_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <items_menu_2_set_par_1+0xb8>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <items_menu_2_set_par_1+0xa4>)
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <items_menu_2_set_par_1+0xbc>)
 8001408:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800140a:	f7ff fce7 	bl	8000ddc <action>
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000008 	.word	0x20000008
 800141c:	20000000 	.word	0x20000000
 8001420:	080066d0 	.word	0x080066d0
 8001424:	20000010 	.word	0x20000010
 8001428:	2000045f 	.word	0x2000045f
 800142c:	2000045e 	.word	0x2000045e
 8001430:	2000049c 	.word	0x2000049c

08001434 <do_it_function_menu_3>:
// ----------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_3(void)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
	clearn_oled();
 800143a:	f7fe ff6f 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <do_it_function_menu_3+0xc8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6959      	ldr	r1, [r3, #20]
 8001452:	463b      	mov	r3, r7
 8001454:	220f      	movs	r2, #15
 8001456:	4618      	mov	r0, r3
 8001458:	f005 f8bc 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 800145c:	2103      	movs	r1, #3
 800145e:	200a      	movs	r0, #10
 8001460:	f7ff f942 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001464:	4a26      	ldr	r2, [pc, #152]	; (8001500 <do_it_function_menu_3+0xcc>)
 8001466:	4638      	mov	r0, r7
 8001468:	2301      	movs	r3, #1
 800146a:	ca06      	ldmia	r2, {r1, r2}
 800146c:	f7ff f916 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001470:	f7ff f804 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001474:	463b      	mov	r3, r7
 8001476:	2210      	movs	r2, #16
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f005 f8a2 	bl	80065c4 <memset>

	strncpy(str, "Doing something 3", sizeof(str));
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <do_it_function_menu_3+0xd0>)
 8001482:	463c      	mov	r4, r7
 8001484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001486:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <do_it_function_menu_3+0xd4>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4619      	mov	r1, r3
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff f928 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001498:	4a19      	ldr	r2, [pc, #100]	; (8001500 <do_it_function_menu_3+0xcc>)
 800149a:	4638      	mov	r0, r7
 800149c:	2301      	movs	r3, #1
 800149e:	ca06      	ldmia	r2, {r1, r2}
 80014a0:	f7ff f8fc 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80014a4:	f7fe ffea 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <do_it_function_menu_3+0xd8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <do_it_function_menu_3+0xdc>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ba:	4816      	ldr	r0, [pc, #88]	; (8001514 <do_it_function_menu_3+0xe0>)
 80014bc:	f002 f98d 	bl	80037da <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80014c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c4:	f001 fe0c 	bl	80030e0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ce:	4811      	ldr	r0, [pc, #68]	; (8001514 <do_it_function_menu_3+0xe0>)
 80014d0:	f002 f983 	bl	80037da <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80014d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d8:	f001 fe02 	bl	80030e0 <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <do_it_function_menu_3+0xd8>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d1e7      	bne.n	80014b4 <do_it_function_menu_3+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <do_it_function_menu_3+0xdc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <do_it_function_menu_3+0xc8>)
 80014ec:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <do_it_function_menu_3+0xe4>)
 80014ee:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80014f0:	f7ff fc74 	bl	8000ddc <action>
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd90      	pop	{r4, r7, pc}
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000000 	.word	0x20000000
 8001504:	08006714 	.word	0x08006714
 8001508:	20000010 	.word	0x20000010
 800150c:	2000045f 	.word	0x2000045f
 8001510:	2000045e 	.word	0x2000045e
 8001514:	40011000 	.word	0x40011000
 8001518:	20000724 	.word	0x20000724

0800151c <do_it_function_menu_4>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// ----------------------------------------------------------------------------------------
void do_it_function_menu_4(void)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
	clearn_oled();
 8001522:	f7fe fefb 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <do_it_function_menu_4+0xc8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6959      	ldr	r1, [r3, #20]
 800153a:	463b      	mov	r3, r7
 800153c:	220f      	movs	r2, #15
 800153e:	4618      	mov	r0, r3
 8001540:	f005 f848 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001544:	2103      	movs	r1, #3
 8001546:	200a      	movs	r0, #10
 8001548:	f7ff f8ce 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800154c:	4a26      	ldr	r2, [pc, #152]	; (80015e8 <do_it_function_menu_4+0xcc>)
 800154e:	4638      	mov	r0, r7
 8001550:	2301      	movs	r3, #1
 8001552:	ca06      	ldmia	r2, {r1, r2}
 8001554:	f7ff f8a2 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001558:	f7fe ff90 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800155c:	463b      	mov	r3, r7
 800155e:	2210      	movs	r2, #16
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f005 f82e 	bl	80065c4 <memset>

	strncpy(str, "Doing something 4", sizeof(str));
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <do_it_function_menu_4+0xd0>)
 800156a:	463c      	mov	r4, r7
 800156c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800156e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <do_it_function_menu_4+0xd4>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4619      	mov	r1, r3
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff f8b4 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <do_it_function_menu_4+0xcc>)
 8001582:	4638      	mov	r0, r7
 8001584:	2301      	movs	r3, #1
 8001586:	ca06      	ldmia	r2, {r1, r2}
 8001588:	f7ff f888 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800158c:	f7fe ff76 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <do_it_function_menu_4+0xd8>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <do_it_function_menu_4+0xdc>)
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <do_it_function_menu_4+0xe0>)
 80015a4:	f002 f919 	bl	80037da <HAL_GPIO_WritePin>
		HAL_Delay(20);
 80015a8:	2014      	movs	r0, #20
 80015aa:	f001 fd99 	bl	80030e0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <do_it_function_menu_4+0xe0>)
 80015b6:	f002 f910 	bl	80037da <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80015ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015be:	f001 fd8f 	bl	80030e0 <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <do_it_function_menu_4+0xd8>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d1e8      	bne.n	800159c <do_it_function_menu_4+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <do_it_function_menu_4+0xdc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <do_it_function_menu_4+0xc8>)
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <do_it_function_menu_4+0xe4>)
 80015d4:	601a      	str	r2, [r3, #0]
	action();
 80015d6:	f7ff fc01 	bl	8000ddc <action>
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000000 	.word	0x20000000
 80015ec:	08006728 	.word	0x08006728
 80015f0:	20000010 	.word	0x20000010
 80015f4:	2000045f 	.word	0x2000045f
 80015f8:	2000045e 	.word	0x2000045e
 80015fc:	40011000 	.word	0x40011000
 8001600:	20000508 	.word	0x20000508

08001604 <items_menu_4_set_par_1>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_1(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
	clearn_oled();
 800160a:	f7fe fe87 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <items_menu_4_set_par_1+0xa4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6959      	ldr	r1, [r3, #20]
 8001622:	463b      	mov	r3, r7
 8001624:	220f      	movs	r2, #15
 8001626:	4618      	mov	r0, r3
 8001628:	f004 ffd4 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 800162c:	2103      	movs	r1, #3
 800162e:	200a      	movs	r0, #10
 8001630:	f7ff f85a 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <items_menu_4_set_par_1+0xa8>)
 8001636:	4638      	mov	r0, r7
 8001638:	2301      	movs	r3, #1
 800163a:	ca06      	ldmia	r2, {r1, r2}
 800163c:	f7ff f82e 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001640:	f7fe ff1c 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001644:	463b      	mov	r3, r7
 8001646:	2210      	movs	r2, #16
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f004 ffba 	bl	80065c4 <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 8001650:	463b      	mov	r3, r7
 8001652:	2210      	movs	r2, #16
 8001654:	4916      	ldr	r1, [pc, #88]	; (80016b0 <items_menu_4_set_par_1+0xac>)
 8001656:	4618      	mov	r0, r3
 8001658:	f004 ffbc 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <items_menu_4_set_par_1+0xb0>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4619      	mov	r1, r3
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff f83f 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <items_menu_4_set_par_1+0xa8>)
 800166c:	4638      	mov	r0, r7
 800166e:	2301      	movs	r3, #1
 8001670:	ca06      	ldmia	r2, {r1, r2}
 8001672:	f7ff f813 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001676:	f7fe ff01 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <items_menu_4_set_par_1+0xb4>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <items_menu_4_set_par_1+0xb8>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <items_menu_4_set_par_1+0xb4>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d1fb      	bne.n	8001686 <items_menu_4_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <items_menu_4_set_par_1+0xb8>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <items_menu_4_set_par_1+0xa4>)
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <items_menu_4_set_par_1+0xbc>)
 8001698:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800169a:	f7ff fb9f 	bl	8000ddc <action>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000000 	.word	0x20000000
 80016b0:	080066d0 	.word	0x080066d0
 80016b4:	20000010 	.word	0x20000010
 80016b8:	2000045f 	.word	0x2000045f
 80016bc:	2000045e 	.word	0x2000045e
 80016c0:	20000508 	.word	0x20000508

080016c4 <items_menu_4_set_par_2>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_2(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
	clearn_oled();
 80016ca:	f7fe fe27 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <items_menu_4_set_par_2+0xa4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6959      	ldr	r1, [r3, #20]
 80016e2:	463b      	mov	r3, r7
 80016e4:	220f      	movs	r2, #15
 80016e6:	4618      	mov	r0, r3
 80016e8:	f004 ff74 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 80016ec:	2103      	movs	r1, #3
 80016ee:	200a      	movs	r0, #10
 80016f0:	f7fe fffa 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80016f4:	4a1d      	ldr	r2, [pc, #116]	; (800176c <items_menu_4_set_par_2+0xa8>)
 80016f6:	4638      	mov	r0, r7
 80016f8:	2301      	movs	r3, #1
 80016fa:	ca06      	ldmia	r2, {r1, r2}
 80016fc:	f7fe ffce 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001700:	f7fe febc 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001704:	463b      	mov	r3, r7
 8001706:	2210      	movs	r2, #16
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f004 ff5a 	bl	80065c4 <memset>

	strncpy(str, "Set parametr 2", sizeof(str));
 8001710:	463b      	mov	r3, r7
 8001712:	2210      	movs	r2, #16
 8001714:	4916      	ldr	r1, [pc, #88]	; (8001770 <items_menu_4_set_par_2+0xac>)
 8001716:	4618      	mov	r0, r3
 8001718:	f004 ff5c 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <items_menu_4_set_par_2+0xb0>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4619      	mov	r1, r3
 8001724:	2000      	movs	r0, #0
 8001726:	f7fe ffdf 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <items_menu_4_set_par_2+0xa8>)
 800172c:	4638      	mov	r0, r7
 800172e:	2301      	movs	r3, #1
 8001730:	ca06      	ldmia	r2, {r1, r2}
 8001732:	f7fe ffb3 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001736:	f7fe fea1 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <items_menu_4_set_par_2+0xb4>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <items_menu_4_set_par_2+0xb8>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <items_menu_4_set_par_2+0xb4>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d1fb      	bne.n	8001746 <items_menu_4_set_par_2+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <items_menu_4_set_par_2+0xb8>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <items_menu_4_set_par_2+0xa4>)
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <items_menu_4_set_par_2+0xbc>)
 8001758:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800175a:	f7ff fb3f 	bl	8000ddc <action>
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008
 800176c:	20000000 	.word	0x20000000
 8001770:	080066e0 	.word	0x080066e0
 8001774:	20000010 	.word	0x20000010
 8001778:	2000045f 	.word	0x2000045f
 800177c:	2000045e 	.word	0x2000045e
 8001780:	20000508 	.word	0x20000508

08001784 <items_menu_4_set_par_3>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_3(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
	clearn_oled();
 800178a:	f7fe fdc7 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <items_menu_4_set_par_3+0xa4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6959      	ldr	r1, [r3, #20]
 80017a2:	463b      	mov	r3, r7
 80017a4:	220f      	movs	r2, #15
 80017a6:	4618      	mov	r0, r3
 80017a8:	f004 ff14 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 80017ac:	2103      	movs	r1, #3
 80017ae:	200a      	movs	r0, #10
 80017b0:	f7fe ff9a 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80017b4:	4a1d      	ldr	r2, [pc, #116]	; (800182c <items_menu_4_set_par_3+0xa8>)
 80017b6:	4638      	mov	r0, r7
 80017b8:	2301      	movs	r3, #1
 80017ba:	ca06      	ldmia	r2, {r1, r2}
 80017bc:	f7fe ff6e 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80017c0:	f7fe fe5c 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80017c4:	463b      	mov	r3, r7
 80017c6:	2210      	movs	r2, #16
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f004 fefa 	bl	80065c4 <memset>

	strncpy(str, "Set parametr 3", sizeof(str));
 80017d0:	463b      	mov	r3, r7
 80017d2:	2210      	movs	r2, #16
 80017d4:	4916      	ldr	r1, [pc, #88]	; (8001830 <items_menu_4_set_par_3+0xac>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f004 fefc 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <items_menu_4_set_par_3+0xb0>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	4619      	mov	r1, r3
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7fe ff7f 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80017ea:	4a10      	ldr	r2, [pc, #64]	; (800182c <items_menu_4_set_par_3+0xa8>)
 80017ec:	4638      	mov	r0, r7
 80017ee:	2301      	movs	r3, #1
 80017f0:	ca06      	ldmia	r2, {r1, r2}
 80017f2:	f7fe ff53 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80017f6:	f7fe fe41 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <items_menu_4_set_par_3+0xb4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <items_menu_4_set_par_3+0xb8>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <items_menu_4_set_par_3+0xb4>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d1fb      	bne.n	8001806 <items_menu_4_set_par_3+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <items_menu_4_set_par_3+0xb8>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <items_menu_4_set_par_3+0xa4>)
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <items_menu_4_set_par_3+0xbc>)
 8001818:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800181a:	f7ff fadf 	bl	8000ddc <action>
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000008 	.word	0x20000008
 800182c:	20000000 	.word	0x20000000
 8001830:	080066f0 	.word	0x080066f0
 8001834:	20000010 	.word	0x20000010
 8001838:	2000045f 	.word	0x2000045f
 800183c:	2000045e 	.word	0x2000045e
 8001840:	20000508 	.word	0x20000508

08001844 <items_menu_4_set_par_4>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_4(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
	clearn_oled();
 800184a:	f7fe fd67 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 800185c:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <items_menu_4_set_par_4+0xa4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6959      	ldr	r1, [r3, #20]
 8001862:	463b      	mov	r3, r7
 8001864:	220f      	movs	r2, #15
 8001866:	4618      	mov	r0, r3
 8001868:	f004 feb4 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 800186c:	2103      	movs	r1, #3
 800186e:	200a      	movs	r0, #10
 8001870:	f7fe ff3a 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001874:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <items_menu_4_set_par_4+0xa8>)
 8001876:	4638      	mov	r0, r7
 8001878:	2301      	movs	r3, #1
 800187a:	ca06      	ldmia	r2, {r1, r2}
 800187c:	f7fe ff0e 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001880:	f7fe fdfc 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001884:	463b      	mov	r3, r7
 8001886:	2210      	movs	r2, #16
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f004 fe9a 	bl	80065c4 <memset>

	strncpy(str, "Set parametr 4", sizeof(str));
 8001890:	463b      	mov	r3, r7
 8001892:	2210      	movs	r2, #16
 8001894:	4916      	ldr	r1, [pc, #88]	; (80018f0 <items_menu_4_set_par_4+0xac>)
 8001896:	4618      	mov	r0, r3
 8001898:	f004 fe9c 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <items_menu_4_set_par_4+0xb0>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4619      	mov	r1, r3
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7fe ff1f 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <items_menu_4_set_par_4+0xa8>)
 80018ac:	4638      	mov	r0, r7
 80018ae:	2301      	movs	r3, #1
 80018b0:	ca06      	ldmia	r2, {r1, r2}
 80018b2:	f7fe fef3 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80018b6:	f7fe fde1 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <items_menu_4_set_par_4+0xb4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <items_menu_4_set_par_4+0xb8>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <items_menu_4_set_par_4+0xb4>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d1fb      	bne.n	80018c6 <items_menu_4_set_par_4+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <items_menu_4_set_par_4+0xb8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <items_menu_4_set_par_4+0xa4>)
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <items_menu_4_set_par_4+0xbc>)
 80018d8:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80018da:	f7ff fa7f 	bl	8000ddc <action>
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000000 	.word	0x20000000
 80018f0:	0800673c 	.word	0x0800673c
 80018f4:	20000010 	.word	0x20000010
 80018f8:	2000045f 	.word	0x2000045f
 80018fc:	2000045e 	.word	0x2000045e
 8001900:	20000508 	.word	0x20000508

08001904 <items_menu_4_set_par_5>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_5(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
	clearn_oled();
 800190a:	f7fe fd07 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <items_menu_4_set_par_5+0xa4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6959      	ldr	r1, [r3, #20]
 8001922:	463b      	mov	r3, r7
 8001924:	220f      	movs	r2, #15
 8001926:	4618      	mov	r0, r3
 8001928:	f004 fe54 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 800192c:	2103      	movs	r1, #3
 800192e:	200a      	movs	r0, #10
 8001930:	f7fe feda 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001934:	4a1d      	ldr	r2, [pc, #116]	; (80019ac <items_menu_4_set_par_5+0xa8>)
 8001936:	4638      	mov	r0, r7
 8001938:	2301      	movs	r3, #1
 800193a:	ca06      	ldmia	r2, {r1, r2}
 800193c:	f7fe feae 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001940:	f7fe fd9c 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001944:	463b      	mov	r3, r7
 8001946:	2210      	movs	r2, #16
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f004 fe3a 	bl	80065c4 <memset>

	strncpy(str, "Set parametr 5", sizeof(str));
 8001950:	463b      	mov	r3, r7
 8001952:	2210      	movs	r2, #16
 8001954:	4916      	ldr	r1, [pc, #88]	; (80019b0 <items_menu_4_set_par_5+0xac>)
 8001956:	4618      	mov	r0, r3
 8001958:	f004 fe3c 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <items_menu_4_set_par_5+0xb0>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4619      	mov	r1, r3
 8001964:	2000      	movs	r0, #0
 8001966:	f7fe febf 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <items_menu_4_set_par_5+0xa8>)
 800196c:	4638      	mov	r0, r7
 800196e:	2301      	movs	r3, #1
 8001970:	ca06      	ldmia	r2, {r1, r2}
 8001972:	f7fe fe93 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001976:	f7fe fd81 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <items_menu_4_set_par_5+0xb4>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <items_menu_4_set_par_5+0xb8>)
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <items_menu_4_set_par_5+0xb4>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d1fb      	bne.n	8001986 <items_menu_4_set_par_5+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <items_menu_4_set_par_5+0xb8>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <items_menu_4_set_par_5+0xa4>)
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <items_menu_4_set_par_5+0xbc>)
 8001998:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800199a:	f7ff fa1f 	bl	8000ddc <action>
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000000 	.word	0x20000000
 80019b0:	0800674c 	.word	0x0800674c
 80019b4:	20000010 	.word	0x20000010
 80019b8:	2000045f 	.word	0x2000045f
 80019bc:	2000045e 	.word	0x2000045e
 80019c0:	20000508 	.word	0x20000508

080019c4 <items_menu_4_set_par_6>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_6(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
	clearn_oled();
 80019ca:	f7fe fca7 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <items_menu_4_set_par_6+0xa4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6959      	ldr	r1, [r3, #20]
 80019e2:	463b      	mov	r3, r7
 80019e4:	220f      	movs	r2, #15
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 fdf4 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 80019ec:	2103      	movs	r1, #3
 80019ee:	200a      	movs	r0, #10
 80019f0:	f7fe fe7a 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80019f4:	4a1d      	ldr	r2, [pc, #116]	; (8001a6c <items_menu_4_set_par_6+0xa8>)
 80019f6:	4638      	mov	r0, r7
 80019f8:	2301      	movs	r3, #1
 80019fa:	ca06      	ldmia	r2, {r1, r2}
 80019fc:	f7fe fe4e 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a00:	f7fe fd3c 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001a04:	463b      	mov	r3, r7
 8001a06:	2210      	movs	r2, #16
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f004 fdda 	bl	80065c4 <memset>

	strncpy(str, "Set parametr 6", sizeof(str));
 8001a10:	463b      	mov	r3, r7
 8001a12:	2210      	movs	r2, #16
 8001a14:	4916      	ldr	r1, [pc, #88]	; (8001a70 <items_menu_4_set_par_6+0xac>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 fddc 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <items_menu_4_set_par_6+0xb0>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4619      	mov	r1, r3
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7fe fe5f 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001a2a:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <items_menu_4_set_par_6+0xa8>)
 8001a2c:	4638      	mov	r0, r7
 8001a2e:	2301      	movs	r3, #1
 8001a30:	ca06      	ldmia	r2, {r1, r2}
 8001a32:	f7fe fe33 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a36:	f7fe fd21 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <items_menu_4_set_par_6+0xb4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <items_menu_4_set_par_6+0xb8>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <items_menu_4_set_par_6+0xb4>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d1fb      	bne.n	8001a46 <items_menu_4_set_par_6+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <items_menu_4_set_par_6+0xb8>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <items_menu_4_set_par_6+0xa4>)
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <items_menu_4_set_par_6+0xbc>)
 8001a58:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001a5a:	f7ff f9bf 	bl	8000ddc <action>
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	0800675c 	.word	0x0800675c
 8001a74:	20000010 	.word	0x20000010
 8001a78:	2000045f 	.word	0x2000045f
 8001a7c:	2000045e 	.word	0x2000045e
 8001a80:	20000508 	.word	0x20000508

08001a84 <items_menu_4_set_par_7>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_7(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
	clearn_oled();
 8001a8a:	f7fe fc47 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001a8e:	2300      	movs	r3, #0
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <items_menu_4_set_par_7+0xa4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6959      	ldr	r1, [r3, #20]
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f004 fd94 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001aac:	2103      	movs	r1, #3
 8001aae:	200a      	movs	r0, #10
 8001ab0:	f7fe fe1a 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001ab4:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <items_menu_4_set_par_7+0xa8>)
 8001ab6:	4638      	mov	r0, r7
 8001ab8:	2301      	movs	r3, #1
 8001aba:	ca06      	ldmia	r2, {r1, r2}
 8001abc:	f7fe fdee 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001ac0:	f7fe fcdc 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f004 fd7a 	bl	80065c4 <memset>

	strncpy(str, "Set parametr 7", sizeof(str));
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2210      	movs	r2, #16
 8001ad4:	4916      	ldr	r1, [pc, #88]	; (8001b30 <items_menu_4_set_par_7+0xac>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 fd7c 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <items_menu_4_set_par_7+0xb0>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7fe fdff 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001aea:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <items_menu_4_set_par_7+0xa8>)
 8001aec:	4638      	mov	r0, r7
 8001aee:	2301      	movs	r3, #1
 8001af0:	ca06      	ldmia	r2, {r1, r2}
 8001af2:	f7fe fdd3 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001af6:	f7fe fcc1 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <items_menu_4_set_par_7+0xb4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <items_menu_4_set_par_7+0xb8>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <items_menu_4_set_par_7+0xb4>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d1fb      	bne.n	8001b06 <items_menu_4_set_par_7+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <items_menu_4_set_par_7+0xb8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <items_menu_4_set_par_7+0xa4>)
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <items_menu_4_set_par_7+0xbc>)
 8001b18:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001b1a:	f7ff f95f 	bl	8000ddc <action>
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	0800676c 	.word	0x0800676c
 8001b34:	20000010 	.word	0x20000010
 8001b38:	2000045f 	.word	0x2000045f
 8001b3c:	2000045e 	.word	0x2000045e
 8001b40:	20000508 	.word	0x20000508

08001b44 <items_menu_4_set_par_8>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_8(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
	clearn_oled();
 8001b4a:	f7fe fbe7 	bl	800031c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <items_menu_4_set_par_8+0xa4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6959      	ldr	r1, [r3, #20]
 8001b62:	463b      	mov	r3, r7
 8001b64:	220f      	movs	r2, #15
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 fd34 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(10, 3);
 8001b6c:	2103      	movs	r1, #3
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f7fe fdba 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001b74:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <items_menu_4_set_par_8+0xa8>)
 8001b76:	4638      	mov	r0, r7
 8001b78:	2301      	movs	r3, #1
 8001b7a:	ca06      	ldmia	r2, {r1, r2}
 8001b7c:	f7fe fd8e 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001b80:	f7fe fc7c 	bl	800047c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001b84:	463b      	mov	r3, r7
 8001b86:	2210      	movs	r2, #16
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 fd1a 	bl	80065c4 <memset>

	strncpy(str, "Set parametr 8", sizeof(str));
 8001b90:	463b      	mov	r3, r7
 8001b92:	2210      	movs	r2, #16
 8001b94:	4916      	ldr	r1, [pc, #88]	; (8001bf0 <items_menu_4_set_par_8+0xac>)
 8001b96:	4618      	mov	r0, r3
 8001b98:	f004 fd1c 	bl	80065d4 <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <items_menu_4_set_par_8+0xb0>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f7fe fd9f 	bl	80006e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001baa:	4a10      	ldr	r2, [pc, #64]	; (8001bec <items_menu_4_set_par_8+0xa8>)
 8001bac:	4638      	mov	r0, r7
 8001bae:	2301      	movs	r3, #1
 8001bb0:	ca06      	ldmia	r2, {r1, r2}
 8001bb2:	f7fe fd73 	bl	800069c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001bb6:	f7fe fc61 	bl	800047c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <items_menu_4_set_par_8+0xb4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <items_menu_4_set_par_8+0xb8>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <items_menu_4_set_par_8+0xb4>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d1fb      	bne.n	8001bc6 <items_menu_4_set_par_8+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <items_menu_4_set_par_8+0xb8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <items_menu_4_set_par_8+0xa4>)
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <items_menu_4_set_par_8+0xbc>)
 8001bd8:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001bda:	f7ff f8ff 	bl	8000ddc <action>
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000008 	.word	0x20000008
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	0800677c 	.word	0x0800677c
 8001bf4:	20000010 	.word	0x20000010
 8001bf8:	2000045f 	.word	0x2000045f
 8001bfc:	2000045e 	.word	0x2000045e
 8001c00:	20000508 	.word	0x20000508

08001c04 <Menu_Init>:
// ----------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------
void Menu_Init (void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b095      	sub	sp, #84	; 0x54
 8001c08:	af00      	add	r7, sp, #0
	// Make pointers on funsctions
	// Main functions
	void (*p_print_rows_on_oled_if_up) (void);
	p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
 8001c0a:	4b98      	ldr	r3, [pc, #608]	; (8001e6c <Menu_Init+0x268>)
 8001c0c:	64fb      	str	r3, [r7, #76]	; 0x4c

	void (*p_print_rows_on_oled_if_down) (void);					// Create pointer on function
	p_print_rows_on_oled_if_down = print_rows_on_oled_if_down;		// Save function print on pointer print_p
 8001c0e:	4b98      	ldr	r3, [pc, #608]	; (8001e70 <Menu_Init+0x26c>)
 8001c10:	64bb      	str	r3, [r7, #72]	; 0x48

	void (*p_return_from_menu)(void);
	p_return_from_menu = return_from_menu;
 8001c12:	4b98      	ldr	r3, [pc, #608]	; (8001e74 <Menu_Init+0x270>)
 8001c14:	647b      	str	r3, [r7, #68]	; 0x44

	void (*p_action) (void);										// Create pointer on function
	p_action = action;												// Save function action on pointer action_p
 8001c16:	4b98      	ldr	r3, [pc, #608]	; (8001e78 <Menu_Init+0x274>)
 8001c18:	643b      	str	r3, [r7, #64]	; 0x40

	// items_menu_1 menu functions
	void (*p_do_it_function_menu_1) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_1 = do_it_function_menu_1;
 8001c1a:	4b98      	ldr	r3, [pc, #608]	; (8001e7c <Menu_Init+0x278>)
 8001c1c:	63fb      	str	r3, [r7, #60]	; 0x3c

	void (*p_items_menu_1_set_par_1) (void);
	p_items_menu_1_set_par_1 = items_menu_1_set_par_1;
 8001c1e:	4b98      	ldr	r3, [pc, #608]	; (8001e80 <Menu_Init+0x27c>)
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38

	void (*p_items_menu_1_set_par_2) (void);
	p_items_menu_1_set_par_2 = items_menu_1_set_par_2;
 8001c22:	4b98      	ldr	r3, [pc, #608]	; (8001e84 <Menu_Init+0x280>)
 8001c24:	637b      	str	r3, [r7, #52]	; 0x34

	void (*p_items_menu_1_set_par_3) (void);
	p_items_menu_1_set_par_3 = items_menu_1_set_par_3;
 8001c26:	4b98      	ldr	r3, [pc, #608]	; (8001e88 <Menu_Init+0x284>)
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30

	// items_menu_2 menu functions
	void (*p_do_it_function_menu_2) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_2 = do_it_function_menu_2;
 8001c2a:	4b98      	ldr	r3, [pc, #608]	; (8001e8c <Menu_Init+0x288>)
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c

	void (*p_items_menu_2_set_par_1) (void);
	p_items_menu_2_set_par_1 = items_menu_2_set_par_1;
 8001c2e:	4b98      	ldr	r3, [pc, #608]	; (8001e90 <Menu_Init+0x28c>)
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28

	// items_menu_3 menu functions
	void (*p_do_it_function_menu_3) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_3 = do_it_function_menu_3;
 8001c32:	4b98      	ldr	r3, [pc, #608]	; (8001e94 <Menu_Init+0x290>)
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24

	// items_menu_4 menu functions
	void (*p_items_menu_4_set_par_1) (void);
	p_items_menu_4_set_par_1 = items_menu_4_set_par_1;
 8001c36:	4b98      	ldr	r3, [pc, #608]	; (8001e98 <Menu_Init+0x294>)
 8001c38:	623b      	str	r3, [r7, #32]

	void (*p_items_menu_4_set_par_2) (void);
	p_items_menu_4_set_par_2 = items_menu_4_set_par_2;
 8001c3a:	4b98      	ldr	r3, [pc, #608]	; (8001e9c <Menu_Init+0x298>)
 8001c3c:	61fb      	str	r3, [r7, #28]

	void (*p_items_menu_4_set_par_3) (void);
	p_items_menu_4_set_par_3 = items_menu_4_set_par_3;
 8001c3e:	4b98      	ldr	r3, [pc, #608]	; (8001ea0 <Menu_Init+0x29c>)
 8001c40:	61bb      	str	r3, [r7, #24]

	void (*p_items_menu_4_set_par_4) (void);
	p_items_menu_4_set_par_4 = items_menu_4_set_par_4;
 8001c42:	4b98      	ldr	r3, [pc, #608]	; (8001ea4 <Menu_Init+0x2a0>)
 8001c44:	617b      	str	r3, [r7, #20]

	void (*p_items_menu_4_set_par_5) (void);
	p_items_menu_4_set_par_5 = items_menu_4_set_par_5;
 8001c46:	4b98      	ldr	r3, [pc, #608]	; (8001ea8 <Menu_Init+0x2a4>)
 8001c48:	613b      	str	r3, [r7, #16]

	void (*p_items_menu_4_set_par_6) (void);
	p_items_menu_4_set_par_6 = items_menu_4_set_par_6;
 8001c4a:	4b98      	ldr	r3, [pc, #608]	; (8001eac <Menu_Init+0x2a8>)
 8001c4c:	60fb      	str	r3, [r7, #12]

	void (*p_items_menu_4_set_par_7) (void);
	p_items_menu_4_set_par_7 = items_menu_4_set_par_7;
 8001c4e:	4b98      	ldr	r3, [pc, #608]	; (8001eb0 <Menu_Init+0x2ac>)
 8001c50:	60bb      	str	r3, [r7, #8]

	void (*p_items_menu_4_set_par_8) (void);
	p_items_menu_4_set_par_8 = items_menu_4_set_par_8;
 8001c52:	4b98      	ldr	r3, [pc, #608]	; (8001eb4 <Menu_Init+0x2b0>)
 8001c54:	607b      	str	r3, [r7, #4]

	void (*p_do_it_function_menu_4) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_4 = do_it_function_menu_4;
 8001c56:	4b98      	ldr	r3, [pc, #608]	; (8001eb8 <Menu_Init+0x2b4>)
 8001c58:	603b      	str	r3, [r7, #0]

	// Fill in elements(nodes) of list (7 items)
	// Main menu items
	/////////////////////////////////////////////////////////////////

	items[0].up = 0;
 8001c5a:	4b98      	ldr	r3, [pc, #608]	; (8001ebc <Menu_Init+0x2b8>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
	items[0].down = &items[1];
 8001c60:	4b96      	ldr	r3, [pc, #600]	; (8001ebc <Menu_Init+0x2b8>)
 8001c62:	4a97      	ldr	r2, [pc, #604]	; (8001ec0 <Menu_Init+0x2bc>)
 8001c64:	605a      	str	r2, [r3, #4]
	items[0].child = &items_menu_1[0];
 8001c66:	4b95      	ldr	r3, [pc, #596]	; (8001ebc <Menu_Init+0x2b8>)
 8001c68:	4a96      	ldr	r2, [pc, #600]	; (8001ec4 <Menu_Init+0x2c0>)
 8001c6a:	609a      	str	r2, [r3, #8]
	items[0].parent = 0;
 8001c6c:	4b93      	ldr	r3, [pc, #588]	; (8001ebc <Menu_Init+0x2b8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
	items[0].id = 1;
 8001c72:	4b92      	ldr	r3, [pc, #584]	; (8001ebc <Menu_Init+0x2b8>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	741a      	strb	r2, [r3, #16]
	items[0].name = "Menu_1";
 8001c78:	4b90      	ldr	r3, [pc, #576]	; (8001ebc <Menu_Init+0x2b8>)
 8001c7a:	4a93      	ldr	r2, [pc, #588]	; (8001ec8 <Menu_Init+0x2c4>)
 8001c7c:	615a      	str	r2, [r3, #20]
	items[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8001c7e:	4a8f      	ldr	r2, [pc, #572]	; (8001ebc <Menu_Init+0x2b8>)
 8001c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c82:	6193      	str	r3, [r2, #24]
	items[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8001c84:	4a8d      	ldr	r2, [pc, #564]	; (8001ebc <Menu_Init+0x2b8>)
 8001c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c88:	61d3      	str	r3, [r2, #28]
	items[0].makeAction = 0;
 8001c8a:	4b8c      	ldr	r3, [pc, #560]	; (8001ebc <Menu_Init+0x2b8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]

	items[1].up = &items[0];
 8001c90:	4b8a      	ldr	r3, [pc, #552]	; (8001ebc <Menu_Init+0x2b8>)
 8001c92:	4a8a      	ldr	r2, [pc, #552]	; (8001ebc <Menu_Init+0x2b8>)
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
	items[1].down = &items[2];
 8001c96:	4b89      	ldr	r3, [pc, #548]	; (8001ebc <Menu_Init+0x2b8>)
 8001c98:	4a8c      	ldr	r2, [pc, #560]	; (8001ecc <Menu_Init+0x2c8>)
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
	items[1].child = &items_menu_2[0];
 8001c9c:	4b87      	ldr	r3, [pc, #540]	; (8001ebc <Menu_Init+0x2b8>)
 8001c9e:	4a8c      	ldr	r2, [pc, #560]	; (8001ed0 <Menu_Init+0x2cc>)
 8001ca0:	62da      	str	r2, [r3, #44]	; 0x2c
	items[1].parent = 0;
 8001ca2:	4b86      	ldr	r3, [pc, #536]	; (8001ebc <Menu_Init+0x2b8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
	items[1].id = 2;
 8001ca8:	4b84      	ldr	r3, [pc, #528]	; (8001ebc <Menu_Init+0x2b8>)
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items[1].name = "Menu_2";
 8001cb0:	4b82      	ldr	r3, [pc, #520]	; (8001ebc <Menu_Init+0x2b8>)
 8001cb2:	4a88      	ldr	r2, [pc, #544]	; (8001ed4 <Menu_Init+0x2d0>)
 8001cb4:	639a      	str	r2, [r3, #56]	; 0x38
	items[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8001cb6:	4a81      	ldr	r2, [pc, #516]	; (8001ebc <Menu_Init+0x2b8>)
 8001cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cba:	63d3      	str	r3, [r2, #60]	; 0x3c
	items[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8001cbc:	4a7f      	ldr	r2, [pc, #508]	; (8001ebc <Menu_Init+0x2b8>)
 8001cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
	items[1].makeAction = 0;
 8001cc2:	4b7e      	ldr	r3, [pc, #504]	; (8001ebc <Menu_Init+0x2b8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	645a      	str	r2, [r3, #68]	; 0x44

	items[2].up = &items[1];
 8001cc8:	4b7c      	ldr	r3, [pc, #496]	; (8001ebc <Menu_Init+0x2b8>)
 8001cca:	4a7d      	ldr	r2, [pc, #500]	; (8001ec0 <Menu_Init+0x2bc>)
 8001ccc:	649a      	str	r2, [r3, #72]	; 0x48
	items[2].down = &items[3];
 8001cce:	4b7b      	ldr	r3, [pc, #492]	; (8001ebc <Menu_Init+0x2b8>)
 8001cd0:	4a81      	ldr	r2, [pc, #516]	; (8001ed8 <Menu_Init+0x2d4>)
 8001cd2:	64da      	str	r2, [r3, #76]	; 0x4c
	items[2].child = &items_menu_3[0];
 8001cd4:	4b79      	ldr	r3, [pc, #484]	; (8001ebc <Menu_Init+0x2b8>)
 8001cd6:	4a81      	ldr	r2, [pc, #516]	; (8001edc <Menu_Init+0x2d8>)
 8001cd8:	651a      	str	r2, [r3, #80]	; 0x50
	items[2].parent = 0;
 8001cda:	4b78      	ldr	r3, [pc, #480]	; (8001ebc <Menu_Init+0x2b8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54
	items[2].id = 3;
 8001ce0:	4b76      	ldr	r3, [pc, #472]	; (8001ebc <Menu_Init+0x2b8>)
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items[2].name = "Menu_3";
 8001ce8:	4b74      	ldr	r3, [pc, #464]	; (8001ebc <Menu_Init+0x2b8>)
 8001cea:	4a7d      	ldr	r2, [pc, #500]	; (8001ee0 <Menu_Init+0x2dc>)
 8001cec:	65da      	str	r2, [r3, #92]	; 0x5c
	items[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8001cee:	4a73      	ldr	r2, [pc, #460]	; (8001ebc <Menu_Init+0x2b8>)
 8001cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cf2:	6613      	str	r3, [r2, #96]	; 0x60
	items[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8001cf4:	4a71      	ldr	r2, [pc, #452]	; (8001ebc <Menu_Init+0x2b8>)
 8001cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cf8:	6653      	str	r3, [r2, #100]	; 0x64
	items[2].makeAction = 0;
 8001cfa:	4b70      	ldr	r3, [pc, #448]	; (8001ebc <Menu_Init+0x2b8>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	669a      	str	r2, [r3, #104]	; 0x68

	items[3].up = &items[2];
 8001d00:	4b6e      	ldr	r3, [pc, #440]	; (8001ebc <Menu_Init+0x2b8>)
 8001d02:	4a72      	ldr	r2, [pc, #456]	; (8001ecc <Menu_Init+0x2c8>)
 8001d04:	66da      	str	r2, [r3, #108]	; 0x6c
	items[3].down = &items[4];
 8001d06:	4b6d      	ldr	r3, [pc, #436]	; (8001ebc <Menu_Init+0x2b8>)
 8001d08:	4a76      	ldr	r2, [pc, #472]	; (8001ee4 <Menu_Init+0x2e0>)
 8001d0a:	671a      	str	r2, [r3, #112]	; 0x70
	items[3].child = &items_menu_4[0];
 8001d0c:	4b6b      	ldr	r3, [pc, #428]	; (8001ebc <Menu_Init+0x2b8>)
 8001d0e:	4a76      	ldr	r2, [pc, #472]	; (8001ee8 <Menu_Init+0x2e4>)
 8001d10:	675a      	str	r2, [r3, #116]	; 0x74
	items[3].parent = 0;
 8001d12:	4b6a      	ldr	r3, [pc, #424]	; (8001ebc <Menu_Init+0x2b8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	679a      	str	r2, [r3, #120]	; 0x78
	items[3].id = 4;
 8001d18:	4b68      	ldr	r3, [pc, #416]	; (8001ebc <Menu_Init+0x2b8>)
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items[3].name = "Menu_4";
 8001d20:	4b66      	ldr	r3, [pc, #408]	; (8001ebc <Menu_Init+0x2b8>)
 8001d22:	4a72      	ldr	r2, [pc, #456]	; (8001eec <Menu_Init+0x2e8>)
 8001d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8001d28:	4a64      	ldr	r2, [pc, #400]	; (8001ebc <Menu_Init+0x2b8>)
 8001d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8001d30:	4a62      	ldr	r2, [pc, #392]	; (8001ebc <Menu_Init+0x2b8>)
 8001d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items[3].makeAction = 0;
 8001d38:	4b60      	ldr	r3, [pc, #384]	; (8001ebc <Menu_Init+0x2b8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	items[4].up = &items[3];
 8001d40:	4b5e      	ldr	r3, [pc, #376]	; (8001ebc <Menu_Init+0x2b8>)
 8001d42:	4a65      	ldr	r2, [pc, #404]	; (8001ed8 <Menu_Init+0x2d4>)
 8001d44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	items[4].down = &items[5];
 8001d48:	4b5c      	ldr	r3, [pc, #368]	; (8001ebc <Menu_Init+0x2b8>)
 8001d4a:	4a69      	ldr	r2, [pc, #420]	; (8001ef0 <Menu_Init+0x2ec>)
 8001d4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	items[4].child = 0;
 8001d50:	4b5a      	ldr	r3, [pc, #360]	; (8001ebc <Menu_Init+0x2b8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	items[4].parent = 0;
 8001d58:	4b58      	ldr	r3, [pc, #352]	; (8001ebc <Menu_Init+0x2b8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	items[4].id = 5;
 8001d60:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <Menu_Init+0x2b8>)
 8001d62:	2205      	movs	r2, #5
 8001d64:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	items[4].name = "Menu_5";
 8001d68:	4b54      	ldr	r3, [pc, #336]	; (8001ebc <Menu_Init+0x2b8>)
 8001d6a:	4a62      	ldr	r2, [pc, #392]	; (8001ef4 <Menu_Init+0x2f0>)
 8001d6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	items[4].updateScreen_up = p_print_rows_on_oled_if_up;
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <Menu_Init+0x2b8>)
 8001d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d74:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	items[4].updateScreen_down = p_print_rows_on_oled_if_down;
 8001d78:	4a50      	ldr	r2, [pc, #320]	; (8001ebc <Menu_Init+0x2b8>)
 8001d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d7c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	items[4].makeAction = 0;
 8001d80:	4b4e      	ldr	r3, [pc, #312]	; (8001ebc <Menu_Init+0x2b8>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	items[5].up = &items[4];
 8001d88:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <Menu_Init+0x2b8>)
 8001d8a:	4a56      	ldr	r2, [pc, #344]	; (8001ee4 <Menu_Init+0x2e0>)
 8001d8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	items[5].down = &items[6];
 8001d90:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <Menu_Init+0x2b8>)
 8001d92:	4a59      	ldr	r2, [pc, #356]	; (8001ef8 <Menu_Init+0x2f4>)
 8001d94:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	items[5].child = 0;
 8001d98:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <Menu_Init+0x2b8>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	items[5].parent = 0;
 8001da0:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <Menu_Init+0x2b8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	items[5].id = 6;
 8001da8:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <Menu_Init+0x2b8>)
 8001daa:	2206      	movs	r2, #6
 8001dac:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	items[5].name = "Menu_6";
 8001db0:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <Menu_Init+0x2b8>)
 8001db2:	4a52      	ldr	r2, [pc, #328]	; (8001efc <Menu_Init+0x2f8>)
 8001db4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	items[5].updateScreen_up = p_print_rows_on_oled_if_up;
 8001db8:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <Menu_Init+0x2b8>)
 8001dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dbc:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
	items[5].updateScreen_down = p_print_rows_on_oled_if_down;
 8001dc0:	4a3e      	ldr	r2, [pc, #248]	; (8001ebc <Menu_Init+0x2b8>)
 8001dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	items[5].makeAction  = 0;
 8001dc8:	4b3c      	ldr	r3, [pc, #240]	; (8001ebc <Menu_Init+0x2b8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	items[6].up = &items[5];
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <Menu_Init+0x2b8>)
 8001dd2:	4a47      	ldr	r2, [pc, #284]	; (8001ef0 <Menu_Init+0x2ec>)
 8001dd4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	items[6].down = 0;
 8001dd8:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <Menu_Init+0x2b8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	items[6].child = 0;
 8001de0:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <Menu_Init+0x2b8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	items[6].parent = 0;
 8001de8:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <Menu_Init+0x2b8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	items[6].id = 7;
 8001df0:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <Menu_Init+0x2b8>)
 8001df2:	2207      	movs	r2, #7
 8001df4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	items[6].name = "Menu_7";
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <Menu_Init+0x2b8>)
 8001dfa:	4a41      	ldr	r2, [pc, #260]	; (8001f00 <Menu_Init+0x2fc>)
 8001dfc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	items[6].updateScreen_up = p_print_rows_on_oled_if_up;
 8001e00:	4a2e      	ldr	r2, [pc, #184]	; (8001ebc <Menu_Init+0x2b8>)
 8001e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	items[6].updateScreen_down = p_print_rows_on_oled_if_down;
 8001e08:	4a2c      	ldr	r2, [pc, #176]	; (8001ebc <Menu_Init+0x2b8>)
 8001e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
	items[6].makeAction  = 0;
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <Menu_Init+0x2b8>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_1[0].up = 0;
 8001e18:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
	items_menu_1[0].down = &items_menu_1[1];
 8001e1e:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e20:	4a38      	ldr	r2, [pc, #224]	; (8001f04 <Menu_Init+0x300>)
 8001e22:	605a      	str	r2, [r3, #4]
	items_menu_1[0].id = 1;
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	741a      	strb	r2, [r3, #16]
	items_menu_1[0].child = 0;
 8001e2a:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
	items_menu_1[0].parent = &items[0];
 8001e30:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e32:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <Menu_Init+0x2b8>)
 8001e34:	60da      	str	r2, [r3, #12]
	items_menu_1[0].name = "set par 1";
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e38:	4a33      	ldr	r2, [pc, #204]	; (8001f08 <Menu_Init+0x304>)
 8001e3a:	615a      	str	r2, [r3, #20]
	items_menu_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8001e3c:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e40:	6193      	str	r3, [r2, #24]
	items_menu_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8001e42:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e46:	61d3      	str	r3, [r2, #28]
	items_menu_1[0].makeAction = p_items_menu_1_set_par_1;
 8001e48:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4c:	6213      	str	r3, [r2, #32]

	items_menu_1[1].up = &items_menu_1[0];
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e50:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1[1].down = &items_menu_1[2];
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e56:	4a2d      	ldr	r2, [pc, #180]	; (8001f0c <Menu_Init+0x308>)
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1[1].child = 0;
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1[1].parent = &items[0];
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e62:	4a16      	ldr	r2, [pc, #88]	; (8001ebc <Menu_Init+0x2b8>)
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1[1].id = 2;
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <Menu_Init+0x2c0>)
 8001e68:	2202      	movs	r2, #2
 8001e6a:	e051      	b.n	8001f10 <Menu_Init+0x30c>
 8001e6c:	08000ac1 	.word	0x08000ac1
 8001e70:	08000bb9 	.word	0x08000bb9
 8001e74:	08000f19 	.word	0x08000f19
 8001e78:	08000ddd 	.word	0x08000ddd
 8001e7c:	08000f6d 	.word	0x08000f6d
 8001e80:	08001051 	.word	0x08001051
 8001e84:	08001111 	.word	0x08001111
 8001e88:	080011d1 	.word	0x080011d1
 8001e8c:	08001291 	.word	0x08001291
 8001e90:	08001375 	.word	0x08001375
 8001e94:	08001435 	.word	0x08001435
 8001e98:	08001605 	.word	0x08001605
 8001e9c:	080016c5 	.word	0x080016c5
 8001ea0:	08001785 	.word	0x08001785
 8001ea4:	08001845 	.word	0x08001845
 8001ea8:	08001905 	.word	0x08001905
 8001eac:	080019c5 	.word	0x080019c5
 8001eb0:	08001a85 	.word	0x08001a85
 8001eb4:	08001b45 	.word	0x08001b45
 8001eb8:	0800151d 	.word	0x0800151d
 8001ebc:	2000076c 	.word	0x2000076c
 8001ec0:	20000790 	.word	0x20000790
 8001ec4:	20000670 	.word	0x20000670
 8001ec8:	0800678c 	.word	0x0800678c
 8001ecc:	200007b4 	.word	0x200007b4
 8001ed0:	2000049c 	.word	0x2000049c
 8001ed4:	08006794 	.word	0x08006794
 8001ed8:	200007d8 	.word	0x200007d8
 8001edc:	20000724 	.word	0x20000724
 8001ee0:	0800679c 	.word	0x0800679c
 8001ee4:	200007fc 	.word	0x200007fc
 8001ee8:	20000508 	.word	0x20000508
 8001eec:	080067a4 	.word	0x080067a4
 8001ef0:	20000820 	.word	0x20000820
 8001ef4:	080067ac 	.word	0x080067ac
 8001ef8:	20000844 	.word	0x20000844
 8001efc:	080067b4 	.word	0x080067b4
 8001f00:	080067bc 	.word	0x080067bc
 8001f04:	20000694 	.word	0x20000694
 8001f08:	080067c4 	.word	0x080067c4
 8001f0c:	200006b8 	.word	0x200006b8
 8001f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1[1].name = "set par 2";
 8001f14:	4b8e      	ldr	r3, [pc, #568]	; (8002150 <Menu_Init+0x54c>)
 8001f16:	4a8f      	ldr	r2, [pc, #572]	; (8002154 <Menu_Init+0x550>)
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8001f1a:	4a8d      	ldr	r2, [pc, #564]	; (8002150 <Menu_Init+0x54c>)
 8001f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1e:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8001f20:	4a8b      	ldr	r2, [pc, #556]	; (8002150 <Menu_Init+0x54c>)
 8001f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1[1].makeAction = p_items_menu_1_set_par_2;
 8001f26:	4a8a      	ldr	r2, [pc, #552]	; (8002150 <Menu_Init+0x54c>)
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_1[2].up = &items_menu_1[1];
 8001f2c:	4b88      	ldr	r3, [pc, #544]	; (8002150 <Menu_Init+0x54c>)
 8001f2e:	4a8a      	ldr	r2, [pc, #552]	; (8002158 <Menu_Init+0x554>)
 8001f30:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1[2].down = &items_menu_1[3];
 8001f32:	4b87      	ldr	r3, [pc, #540]	; (8002150 <Menu_Init+0x54c>)
 8001f34:	4a89      	ldr	r2, [pc, #548]	; (800215c <Menu_Init+0x558>)
 8001f36:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1[2].child = 0;
 8001f38:	4b85      	ldr	r3, [pc, #532]	; (8002150 <Menu_Init+0x54c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1[2].parent = &items[0];
 8001f3e:	4b84      	ldr	r3, [pc, #528]	; (8002150 <Menu_Init+0x54c>)
 8001f40:	4a87      	ldr	r2, [pc, #540]	; (8002160 <Menu_Init+0x55c>)
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1[2].id = 3;
 8001f44:	4b82      	ldr	r3, [pc, #520]	; (8002150 <Menu_Init+0x54c>)
 8001f46:	2203      	movs	r2, #3
 8001f48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1[2].name = "set par 3";
 8001f4c:	4b80      	ldr	r3, [pc, #512]	; (8002150 <Menu_Init+0x54c>)
 8001f4e:	4a85      	ldr	r2, [pc, #532]	; (8002164 <Menu_Init+0x560>)
 8001f50:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8001f52:	4a7f      	ldr	r2, [pc, #508]	; (8002150 <Menu_Init+0x54c>)
 8001f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f56:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8001f58:	4a7d      	ldr	r2, [pc, #500]	; (8002150 <Menu_Init+0x54c>)
 8001f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f5c:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1[2].makeAction = p_items_menu_1_set_par_3;
 8001f5e:	4a7c      	ldr	r2, [pc, #496]	; (8002150 <Menu_Init+0x54c>)
 8001f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f62:	6693      	str	r3, [r2, #104]	; 0x68

	items_menu_1[3].up = &items_menu_1[2];
 8001f64:	4b7a      	ldr	r3, [pc, #488]	; (8002150 <Menu_Init+0x54c>)
 8001f66:	4a80      	ldr	r2, [pc, #512]	; (8002168 <Menu_Init+0x564>)
 8001f68:	66da      	str	r2, [r3, #108]	; 0x6c
	items_menu_1[3].down = &items_menu_1[4];
 8001f6a:	4b79      	ldr	r3, [pc, #484]	; (8002150 <Menu_Init+0x54c>)
 8001f6c:	4a7f      	ldr	r2, [pc, #508]	; (800216c <Menu_Init+0x568>)
 8001f6e:	671a      	str	r2, [r3, #112]	; 0x70
	items_menu_1[3].child = 0;
 8001f70:	4b77      	ldr	r3, [pc, #476]	; (8002150 <Menu_Init+0x54c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	675a      	str	r2, [r3, #116]	; 0x74
	items_menu_1[3].parent = &items[0];
 8001f76:	4b76      	ldr	r3, [pc, #472]	; (8002150 <Menu_Init+0x54c>)
 8001f78:	4a79      	ldr	r2, [pc, #484]	; (8002160 <Menu_Init+0x55c>)
 8001f7a:	679a      	str	r2, [r3, #120]	; 0x78
	items_menu_1[3].id = 4;
 8001f7c:	4b74      	ldr	r3, [pc, #464]	; (8002150 <Menu_Init+0x54c>)
 8001f7e:	2204      	movs	r2, #4
 8001f80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items_menu_1[3].name = "DO IT";						// Name of item
 8001f84:	4b72      	ldr	r3, [pc, #456]	; (8002150 <Menu_Init+0x54c>)
 8001f86:	4a7a      	ldr	r2, [pc, #488]	; (8002170 <Menu_Init+0x56c>)
 8001f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items_menu_1[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8001f8c:	4a70      	ldr	r2, [pc, #448]	; (8002150 <Menu_Init+0x54c>)
 8001f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items_menu_1[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8001f94:	4a6e      	ldr	r2, [pc, #440]	; (8002150 <Menu_Init+0x54c>)
 8001f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items_menu_1[3].makeAction = p_do_it_function_menu_1;
 8001f9c:	4a6c      	ldr	r2, [pc, #432]	; (8002150 <Menu_Init+0x54c>)
 8001f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

	items_menu_1[4].up = &items_menu_1[3];
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <Menu_Init+0x54c>)
 8001fa6:	4a6d      	ldr	r2, [pc, #436]	; (800215c <Menu_Init+0x558>)
 8001fa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	items_menu_1[4].down = 0;
 8001fac:	4b68      	ldr	r3, [pc, #416]	; (8002150 <Menu_Init+0x54c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	items_menu_1[4].child = 0;
 8001fb4:	4b66      	ldr	r3, [pc, #408]	; (8002150 <Menu_Init+0x54c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	items_menu_1[4].parent = &items[0];
 8001fbc:	4b64      	ldr	r3, [pc, #400]	; (8002150 <Menu_Init+0x54c>)
 8001fbe:	4a68      	ldr	r2, [pc, #416]	; (8002160 <Menu_Init+0x55c>)
 8001fc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	items_menu_1[4].id = 5;
 8001fc4:	4b62      	ldr	r3, [pc, #392]	; (8002150 <Menu_Init+0x54c>)
 8001fc6:	2205      	movs	r2, #5
 8001fc8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	items_menu_1[4].name = "EXIT";						// Name of item
 8001fcc:	4b60      	ldr	r3, [pc, #384]	; (8002150 <Menu_Init+0x54c>)
 8001fce:	4a69      	ldr	r2, [pc, #420]	; (8002174 <Menu_Init+0x570>)
 8001fd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	items_menu_1[4].updateScreen_up = p_print_rows_on_oled_if_up;
 8001fd4:	4a5e      	ldr	r2, [pc, #376]	; (8002150 <Menu_Init+0x54c>)
 8001fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	items_menu_1[4].updateScreen_down = p_print_rows_on_oled_if_down;
 8001fdc:	4a5c      	ldr	r2, [pc, #368]	; (8002150 <Menu_Init+0x54c>)
 8001fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe0:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	items_menu_1[4].makeAction = p_return_from_menu;
 8001fe4:	4a5a      	ldr	r2, [pc, #360]	; (8002150 <Menu_Init+0x54c>)
 8001fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_2[0].up = 0;
 8001fec:	4b62      	ldr	r3, [pc, #392]	; (8002178 <Menu_Init+0x574>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
	items_menu_2[0].down = &items_menu_2[1];
 8001ff2:	4b61      	ldr	r3, [pc, #388]	; (8002178 <Menu_Init+0x574>)
 8001ff4:	4a61      	ldr	r2, [pc, #388]	; (800217c <Menu_Init+0x578>)
 8001ff6:	605a      	str	r2, [r3, #4]
	items_menu_2[0].child = 0;
 8001ff8:	4b5f      	ldr	r3, [pc, #380]	; (8002178 <Menu_Init+0x574>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
	items_menu_2[0].parent = &items[1];
 8001ffe:	4b5e      	ldr	r3, [pc, #376]	; (8002178 <Menu_Init+0x574>)
 8002000:	4a5f      	ldr	r2, [pc, #380]	; (8002180 <Menu_Init+0x57c>)
 8002002:	60da      	str	r2, [r3, #12]
	items_menu_2[0].id = 1;
 8002004:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <Menu_Init+0x574>)
 8002006:	2201      	movs	r2, #1
 8002008:	741a      	strb	r2, [r3, #16]
	items_menu_2[0].name = "set par 1";						// Name of item
 800200a:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <Menu_Init+0x574>)
 800200c:	4a5d      	ldr	r2, [pc, #372]	; (8002184 <Menu_Init+0x580>)
 800200e:	615a      	str	r2, [r3, #20]
	items_menu_2[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8002010:	4a59      	ldr	r2, [pc, #356]	; (8002178 <Menu_Init+0x574>)
 8002012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002014:	6193      	str	r3, [r2, #24]
	items_menu_2[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8002016:	4a58      	ldr	r2, [pc, #352]	; (8002178 <Menu_Init+0x574>)
 8002018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800201a:	61d3      	str	r3, [r2, #28]
	items_menu_2[0].makeAction = p_items_menu_2_set_par_1;
 800201c:	4a56      	ldr	r2, [pc, #344]	; (8002178 <Menu_Init+0x574>)
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	6213      	str	r3, [r2, #32]

	items_menu_2[1].up = &items_menu_2[0];
 8002022:	4b55      	ldr	r3, [pc, #340]	; (8002178 <Menu_Init+0x574>)
 8002024:	4a54      	ldr	r2, [pc, #336]	; (8002178 <Menu_Init+0x574>)
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2[1].down = &items_menu_2[2];
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <Menu_Init+0x574>)
 800202a:	4a57      	ldr	r2, [pc, #348]	; (8002188 <Menu_Init+0x584>)
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2[1].child = 0;
 800202e:	4b52      	ldr	r3, [pc, #328]	; (8002178 <Menu_Init+0x574>)
 8002030:	2200      	movs	r2, #0
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2[1].parent = &items[1];
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <Menu_Init+0x574>)
 8002036:	4a52      	ldr	r2, [pc, #328]	; (8002180 <Menu_Init+0x57c>)
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2[1].id = 2;
 800203a:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <Menu_Init+0x574>)
 800203c:	2202      	movs	r2, #2
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2[1].name = "DO IT";						// Name of item
 8002042:	4b4d      	ldr	r3, [pc, #308]	; (8002178 <Menu_Init+0x574>)
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <Menu_Init+0x56c>)
 8002046:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8002048:	4a4b      	ldr	r2, [pc, #300]	; (8002178 <Menu_Init+0x574>)
 800204a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800204c:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2[1].updateScreen_down = p_print_rows_on_oled_if_down;
 800204e:	4a4a      	ldr	r2, [pc, #296]	; (8002178 <Menu_Init+0x574>)
 8002050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002052:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2[1].makeAction = p_do_it_function_menu_2;
 8002054:	4a48      	ldr	r2, [pc, #288]	; (8002178 <Menu_Init+0x574>)
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_2[2].up = &items_menu_2[1];
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <Menu_Init+0x574>)
 800205c:	4a47      	ldr	r2, [pc, #284]	; (800217c <Menu_Init+0x578>)
 800205e:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2[2].down = 0;
 8002060:	4b45      	ldr	r3, [pc, #276]	; (8002178 <Menu_Init+0x574>)
 8002062:	2200      	movs	r2, #0
 8002064:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2[2].child = 0;
 8002066:	4b44      	ldr	r3, [pc, #272]	; (8002178 <Menu_Init+0x574>)
 8002068:	2200      	movs	r2, #0
 800206a:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2[2].parent = &items[1];
 800206c:	4b42      	ldr	r3, [pc, #264]	; (8002178 <Menu_Init+0x574>)
 800206e:	4a44      	ldr	r2, [pc, #272]	; (8002180 <Menu_Init+0x57c>)
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2[2].id = 3;
 8002072:	4b41      	ldr	r3, [pc, #260]	; (8002178 <Menu_Init+0x574>)
 8002074:	2203      	movs	r2, #3
 8002076:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2[2].name = "EXIT";						// Name of item
 800207a:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <Menu_Init+0x574>)
 800207c:	4a3d      	ldr	r2, [pc, #244]	; (8002174 <Menu_Init+0x570>)
 800207e:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8002080:	4a3d      	ldr	r2, [pc, #244]	; (8002178 <Menu_Init+0x574>)
 8002082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002084:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8002086:	4a3c      	ldr	r2, [pc, #240]	; (8002178 <Menu_Init+0x574>)
 8002088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208a:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2[2].makeAction = p_return_from_menu;
 800208c:	4a3a      	ldr	r2, [pc, #232]	; (8002178 <Menu_Init+0x574>)
 800208e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002090:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_3[0].up = 0;
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <Menu_Init+0x588>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
	items_menu_3[0].down = &items_menu_3[1];
 8002098:	4b3c      	ldr	r3, [pc, #240]	; (800218c <Menu_Init+0x588>)
 800209a:	4a3d      	ldr	r2, [pc, #244]	; (8002190 <Menu_Init+0x58c>)
 800209c:	605a      	str	r2, [r3, #4]
	items_menu_3[0].child = 0;
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <Menu_Init+0x588>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
	items_menu_3[0].parent = &items[2];
 80020a4:	4b39      	ldr	r3, [pc, #228]	; (800218c <Menu_Init+0x588>)
 80020a6:	4a3b      	ldr	r2, [pc, #236]	; (8002194 <Menu_Init+0x590>)
 80020a8:	60da      	str	r2, [r3, #12]
	items_menu_3[0].id = 1;
 80020aa:	4b38      	ldr	r3, [pc, #224]	; (800218c <Menu_Init+0x588>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	741a      	strb	r2, [r3, #16]
	items_menu_3[0].name = "DO IT";						// Name of item
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <Menu_Init+0x588>)
 80020b2:	4a2f      	ldr	r2, [pc, #188]	; (8002170 <Menu_Init+0x56c>)
 80020b4:	615a      	str	r2, [r3, #20]
	items_menu_3[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80020b6:	4a35      	ldr	r2, [pc, #212]	; (800218c <Menu_Init+0x588>)
 80020b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ba:	6193      	str	r3, [r2, #24]
	items_menu_3[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80020bc:	4a33      	ldr	r2, [pc, #204]	; (800218c <Menu_Init+0x588>)
 80020be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c0:	61d3      	str	r3, [r2, #28]
	items_menu_3[0].makeAction = p_do_it_function_menu_3;
 80020c2:	4a32      	ldr	r2, [pc, #200]	; (800218c <Menu_Init+0x588>)
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	6213      	str	r3, [r2, #32]

	items_menu_3[1].up = &items_menu_3[0];
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <Menu_Init+0x588>)
 80020ca:	4a30      	ldr	r2, [pc, #192]	; (800218c <Menu_Init+0x588>)
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_3[1].down = 0;
 80020ce:	4b2f      	ldr	r3, [pc, #188]	; (800218c <Menu_Init+0x588>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_3[1].child = 0;
 80020d4:	4b2d      	ldr	r3, [pc, #180]	; (800218c <Menu_Init+0x588>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_3[1].parent = &items[2];
 80020da:	4b2c      	ldr	r3, [pc, #176]	; (800218c <Menu_Init+0x588>)
 80020dc:	4a2d      	ldr	r2, [pc, #180]	; (8002194 <Menu_Init+0x590>)
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_3[1].id = 2;
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <Menu_Init+0x588>)
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_3[1].name = "EXIT";						// Name of item
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <Menu_Init+0x588>)
 80020ea:	4a22      	ldr	r2, [pc, #136]	; (8002174 <Menu_Init+0x570>)
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_3[1].updateScreen_up = p_print_rows_on_oled_if_up;
 80020ee:	4a27      	ldr	r2, [pc, #156]	; (800218c <Menu_Init+0x588>)
 80020f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f2:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_3[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80020f4:	4a25      	ldr	r2, [pc, #148]	; (800218c <Menu_Init+0x588>)
 80020f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_3[1].makeAction = p_return_from_menu;
 80020fa:	4a24      	ldr	r2, [pc, #144]	; (800218c <Menu_Init+0x588>)
 80020fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fe:	6453      	str	r3, [r2, #68]	; 0x44

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_4[0].up = 0;
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <Menu_Init+0x594>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
	items_menu_4[0].down = &items_menu_4[1];
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <Menu_Init+0x594>)
 8002108:	4a24      	ldr	r2, [pc, #144]	; (800219c <Menu_Init+0x598>)
 800210a:	605a      	str	r2, [r3, #4]
	items_menu_4[0].child = 0;
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <Menu_Init+0x594>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
	items_menu_4[0].parent = &items[3];
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <Menu_Init+0x594>)
 8002114:	4a22      	ldr	r2, [pc, #136]	; (80021a0 <Menu_Init+0x59c>)
 8002116:	60da      	str	r2, [r3, #12]
	items_menu_4[0].id = 1;
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <Menu_Init+0x594>)
 800211a:	2201      	movs	r2, #1
 800211c:	741a      	strb	r2, [r3, #16]
	items_menu_4[0].name = "set par 1";						// Name of item
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <Menu_Init+0x594>)
 8002120:	4a18      	ldr	r2, [pc, #96]	; (8002184 <Menu_Init+0x580>)
 8002122:	615a      	str	r2, [r3, #20]
	items_menu_4[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8002124:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <Menu_Init+0x594>)
 8002126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002128:	6193      	str	r3, [r2, #24]
	items_menu_4[0].updateScreen_down = p_print_rows_on_oled_if_down;
 800212a:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <Menu_Init+0x594>)
 800212c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800212e:	61d3      	str	r3, [r2, #28]
	items_menu_4[0].makeAction = p_items_menu_4_set_par_1;
 8002130:	4a19      	ldr	r2, [pc, #100]	; (8002198 <Menu_Init+0x594>)
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	6213      	str	r3, [r2, #32]

	items_menu_4[1].up = &items_menu_4[0];
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <Menu_Init+0x594>)
 8002138:	4a17      	ldr	r2, [pc, #92]	; (8002198 <Menu_Init+0x594>)
 800213a:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_4[1].down = &items_menu_4[2];
 800213c:	4b16      	ldr	r3, [pc, #88]	; (8002198 <Menu_Init+0x594>)
 800213e:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <Menu_Init+0x5a0>)
 8002140:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_4[1].child = 0;
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <Menu_Init+0x594>)
 8002144:	2200      	movs	r2, #0
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_4[1].parent = &items[3];
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <Menu_Init+0x594>)
 800214a:	4a15      	ldr	r2, [pc, #84]	; (80021a0 <Menu_Init+0x59c>)
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
 800214e:	e02b      	b.n	80021a8 <Menu_Init+0x5a4>
 8002150:	20000670 	.word	0x20000670
 8002154:	080067d0 	.word	0x080067d0
 8002158:	20000694 	.word	0x20000694
 800215c:	200006dc 	.word	0x200006dc
 8002160:	2000076c 	.word	0x2000076c
 8002164:	080067dc 	.word	0x080067dc
 8002168:	200006b8 	.word	0x200006b8
 800216c:	20000700 	.word	0x20000700
 8002170:	080067e8 	.word	0x080067e8
 8002174:	080067f0 	.word	0x080067f0
 8002178:	2000049c 	.word	0x2000049c
 800217c:	200004c0 	.word	0x200004c0
 8002180:	20000790 	.word	0x20000790
 8002184:	080067c4 	.word	0x080067c4
 8002188:	200004e4 	.word	0x200004e4
 800218c:	20000724 	.word	0x20000724
 8002190:	20000748 	.word	0x20000748
 8002194:	200007b4 	.word	0x200007b4
 8002198:	20000508 	.word	0x20000508
 800219c:	2000052c 	.word	0x2000052c
 80021a0:	200007d8 	.word	0x200007d8
 80021a4:	20000550 	.word	0x20000550
	items_menu_4[1].id = 2;
 80021a8:	4b94      	ldr	r3, [pc, #592]	; (80023fc <Menu_Init+0x7f8>)
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_4[1].name = "set par 2";						// Name of item
 80021b0:	4b92      	ldr	r3, [pc, #584]	; (80023fc <Menu_Init+0x7f8>)
 80021b2:	4a93      	ldr	r2, [pc, #588]	; (8002400 <Menu_Init+0x7fc>)
 80021b4:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_4[1].updateScreen_up = p_print_rows_on_oled_if_up;
 80021b6:	4a91      	ldr	r2, [pc, #580]	; (80023fc <Menu_Init+0x7f8>)
 80021b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ba:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_4[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80021bc:	4a8f      	ldr	r2, [pc, #572]	; (80023fc <Menu_Init+0x7f8>)
 80021be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_4[1].makeAction = p_items_menu_4_set_par_2;
 80021c2:	4a8e      	ldr	r2, [pc, #568]	; (80023fc <Menu_Init+0x7f8>)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_4[2].up = &items_menu_4[1];
 80021c8:	4b8c      	ldr	r3, [pc, #560]	; (80023fc <Menu_Init+0x7f8>)
 80021ca:	4a8e      	ldr	r2, [pc, #568]	; (8002404 <Menu_Init+0x800>)
 80021cc:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_4[2].down = &items_menu_4[3];
 80021ce:	4b8b      	ldr	r3, [pc, #556]	; (80023fc <Menu_Init+0x7f8>)
 80021d0:	4a8d      	ldr	r2, [pc, #564]	; (8002408 <Menu_Init+0x804>)
 80021d2:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_4[2].child = 0;
 80021d4:	4b89      	ldr	r3, [pc, #548]	; (80023fc <Menu_Init+0x7f8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_4[2].parent = &items[3];
 80021da:	4b88      	ldr	r3, [pc, #544]	; (80023fc <Menu_Init+0x7f8>)
 80021dc:	4a8b      	ldr	r2, [pc, #556]	; (800240c <Menu_Init+0x808>)
 80021de:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_4[2].id = 3;
 80021e0:	4b86      	ldr	r3, [pc, #536]	; (80023fc <Menu_Init+0x7f8>)
 80021e2:	2203      	movs	r2, #3
 80021e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_4[2].name = "set par 3";						// Name of item
 80021e8:	4b84      	ldr	r3, [pc, #528]	; (80023fc <Menu_Init+0x7f8>)
 80021ea:	4a89      	ldr	r2, [pc, #548]	; (8002410 <Menu_Init+0x80c>)
 80021ec:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_4[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80021ee:	4a83      	ldr	r2, [pc, #524]	; (80023fc <Menu_Init+0x7f8>)
 80021f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f2:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_4[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80021f4:	4a81      	ldr	r2, [pc, #516]	; (80023fc <Menu_Init+0x7f8>)
 80021f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f8:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_4[2].makeAction = p_items_menu_4_set_par_3;
 80021fa:	4a80      	ldr	r2, [pc, #512]	; (80023fc <Menu_Init+0x7f8>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6693      	str	r3, [r2, #104]	; 0x68

	items_menu_4[3].up = &items_menu_4[2];
 8002200:	4b7e      	ldr	r3, [pc, #504]	; (80023fc <Menu_Init+0x7f8>)
 8002202:	4a84      	ldr	r2, [pc, #528]	; (8002414 <Menu_Init+0x810>)
 8002204:	66da      	str	r2, [r3, #108]	; 0x6c
	items_menu_4[3].down = &items_menu_4[4];
 8002206:	4b7d      	ldr	r3, [pc, #500]	; (80023fc <Menu_Init+0x7f8>)
 8002208:	4a83      	ldr	r2, [pc, #524]	; (8002418 <Menu_Init+0x814>)
 800220a:	671a      	str	r2, [r3, #112]	; 0x70
	items_menu_4[3].child = 0;
 800220c:	4b7b      	ldr	r3, [pc, #492]	; (80023fc <Menu_Init+0x7f8>)
 800220e:	2200      	movs	r2, #0
 8002210:	675a      	str	r2, [r3, #116]	; 0x74
	items_menu_4[3].parent = &items[3];
 8002212:	4b7a      	ldr	r3, [pc, #488]	; (80023fc <Menu_Init+0x7f8>)
 8002214:	4a7d      	ldr	r2, [pc, #500]	; (800240c <Menu_Init+0x808>)
 8002216:	679a      	str	r2, [r3, #120]	; 0x78
	items_menu_4[3].id = 4;
 8002218:	4b78      	ldr	r3, [pc, #480]	; (80023fc <Menu_Init+0x7f8>)
 800221a:	2204      	movs	r2, #4
 800221c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items_menu_4[3].name = "set par 4";						// Name of item
 8002220:	4b76      	ldr	r3, [pc, #472]	; (80023fc <Menu_Init+0x7f8>)
 8002222:	4a7e      	ldr	r2, [pc, #504]	; (800241c <Menu_Init+0x818>)
 8002224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items_menu_4[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8002228:	4a74      	ldr	r2, [pc, #464]	; (80023fc <Menu_Init+0x7f8>)
 800222a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800222c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items_menu_4[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8002230:	4a72      	ldr	r2, [pc, #456]	; (80023fc <Menu_Init+0x7f8>)
 8002232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items_menu_4[3].makeAction = p_items_menu_4_set_par_4;
 8002238:	4a70      	ldr	r2, [pc, #448]	; (80023fc <Menu_Init+0x7f8>)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

	items_menu_4[4].up = &items_menu_4[3];
 8002240:	4b6e      	ldr	r3, [pc, #440]	; (80023fc <Menu_Init+0x7f8>)
 8002242:	4a71      	ldr	r2, [pc, #452]	; (8002408 <Menu_Init+0x804>)
 8002244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	items_menu_4[4].down = &items_menu_4[5];
 8002248:	4b6c      	ldr	r3, [pc, #432]	; (80023fc <Menu_Init+0x7f8>)
 800224a:	4a75      	ldr	r2, [pc, #468]	; (8002420 <Menu_Init+0x81c>)
 800224c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	items_menu_4[4].child = 0;
 8002250:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <Menu_Init+0x7f8>)
 8002252:	2200      	movs	r2, #0
 8002254:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	items_menu_4[4].parent = &items[3];
 8002258:	4b68      	ldr	r3, [pc, #416]	; (80023fc <Menu_Init+0x7f8>)
 800225a:	4a6c      	ldr	r2, [pc, #432]	; (800240c <Menu_Init+0x808>)
 800225c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	items_menu_4[4].id = 5;
 8002260:	4b66      	ldr	r3, [pc, #408]	; (80023fc <Menu_Init+0x7f8>)
 8002262:	2205      	movs	r2, #5
 8002264:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	items_menu_4[4].name = "set par 5";						// Name of item
 8002268:	4b64      	ldr	r3, [pc, #400]	; (80023fc <Menu_Init+0x7f8>)
 800226a:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <Menu_Init+0x820>)
 800226c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	items_menu_4[4].updateScreen_up = p_print_rows_on_oled_if_up;
 8002270:	4a62      	ldr	r2, [pc, #392]	; (80023fc <Menu_Init+0x7f8>)
 8002272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002274:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	items_menu_4[4].updateScreen_down = p_print_rows_on_oled_if_down;
 8002278:	4a60      	ldr	r2, [pc, #384]	; (80023fc <Menu_Init+0x7f8>)
 800227a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	items_menu_4[4].makeAction = p_items_menu_4_set_par_5;
 8002280:	4a5e      	ldr	r2, [pc, #376]	; (80023fc <Menu_Init+0x7f8>)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

	items_menu_4[5].up = &items_menu_4[4];
 8002288:	4b5c      	ldr	r3, [pc, #368]	; (80023fc <Menu_Init+0x7f8>)
 800228a:	4a63      	ldr	r2, [pc, #396]	; (8002418 <Menu_Init+0x814>)
 800228c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	items_menu_4[5].down = &items_menu_4[6];
 8002290:	4b5a      	ldr	r3, [pc, #360]	; (80023fc <Menu_Init+0x7f8>)
 8002292:	4a65      	ldr	r2, [pc, #404]	; (8002428 <Menu_Init+0x824>)
 8002294:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	items_menu_4[5].child = 0;
 8002298:	4b58      	ldr	r3, [pc, #352]	; (80023fc <Menu_Init+0x7f8>)
 800229a:	2200      	movs	r2, #0
 800229c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	items_menu_4[5].parent = &items[3];
 80022a0:	4b56      	ldr	r3, [pc, #344]	; (80023fc <Menu_Init+0x7f8>)
 80022a2:	4a5a      	ldr	r2, [pc, #360]	; (800240c <Menu_Init+0x808>)
 80022a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	items_menu_4[5].id = 6;
 80022a8:	4b54      	ldr	r3, [pc, #336]	; (80023fc <Menu_Init+0x7f8>)
 80022aa:	2206      	movs	r2, #6
 80022ac:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	items_menu_4[5].name = "set par 6";						// Name of item
 80022b0:	4b52      	ldr	r3, [pc, #328]	; (80023fc <Menu_Init+0x7f8>)
 80022b2:	4a5e      	ldr	r2, [pc, #376]	; (800242c <Menu_Init+0x828>)
 80022b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	items_menu_4[5].updateScreen_up = p_print_rows_on_oled_if_up;
 80022b8:	4a50      	ldr	r2, [pc, #320]	; (80023fc <Menu_Init+0x7f8>)
 80022ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022bc:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
	items_menu_4[5].updateScreen_down = p_print_rows_on_oled_if_down;
 80022c0:	4a4e      	ldr	r2, [pc, #312]	; (80023fc <Menu_Init+0x7f8>)
 80022c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	items_menu_4[5].makeAction = p_items_menu_4_set_par_6;
 80022c8:	4a4c      	ldr	r2, [pc, #304]	; (80023fc <Menu_Init+0x7f8>)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

	items_menu_4[6].up = &items_menu_4[5];
 80022d0:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <Menu_Init+0x7f8>)
 80022d2:	4a53      	ldr	r2, [pc, #332]	; (8002420 <Menu_Init+0x81c>)
 80022d4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	items_menu_4[6].down = &items_menu_4[7];
 80022d8:	4b48      	ldr	r3, [pc, #288]	; (80023fc <Menu_Init+0x7f8>)
 80022da:	4a55      	ldr	r2, [pc, #340]	; (8002430 <Menu_Init+0x82c>)
 80022dc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	items_menu_4[6].child = 0;
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <Menu_Init+0x7f8>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	items_menu_4[6].parent = &items[3];
 80022e8:	4b44      	ldr	r3, [pc, #272]	; (80023fc <Menu_Init+0x7f8>)
 80022ea:	4a48      	ldr	r2, [pc, #288]	; (800240c <Menu_Init+0x808>)
 80022ec:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	items_menu_4[6].id = 7;
 80022f0:	4b42      	ldr	r3, [pc, #264]	; (80023fc <Menu_Init+0x7f8>)
 80022f2:	2207      	movs	r2, #7
 80022f4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	items_menu_4[6].name = "set par 7";						// Name of item
 80022f8:	4b40      	ldr	r3, [pc, #256]	; (80023fc <Menu_Init+0x7f8>)
 80022fa:	4a4e      	ldr	r2, [pc, #312]	; (8002434 <Menu_Init+0x830>)
 80022fc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	items_menu_4[6].updateScreen_up = p_print_rows_on_oled_if_up;
 8002300:	4a3e      	ldr	r2, [pc, #248]	; (80023fc <Menu_Init+0x7f8>)
 8002302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002304:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	items_menu_4[6].updateScreen_down = p_print_rows_on_oled_if_down;
 8002308:	4a3c      	ldr	r2, [pc, #240]	; (80023fc <Menu_Init+0x7f8>)
 800230a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800230c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
	items_menu_4[6].makeAction = p_items_menu_4_set_par_7;
 8002310:	4a3a      	ldr	r2, [pc, #232]	; (80023fc <Menu_Init+0x7f8>)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

	items_menu_4[7].up = &items_menu_4[6];
 8002318:	4b38      	ldr	r3, [pc, #224]	; (80023fc <Menu_Init+0x7f8>)
 800231a:	4a43      	ldr	r2, [pc, #268]	; (8002428 <Menu_Init+0x824>)
 800231c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	items_menu_4[7].down = &items_menu_4[8];
 8002320:	4b36      	ldr	r3, [pc, #216]	; (80023fc <Menu_Init+0x7f8>)
 8002322:	4a45      	ldr	r2, [pc, #276]	; (8002438 <Menu_Init+0x834>)
 8002324:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	items_menu_4[7].child = 0;
 8002328:	4b34      	ldr	r3, [pc, #208]	; (80023fc <Menu_Init+0x7f8>)
 800232a:	2200      	movs	r2, #0
 800232c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	items_menu_4[7].parent = &items[3];
 8002330:	4b32      	ldr	r3, [pc, #200]	; (80023fc <Menu_Init+0x7f8>)
 8002332:	4a36      	ldr	r2, [pc, #216]	; (800240c <Menu_Init+0x808>)
 8002334:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	items_menu_4[7].id = 8;
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <Menu_Init+0x7f8>)
 800233a:	2208      	movs	r2, #8
 800233c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	items_menu_4[7].name = "set par 8";						// Name of item
 8002340:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <Menu_Init+0x7f8>)
 8002342:	4a3e      	ldr	r2, [pc, #248]	; (800243c <Menu_Init+0x838>)
 8002344:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	items_menu_4[7].updateScreen_up = p_print_rows_on_oled_if_up;
 8002348:	4a2c      	ldr	r2, [pc, #176]	; (80023fc <Menu_Init+0x7f8>)
 800234a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	items_menu_4[7].updateScreen_down = p_print_rows_on_oled_if_down;
 8002350:	4a2a      	ldr	r2, [pc, #168]	; (80023fc <Menu_Init+0x7f8>)
 8002352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002354:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	items_menu_4[7].makeAction = p_items_menu_4_set_par_8;
 8002358:	4a28      	ldr	r2, [pc, #160]	; (80023fc <Menu_Init+0x7f8>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	items_menu_4[8].up = &items_menu_4[7];
 8002360:	4b26      	ldr	r3, [pc, #152]	; (80023fc <Menu_Init+0x7f8>)
 8002362:	4a33      	ldr	r2, [pc, #204]	; (8002430 <Menu_Init+0x82c>)
 8002364:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	items_menu_4[8].down = &items_menu_4[9];
 8002368:	4b24      	ldr	r3, [pc, #144]	; (80023fc <Menu_Init+0x7f8>)
 800236a:	4a35      	ldr	r2, [pc, #212]	; (8002440 <Menu_Init+0x83c>)
 800236c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	items_menu_4[8].child = 0;
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <Menu_Init+0x7f8>)
 8002372:	2200      	movs	r2, #0
 8002374:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	items_menu_4[8].parent = &items[3];
 8002378:	4b20      	ldr	r3, [pc, #128]	; (80023fc <Menu_Init+0x7f8>)
 800237a:	4a24      	ldr	r2, [pc, #144]	; (800240c <Menu_Init+0x808>)
 800237c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	items_menu_4[8].id = 9;
 8002380:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <Menu_Init+0x7f8>)
 8002382:	2209      	movs	r2, #9
 8002384:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	items_menu_4[8].name = "DO IT";						// Name of item
 8002388:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <Menu_Init+0x7f8>)
 800238a:	4a2e      	ldr	r2, [pc, #184]	; (8002444 <Menu_Init+0x840>)
 800238c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	items_menu_4[8].updateScreen_up = p_print_rows_on_oled_if_up;
 8002390:	4a1a      	ldr	r2, [pc, #104]	; (80023fc <Menu_Init+0x7f8>)
 8002392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002394:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	items_menu_4[8].updateScreen_down = p_print_rows_on_oled_if_down;
 8002398:	4a18      	ldr	r2, [pc, #96]	; (80023fc <Menu_Init+0x7f8>)
 800239a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239c:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
	items_menu_4[8].makeAction = p_do_it_function_menu_4;
 80023a0:	4a16      	ldr	r2, [pc, #88]	; (80023fc <Menu_Init+0x7f8>)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	items_menu_4[9].up = &items_menu_4[8];
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <Menu_Init+0x7f8>)
 80023aa:	4a23      	ldr	r2, [pc, #140]	; (8002438 <Menu_Init+0x834>)
 80023ac:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	items_menu_4[9].down = 0;
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <Menu_Init+0x7f8>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	items_menu_4[9].child = 0;
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <Menu_Init+0x7f8>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	items_menu_4[9].parent = &items[3];
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <Menu_Init+0x7f8>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <Menu_Init+0x808>)
 80023c4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	items_menu_4[9].id = 10;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <Menu_Init+0x7f8>)
 80023ca:	220a      	movs	r2, #10
 80023cc:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	items_menu_4[9].name = "EXIT";						// Name of item
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <Menu_Init+0x7f8>)
 80023d2:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <Menu_Init+0x844>)
 80023d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	items_menu_4[9].updateScreen_up = p_print_rows_on_oled_if_up;
 80023d8:	4a08      	ldr	r2, [pc, #32]	; (80023fc <Menu_Init+0x7f8>)
 80023da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023dc:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	items_menu_4[9].updateScreen_down = p_print_rows_on_oled_if_down;
 80023e0:	4a06      	ldr	r2, [pc, #24]	; (80023fc <Menu_Init+0x7f8>)
 80023e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e4:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	items_menu_4[9].makeAction = p_return_from_menu;
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <Menu_Init+0x7f8>)
 80023ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ec:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
}
 80023f0:	bf00      	nop
 80023f2:	3754      	adds	r7, #84	; 0x54
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000508 	.word	0x20000508
 8002400:	080067d0 	.word	0x080067d0
 8002404:	2000052c 	.word	0x2000052c
 8002408:	20000574 	.word	0x20000574
 800240c:	200007d8 	.word	0x200007d8
 8002410:	080067dc 	.word	0x080067dc
 8002414:	20000550 	.word	0x20000550
 8002418:	20000598 	.word	0x20000598
 800241c:	080067f8 	.word	0x080067f8
 8002420:	200005bc 	.word	0x200005bc
 8002424:	08006804 	.word	0x08006804
 8002428:	200005e0 	.word	0x200005e0
 800242c:	08006810 	.word	0x08006810
 8002430:	20000604 	.word	0x20000604
 8002434:	0800681c 	.word	0x0800681c
 8002438:	20000628 	.word	0x20000628
 800243c:	08006828 	.word	0x08006828
 8002440:	2000064c 	.word	0x2000064c
 8002444:	080067e8 	.word	0x080067e8
 8002448:	080067f0 	.word	0x080067f0

0800244c <up>:
// ----------------------------------------------------------------------------------------
void up(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	if (currentItem->up)
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <up+0x30>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00d      	beq.n	8002476 <up+0x2a>
	{
	    currentItem = currentItem->up;
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <up+0x30>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a06      	ldr	r2, [pc, #24]	; (800247c <up+0x30>)
 8002462:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_up )
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <up+0x30>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <up+0x2a>
	    {
	        currentItem->updateScreen_up();
 800246e:	4b03      	ldr	r3, [pc, #12]	; (800247c <up+0x30>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4798      	blx	r3
	    }
	}
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000008 	.word	0x20000008

08002480 <down>:
// ----------------------------------------------------------------------------------------
void down(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
	if (currentItem->down)
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <down+0x30>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00d      	beq.n	80024aa <down+0x2a>
	{
	    currentItem = currentItem->down;
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <down+0x30>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <down+0x30>)
 8002496:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_down )
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <down+0x30>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <down+0x2a>
	    {
	        currentItem->updateScreen_down();
 80024a2:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <down+0x30>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	4798      	blx	r3
	    }
	}
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000008 	.word	0x20000008

080024b4 <enter>:
// ----------------------------------------------------------------------------------------
void enter(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
	bool status = true;
 80024ba:	2301      	movs	r3, #1
 80024bc:	71fb      	strb	r3, [r7, #7]
	// Якщо є функція "makeAction" тоді виконати її
	if (currentItem->makeAction)
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <enter+0x48>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <enter+0x20>
	{
		currentItem->makeAction();
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <enter+0x48>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4798      	blx	r3
		status = false;
 80024d0:	2300      	movs	r3, #0
 80024d2:	71fb      	strb	r3, [r7, #7]
	}
	// Якщо є перехід на  "child" і "makeAction" не була виконана, тоді виконати перехід
	if((currentItem->child) && (status == true))
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <enter+0x48>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <enter+0x3e>
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <enter+0x3e>
	{
		currentItem = currentItem->child;
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <enter+0x48>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4a04      	ldr	r2, [pc, #16]	; (80024fc <enter+0x48>)
 80024ec:	6013      	str	r3, [r2, #0]
		action();
 80024ee:	f7fe fc75 	bl	8000ddc <action>
	}
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008

08002500 <menu>:
// ----------------------------------------------------------------------------------------
void menu(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	Menu_Init();									// Init all structures
 8002504:	f7ff fb7e 	bl	8001c04 <Menu_Init>

	print_menu_init();								// Print start menu and scrolingbar
 8002508:	f7fe fbd8 	bl	8000cbc <print_menu_init>

	HAL_Delay(10);
 800250c:	200a      	movs	r0, #10
 800250e:	f000 fde7 	bl	80030e0 <HAL_Delay>

	while(1)
	{
		if(button_processed_status == 1)			// If buttons was pressed
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <menu+0x50>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d1fb      	bne.n	8002512 <menu+0x12>
		{

			button_processed_status = 1;
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <menu+0x50>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]
			switch (button_status)
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <menu+0x54>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d00c      	beq.n	8002542 <menu+0x42>
 8002528:	2b03      	cmp	r3, #3
 800252a:	dc0d      	bgt.n	8002548 <menu+0x48>
 800252c:	2b01      	cmp	r3, #1
 800252e:	d002      	beq.n	8002536 <menu+0x36>
 8002530:	2b02      	cmp	r3, #2
 8002532:	d003      	beq.n	800253c <menu+0x3c>
 8002534:	e008      	b.n	8002548 <menu+0x48>
			{
				case BOTTON_UP:
					up();
 8002536:	f7ff ff89 	bl	800244c <up>
					break;
 800253a:	e005      	b.n	8002548 <menu+0x48>
				case BUTTON_ENTER:
					enter();
 800253c:	f7ff ffba 	bl	80024b4 <enter>
					break;
 8002540:	e002      	b.n	8002548 <menu+0x48>
				case BUTTON_DOWN:
					down();
 8002542:	f7ff ff9d 	bl	8002480 <down>
					break;
 8002546:	bf00      	nop
			}
			button_status = BOTTON_DOESENT_PRESS;
 8002548:	4b02      	ldr	r3, [pc, #8]	; (8002554 <menu+0x54>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
		if(button_processed_status == 1)			// If buttons was pressed
 800254e:	e7e0      	b.n	8002512 <menu+0x12>
 8002550:	20000020 	.word	0x20000020
 8002554:	2000045f 	.word	0x2000045f

08002558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800255c:	f000 fd5e 	bl	800301c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002560:	f000 f826 	bl	80025b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002564:	f000 f972 	bl	800284c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002568:	f000 f868 	bl	800263c <MX_I2C1_Init>
  MX_SPI1_Init();
 800256c:	f000 f894 	bl	8002698 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002570:	f000 f918 	bl	80027a4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002574:	f000 f8c6 	bl	8002704 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8002578:	f000 f93e 	bl	80027f8 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800257c:	2201      	movs	r2, #1
 800257e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002582:	480a      	ldr	r0, [pc, #40]	; (80025ac <main+0x54>)
 8002584:	f001 f929 	bl	80037da <HAL_GPIO_WritePin>

  // Init interrupp
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	2025      	movs	r0, #37	; 0x25
 800258e:	f000 fea2 	bl	80032d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002592:	2025      	movs	r0, #37	; 0x25
 8002594:	f000 febb 	bl	800330e <HAL_NVIC_EnableIRQ>


  // OLED init
  ssd1306_Init();
 8002598:	f7fd fee2 	bl	8000360 <ssd1306_Init>
  ssd1306_Fill(Black);
 800259c:	2000      	movs	r0, #0
 800259e:	f7fd ff4b 	bl	8000438 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80025a2:	f7fd ff6b 	bl	800047c <ssd1306_UpdateScreen>
//		state_machine();
//	}
    //////////////////////////////////////////////

	  //lists();
	 menu();
 80025a6:	f7ff ffab 	bl	8002500 <menu>
 80025aa:	e7fc      	b.n	80025a6 <main+0x4e>
 80025ac:	40011000 	.word	0x40011000

080025b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b090      	sub	sp, #64	; 0x40
 80025b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025b6:	f107 0318 	add.w	r3, r7, #24
 80025ba:	2228      	movs	r2, #40	; 0x28
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f004 f800 	bl	80065c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
 80025d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025d2:	2301      	movs	r3, #1
 80025d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e0:	2301      	movs	r3, #1
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e4:	2302      	movs	r3, #2
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80025ee:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f4:	f107 0318 	add.w	r3, r7, #24
 80025f8:	4618      	mov	r0, r3
 80025fa:	f001 fd91 	bl	8004120 <HAL_RCC_OscConfig>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002604:	f000 fa40 	bl	8002a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002608:	230f      	movs	r3, #15
 800260a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800260c:	2302      	movs	r3, #2
 800260e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2102      	movs	r1, #2
 8002622:	4618      	mov	r0, r3
 8002624:	f001 fffc 	bl	8004620 <HAL_RCC_ClockConfig>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800262e:	f000 fa2b 	bl	8002a88 <Error_Handler>
  }
}
 8002632:	bf00      	nop
 8002634:	3740      	adds	r7, #64	; 0x40
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <MX_I2C1_Init+0x50>)
 8002642:	4a13      	ldr	r2, [pc, #76]	; (8002690 <MX_I2C1_Init+0x54>)
 8002644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <MX_I2C1_Init+0x50>)
 8002648:	4a12      	ldr	r2, [pc, #72]	; (8002694 <MX_I2C1_Init+0x58>)
 800264a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <MX_I2C1_Init+0x50>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <MX_I2C1_Init+0x50>)
 8002654:	2200      	movs	r2, #0
 8002656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <MX_I2C1_Init+0x50>)
 800265a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800265e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <MX_I2C1_Init+0x50>)
 8002662:	2200      	movs	r2, #0
 8002664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <MX_I2C1_Init+0x50>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <MX_I2C1_Init+0x50>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <MX_I2C1_Init+0x50>)
 8002674:	2200      	movs	r2, #0
 8002676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002678:	4804      	ldr	r0, [pc, #16]	; (800268c <MX_I2C1_Init+0x50>)
 800267a:	f001 f8f7 	bl	800386c <HAL_I2C_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002684:	f000 fa00 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200008ac 	.word	0x200008ac
 8002690:	40005400 	.word	0x40005400
 8002694:	00061a80 	.word	0x00061a80

08002698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800269c:	4b17      	ldr	r3, [pc, #92]	; (80026fc <MX_SPI1_Init+0x64>)
 800269e:	4a18      	ldr	r2, [pc, #96]	; (8002700 <MX_SPI1_Init+0x68>)
 80026a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <MX_SPI1_Init+0x64>)
 80026a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <MX_SPI1_Init+0x64>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <MX_SPI1_Init+0x64>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <MX_SPI1_Init+0x64>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <MX_SPI1_Init+0x64>)
 80026be:	2200      	movs	r2, #0
 80026c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <MX_SPI1_Init+0x64>)
 80026c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <MX_SPI1_Init+0x64>)
 80026cc:	2220      	movs	r2, #32
 80026ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <MX_SPI1_Init+0x64>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <MX_SPI1_Init+0x64>)
 80026d8:	2200      	movs	r2, #0
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026dc:	4b07      	ldr	r3, [pc, #28]	; (80026fc <MX_SPI1_Init+0x64>)
 80026de:	2200      	movs	r2, #0
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <MX_SPI1_Init+0x64>)
 80026e4:	220a      	movs	r2, #10
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026e8:	4804      	ldr	r0, [pc, #16]	; (80026fc <MX_SPI1_Init+0x64>)
 80026ea:	f002 f933 	bl	8004954 <HAL_SPI_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026f4:	f000 f9c8 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	2000098c 	.word	0x2000098c
 8002700:	40013000 	.word	0x40013000

08002704 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270a:	f107 0308 	add.w	r3, r7, #8
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002718:	463b      	mov	r3, r7
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <MX_TIM1_Init+0x98>)
 8002722:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <MX_TIM1_Init+0x9c>)
 8002724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <MX_TIM1_Init+0x98>)
 8002728:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800272c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <MX_TIM1_Init+0x98>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <MX_TIM1_Init+0x98>)
 8002736:	2264      	movs	r2, #100	; 0x64
 8002738:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <MX_TIM1_Init+0x98>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <MX_TIM1_Init+0x98>)
 8002742:	2200      	movs	r2, #0
 8002744:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <MX_TIM1_Init+0x98>)
 8002748:	2280      	movs	r2, #128	; 0x80
 800274a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800274c:	4813      	ldr	r0, [pc, #76]	; (800279c <MX_TIM1_Init+0x98>)
 800274e:	f002 fe6d 	bl	800542c <HAL_TIM_Base_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002758:	f000 f996 	bl	8002a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800275c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002760:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	4619      	mov	r1, r3
 8002768:	480c      	ldr	r0, [pc, #48]	; (800279c <MX_TIM1_Init+0x98>)
 800276a:	f003 f837 	bl	80057dc <HAL_TIM_ConfigClockSource>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002774:	f000 f988 	bl	8002a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002778:	2310      	movs	r3, #16
 800277a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002780:	463b      	mov	r3, r7
 8002782:	4619      	mov	r1, r3
 8002784:	4805      	ldr	r0, [pc, #20]	; (800279c <MX_TIM1_Init+0x98>)
 8002786:	f003 fa13 	bl	8005bb0 <HAL_TIMEx_MasterConfigSynchronization>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002790:	f000 f97a 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002794:	bf00      	nop
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000944 	.word	0x20000944
 80027a0:	40012c00 	.word	0x40012c00

080027a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <MX_USART1_UART_Init+0x50>)
 80027ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027ca:	220c      	movs	r2, #12
 80027cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027dc:	f003 fa58 	bl	8005c90 <HAL_UART_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027e6:	f000 f94f 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000900 	.word	0x20000900
 80027f4:	40013800 	.word	0x40013800

080027f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <MX_USART3_UART_Init+0x50>)
 8002800:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 8002804:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002808:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 800281e:	220c      	movs	r2, #12
 8002820:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800282e:	4805      	ldr	r0, [pc, #20]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 8002830:	f003 fa2e 	bl	8005c90 <HAL_UART_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800283a:	f000 f925 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000868 	.word	0x20000868
 8002848:	40004800 	.word	0x40004800

0800284c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002852:	f107 0310 	add.w	r3, r7, #16
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002860:	4b5f      	ldr	r3, [pc, #380]	; (80029e0 <MX_GPIO_Init+0x194>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4a5e      	ldr	r2, [pc, #376]	; (80029e0 <MX_GPIO_Init+0x194>)
 8002866:	f043 0310 	orr.w	r3, r3, #16
 800286a:	6193      	str	r3, [r2, #24]
 800286c:	4b5c      	ldr	r3, [pc, #368]	; (80029e0 <MX_GPIO_Init+0x194>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002878:	4b59      	ldr	r3, [pc, #356]	; (80029e0 <MX_GPIO_Init+0x194>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <MX_GPIO_Init+0x194>)
 800287e:	f043 0320 	orr.w	r3, r3, #32
 8002882:	6193      	str	r3, [r2, #24]
 8002884:	4b56      	ldr	r3, [pc, #344]	; (80029e0 <MX_GPIO_Init+0x194>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <MX_GPIO_Init+0x194>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	4a52      	ldr	r2, [pc, #328]	; (80029e0 <MX_GPIO_Init+0x194>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	6193      	str	r3, [r2, #24]
 800289c:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <MX_GPIO_Init+0x194>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a8:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <MX_GPIO_Init+0x194>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	4a4c      	ldr	r2, [pc, #304]	; (80029e0 <MX_GPIO_Init+0x194>)
 80028ae:	f043 0308 	orr.w	r3, r3, #8
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <MX_GPIO_Init+0x194>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80028c0:	2200      	movs	r2, #0
 80028c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c6:	4847      	ldr	r0, [pc, #284]	; (80029e4 <MX_GPIO_Init+0x198>)
 80028c8:	f000 ff87 	bl	80037da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80028cc:	2200      	movs	r2, #0
 80028ce:	2108      	movs	r1, #8
 80028d0:	4845      	ldr	r0, [pc, #276]	; (80029e8 <MX_GPIO_Init+0x19c>)
 80028d2:	f000 ff82 	bl	80037da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80028d6:	2201      	movs	r2, #1
 80028d8:	2110      	movs	r1, #16
 80028da:	4843      	ldr	r0, [pc, #268]	; (80029e8 <MX_GPIO_Init+0x19c>)
 80028dc:	f000 ff7d 	bl	80037da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 80028e0:	2200      	movs	r2, #0
 80028e2:	f242 0101 	movw	r1, #8193	; 0x2001
 80028e6:	4841      	ldr	r0, [pc, #260]	; (80029ec <MX_GPIO_Init+0x1a0>)
 80028e8:	f000 ff77 	bl	80037da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2302      	movs	r3, #2
 80028fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fe:	f107 0310 	add.w	r3, r7, #16
 8002902:	4619      	mov	r1, r3
 8002904:	4837      	ldr	r0, [pc, #220]	; (80029e4 <MX_GPIO_Init+0x198>)
 8002906:	f000 fdcd 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800290a:	2304      	movs	r3, #4
 800290c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800290e:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <MX_GPIO_Init+0x1a4>)
 8002910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	4619      	mov	r1, r3
 800291c:	4832      	ldr	r0, [pc, #200]	; (80029e8 <MX_GPIO_Init+0x19c>)
 800291e:	f000 fdc1 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002922:	2318      	movs	r3, #24
 8002924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002926:	2301      	movs	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	4619      	mov	r1, r3
 8002938:	482b      	ldr	r0, [pc, #172]	; (80029e8 <MX_GPIO_Init+0x19c>)
 800293a:	f000 fdb3 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 800293e:	f242 0301 	movw	r3, #8193	; 0x2001
 8002942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002944:	2301      	movs	r3, #1
 8002946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2302      	movs	r3, #2
 800294e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	4619      	mov	r1, r3
 8002956:	4825      	ldr	r0, [pc, #148]	; (80029ec <MX_GPIO_Init+0x1a0>)
 8002958:	f000 fda4 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 800295c:	2302      	movs	r3, #2
 800295e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	4619      	mov	r1, r3
 800296e:	481f      	ldr	r0, [pc, #124]	; (80029ec <MX_GPIO_Init+0x1a0>)
 8002970:	f000 fd98 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002974:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <MX_GPIO_Init+0x1a4>)
 800297c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800297e:	2301      	movs	r3, #1
 8002980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	f107 0310 	add.w	r3, r7, #16
 8002986:	4619      	mov	r1, r3
 8002988:	4818      	ldr	r0, [pc, #96]	; (80029ec <MX_GPIO_Init+0x1a0>)
 800298a:	f000 fd8b 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800298e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002994:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <MX_GPIO_Init+0x1a4>)
 8002996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002998:	2301      	movs	r3, #1
 800299a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	f107 0310 	add.w	r3, r7, #16
 80029a0:	4619      	mov	r1, r3
 80029a2:	4811      	ldr	r0, [pc, #68]	; (80029e8 <MX_GPIO_Init+0x19c>)
 80029a4:	f000 fd7e 	bl	80034a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2100      	movs	r1, #0
 80029ac:	2008      	movs	r0, #8
 80029ae:	f000 fc92 	bl	80032d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80029b2:	2008      	movs	r0, #8
 80029b4:	f000 fcab 	bl	800330e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2100      	movs	r1, #0
 80029bc:	2017      	movs	r0, #23
 80029be:	f000 fc8a 	bl	80032d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029c2:	2017      	movs	r0, #23
 80029c4:	f000 fca3 	bl	800330e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029c8:	2200      	movs	r2, #0
 80029ca:	2100      	movs	r1, #0
 80029cc:	2028      	movs	r0, #40	; 0x28
 80029ce:	f000 fc82 	bl	80032d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029d2:	2028      	movs	r0, #40	; 0x28
 80029d4:	f000 fc9b 	bl	800330e <HAL_NVIC_EnableIRQ>

}
 80029d8:	bf00      	nop
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40011000 	.word	0x40011000
 80029e8:	40010800 	.word	0x40010800
 80029ec:	40010c00 	.word	0x40010c00
 80029f0:	10210000 	.word	0x10210000

080029f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d102      	bne.n	8002a0a <HAL_GPIO_EXTI_Callback+0x16>
  {
    IRQ_Callback();					// Call Callback
 8002a04:	f7fd fc50 	bl	80002a8 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8002a0a:	bf00      	nop
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_UART_RxCpltCallback>:

//----------------------------------------------------------------------------------------
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <HAL_UART_RxCpltCallback+0x60>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d123      	bne.n	8002a6c <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <HAL_UART_RxCpltCallback+0x64>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_UART_RxCpltCallback+0x20>
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_UART_RxCpltCallback+0x68>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b31      	cmp	r3, #49	; 0x31
 8002a32:	d906      	bls.n	8002a42 <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_UART_RxCpltCallback+0x6c>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_UART_RxCpltCallback+0x68>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8002a40:	e014      	b.n	8002a6c <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_UART_RxCpltCallback+0x6c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <HAL_UART_RxCpltCallback+0x68>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_UART_RxCpltCallback+0x64>)
 8002a50:	7819      	ldrb	r1, [r3, #0]
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_UART_RxCpltCallback+0x70>)
 8002a54:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8002a56:	2201      	movs	r2, #1
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <HAL_UART_RxCpltCallback+0x64>)
 8002a5a:	4806      	ldr	r0, [pc, #24]	; (8002a74 <HAL_UART_RxCpltCallback+0x60>)
 8002a5c:	f003 f965 	bl	8005d2a <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_UART_RxCpltCallback+0x68>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <HAL_UART_RxCpltCallback+0x68>)
 8002a6a:	701a      	strb	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000900 	.word	0x20000900
 8002a78:	20000494 	.word	0x20000494
 8002a7c:	20000496 	.word	0x20000496
 8002a80:	20000495 	.word	0x20000495
 8002a84:	20000460 	.word	0x20000460

08002a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a8c:	b672      	cpsid	i
}
 8002a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a90:	e7fe      	b.n	8002a90 <Error_Handler+0x8>
	...

08002a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_MspInit+0x5c>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <HAL_MspInit+0x5c>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6193      	str	r3, [r2, #24]
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_MspInit+0x5c>)
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_MspInit+0x5c>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <HAL_MspInit+0x5c>)
 8002ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002abc:	61d3      	str	r3, [r2, #28]
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_MspInit+0x5c>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_MspInit+0x60>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <HAL_MspInit+0x60>)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000

08002af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <HAL_I2C_MspInit+0x70>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d123      	bne.n	8002b60 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <HAL_I2C_MspInit+0x74>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <HAL_I2C_MspInit+0x74>)
 8002b1e:	f043 0308 	orr.w	r3, r3, #8
 8002b22:	6193      	str	r3, [r2, #24]
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_I2C_MspInit+0x74>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b30:	23c0      	movs	r3, #192	; 0xc0
 8002b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b34:	2312      	movs	r3, #18
 8002b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3c:	f107 0310 	add.w	r3, r7, #16
 8002b40:	4619      	mov	r1, r3
 8002b42:	480b      	ldr	r0, [pc, #44]	; (8002b70 <HAL_I2C_MspInit+0x78>)
 8002b44:	f000 fcae 	bl	80034a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <HAL_I2C_MspInit+0x74>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <HAL_I2C_MspInit+0x74>)
 8002b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b52:	61d3      	str	r3, [r2, #28]
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_I2C_MspInit+0x74>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b60:	bf00      	nop
 8002b62:	3720      	adds	r7, #32
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40005400 	.word	0x40005400
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40010c00 	.word	0x40010c00

08002b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <HAL_SPI_MspInit+0x88>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d12f      	bne.n	8002bf4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b94:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <HAL_SPI_MspInit+0x8c>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <HAL_SPI_MspInit+0x8c>)
 8002b9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b9e:	6193      	str	r3, [r2, #24]
 8002ba0:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <HAL_SPI_MspInit+0x8c>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_SPI_MspInit+0x8c>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_SPI_MspInit+0x8c>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	6193      	str	r3, [r2, #24]
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <HAL_SPI_MspInit+0x8c>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002bc4:	23a0      	movs	r3, #160	; 0xa0
 8002bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	f107 0310 	add.w	r3, r7, #16
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	480b      	ldr	r0, [pc, #44]	; (8002c04 <HAL_SPI_MspInit+0x90>)
 8002bd8:	f000 fc64 	bl	80034a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bdc:	2340      	movs	r3, #64	; 0x40
 8002bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	4619      	mov	r1, r3
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <HAL_SPI_MspInit+0x90>)
 8002bf0:	f000 fc58 	bl	80034a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002bf4:	bf00      	nop
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40013000 	.word	0x40013000
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40010800 	.word	0x40010800

08002c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <HAL_TIM_Base_MspInit+0x44>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d113      	bne.n	8002c42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_TIM_Base_MspInit+0x48>)
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <HAL_TIM_Base_MspInit+0x48>)
 8002c20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c24:	6193      	str	r3, [r2, #24]
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_TIM_Base_MspInit+0x48>)
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	2019      	movs	r0, #25
 8002c38:	f000 fb4d 	bl	80032d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002c3c:	2019      	movs	r0, #25
 8002c3e:	f000 fb66 	bl	800330e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40021000 	.word	0x40021000

08002c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 0318 	add.w	r3, r7, #24
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a3c      	ldr	r2, [pc, #240]	; (8002d60 <HAL_UART_MspInit+0x10c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d13a      	bne.n	8002cea <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c74:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	4a3a      	ldr	r2, [pc, #232]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c7e:	6193      	str	r3, [r2, #24]
 8002c80:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8c:	4b35      	ldr	r3, [pc, #212]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4a34      	ldr	r2, [pc, #208]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	6193      	str	r3, [r2, #24]
 8002c98:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb2:	f107 0318 	add.w	r3, r7, #24
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	482b      	ldr	r0, [pc, #172]	; (8002d68 <HAL_UART_MspInit+0x114>)
 8002cba:	f000 fbf3 	bl	80034a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ccc:	f107 0318 	add.w	r3, r7, #24
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4825      	ldr	r0, [pc, #148]	; (8002d68 <HAL_UART_MspInit+0x114>)
 8002cd4:	f000 fbe6 	bl	80034a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2101      	movs	r1, #1
 8002cdc:	2025      	movs	r0, #37	; 0x25
 8002cde:	f000 fafa 	bl	80032d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ce2:	2025      	movs	r0, #37	; 0x25
 8002ce4:	f000 fb13 	bl	800330e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ce8:	e036      	b.n	8002d58 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <HAL_UART_MspInit+0x118>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d131      	bne.n	8002d58 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	4a1a      	ldr	r2, [pc, #104]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfe:	61d3      	str	r3, [r2, #28]
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0c:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002d12:	f043 0308 	orr.w	r3, r3, #8
 8002d16:	6193      	str	r3, [r2, #24]
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_UART_MspInit+0x110>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d32:	f107 0318 	add.w	r3, r7, #24
 8002d36:	4619      	mov	r1, r3
 8002d38:	480d      	ldr	r0, [pc, #52]	; (8002d70 <HAL_UART_MspInit+0x11c>)
 8002d3a:	f000 fbb3 	bl	80034a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4c:	f107 0318 	add.w	r3, r7, #24
 8002d50:	4619      	mov	r1, r3
 8002d52:	4807      	ldr	r0, [pc, #28]	; (8002d70 <HAL_UART_MspInit+0x11c>)
 8002d54:	f000 fba6 	bl	80034a4 <HAL_GPIO_Init>
}
 8002d58:	bf00      	nop
 8002d5a:	3728      	adds	r7, #40	; 0x28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40013800 	.word	0x40013800
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40010800 	.word	0x40010800
 8002d6c:	40004800 	.word	0x40004800
 8002d70:	40010c00 	.word	0x40010c00

08002d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <NMI_Handler+0x4>

08002d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d7e:	e7fe      	b.n	8002d7e <HardFault_Handler+0x4>

08002d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <MemManage_Handler+0x4>

08002d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d8a:	e7fe      	b.n	8002d8a <BusFault_Handler+0x4>

08002d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <UsageFault_Handler+0x4>

08002d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dba:	f000 f975 	bl	80030a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002dc6:	2004      	movs	r0, #4
 8002dc8:	f000 fd38 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <EXTI9_5_IRQHandler+0x44>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	f083 0301 	eor.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d012      	beq.n	8002e08 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <EXTI9_5_IRQHandler+0x48>)
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00c      	beq.n	8002e08 <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <EXTI9_5_IRQHandler+0x4c>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <EXTI9_5_IRQHandler+0x50>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d105      	bne.n	8002e08 <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8002dfc:	4809      	ldr	r0, [pc, #36]	; (8002e24 <EXTI9_5_IRQHandler+0x54>)
 8002dfe:	f002 fb65 	bl	80054cc <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <EXTI9_5_IRQHandler+0x50>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002e08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e0c:	f000 fd16 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e10:	bf00      	nop
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	2000045e 	.word	0x2000045e
 8002e18:	40010400 	.word	0x40010400
 8002e1c:	2000001e 	.word	0x2000001e
 8002e20:	20000020 	.word	0x20000020
 8002e24:	20000944 	.word	0x20000944

08002e28 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8002e2c:	4b37      	ldr	r3, [pc, #220]	; (8002f0c <TIM1_UP_IRQHandler+0xe4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d165      	bne.n	8002f00 <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 8002e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e38:	4835      	ldr	r0, [pc, #212]	; (8002f10 <TIM1_UP_IRQHandler+0xe8>)
 8002e3a:	f000 fcb7 	bl	80037ac <HAL_GPIO_ReadPin>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d118      	bne.n	8002e76 <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 8002e44:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	4a32      	ldr	r2, [pc, #200]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002e4c:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8002e4e:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <TIM1_UP_IRQHandler+0xf0>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	dc51      	bgt.n	8002f00 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <TIM1_UP_IRQHandler+0xe4>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8002e62:	482e      	ldr	r0, [pc, #184]	; (8002f1c <TIM1_UP_IRQHandler+0xf4>)
 8002e64:	f002 fb84 	bl	8005570 <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 8002e68:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <TIM1_UP_IRQHandler+0xf8>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8002e6e:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e044      	b.n	8002f00 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 8002e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e7a:	482a      	ldr	r0, [pc, #168]	; (8002f24 <TIM1_UP_IRQHandler+0xfc>)
 8002e7c:	f000 fc96 	bl	80037ac <HAL_GPIO_ReadPin>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d118      	bne.n	8002eb8 <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 8002e86:	4b23      	ldr	r3, [pc, #140]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	4a21      	ldr	r2, [pc, #132]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002e8e:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <TIM1_UP_IRQHandler+0xf0>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b1f      	ldr	r3, [pc, #124]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	dc30      	bgt.n	8002f00 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <TIM1_UP_IRQHandler+0xe4>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8002ea4:	481d      	ldr	r0, [pc, #116]	; (8002f1c <TIM1_UP_IRQHandler+0xf4>)
 8002ea6:	f002 fb63 	bl	8005570 <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <TIM1_UP_IRQHandler+0xf8>)
 8002eac:	2203      	movs	r2, #3
 8002eae:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e023      	b.n	8002f00 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 8002eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ebc:	4814      	ldr	r0, [pc, #80]	; (8002f10 <TIM1_UP_IRQHandler+0xe8>)
 8002ebe:	f000 fc75 	bl	80037ac <HAL_GPIO_ReadPin>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d118      	bne.n	8002efa <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002ed0:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <TIM1_UP_IRQHandler+0xf0>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	dc0f      	bgt.n	8002f00 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <TIM1_UP_IRQHandler+0xe4>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <TIM1_UP_IRQHandler+0xf8>)
 8002ee8:	2202      	movs	r2, #2
 8002eea:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8002ef2:	480a      	ldr	r0, [pc, #40]	; (8002f1c <TIM1_UP_IRQHandler+0xf4>)
 8002ef4:	f002 fb3c 	bl	8005570 <HAL_TIM_Base_Stop_IT>
 8002ef8:	e002      	b.n	8002f00 <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <TIM1_UP_IRQHandler+0xec>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f00:	4806      	ldr	r0, [pc, #24]	; (8002f1c <TIM1_UP_IRQHandler+0xf4>)
 8002f02:	f002 fb63 	bl	80055cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000020 	.word	0x20000020
 8002f10:	40010c00 	.word	0x40010c00
 8002f14:	20000498 	.word	0x20000498
 8002f18:	2000001f 	.word	0x2000001f
 8002f1c:	20000944 	.word	0x20000944
 8002f20:	2000045f 	.word	0x2000045f
 8002f24:	40010800 	.word	0x40010800

08002f28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f2c:	4802      	ldr	r0, [pc, #8]	; (8002f38 <USART1_IRQHandler+0x10>)
 8002f2e:	f002 ff2d 	bl	8005d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000900 	.word	0x20000900

08002f3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <EXTI15_10_IRQHandler+0x74>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	f083 0301 	eor.w	r3, r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d012      	beq.n	8002f74 <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <EXTI15_10_IRQHandler+0x78>)
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00c      	beq.n	8002f74 <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <EXTI15_10_IRQHandler+0x7c>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <EXTI15_10_IRQHandler+0x80>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d105      	bne.n	8002f74 <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8002f68:	4815      	ldr	r0, [pc, #84]	; (8002fc0 <EXTI15_10_IRQHandler+0x84>)
 8002f6a:	f002 faaf 	bl	80054cc <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <EXTI15_10_IRQHandler+0x80>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <EXTI15_10_IRQHandler+0x78>)
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00c      	beq.n	8002f9a <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 8002f80:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <EXTI15_10_IRQHandler+0x7c>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <EXTI15_10_IRQHandler+0x80>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d105      	bne.n	8002f9a <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8002f8e:	480c      	ldr	r0, [pc, #48]	; (8002fc0 <EXTI15_10_IRQHandler+0x84>)
 8002f90:	f002 fa9c 	bl	80054cc <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <EXTI15_10_IRQHandler+0x80>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002f9a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f9e:	f000 fc4d 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002fa2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002fa6:	f000 fc49 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	2000045e 	.word	0x2000045e
 8002fb4:	40010400 	.word	0x40010400
 8002fb8:	2000001e 	.word	0x2000001e
 8002fbc:	20000020 	.word	0x20000020
 8002fc0:	20000944 	.word	0x20000944

08002fc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fd0:	480c      	ldr	r0, [pc, #48]	; (8003004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fd2:	490d      	ldr	r1, [pc, #52]	; (8003008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fd4:	4a0d      	ldr	r2, [pc, #52]	; (800300c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd8:	e002      	b.n	8002fe0 <LoopCopyDataInit>

08002fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fde:	3304      	adds	r3, #4

08002fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe4:	d3f9      	bcc.n	8002fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fe8:	4c0a      	ldr	r4, [pc, #40]	; (8003014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fec:	e001      	b.n	8002ff2 <LoopFillZerobss>

08002fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff0:	3204      	adds	r2, #4

08002ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff4:	d3fb      	bcc.n	8002fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ff6:	f7ff ffe5 	bl	8002fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffa:	f003 faa5 	bl	8006548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ffe:	f7ff faab 	bl	8002558 <main>
  bx lr
 8003002:	4770      	bx	lr
  ldr r0, =_sdata
 8003004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003008:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800300c:	08006ff8 	.word	0x08006ff8
  ldr r2, =_sbss
 8003010:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8003014:	200009e8 	.word	0x200009e8

08003018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003018:	e7fe      	b.n	8003018 <ADC1_2_IRQHandler>
	...

0800301c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_Init+0x28>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a07      	ldr	r2, [pc, #28]	; (8003044 <HAL_Init+0x28>)
 8003026:	f043 0310 	orr.w	r3, r3, #16
 800302a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800302c:	2003      	movs	r0, #3
 800302e:	f000 f947 	bl	80032c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003032:	2000      	movs	r0, #0
 8003034:	f000 f808 	bl	8003048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003038:	f7ff fd2c 	bl	8002a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40022000 	.word	0x40022000

08003048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_InitTick+0x54>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_InitTick+0x58>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	4619      	mov	r1, r3
 800305a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800305e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003062:	fbb2 f3f3 	udiv	r3, r2, r3
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f95f 	bl	800332a <HAL_SYSTICK_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e00e      	b.n	8003094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b0f      	cmp	r3, #15
 800307a:	d80a      	bhi.n	8003092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800307c:	2200      	movs	r2, #0
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003084:	f000 f927 	bl	80032d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003088:	4a06      	ldr	r2, [pc, #24]	; (80030a4 <HAL_InitTick+0x5c>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000024 	.word	0x20000024
 80030a0:	2000002c 	.word	0x2000002c
 80030a4:	20000028 	.word	0x20000028

080030a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_IncTick+0x1c>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_IncTick+0x20>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	4a03      	ldr	r2, [pc, #12]	; (80030c8 <HAL_IncTick+0x20>)
 80030ba:	6013      	str	r3, [r2, #0]
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	2000002c 	.word	0x2000002c
 80030c8:	200009e4 	.word	0x200009e4

080030cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return uwTick;
 80030d0:	4b02      	ldr	r3, [pc, #8]	; (80030dc <HAL_GetTick+0x10>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	200009e4 	.word	0x200009e4

080030e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e8:	f7ff fff0 	bl	80030cc <HAL_GetTick>
 80030ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f8:	d005      	beq.n	8003106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_Delay+0x44>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003106:	bf00      	nop
 8003108:	f7ff ffe0 	bl	80030cc <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	429a      	cmp	r2, r3
 8003116:	d8f7      	bhi.n	8003108 <HAL_Delay+0x28>
  {
  }
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	2000002c 	.word	0x2000002c

08003128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <__NVIC_SetPriorityGrouping+0x44>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003144:	4013      	ands	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800315a:	4a04      	ldr	r2, [pc, #16]	; (800316c <__NVIC_SetPriorityGrouping+0x44>)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	60d3      	str	r3, [r2, #12]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <__NVIC_GetPriorityGrouping+0x18>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	f003 0307 	and.w	r3, r3, #7
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	2b00      	cmp	r3, #0
 800319c:	db0b      	blt.n	80031b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	f003 021f 	and.w	r2, r3, #31
 80031a4:	4906      	ldr	r1, [pc, #24]	; (80031c0 <__NVIC_EnableIRQ+0x34>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	2001      	movs	r0, #1
 80031ae:	fa00 f202 	lsl.w	r2, r0, r2
 80031b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	e000e100 	.word	0xe000e100

080031c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	db0a      	blt.n	80031ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	490c      	ldr	r1, [pc, #48]	; (8003210 <__NVIC_SetPriority+0x4c>)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	0112      	lsls	r2, r2, #4
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	440b      	add	r3, r1
 80031e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031ec:	e00a      	b.n	8003204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4908      	ldr	r1, [pc, #32]	; (8003214 <__NVIC_SetPriority+0x50>)
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	3b04      	subs	r3, #4
 80031fc:	0112      	lsls	r2, r2, #4
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	440b      	add	r3, r1
 8003202:	761a      	strb	r2, [r3, #24]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	e000e100 	.word	0xe000e100
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f1c3 0307 	rsb	r3, r3, #7
 8003232:	2b04      	cmp	r3, #4
 8003234:	bf28      	it	cs
 8003236:	2304      	movcs	r3, #4
 8003238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3304      	adds	r3, #4
 800323e:	2b06      	cmp	r3, #6
 8003240:	d902      	bls.n	8003248 <NVIC_EncodePriority+0x30>
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3b03      	subs	r3, #3
 8003246:	e000      	b.n	800324a <NVIC_EncodePriority+0x32>
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43da      	mvns	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	401a      	ands	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	43d9      	mvns	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003270:	4313      	orrs	r3, r2
         );
}
 8003272:	4618      	mov	r0, r3
 8003274:	3724      	adds	r7, #36	; 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800328c:	d301      	bcc.n	8003292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800328e:	2301      	movs	r3, #1
 8003290:	e00f      	b.n	80032b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003292:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <SysTick_Config+0x40>)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800329a:	210f      	movs	r1, #15
 800329c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032a0:	f7ff ff90 	bl	80031c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <SysTick_Config+0x40>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032aa:	4b04      	ldr	r3, [pc, #16]	; (80032bc <SysTick_Config+0x40>)
 80032ac:	2207      	movs	r2, #7
 80032ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	e000e010 	.word	0xe000e010

080032c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ff2d 	bl	8003128 <__NVIC_SetPriorityGrouping>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032e8:	f7ff ff42 	bl	8003170 <__NVIC_GetPriorityGrouping>
 80032ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	6978      	ldr	r0, [r7, #20]
 80032f4:	f7ff ff90 	bl	8003218 <NVIC_EncodePriority>
 80032f8:	4602      	mov	r2, r0
 80032fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff5f 	bl	80031c4 <__NVIC_SetPriority>
}
 8003306:	bf00      	nop
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	4603      	mov	r3, r0
 8003316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff35 	bl	800318c <__NVIC_EnableIRQ>
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ffa2 	bl	800327c <SysTick_Config>
 8003338:	4603      	mov	r3, r0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003354:	2b02      	cmp	r3, #2
 8003356:	d008      	beq.n	800336a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2204      	movs	r2, #4
 800335c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e020      	b.n	80033ac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 020e 	bic.w	r2, r2, #14
 8003378:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003392:	2101      	movs	r1, #1
 8003394:	fa01 f202 	lsl.w	r2, r1, r2
 8003398:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d005      	beq.n	80033da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2204      	movs	r2, #4
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	e051      	b.n	800347e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 020e 	bic.w	r2, r2, #14
 80033e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a22      	ldr	r2, [pc, #136]	; (8003488 <HAL_DMA_Abort_IT+0xd0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d029      	beq.n	8003458 <HAL_DMA_Abort_IT+0xa0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a20      	ldr	r2, [pc, #128]	; (800348c <HAL_DMA_Abort_IT+0xd4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d022      	beq.n	8003454 <HAL_DMA_Abort_IT+0x9c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <HAL_DMA_Abort_IT+0xd8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d01a      	beq.n	800344e <HAL_DMA_Abort_IT+0x96>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a1d      	ldr	r2, [pc, #116]	; (8003494 <HAL_DMA_Abort_IT+0xdc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d012      	beq.n	8003448 <HAL_DMA_Abort_IT+0x90>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a1c      	ldr	r2, [pc, #112]	; (8003498 <HAL_DMA_Abort_IT+0xe0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00a      	beq.n	8003442 <HAL_DMA_Abort_IT+0x8a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a1a      	ldr	r2, [pc, #104]	; (800349c <HAL_DMA_Abort_IT+0xe4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d102      	bne.n	800343c <HAL_DMA_Abort_IT+0x84>
 8003436:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800343a:	e00e      	b.n	800345a <HAL_DMA_Abort_IT+0xa2>
 800343c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003440:	e00b      	b.n	800345a <HAL_DMA_Abort_IT+0xa2>
 8003442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003446:	e008      	b.n	800345a <HAL_DMA_Abort_IT+0xa2>
 8003448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800344c:	e005      	b.n	800345a <HAL_DMA_Abort_IT+0xa2>
 800344e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003452:	e002      	b.n	800345a <HAL_DMA_Abort_IT+0xa2>
 8003454:	2310      	movs	r3, #16
 8003456:	e000      	b.n	800345a <HAL_DMA_Abort_IT+0xa2>
 8003458:	2301      	movs	r3, #1
 800345a:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <HAL_DMA_Abort_IT+0xe8>)
 800345c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
    } 
  }
  return status;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40020008 	.word	0x40020008
 800348c:	4002001c 	.word	0x4002001c
 8003490:	40020030 	.word	0x40020030
 8003494:	40020044 	.word	0x40020044
 8003498:	40020058 	.word	0x40020058
 800349c:	4002006c 	.word	0x4002006c
 80034a0:	40020000 	.word	0x40020000

080034a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b08b      	sub	sp, #44	; 0x2c
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ae:	2300      	movs	r3, #0
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034b2:	2300      	movs	r3, #0
 80034b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034b6:	e169      	b.n	800378c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034b8:	2201      	movs	r2, #1
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	f040 8158 	bne.w	8003786 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a9a      	ldr	r2, [pc, #616]	; (8003744 <HAL_GPIO_Init+0x2a0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d05e      	beq.n	800359e <HAL_GPIO_Init+0xfa>
 80034e0:	4a98      	ldr	r2, [pc, #608]	; (8003744 <HAL_GPIO_Init+0x2a0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d875      	bhi.n	80035d2 <HAL_GPIO_Init+0x12e>
 80034e6:	4a98      	ldr	r2, [pc, #608]	; (8003748 <HAL_GPIO_Init+0x2a4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d058      	beq.n	800359e <HAL_GPIO_Init+0xfa>
 80034ec:	4a96      	ldr	r2, [pc, #600]	; (8003748 <HAL_GPIO_Init+0x2a4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d86f      	bhi.n	80035d2 <HAL_GPIO_Init+0x12e>
 80034f2:	4a96      	ldr	r2, [pc, #600]	; (800374c <HAL_GPIO_Init+0x2a8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d052      	beq.n	800359e <HAL_GPIO_Init+0xfa>
 80034f8:	4a94      	ldr	r2, [pc, #592]	; (800374c <HAL_GPIO_Init+0x2a8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d869      	bhi.n	80035d2 <HAL_GPIO_Init+0x12e>
 80034fe:	4a94      	ldr	r2, [pc, #592]	; (8003750 <HAL_GPIO_Init+0x2ac>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d04c      	beq.n	800359e <HAL_GPIO_Init+0xfa>
 8003504:	4a92      	ldr	r2, [pc, #584]	; (8003750 <HAL_GPIO_Init+0x2ac>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d863      	bhi.n	80035d2 <HAL_GPIO_Init+0x12e>
 800350a:	4a92      	ldr	r2, [pc, #584]	; (8003754 <HAL_GPIO_Init+0x2b0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d046      	beq.n	800359e <HAL_GPIO_Init+0xfa>
 8003510:	4a90      	ldr	r2, [pc, #576]	; (8003754 <HAL_GPIO_Init+0x2b0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d85d      	bhi.n	80035d2 <HAL_GPIO_Init+0x12e>
 8003516:	2b12      	cmp	r3, #18
 8003518:	d82a      	bhi.n	8003570 <HAL_GPIO_Init+0xcc>
 800351a:	2b12      	cmp	r3, #18
 800351c:	d859      	bhi.n	80035d2 <HAL_GPIO_Init+0x12e>
 800351e:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <HAL_GPIO_Init+0x80>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	0800359f 	.word	0x0800359f
 8003528:	08003579 	.word	0x08003579
 800352c:	0800358b 	.word	0x0800358b
 8003530:	080035cd 	.word	0x080035cd
 8003534:	080035d3 	.word	0x080035d3
 8003538:	080035d3 	.word	0x080035d3
 800353c:	080035d3 	.word	0x080035d3
 8003540:	080035d3 	.word	0x080035d3
 8003544:	080035d3 	.word	0x080035d3
 8003548:	080035d3 	.word	0x080035d3
 800354c:	080035d3 	.word	0x080035d3
 8003550:	080035d3 	.word	0x080035d3
 8003554:	080035d3 	.word	0x080035d3
 8003558:	080035d3 	.word	0x080035d3
 800355c:	080035d3 	.word	0x080035d3
 8003560:	080035d3 	.word	0x080035d3
 8003564:	080035d3 	.word	0x080035d3
 8003568:	08003581 	.word	0x08003581
 800356c:	08003595 	.word	0x08003595
 8003570:	4a79      	ldr	r2, [pc, #484]	; (8003758 <HAL_GPIO_Init+0x2b4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003576:	e02c      	b.n	80035d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	623b      	str	r3, [r7, #32]
          break;
 800357e:	e029      	b.n	80035d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	3304      	adds	r3, #4
 8003586:	623b      	str	r3, [r7, #32]
          break;
 8003588:	e024      	b.n	80035d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	3308      	adds	r3, #8
 8003590:	623b      	str	r3, [r7, #32]
          break;
 8003592:	e01f      	b.n	80035d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	330c      	adds	r3, #12
 800359a:	623b      	str	r3, [r7, #32]
          break;
 800359c:	e01a      	b.n	80035d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035a6:	2304      	movs	r3, #4
 80035a8:	623b      	str	r3, [r7, #32]
          break;
 80035aa:	e013      	b.n	80035d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035b4:	2308      	movs	r3, #8
 80035b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	611a      	str	r2, [r3, #16]
          break;
 80035be:	e009      	b.n	80035d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035c0:	2308      	movs	r3, #8
 80035c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	615a      	str	r2, [r3, #20]
          break;
 80035ca:	e003      	b.n	80035d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035cc:	2300      	movs	r3, #0
 80035ce:	623b      	str	r3, [r7, #32]
          break;
 80035d0:	e000      	b.n	80035d4 <HAL_GPIO_Init+0x130>
          break;
 80035d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2bff      	cmp	r3, #255	; 0xff
 80035d8:	d801      	bhi.n	80035de <HAL_GPIO_Init+0x13a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	e001      	b.n	80035e2 <HAL_GPIO_Init+0x13e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2bff      	cmp	r3, #255	; 0xff
 80035e8:	d802      	bhi.n	80035f0 <HAL_GPIO_Init+0x14c>
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	e002      	b.n	80035f6 <HAL_GPIO_Init+0x152>
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	3b08      	subs	r3, #8
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	210f      	movs	r1, #15
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	fa01 f303 	lsl.w	r3, r1, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	401a      	ands	r2, r3
 8003608:	6a39      	ldr	r1, [r7, #32]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	431a      	orrs	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80b1 	beq.w	8003786 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003624:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_GPIO_Init+0x2b8>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	4a4c      	ldr	r2, [pc, #304]	; (800375c <HAL_GPIO_Init+0x2b8>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6193      	str	r3, [r2, #24]
 8003630:	4b4a      	ldr	r3, [pc, #296]	; (800375c <HAL_GPIO_Init+0x2b8>)
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800363c:	4a48      	ldr	r2, [pc, #288]	; (8003760 <HAL_GPIO_Init+0x2bc>)
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	3302      	adds	r3, #2
 8003644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003648:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	220f      	movs	r2, #15
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4013      	ands	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a40      	ldr	r2, [pc, #256]	; (8003764 <HAL_GPIO_Init+0x2c0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <HAL_GPIO_Init+0x1ec>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a3f      	ldr	r2, [pc, #252]	; (8003768 <HAL_GPIO_Init+0x2c4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00d      	beq.n	800368c <HAL_GPIO_Init+0x1e8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a3e      	ldr	r2, [pc, #248]	; (800376c <HAL_GPIO_Init+0x2c8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d007      	beq.n	8003688 <HAL_GPIO_Init+0x1e4>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a3d      	ldr	r2, [pc, #244]	; (8003770 <HAL_GPIO_Init+0x2cc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_GPIO_Init+0x1e0>
 8003680:	2303      	movs	r3, #3
 8003682:	e006      	b.n	8003692 <HAL_GPIO_Init+0x1ee>
 8003684:	2304      	movs	r3, #4
 8003686:	e004      	b.n	8003692 <HAL_GPIO_Init+0x1ee>
 8003688:	2302      	movs	r3, #2
 800368a:	e002      	b.n	8003692 <HAL_GPIO_Init+0x1ee>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_GPIO_Init+0x1ee>
 8003690:	2300      	movs	r3, #0
 8003692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003694:	f002 0203 	and.w	r2, r2, #3
 8003698:	0092      	lsls	r2, r2, #2
 800369a:	4093      	lsls	r3, r2
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036a2:	492f      	ldr	r1, [pc, #188]	; (8003760 <HAL_GPIO_Init+0x2bc>)
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	3302      	adds	r3, #2
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d006      	beq.n	80036ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036bc:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	492c      	ldr	r1, [pc, #176]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	600b      	str	r3, [r1, #0]
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036ca:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	4928      	ldr	r1, [pc, #160]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d006      	beq.n	80036f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036e4:	4b23      	ldr	r3, [pc, #140]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	4922      	ldr	r1, [pc, #136]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
 80036f0:	e006      	b.n	8003700 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	491e      	ldr	r1, [pc, #120]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d006      	beq.n	800371a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	4918      	ldr	r1, [pc, #96]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]
 8003718:	e006      	b.n	8003728 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800371a:	4b16      	ldr	r3, [pc, #88]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	43db      	mvns	r3, r3
 8003722:	4914      	ldr	r1, [pc, #80]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 8003724:	4013      	ands	r3, r2
 8003726:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d021      	beq.n	8003778 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	490e      	ldr	r1, [pc, #56]	; (8003774 <HAL_GPIO_Init+0x2d0>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
 8003740:	e021      	b.n	8003786 <HAL_GPIO_Init+0x2e2>
 8003742:	bf00      	nop
 8003744:	10320000 	.word	0x10320000
 8003748:	10310000 	.word	0x10310000
 800374c:	10220000 	.word	0x10220000
 8003750:	10210000 	.word	0x10210000
 8003754:	10120000 	.word	0x10120000
 8003758:	10110000 	.word	0x10110000
 800375c:	40021000 	.word	0x40021000
 8003760:	40010000 	.word	0x40010000
 8003764:	40010800 	.word	0x40010800
 8003768:	40010c00 	.word	0x40010c00
 800376c:	40011000 	.word	0x40011000
 8003770:	40011400 	.word	0x40011400
 8003774:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_GPIO_Init+0x304>)
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	43db      	mvns	r3, r3
 8003780:	4909      	ldr	r1, [pc, #36]	; (80037a8 <HAL_GPIO_Init+0x304>)
 8003782:	4013      	ands	r3, r2
 8003784:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	3301      	adds	r3, #1
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	fa22 f303 	lsr.w	r3, r2, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	f47f ae8e 	bne.w	80034b8 <HAL_GPIO_Init+0x14>
  }
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	372c      	adds	r7, #44	; 0x2c
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr
 80037a8:	40010400 	.word	0x40010400

080037ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	887b      	ldrh	r3, [r7, #2]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	e001      	b.n	80037ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	460b      	mov	r3, r1
 80037e4:	807b      	strh	r3, [r7, #2]
 80037e6:	4613      	mov	r3, r2
 80037e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037ea:	787b      	ldrb	r3, [r7, #1]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037f0:	887a      	ldrh	r2, [r7, #2]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037f6:	e003      	b.n	8003800 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	041a      	lsls	r2, r3, #16
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	611a      	str	r2, [r3, #16]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800381c:	887a      	ldrh	r2, [r7, #2]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4013      	ands	r3, r2
 8003822:	041a      	lsls	r2, r3, #16
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	43d9      	mvns	r1, r3
 8003828:	887b      	ldrh	r3, [r7, #2]
 800382a:	400b      	ands	r3, r1
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	611a      	str	r2, [r3, #16]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003852:	4a05      	ldr	r2, [pc, #20]	; (8003868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff f8ca 	bl	80029f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40010400 	.word	0x40010400

0800386c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e12b      	b.n	8003ad6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff f930 	bl	8002af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	; 0x24
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038d0:	f000 fffa 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 80038d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4a81      	ldr	r2, [pc, #516]	; (8003ae0 <HAL_I2C_Init+0x274>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d807      	bhi.n	80038f0 <HAL_I2C_Init+0x84>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a80      	ldr	r2, [pc, #512]	; (8003ae4 <HAL_I2C_Init+0x278>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bf94      	ite	ls
 80038e8:	2301      	movls	r3, #1
 80038ea:	2300      	movhi	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	e006      	b.n	80038fe <HAL_I2C_Init+0x92>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a7d      	ldr	r2, [pc, #500]	; (8003ae8 <HAL_I2C_Init+0x27c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bf94      	ite	ls
 80038f8:	2301      	movls	r3, #1
 80038fa:	2300      	movhi	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e0e7      	b.n	8003ad6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4a78      	ldr	r2, [pc, #480]	; (8003aec <HAL_I2C_Init+0x280>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	0c9b      	lsrs	r3, r3, #18
 8003910:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a6a      	ldr	r2, [pc, #424]	; (8003ae0 <HAL_I2C_Init+0x274>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d802      	bhi.n	8003940 <HAL_I2C_Init+0xd4>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	3301      	adds	r3, #1
 800393e:	e009      	b.n	8003954 <HAL_I2C_Init+0xe8>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	4a69      	ldr	r2, [pc, #420]	; (8003af0 <HAL_I2C_Init+0x284>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	3301      	adds	r3, #1
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	430b      	orrs	r3, r1
 800395a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003966:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	495c      	ldr	r1, [pc, #368]	; (8003ae0 <HAL_I2C_Init+0x274>)
 8003970:	428b      	cmp	r3, r1
 8003972:	d819      	bhi.n	80039a8 <HAL_I2C_Init+0x13c>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1e59      	subs	r1, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003982:	1c59      	adds	r1, r3, #1
 8003984:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003988:	400b      	ands	r3, r1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_I2C_Init+0x138>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1e59      	subs	r1, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fbb1 f3f3 	udiv	r3, r1, r3
 800399c:	3301      	adds	r3, #1
 800399e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a2:	e051      	b.n	8003a48 <HAL_I2C_Init+0x1dc>
 80039a4:	2304      	movs	r3, #4
 80039a6:	e04f      	b.n	8003a48 <HAL_I2C_Init+0x1dc>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d111      	bne.n	80039d4 <HAL_I2C_Init+0x168>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1e58      	subs	r0, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	440b      	add	r3, r1
 80039be:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	e012      	b.n	80039fa <HAL_I2C_Init+0x18e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e58      	subs	r0, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	0099      	lsls	r1, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Init+0x196>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e022      	b.n	8003a48 <HAL_I2C_Init+0x1dc>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10e      	bne.n	8003a28 <HAL_I2C_Init+0x1bc>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1e58      	subs	r0, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6859      	ldr	r1, [r3, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	440b      	add	r3, r1
 8003a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a26:	e00f      	b.n	8003a48 <HAL_I2C_Init+0x1dc>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e58      	subs	r0, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	0099      	lsls	r1, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	6809      	ldr	r1, [r1, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6911      	ldr	r1, [r2, #16]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68d2      	ldr	r2, [r2, #12]
 8003a82:	4311      	orrs	r1, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	000186a0 	.word	0x000186a0
 8003ae4:	001e847f 	.word	0x001e847f
 8003ae8:	003d08ff 	.word	0x003d08ff
 8003aec:	431bde83 	.word	0x431bde83
 8003af0:	10624dd3 	.word	0x10624dd3

08003af4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	4608      	mov	r0, r1
 8003afe:	4611      	mov	r1, r2
 8003b00:	461a      	mov	r2, r3
 8003b02:	4603      	mov	r3, r0
 8003b04:	817b      	strh	r3, [r7, #10]
 8003b06:	460b      	mov	r3, r1
 8003b08:	813b      	strh	r3, [r7, #8]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b0e:	f7ff fadd 	bl	80030cc <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	f040 80d9 	bne.w	8003cd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	2319      	movs	r3, #25
 8003b28:	2201      	movs	r2, #1
 8003b2a:	496d      	ldr	r1, [pc, #436]	; (8003ce0 <HAL_I2C_Mem_Write+0x1ec>)
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f971 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e0cc      	b.n	8003cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_I2C_Mem_Write+0x56>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e0c5      	b.n	8003cd6 <HAL_I2C_Mem_Write+0x1e2>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d007      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2221      	movs	r2, #33	; 0x21
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2240      	movs	r2, #64	; 0x40
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a3a      	ldr	r2, [r7, #32]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a4d      	ldr	r2, [pc, #308]	; (8003ce4 <HAL_I2C_Mem_Write+0x1f0>)
 8003bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bb2:	88f8      	ldrh	r0, [r7, #6]
 8003bb4:	893a      	ldrh	r2, [r7, #8]
 8003bb6:	8979      	ldrh	r1, [r7, #10]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f890 	bl	8003ce8 <I2C_RequestMemoryWrite>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d052      	beq.n	8003c74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e081      	b.n	8003cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f9f2 	bl	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d107      	bne.n	8003bfa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e06b      	b.n	8003cd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	781a      	ldrb	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d11b      	bne.n	8003c74 <HAL_I2C_Mem_Write+0x180>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1aa      	bne.n	8003bd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f9de 	bl	8004042 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d107      	bne.n	8003ca4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e016      	b.n	8003cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	00100002 	.word	0x00100002
 8003ce4:	ffff0000 	.word	0xffff0000

08003ce8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	817b      	strh	r3, [r7, #10]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	813b      	strh	r3, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f878 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d38:	d103      	bne.n	8003d42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e05f      	b.n	8003e06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d46:	897b      	ldrh	r3, [r7, #10]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	492d      	ldr	r1, [pc, #180]	; (8003e10 <I2C_RequestMemoryWrite+0x128>)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f8b0 	bl	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e04c      	b.n	8003e06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d84:	6a39      	ldr	r1, [r7, #32]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f91a 	bl	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00d      	beq.n	8003dae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d107      	bne.n	8003daa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e02b      	b.n	8003e06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db4:	893b      	ldrh	r3, [r7, #8]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	611a      	str	r2, [r3, #16]
 8003dbe:	e021      	b.n	8003e04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dc0:	893b      	ldrh	r3, [r7, #8]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	6a39      	ldr	r1, [r7, #32]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f8f4 	bl	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d107      	bne.n	8003df6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e005      	b.n	8003e06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dfa:	893b      	ldrh	r3, [r7, #8]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	00010002 	.word	0x00010002

08003e14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e24:	e025      	b.n	8003e72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e2c:	d021      	beq.n	8003e72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2e:	f7ff f94d 	bl	80030cc <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d302      	bcc.n	8003e44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d116      	bne.n	8003e72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e023      	b.n	8003eba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d10d      	bne.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	43da      	mvns	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4013      	ands	r3, r2
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bf0c      	ite	eq
 8003e8e:	2301      	moveq	r3, #1
 8003e90:	2300      	movne	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	e00c      	b.n	8003eb2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d0b6      	beq.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
 8003ece:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ed0:	e051      	b.n	8003f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee0:	d123      	bne.n	8003f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003efa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f043 0204 	orr.w	r2, r3, #4
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e046      	b.n	8003fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f30:	d021      	beq.n	8003f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7ff f8cb 	bl	80030cc <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d116      	bne.n	8003f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0220 	orr.w	r2, r3, #32
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e020      	b.n	8003fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10c      	bne.n	8003f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	43da      	mvns	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bf14      	ite	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	2300      	moveq	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	e00b      	b.n	8003fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	43da      	mvns	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d18d      	bne.n	8003ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fcc:	e02d      	b.n	800402a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f878 	bl	80040c4 <I2C_IsAcknowledgeFailed>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e02d      	b.n	800403a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fe4:	d021      	beq.n	800402a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe6:	f7ff f871 	bl	80030cc <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d302      	bcc.n	8003ffc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d116      	bne.n	800402a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f043 0220 	orr.w	r2, r3, #32
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e007      	b.n	800403a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004034:	2b80      	cmp	r3, #128	; 0x80
 8004036:	d1ca      	bne.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800404e:	e02d      	b.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f837 	bl	80040c4 <I2C_IsAcknowledgeFailed>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e02d      	b.n	80040bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004066:	d021      	beq.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004068:	f7ff f830 	bl	80030cc <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	d302      	bcc.n	800407e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d116      	bne.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	f043 0220 	orr.w	r2, r3, #32
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e007      	b.n	80040bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d1ca      	bne.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040da:	d11b      	bne.n	8004114 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	f043 0204 	orr.w	r2, r3, #4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e26c      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8087 	beq.w	800424e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004140:	4b92      	ldr	r3, [pc, #584]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b04      	cmp	r3, #4
 800414a:	d00c      	beq.n	8004166 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800414c:	4b8f      	ldr	r3, [pc, #572]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 030c 	and.w	r3, r3, #12
 8004154:	2b08      	cmp	r3, #8
 8004156:	d112      	bne.n	800417e <HAL_RCC_OscConfig+0x5e>
 8004158:	4b8c      	ldr	r3, [pc, #560]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004164:	d10b      	bne.n	800417e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004166:	4b89      	ldr	r3, [pc, #548]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d06c      	beq.n	800424c <HAL_RCC_OscConfig+0x12c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d168      	bne.n	800424c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e246      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004186:	d106      	bne.n	8004196 <HAL_RCC_OscConfig+0x76>
 8004188:	4b80      	ldr	r3, [pc, #512]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a7f      	ldr	r2, [pc, #508]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 800418e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	e02e      	b.n	80041f4 <HAL_RCC_OscConfig+0xd4>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x98>
 800419e:	4b7b      	ldr	r3, [pc, #492]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a7a      	ldr	r2, [pc, #488]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80041a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4b78      	ldr	r3, [pc, #480]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a77      	ldr	r2, [pc, #476]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80041b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e01d      	b.n	80041f4 <HAL_RCC_OscConfig+0xd4>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0xbc>
 80041c2:	4b72      	ldr	r3, [pc, #456]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a71      	ldr	r2, [pc, #452]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80041c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	4b6f      	ldr	r3, [pc, #444]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a6e      	ldr	r2, [pc, #440]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e00b      	b.n	80041f4 <HAL_RCC_OscConfig+0xd4>
 80041dc:	4b6b      	ldr	r3, [pc, #428]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a6a      	ldr	r2, [pc, #424]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80041e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b68      	ldr	r3, [pc, #416]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a67      	ldr	r2, [pc, #412]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80041ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d013      	beq.n	8004224 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fe ff66 	bl	80030cc <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004204:	f7fe ff62 	bl	80030cc <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e1fa      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	4b5d      	ldr	r3, [pc, #372]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0xe4>
 8004222:	e014      	b.n	800424e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fe ff52 	bl	80030cc <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800422c:	f7fe ff4e 	bl	80030cc <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e1e6      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423e:	4b53      	ldr	r3, [pc, #332]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x10c>
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d063      	beq.n	8004322 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800425a:	4b4c      	ldr	r3, [pc, #304]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004266:	4b49      	ldr	r3, [pc, #292]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b08      	cmp	r3, #8
 8004270:	d11c      	bne.n	80042ac <HAL_RCC_OscConfig+0x18c>
 8004272:	4b46      	ldr	r3, [pc, #280]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d116      	bne.n	80042ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427e:	4b43      	ldr	r3, [pc, #268]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_RCC_OscConfig+0x176>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d001      	beq.n	8004296 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e1ba      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004296:	4b3d      	ldr	r3, [pc, #244]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	4939      	ldr	r1, [pc, #228]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042aa:	e03a      	b.n	8004322 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d020      	beq.n	80042f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b4:	4b36      	ldr	r3, [pc, #216]	; (8004390 <HAL_RCC_OscConfig+0x270>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ba:	f7fe ff07 	bl	80030cc <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c2:	f7fe ff03 	bl	80030cc <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e19b      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d4:	4b2d      	ldr	r3, [pc, #180]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e0:	4b2a      	ldr	r3, [pc, #168]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4927      	ldr	r1, [pc, #156]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	600b      	str	r3, [r1, #0]
 80042f4:	e015      	b.n	8004322 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042f6:	4b26      	ldr	r3, [pc, #152]	; (8004390 <HAL_RCC_OscConfig+0x270>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fe fee6 	bl	80030cc <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004304:	f7fe fee2 	bl	80030cc <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e17a      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004316:	4b1d      	ldr	r3, [pc, #116]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d03a      	beq.n	80043a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d019      	beq.n	800436a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004336:	4b17      	ldr	r3, [pc, #92]	; (8004394 <HAL_RCC_OscConfig+0x274>)
 8004338:	2201      	movs	r2, #1
 800433a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433c:	f7fe fec6 	bl	80030cc <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004344:	f7fe fec2 	bl	80030cc <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e15a      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <HAL_RCC_OscConfig+0x26c>)
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004362:	2001      	movs	r0, #1
 8004364:	f000 fad8 	bl	8004918 <RCC_Delay>
 8004368:	e01c      	b.n	80043a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <HAL_RCC_OscConfig+0x274>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004370:	f7fe feac 	bl	80030cc <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004376:	e00f      	b.n	8004398 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004378:	f7fe fea8 	bl	80030cc <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d908      	bls.n	8004398 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e140      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
 800438a:	bf00      	nop
 800438c:	40021000 	.word	0x40021000
 8004390:	42420000 	.word	0x42420000
 8004394:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004398:	4b9e      	ldr	r3, [pc, #632]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e9      	bne.n	8004378 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80a6 	beq.w	80044fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b2:	2300      	movs	r3, #0
 80043b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b6:	4b97      	ldr	r3, [pc, #604]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10d      	bne.n	80043de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c2:	4b94      	ldr	r3, [pc, #592]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	4a93      	ldr	r2, [pc, #588]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80043c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043cc:	61d3      	str	r3, [r2, #28]
 80043ce:	4b91      	ldr	r3, [pc, #580]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043da:	2301      	movs	r3, #1
 80043dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043de:	4b8e      	ldr	r3, [pc, #568]	; (8004618 <HAL_RCC_OscConfig+0x4f8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d118      	bne.n	800441c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ea:	4b8b      	ldr	r3, [pc, #556]	; (8004618 <HAL_RCC_OscConfig+0x4f8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a8a      	ldr	r2, [pc, #552]	; (8004618 <HAL_RCC_OscConfig+0x4f8>)
 80043f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f6:	f7fe fe69 	bl	80030cc <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043fe:	f7fe fe65 	bl	80030cc <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b64      	cmp	r3, #100	; 0x64
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e0fd      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004410:	4b81      	ldr	r3, [pc, #516]	; (8004618 <HAL_RCC_OscConfig+0x4f8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d106      	bne.n	8004432 <HAL_RCC_OscConfig+0x312>
 8004424:	4b7b      	ldr	r3, [pc, #492]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	4a7a      	ldr	r2, [pc, #488]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	6213      	str	r3, [r2, #32]
 8004430:	e02d      	b.n	800448e <HAL_RCC_OscConfig+0x36e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10c      	bne.n	8004454 <HAL_RCC_OscConfig+0x334>
 800443a:	4b76      	ldr	r3, [pc, #472]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	4a75      	ldr	r2, [pc, #468]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	6213      	str	r3, [r2, #32]
 8004446:	4b73      	ldr	r3, [pc, #460]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	4a72      	ldr	r2, [pc, #456]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800444c:	f023 0304 	bic.w	r3, r3, #4
 8004450:	6213      	str	r3, [r2, #32]
 8004452:	e01c      	b.n	800448e <HAL_RCC_OscConfig+0x36e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	2b05      	cmp	r3, #5
 800445a:	d10c      	bne.n	8004476 <HAL_RCC_OscConfig+0x356>
 800445c:	4b6d      	ldr	r3, [pc, #436]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	4a6c      	ldr	r2, [pc, #432]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	6213      	str	r3, [r2, #32]
 8004468:	4b6a      	ldr	r3, [pc, #424]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	4a69      	ldr	r2, [pc, #420]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	6213      	str	r3, [r2, #32]
 8004474:	e00b      	b.n	800448e <HAL_RCC_OscConfig+0x36e>
 8004476:	4b67      	ldr	r3, [pc, #412]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	4a66      	ldr	r2, [pc, #408]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800447c:	f023 0301 	bic.w	r3, r3, #1
 8004480:	6213      	str	r3, [r2, #32]
 8004482:	4b64      	ldr	r3, [pc, #400]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	4a63      	ldr	r2, [pc, #396]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004488:	f023 0304 	bic.w	r3, r3, #4
 800448c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d015      	beq.n	80044c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004496:	f7fe fe19 	bl	80030cc <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449c:	e00a      	b.n	80044b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449e:	f7fe fe15 	bl	80030cc <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e0ab      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b4:	4b57      	ldr	r3, [pc, #348]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ee      	beq.n	800449e <HAL_RCC_OscConfig+0x37e>
 80044c0:	e014      	b.n	80044ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c2:	f7fe fe03 	bl	80030cc <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7fe fdff 	bl	80030cc <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e095      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e0:	4b4c      	ldr	r3, [pc, #304]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ee      	bne.n	80044ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d105      	bne.n	80044fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f2:	4b48      	ldr	r3, [pc, #288]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	4a47      	ldr	r2, [pc, #284]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80044f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8081 	beq.w	800460a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004508:	4b42      	ldr	r3, [pc, #264]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 030c 	and.w	r3, r3, #12
 8004510:	2b08      	cmp	r3, #8
 8004512:	d061      	beq.n	80045d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d146      	bne.n	80045aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451c:	4b3f      	ldr	r3, [pc, #252]	; (800461c <HAL_RCC_OscConfig+0x4fc>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004522:	f7fe fdd3 	bl	80030cc <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452a:	f7fe fdcf 	bl	80030cc <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e067      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453c:	4b35      	ldr	r3, [pc, #212]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f0      	bne.n	800452a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004550:	d108      	bne.n	8004564 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004552:	4b30      	ldr	r3, [pc, #192]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	492d      	ldr	r1, [pc, #180]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004564:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a19      	ldr	r1, [r3, #32]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	430b      	orrs	r3, r1
 8004576:	4927      	ldr	r1, [pc, #156]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 8004578:	4313      	orrs	r3, r2
 800457a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457c:	4b27      	ldr	r3, [pc, #156]	; (800461c <HAL_RCC_OscConfig+0x4fc>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004582:	f7fe fda3 	bl	80030cc <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458a:	f7fe fd9f 	bl	80030cc <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e037      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800459c:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x46a>
 80045a8:	e02f      	b.n	800460a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045aa:	4b1c      	ldr	r3, [pc, #112]	; (800461c <HAL_RCC_OscConfig+0x4fc>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fe fd8c 	bl	80030cc <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fe fd88 	bl	80030cc <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e020      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x498>
 80045d6:	e018      	b.n	800460a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e013      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCC_OscConfig+0x4f4>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d106      	bne.n	8004606 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004602:	429a      	cmp	r2, r3
 8004604:	d001      	beq.n	800460a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40021000 	.word	0x40021000
 8004618:	40007000 	.word	0x40007000
 800461c:	42420060 	.word	0x42420060

08004620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0d0      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004634:	4b6a      	ldr	r3, [pc, #424]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d910      	bls.n	8004664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b67      	ldr	r3, [pc, #412]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 0207 	bic.w	r2, r3, #7
 800464a:	4965      	ldr	r1, [pc, #404]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b63      	ldr	r3, [pc, #396]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0b8      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d020      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800467c:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a58      	ldr	r2, [pc, #352]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004682:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004686:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004694:	4b53      	ldr	r3, [pc, #332]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4a52      	ldr	r2, [pc, #328]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800469a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800469e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a0:	4b50      	ldr	r3, [pc, #320]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	494d      	ldr	r1, [pc, #308]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d040      	beq.n	8004740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d107      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c6:	4b47      	ldr	r3, [pc, #284]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d115      	bne.n	80046fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e07f      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d107      	bne.n	80046ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046de:	4b41      	ldr	r3, [pc, #260]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e073      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ee:	4b3d      	ldr	r3, [pc, #244]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e06b      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046fe:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f023 0203 	bic.w	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4936      	ldr	r1, [pc, #216]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	4313      	orrs	r3, r2
 800470e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004710:	f7fe fcdc 	bl	80030cc <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	e00a      	b.n	800472e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004718:	f7fe fcd8 	bl	80030cc <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e053      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472e:	4b2d      	ldr	r3, [pc, #180]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 020c 	and.w	r2, r3, #12
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	429a      	cmp	r2, r3
 800473e:	d1eb      	bne.n	8004718 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004740:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d210      	bcs.n	8004770 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 0207 	bic.w	r2, r3, #7
 8004756:	4922      	ldr	r1, [pc, #136]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b20      	ldr	r3, [pc, #128]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e032      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4916      	ldr	r1, [pc, #88]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800478a:	4313      	orrs	r3, r2
 800478c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800479a:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	490e      	ldr	r1, [pc, #56]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047ae:	f000 f821 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 80047b2:	4602      	mov	r2, r0
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	490a      	ldr	r1, [pc, #40]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 80047c0:	5ccb      	ldrb	r3, [r1, r3]
 80047c2:	fa22 f303 	lsr.w	r3, r2, r3
 80047c6:	4a09      	ldr	r2, [pc, #36]	; (80047ec <HAL_RCC_ClockConfig+0x1cc>)
 80047c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <HAL_RCC_ClockConfig+0x1d0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe fc3a 	bl	8003048 <HAL_InitTick>

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40022000 	.word	0x40022000
 80047e4:	40021000 	.word	0x40021000
 80047e8:	08006fb0 	.word	0x08006fb0
 80047ec:	20000024 	.word	0x20000024
 80047f0:	20000028 	.word	0x20000028

080047f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f4:	b490      	push	{r4, r7}
 80047f6:	b08a      	sub	sp, #40	; 0x28
 80047f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047fa:	4b2a      	ldr	r3, [pc, #168]	; (80048a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80047fc:	1d3c      	adds	r4, r7, #4
 80047fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004804:	f240 2301 	movw	r3, #513	; 0x201
 8004808:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	2300      	movs	r3, #0
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800481e:	4b22      	ldr	r3, [pc, #136]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b04      	cmp	r3, #4
 800482c:	d002      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0x40>
 800482e:	2b08      	cmp	r3, #8
 8004830:	d003      	beq.n	800483a <HAL_RCC_GetSysClockFreq+0x46>
 8004832:	e02d      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004834:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004836:	623b      	str	r3, [r7, #32]
      break;
 8004838:	e02d      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	0c9b      	lsrs	r3, r3, #18
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004846:	4413      	add	r3, r2
 8004848:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800484c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d013      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004858:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	0c5b      	lsrs	r3, r3, #17
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004866:	4413      	add	r3, r2
 8004868:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800486c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	4a0e      	ldr	r2, [pc, #56]	; (80048ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004872:	fb02 f203 	mul.w	r2, r2, r3
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
 800487e:	e004      	b.n	800488a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	4a0b      	ldr	r2, [pc, #44]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	623b      	str	r3, [r7, #32]
      break;
 800488e:	e002      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004892:	623b      	str	r3, [r7, #32]
      break;
 8004894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004896:	6a3b      	ldr	r3, [r7, #32]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3728      	adds	r7, #40	; 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bc90      	pop	{r4, r7}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	08006834 	.word	0x08006834
 80048a8:	40021000 	.word	0x40021000
 80048ac:	007a1200 	.word	0x007a1200
 80048b0:	003d0900 	.word	0x003d0900

080048b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b8:	4b02      	ldr	r3, [pc, #8]	; (80048c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	20000024 	.word	0x20000024

080048c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048cc:	f7ff fff2 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	4903      	ldr	r1, [pc, #12]	; (80048ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000
 80048ec:	08006fc0 	.word	0x08006fc0

080048f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048f4:	f7ff ffde 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048f8:	4602      	mov	r2, r0
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	0adb      	lsrs	r3, r3, #11
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	4903      	ldr	r1, [pc, #12]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004906:	5ccb      	ldrb	r3, [r1, r3]
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	08006fc0 	.word	0x08006fc0

08004918 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <RCC_Delay+0x34>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a0a      	ldr	r2, [pc, #40]	; (8004950 <RCC_Delay+0x38>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	0a5b      	lsrs	r3, r3, #9
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004934:	bf00      	nop
  }
  while (Delay --);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1e5a      	subs	r2, r3, #1
 800493a:	60fa      	str	r2, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f9      	bne.n	8004934 <RCC_Delay+0x1c>
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	20000024 	.word	0x20000024
 8004950:	10624dd3 	.word	0x10624dd3

08004954 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e076      	b.n	8004a54 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d108      	bne.n	8004980 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004976:	d009      	beq.n	800498c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	61da      	str	r2, [r3, #28]
 800497e:	e005      	b.n	800498c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fe f8e4 	bl	8002b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a10:	ea42 0103 	orr.w	r1, r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	0c1a      	lsrs	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f002 0204 	and.w	r2, r2, #4
 8004a32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_SPI_Transmit+0x22>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e126      	b.n	8004ccc <HAL_SPI_Transmit+0x270>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a86:	f7fe fb21 	bl	80030cc <HAL_GetTick>
 8004a8a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d002      	beq.n	8004aa2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004aa0:	e10b      	b.n	8004cba <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_SPI_Transmit+0x52>
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ab2:	e102      	b.n	8004cba <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	88fa      	ldrh	r2, [r7, #6]
 8004ad2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004afa:	d10f      	bne.n	8004b1c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d007      	beq.n	8004b3a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b42:	d14b      	bne.n	8004bdc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_SPI_Transmit+0xf6>
 8004b4c:	8afb      	ldrh	r3, [r7, #22]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d13e      	bne.n	8004bd0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	881a      	ldrh	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	1c9a      	adds	r2, r3, #2
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b76:	e02b      	b.n	8004bd0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d112      	bne.n	8004bac <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	881a      	ldrh	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004baa:	e011      	b.n	8004bd0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bac:	f7fe fa8e 	bl	80030cc <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d803      	bhi.n	8004bc4 <HAL_SPI_Transmit+0x168>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_Transmit+0x16e>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bce:	e074      	b.n	8004cba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1ce      	bne.n	8004b78 <HAL_SPI_Transmit+0x11c>
 8004bda:	e04c      	b.n	8004c76 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_SPI_Transmit+0x18e>
 8004be4:	8afb      	ldrh	r3, [r7, #22]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d140      	bne.n	8004c6c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	7812      	ldrb	r2, [r2, #0]
 8004bf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c10:	e02c      	b.n	8004c6c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d113      	bne.n	8004c48 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	7812      	ldrb	r2, [r2, #0]
 8004c2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c46:	e011      	b.n	8004c6c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c48:	f7fe fa40 	bl	80030cc <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d803      	bhi.n	8004c60 <HAL_SPI_Transmit+0x204>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c5e:	d102      	bne.n	8004c66 <HAL_SPI_Transmit+0x20a>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d102      	bne.n	8004c6c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c6a:	e026      	b.n	8004cba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1cd      	bne.n	8004c12 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	6839      	ldr	r1, [r7, #0]
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fbb8 	bl	80053f0 <SPI_EndRxTxTransaction>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e000      	b.n	8004cba <HAL_SPI_Transmit+0x25e>
  }

error:
 8004cb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cca:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3720      	adds	r7, #32
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf0:	d112      	bne.n	8004d18 <HAL_SPI_Receive+0x44>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10e      	bne.n	8004d18 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f8f1 	bl	8004ef6 <HAL_SPI_TransmitReceive>
 8004d14:	4603      	mov	r3, r0
 8004d16:	e0ea      	b.n	8004eee <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_SPI_Receive+0x52>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0e3      	b.n	8004eee <HAL_SPI_Receive+0x21a>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d2e:	f7fe f9cd 	bl	80030cc <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d002      	beq.n	8004d46 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d40:	2302      	movs	r3, #2
 8004d42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d44:	e0ca      	b.n	8004edc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_SPI_Receive+0x7e>
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d56:	e0c1      	b.n	8004edc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9e:	d10f      	bne.n	8004dc0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dbe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b40      	cmp	r3, #64	; 0x40
 8004dcc:	d007      	beq.n	8004dde <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ddc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d162      	bne.n	8004eac <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004de6:	e02e      	b.n	8004e46 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d115      	bne.n	8004e22 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f103 020c 	add.w	r2, r3, #12
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	7812      	ldrb	r2, [r2, #0]
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e20:	e011      	b.n	8004e46 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e22:	f7fe f953 	bl	80030cc <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d803      	bhi.n	8004e3a <HAL_SPI_Receive+0x166>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e38:	d102      	bne.n	8004e40 <HAL_SPI_Receive+0x16c>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e44:	e04a      	b.n	8004edc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1cb      	bne.n	8004de8 <HAL_SPI_Receive+0x114>
 8004e50:	e031      	b.n	8004eb6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d113      	bne.n	8004e88 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	b292      	uxth	r2, r2
 8004e6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	1c9a      	adds	r2, r3, #2
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e86:	e011      	b.n	8004eac <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e88:	f7fe f920 	bl	80030cc <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d803      	bhi.n	8004ea0 <HAL_SPI_Receive+0x1cc>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e9e:	d102      	bne.n	8004ea6 <HAL_SPI_Receive+0x1d2>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004eaa:	e017      	b.n	8004edc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1cd      	bne.n	8004e52 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fa46 	bl	800534c <SPI_EndRxTransaction>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	75fb      	strb	r3, [r7, #23]
 8004ed8:	e000      	b.n	8004edc <HAL_SPI_Receive+0x208>
  }

error :
 8004eda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b08c      	sub	sp, #48	; 0x30
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f04:	2301      	movs	r3, #1
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x26>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e18a      	b.n	8005232 <HAL_SPI_TransmitReceive+0x33c>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f24:	f7fe f8d2 	bl	80030cc <HAL_GetTick>
 8004f28:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f3a:	887b      	ldrh	r3, [r7, #2]
 8004f3c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d00f      	beq.n	8004f66 <HAL_SPI_TransmitReceive+0x70>
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f4c:	d107      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x68>
 8004f56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d003      	beq.n	8004f66 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f5e:	2302      	movs	r3, #2
 8004f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f64:	e15b      	b.n	800521e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_SPI_TransmitReceive+0x82>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_SPI_TransmitReceive+0x82>
 8004f72:	887b      	ldrh	r3, [r7, #2]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f7e:	e14e      	b.n	800521e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d003      	beq.n	8004f94 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2205      	movs	r2, #5
 8004f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	887a      	ldrh	r2, [r7, #2]
 8004fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	887a      	ldrh	r2, [r7, #2]
 8004faa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	887a      	ldrh	r2, [r7, #2]
 8004fb6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	887a      	ldrh	r2, [r7, #2]
 8004fbc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d007      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff0:	d178      	bne.n	80050e4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_SPI_TransmitReceive+0x10a>
 8004ffa:	8b7b      	ldrh	r3, [r7, #26]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d166      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	881a      	ldrh	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	1c9a      	adds	r2, r3, #2
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005024:	e053      	b.n	80050ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b02      	cmp	r3, #2
 8005032:	d11b      	bne.n	800506c <HAL_SPI_TransmitReceive+0x176>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d016      	beq.n	800506c <HAL_SPI_TransmitReceive+0x176>
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d113      	bne.n	800506c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	881a      	ldrh	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	1c9a      	adds	r2, r3, #2
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b01      	cmp	r3, #1
 8005078:	d119      	bne.n	80050ae <HAL_SPI_TransmitReceive+0x1b8>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d014      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	b292      	uxth	r2, r2
 8005090:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	1c9a      	adds	r2, r3, #2
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050aa:	2301      	movs	r3, #1
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050ae:	f7fe f80d 	bl	80030cc <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d807      	bhi.n	80050ce <HAL_SPI_TransmitReceive+0x1d8>
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050c4:	d003      	beq.n	80050ce <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050cc:	e0a7      	b.n	800521e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1a6      	bne.n	8005026 <HAL_SPI_TransmitReceive+0x130>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1a1      	bne.n	8005026 <HAL_SPI_TransmitReceive+0x130>
 80050e2:	e07c      	b.n	80051de <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0x1fc>
 80050ec:	8b7b      	ldrh	r3, [r7, #26]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d16b      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	330c      	adds	r3, #12
 80050fc:	7812      	ldrb	r2, [r2, #0]
 80050fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005118:	e057      	b.n	80051ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b02      	cmp	r3, #2
 8005126:	d11c      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x26c>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d017      	beq.n	8005162 <HAL_SPI_TransmitReceive+0x26c>
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d114      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	7812      	ldrb	r2, [r2, #0]
 8005144:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b01      	cmp	r3, #1
 800516e:	d119      	bne.n	80051a4 <HAL_SPI_TransmitReceive+0x2ae>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d014      	beq.n	80051a4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051a0:	2301      	movs	r3, #1
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051a4:	f7fd ff92 	bl	80030cc <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d803      	bhi.n	80051bc <HAL_SPI_TransmitReceive+0x2c6>
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ba:	d102      	bne.n	80051c2 <HAL_SPI_TransmitReceive+0x2cc>
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051c8:	e029      	b.n	800521e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1a2      	bne.n	800511a <HAL_SPI_TransmitReceive+0x224>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d19d      	bne.n	800511a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f904 	bl	80053f0 <SPI_EndRxTxTransaction>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d006      	beq.n	80051fc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051fa:	e010      	b.n	800521e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10b      	bne.n	800521c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	e000      	b.n	800521e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800521c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800522e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005232:	4618      	mov	r0, r3
 8005234:	3730      	adds	r7, #48	; 0x30
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800524c:	f7fd ff3e 	bl	80030cc <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	4413      	add	r3, r2
 800525a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800525c:	f7fd ff36 	bl	80030cc <HAL_GetTick>
 8005260:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005262:	4b39      	ldr	r3, [pc, #228]	; (8005348 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	015b      	lsls	r3, r3, #5
 8005268:	0d1b      	lsrs	r3, r3, #20
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	fb02 f303 	mul.w	r3, r2, r3
 8005270:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005272:	e054      	b.n	800531e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800527a:	d050      	beq.n	800531e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800527c:	f7fd ff26 	bl	80030cc <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	429a      	cmp	r2, r3
 800528a:	d902      	bls.n	8005292 <SPI_WaitFlagStateUntilTimeout+0x56>
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d13d      	bne.n	800530e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052aa:	d111      	bne.n	80052d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b4:	d004      	beq.n	80052c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052be:	d107      	bne.n	80052d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d8:	d10f      	bne.n	80052fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e017      	b.n	800533e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	3b01      	subs	r3, #1
 800531c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4013      	ands	r3, r2
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	429a      	cmp	r2, r3
 800532c:	bf0c      	ite	eq
 800532e:	2301      	moveq	r3, #1
 8005330:	2300      	movne	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	429a      	cmp	r2, r3
 800533a:	d19b      	bne.n	8005274 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000024 	.word	0x20000024

0800534c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005360:	d111      	bne.n	8005386 <SPI_EndRxTransaction+0x3a>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536a:	d004      	beq.n	8005376 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005374:	d107      	bne.n	8005386 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005384:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800538e:	d117      	bne.n	80053c0 <SPI_EndRxTransaction+0x74>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005398:	d112      	bne.n	80053c0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2200      	movs	r2, #0
 80053a2:	2101      	movs	r1, #1
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff ff49 	bl	800523c <SPI_WaitFlagStateUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01a      	beq.n	80053e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e013      	b.n	80053e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	2180      	movs	r1, #128	; 0x80
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff ff36 	bl	800523c <SPI_WaitFlagStateUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e000      	b.n	80053e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2200      	movs	r2, #0
 8005404:	2180      	movs	r1, #128	; 0x80
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7ff ff18 	bl	800523c <SPI_WaitFlagStateUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d007      	beq.n	8005422 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	f043 0220 	orr.w	r2, r3, #32
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e000      	b.n	8005424 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e041      	b.n	80054c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fd fbd8 	bl	8002c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f000 faa8 	bl	80059c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d001      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e03a      	b.n	800555a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a18      	ldr	r2, [pc, #96]	; (8005564 <HAL_TIM_Base_Start_IT+0x98>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00e      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x58>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550e:	d009      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x58>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a14      	ldr	r2, [pc, #80]	; (8005568 <HAL_TIM_Base_Start_IT+0x9c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x58>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a13      	ldr	r2, [pc, #76]	; (800556c <HAL_TIM_Base_Start_IT+0xa0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d111      	bne.n	8005548 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b06      	cmp	r3, #6
 8005534:	d010      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005546:	e007      	b.n	8005558 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800

08005570 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0201 	bic.w	r2, r2, #1
 8005586:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6a1a      	ldr	r2, [r3, #32]
 800558e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005592:	4013      	ands	r3, r2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10f      	bne.n	80055b8 <HAL_TIM_Base_Stop_IT+0x48>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a1a      	ldr	r2, [r3, #32]
 800559e:	f240 4344 	movw	r3, #1092	; 0x444
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d107      	bne.n	80055b8 <HAL_TIM_Base_Stop_IT+0x48>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0201 	bic.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr

080055cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d122      	bne.n	8005628 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d11b      	bne.n	8005628 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0202 	mvn.w	r2, #2
 80055f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f9ba 	bl	8005988 <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f9ad 	bl	8005976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f9bc 	bl	800599a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b04      	cmp	r3, #4
 8005634:	d122      	bne.n	800567c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b04      	cmp	r3, #4
 8005642:	d11b      	bne.n	800567c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0204 	mvn.w	r2, #4
 800564c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f990 	bl	8005988 <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f983 	bl	8005976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f992 	bl	800599a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0308 	and.w	r3, r3, #8
 8005686:	2b08      	cmp	r3, #8
 8005688:	d122      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b08      	cmp	r3, #8
 8005696:	d11b      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0208 	mvn.w	r2, #8
 80056a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2204      	movs	r2, #4
 80056a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f966 	bl	8005988 <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f959 	bl	8005976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f968 	bl	800599a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0310 	and.w	r3, r3, #16
 80056da:	2b10      	cmp	r3, #16
 80056dc:	d122      	bne.n	8005724 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d11b      	bne.n	8005724 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0210 	mvn.w	r2, #16
 80056f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2208      	movs	r2, #8
 80056fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f93c 	bl	8005988 <HAL_TIM_IC_CaptureCallback>
 8005710:	e005      	b.n	800571e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f92f 	bl	8005976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f93e 	bl	800599a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b01      	cmp	r3, #1
 8005730:	d10e      	bne.n	8005750 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b01      	cmp	r3, #1
 800573e:	d107      	bne.n	8005750 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0201 	mvn.w	r2, #1
 8005748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f90a 	bl	8005964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b80      	cmp	r3, #128	; 0x80
 800575c:	d10e      	bne.n	800577c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005768:	2b80      	cmp	r3, #128	; 0x80
 800576a:	d107      	bne.n	800577c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fa81 	bl	8005c7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d10e      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d107      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f902 	bl	80059ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d10e      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d107      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0220 	mvn.w	r2, #32
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fa4c 	bl	8005c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIM_ConfigClockSource+0x18>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e0b3      	b.n	800595c <HAL_TIM_ConfigClockSource+0x180>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005812:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800581a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800582c:	d03e      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0xd0>
 800582e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005832:	f200 8087 	bhi.w	8005944 <HAL_TIM_ConfigClockSource+0x168>
 8005836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583a:	f000 8085 	beq.w	8005948 <HAL_TIM_ConfigClockSource+0x16c>
 800583e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005842:	d87f      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x168>
 8005844:	2b70      	cmp	r3, #112	; 0x70
 8005846:	d01a      	beq.n	800587e <HAL_TIM_ConfigClockSource+0xa2>
 8005848:	2b70      	cmp	r3, #112	; 0x70
 800584a:	d87b      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x168>
 800584c:	2b60      	cmp	r3, #96	; 0x60
 800584e:	d050      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x116>
 8005850:	2b60      	cmp	r3, #96	; 0x60
 8005852:	d877      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x168>
 8005854:	2b50      	cmp	r3, #80	; 0x50
 8005856:	d03c      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0xf6>
 8005858:	2b50      	cmp	r3, #80	; 0x50
 800585a:	d873      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x168>
 800585c:	2b40      	cmp	r3, #64	; 0x40
 800585e:	d058      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x136>
 8005860:	2b40      	cmp	r3, #64	; 0x40
 8005862:	d86f      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x168>
 8005864:	2b30      	cmp	r3, #48	; 0x30
 8005866:	d064      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x156>
 8005868:	2b30      	cmp	r3, #48	; 0x30
 800586a:	d86b      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x168>
 800586c:	2b20      	cmp	r3, #32
 800586e:	d060      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x156>
 8005870:	2b20      	cmp	r3, #32
 8005872:	d867      	bhi.n	8005944 <HAL_TIM_ConfigClockSource+0x168>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d05c      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x156>
 8005878:	2b10      	cmp	r3, #16
 800587a:	d05a      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800587c:	e062      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6899      	ldr	r1, [r3, #8]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f000 f970 	bl	8005b72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	609a      	str	r2, [r3, #8]
      break;
 80058aa:	e04e      	b.n	800594a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6899      	ldr	r1, [r3, #8]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f000 f959 	bl	8005b72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ce:	609a      	str	r2, [r3, #8]
      break;
 80058d0:	e03b      	b.n	800594a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6859      	ldr	r1, [r3, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	461a      	mov	r2, r3
 80058e0:	f000 f8d0 	bl	8005a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2150      	movs	r1, #80	; 0x50
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f927 	bl	8005b3e <TIM_ITRx_SetConfig>
      break;
 80058f0:	e02b      	b.n	800594a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	461a      	mov	r2, r3
 8005900:	f000 f8ee 	bl	8005ae0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2160      	movs	r1, #96	; 0x60
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f917 	bl	8005b3e <TIM_ITRx_SetConfig>
      break;
 8005910:	e01b      	b.n	800594a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	461a      	mov	r2, r3
 8005920:	f000 f8b0 	bl	8005a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2140      	movs	r1, #64	; 0x40
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f907 	bl	8005b3e <TIM_ITRx_SetConfig>
      break;
 8005930:	e00b      	b.n	800594a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f000 f8fe 	bl	8005b3e <TIM_ITRx_SetConfig>
        break;
 8005942:	e002      	b.n	800594a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005944:	bf00      	nop
 8005946:	e000      	b.n	800594a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005948:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr
	...

080059c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a29      	ldr	r2, [pc, #164]	; (8005a78 <TIM_Base_SetConfig+0xb8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00b      	beq.n	80059f0 <TIM_Base_SetConfig+0x30>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d007      	beq.n	80059f0 <TIM_Base_SetConfig+0x30>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a26      	ldr	r2, [pc, #152]	; (8005a7c <TIM_Base_SetConfig+0xbc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_Base_SetConfig+0x30>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a25      	ldr	r2, [pc, #148]	; (8005a80 <TIM_Base_SetConfig+0xc0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d108      	bne.n	8005a02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1c      	ldr	r2, [pc, #112]	; (8005a78 <TIM_Base_SetConfig+0xb8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <TIM_Base_SetConfig+0x62>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a10:	d007      	beq.n	8005a22 <TIM_Base_SetConfig+0x62>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <TIM_Base_SetConfig+0xbc>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_Base_SetConfig+0x62>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a18      	ldr	r2, [pc, #96]	; (8005a80 <TIM_Base_SetConfig+0xc0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d108      	bne.n	8005a34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a07      	ldr	r2, [pc, #28]	; (8005a78 <TIM_Base_SetConfig+0xb8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d103      	bne.n	8005a68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800

08005a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f023 0201 	bic.w	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f023 030a 	bic.w	r3, r3, #10
 8005ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	621a      	str	r2, [r3, #32]
}
 8005ad6:	bf00      	nop
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f023 0210 	bic.w	r2, r3, #16
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	031b      	lsls	r3, r3, #12
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	621a      	str	r2, [r3, #32]
}
 8005b34:	bf00      	nop
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr

08005b3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f043 0307 	orr.w	r3, r3, #7
 8005b60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	609a      	str	r2, [r3, #8]
}
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b087      	sub	sp, #28
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
 8005b7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	021a      	lsls	r2, r3, #8
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	609a      	str	r2, [r3, #8]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e046      	b.n	8005c56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00e      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c14:	d009      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a12      	ldr	r2, [pc, #72]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d004      	beq.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a10      	ldr	r2, [pc, #64]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d10c      	bne.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40000800 	.word	0x40000800

08005c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr

08005c7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e03f      	b.n	8005d22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fc ffcc 	bl	8002c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2224      	movs	r2, #36	; 0x24
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fba9 	bl	800642c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695a      	ldr	r2, [r3, #20]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68da      	ldr	r2, [r3, #12]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	4613      	mov	r3, r2
 8005d36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d11d      	bne.n	8005d80 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_UART_Receive_IT+0x26>
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e016      	b.n	8005d82 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_UART_Receive_IT+0x38>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e00f      	b.n	8005d82 <HAL_UART_Receive_IT+0x58>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005d70:	88fb      	ldrh	r3, [r7, #6]
 8005d72:	461a      	mov	r2, r3
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f9cf 	bl	800611a <UART_Start_Receive_IT>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	e000      	b.n	8005d82 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d80:	2302      	movs	r3, #2
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	; 0x28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10d      	bne.n	8005dde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d008      	beq.n	8005dde <HAL_UART_IRQHandler+0x52>
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa7f 	bl	80062da <UART_Receive_IT>
      return;
 8005ddc:	e17b      	b.n	80060d6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80b1 	beq.w	8005f48 <HAL_UART_IRQHandler+0x1bc>
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d105      	bne.n	8005dfc <HAL_UART_IRQHandler+0x70>
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 80a6 	beq.w	8005f48 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <HAL_UART_IRQHandler+0x90>
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	f043 0201 	orr.w	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <HAL_UART_IRQHandler+0xb0>
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	f043 0202 	orr.w	r2, r3, #2
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_UART_IRQHandler+0xd0>
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	f043 0204 	orr.w	r2, r3, #4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00f      	beq.n	8005e86 <HAL_UART_IRQHandler+0xfa>
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <HAL_UART_IRQHandler+0xee>
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f043 0208 	orr.w	r2, r3, #8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 811e 	beq.w	80060cc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <HAL_UART_IRQHandler+0x11e>
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	f003 0320 	and.w	r3, r3, #32
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fa18 	bl	80062da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bf14      	ite	ne
 8005eb8:	2301      	movne	r3, #1
 8005eba:	2300      	moveq	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d102      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x146>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d031      	beq.n	8005f36 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f95a 	bl	800618c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d023      	beq.n	8005f2e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d013      	beq.n	8005f26 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	4a76      	ldr	r2, [pc, #472]	; (80060dc <HAL_UART_IRQHandler+0x350>)
 8005f04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fd fa54 	bl	80033b8 <HAL_DMA_Abort_IT>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d016      	beq.n	8005f44 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f20:	4610      	mov	r0, r2
 8005f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f24:	e00e      	b.n	8005f44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f8e3 	bl	80060f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	e00a      	b.n	8005f44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f8df 	bl	80060f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	e006      	b.n	8005f44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8db 	bl	80060f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f42:	e0c3      	b.n	80060cc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	bf00      	nop
    return;
 8005f46:	e0c1      	b.n	80060cc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	f040 80a1 	bne.w	8006094 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 809b 	beq.w	8006094 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8095 	beq.w	8006094 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d04e      	beq.n	800602c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005f98:	8a3b      	ldrh	r3, [r7, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 8098 	beq.w	80060d0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fa4:	8a3a      	ldrh	r2, [r7, #16]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	f080 8092 	bcs.w	80060d0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8a3a      	ldrh	r2, [r7, #16]
 8005fb0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d02b      	beq.n	8006014 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695a      	ldr	r2, [r3, #20]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0201 	bic.w	r2, r2, #1
 8005fda:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695a      	ldr	r2, [r3, #20]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0210 	bic.w	r2, r2, #16
 8006008:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	4618      	mov	r0, r3
 8006010:	f7fd f997 	bl	8003342 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800601c:	b29b      	uxth	r3, r3
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	b29b      	uxth	r3, r3
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f86d 	bl	8006104 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800602a:	e051      	b.n	80060d0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006034:	b29b      	uxth	r3, r3
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d047      	beq.n	80060d4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006044:	8a7b      	ldrh	r3, [r7, #18]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d044      	beq.n	80060d4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006058:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	695a      	ldr	r2, [r3, #20]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0201 	bic.w	r2, r2, #1
 8006068:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0210 	bic.w	r2, r2, #16
 8006086:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006088:	8a7b      	ldrh	r3, [r7, #18]
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f839 	bl	8006104 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006092:	e01f      	b.n	80060d4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b00      	cmp	r3, #0
 800609c:	d008      	beq.n	80060b0 <HAL_UART_IRQHandler+0x324>
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f8af 	bl	800620c <UART_Transmit_IT>
    return;
 80060ae:	e012      	b.n	80060d6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00d      	beq.n	80060d6 <HAL_UART_IRQHandler+0x34a>
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f8f0 	bl	80062aa <UART_EndTransmit_IT>
    return;
 80060ca:	e004      	b.n	80060d6 <HAL_UART_IRQHandler+0x34a>
    return;
 80060cc:	bf00      	nop
 80060ce:	e002      	b.n	80060d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80060d0:	bf00      	nop
 80060d2:	e000      	b.n	80060d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80060d4:	bf00      	nop
  }
}
 80060d6:	3728      	adds	r7, #40	; 0x28
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	080061e5 	.word	0x080061e5

080060e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr

080060f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	bc80      	pop	{r7}
 8006118:	4770      	bx	lr

0800611a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	4613      	mov	r3, r2
 8006126:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	88fa      	ldrh	r2, [r7, #6]
 8006132:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	88fa      	ldrh	r2, [r7, #6]
 8006138:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2222      	movs	r2, #34	; 0x22
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800615e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695a      	ldr	r2, [r3, #20]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0220 	orr.w	r2, r2, #32
 800617e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d107      	bne.n	80061cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0210 	bic.w	r2, r2, #16
 80061ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	bc80      	pop	{r7}
 80061e2:	4770      	bx	lr

080061e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7ff ff77 	bl	80060f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b21      	cmp	r3, #33	; 0x21
 800621e:	d13e      	bne.n	800629e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006228:	d114      	bne.n	8006254 <UART_Transmit_IT+0x48>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d110      	bne.n	8006254 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006246:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	1c9a      	adds	r2, r3, #2
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	621a      	str	r2, [r3, #32]
 8006252:	e008      	b.n	8006266 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	1c59      	adds	r1, r3, #1
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	6211      	str	r1, [r2, #32]
 800625e:	781a      	ldrb	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800626a:	b29b      	uxth	r3, r3
 800626c:	3b01      	subs	r3, #1
 800626e:	b29b      	uxth	r3, r3
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	4619      	mov	r1, r3
 8006274:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10f      	bne.n	800629a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006288:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68da      	ldr	r2, [r3, #12]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006298:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	e000      	b.n	80062a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800629e:	2302      	movs	r3, #2
  }
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b082      	sub	sp, #8
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff ff08 	bl	80060e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b086      	sub	sp, #24
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b22      	cmp	r3, #34	; 0x22
 80062ec:	f040 8099 	bne.w	8006422 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f8:	d117      	bne.n	800632a <UART_Receive_IT+0x50>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d113      	bne.n	800632a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006318:	b29a      	uxth	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006322:	1c9a      	adds	r2, r3, #2
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	629a      	str	r2, [r3, #40]	; 0x28
 8006328:	e026      	b.n	8006378 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633c:	d007      	beq.n	800634e <UART_Receive_IT+0x74>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10a      	bne.n	800635c <UART_Receive_IT+0x82>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	b2da      	uxtb	r2, r3
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	e008      	b.n	800636e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006368:	b2da      	uxtb	r2, r3
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29b      	uxth	r3, r3
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	4619      	mov	r1, r3
 8006386:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006388:	2b00      	cmp	r3, #0
 800638a:	d148      	bne.n	800641e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0220 	bic.w	r2, r2, #32
 800639a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695a      	ldr	r2, [r3, #20]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0201 	bic.w	r2, r2, #1
 80063ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d123      	bne.n	8006414 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0210 	bic.w	r2, r2, #16
 80063e0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d10a      	bne.n	8006406 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff fe79 	bl	8006104 <HAL_UARTEx_RxEventCallback>
 8006412:	e002      	b.n	800641a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7fc fafd 	bl	8002a14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	e002      	b.n	8006424 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	e000      	b.n	8006424 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006422:	2302      	movs	r3, #2
  }
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006466:	f023 030c 	bic.w	r3, r3, #12
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	68b9      	ldr	r1, [r7, #8]
 8006470:	430b      	orrs	r3, r1
 8006472:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a2c      	ldr	r2, [pc, #176]	; (8006540 <UART_SetConfig+0x114>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d103      	bne.n	800649c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006494:	f7fe fa2c 	bl	80048f0 <HAL_RCC_GetPCLK2Freq>
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	e002      	b.n	80064a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800649c:	f7fe fa14 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 80064a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	009a      	lsls	r2, r3, #2
 80064ac:	441a      	add	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b8:	4a22      	ldr	r2, [pc, #136]	; (8006544 <UART_SetConfig+0x118>)
 80064ba:	fba2 2303 	umull	r2, r3, r2, r3
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	0119      	lsls	r1, r3, #4
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009a      	lsls	r2, r3, #2
 80064cc:	441a      	add	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80064d8:	4b1a      	ldr	r3, [pc, #104]	; (8006544 <UART_SetConfig+0x118>)
 80064da:	fba3 0302 	umull	r0, r3, r3, r2
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	2064      	movs	r0, #100	; 0x64
 80064e2:	fb00 f303 	mul.w	r3, r0, r3
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	3332      	adds	r3, #50	; 0x32
 80064ec:	4a15      	ldr	r2, [pc, #84]	; (8006544 <UART_SetConfig+0x118>)
 80064ee:	fba2 2303 	umull	r2, r3, r2, r3
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064f8:	4419      	add	r1, r3
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009a      	lsls	r2, r3, #2
 8006504:	441a      	add	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006510:	4b0c      	ldr	r3, [pc, #48]	; (8006544 <UART_SetConfig+0x118>)
 8006512:	fba3 0302 	umull	r0, r3, r3, r2
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	2064      	movs	r0, #100	; 0x64
 800651a:	fb00 f303 	mul.w	r3, r0, r3
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	3332      	adds	r3, #50	; 0x32
 8006524:	4a07      	ldr	r2, [pc, #28]	; (8006544 <UART_SetConfig+0x118>)
 8006526:	fba2 2303 	umull	r2, r3, r2, r3
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	f003 020f 	and.w	r2, r3, #15
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	440a      	add	r2, r1
 8006536:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40013800 	.word	0x40013800
 8006544:	51eb851f 	.word	0x51eb851f

08006548 <__libc_init_array>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	2600      	movs	r6, #0
 800654c:	4d0c      	ldr	r5, [pc, #48]	; (8006580 <__libc_init_array+0x38>)
 800654e:	4c0d      	ldr	r4, [pc, #52]	; (8006584 <__libc_init_array+0x3c>)
 8006550:	1b64      	subs	r4, r4, r5
 8006552:	10a4      	asrs	r4, r4, #2
 8006554:	42a6      	cmp	r6, r4
 8006556:	d109      	bne.n	800656c <__libc_init_array+0x24>
 8006558:	f000 f892 	bl	8006680 <_init>
 800655c:	2600      	movs	r6, #0
 800655e:	4d0a      	ldr	r5, [pc, #40]	; (8006588 <__libc_init_array+0x40>)
 8006560:	4c0a      	ldr	r4, [pc, #40]	; (800658c <__libc_init_array+0x44>)
 8006562:	1b64      	subs	r4, r4, r5
 8006564:	10a4      	asrs	r4, r4, #2
 8006566:	42a6      	cmp	r6, r4
 8006568:	d105      	bne.n	8006576 <__libc_init_array+0x2e>
 800656a:	bd70      	pop	{r4, r5, r6, pc}
 800656c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006570:	4798      	blx	r3
 8006572:	3601      	adds	r6, #1
 8006574:	e7ee      	b.n	8006554 <__libc_init_array+0xc>
 8006576:	f855 3b04 	ldr.w	r3, [r5], #4
 800657a:	4798      	blx	r3
 800657c:	3601      	adds	r6, #1
 800657e:	e7f2      	b.n	8006566 <__libc_init_array+0x1e>
 8006580:	08006ff0 	.word	0x08006ff0
 8006584:	08006ff0 	.word	0x08006ff0
 8006588:	08006ff0 	.word	0x08006ff0
 800658c:	08006ff4 	.word	0x08006ff4

08006590 <__itoa>:
 8006590:	1e93      	subs	r3, r2, #2
 8006592:	2b22      	cmp	r3, #34	; 0x22
 8006594:	b510      	push	{r4, lr}
 8006596:	460c      	mov	r4, r1
 8006598:	d904      	bls.n	80065a4 <__itoa+0x14>
 800659a:	2300      	movs	r3, #0
 800659c:	461c      	mov	r4, r3
 800659e:	700b      	strb	r3, [r1, #0]
 80065a0:	4620      	mov	r0, r4
 80065a2:	bd10      	pop	{r4, pc}
 80065a4:	2a0a      	cmp	r2, #10
 80065a6:	d109      	bne.n	80065bc <__itoa+0x2c>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	da07      	bge.n	80065bc <__itoa+0x2c>
 80065ac:	232d      	movs	r3, #45	; 0x2d
 80065ae:	700b      	strb	r3, [r1, #0]
 80065b0:	2101      	movs	r1, #1
 80065b2:	4240      	negs	r0, r0
 80065b4:	4421      	add	r1, r4
 80065b6:	f000 f821 	bl	80065fc <__utoa>
 80065ba:	e7f1      	b.n	80065a0 <__itoa+0x10>
 80065bc:	2100      	movs	r1, #0
 80065be:	e7f9      	b.n	80065b4 <__itoa+0x24>

080065c0 <itoa>:
 80065c0:	f7ff bfe6 	b.w	8006590 <__itoa>

080065c4 <memset>:
 80065c4:	4603      	mov	r3, r0
 80065c6:	4402      	add	r2, r0
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d100      	bne.n	80065ce <memset+0xa>
 80065cc:	4770      	bx	lr
 80065ce:	f803 1b01 	strb.w	r1, [r3], #1
 80065d2:	e7f9      	b.n	80065c8 <memset+0x4>

080065d4 <strncpy>:
 80065d4:	4603      	mov	r3, r0
 80065d6:	b510      	push	{r4, lr}
 80065d8:	3901      	subs	r1, #1
 80065da:	b132      	cbz	r2, 80065ea <strncpy+0x16>
 80065dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80065e0:	3a01      	subs	r2, #1
 80065e2:	f803 4b01 	strb.w	r4, [r3], #1
 80065e6:	2c00      	cmp	r4, #0
 80065e8:	d1f7      	bne.n	80065da <strncpy+0x6>
 80065ea:	2100      	movs	r1, #0
 80065ec:	441a      	add	r2, r3
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d100      	bne.n	80065f4 <strncpy+0x20>
 80065f2:	bd10      	pop	{r4, pc}
 80065f4:	f803 1b01 	strb.w	r1, [r3], #1
 80065f8:	e7f9      	b.n	80065ee <strncpy+0x1a>
	...

080065fc <__utoa>:
 80065fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065fe:	b08b      	sub	sp, #44	; 0x2c
 8006600:	4605      	mov	r5, r0
 8006602:	460b      	mov	r3, r1
 8006604:	466e      	mov	r6, sp
 8006606:	4c1d      	ldr	r4, [pc, #116]	; (800667c <__utoa+0x80>)
 8006608:	f104 0c20 	add.w	ip, r4, #32
 800660c:	4637      	mov	r7, r6
 800660e:	6820      	ldr	r0, [r4, #0]
 8006610:	6861      	ldr	r1, [r4, #4]
 8006612:	3408      	adds	r4, #8
 8006614:	c703      	stmia	r7!, {r0, r1}
 8006616:	4564      	cmp	r4, ip
 8006618:	463e      	mov	r6, r7
 800661a:	d1f7      	bne.n	800660c <__utoa+0x10>
 800661c:	7921      	ldrb	r1, [r4, #4]
 800661e:	6820      	ldr	r0, [r4, #0]
 8006620:	7139      	strb	r1, [r7, #4]
 8006622:	1e91      	subs	r1, r2, #2
 8006624:	2922      	cmp	r1, #34	; 0x22
 8006626:	6038      	str	r0, [r7, #0]
 8006628:	f04f 0100 	mov.w	r1, #0
 800662c:	d904      	bls.n	8006638 <__utoa+0x3c>
 800662e:	7019      	strb	r1, [r3, #0]
 8006630:	460b      	mov	r3, r1
 8006632:	4618      	mov	r0, r3
 8006634:	b00b      	add	sp, #44	; 0x2c
 8006636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006638:	1e58      	subs	r0, r3, #1
 800663a:	4684      	mov	ip, r0
 800663c:	fbb5 f7f2 	udiv	r7, r5, r2
 8006640:	fb02 5617 	mls	r6, r2, r7, r5
 8006644:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006648:	4476      	add	r6, lr
 800664a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800664e:	460c      	mov	r4, r1
 8006650:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006654:	462e      	mov	r6, r5
 8006656:	42b2      	cmp	r2, r6
 8006658:	463d      	mov	r5, r7
 800665a:	f101 0101 	add.w	r1, r1, #1
 800665e:	d9ed      	bls.n	800663c <__utoa+0x40>
 8006660:	2200      	movs	r2, #0
 8006662:	545a      	strb	r2, [r3, r1]
 8006664:	1919      	adds	r1, r3, r4
 8006666:	1aa5      	subs	r5, r4, r2
 8006668:	42aa      	cmp	r2, r5
 800666a:	dae2      	bge.n	8006632 <__utoa+0x36>
 800666c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006670:	780e      	ldrb	r6, [r1, #0]
 8006672:	3201      	adds	r2, #1
 8006674:	7006      	strb	r6, [r0, #0]
 8006676:	f801 5901 	strb.w	r5, [r1], #-1
 800667a:	e7f4      	b.n	8006666 <__utoa+0x6a>
 800667c:	08006fc8 	.word	0x08006fc8

08006680 <_init>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	bf00      	nop
 8006684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006686:	bc08      	pop	{r3}
 8006688:	469e      	mov	lr, r3
 800668a:	4770      	bx	lr

0800668c <_fini>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	bf00      	nop
 8006690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006692:	bc08      	pop	{r3}
 8006694:	469e      	mov	lr, r3
 8006696:	4770      	bx	lr
