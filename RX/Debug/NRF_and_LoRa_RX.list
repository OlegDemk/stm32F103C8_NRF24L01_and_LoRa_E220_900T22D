
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000097c  080085c8  080085c8  000185c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f44  08008f44  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08008f44  08008f44  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f44  08008f44  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f44  08008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f48  08008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08008f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  200000ac  08008ff8  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  08008ff8  00020964  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185a9  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003287  00000000  00000000  0003867e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  0003b908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bd7  00000000  00000000  0003df70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bb3  00000000  00000000  00057b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000905b6  00000000  00000000  000706fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100cb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058cc  00000000  00000000  00100d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	080085b0 	.word	0x080085b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	080085b0 	.word	0x080085b0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_d2f>:
 80004d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004dc:	bf24      	itt	cs
 80004de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004e6:	d90d      	bls.n	8000504 <__aeabi_d2f+0x30>
 80004e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004fc:	bf08      	it	eq
 80004fe:	f020 0001 	biceq.w	r0, r0, #1
 8000502:	4770      	bx	lr
 8000504:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000508:	d121      	bne.n	800054e <__aeabi_d2f+0x7a>
 800050a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800050e:	bfbc      	itt	lt
 8000510:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000514:	4770      	bxlt	lr
 8000516:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800051a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800051e:	f1c2 0218 	rsb	r2, r2, #24
 8000522:	f1c2 0c20 	rsb	ip, r2, #32
 8000526:	fa10 f30c 	lsls.w	r3, r0, ip
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	bf18      	it	ne
 8000530:	f040 0001 	orrne.w	r0, r0, #1
 8000534:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000538:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800053c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000540:	ea40 000c 	orr.w	r0, r0, ip
 8000544:	fa23 f302 	lsr.w	r3, r3, r2
 8000548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800054c:	e7cc      	b.n	80004e8 <__aeabi_d2f+0x14>
 800054e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000552:	d107      	bne.n	8000564 <__aeabi_d2f+0x90>
 8000554:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000558:	bf1e      	ittt	ne
 800055a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800055e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000562:	4770      	bxne	lr
 8000564:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000568:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800056c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__aeabi_frsub>:
 8000574:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000578:	e002      	b.n	8000580 <__addsf3>
 800057a:	bf00      	nop

0800057c <__aeabi_fsub>:
 800057c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000580 <__addsf3>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	bf1f      	itttt	ne
 8000584:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000588:	ea92 0f03 	teqne	r2, r3
 800058c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000590:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000594:	d06a      	beq.n	800066c <__addsf3+0xec>
 8000596:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800059a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800059e:	bfc1      	itttt	gt
 80005a0:	18d2      	addgt	r2, r2, r3
 80005a2:	4041      	eorgt	r1, r0
 80005a4:	4048      	eorgt	r0, r1
 80005a6:	4041      	eorgt	r1, r0
 80005a8:	bfb8      	it	lt
 80005aa:	425b      	neglt	r3, r3
 80005ac:	2b19      	cmp	r3, #25
 80005ae:	bf88      	it	hi
 80005b0:	4770      	bxhi	lr
 80005b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005be:	bf18      	it	ne
 80005c0:	4240      	negne	r0, r0
 80005c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ce:	bf18      	it	ne
 80005d0:	4249      	negne	r1, r1
 80005d2:	ea92 0f03 	teq	r2, r3
 80005d6:	d03f      	beq.n	8000658 <__addsf3+0xd8>
 80005d8:	f1a2 0201 	sub.w	r2, r2, #1
 80005dc:	fa41 fc03 	asr.w	ip, r1, r3
 80005e0:	eb10 000c 	adds.w	r0, r0, ip
 80005e4:	f1c3 0320 	rsb	r3, r3, #32
 80005e8:	fa01 f103 	lsl.w	r1, r1, r3
 80005ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005f0:	d502      	bpl.n	80005f8 <__addsf3+0x78>
 80005f2:	4249      	negs	r1, r1
 80005f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005fc:	d313      	bcc.n	8000626 <__addsf3+0xa6>
 80005fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000602:	d306      	bcc.n	8000612 <__addsf3+0x92>
 8000604:	0840      	lsrs	r0, r0, #1
 8000606:	ea4f 0131 	mov.w	r1, r1, rrx
 800060a:	f102 0201 	add.w	r2, r2, #1
 800060e:	2afe      	cmp	r2, #254	; 0xfe
 8000610:	d251      	bcs.n	80006b6 <__addsf3+0x136>
 8000612:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000616:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800061a:	bf08      	it	eq
 800061c:	f020 0001 	biceq.w	r0, r0, #1
 8000620:	ea40 0003 	orr.w	r0, r0, r3
 8000624:	4770      	bx	lr
 8000626:	0049      	lsls	r1, r1, #1
 8000628:	eb40 0000 	adc.w	r0, r0, r0
 800062c:	3a01      	subs	r2, #1
 800062e:	bf28      	it	cs
 8000630:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000634:	d2ed      	bcs.n	8000612 <__addsf3+0x92>
 8000636:	fab0 fc80 	clz	ip, r0
 800063a:	f1ac 0c08 	sub.w	ip, ip, #8
 800063e:	ebb2 020c 	subs.w	r2, r2, ip
 8000642:	fa00 f00c 	lsl.w	r0, r0, ip
 8000646:	bfaa      	itet	ge
 8000648:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800064c:	4252      	neglt	r2, r2
 800064e:	4318      	orrge	r0, r3
 8000650:	bfbc      	itt	lt
 8000652:	40d0      	lsrlt	r0, r2
 8000654:	4318      	orrlt	r0, r3
 8000656:	4770      	bx	lr
 8000658:	f092 0f00 	teq	r2, #0
 800065c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000660:	bf06      	itte	eq
 8000662:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000666:	3201      	addeq	r2, #1
 8000668:	3b01      	subne	r3, #1
 800066a:	e7b5      	b.n	80005d8 <__addsf3+0x58>
 800066c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000670:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000674:	bf18      	it	ne
 8000676:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800067a:	d021      	beq.n	80006c0 <__addsf3+0x140>
 800067c:	ea92 0f03 	teq	r2, r3
 8000680:	d004      	beq.n	800068c <__addsf3+0x10c>
 8000682:	f092 0f00 	teq	r2, #0
 8000686:	bf08      	it	eq
 8000688:	4608      	moveq	r0, r1
 800068a:	4770      	bx	lr
 800068c:	ea90 0f01 	teq	r0, r1
 8000690:	bf1c      	itt	ne
 8000692:	2000      	movne	r0, #0
 8000694:	4770      	bxne	lr
 8000696:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800069a:	d104      	bne.n	80006a6 <__addsf3+0x126>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	bf28      	it	cs
 80006a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006a4:	4770      	bx	lr
 80006a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006aa:	bf3c      	itt	cc
 80006ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006b0:	4770      	bxcc	lr
 80006b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006be:	4770      	bx	lr
 80006c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006c4:	bf16      	itet	ne
 80006c6:	4608      	movne	r0, r1
 80006c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006cc:	4601      	movne	r1, r0
 80006ce:	0242      	lsls	r2, r0, #9
 80006d0:	bf06      	itte	eq
 80006d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006d6:	ea90 0f01 	teqeq	r0, r1
 80006da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006de:	4770      	bx	lr

080006e0 <__aeabi_ui2f>:
 80006e0:	f04f 0300 	mov.w	r3, #0
 80006e4:	e004      	b.n	80006f0 <__aeabi_i2f+0x8>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2f>:
 80006e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006ec:	bf48      	it	mi
 80006ee:	4240      	negmi	r0, r0
 80006f0:	ea5f 0c00 	movs.w	ip, r0
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006fc:	4601      	mov	r1, r0
 80006fe:	f04f 0000 	mov.w	r0, #0
 8000702:	e01c      	b.n	800073e <__aeabi_l2f+0x2a>

08000704 <__aeabi_ul2f>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	f04f 0300 	mov.w	r3, #0
 8000710:	e00a      	b.n	8000728 <__aeabi_l2f+0x14>
 8000712:	bf00      	nop

08000714 <__aeabi_l2f>:
 8000714:	ea50 0201 	orrs.w	r2, r0, r1
 8000718:	bf08      	it	eq
 800071a:	4770      	bxeq	lr
 800071c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000720:	d502      	bpl.n	8000728 <__aeabi_l2f+0x14>
 8000722:	4240      	negs	r0, r0
 8000724:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000728:	ea5f 0c01 	movs.w	ip, r1
 800072c:	bf02      	ittt	eq
 800072e:	4684      	moveq	ip, r0
 8000730:	4601      	moveq	r1, r0
 8000732:	2000      	moveq	r0, #0
 8000734:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000738:	bf08      	it	eq
 800073a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800073e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000742:	fabc f28c 	clz	r2, ip
 8000746:	3a08      	subs	r2, #8
 8000748:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800074c:	db10      	blt.n	8000770 <__aeabi_l2f+0x5c>
 800074e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000752:	4463      	add	r3, ip
 8000754:	fa00 fc02 	lsl.w	ip, r0, r2
 8000758:	f1c2 0220 	rsb	r2, r2, #32
 800075c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000760:	fa20 f202 	lsr.w	r2, r0, r2
 8000764:	eb43 0002 	adc.w	r0, r3, r2
 8000768:	bf08      	it	eq
 800076a:	f020 0001 	biceq.w	r0, r0, #1
 800076e:	4770      	bx	lr
 8000770:	f102 0220 	add.w	r2, r2, #32
 8000774:	fa01 fc02 	lsl.w	ip, r1, r2
 8000778:	f1c2 0220 	rsb	r2, r2, #32
 800077c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000780:	fa21 f202 	lsr.w	r2, r1, r2
 8000784:	eb43 0002 	adc.w	r0, r3, r2
 8000788:	bf08      	it	eq
 800078a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800078e:	4770      	bx	lr

08000790 <__aeabi_fmul>:
 8000790:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000794:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000798:	bf1e      	ittt	ne
 800079a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800079e:	ea92 0f0c 	teqne	r2, ip
 80007a2:	ea93 0f0c 	teqne	r3, ip
 80007a6:	d06f      	beq.n	8000888 <__aeabi_fmul+0xf8>
 80007a8:	441a      	add	r2, r3
 80007aa:	ea80 0c01 	eor.w	ip, r0, r1
 80007ae:	0240      	lsls	r0, r0, #9
 80007b0:	bf18      	it	ne
 80007b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007b6:	d01e      	beq.n	80007f6 <__aeabi_fmul+0x66>
 80007b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007c4:	fba0 3101 	umull	r3, r1, r0, r1
 80007c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007d0:	bf3e      	ittt	cc
 80007d2:	0049      	lslcc	r1, r1, #1
 80007d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007d8:	005b      	lslcc	r3, r3, #1
 80007da:	ea40 0001 	orr.w	r0, r0, r1
 80007de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007e2:	2afd      	cmp	r2, #253	; 0xfd
 80007e4:	d81d      	bhi.n	8000822 <__aeabi_fmul+0x92>
 80007e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ee:	bf08      	it	eq
 80007f0:	f020 0001 	biceq.w	r0, r0, #1
 80007f4:	4770      	bx	lr
 80007f6:	f090 0f00 	teq	r0, #0
 80007fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007fe:	bf08      	it	eq
 8000800:	0249      	lsleq	r1, r1, #9
 8000802:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000806:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800080a:	3a7f      	subs	r2, #127	; 0x7f
 800080c:	bfc2      	ittt	gt
 800080e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000812:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000816:	4770      	bxgt	lr
 8000818:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	3a01      	subs	r2, #1
 8000822:	dc5d      	bgt.n	80008e0 <__aeabi_fmul+0x150>
 8000824:	f112 0f19 	cmn.w	r2, #25
 8000828:	bfdc      	itt	le
 800082a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800082e:	4770      	bxle	lr
 8000830:	f1c2 0200 	rsb	r2, r2, #0
 8000834:	0041      	lsls	r1, r0, #1
 8000836:	fa21 f102 	lsr.w	r1, r1, r2
 800083a:	f1c2 0220 	rsb	r2, r2, #32
 800083e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000842:	ea5f 0031 	movs.w	r0, r1, rrx
 8000846:	f140 0000 	adc.w	r0, r0, #0
 800084a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800084e:	bf08      	it	eq
 8000850:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000854:	4770      	bx	lr
 8000856:	f092 0f00 	teq	r2, #0
 800085a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800085e:	bf02      	ittt	eq
 8000860:	0040      	lsleq	r0, r0, #1
 8000862:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000866:	3a01      	subeq	r2, #1
 8000868:	d0f9      	beq.n	800085e <__aeabi_fmul+0xce>
 800086a:	ea40 000c 	orr.w	r0, r0, ip
 800086e:	f093 0f00 	teq	r3, #0
 8000872:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000876:	bf02      	ittt	eq
 8000878:	0049      	lsleq	r1, r1, #1
 800087a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800087e:	3b01      	subeq	r3, #1
 8000880:	d0f9      	beq.n	8000876 <__aeabi_fmul+0xe6>
 8000882:	ea41 010c 	orr.w	r1, r1, ip
 8000886:	e78f      	b.n	80007a8 <__aeabi_fmul+0x18>
 8000888:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800088c:	ea92 0f0c 	teq	r2, ip
 8000890:	bf18      	it	ne
 8000892:	ea93 0f0c 	teqne	r3, ip
 8000896:	d00a      	beq.n	80008ae <__aeabi_fmul+0x11e>
 8000898:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800089c:	bf18      	it	ne
 800089e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008a2:	d1d8      	bne.n	8000856 <__aeabi_fmul+0xc6>
 80008a4:	ea80 0001 	eor.w	r0, r0, r1
 80008a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008ac:	4770      	bx	lr
 80008ae:	f090 0f00 	teq	r0, #0
 80008b2:	bf17      	itett	ne
 80008b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008b8:	4608      	moveq	r0, r1
 80008ba:	f091 0f00 	teqne	r1, #0
 80008be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008c2:	d014      	beq.n	80008ee <__aeabi_fmul+0x15e>
 80008c4:	ea92 0f0c 	teq	r2, ip
 80008c8:	d101      	bne.n	80008ce <__aeabi_fmul+0x13e>
 80008ca:	0242      	lsls	r2, r0, #9
 80008cc:	d10f      	bne.n	80008ee <__aeabi_fmul+0x15e>
 80008ce:	ea93 0f0c 	teq	r3, ip
 80008d2:	d103      	bne.n	80008dc <__aeabi_fmul+0x14c>
 80008d4:	024b      	lsls	r3, r1, #9
 80008d6:	bf18      	it	ne
 80008d8:	4608      	movne	r0, r1
 80008da:	d108      	bne.n	80008ee <__aeabi_fmul+0x15e>
 80008dc:	ea80 0001 	eor.w	r0, r0, r1
 80008e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008ec:	4770      	bx	lr
 80008ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008f6:	4770      	bx	lr

080008f8 <__aeabi_fdiv>:
 80008f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000900:	bf1e      	ittt	ne
 8000902:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000906:	ea92 0f0c 	teqne	r2, ip
 800090a:	ea93 0f0c 	teqne	r3, ip
 800090e:	d069      	beq.n	80009e4 <__aeabi_fdiv+0xec>
 8000910:	eba2 0203 	sub.w	r2, r2, r3
 8000914:	ea80 0c01 	eor.w	ip, r0, r1
 8000918:	0249      	lsls	r1, r1, #9
 800091a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800091e:	d037      	beq.n	8000990 <__aeabi_fdiv+0x98>
 8000920:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000924:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000928:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800092c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000930:	428b      	cmp	r3, r1
 8000932:	bf38      	it	cc
 8000934:	005b      	lslcc	r3, r3, #1
 8000936:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800093a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800093e:	428b      	cmp	r3, r1
 8000940:	bf24      	itt	cs
 8000942:	1a5b      	subcs	r3, r3, r1
 8000944:	ea40 000c 	orrcs.w	r0, r0, ip
 8000948:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800094c:	bf24      	itt	cs
 800094e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000952:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000956:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800095a:	bf24      	itt	cs
 800095c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000968:	bf24      	itt	cs
 800096a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800096e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	bf18      	it	ne
 8000976:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800097a:	d1e0      	bne.n	800093e <__aeabi_fdiv+0x46>
 800097c:	2afd      	cmp	r2, #253	; 0xfd
 800097e:	f63f af50 	bhi.w	8000822 <__aeabi_fmul+0x92>
 8000982:	428b      	cmp	r3, r1
 8000984:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000988:	bf08      	it	eq
 800098a:	f020 0001 	biceq.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000994:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000998:	327f      	adds	r2, #127	; 0x7f
 800099a:	bfc2      	ittt	gt
 800099c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009a4:	4770      	bxgt	lr
 80009a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	3a01      	subs	r2, #1
 80009b0:	e737      	b.n	8000822 <__aeabi_fmul+0x92>
 80009b2:	f092 0f00 	teq	r2, #0
 80009b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ba:	bf02      	ittt	eq
 80009bc:	0040      	lsleq	r0, r0, #1
 80009be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009c2:	3a01      	subeq	r2, #1
 80009c4:	d0f9      	beq.n	80009ba <__aeabi_fdiv+0xc2>
 80009c6:	ea40 000c 	orr.w	r0, r0, ip
 80009ca:	f093 0f00 	teq	r3, #0
 80009ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d2:	bf02      	ittt	eq
 80009d4:	0049      	lsleq	r1, r1, #1
 80009d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009da:	3b01      	subeq	r3, #1
 80009dc:	d0f9      	beq.n	80009d2 <__aeabi_fdiv+0xda>
 80009de:	ea41 010c 	orr.w	r1, r1, ip
 80009e2:	e795      	b.n	8000910 <__aeabi_fdiv+0x18>
 80009e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009e8:	ea92 0f0c 	teq	r2, ip
 80009ec:	d108      	bne.n	8000a00 <__aeabi_fdiv+0x108>
 80009ee:	0242      	lsls	r2, r0, #9
 80009f0:	f47f af7d 	bne.w	80008ee <__aeabi_fmul+0x15e>
 80009f4:	ea93 0f0c 	teq	r3, ip
 80009f8:	f47f af70 	bne.w	80008dc <__aeabi_fmul+0x14c>
 80009fc:	4608      	mov	r0, r1
 80009fe:	e776      	b.n	80008ee <__aeabi_fmul+0x15e>
 8000a00:	ea93 0f0c 	teq	r3, ip
 8000a04:	d104      	bne.n	8000a10 <__aeabi_fdiv+0x118>
 8000a06:	024b      	lsls	r3, r1, #9
 8000a08:	f43f af4c 	beq.w	80008a4 <__aeabi_fmul+0x114>
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	e76e      	b.n	80008ee <__aeabi_fmul+0x15e>
 8000a10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a14:	bf18      	it	ne
 8000a16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a1a:	d1ca      	bne.n	80009b2 <__aeabi_fdiv+0xba>
 8000a1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a20:	f47f af5c 	bne.w	80008dc <__aeabi_fmul+0x14c>
 8000a24:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a28:	f47f af3c 	bne.w	80008a4 <__aeabi_fmul+0x114>
 8000a2c:	e75f      	b.n	80008ee <__aeabi_fmul+0x15e>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_f2iz>:
 8000a30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a38:	d30f      	bcc.n	8000a5a <__aeabi_f2iz+0x2a>
 8000a3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a42:	d90d      	bls.n	8000a60 <__aeabi_f2iz+0x30>
 8000a44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a50:	fa23 f002 	lsr.w	r0, r3, r2
 8000a54:	bf18      	it	ne
 8000a56:	4240      	negne	r0, r0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0000 	mov.w	r0, #0
 8000a5e:	4770      	bx	lr
 8000a60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a64:	d101      	bne.n	8000a6a <__aeabi_f2iz+0x3a>
 8000a66:	0242      	lsls	r2, r0, #9
 8000a68:	d105      	bne.n	8000a76 <__aeabi_f2iz+0x46>
 8000a6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a6e:	bf08      	it	eq
 8000a70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <LoRa_RX>:
extern bool flag_command_received;			// Flag show status receive data (completed/not completed)
extern char uart_rx_data[50];				// Main rx buffer data

//----------------------------------------------------------------------------------------
void LoRa_RX(bool flag)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	char str_1[20] = {0};
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init)
 8000a98:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <LoRa_RX+0x124>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d02d      	beq.n	8000afc <LoRa_RX+0x80>
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d02a      	beq.n	8000afc <LoRa_RX+0x80>
	{
		// state_machine
		HAL_Delay(100);
 8000aa6:	2064      	movs	r0, #100	; 0x64
 8000aa8:	f003 fd5c 	bl	8004564 <HAL_Delay>
		init_lora_RX();
 8000aac:	f000 fa1e 	bl	8000eec <init_lora_RX>
		HAL_Delay(500);
 8000ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab4:	f003 fd56 	bl	8004564 <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000ab8:	2110      	movs	r1, #16
 8000aba:	2000      	movs	r0, #0
 8000abc:	f001 f9f4 	bl	8001ea8 <ssd1306_SetCursor>
		strcpy(str_1, "RX data: ");
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4a37      	ldr	r2, [pc, #220]	; (8000ba4 <LoRa_RX+0x128>)
 8000ac6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ac8:	c303      	stmia	r3!, {r0, r1}
 8000aca:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000acc:	4a36      	ldr	r2, [pc, #216]	; (8000ba8 <LoRa_RX+0x12c>)
 8000ace:	f107 0014 	add.w	r0, r7, #20
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	ca06      	ldmia	r2, {r1, r2}
 8000ad6:	f001 f9c1 	bl	8001e5c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000ada:	f001 f8af 	bl	8001c3c <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4932      	ldr	r1, [pc, #200]	; (8000bac <LoRa_RX+0x130>)
 8000ae2:	4833      	ldr	r0, [pc, #204]	; (8000bb0 <LoRa_RX+0x134>)
 8000ae4:	f006 fc63 	bl	80073ae <HAL_UART_Receive_IT>
		memset(str_1, 0, sizeof(str_1));
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2214      	movs	r2, #20
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f007 f8bd 	bl	8007c70 <memset>
		flag_first_time = false;
 8000af6:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <LoRa_RX+0x124>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Do it when data was received
 8000afc:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <LoRa_RX+0x124>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	f083 0301 	eor.w	r3, r3, #1
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d03c      	beq.n	8000b84 <LoRa_RX+0x108>
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d039      	beq.n	8000b84 <LoRa_RX+0x108>
	{
		if(flag_command_received == true)							// If data is ready
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <LoRa_RX+0x138>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d035      	beq.n	8000b84 <LoRa_RX+0x108>
		{
			// Data receive
			// Clean data part on OLED
			char clearn_array[10] = "         ";
 8000b18:	4a27      	ldr	r2, [pc, #156]	; (8000bb8 <LoRa_RX+0x13c>)
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b20:	c303      	stmia	r3!, {r0, r1}
 8000b22:	801a      	strh	r2, [r3, #0]
			ssd1306_SetCursor(60, 16);
 8000b24:	2110      	movs	r1, #16
 8000b26:	203c      	movs	r0, #60	; 0x3c
 8000b28:	f001 f9be 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(clearn_array,  Font_7x10, White);
 8000b2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <LoRa_RX+0x12c>)
 8000b2e:	f107 0008 	add.w	r0, r7, #8
 8000b32:	2301      	movs	r3, #1
 8000b34:	ca06      	ldmia	r2, {r1, r2}
 8000b36:	f001 f991 	bl	8001e5c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000b3a:	f001 f87f 	bl	8001c3c <ssd1306_UpdateScreen>

			// Print received data
			ssd1306_SetCursor(60, 16);
 8000b3e:	2110      	movs	r1, #16
 8000b40:	203c      	movs	r0, #60	; 0x3c
 8000b42:	f001 f9b1 	bl	8001ea8 <ssd1306_SetCursor>
			strcpy(str_1, uart_rx_data);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	491c      	ldr	r1, [pc, #112]	; (8000bbc <LoRa_RX+0x140>)
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f007 f97c 	bl	8007e4a <strcpy>
			ssd1306_WriteString(str_1,  Font_7x10, White);
 8000b52:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <LoRa_RX+0x12c>)
 8000b54:	f107 0014 	add.w	r0, r7, #20
 8000b58:	2301      	movs	r3, #1
 8000b5a:	ca06      	ldmia	r2, {r1, r2}
 8000b5c:	f001 f97e 	bl	8001e5c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000b60:	f001 f86c 	bl	8001c3c <ssd1306_UpdateScreen>

			HAL_Delay(100);
 8000b64:	2064      	movs	r0, #100	; 0x64
 8000b66:	f003 fcfd 	bl	8004564 <HAL_Delay>
			memset(uart_rx_data, 0, sizeof(uart_rx_data));
 8000b6a:	2232      	movs	r2, #50	; 0x32
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4813      	ldr	r0, [pc, #76]	; (8000bbc <LoRa_RX+0x140>)
 8000b70:	f007 f87e 	bl	8007c70 <memset>
			flag_command_received = false;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <LoRa_RX+0x138>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart1, str, 1);					// Start interrupt again
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	490b      	ldr	r1, [pc, #44]	; (8000bac <LoRa_RX+0x130>)
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <LoRa_RX+0x134>)
 8000b80:	f006 fc15 	bl	80073ae <HAL_UART_Receive_IT>
		}
	}
	if(flag == false)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f083 0301 	eor.w	r3, r3, #1
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d002      	beq.n	8000b96 <LoRa_RX+0x11a>
	{
		flag_first_time = true;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <LoRa_RX+0x124>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
	}
}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	080085c8 	.word	0x080085c8
 8000ba8:	20000014 	.word	0x20000014
 8000bac:	20000588 	.word	0x20000588
 8000bb0:	20000650 	.word	0x20000650
 8000bb4:	20000589 	.word	0x20000589
 8000bb8:	080085d4 	.word	0x080085d4
 8000bbc:	20000554 	.word	0x20000554

08000bc0 <LoRa_TX>:
//----------------------------------------------------------------------------------------
void LoRa_TX(bool flag)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	static int transmit_count = 0;									// Variable for transmit
	char str_1[20] = {0};
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init)
 8000bdc:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <LoRa_TX+0xfc>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d026      	beq.n	8000c32 <LoRa_TX+0x72>
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d023      	beq.n	8000c32 <LoRa_TX+0x72>
	{
		HAL_Delay(100);
 8000bea:	2064      	movs	r0, #100	; 0x64
 8000bec:	f003 fcba 	bl	8004564 <HAL_Delay>
		init_lora_TX();
 8000bf0:	f000 f934 	bl	8000e5c <init_lora_TX>
		HAL_Delay(500);
 8000bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf8:	f003 fcb4 	bl	8004564 <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f001 f952 	bl	8001ea8 <ssd1306_SetCursor>
		strcpy(str_1, "TX data: ");
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	4a2d      	ldr	r2, [pc, #180]	; (8000cc0 <LoRa_TX+0x100>)
 8000c0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c0c:	c303      	stmia	r3!, {r0, r1}
 8000c0e:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000c10:	4a2c      	ldr	r2, [pc, #176]	; (8000cc4 <LoRa_TX+0x104>)
 8000c12:	f107 0008 	add.w	r0, r7, #8
 8000c16:	2301      	movs	r3, #1
 8000c18:	ca06      	ldmia	r2, {r1, r2}
 8000c1a:	f001 f91f 	bl	8001e5c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000c1e:	f001 f80d 	bl	8001c3c <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 8000c22:	2201      	movs	r2, #1
 8000c24:	4928      	ldr	r1, [pc, #160]	; (8000cc8 <LoRa_TX+0x108>)
 8000c26:	4829      	ldr	r0, [pc, #164]	; (8000ccc <LoRa_TX+0x10c>)
 8000c28:	f006 fbc1 	bl	80073ae <HAL_UART_Receive_IT>
		flag_first_time = false;
 8000c2c:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <LoRa_TX+0xfc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Repeat it part for transmit data
 8000c32:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <LoRa_TX+0xfc>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	f083 0301 	eor.w	r3, r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d02c      	beq.n	8000c9a <LoRa_TX+0xda>
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d029      	beq.n	8000c9a <LoRa_TX+0xda>
	{
		int count = lora_transmit_data(transmit_count);
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <LoRa_TX+0x110>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f844 	bl	8000cd8 <lora_transmit_data>
 8000c50:	61f8      	str	r0, [r7, #28]
		transmit_count ++;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <LoRa_TX+0x110>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <LoRa_TX+0x110>)
 8000c5a:	6013      	str	r3, [r2, #0]
		// Print transmeeting data
		memset(str_1, 0, sizeof(str_1));
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	2214      	movs	r2, #20
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f007 f803 	bl	8007c70 <memset>
		ssd1306_SetCursor(60, 16);
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	203c      	movs	r0, #60	; 0x3c
 8000c6e:	f001 f91b 	bl	8001ea8 <ssd1306_SetCursor>
		sprintf(str_1, "%d", count);
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	4916      	ldr	r1, [pc, #88]	; (8000cd4 <LoRa_TX+0x114>)
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f007 f8b6 	bl	8007dec <siprintf>
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000c80:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <LoRa_TX+0x104>)
 8000c82:	f107 0008 	add.w	r0, r7, #8
 8000c86:	2301      	movs	r3, #1
 8000c88:	ca06      	ldmia	r2, {r1, r2}
 8000c8a:	f001 f8e7 	bl	8001e5c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000c8e:	f000 ffd5 	bl	8001c3c <ssd1306_UpdateScreen>

		HAL_Delay(2000);											// Must be more than 1.5 sec
 8000c92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c96:	f003 fc65 	bl	8004564 <HAL_Delay>
	}
	if(flag == false)
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f083 0301 	eor.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d005      	beq.n	8000cb2 <LoRa_TX+0xf2>
	{
		flag_first_time = true;
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <LoRa_TX+0xfc>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
		transmit_count = 0;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <LoRa_TX+0x110>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	3720      	adds	r7, #32
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000001 	.word	0x20000001
 8000cc0:	080085e0 	.word	0x080085e0
 8000cc4:	20000014 	.word	0x20000014
 8000cc8:	20000588 	.word	0x20000588
 8000ccc:	20000650 	.word	0x20000650
 8000cd0:	200000c8 	.word	0x200000c8
 8000cd4:	080085ec 	.word	0x080085ec

08000cd8 <lora_transmit_data>:
//----------------------------------------------------------------------------------------
int lora_transmit_data(int transmit_count)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	static uint8_t data[10] = {0};

	data[5] = '0' + transmit_count%10;
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	4b48      	ldr	r3, [pc, #288]	; (8000e04 <lora_transmit_data+0x12c>)
 8000ce4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ce8:	1099      	asrs	r1, r3, #2
 8000cea:	17d3      	asrs	r3, r2, #31
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	460b      	mov	r3, r1
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	1ad1      	subs	r1, r2, r3
 8000cf8:	b2cb      	uxtb	r3, r1
 8000cfa:	3330      	adds	r3, #48	; 0x30
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b42      	ldr	r3, [pc, #264]	; (8000e08 <lora_transmit_data+0x130>)
 8000d00:	715a      	strb	r2, [r3, #5]
	data[4] = '0' + (transmit_count/10) % 10;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a3f      	ldr	r2, [pc, #252]	; (8000e04 <lora_transmit_data+0x12c>)
 8000d06:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0a:	1092      	asrs	r2, r2, #2
 8000d0c:	17db      	asrs	r3, r3, #31
 8000d0e:	1ad2      	subs	r2, r2, r3
 8000d10:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <lora_transmit_data+0x12c>)
 8000d12:	fb83 1302 	smull	r1, r3, r3, r2
 8000d16:	1099      	asrs	r1, r3, #2
 8000d18:	17d3      	asrs	r3, r2, #31
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	440b      	add	r3, r1
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	1ad1      	subs	r1, r2, r3
 8000d26:	b2cb      	uxtb	r3, r1
 8000d28:	3330      	adds	r3, #48	; 0x30
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <lora_transmit_data+0x130>)
 8000d2e:	711a      	strb	r2, [r3, #4]
	data[3] = '0' + (transmit_count/100) % 10;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a36      	ldr	r2, [pc, #216]	; (8000e0c <lora_transmit_data+0x134>)
 8000d34:	fb82 1203 	smull	r1, r2, r2, r3
 8000d38:	1152      	asrs	r2, r2, #5
 8000d3a:	17db      	asrs	r3, r3, #31
 8000d3c:	1ad2      	subs	r2, r2, r3
 8000d3e:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <lora_transmit_data+0x12c>)
 8000d40:	fb83 1302 	smull	r1, r3, r3, r2
 8000d44:	1099      	asrs	r1, r3, #2
 8000d46:	17d3      	asrs	r3, r2, #31
 8000d48:	1ac9      	subs	r1, r1, r3
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	1ad1      	subs	r1, r2, r3
 8000d54:	b2cb      	uxtb	r3, r1
 8000d56:	3330      	adds	r3, #48	; 0x30
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <lora_transmit_data+0x130>)
 8000d5c:	70da      	strb	r2, [r3, #3]
	data[2] = '0' + (transmit_count/1000) % 10;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a2b      	ldr	r2, [pc, #172]	; (8000e10 <lora_transmit_data+0x138>)
 8000d62:	fb82 1203 	smull	r1, r2, r2, r3
 8000d66:	1192      	asrs	r2, r2, #6
 8000d68:	17db      	asrs	r3, r3, #31
 8000d6a:	1ad2      	subs	r2, r2, r3
 8000d6c:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <lora_transmit_data+0x12c>)
 8000d6e:	fb83 1302 	smull	r1, r3, r3, r2
 8000d72:	1099      	asrs	r1, r3, #2
 8000d74:	17d3      	asrs	r3, r2, #31
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	460b      	mov	r3, r1
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	1ad1      	subs	r1, r2, r3
 8000d82:	b2cb      	uxtb	r3, r1
 8000d84:	3330      	adds	r3, #48	; 0x30
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <lora_transmit_data+0x130>)
 8000d8a:	709a      	strb	r2, [r3, #2]
	data[1] = '0' + (transmit_count/10000) % 10;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a21      	ldr	r2, [pc, #132]	; (8000e14 <lora_transmit_data+0x13c>)
 8000d90:	fb82 1203 	smull	r1, r2, r2, r3
 8000d94:	1312      	asrs	r2, r2, #12
 8000d96:	17db      	asrs	r3, r3, #31
 8000d98:	1ad2      	subs	r2, r2, r3
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <lora_transmit_data+0x12c>)
 8000d9c:	fb83 1302 	smull	r1, r3, r3, r2
 8000da0:	1099      	asrs	r1, r3, #2
 8000da2:	17d3      	asrs	r3, r2, #31
 8000da4:	1ac9      	subs	r1, r1, r3
 8000da6:	460b      	mov	r3, r1
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	440b      	add	r3, r1
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	1ad1      	subs	r1, r2, r3
 8000db0:	b2cb      	uxtb	r3, r1
 8000db2:	3330      	adds	r3, #48	; 0x30
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <lora_transmit_data+0x130>)
 8000db8:	705a      	strb	r2, [r3, #1]
	data[0] = '0' + (transmit_count/100000) % 10;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a16      	ldr	r2, [pc, #88]	; (8000e18 <lora_transmit_data+0x140>)
 8000dbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc2:	1352      	asrs	r2, r2, #13
 8000dc4:	17db      	asrs	r3, r3, #31
 8000dc6:	1ad2      	subs	r2, r2, r3
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <lora_transmit_data+0x12c>)
 8000dca:	fb83 1302 	smull	r1, r3, r3, r2
 8000dce:	1099      	asrs	r1, r3, #2
 8000dd0:	17d3      	asrs	r3, r2, #31
 8000dd2:	1ac9      	subs	r1, r1, r3
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	1ad1      	subs	r1, r2, r3
 8000dde:	b2cb      	uxtb	r3, r1
 8000de0:	3330      	adds	r3, #48	; 0x30
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <lora_transmit_data+0x130>)
 8000de6:	701a      	strb	r2, [r3, #0]
	data[6] = '\0';
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <lora_transmit_data+0x130>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit_IT(&huart1, data, 7);
 8000dee:	2207      	movs	r2, #7
 8000df0:	4905      	ldr	r1, [pc, #20]	; (8000e08 <lora_transmit_data+0x130>)
 8000df2:	480a      	ldr	r0, [pc, #40]	; (8000e1c <lora_transmit_data+0x144>)
 8000df4:	f006 fa97 	bl	8007326 <HAL_UART_Transmit_IT>

	return transmit_count;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	66666667 	.word	0x66666667
 8000e08:	200000cc 	.word	0x200000cc
 8000e0c:	51eb851f 	.word	0x51eb851f
 8000e10:	10624dd3 	.word	0x10624dd3
 8000e14:	68db8bad 	.word	0x68db8bad
 8000e18:	14f8b589 	.word	0x14f8b589
 8000e1c:	20000650 	.word	0x20000650

08000e20 <read_all_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_all_settings_from_module(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 8000e24:	f000 f8c8 	bl	8000fb8 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 8000e28:	200a      	movs	r0, #10
 8000e2a:	f003 fb9b 	bl	8004564 <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;			// 0xC1 - Read register command
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <read_all_settings_from_module+0x34>)
 8000e30:	22c1      	movs	r2, #193	; 0xc1
 8000e32:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;			// Number of register for read
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <read_all_settings_from_module+0x34>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;			// How many registers must be read
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <read_all_settings_from_module+0x34>)
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 8000e40:	2203      	movs	r2, #3
 8000e42:	4904      	ldr	r1, [pc, #16]	; (8000e54 <read_all_settings_from_module+0x34>)
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <read_all_settings_from_module+0x38>)
 8000e46:	f006 fa6e 	bl	8007326 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000e4a:	2064      	movs	r0, #100	; 0x64
 8000e4c:	f003 fb8a 	bl	8004564 <HAL_Delay>

	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000d8 	.word	0x200000d8
 8000e58:	20000650 	.word	0x20000650

08000e5c <init_lora_TX>:
//----------------------------------------------------------------------------------------
bool init_lora_TX(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	// з зчитаними даними конфіг регістрів. Якщо співпадає повністю, тоді записати в
	// глобальну змінну що модуль ініціалізований нормально

	static uint8_t data[10] = {0};

	set_config_deep_sleep_mode();
 8000e60:	f000 f8aa 	bl	8000fb8 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 8000e64:	2064      	movs	r0, #100	; 0x64
 8000e66:	f003 fb7d 	bl	8004564 <HAL_Delay>

	// Init module
	// Descripe settings structure
	data[0] = 0xC0;		// 0xC0 - Set register command
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <init_lora_TX+0x88>)
 8000e6c:	22c0      	movs	r2, #192	; 0xc0
 8000e6e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <init_lora_TX+0x88>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <init_lora_TX+0x88>)
 8000e78:	2203      	movs	r2, #3
 8000e7a:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <init_lora_TX+0x88>)
 8000e7e:	2212      	movs	r2, #18
 8000e80:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <init_lora_TX+0x88>)
 8000e84:	2234      	movs	r2, #52	; 0x34
 8000e86:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register (see in Datasheet)
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <init_lora_TX+0x88>)
 8000e8a:	2262      	movs	r2, #98	; 0x62
 8000e8c:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 8000e8e:	2206      	movs	r2, #6
 8000e90:	4914      	ldr	r1, [pc, #80]	; (8000ee4 <init_lora_TX+0x88>)
 8000e92:	4815      	ldr	r0, [pc, #84]	; (8000ee8 <init_lora_TX+0x8c>)
 8000e94:	f006 fa47 	bl	8007326 <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f003 fb63 	bl	8004564 <HAL_Delay>

	memset(data, 0, sizeof(data));
 8000e9e:	220a      	movs	r2, #10
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <init_lora_TX+0x88>)
 8000ea4:	f006 fee4 	bl	8007c70 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <init_lora_TX+0x88>)
 8000eaa:	22c0      	movs	r2, #192	; 0xc0
 8000eac:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <init_lora_TX+0x88>)
 8000eb0:	2205      	movs	r2, #5
 8000eb2:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <init_lora_TX+0x88>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <init_lora_TX+0x88>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <init_lora_TX+0x88>)
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <init_lora_TX+0x8c>)
 8000ec6:	f006 fa2e 	bl	8007326 <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 8000eca:	200a      	movs	r0, #10
 8000ecc:	f003 fb4a 	bl	8004564 <HAL_Delay>
	///////////////

	read_all_settings_from_module();
 8000ed0:	f7ff ffa6 	bl	8000e20 <read_all_settings_from_module>
	set_WOR_TX_mode();
 8000ed4:	f000 f894 	bl	8001000 <set_WOR_TX_mode>
	HAL_Delay(100);
 8000ed8:	2064      	movs	r0, #100	; 0x64
 8000eda:	f003 fb43 	bl	8004564 <HAL_Delay>
}
 8000ede:	bf00      	nop
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200000e4 	.word	0x200000e4
 8000ee8:	20000650 	.word	0x20000650

08000eec <init_lora_RX>:
//----------------------------------------------------------------------------------------
bool init_lora_RX(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	static uint8_t data[10] = {0};
	set_config_deep_sleep_mode();
 8000ef0:	f000 f862 	bl	8000fb8 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f003 fb35 	bl	8004564 <HAL_Delay>

	data[0] = 0xC0;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <init_lora_RX+0x88>)
 8000efc:	22c0      	movs	r2, #192	; 0xc0
 8000efe:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <init_lora_RX+0x88>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <init_lora_RX+0x88>)
 8000f08:	2203      	movs	r2, #3
 8000f0a:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <init_lora_RX+0x88>)
 8000f0e:	2212      	movs	r2, #18
 8000f10:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <init_lora_RX+0x88>)
 8000f14:	2234      	movs	r2, #52	; 0x34
 8000f16:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register ()
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <init_lora_RX+0x88>)
 8000f1a:	2262      	movs	r2, #98	; 0x62
 8000f1c:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 8000f1e:	2206      	movs	r2, #6
 8000f20:	4914      	ldr	r1, [pc, #80]	; (8000f74 <init_lora_RX+0x88>)
 8000f22:	4815      	ldr	r0, [pc, #84]	; (8000f78 <init_lora_RX+0x8c>)
 8000f24:	f006 f9ff 	bl	8007326 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000f28:	2064      	movs	r0, #100	; 0x64
 8000f2a:	f003 fb1b 	bl	8004564 <HAL_Delay>

	memset(data, 0, sizeof(data));
 8000f2e:	220a      	movs	r2, #10
 8000f30:	2100      	movs	r1, #0
 8000f32:	4810      	ldr	r0, [pc, #64]	; (8000f74 <init_lora_RX+0x88>)
 8000f34:	f006 fe9c 	bl	8007c70 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <init_lora_RX+0x88>)
 8000f3a:	22c0      	movs	r2, #192	; 0xc0
 8000f3c:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <init_lora_RX+0x88>)
 8000f40:	2205      	movs	r2, #5
 8000f42:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <init_lora_RX+0x88>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <init_lora_RX+0x88>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8000f50:	2204      	movs	r2, #4
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <init_lora_RX+0x88>)
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <init_lora_RX+0x8c>)
 8000f56:	f006 f9e6 	bl	8007326 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000f5a:	2064      	movs	r0, #100	; 0x64
 8000f5c:	f003 fb02 	bl	8004564 <HAL_Delay>

	read_settings_from_module();
 8000f60:	f000 f80c 	bl	8000f7c <read_settings_from_module>

	set_WOR_RX_mode();
 8000f64:	f000 f83a 	bl	8000fdc <set_WOR_RX_mode>

	HAL_Delay(100);
 8000f68:	2064      	movs	r0, #100	; 0x64
 8000f6a:	f003 fafb 	bl	8004564 <HAL_Delay>
}
 8000f6e:	bf00      	nop
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000f0 	.word	0x200000f0
 8000f78:	20000650 	.word	0x20000650

08000f7c <read_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_settings_from_module(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 8000f80:	f000 f81a 	bl	8000fb8 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 8000f84:	200a      	movs	r0, #10
 8000f86:	f003 faed 	bl	8004564 <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <read_settings_from_module+0x34>)
 8000f8c:	22c1      	movs	r2, #193	; 0xc1
 8000f8e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <read_settings_from_module+0x34>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <read_settings_from_module+0x34>)
 8000f98:	2208      	movs	r2, #8
 8000f9a:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	4904      	ldr	r1, [pc, #16]	; (8000fb0 <read_settings_from_module+0x34>)
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <read_settings_from_module+0x38>)
 8000fa2:	f006 f9c0 	bl	8007326 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000fa6:	2064      	movs	r0, #100	; 0x64
 8000fa8:	f003 fadc 	bl	8004564 <HAL_Delay>
	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate

	return true;
 8000fac:	bf00      	nop
}
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200000fc 	.word	0x200000fc
 8000fb4:	20000650 	.word	0x20000650

08000fb8 <set_config_deep_sleep_mode>:
//-------------------------------------------------------------------------------------------------
void set_config_deep_sleep_mode (void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	// Function use for go to deep sleep and configuration mode
	// Set M0 and M1 PINs
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <set_config_deep_sleep_mode+0x20>)
 8000fc4:	f003 ff07 	bl	8004dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <set_config_deep_sleep_mode+0x20>)
 8000fce:	f003 ff02 	bl	8004dd6 <HAL_GPIO_WritePin>
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40010c00 	.word	0x40010c00

08000fdc <set_WOR_RX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_RX_mode (void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Receiving mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <set_WOR_RX_mode+0x20>)
 8000fe8:	f003 fef5 	bl	8004dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <set_WOR_RX_mode+0x20>)
 8000ff2:	f003 fef0 	bl	8004dd6 <HAL_GPIO_WritePin>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40010c00 	.word	0x40010c00

08001000 <set_WOR_TX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_TX_mode (void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Transmitting mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <set_WOR_TX_mode+0x20>)
 800100c:	f003 fee3 	bl	8004dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2101      	movs	r1, #1
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <set_WOR_TX_mode+0x20>)
 8001016:	f003 fede 	bl	8004dd6 <HAL_GPIO_WritePin>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40010c00 	.word	0x40010c00

08001024 <NRF24L01_RX_Mode>:
		NRF24L01_Receive();
	}
}
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 800102e:	2000      	movs	r0, #0
 8001030:	f000 fb8c 	bl	800174c <NRF24_ReadReg>
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP) | (1<<PRIM_RX);    	// Power up module. Write PWR_UP and PRIM_RX bits
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f043 0303 	orr.w	r3, r3, #3
 800103e:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4619      	mov	r1, r3
 8001044:	2000      	movs	r0, #0
 8001046:	f000 fbb5 	bl	80017b4 <NRF24_WriteReg>
  NRF24_WriteReg(CONFIG, 0x33);     		//  IRQ WORK  ~ 130 us
 800104a:	2133      	movs	r1, #51	; 0x33
 800104c:	2000      	movs	r0, #0
 800104e:	f000 fbb1 	bl	80017b4 <NRF24_WriteReg>
  CE_SET;
 8001052:	2201      	movs	r2, #1
 8001054:	2108      	movs	r1, #8
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <NRF24L01_RX_Mode+0x50>)
 8001058:	f003 febd 	bl	8004dd6 <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 800105c:	2096      	movs	r0, #150	; 0x96
 800105e:	f000 fb53 	bl	8001708 <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 8001062:	f000 fc5b 	bl	800191c <NRF24_FlushRX>
  NRF24_FlushTX();
 8001066:	f000 fc7b 	bl	8001960 <NRF24_FlushTX>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40010800 	.word	0x40010800

08001078 <NRF24L01_Receive>:
//----------------------------------------------------------------------------------------
// Function waite Low IRQ signal from NRF module
bool NRF24L01_Receive(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
	if(rx_flag == 1)
 800107e:	4b29      	ldr	r3, [pc, #164]	; (8001124 <NRF24L01_Receive+0xac>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d148      	bne.n	800111a <NRF24L01_Receive+0xa2>
	{
		// Detect what's pipes data come from
		if(pipe == 0)
 8001088:	4b27      	ldr	r3, [pc, #156]	; (8001128 <NRF24L01_Receive+0xb0>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d11f      	bne.n	80010d0 <NRF24L01_Receive+0x58>
		{
			ssd1306_SetCursor(0, 16);
 8001090:	2110      	movs	r1, #16
 8001092:	2000      	movs	r0, #0
 8001094:	f000 ff08 	bl	8001ea8 <ssd1306_SetCursor>
			char str_rx_oled_buffer_pipe_0[15] = {0};
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	f8c3 2007 	str.w	r2, [r3, #7]
			strcpy(str_rx_oled_buffer_pipe_0, "P0 data:");
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	4a1f      	ldr	r2, [pc, #124]	; (800112c <NRF24L01_Receive+0xb4>)
 80010b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b2:	c303      	stmia	r3!, {r0, r1}
 80010b4:	701a      	strb	r2, [r3, #0]
			strcat(str_rx_oled_buffer_pipe_0, RX_BUF);
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	491d      	ldr	r1, [pc, #116]	; (8001130 <NRF24L01_Receive+0xb8>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f006 feb5 	bl	8007e2c <strcat>
			ssd1306_WriteString(str_rx_oled_buffer_pipe_0,  Font_7x10, White);
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <NRF24L01_Receive+0xbc>)
 80010c4:	f107 0010 	add.w	r0, r7, #16
 80010c8:	2301      	movs	r3, #1
 80010ca:	ca06      	ldmia	r2, {r1, r2}
 80010cc:	f000 fec6 	bl	8001e5c <ssd1306_WriteString>
		}
		if(pipe == 1)
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <NRF24L01_Receive+0xb0>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d11b      	bne.n	8001110 <NRF24L01_Receive+0x98>
		{
			ssd1306_SetCursor(0, 26);
 80010d8:	211a      	movs	r1, #26
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 fee4 	bl	8001ea8 <ssd1306_SetCursor>
			char str_rx_oled_buffer_pipe_1[15] = {0};
 80010e0:	2300      	movs	r3, #0
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	f8c3 2007 	str.w	r2, [r3, #7]
			strcpy(str_rx_oled_buffer_pipe_1, "P1 data:");
 80010f0:	463b      	mov	r3, r7
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <NRF24L01_Receive+0xc0>)
 80010f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010f6:	c303      	stmia	r3!, {r0, r1}
 80010f8:	701a      	strb	r2, [r3, #0]
			strcat(str_rx_oled_buffer_pipe_1, RX_BUF);
 80010fa:	463b      	mov	r3, r7
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <NRF24L01_Receive+0xb8>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f006 fe94 	bl	8007e2c <strcat>
			ssd1306_WriteString(str_rx_oled_buffer_pipe_1,  Font_7x10, White);
 8001104:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <NRF24L01_Receive+0xbc>)
 8001106:	4638      	mov	r0, r7
 8001108:	2301      	movs	r3, #1
 800110a:	ca06      	ldmia	r2, {r1, r2}
 800110c:	f000 fea6 	bl	8001e5c <ssd1306_WriteString>
		}
		// Print RX data on OLED
		ssd1306_UpdateScreen();
 8001110:	f000 fd94 	bl	8001c3c <ssd1306_UpdateScreen>
		rx_flag = 0;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <NRF24L01_Receive+0xac>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
	}
}
 800111a:	bf00      	nop
 800111c:	4618      	mov	r0, r3
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000112 	.word	0x20000112
 8001128:	20000138 	.word	0x20000138
 800112c:	080085f0 	.word	0x080085f0
 8001130:	20000108 	.word	0x20000108
 8001134:	20000014 	.word	0x20000014
 8001138:	080085fc 	.word	0x080085fc

0800113c <NRF24_init_RX_mode>:
//----------------------------------------------------------------------------------------
void NRF24_init_RX_mode(void)                  // RECEIVE
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	reset_nrf24l01();	// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001140:	f000 fc70 	bl	8001a24 <reset_nrf24l01>

	tx_or_rx_mode = rx_mode;		// For block interrupt HAL_GPIO_EXTI_Callback
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <NRF24_init_RX_mode+0xb4>)
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <NRF24_init_RX_mode+0xb8>)
 800114a:	701a      	strb	r2, [r3, #0]

	CE_RESET;
 800114c:	2200      	movs	r2, #0
 800114e:	2108      	movs	r1, #8
 8001150:	4829      	ldr	r0, [pc, #164]	; (80011f8 <NRF24_init_RX_mode+0xbc>)
 8001152:	f003 fe40 	bl	8004dd6 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8001156:	f241 3088 	movw	r0, #5000	; 0x1388
 800115a:	f000 fad5 	bl	8001708 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter) 0b 0000 1010
 800115e:	210a      	movs	r1, #10
 8001160:	2000      	movs	r0, #0
 8001162:	f000 fb27 	bl	80017b4 <NRF24_WriteReg>

	DelayMicro(5000);
 8001166:	f241 3088 	movw	r0, #5000	; 0x1388
 800116a:	f000 facd 	bl	8001708 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x03); 			// Enable Pipe0 and Pipe1
 800116e:	2103      	movs	r1, #3
 8001170:	2001      	movs	r0, #1
 8001172:	f000 fb1f 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x03); 		// Enable Pipe0 and Pipe1
 8001176:	2103      	movs	r1, #3
 8001178:	2002      	movs	r0, #2
 800117a:	f000 fb1b 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800117e:	2101      	movs	r1, #1
 8001180:	2003      	movs	r0, #3
 8001182:	f000 fb17 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8001186:	215f      	movs	r1, #95	; 0x5f
 8001188:	2004      	movs	r0, #4
 800118a:	f000 fb13 	bl	80017b4 <NRF24_WriteReg>
	NRF24_ToggleFeatures();					// Send activated command
 800118e:	f000 fb3f 	bl	8001810 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);				// Turn off all FEATURE register
 8001192:	2100      	movs	r1, #0
 8001194:	201d      	movs	r0, #29
 8001196:	f000 fb0d 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0); 				// Turn off all payload length data pipe
 800119a:	2100      	movs	r1, #0
 800119c:	201c      	movs	r0, #28
 800119e:	f000 fb09 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 80011a2:	2170      	movs	r1, #112	; 0x70
 80011a4:	2007      	movs	r0, #7
 80011a6:	f000 fb05 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz  // was 76
 80011aa:	214c      	movs	r1, #76	; 0x4c
 80011ac:	2005      	movs	r0, #5
 80011ae:	f000 fb01 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26); 	    // TX_PWR:0dBm, Datarate:250kbps
 80011b2:	2126      	movs	r1, #38	; 0x26
 80011b4:	2006      	movs	r0, #6
 80011b6:	f000 fafd 	bl	80017b4 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_0, TX_ADR_WIDTH);		//	set up Transmit address. Used for a PTX device only.
 80011ba:	2203      	movs	r2, #3
 80011bc:	490f      	ldr	r1, [pc, #60]	; (80011fc <NRF24_init_RX_mode+0xc0>)
 80011be:	2010      	movs	r0, #16
 80011c0:	f000 fb7a 	bl	80018b8 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_0, TX_ADR_WIDTH);    // Set up pipe 0 address
 80011c4:	2203      	movs	r2, #3
 80011c6:	490d      	ldr	r1, [pc, #52]	; (80011fc <NRF24_init_RX_mode+0xc0>)
 80011c8:	200a      	movs	r0, #10
 80011ca:	f000 fb75 	bl	80018b8 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS_1, TX_ADR_WIDTH);    // Set up pipe 1 address
 80011ce:	2203      	movs	r2, #3
 80011d0:	490b      	ldr	r1, [pc, #44]	; (8001200 <NRF24_init_RX_mode+0xc4>)
 80011d2:	200b      	movs	r0, #11
 80011d4:	f000 fb70 	bl	80018b8 <NRF24_Write_Buf>

	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 0
 80011d8:	210a      	movs	r1, #10
 80011da:	2011      	movs	r0, #17
 80011dc:	f000 faea 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 1
 80011e0:	210a      	movs	r1, #10
 80011e2:	2012      	movs	r0, #18
 80011e4:	f000 fae6 	bl	80017b4 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 80011e8:	f7ff ff1c 	bl	8001024 <NRF24L01_RX_Mode>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000106 	.word	0x20000106
 80011f4:	20000003 	.word	0x20000003
 80011f8:	40010800 	.word	0x40010800
 80011fc:	20000004 	.word	0x20000004
 8001200:	20000008 	.word	0x20000008

08001204 <IRQ_Callback>:

//----------------------------------------------------------------------------------------
// Callback generate when stm32 get falling  signal from IRQ pin (NRF module show that it has data in buffer)
void IRQ_Callback(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 800120a:	2301      	movs	r3, #1
 800120c:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 800120e:	2300      	movs	r3, #0
 8001210:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001216:	4814      	ldr	r0, [pc, #80]	; (8001268 <IRQ_Callback+0x64>)
 8001218:	f003 fdf5 	bl	8004e06 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 800121c:	200a      	movs	r0, #10
 800121e:	f000 fa73 	bl	8001708 <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 8001222:	2007      	movs	r0, #7
 8001224:	f000 fa92 	bl	800174c <NRF24_ReadReg>
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d013      	beq.n	800125e <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	085b      	lsrs	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <IRQ_Callback+0x68>)
 8001244:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 8001246:	220a      	movs	r2, #10
 8001248:	4909      	ldr	r1, [pc, #36]	; (8001270 <IRQ_Callback+0x6c>)
 800124a:	2061      	movs	r0, #97	; 0x61
 800124c:	f000 fb0a 	bl	8001864 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 8001250:	2140      	movs	r1, #64	; 0x40
 8001252:	2007      	movs	r0, #7
 8001254:	f000 faae 	bl	80017b4 <NRF24_WriteReg>
		rx_flag = 1;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <IRQ_Callback+0x70>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
	}
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40011000 	.word	0x40011000
 800126c:	20000138 	.word	0x20000138
 8001270:	20000108 	.word	0x20000108
 8001274:	20000112 	.word	0x20000112

08001278 <NRF24L01_RX_Mode_for_TX_mode>:
		NRF24L01_Transmission();
	}
}
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode_for_TX_mode(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 8001282:	2000      	movs	r0, #0
 8001284:	f000 fa62 	bl	800174c <NRF24_ReadReg>
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f043 0303 	orr.w	r3, r3, #3
 8001292:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4619      	mov	r1, r3
 8001298:	2000      	movs	r0, #0
 800129a:	f000 fa8b 	bl	80017b4 <NRF24_WriteReg>
  CE_SET;
 800129e:	2201      	movs	r2, #1
 80012a0:	2108      	movs	r1, #8
 80012a2:	4807      	ldr	r0, [pc, #28]	; (80012c0 <NRF24L01_RX_Mode_for_TX_mode+0x48>)
 80012a4:	f003 fd97 	bl	8004dd6 <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 80012a8:	2096      	movs	r0, #150	; 0x96
 80012aa:	f000 fa2d 	bl	8001708 <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 80012ae:	f000 fb35 	bl	800191c <NRF24_FlushRX>
  NRF24_FlushTX();
 80012b2:	f000 fb55 	bl	8001960 <NRF24_FlushTX>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40010800 	.word	0x40010800

080012c4 <NRF24_init_TX_mode>:
//----------------------------------------------------------------------------------------
void NRF24_init_TX_mode(void)    // TRANSMITTER
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	reset_nrf24l01();
 80012c8:	f000 fbac 	bl	8001a24 <reset_nrf24l01>

	tx_or_rx_mode = tx_mode;		// For block interrupt HAL_GPIO_EXTI_Callback
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <NRF24_init_TX_mode+0xa8>)
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <NRF24_init_TX_mode+0xac>)
 80012d2:	701a      	strb	r2, [r3, #0]

	CE_RESET;
 80012d4:	2200      	movs	r2, #0
 80012d6:	2108      	movs	r1, #8
 80012d8:	4826      	ldr	r0, [pc, #152]	; (8001374 <NRF24_init_TX_mode+0xb0>)
 80012da:	f003 fd7c 	bl	8004dd6 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 80012de:	f241 3088 	movw	r0, #5000	; 0x1388
 80012e2:	f000 fa11 	bl	8001708 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 80012e6:	210a      	movs	r1, #10
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 fa63 	bl	80017b4 <NRF24_WriteReg>

	DelayMicro(5000);
 80012ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80012f2:	f000 fa09 	bl	8001708 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 80012f6:	2101      	movs	r1, #1
 80012f8:	2001      	movs	r0, #1
 80012fa:	f000 fa5b 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 80012fe:	2101      	movs	r1, #1
 8001300:	2002      	movs	r0, #2
 8001302:	f000 fa57 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8001306:	2101      	movs	r1, #1
 8001308:	2003      	movs	r0, #3
 800130a:	f000 fa53 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 800130e:	215f      	movs	r1, #95	; 0x5f
 8001310:	2004      	movs	r0, #4
 8001312:	f000 fa4f 	bl	80017b4 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 8001316:	f000 fa7b 	bl	8001810 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 800131a:	2100      	movs	r1, #0
 800131c:	201d      	movs	r0, #29
 800131e:	f000 fa49 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8001322:	2100      	movs	r1, #0
 8001324:	201c      	movs	r0, #28
 8001326:	f000 fa45 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800132a:	2170      	movs	r1, #112	; 0x70
 800132c:	2007      	movs	r0, #7
 800132e:	f000 fa41 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8001332:	214c      	movs	r1, #76	; 0x4c
 8001334:	2005      	movs	r0, #5
 8001336:	f000 fa3d 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 800133a:	2126      	movs	r1, #38	; 0x26
 800133c:	2006      	movs	r0, #6
 800133e:	f000 fa39 	bl	80017b4 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 8001342:	2203      	movs	r2, #3
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <NRF24_init_TX_mode+0xb4>)
 8001346:	2010      	movs	r0, #16
 8001348:	f000 fab6 	bl	80018b8 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 800134c:	2203      	movs	r2, #3
 800134e:	490a      	ldr	r1, [pc, #40]	; (8001378 <NRF24_init_TX_mode+0xb4>)
 8001350:	200a      	movs	r0, #10
 8001352:	f000 fab1 	bl	80018b8 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 8001356:	210a      	movs	r1, #10
 8001358:	2011      	movs	r0, #17
 800135a:	f000 fa2b 	bl	80017b4 <NRF24_WriteReg>

	NRF24L01_RX_Mode_for_TX_mode();
 800135e:	f7ff ff8b 	bl	8001278 <NRF24L01_RX_Mode_for_TX_mode>

	read_config_registers();	// For debug
 8001362:	f000 fb1f 	bl	80019a4 <read_config_registers>
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000002 	.word	0x20000002
 8001370:	20000003 	.word	0x20000003
 8001374:	40010800 	.word	0x40010800
 8001378:	2000000c 	.word	0x2000000c

0800137c <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8001384:	2203      	movs	r2, #3
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <NRF24L01_TX_Mode+0x2c>)
 8001388:	2010      	movs	r0, #16
 800138a:	f000 fa95 	bl	80018b8 <NRF24_Write_Buf>
  CE_RESET;
 800138e:	2200      	movs	r2, #0
 8001390:	2108      	movs	r1, #8
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <NRF24L01_TX_Mode+0x30>)
 8001394:	f003 fd1f 	bl	8004dd6 <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 8001398:	f000 fac0 	bl	800191c <NRF24_FlushRX>
  NRF24_FlushTX();
 800139c:	f000 fae0 	bl	8001960 <NRF24_FlushTX>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000000c 	.word	0x2000000c
 80013ac:	40010800 	.word	0x40010800

080013b0 <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
 80013bc:	4613      	mov	r3, r2
 80013be:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 80013c0:	2200      	movs	r2, #0
 80013c2:	2108      	movs	r1, #8
 80013c4:	4813      	ldr	r0, [pc, #76]	; (8001414 <NRF24_Transmit+0x64>)
 80013c6:	f003 fd06 	bl	8004dd6 <HAL_GPIO_WritePin>
  CS_ON;
 80013ca:	2200      	movs	r2, #0
 80013cc:	2110      	movs	r1, #16
 80013ce:	4811      	ldr	r0, [pc, #68]	; (8001414 <NRF24_Transmit+0x64>)
 80013d0:	f003 fd01 	bl	8004dd6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 80013d4:	1df9      	adds	r1, r7, #7
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	2201      	movs	r2, #1
 80013dc:	480e      	ldr	r0, [pc, #56]	; (8001418 <NRF24_Transmit+0x68>)
 80013de:	f004 fe3b 	bl	8006058 <HAL_SPI_Transmit>
  DelayMicro(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f000 f990 	bl	8001708 <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f0:	6839      	ldr	r1, [r7, #0]
 80013f2:	4809      	ldr	r0, [pc, #36]	; (8001418 <NRF24_Transmit+0x68>)
 80013f4:	f004 fe30 	bl	8006058 <HAL_SPI_Transmit>
  CS_OFF;
 80013f8:	2201      	movs	r2, #1
 80013fa:	2110      	movs	r1, #16
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <NRF24_Transmit+0x64>)
 80013fe:	f003 fcea 	bl	8004dd6 <HAL_GPIO_WritePin>
  CE_SET;
 8001402:	2201      	movs	r2, #1
 8001404:	2108      	movs	r1, #8
 8001406:	4803      	ldr	r0, [pc, #12]	; (8001414 <NRF24_Transmit+0x64>)
 8001408:	f003 fce5 	bl	8004dd6 <HAL_GPIO_WritePin>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40010800 	.word	0x40010800
 8001418:	200006dc 	.word	0x200006dc

0800141c <NRF24L01_Send>:
//----------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	2300      	movs	r3, #0
 800142a:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ffa5 	bl	800137c <NRF24L01_TX_Mode>

  regval = NRF24_ReadReg(CONFIG);
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f98a 	bl	800174c <NRF24_ReadReg>
 8001438:	4603      	mov	r3, r0
 800143a:	73bb      	strb	r3, [r7, #14]

  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 8001444:	7bbb      	ldrb	r3, [r7, #14]
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 800144c:	7bbb      	ldrb	r3, [r7, #14]
 800144e:	4619      	mov	r1, r3
 8001450:	2000      	movs	r0, #0
 8001452:	f000 f9af 	bl	80017b4 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 8001456:	2096      	movs	r0, #150	; 0x96
 8001458:	f000 f956 	bl	8001708 <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 800145c:	220a      	movs	r2, #10
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	20a0      	movs	r0, #160	; 0xa0
 8001462:	f7ff ffa5 	bl	80013b0 <NRF24_Transmit>

  CE_SET;
 8001466:	2201      	movs	r2, #1
 8001468:	2108      	movs	r1, #8
 800146a:	481c      	ldr	r0, [pc, #112]	; (80014dc <NRF24L01_Send+0xc0>)
 800146c:	f003 fcb3 	bl	8004dd6 <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 8001470:	200f      	movs	r0, #15
 8001472:	f000 f949 	bl	8001708 <DelayMicro>
  CE_RESET;
 8001476:	2200      	movs	r2, #0
 8001478:	2108      	movs	r1, #8
 800147a:	4818      	ldr	r0, [pc, #96]	; (80014dc <NRF24L01_Send+0xc0>)
 800147c:	f003 fcab 	bl	8004dd6 <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 8001480:	bf00      	nop
 8001482:	2104      	movs	r1, #4
 8001484:	4815      	ldr	r0, [pc, #84]	; (80014dc <NRF24L01_Send+0xc0>)
 8001486:	f003 fc8f 	bl	8004da8 <HAL_GPIO_ReadPin>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d0f8      	beq.n	8001482 <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 8001490:	2007      	movs	r0, #7
 8001492:	f000 f95b 	bl	800174c <NRF24_ReadReg>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 80014a4:	2120      	movs	r1, #32
 80014a6:	2007      	movs	r0, #7
 80014a8:	f000 f984 	bl	80017b4 <NRF24_WriteReg>
 80014ac:	e00a      	b.n	80014c4 <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <NRF24L01_Send+0xa8>
  {
    NRF24_WriteReg(STATUS_NRF, 0x10);
 80014b8:	2110      	movs	r1, #16
 80014ba:	2007      	movs	r0, #7
 80014bc:	f000 f97a 	bl	80017b4 <NRF24_WriteReg>
    NRF24_FlushTX();
 80014c0:	f000 fa4e 	bl	8001960 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 80014c4:	2008      	movs	r0, #8
 80014c6:	f000 f941 	bl	800174c <NRF24_ReadReg>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode_for_TX_mode();
 80014ce:	f7ff fed3 	bl	8001278 <NRF24L01_RX_Mode_for_TX_mode>

  return regval;
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40010800 	.word	0x40010800

080014e0 <NRF24L01_Transmission>:
//----------------------------------------------------------------------------------------
void NRF24L01_Transmission(void)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b091      	sub	sp, #68	; 0x44
 80014e4:	af00      	add	r7, sp, #0
	static uint8_t retr_cnt, dt = 0;
	//static int test_data = 0;							// Init test data for transmit
	uint8_t buf2[20]={0};
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
	uint8_t test_i[10] = {0};
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	809a      	strh	r2, [r3, #4]

	uint8_t str_nrf[25] = {0};
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	751a      	strb	r2, [r3, #20]

	// Print transmit data
	ssd1306_SetCursor(0, 16);
 800151c:	2110      	movs	r1, #16
 800151e:	2000      	movs	r0, #0
 8001520:	f000 fcc2 	bl	8001ea8 <ssd1306_SetCursor>
	strcpy(str_nrf, "Data:");
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4a6c      	ldr	r2, [pc, #432]	; (80016d8 <NRF24L01_Transmission+0x1f8>)
 8001528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800152c:	6018      	str	r0, [r3, #0]
 800152e:	3304      	adds	r3, #4
 8001530:	8019      	strh	r1, [r3, #0]
	sprintf(buf2, "%d", test_data);
 8001532:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <NRF24L01_Transmission+0x1fc>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800153a:	4969      	ldr	r1, [pc, #420]	; (80016e0 <NRF24L01_Transmission+0x200>)
 800153c:	4618      	mov	r0, r3
 800153e:	f006 fc55 	bl	8007dec <siprintf>
	strcat(str_nrf, buf2);
 8001542:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f006 fc6e 	bl	8007e2c <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001550:	4a64      	ldr	r2, [pc, #400]	; (80016e4 <NRF24L01_Transmission+0x204>)
 8001552:	1d38      	adds	r0, r7, #4
 8001554:	2301      	movs	r3, #1
 8001556:	ca06      	ldmia	r2, {r1, r2}
 8001558:	f000 fc80 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800155c:	f000 fb6e 	bl	8001c3c <ssd1306_UpdateScreen>
	memset(str_nrf, 0, sizeof(str_nrf));
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2219      	movs	r2, #25
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f006 fb82 	bl	8007c70 <memset>

	dt = NRF24L01_Send(buf2);						// Transmit data
 800156c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff53 	bl	800141c <NRF24L01_Send>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <NRF24L01_Transmission+0x208>)
 800157c:	701a      	strb	r2, [r3, #0]

	// Calculation retransmitted packets
	retr_cnt = dt & 0xF;
 800157e:	4b5a      	ldr	r3, [pc, #360]	; (80016e8 <NRF24L01_Transmission+0x208>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b58      	ldr	r3, [pc, #352]	; (80016ec <NRF24L01_Transmission+0x20c>)
 800158a:	701a      	strb	r2, [r3, #0]
	retr_cnt_full += retr_cnt;		// Counting retransmit packets
 800158c:	4b57      	ldr	r3, [pc, #348]	; (80016ec <NRF24L01_Transmission+0x20c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b57      	ldr	r3, [pc, #348]	; (80016f0 <NRF24L01_Transmission+0x210>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a55      	ldr	r2, [pc, #340]	; (80016f0 <NRF24L01_Transmission+0x210>)
 800159a:	6013      	str	r3, [r2, #0]

	// Print transmit counter
	memset(test_i, 0, sizeof(test_i));
 800159c:	f107 0320 	add.w	r3, r7, #32
 80015a0:	220a      	movs	r2, #10
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f006 fb63 	bl	8007c70 <memset>
	ssd1306_SetCursor(0, 26);
 80015aa:	211a      	movs	r1, #26
 80015ac:	2000      	movs	r0, #0
 80015ae:	f000 fc7b 	bl	8001ea8 <ssd1306_SetCursor>
	strcpy(str_nrf, "Conut trans:");
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4a4f      	ldr	r2, [pc, #316]	; (80016f4 <NRF24L01_Transmission+0x214>)
 80015b6:	461c      	mov	r4, r3
 80015b8:	4613      	mov	r3, r2
 80015ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015bc:	c407      	stmia	r4!, {r0, r1, r2}
 80015be:	7023      	strb	r3, [r4, #0]
	itoa(i, test_i, 10);								// Convert number in string
 80015c0:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <NRF24L01_Transmission+0x218>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f107 0120 	add.w	r1, r7, #32
 80015c8:	220a      	movs	r2, #10
 80015ca:	4618      	mov	r0, r3
 80015cc:	f006 fb40 	bl	8007c50 <itoa>
	strcat(str_nrf, test_i);
 80015d0:	f107 0220 	add.w	r2, r7, #32
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f006 fc27 	bl	8007e2c <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 80015de:	4a41      	ldr	r2, [pc, #260]	; (80016e4 <NRF24L01_Transmission+0x204>)
 80015e0:	1d38      	adds	r0, r7, #4
 80015e2:	2301      	movs	r3, #1
 80015e4:	ca06      	ldmia	r2, {r1, r2}
 80015e6:	f000 fc39 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80015ea:	f000 fb27 	bl	8001c3c <ssd1306_UpdateScreen>

	// Print retransmeet counter
	memset(str_nrf, 0, sizeof(str_nrf));
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2219      	movs	r2, #25
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f006 fb3b 	bl	8007c70 <memset>
	memset(test_i, 0, sizeof(test_i));
 80015fa:	f107 0320 	add.w	r3, r7, #32
 80015fe:	220a      	movs	r2, #10
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f006 fb34 	bl	8007c70 <memset>
	ssd1306_SetCursor(0, 36);
 8001608:	2124      	movs	r1, #36	; 0x24
 800160a:	2000      	movs	r0, #0
 800160c:	f000 fc4c 	bl	8001ea8 <ssd1306_SetCursor>
	strcpy(str_nrf, "Retransm:");
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4a3a      	ldr	r2, [pc, #232]	; (80016fc <NRF24L01_Transmission+0x21c>)
 8001614:	ca07      	ldmia	r2, {r0, r1, r2}
 8001616:	c303      	stmia	r3!, {r0, r1}
 8001618:	801a      	strh	r2, [r3, #0]
	itoa(retr_cnt_full, test_i, 10);
 800161a:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <NRF24L01_Transmission+0x210>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f107 0120 	add.w	r1, r7, #32
 8001622:	220a      	movs	r2, #10
 8001624:	4618      	mov	r0, r3
 8001626:	f006 fb13 	bl	8007c50 <itoa>
	strcat(str_nrf, test_i);
 800162a:	f107 0220 	add.w	r2, r7, #32
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f006 fbfa 	bl	8007e2c <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001638:	4a2a      	ldr	r2, [pc, #168]	; (80016e4 <NRF24L01_Transmission+0x204>)
 800163a:	1d38      	adds	r0, r7, #4
 800163c:	2301      	movs	r3, #1
 800163e:	ca06      	ldmia	r2, {r1, r2}
 8001640:	f000 fc0c 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001644:	f000 fafa 	bl	8001c3c <ssd1306_UpdateScreen>

	// Print lost packets
	memset(str_nrf, 0, sizeof(str_nrf));
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2219      	movs	r2, #25
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f006 fb0e 	bl	8007c70 <memset>
	memset(test_i, 0, sizeof(test_i));
 8001654:	f107 0320 	add.w	r3, r7, #32
 8001658:	220a      	movs	r2, #10
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f006 fb07 	bl	8007c70 <memset>

	cnt_lost = dt >> 4;
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <NRF24L01_Transmission+0x208>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	b2db      	uxtb	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <NRF24L01_Transmission+0x220>)
 800166e:	601a      	str	r2, [r3, #0]

	ssd1306_SetCursor(0, 46);
 8001670:	212e      	movs	r1, #46	; 0x2e
 8001672:	2000      	movs	r0, #0
 8001674:	f000 fc18 	bl	8001ea8 <ssd1306_SetCursor>
	strcpy(str_nrf, "Lost:");
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	4a22      	ldr	r2, [pc, #136]	; (8001704 <NRF24L01_Transmission+0x224>)
 800167c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001680:	6018      	str	r0, [r3, #0]
 8001682:	3304      	adds	r3, #4
 8001684:	8019      	strh	r1, [r3, #0]
	itoa(cnt_lost, test_i, 10);
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <NRF24L01_Transmission+0x220>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f107 0120 	add.w	r1, r7, #32
 800168e:	220a      	movs	r2, #10
 8001690:	4618      	mov	r0, r3
 8001692:	f006 fadd 	bl	8007c50 <itoa>
	strcat(str_nrf, test_i);
 8001696:	f107 0220 	add.w	r2, r7, #32
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f006 fbc4 	bl	8007e2c <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 80016a4:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <NRF24L01_Transmission+0x204>)
 80016a6:	1d38      	adds	r0, r7, #4
 80016a8:	2301      	movs	r3, #1
 80016aa:	ca06      	ldmia	r2, {r1, r2}
 80016ac:	f000 fbd6 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80016b0:	f000 fac4 	bl	8001c3c <ssd1306_UpdateScreen>

	test_data++;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <NRF24L01_Transmission+0x1fc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <NRF24L01_Transmission+0x1fc>)
 80016bc:	6013      	str	r3, [r2, #0]
	i++;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <NRF24L01_Transmission+0x218>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <NRF24L01_Transmission+0x218>)
 80016c6:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 80016c8:	2064      	movs	r0, #100	; 0x64
 80016ca:	f002 ff4b 	bl	8004564 <HAL_Delay>
}
 80016ce:	bf00      	nop
 80016d0:	3744      	adds	r7, #68	; 0x44
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	08008608 	.word	0x08008608
 80016dc:	20000144 	.word	0x20000144
 80016e0:	08008610 	.word	0x08008610
 80016e4:	20000014 	.word	0x20000014
 80016e8:	20000148 	.word	0x20000148
 80016ec:	20000149 	.word	0x20000149
 80016f0:	2000013c 	.word	0x2000013c
 80016f4:	08008614 	.word	0x08008614
 80016f8:	20000010 	.word	0x20000010
 80016fc:	08008624 	.word	0x08008624
 8001700:	20000140 	.word	0x20000140
 8001704:	08008630 	.word	0x08008630

08001708 <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <DelayMicro+0x3c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <DelayMicro+0x3c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <DelayMicro+0x40>)
 800171c:	fba2 2303 	umull	r2, r3, r2, r3
 8001720:	0ddb      	lsrs	r3, r3, #23
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	607b      	str	r3, [r7, #4]
	while (micros--);
 800172a:	bf00      	nop
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	1e5a      	subs	r2, r3, #1
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1fa      	bne.n	800172c <DelayMicro+0x24>
}
 8001736:	bf00      	nop
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000024 	.word	0x20000024
 8001748:	ffa71ee7 	.word	0xffa71ee7

0800174c <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af02      	add	r7, sp, #8
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 8001756:	2300      	movs	r3, #0
 8001758:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800175a:	2200      	movs	r2, #0
 800175c:	2110      	movs	r1, #16
 800175e:	4813      	ldr	r0, [pc, #76]	; (80017ac <NRF24_ReadReg+0x60>)
 8001760:	f003 fb39 	bl	8004dd6 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8001764:	f107 020f 	add.w	r2, r7, #15
 8001768:	1df9      	adds	r1, r7, #7
 800176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2301      	movs	r3, #1
 8001772:	480f      	ldr	r0, [pc, #60]	; (80017b0 <NRF24_ReadReg+0x64>)
 8001774:	f004 febd 	bl	80064f2 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b07      	cmp	r3, #7
 800177c:	d00c      	beq.n	8001798 <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 800177e:	23ff      	movs	r3, #255	; 0xff
 8001780:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8001782:	f107 020f 	add.w	r2, r7, #15
 8001786:	f107 010e 	add.w	r1, r7, #14
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2301      	movs	r3, #1
 8001792:	4807      	ldr	r0, [pc, #28]	; (80017b0 <NRF24_ReadReg+0x64>)
 8001794:	f004 fead 	bl	80064f2 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 8001798:	2201      	movs	r2, #1
 800179a:	2110      	movs	r1, #16
 800179c:	4803      	ldr	r0, [pc, #12]	; (80017ac <NRF24_ReadReg+0x60>)
 800179e:	f003 fb1a 	bl	8004dd6 <HAL_GPIO_WritePin>
  return dt;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40010800 	.word	0x40010800
 80017b0:	200006dc 	.word	0x200006dc

080017b4 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	4613      	mov	r3, r2
 80017c2:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f043 0320 	orr.w	r3, r3, #32
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 80017ce:	2200      	movs	r2, #0
 80017d0:	2110      	movs	r1, #16
 80017d2:	480d      	ldr	r0, [pc, #52]	; (8001808 <NRF24_WriteReg+0x54>)
 80017d4:	f003 faff 	bl	8004dd6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80017d8:	1df9      	adds	r1, r7, #7
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	2201      	movs	r2, #1
 80017e0:	480a      	ldr	r0, [pc, #40]	; (800180c <NRF24_WriteReg+0x58>)
 80017e2:	f004 fc39 	bl	8006058 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 80017e6:	1db9      	adds	r1, r7, #6
 80017e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ec:	2201      	movs	r2, #1
 80017ee:	4807      	ldr	r0, [pc, #28]	; (800180c <NRF24_WriteReg+0x58>)
 80017f0:	f004 fc32 	bl	8006058 <HAL_SPI_Transmit>
  CS_OFF;
 80017f4:	2201      	movs	r2, #1
 80017f6:	2110      	movs	r1, #16
 80017f8:	4803      	ldr	r0, [pc, #12]	; (8001808 <NRF24_WriteReg+0x54>)
 80017fa:	f003 faec 	bl	8004dd6 <HAL_GPIO_WritePin>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40010800 	.word	0x40010800
 800180c:	200006dc 	.word	0x200006dc

08001810 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 8001816:	2350      	movs	r3, #80	; 0x50
 8001818:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800181a:	2200      	movs	r2, #0
 800181c:	2110      	movs	r1, #16
 800181e:	480f      	ldr	r0, [pc, #60]	; (800185c <NRF24_ToggleFeatures+0x4c>)
 8001820:	f003 fad9 	bl	8004dd6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001824:	1d39      	adds	r1, r7, #4
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	2201      	movs	r2, #1
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <NRF24_ToggleFeatures+0x50>)
 800182e:	f004 fc13 	bl	8006058 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001832:	2001      	movs	r0, #1
 8001834:	f7ff ff68 	bl	8001708 <DelayMicro>
  dt[0] = 0x73;
 8001838:	2373      	movs	r3, #115	; 0x73
 800183a:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 800183c:	1d39      	adds	r1, r7, #4
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001842:	2201      	movs	r2, #1
 8001844:	4806      	ldr	r0, [pc, #24]	; (8001860 <NRF24_ToggleFeatures+0x50>)
 8001846:	f004 fc07 	bl	8006058 <HAL_SPI_Transmit>
  CS_OFF;
 800184a:	2201      	movs	r2, #1
 800184c:	2110      	movs	r1, #16
 800184e:	4803      	ldr	r0, [pc, #12]	; (800185c <NRF24_ToggleFeatures+0x4c>)
 8001850:	f003 fac1 	bl	8004dd6 <HAL_GPIO_WritePin>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40010800 	.word	0x40010800
 8001860:	200006dc 	.word	0x200006dc

08001864 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
 8001870:	4613      	mov	r3, r2
 8001872:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8001874:	2200      	movs	r2, #0
 8001876:	2110      	movs	r1, #16
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <NRF24_Read_Buf+0x4c>)
 800187a:	f003 faac 	bl	8004dd6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800187e:	1df9      	adds	r1, r7, #7
 8001880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001884:	2201      	movs	r2, #1
 8001886:	480b      	ldr	r0, [pc, #44]	; (80018b4 <NRF24_Read_Buf+0x50>)
 8001888:	f004 fbe6 	bl	8006058 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	b29a      	uxth	r2, r3
 8001890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	4807      	ldr	r0, [pc, #28]	; (80018b4 <NRF24_Read_Buf+0x50>)
 8001898:	f004 fd1a 	bl	80062d0 <HAL_SPI_Receive>
  CS_OFF;
 800189c:	2201      	movs	r2, #1
 800189e:	2110      	movs	r1, #16
 80018a0:	4803      	ldr	r0, [pc, #12]	; (80018b0 <NRF24_Read_Buf+0x4c>)
 80018a2:	f003 fa98 	bl	8004dd6 <HAL_GPIO_WritePin>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40010800 	.word	0x40010800
 80018b4:	200006dc 	.word	0x200006dc

080018b8 <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	4613      	mov	r3, r2
 80018c6:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f043 0320 	orr.w	r3, r3, #32
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 80018d2:	2200      	movs	r2, #0
 80018d4:	2110      	movs	r1, #16
 80018d6:	480f      	ldr	r0, [pc, #60]	; (8001914 <NRF24_Write_Buf+0x5c>)
 80018d8:	f003 fa7d 	bl	8004dd6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80018dc:	1df9      	adds	r1, r7, #7
 80018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e2:	2201      	movs	r2, #1
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <NRF24_Write_Buf+0x60>)
 80018e6:	f004 fbb7 	bl	8006058 <HAL_SPI_Transmit>
  DelayMicro(1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f7ff ff0c 	bl	8001708 <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f8:	6839      	ldr	r1, [r7, #0]
 80018fa:	4807      	ldr	r0, [pc, #28]	; (8001918 <NRF24_Write_Buf+0x60>)
 80018fc:	f004 fbac 	bl	8006058 <HAL_SPI_Transmit>
  CS_OFF;
 8001900:	2201      	movs	r2, #1
 8001902:	2110      	movs	r1, #16
 8001904:	4803      	ldr	r0, [pc, #12]	; (8001914 <NRF24_Write_Buf+0x5c>)
 8001906:	f003 fa66 	bl	8004dd6 <HAL_GPIO_WritePin>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40010800 	.word	0x40010800
 8001918:	200006dc 	.word	0x200006dc

0800191c <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8001922:	23e2      	movs	r3, #226	; 0xe2
 8001924:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8001926:	2200      	movs	r2, #0
 8001928:	2110      	movs	r1, #16
 800192a:	480b      	ldr	r0, [pc, #44]	; (8001958 <NRF24_FlushRX+0x3c>)
 800192c:	f003 fa53 	bl	8004dd6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001930:	1d39      	adds	r1, r7, #4
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	2201      	movs	r2, #1
 8001938:	4808      	ldr	r0, [pc, #32]	; (800195c <NRF24_FlushRX+0x40>)
 800193a:	f004 fb8d 	bl	8006058 <HAL_SPI_Transmit>
  DelayMicro(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff fee2 	bl	8001708 <DelayMicro>
  CS_OFF;
 8001944:	2201      	movs	r2, #1
 8001946:	2110      	movs	r1, #16
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <NRF24_FlushRX+0x3c>)
 800194a:	f003 fa44 	bl	8004dd6 <HAL_GPIO_WritePin>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40010800 	.word	0x40010800
 800195c:	200006dc 	.word	0x200006dc

08001960 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 8001966:	23e1      	movs	r3, #225	; 0xe1
 8001968:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800196a:	2200      	movs	r2, #0
 800196c:	2110      	movs	r1, #16
 800196e:	480b      	ldr	r0, [pc, #44]	; (800199c <NRF24_FlushTX+0x3c>)
 8001970:	f003 fa31 	bl	8004dd6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001974:	1d39      	adds	r1, r7, #4
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	2201      	movs	r2, #1
 800197c:	4808      	ldr	r0, [pc, #32]	; (80019a0 <NRF24_FlushTX+0x40>)
 800197e:	f004 fb6b 	bl	8006058 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001982:	2001      	movs	r0, #1
 8001984:	f7ff fec0 	bl	8001708 <DelayMicro>
  CS_OFF;
 8001988:	2201      	movs	r2, #1
 800198a:	2110      	movs	r1, #16
 800198c:	4803      	ldr	r0, [pc, #12]	; (800199c <NRF24_FlushTX+0x3c>)
 800198e:	f003 fa22 	bl	8004dd6 <HAL_GPIO_WritePin>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40010800 	.word	0x40010800
 80019a0:	200006dc 	.word	0x200006dc

080019a4 <read_config_registers>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
bool read_config_registers(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80019a8:	2064      	movs	r0, #100	; 0x64
 80019aa:	f002 fddb 	bl	8004564 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff fecc 	bl	800174c <NRF24_ReadReg>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <read_config_registers+0x78>)
 80019ba:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 80019bc:	2001      	movs	r0, #1
 80019be:	f7ff fec5 	bl	800174c <NRF24_ReadReg>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <read_config_registers+0x78>)
 80019c8:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 80019ca:	2002      	movs	r0, #2
 80019cc:	f7ff febe 	bl	800174c <NRF24_ReadReg>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <read_config_registers+0x78>)
 80019d6:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 80019d8:	2007      	movs	r0, #7
 80019da:	f7ff feb7 	bl	800174c <NRF24_ReadReg>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <read_config_registers+0x78>)
 80019e4:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 80019e6:	2006      	movs	r0, #6
 80019e8:	f7ff feb0 	bl	800174c <NRF24_ReadReg>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <read_config_registers+0x78>)
 80019f2:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 80019f4:	2203      	movs	r2, #3
 80019f6:	490a      	ldr	r1, [pc, #40]	; (8001a20 <read_config_registers+0x7c>)
 80019f8:	2010      	movs	r0, #16
 80019fa:	f7ff ff33 	bl	8001864 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 80019fe:	2203      	movs	r2, #3
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <read_config_registers+0x7c>)
 8001a02:	200a      	movs	r0, #10
 8001a04:	f7ff ff2e 	bl	8001864 <NRF24_Read_Buf>

	if(config_array[0] == 0)		// Data from nrf module was read
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <read_config_registers+0x78>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <read_config_registers+0x70>
	{
		return false;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e000      	b.n	8001a16 <read_config_registers+0x72>
	}
	else
	{
		return true;
 8001a14:	2301      	movs	r3, #1
	}
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000114 	.word	0x20000114
 8001a20:	20000124 	.word	0x20000124

08001a24 <reset_nrf24l01>:
//----------------------------------------------------------------------------------------
void reset_nrf24l01(void)   // reconfigure module
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
	CE_RESET;
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2108      	movs	r1, #8
 8001a2e:	4829      	ldr	r0, [pc, #164]	; (8001ad4 <reset_nrf24l01+0xb0>)
 8001a30:	f003 f9d1 	bl	8004dd6 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8001a34:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a38:	f7ff fe66 	bl	8001708 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8001a3c:	210a      	movs	r1, #10
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff feb8 	bl	80017b4 <NRF24_WriteReg>

	DelayMicro(5000);
 8001a44:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a48:	f7ff fe5e 	bl	8001708 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f7ff feb0 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8001a54:	2101      	movs	r1, #1
 8001a56:	2002      	movs	r0, #2
 8001a58:	f7ff feac 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	2003      	movs	r0, #3
 8001a60:	f7ff fea8 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8001a64:	215f      	movs	r1, #95	; 0x5f
 8001a66:	2004      	movs	r0, #4
 8001a68:	f7ff fea4 	bl	80017b4 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 8001a6c:	f7ff fed0 	bl	8001810 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 8001a70:	2100      	movs	r1, #0
 8001a72:	201d      	movs	r0, #29
 8001a74:	f7ff fe9e 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8001a78:	2100      	movs	r1, #0
 8001a7a:	201c      	movs	r0, #28
 8001a7c:	f7ff fe9a 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x00); 		// Reset flags for IRQ   // WAS NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 8001a80:	2100      	movs	r1, #0
 8001a82:	2007      	movs	r0, #7
 8001a84:	f7ff fe96 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8001a88:	214c      	movs	r1, #76	; 0x4c
 8001a8a:	2005      	movs	r0, #5
 8001a8c:	f7ff fe92 	bl	80017b4 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 8001a90:	2126      	movs	r1, #38	; 0x26
 8001a92:	2006      	movs	r0, #6
 8001a94:	f7ff fe8e 	bl	80017b4 <NRF24_WriteReg>

	uint8_t TX_ADDRESS_RESET[TX_ADR_WIDTH] = {0x00,0x00,0x00};   // Address for pipe 0
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <reset_nrf24l01+0xb4>)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	8019      	strh	r1, [r3, #0]
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	0c12      	lsrs	r2, r2, #16
 8001aa6:	701a      	strb	r2, [r3, #0]
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_RESET, TX_ADR_WIDTH);			// Write TX address
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2203      	movs	r2, #3
 8001aac:	4619      	mov	r1, r3
 8001aae:	2010      	movs	r0, #16
 8001ab0:	f7ff ff02 	bl	80018b8 <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_RESET, TX_ADR_WIDTH);		// Set up pipe 0 address
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	200a      	movs	r0, #10
 8001abc:	f7ff fefc 	bl	80018b8 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 8001ac0:	210a      	movs	r1, #10
 8001ac2:	2011      	movs	r0, #17
 8001ac4:	f7ff fe76 	bl	80017b4 <NRF24_WriteReg>

	NRF24L01_RX_Mode_for_TX_mode();
 8001ac8:	f7ff fbd6 	bl	8001278 <NRF24L01_RX_Mode_for_TX_mode>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	08008638 	.word	0x08008638

08001adc <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f000 f889 	bl	8001bf8 <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 8001ae6:	f000 f8a9 	bl	8001c3c <ssd1306_UpdateScreen>
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af04      	add	r7, sp, #16
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001afa:	230a      	movs	r3, #10
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	2301      	movs	r3, #1
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2301      	movs	r3, #1
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2178      	movs	r1, #120	; 0x78
 8001b0c:	4803      	ldr	r0, [pc, #12]	; (8001b1c <ssd1306_WriteCommand+0x2c>)
 8001b0e:	f003 faef 	bl	80050f0 <HAL_I2C_Mem_Write>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200005fc 	.word	0x200005fc

08001b20 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8001b24:	2064      	movs	r0, #100	; 0x64
 8001b26:	f002 fd1d 	bl	8004564 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8001b2a:	20ae      	movs	r0, #174	; 0xae
 8001b2c:	f7ff ffe0 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001b30:	2020      	movs	r0, #32
 8001b32:	f7ff ffdd 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001b36:	2010      	movs	r0, #16
 8001b38:	f7ff ffda 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b3c:	20b0      	movs	r0, #176	; 0xb0
 8001b3e:	f7ff ffd7 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001b42:	20c8      	movs	r0, #200	; 0xc8
 8001b44:	f7ff ffd4 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff ffd1 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001b4e:	2010      	movs	r0, #16
 8001b50:	f7ff ffce 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001b54:	2040      	movs	r0, #64	; 0x40
 8001b56:	f7ff ffcb 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001b5a:	2081      	movs	r0, #129	; 0x81
 8001b5c:	f7ff ffc8 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001b60:	20ff      	movs	r0, #255	; 0xff
 8001b62:	f7ff ffc5 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001b66:	20a1      	movs	r0, #161	; 0xa1
 8001b68:	f7ff ffc2 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001b6c:	20a6      	movs	r0, #166	; 0xa6
 8001b6e:	f7ff ffbf 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001b72:	20a8      	movs	r0, #168	; 0xa8
 8001b74:	f7ff ffbc 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001b78:	203f      	movs	r0, #63	; 0x3f
 8001b7a:	f7ff ffb9 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b7e:	20a4      	movs	r0, #164	; 0xa4
 8001b80:	f7ff ffb6 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001b84:	20d3      	movs	r0, #211	; 0xd3
 8001b86:	f7ff ffb3 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff ffb0 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b90:	20d5      	movs	r0, #213	; 0xd5
 8001b92:	f7ff ffad 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b96:	20f0      	movs	r0, #240	; 0xf0
 8001b98:	f7ff ffaa 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b9c:	20d9      	movs	r0, #217	; 0xd9
 8001b9e:	f7ff ffa7 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001ba2:	2022      	movs	r0, #34	; 0x22
 8001ba4:	f7ff ffa4 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001ba8:	20da      	movs	r0, #218	; 0xda
 8001baa:	f7ff ffa1 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001bae:	2012      	movs	r0, #18
 8001bb0:	f7ff ff9e 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001bb4:	20db      	movs	r0, #219	; 0xdb
 8001bb6:	f7ff ff9b 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001bba:	2020      	movs	r0, #32
 8001bbc:	f7ff ff98 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001bc0:	208d      	movs	r0, #141	; 0x8d
 8001bc2:	f7ff ff95 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001bc6:	2014      	movs	r0, #20
 8001bc8:	f7ff ff92 	bl	8001af0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001bcc:	20af      	movs	r0, #175	; 0xaf
 8001bce:	f7ff ff8f 	bl	8001af0 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f000 f810 	bl	8001bf8 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001bd8:	f000 f830 	bl	8001c3c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <ssd1306_Init+0xd4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <ssd1306_Init+0xd4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8001be8:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <ssd1306_Init+0xd4>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	715a      	strb	r2, [r3, #5]

	return 1;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000054c 	.word	0x2000054c

08001bf8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	e00d      	b.n	8001c24 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <ssd1306_Fill+0x1a>
 8001c0e:	2100      	movs	r1, #0
 8001c10:	e000      	b.n	8001c14 <ssd1306_Fill+0x1c>
 8001c12:	21ff      	movs	r1, #255	; 0xff
 8001c14:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <ssd1306_Fill+0x40>)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	460a      	mov	r2, r1
 8001c1c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3301      	adds	r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c2a:	d3ed      	bcc.n	8001c08 <ssd1306_Fill+0x10>
	}
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	2000014c 	.word	0x2000014c

08001c3c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8001c42:	2300      	movs	r3, #0
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	e01d      	b.n	8001c84 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	3b50      	subs	r3, #80	; 0x50
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff4e 	bl	8001af0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff ff4b 	bl	8001af0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001c5a:	2010      	movs	r0, #16
 8001c5c:	f7ff ff48 	bl	8001af0 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	01db      	lsls	r3, r3, #7
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <ssd1306_UpdateScreen+0x58>)
 8001c66:	4413      	add	r3, r2
 8001c68:	2264      	movs	r2, #100	; 0x64
 8001c6a:	9202      	str	r2, [sp, #8]
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	9201      	str	r2, [sp, #4]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2301      	movs	r3, #1
 8001c74:	2240      	movs	r2, #64	; 0x40
 8001c76:	2178      	movs	r1, #120	; 0x78
 8001c78:	4807      	ldr	r0, [pc, #28]	; (8001c98 <ssd1306_UpdateScreen+0x5c>)
 8001c7a:	f003 fa39 	bl	80050f0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	3301      	adds	r3, #1
 8001c82:	71fb      	strb	r3, [r7, #7]
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	2b07      	cmp	r3, #7
 8001c88:	d9de      	bls.n	8001c48 <ssd1306_UpdateScreen+0xc>
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	2000014c 	.word	0x2000014c
 8001c98:	200005fc 	.word	0x200005fc

08001c9c <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	71bb      	strb	r3, [r7, #6]
 8001caa:	4613      	mov	r3, r2
 8001cac:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db48      	blt.n	8001d48 <ssd1306_DrawPixel+0xac>
 8001cb6:	79bb      	ldrb	r3, [r7, #6]
 8001cb8:	2b3f      	cmp	r3, #63	; 0x3f
 8001cba:	d845      	bhi.n	8001d48 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <ssd1306_DrawPixel+0xb8>)
 8001cbe:	791b      	ldrb	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8001cc4:	797b      	ldrb	r3, [r7, #5]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf0c      	ite	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2300      	movne	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8001cd2:	797b      	ldrb	r3, [r7, #5]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d11a      	bne.n	8001d0e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cd8:	79fa      	ldrb	r2, [r7, #7]
 8001cda:	79bb      	ldrb	r3, [r7, #6]
 8001cdc:	08db      	lsrs	r3, r3, #3
 8001cde:	b2d8      	uxtb	r0, r3
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	01db      	lsls	r3, r3, #7
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <ssd1306_DrawPixel+0xbc>)
 8001ce8:	5cd3      	ldrb	r3, [r2, r3]
 8001cea:	b25a      	sxtb	r2, r3
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b259      	sxtb	r1, r3
 8001cfe:	79fa      	ldrb	r2, [r7, #7]
 8001d00:	4603      	mov	r3, r0
 8001d02:	01db      	lsls	r3, r3, #7
 8001d04:	4413      	add	r3, r2
 8001d06:	b2c9      	uxtb	r1, r1
 8001d08:	4a13      	ldr	r2, [pc, #76]	; (8001d58 <ssd1306_DrawPixel+0xbc>)
 8001d0a:	54d1      	strb	r1, [r2, r3]
 8001d0c:	e01d      	b.n	8001d4a <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d0e:	79fa      	ldrb	r2, [r7, #7]
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	08db      	lsrs	r3, r3, #3
 8001d14:	b2d8      	uxtb	r0, r3
 8001d16:	4603      	mov	r3, r0
 8001d18:	01db      	lsls	r3, r3, #7
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <ssd1306_DrawPixel+0xbc>)
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
 8001d20:	b25a      	sxtb	r2, r3
 8001d22:	79bb      	ldrb	r3, [r7, #6]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	b25b      	sxtb	r3, r3
 8001d34:	4013      	ands	r3, r2
 8001d36:	b259      	sxtb	r1, r3
 8001d38:	79fa      	ldrb	r2, [r7, #7]
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	01db      	lsls	r3, r3, #7
 8001d3e:	4413      	add	r3, r2
 8001d40:	b2c9      	uxtb	r1, r1
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <ssd1306_DrawPixel+0xbc>)
 8001d44:	54d1      	strb	r1, [r2, r3]
 8001d46:	e000      	b.n	8001d4a <ssd1306_DrawPixel+0xae>
		return;
 8001d48:	bf00      	nop
	}
}
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	2000054c 	.word	0x2000054c
 8001d58:	2000014c 	.word	0x2000014c

08001d5c <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4604      	mov	r4, r0
 8001d64:	1d38      	adds	r0, r7, #4
 8001d66:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4623      	mov	r3, r4
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	4613      	mov	r3, r2
 8001d72:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <ssd1306_WriteChar+0xfc>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	793b      	ldrb	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d80:	dc06      	bgt.n	8001d90 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001d82:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <ssd1306_WriteChar+0xfc>)
 8001d84:	885b      	ldrh	r3, [r3, #2]
 8001d86:	461a      	mov	r2, r3
 8001d88:	797b      	ldrb	r3, [r7, #5]
 8001d8a:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001d8c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d8e:	dd01      	ble.n	8001d94 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e05d      	b.n	8001e50 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	e04c      	b.n	8001e34 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	3b20      	subs	r3, #32
 8001da0:	7979      	ldrb	r1, [r7, #5]
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4619      	mov	r1, r3
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	440b      	add	r3, r1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	e034      	b.n	8001e24 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d012      	beq.n	8001df0 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <ssd1306_WriteChar+0xfc>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b2d8      	uxtb	r0, r3
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <ssd1306_WriteChar+0xfc>)
 8001dda:	885b      	ldrh	r3, [r3, #2]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	7bba      	ldrb	r2, [r7, #14]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7ff ff57 	bl	8001c9c <ssd1306_DrawPixel>
 8001dee:	e016      	b.n	8001e1e <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <ssd1306_WriteChar+0xfc>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b2d8      	uxtb	r0, r3
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <ssd1306_WriteChar+0xfc>)
 8001e00:	885b      	ldrh	r3, [r3, #2]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	b2d9      	uxtb	r1, r3
 8001e0c:	7bbb      	ldrb	r3, [r7, #14]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bf0c      	ite	eq
 8001e12:	2301      	moveq	r3, #1
 8001e14:	2300      	movne	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f7ff ff3f 	bl	8001c9c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	3301      	adds	r3, #1
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	793b      	ldrb	r3, [r7, #4]
 8001e26:	461a      	mov	r2, r3
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d3c5      	bcc.n	8001dba <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	797b      	ldrb	r3, [r7, #5]
 8001e36:	461a      	mov	r2, r3
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d3ad      	bcc.n	8001d9a <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <ssd1306_WriteChar+0xfc>)
 8001e40:	881a      	ldrh	r2, [r3, #0]
 8001e42:	793b      	ldrb	r3, [r7, #4]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4413      	add	r3, r2
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <ssd1306_WriteChar+0xfc>)
 8001e4c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3724      	adds	r7, #36	; 0x24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd90      	pop	{r4, r7, pc}
 8001e58:	2000054c 	.word	0x2000054c

08001e5c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	1d38      	adds	r0, r7, #4
 8001e66:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e6a:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8001e6c:	e012      	b.n	8001e94 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	7818      	ldrb	r0, [r3, #0]
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	1d3a      	adds	r2, r7, #4
 8001e76:	ca06      	ldmia	r2, {r1, r2}
 8001e78:	f7ff ff70 	bl	8001d5c <ssd1306_WriteChar>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d002      	beq.n	8001e8e <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	e008      	b.n	8001ea0 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3301      	adds	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1e8      	bne.n	8001e6e <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	71fb      	strb	r3, [r7, #7]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <ssd1306_SetCursor+0x2c>)
 8001ebe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <ssd1306_SetCursor+0x2c>)
 8001ec6:	805a      	strh	r2, [r3, #2]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	2000054c 	.word	0x2000054c

08001ed8 <ssd1306_Line>:

void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4604      	mov	r4, r0
 8001ee0:	4608      	mov	r0, r1
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	71fb      	strb	r3, [r7, #7]
 8001eea:	4603      	mov	r3, r0
 8001eec:	71bb      	strb	r3, [r7, #6]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	717b      	strb	r3, [r7, #5]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8001ef6:	797a      	ldrb	r2, [r7, #5]
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bfb8      	it	lt
 8001f00:	425b      	neglt	r3, r3
 8001f02:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8001f04:	793a      	ldrb	r2, [r7, #4]
 8001f06:	79bb      	ldrb	r3, [r7, #6]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bfb8      	it	lt
 8001f0e:	425b      	neglt	r3, r3
 8001f10:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001f12:	79fa      	ldrb	r2, [r7, #7]
 8001f14:	797b      	ldrb	r3, [r7, #5]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d201      	bcs.n	8001f1e <ssd1306_Line+0x46>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e001      	b.n	8001f22 <ssd1306_Line+0x4a>
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f22:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8001f24:	79ba      	ldrb	r2, [r7, #6]
 8001f26:	793b      	ldrb	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d201      	bcs.n	8001f30 <ssd1306_Line+0x58>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e001      	b.n	8001f34 <ssd1306_Line+0x5c>
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f34:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 8001f3e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001f42:	7939      	ldrb	r1, [r7, #4]
 8001f44:	797b      	ldrb	r3, [r7, #5]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fea8 	bl	8001c9c <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8001f4c:	e024      	b.n	8001f98 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8001f4e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001f52:	79b9      	ldrb	r1, [r7, #6]
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fea0 	bl	8001c9c <ssd1306_DrawPixel>
    error2 = error * 2;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	425b      	negs	r3, r3
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	dd08      	ble.n	8001f7e <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	da08      	bge.n	8001f98 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	79bb      	ldrb	r3, [r7, #6]
 8001f94:	4413      	add	r3, r2
 8001f96:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8001f98:	79fa      	ldrb	r2, [r7, #7]
 8001f9a:	797b      	ldrb	r3, [r7, #5]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1d6      	bne.n	8001f4e <ssd1306_Line+0x76>
 8001fa0:	79ba      	ldrb	r2, [r7, #6]
 8001fa2:	793b      	ldrb	r3, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1d2      	bne.n	8001f4e <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8001fa8:	bf00      	nop
}
 8001faa:	3724      	adds	r7, #36	; 0x24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd90      	pop	{r4, r7, pc}

08001fb0 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4623      	mov	r3, r4
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71bb      	strb	r3, [r7, #6]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	717b      	strb	r3, [r7, #5]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8001fce:	79bc      	ldrb	r4, [r7, #6]
 8001fd0:	797a      	ldrb	r2, [r7, #5]
 8001fd2:	79b9      	ldrb	r1, [r7, #6]
 8001fd4:	79f8      	ldrb	r0, [r7, #7]
 8001fd6:	7e3b      	ldrb	r3, [r7, #24]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	4623      	mov	r3, r4
 8001fdc:	f7ff ff7c 	bl	8001ed8 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8001fe0:	793c      	ldrb	r4, [r7, #4]
 8001fe2:	797a      	ldrb	r2, [r7, #5]
 8001fe4:	79b9      	ldrb	r1, [r7, #6]
 8001fe6:	7978      	ldrb	r0, [r7, #5]
 8001fe8:	7e3b      	ldrb	r3, [r7, #24]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	4623      	mov	r3, r4
 8001fee:	f7ff ff73 	bl	8001ed8 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8001ff2:	793c      	ldrb	r4, [r7, #4]
 8001ff4:	79fa      	ldrb	r2, [r7, #7]
 8001ff6:	7939      	ldrb	r1, [r7, #4]
 8001ff8:	7978      	ldrb	r0, [r7, #5]
 8001ffa:	7e3b      	ldrb	r3, [r7, #24]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	4623      	mov	r3, r4
 8002000:	f7ff ff6a 	bl	8001ed8 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8002004:	79bc      	ldrb	r4, [r7, #6]
 8002006:	79fa      	ldrb	r2, [r7, #7]
 8002008:	7939      	ldrb	r1, [r7, #4]
 800200a:	79f8      	ldrb	r0, [r7, #7]
 800200c:	7e3b      	ldrb	r3, [r7, #24]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4623      	mov	r3, r4
 8002012:	f7ff ff61 	bl	8001ed8 <ssd1306_Line>

  return;
 8002016:	bf00      	nop
}
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}

0800201e <ssd1306FillRect>:
void ssd1306FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
 800201e:	b590      	push	{r4, r7, lr}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	4604      	mov	r4, r0
 8002026:	4608      	mov	r0, r1
 8002028:	4611      	mov	r1, r2
 800202a:	461a      	mov	r2, r3
 800202c:	4623      	mov	r3, r4
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	4603      	mov	r3, r0
 8002032:	71bb      	strb	r3, [r7, #6]
 8002034:	460b      	mov	r3, r1
 8002036:	717b      	strb	r3, [r7, #5]
 8002038:	4613      	mov	r3, r2
 800203a:	713b      	strb	r3, [r7, #4]
    uint8_t x0, x1, y1;

    x0 = x;
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	73fb      	strb	r3, [r7, #15]
    x1 = x + w;
 8002040:	79fa      	ldrb	r2, [r7, #7]
 8002042:	797b      	ldrb	r3, [r7, #5]
 8002044:	4413      	add	r3, r2
 8002046:	73bb      	strb	r3, [r7, #14]
    y1 = y + h;
 8002048:	79ba      	ldrb	r2, [r7, #6]
 800204a:	793b      	ldrb	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	737b      	strb	r3, [r7, #13]
    for(; y < y1; y++)
 8002050:	e013      	b.n	800207a <ssd1306FillRect+0x5c>
        for(x = x0; x < x1; x++)
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	71fb      	strb	r3, [r7, #7]
 8002056:	e009      	b.n	800206c <ssd1306FillRect+0x4e>
        	ssd1306_DrawPixel(x, y, color);
 8002058:	8c3b      	ldrh	r3, [r7, #32]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	79b9      	ldrb	r1, [r7, #6]
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fe1b 	bl	8001c9c <ssd1306_DrawPixel>
        for(x = x0; x < x1; x++)
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	3301      	adds	r3, #1
 800206a:	71fb      	strb	r3, [r7, #7]
 800206c:	79fa      	ldrb	r2, [r7, #7]
 800206e:	7bbb      	ldrb	r3, [r7, #14]
 8002070:	429a      	cmp	r2, r3
 8002072:	d3f1      	bcc.n	8002058 <ssd1306FillRect+0x3a>
    for(; y < y1; y++)
 8002074:	79bb      	ldrb	r3, [r7, #6]
 8002076:	3301      	adds	r3, #1
 8002078:	71bb      	strb	r3, [r7, #6]
 800207a:	79ba      	ldrb	r2, [r7, #6]
 800207c:	7b7b      	ldrb	r3, [r7, #13]
 800207e:	429a      	cmp	r2, r3
 8002080:	d3e7      	bcc.n	8002052 <ssd1306FillRect+0x34>
            //ssd1306DrawPixel( x, y, color, layer);
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bd90      	pop	{r4, r7, pc}

0800208c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <DelayMicro+0x3c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <DelayMicro+0x3c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <DelayMicro+0x40>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	0ddb      	lsrs	r3, r3, #23
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	607b      	str	r3, [r7, #4]
	while (micros--);
 80020ae:	bf00      	nop
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	1e5a      	subs	r2, r3, #1
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1fa      	bne.n	80020b0 <DelayMicro+0x24>
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000024 	.word	0x20000024
 80020cc:	ffa71ee7 	.word	0xffa71ee7

080020d0 <am2302_measure>:
{
	HAL_Delay(2000); 							// First init must be 2 seconds delay
}
//----------------------------------------------------------------------------------------
void am2302_measure(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 * __                ________________________
 * 	 \			    /				         \
 * 	  \____________/			              \_
 */

	bool get_data_status = false;
 80020d6:	2300      	movs	r3, #0
 80020d8:	76fb      	strb	r3, [r7, #27]
	int j = 0;   							// Counter bytes
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;								// Counter bits
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
	float temper, hum;						// Buffer variables

	// Init GPIO like output
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 80020e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ea:	4883      	ldr	r0, [pc, #524]	; (80022f8 <am2302_measure+0x228>)
 80020ec:	f002 fda0 	bl	8004c30 <HAL_GPIO_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};		// Make struct
 80020f0:	463b      	mov	r3, r7
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002100:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002106:	2302      	movs	r3, #2
 8002108:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210a:	463b      	mov	r3, r7
 800210c:	4619      	mov	r1, r3
 800210e:	487a      	ldr	r0, [pc, #488]	; (80022f8 <am2302_measure+0x228>)
 8002110:	f002 fc0a 	bl	8004928 <HAL_GPIO_Init>

	// Make output pin B12
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800211a:	4877      	ldr	r0, [pc, #476]	; (80022f8 <am2302_measure+0x228>)
 800211c:	f002 fe5b 	bl	8004dd6 <HAL_GPIO_WritePin>
	DelayMicro(18000);
 8002120:	f244 6050 	movw	r0, #18000	; 0x4650
 8002124:	f7ff ffb2 	bl	800208c <DelayMicro>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002128:	2201      	movs	r2, #1
 800212a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800212e:	4872      	ldr	r0, [pc, #456]	; (80022f8 <am2302_measure+0x228>)
 8002130:	f002 fe51 	bl	8004dd6 <HAL_GPIO_WritePin>
	DelayMicro(39);
 8002134:	2027      	movs	r0, #39	; 0x27
 8002136:	f7ff ffa9 	bl	800208c <DelayMicro>

	// Make input pin B12
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 800213a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800213e:	486e      	ldr	r0, [pc, #440]	; (80022f8 <am2302_measure+0x228>)
 8002140:	f002 fd76 	bl	8004c30 <HAL_GPIO_DeInit>
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002148:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214e:	2301      	movs	r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	463b      	mov	r3, r7
 8002154:	4619      	mov	r1, r3
 8002156:	4868      	ldr	r0, [pc, #416]	; (80022f8 <am2302_measure+0x228>)
 8002158:	f002 fbe6 	bl	8004928 <HAL_GPIO_Init>

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
 800215c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002160:	4865      	ldr	r0, [pc, #404]	; (80022f8 <am2302_measure+0x228>)
 8002162:	f002 fe21 	bl	8004da8 <HAL_GPIO_ReadPin>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d004      	beq.n	8002176 <am2302_measure+0xa6>
	{
		am3202_sensor.status = error_state; 					// Error. Sensor not response
 800216c:	4b63      	ldr	r3, [pc, #396]	; (80022fc <am2302_measure+0x22c>)
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	4b63      	ldr	r3, [pc, #396]	; (8002300 <am2302_measure+0x230>)
 8002172:	721a      	strb	r2, [r3, #8]
 8002174:	e003      	b.n	800217e <am2302_measure+0xae>
	}
	else
	{
		am3202_sensor.status = ready_to_work;
 8002176:	4b63      	ldr	r3, [pc, #396]	; (8002304 <am2302_measure+0x234>)
 8002178:	781a      	ldrb	r2, [r3, #0]
 800217a:	4b61      	ldr	r3, [pc, #388]	; (8002300 <am2302_measure+0x230>)
 800217c:	721a      	strb	r2, [r3, #8]
	}

	DelayMicro(80);
 800217e:	2050      	movs	r0, #80	; 0x50
 8002180:	f7ff ff84 	bl	800208c <DelayMicro>
	if(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)))
 8002184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002188:	485b      	ldr	r0, [pc, #364]	; (80022f8 <am2302_measure+0x228>)
 800218a:	f002 fe0d 	bl	8004da8 <HAL_GPIO_ReadPin>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <am2302_measure+0xce>
	{
		am3202_sensor.status = error_state; 					// Error. Sensor not response
 8002194:	4b59      	ldr	r3, [pc, #356]	; (80022fc <am2302_measure+0x22c>)
 8002196:	781a      	ldrb	r2, [r3, #0]
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <am2302_measure+0x230>)
 800219a:	721a      	strb	r2, [r3, #8]
 800219c:	e003      	b.n	80021a6 <am2302_measure+0xd6>
	}
	else
	{
		am3202_sensor.status = ready_to_work;
 800219e:	4b59      	ldr	r3, [pc, #356]	; (8002304 <am2302_measure+0x234>)
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	4b57      	ldr	r3, [pc, #348]	; (8002300 <am2302_measure+0x230>)
 80021a4:	721a      	strb	r2, [r3, #8]
	}

	DelayMicro(80);
 80021a6:	2050      	movs	r0, #80	; 0x50
 80021a8:	f7ff ff70 	bl	800208c <DelayMicro>

	if(am3202_sensor.status == ready_to_work)
 80021ac:	4b54      	ldr	r3, [pc, #336]	; (8002300 <am2302_measure+0x230>)
 80021ae:	7a1a      	ldrb	r2, [r3, #8]
 80021b0:	4b54      	ldr	r3, [pc, #336]	; (8002304 <am2302_measure+0x234>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	f040 8096 	bne.w	80022e6 <am2302_measure+0x216>
	{
		for(j = 0; j <5; j++)							// Reading 5 bytes
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	e04f      	b.n	8002260 <am2302_measure+0x190>
		{
			data[4-j] = 0;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	f1c3 0304 	rsb	r3, r3, #4
 80021c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ca:	4413      	add	r3, r2
 80021cc:	2200      	movs	r2, #0
 80021ce:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(i = 0; i < 8; i++)						// Reading 8 bits
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
 80021d6:	e03a      	b.n	800224e <am2302_measure+0x17e>
			{

				while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)));    // While signal is "0"
 80021d8:	bf00      	nop
 80021da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021de:	4846      	ldr	r0, [pc, #280]	; (80022f8 <am2302_measure+0x228>)
 80021e0:	f002 fde2 	bl	8004da8 <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f7      	beq.n	80021da <am2302_measure+0x10a>
				DelayMicro(30);
 80021ea:	201e      	movs	r0, #30
 80021ec:	f7ff ff4e 	bl	800208c <DelayMicro>

				if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))   // If signal is high when wrute "1" in buffer (data[])
 80021f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f4:	4840      	ldr	r0, [pc, #256]	; (80022f8 <am2302_measure+0x228>)
 80021f6:	f002 fdd7 	bl	8004da8 <HAL_GPIO_ReadPin>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01a      	beq.n	8002236 <am2302_measure+0x166>
				{
					data[4-j] |= (1 << (7 - i));        // Shift received bite
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	f1c3 0304 	rsb	r3, r3, #4
 8002206:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800220a:	4413      	add	r3, r2
 800220c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002210:	b25a      	sxtb	r2, r3
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	f1c3 0307 	rsb	r3, r3, #7
 8002218:	2101      	movs	r1, #1
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	b25b      	sxtb	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b25a      	sxtb	r2, r3
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	f1c3 0304 	rsb	r3, r3, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002230:	440b      	add	r3, r1
 8002232:	f803 2c18 	strb.w	r2, [r3, #-24]
				}

				while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12));		// Wait end of "1" signal
 8002236:	bf00      	nop
 8002238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800223c:	482e      	ldr	r0, [pc, #184]	; (80022f8 <am2302_measure+0x228>)
 800223e:	f002 fdb3 	bl	8004da8 <HAL_GPIO_ReadPin>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f7      	bne.n	8002238 <am2302_measure+0x168>
			for(i = 0; i < 8; i++)						// Reading 8 bits
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	3301      	adds	r3, #1
 800224c:	623b      	str	r3, [r7, #32]
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	2b07      	cmp	r3, #7
 8002252:	ddc1      	ble.n	80021d8 <am2302_measure+0x108>
			}
			am3202_sensor.status = true;										// Data was been written okay
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <am2302_measure+0x230>)
 8002256:	2201      	movs	r2, #1
 8002258:	721a      	strb	r2, [r3, #8]
		for(j = 0; j <5; j++)							// Reading 5 bytes
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	3301      	adds	r3, #1
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	2b04      	cmp	r3, #4
 8002264:	ddac      	ble.n	80021c0 <am2302_measure+0xf0>
		}

		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	3301      	adds	r3, #1
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fa38 	bl	80006e8 <__aeabi_i2f>
 8002278:	4603      	mov	r3, r0
 800227a:	4923      	ldr	r1, [pc, #140]	; (8002308 <am2302_measure+0x238>)
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fb3b 	bl	80008f8 <__aeabi_fdiv>
 8002282:	4603      	mov	r3, r0
 8002284:	61fb      	str	r3, [r7, #28]
		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	3301      	adds	r3, #1
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b21b      	sxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	da0c      	bge.n	80022ae <am2302_measure+0x1de>
 8002294:	69f8      	ldr	r0, [r7, #28]
 8002296:	f7fe f8c5 	bl	8000424 <__aeabi_f2d>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	f7fe f917 	bl	80004d4 <__aeabi_d2f>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80022ac:	61fb      	str	r3, [r7, #28]
		am3202_sensor.temterature = temper;
 80022ae:	69f8      	ldr	r0, [r7, #28]
 80022b0:	f7fe fbbe 	bl	8000a30 <__aeabi_f2iz>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <am2302_measure+0x230>)
 80022b8:	6013      	str	r3, [r2, #0]

		hum = (float)(*(int16_t*)(data+3)) / 10;
 80022ba:	f107 0310 	add.w	r3, r7, #16
 80022be:	3303      	adds	r3, #3
 80022c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe fa0f 	bl	80006e8 <__aeabi_i2f>
 80022ca:	4603      	mov	r3, r0
 80022cc:	490e      	ldr	r1, [pc, #56]	; (8002308 <am2302_measure+0x238>)
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fb12 	bl	80008f8 <__aeabi_fdiv>
 80022d4:	4603      	mov	r3, r0
 80022d6:	617b      	str	r3, [r7, #20]
		am3202_sensor.humidity = hum;
 80022d8:	6978      	ldr	r0, [r7, #20]
 80022da:	f7fe fba9 	bl	8000a30 <__aeabi_f2iz>
 80022de:	4603      	mov	r3, r0
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <am2302_measure+0x230>)
 80022e2:	6053      	str	r3, [r2, #4]
	else
	{
		am3202_sensor.status = error_state;
		// PRINT MESSAGE ON OLLED <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}
}
 80022e4:	e003      	b.n	80022ee <am2302_measure+0x21e>
		am3202_sensor.status = error_state;
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <am2302_measure+0x22c>)
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	4b05      	ldr	r3, [pc, #20]	; (8002300 <am2302_measure+0x230>)
 80022ec:	721a      	strb	r2, [r3, #8]
}
 80022ee:	bf00      	nop
 80022f0:	3728      	adds	r7, #40	; 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40010c00 	.word	0x40010c00
 80022fc:	20000552 	.word	0x20000552
 8002300:	200005ac 	.word	0x200005ac
 8002304:	2000001c 	.word	0x2000001c
 8002308:	41200000 	.word	0x41200000

0800230c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002310:	f002 f8c6 	bl	80044a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002314:	f000 f828 	bl	8002368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002318:	f000 f9c0 	bl	800269c <MX_GPIO_Init>
  MX_I2C1_Init();
 800231c:	f000 f86a 	bl	80023f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002320:	f000 f896 	bl	8002450 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002324:	f000 f966 	bl	80025f4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002328:	f000 f8c8 	bl	80024bc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800232c:	f000 f98c 	bl	8002648 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002330:	f000 f914 	bl	800255c <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002334:	2201      	movs	r2, #1
 8002336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800233a:	480a      	ldr	r0, [pc, #40]	; (8002364 <main+0x58>)
 800233c:	f002 fd4b 	bl	8004dd6 <HAL_GPIO_WritePin>

  // Init interrupt (For LoRa)
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	2025      	movs	r0, #37	; 0x25
 8002346:	f002 fa08 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800234a:	2025      	movs	r0, #37	; 0x25
 800234c:	f002 fa21 	bl	8004792 <HAL_NVIC_EnableIRQ>

//  HAL_TIM_Base_Start_IT(&htim2);	// For sensor measure

  // OLED init
  ssd1306_Init();
 8002350:	f7ff fbe6 	bl	8001b20 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002354:	2000      	movs	r0, #0
 8002356:	f7ff fc4f 	bl	8001bf8 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800235a:	f7ff fc6f 	bl	8001c3c <ssd1306_UpdateScreen>

  while (1)
  {
	 menu();
 800235e:	f000 ffc1 	bl	80032e4 <menu>
 8002362:	e7fc      	b.n	800235e <main+0x52>
 8002364:	40011000 	.word	0x40011000

08002368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b090      	sub	sp, #64	; 0x40
 800236c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236e:	f107 0318 	add.w	r3, r7, #24
 8002372:	2228      	movs	r2, #40	; 0x28
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f005 fc7a 	bl	8007c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800238a:	2301      	movs	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800238e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002392:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002398:	2301      	movs	r3, #1
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800239c:	2302      	movs	r3, #2
 800239e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80023a6:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ac:	f107 0318 	add.w	r3, r7, #24
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 f9b3 	bl	800571c <HAL_RCC_OscConfig>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80023bc:	f000 fa96 	bl	80028ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c0:	230f      	movs	r3, #15
 80023c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c4:	2302      	movs	r3, #2
 80023c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	2102      	movs	r1, #2
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 fc1e 	bl	8005c1c <HAL_RCC_ClockConfig>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80023e6:	f000 fa81 	bl	80028ec <Error_Handler>
  }
}
 80023ea:	bf00      	nop
 80023ec:	3740      	adds	r7, #64	; 0x40
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <MX_I2C1_Init+0x50>)
 80023fa:	4a13      	ldr	r2, [pc, #76]	; (8002448 <MX_I2C1_Init+0x54>)
 80023fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <MX_I2C1_Init+0x50>)
 8002400:	4a12      	ldr	r2, [pc, #72]	; (800244c <MX_I2C1_Init+0x58>)
 8002402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <MX_I2C1_Init+0x50>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <MX_I2C1_Init+0x50>)
 800240c:	2200      	movs	r2, #0
 800240e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <MX_I2C1_Init+0x50>)
 8002412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002416:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002418:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <MX_I2C1_Init+0x50>)
 800241a:	2200      	movs	r2, #0
 800241c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <MX_I2C1_Init+0x50>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <MX_I2C1_Init+0x50>)
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <MX_I2C1_Init+0x50>)
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002430:	4804      	ldr	r0, [pc, #16]	; (8002444 <MX_I2C1_Init+0x50>)
 8002432:	f002 fd19 	bl	8004e68 <HAL_I2C_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800243c:	f000 fa56 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200005fc 	.word	0x200005fc
 8002448:	40005400 	.word	0x40005400
 800244c:	00061a80 	.word	0x00061a80

08002450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002456:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <MX_SPI1_Init+0x68>)
 8002458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <MX_SPI1_Init+0x64>)
 800245c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <MX_SPI1_Init+0x64>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_SPI1_Init+0x64>)
 800247c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002480:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002484:	2220      	movs	r2, #32
 8002486:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <MX_SPI1_Init+0x64>)
 800248a:	2200      	movs	r2, #0
 800248c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002490:	2200      	movs	r2, #0
 8002492:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002496:	2200      	movs	r2, #0
 8002498:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_SPI1_Init+0x64>)
 800249c:	220a      	movs	r2, #10
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <MX_SPI1_Init+0x64>)
 80024a2:	f003 fd55 	bl	8005f50 <HAL_SPI_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024ac:	f000 fa1e 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200006dc 	.word	0x200006dc
 80024b8:	40013000 	.word	0x40013000

080024bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024c2:	f107 0308 	add.w	r3, r7, #8
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d0:	463b      	mov	r3, r7
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024d8:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <MX_TIM1_Init+0x98>)
 80024da:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <MX_TIM1_Init+0x9c>)
 80024dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <MX_TIM1_Init+0x98>)
 80024e0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80024e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e6:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <MX_TIM1_Init+0x98>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <MX_TIM1_Init+0x98>)
 80024ee:	2264      	movs	r2, #100	; 0x64
 80024f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f2:	4b18      	ldr	r3, [pc, #96]	; (8002554 <MX_TIM1_Init+0x98>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <MX_TIM1_Init+0x98>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <MX_TIM1_Init+0x98>)
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002504:	4813      	ldr	r0, [pc, #76]	; (8002554 <MX_TIM1_Init+0x98>)
 8002506:	f004 fa8f 	bl	8006a28 <HAL_TIM_Base_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002510:	f000 f9ec 	bl	80028ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002518:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800251a:	f107 0308 	add.w	r3, r7, #8
 800251e:	4619      	mov	r1, r3
 8002520:	480c      	ldr	r0, [pc, #48]	; (8002554 <MX_TIM1_Init+0x98>)
 8002522:	f004 fc59 	bl	8006dd8 <HAL_TIM_ConfigClockSource>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800252c:	f000 f9de 	bl	80028ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002530:	2310      	movs	r3, #16
 8002532:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002538:	463b      	mov	r3, r7
 800253a:	4619      	mov	r1, r3
 800253c:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_TIM1_Init+0x98>)
 800253e:	f004 fe35 	bl	80071ac <HAL_TIMEx_MasterConfigSynchronization>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002548:	f000 f9d0 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800254c:	bf00      	nop
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000694 	.word	0x20000694
 8002558:	40012c00 	.word	0x40012c00

0800255c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002570:	463b      	mov	r3, r7
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <MX_TIM2_Init+0x94>)
 800257a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800257e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400;
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <MX_TIM2_Init+0x94>)
 8002582:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8002586:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <MX_TIM2_Init+0x94>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800258e:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <MX_TIM2_Init+0x94>)
 8002590:	2264      	movs	r2, #100	; 0x64
 8002592:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002594:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <MX_TIM2_Init+0x94>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <MX_TIM2_Init+0x94>)
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025a0:	4813      	ldr	r0, [pc, #76]	; (80025f0 <MX_TIM2_Init+0x94>)
 80025a2:	f004 fa41 	bl	8006a28 <HAL_TIM_Base_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025ac:	f000 f99e 	bl	80028ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	4619      	mov	r1, r3
 80025bc:	480c      	ldr	r0, [pc, #48]	; (80025f0 <MX_TIM2_Init+0x94>)
 80025be:	f004 fc0b 	bl	8006dd8 <HAL_TIM_ConfigClockSource>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80025c8:	f000 f990 	bl	80028ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80025cc:	2310      	movs	r3, #16
 80025ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025d4:	463b      	mov	r3, r7
 80025d6:	4619      	mov	r1, r3
 80025d8:	4805      	ldr	r0, [pc, #20]	; (80025f0 <MX_TIM2_Init+0x94>)
 80025da:	f004 fde7 	bl	80071ac <HAL_TIMEx_MasterConfigSynchronization>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025e4:	f000 f982 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025e8:	bf00      	nop
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000734 	.word	0x20000734

080025f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <MX_USART1_UART_Init+0x50>)
 80025fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 8002600:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 800260e:	2200      	movs	r2, #0
 8002610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 800261a:	220c      	movs	r2, #12
 800261c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800262a:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_USART1_UART_Init+0x4c>)
 800262c:	f004 fe2e 	bl	800728c <HAL_UART_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002636:	f000 f959 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000650 	.word	0x20000650
 8002644:	40013800 	.word	0x40013800

08002648 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <MX_USART3_UART_Init+0x4c>)
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <MX_USART3_UART_Init+0x50>)
 8002650:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <MX_USART3_UART_Init+0x4c>)
 8002654:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002658:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <MX_USART3_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <MX_USART3_UART_Init+0x4c>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <MX_USART3_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <MX_USART3_UART_Init+0x4c>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <MX_USART3_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <MX_USART3_UART_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <MX_USART3_UART_Init+0x4c>)
 8002680:	f004 fe04 	bl	800728c <HAL_UART_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800268a:	f000 f92f 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200005b8 	.word	0x200005b8
 8002698:	40004800 	.word	0x40004800

0800269c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a2:	f107 0310 	add.w	r3, r7, #16
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b0:	4b5f      	ldr	r3, [pc, #380]	; (8002830 <MX_GPIO_Init+0x194>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a5e      	ldr	r2, [pc, #376]	; (8002830 <MX_GPIO_Init+0x194>)
 80026b6:	f043 0310 	orr.w	r3, r3, #16
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b5c      	ldr	r3, [pc, #368]	; (8002830 <MX_GPIO_Init+0x194>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <MX_GPIO_Init+0x194>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4a58      	ldr	r2, [pc, #352]	; (8002830 <MX_GPIO_Init+0x194>)
 80026ce:	f043 0320 	orr.w	r3, r3, #32
 80026d2:	6193      	str	r3, [r2, #24]
 80026d4:	4b56      	ldr	r3, [pc, #344]	; (8002830 <MX_GPIO_Init+0x194>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e0:	4b53      	ldr	r3, [pc, #332]	; (8002830 <MX_GPIO_Init+0x194>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4a52      	ldr	r2, [pc, #328]	; (8002830 <MX_GPIO_Init+0x194>)
 80026e6:	f043 0304 	orr.w	r3, r3, #4
 80026ea:	6193      	str	r3, [r2, #24]
 80026ec:	4b50      	ldr	r3, [pc, #320]	; (8002830 <MX_GPIO_Init+0x194>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f8:	4b4d      	ldr	r3, [pc, #308]	; (8002830 <MX_GPIO_Init+0x194>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4a4c      	ldr	r2, [pc, #304]	; (8002830 <MX_GPIO_Init+0x194>)
 80026fe:	f043 0308 	orr.w	r3, r3, #8
 8002702:	6193      	str	r3, [r2, #24]
 8002704:	4b4a      	ldr	r3, [pc, #296]	; (8002830 <MX_GPIO_Init+0x194>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002710:	2200      	movs	r2, #0
 8002712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002716:	4847      	ldr	r0, [pc, #284]	; (8002834 <MX_GPIO_Init+0x198>)
 8002718:	f002 fb5d 	bl	8004dd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800271c:	2200      	movs	r2, #0
 800271e:	2108      	movs	r1, #8
 8002720:	4845      	ldr	r0, [pc, #276]	; (8002838 <MX_GPIO_Init+0x19c>)
 8002722:	f002 fb58 	bl	8004dd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002726:	2201      	movs	r2, #1
 8002728:	2110      	movs	r1, #16
 800272a:	4843      	ldr	r0, [pc, #268]	; (8002838 <MX_GPIO_Init+0x19c>)
 800272c:	f002 fb53 	bl	8004dd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8002730:	2200      	movs	r2, #0
 8002732:	f242 0101 	movw	r1, #8193	; 0x2001
 8002736:	4841      	ldr	r0, [pc, #260]	; (800283c <MX_GPIO_Init+0x1a0>)
 8002738:	f002 fb4d 	bl	8004dd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800273c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002742:	2301      	movs	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2302      	movs	r3, #2
 800274c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	4619      	mov	r1, r3
 8002754:	4837      	ldr	r0, [pc, #220]	; (8002834 <MX_GPIO_Init+0x198>)
 8002756:	f002 f8e7 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800275a:	2304      	movs	r3, #4
 800275c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800275e:	4b38      	ldr	r3, [pc, #224]	; (8002840 <MX_GPIO_Init+0x1a4>)
 8002760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002766:	f107 0310 	add.w	r3, r7, #16
 800276a:	4619      	mov	r1, r3
 800276c:	4832      	ldr	r0, [pc, #200]	; (8002838 <MX_GPIO_Init+0x19c>)
 800276e:	f002 f8db 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002772:	2318      	movs	r3, #24
 8002774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002776:	2301      	movs	r3, #1
 8002778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	f107 0310 	add.w	r3, r7, #16
 8002786:	4619      	mov	r1, r3
 8002788:	482b      	ldr	r0, [pc, #172]	; (8002838 <MX_GPIO_Init+0x19c>)
 800278a:	f002 f8cd 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 800278e:	f242 0301 	movw	r3, #8193	; 0x2001
 8002792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002794:	2301      	movs	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2302      	movs	r3, #2
 800279e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	4619      	mov	r1, r3
 80027a6:	4825      	ldr	r0, [pc, #148]	; (800283c <MX_GPIO_Init+0x1a0>)
 80027a8:	f002 f8be 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 80027ac:	2302      	movs	r3, #2
 80027ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	4619      	mov	r1, r3
 80027be:	481f      	ldr	r0, [pc, #124]	; (800283c <MX_GPIO_Init+0x1a0>)
 80027c0:	f002 f8b2 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80027c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80027c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <MX_GPIO_Init+0x1a4>)
 80027cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ce:	2301      	movs	r3, #1
 80027d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4619      	mov	r1, r3
 80027d8:	4818      	ldr	r0, [pc, #96]	; (800283c <MX_GPIO_Init+0x1a0>)
 80027da:	f002 f8a5 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <MX_GPIO_Init+0x1a4>)
 80027e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	4619      	mov	r1, r3
 80027f2:	4811      	ldr	r0, [pc, #68]	; (8002838 <MX_GPIO_Init+0x19c>)
 80027f4:	f002 f898 	bl	8004928 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2100      	movs	r1, #0
 80027fc:	2008      	movs	r0, #8
 80027fe:	f001 ffac 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002802:	2008      	movs	r0, #8
 8002804:	f001 ffc5 	bl	8004792 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002808:	2200      	movs	r2, #0
 800280a:	2100      	movs	r1, #0
 800280c:	2017      	movs	r0, #23
 800280e:	f001 ffa4 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002812:	2017      	movs	r0, #23
 8002814:	f001 ffbd 	bl	8004792 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	2028      	movs	r0, #40	; 0x28
 800281e:	f001 ff9c 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002822:	2028      	movs	r0, #40	; 0x28
 8002824:	f001 ffb5 	bl	8004792 <HAL_NVIC_EnableIRQ>

}
 8002828:	bf00      	nop
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	40011000 	.word	0x40011000
 8002838:	40010800 	.word	0x40010800
 800283c:	40010c00 	.word	0x40010c00
 8002840:	10210000 	.word	0x10210000

08002844 <HAL_GPIO_EXTI_Callback>:
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);

}
//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2   (IRQ from NRF module)
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	2b04      	cmp	r3, #4
 8002852:	d108      	bne.n	8002866 <HAL_GPIO_EXTI_Callback+0x22>
  {
	  if(tx_or_rx_mode == rx_mode)
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_GPIO_EXTI_Callback+0x30>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d103      	bne.n	8002868 <HAL_GPIO_EXTI_Callback+0x24>
	  {
		  IRQ_Callback();					// Call Callback
 8002860:	f7fe fcd0 	bl	8001204 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8002864:	e000      	b.n	8002868 <HAL_GPIO_EXTI_Callback+0x24>
    __NOP();
 8002866:	bf00      	nop
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000003 	.word	0x20000003
 8002874:	20000106 	.word	0x20000106

08002878 <HAL_UART_RxCpltCallback>:
//----------------------------------------------------------------------------------------
// Receive data from LoRa module
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <HAL_UART_RxCpltCallback+0x60>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d123      	bne.n	80028d0 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <HAL_UART_RxCpltCallback+0x64>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_UART_RxCpltCallback+0x20>
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <HAL_UART_RxCpltCallback+0x68>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b31      	cmp	r3, #49	; 0x31
 8002896:	d906      	bls.n	80028a6 <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_UART_RxCpltCallback+0x6c>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_UART_RxCpltCallback+0x68>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 80028a4:	e014      	b.n	80028d0 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_UART_RxCpltCallback+0x6c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_UART_RxCpltCallback+0x68>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_UART_RxCpltCallback+0x64>)
 80028b4:	7819      	ldrb	r1, [r3, #0]
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_UART_RxCpltCallback+0x70>)
 80028b8:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 80028ba:	2201      	movs	r2, #1
 80028bc:	4907      	ldr	r1, [pc, #28]	; (80028dc <HAL_UART_RxCpltCallback+0x64>)
 80028be:	4806      	ldr	r0, [pc, #24]	; (80028d8 <HAL_UART_RxCpltCallback+0x60>)
 80028c0:	f004 fd75 	bl	80073ae <HAL_UART_Receive_IT>
			rx_data_counter ++;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_UART_RxCpltCallback+0x68>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	3301      	adds	r3, #1
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <HAL_UART_RxCpltCallback+0x68>)
 80028ce:	701a      	strb	r2, [r3, #0]
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000650 	.word	0x20000650
 80028dc:	20000588 	.word	0x20000588
 80028e0:	2000058a 	.word	0x2000058a
 80028e4:	20000589 	.word	0x20000589
 80028e8:	20000554 	.word	0x20000554

080028ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028f0:	b672      	cpsid	i
}
 80028f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <Error_Handler+0x8>
	...

080028f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_MspInit+0x5c>)
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	4a14      	ldr	r2, [pc, #80]	; (8002954 <HAL_MspInit+0x5c>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6193      	str	r3, [r2, #24]
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_MspInit+0x5c>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HAL_MspInit+0x5c>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <HAL_MspInit+0x5c>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002920:	61d3      	str	r3, [r2, #28]
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_MspInit+0x5c>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_MspInit+0x60>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	4a04      	ldr	r2, [pc, #16]	; (8002958 <HAL_MspInit+0x60>)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr
 8002954:	40021000 	.word	0x40021000
 8002958:	40010000 	.word	0x40010000

0800295c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 0310 	add.w	r3, r7, #16
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a15      	ldr	r2, [pc, #84]	; (80029cc <HAL_I2C_MspInit+0x70>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d123      	bne.n	80029c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_I2C_MspInit+0x74>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <HAL_I2C_MspInit+0x74>)
 8002982:	f043 0308 	orr.w	r3, r3, #8
 8002986:	6193      	str	r3, [r2, #24]
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_I2C_MspInit+0x74>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002994:	23c0      	movs	r3, #192	; 0xc0
 8002996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002998:	2312      	movs	r3, #18
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	4619      	mov	r1, r3
 80029a6:	480b      	ldr	r0, [pc, #44]	; (80029d4 <HAL_I2C_MspInit+0x78>)
 80029a8:	f001 ffbe 	bl	8004928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_I2C_MspInit+0x74>)
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <HAL_I2C_MspInit+0x74>)
 80029b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b6:	61d3      	str	r3, [r2, #28]
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_I2C_MspInit+0x74>)
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029c4:	bf00      	nop
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40005400 	.word	0x40005400
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40010c00 	.word	0x40010c00

080029d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <HAL_SPI_MspInit+0x88>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d12f      	bne.n	8002a58 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_SPI_MspInit+0x8c>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <HAL_SPI_MspInit+0x8c>)
 80029fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a02:	6193      	str	r3, [r2, #24]
 8002a04:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <HAL_SPI_MspInit+0x8c>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_SPI_MspInit+0x8c>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <HAL_SPI_MspInit+0x8c>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6193      	str	r3, [r2, #24]
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_SPI_MspInit+0x8c>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a28:	23a0      	movs	r3, #160	; 0xa0
 8002a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f107 0310 	add.w	r3, r7, #16
 8002a38:	4619      	mov	r1, r3
 8002a3a:	480b      	ldr	r0, [pc, #44]	; (8002a68 <HAL_SPI_MspInit+0x90>)
 8002a3c:	f001 ff74 	bl	8004928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a40:	2340      	movs	r3, #64	; 0x40
 8002a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4c:	f107 0310 	add.w	r3, r7, #16
 8002a50:	4619      	mov	r1, r3
 8002a52:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_SPI_MspInit+0x90>)
 8002a54:	f001 ff68 	bl	8004928 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a58:	bf00      	nop
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40013000 	.word	0x40013000
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40010800 	.word	0x40010800

08002a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <HAL_TIM_Base_MspInit+0x78>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d114      	bne.n	8002aa8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <HAL_TIM_Base_MspInit+0x7c>)
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_TIM_Base_MspInit+0x7c>)
 8002a84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a88:	6193      	str	r3, [r2, #24]
 8002a8a:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <HAL_TIM_Base_MspInit+0x7c>)
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2019      	movs	r0, #25
 8002a9c:	f001 fe5d 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002aa0:	2019      	movs	r0, #25
 8002aa2:	f001 fe76 	bl	8004792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002aa6:	e018      	b.n	8002ada <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d113      	bne.n	8002ada <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_TIM_Base_MspInit+0x7c>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <HAL_TIM_Base_MspInit+0x7c>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	61d3      	str	r3, [r2, #28]
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_TIM_Base_MspInit+0x7c>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	201c      	movs	r0, #28
 8002ad0:	f001 fe43 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ad4:	201c      	movs	r0, #28
 8002ad6:	f001 fe5c 	bl	8004792 <HAL_NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40021000 	.word	0x40021000

08002aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0318 	add.w	r3, r7, #24
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a3c      	ldr	r2, [pc, #240]	; (8002bf8 <HAL_UART_MspInit+0x10c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d13a      	bne.n	8002b82 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <HAL_UART_MspInit+0x110>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	4a3a      	ldr	r2, [pc, #232]	; (8002bfc <HAL_UART_MspInit+0x110>)
 8002b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b16:	6193      	str	r3, [r2, #24]
 8002b18:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <HAL_UART_MspInit+0x110>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b24:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <HAL_UART_MspInit+0x110>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4a34      	ldr	r2, [pc, #208]	; (8002bfc <HAL_UART_MspInit+0x110>)
 8002b2a:	f043 0304 	orr.w	r3, r3, #4
 8002b2e:	6193      	str	r3, [r2, #24]
 8002b30:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <HAL_UART_MspInit+0x110>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0318 	add.w	r3, r7, #24
 8002b4e:	4619      	mov	r1, r3
 8002b50:	482b      	ldr	r0, [pc, #172]	; (8002c00 <HAL_UART_MspInit+0x114>)
 8002b52:	f001 fee9 	bl	8004928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 0318 	add.w	r3, r7, #24
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4825      	ldr	r0, [pc, #148]	; (8002c00 <HAL_UART_MspInit+0x114>)
 8002b6c:	f001 fedc 	bl	8004928 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2101      	movs	r1, #1
 8002b74:	2025      	movs	r0, #37	; 0x25
 8002b76:	f001 fdf0 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b7a:	2025      	movs	r0, #37	; 0x25
 8002b7c:	f001 fe09 	bl	8004792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b80:	e036      	b.n	8002bf0 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1f      	ldr	r2, [pc, #124]	; (8002c04 <HAL_UART_MspInit+0x118>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d131      	bne.n	8002bf0 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_UART_MspInit+0x110>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <HAL_UART_MspInit+0x110>)
 8002b92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b96:	61d3      	str	r3, [r2, #28]
 8002b98:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <HAL_UART_MspInit+0x110>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <HAL_UART_MspInit+0x110>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <HAL_UART_MspInit+0x110>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	6193      	str	r3, [r2, #24]
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_UART_MspInit+0x110>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bca:	f107 0318 	add.w	r3, r7, #24
 8002bce:	4619      	mov	r1, r3
 8002bd0:	480d      	ldr	r0, [pc, #52]	; (8002c08 <HAL_UART_MspInit+0x11c>)
 8002bd2:	f001 fea9 	bl	8004928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002bd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be4:	f107 0318 	add.w	r3, r7, #24
 8002be8:	4619      	mov	r1, r3
 8002bea:	4807      	ldr	r0, [pc, #28]	; (8002c08 <HAL_UART_MspInit+0x11c>)
 8002bec:	f001 fe9c 	bl	8004928 <HAL_GPIO_Init>
}
 8002bf0:	bf00      	nop
 8002bf2:	3728      	adds	r7, #40	; 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40013800 	.word	0x40013800
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40010800 	.word	0x40010800
 8002c04:	40004800 	.word	0x40004800
 8002c08:	40010c00 	.word	0x40010c00

08002c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <NMI_Handler+0x4>

08002c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c16:	e7fe      	b.n	8002c16 <HardFault_Handler+0x4>

08002c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <MemManage_Handler+0x4>

08002c1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <BusFault_Handler+0x4>

08002c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <UsageFault_Handler+0x4>

08002c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c52:	f001 fc6b 	bl	800452c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002c5e:	2004      	movs	r0, #4
 8002c60:	f002 f8ea 	bl	8004e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <EXTI9_5_IRQHandler+0x44>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d012      	beq.n	8002ca0 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <EXTI9_5_IRQHandler+0x48>)
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00c      	beq.n	8002ca0 <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <EXTI9_5_IRQHandler+0x4c>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <EXTI9_5_IRQHandler+0x50>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d105      	bne.n	8002ca0 <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8002c94:	4809      	ldr	r0, [pc, #36]	; (8002cbc <EXTI9_5_IRQHandler+0x54>)
 8002c96:	f003 ff17 	bl	8006ac8 <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <EXTI9_5_IRQHandler+0x50>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002ca0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ca4:	f002 f8c8 	bl	8004e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	200005a0 	.word	0x200005a0
 8002cb0:	40010400 	.word	0x40010400
 8002cb4:	2000001d 	.word	0x2000001d
 8002cb8:	20000020 	.word	0x20000020
 8002cbc:	20000694 	.word	0x20000694

08002cc0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8002cc4:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <TIM1_UP_IRQHandler+0xe4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d165      	bne.n	8002d98 <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 8002ccc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cd0:	4835      	ldr	r0, [pc, #212]	; (8002da8 <TIM1_UP_IRQHandler+0xe8>)
 8002cd2:	f002 f869 	bl	8004da8 <HAL_GPIO_ReadPin>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d118      	bne.n	8002d0e <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 8002cdc:	4b33      	ldr	r3, [pc, #204]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	4a32      	ldr	r2, [pc, #200]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002ce4:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8002ce6:	4b32      	ldr	r3, [pc, #200]	; (8002db0 <TIM1_UP_IRQHandler+0xf0>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	dc51      	bgt.n	8002d98 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <TIM1_UP_IRQHandler+0xe4>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8002cfa:	482e      	ldr	r0, [pc, #184]	; (8002db4 <TIM1_UP_IRQHandler+0xf4>)
 8002cfc:	f003 ff36 	bl	8006b6c <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 8002d00:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <TIM1_UP_IRQHandler+0xf8>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8002d06:	4b29      	ldr	r3, [pc, #164]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e044      	b.n	8002d98 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 8002d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d12:	482a      	ldr	r0, [pc, #168]	; (8002dbc <TIM1_UP_IRQHandler+0xfc>)
 8002d14:	f002 f848 	bl	8004da8 <HAL_GPIO_ReadPin>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d118      	bne.n	8002d50 <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 8002d1e:	4b23      	ldr	r3, [pc, #140]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	4a21      	ldr	r2, [pc, #132]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002d26:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8002d28:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <TIM1_UP_IRQHandler+0xf0>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	dc30      	bgt.n	8002d98 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <TIM1_UP_IRQHandler+0xe4>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8002d3c:	481d      	ldr	r0, [pc, #116]	; (8002db4 <TIM1_UP_IRQHandler+0xf4>)
 8002d3e:	f003 ff15 	bl	8006b6c <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 8002d42:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <TIM1_UP_IRQHandler+0xf8>)
 8002d44:	2203      	movs	r2, #3
 8002d46:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8002d48:	4b18      	ldr	r3, [pc, #96]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e023      	b.n	8002d98 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 8002d50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d54:	4814      	ldr	r0, [pc, #80]	; (8002da8 <TIM1_UP_IRQHandler+0xe8>)
 8002d56:	f002 f827 	bl	8004da8 <HAL_GPIO_ReadPin>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d118      	bne.n	8002d92 <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3301      	adds	r3, #1
 8002d66:	4a11      	ldr	r2, [pc, #68]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002d68:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <TIM1_UP_IRQHandler+0xf0>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	dc0f      	bgt.n	8002d98 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <TIM1_UP_IRQHandler+0xe4>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <TIM1_UP_IRQHandler+0xf8>)
 8002d80:	2202      	movs	r2, #2
 8002d82:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8002d8a:	480a      	ldr	r0, [pc, #40]	; (8002db4 <TIM1_UP_IRQHandler+0xf4>)
 8002d8c:	f003 feee 	bl	8006b6c <HAL_TIM_Base_Stop_IT>
 8002d90:	e002      	b.n	8002d98 <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <TIM1_UP_IRQHandler+0xec>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d98:	4806      	ldr	r0, [pc, #24]	; (8002db4 <TIM1_UP_IRQHandler+0xf4>)
 8002d9a:	f003 ff15 	bl	8006bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000020 	.word	0x20000020
 8002da8:	40010c00 	.word	0x40010c00
 8002dac:	2000058c 	.word	0x2000058c
 8002db0:	2000001e 	.word	0x2000001e
 8002db4:	20000694 	.word	0x20000694
 8002db8:	200005a1 	.word	0x200005a1
 8002dbc:	40010800 	.word	0x40010800

08002dc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	static int i = 0;
	if(i == 200)								// Do it every 2 seconds
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <TIM2_IRQHandler+0x54>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2bc8      	cmp	r3, #200	; 0xc8
 8002dca:	d118      	bne.n	8002dfe <TIM2_IRQHandler+0x3e>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dd0:	4811      	ldr	r0, [pc, #68]	; (8002e18 <TIM2_IRQHandler+0x58>)
 8002dd2:	f002 f818 	bl	8004e06 <HAL_GPIO_TogglePin>
		am2302_measure();
 8002dd6:	f7ff f97b 	bl	80020d0 <am2302_measure>
		i = 0;
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <TIM2_IRQHandler+0x54>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
		am2302_ready = !am2302_ready;
 8002de0:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <TIM2_IRQHandler+0x5c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f083 0301 	eor.w	r3, r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <TIM2_IRQHandler+0x5c>)
 8002dfc:	701a      	strb	r2, [r3, #0]
	}
	i++;
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <TIM2_IRQHandler+0x54>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	4a03      	ldr	r2, [pc, #12]	; (8002e14 <TIM2_IRQHandler+0x54>)
 8002e06:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e08:	4805      	ldr	r0, [pc, #20]	; (8002e20 <TIM2_IRQHandler+0x60>)
 8002e0a:	f003 fedd 	bl	8006bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000594 	.word	0x20000594
 8002e18:	40011000 	.word	0x40011000
 8002e1c:	20000590 	.word	0x20000590
 8002e20:	20000734 	.word	0x20000734

08002e24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <USART1_IRQHandler+0x10>)
 8002e2a:	f004 faf1 	bl	8007410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000650 	.word	0x20000650

08002e38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <EXTI15_10_IRQHandler+0x74>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	f083 0301 	eor.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d012      	beq.n	8002e70 <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 8002e4a:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <EXTI15_10_IRQHandler+0x78>)
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00c      	beq.n	8002e70 <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <EXTI15_10_IRQHandler+0x7c>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <EXTI15_10_IRQHandler+0x80>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d105      	bne.n	8002e70 <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8002e64:	4815      	ldr	r0, [pc, #84]	; (8002ebc <EXTI15_10_IRQHandler+0x84>)
 8002e66:	f003 fe2f 	bl	8006ac8 <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <EXTI15_10_IRQHandler+0x80>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <EXTI15_10_IRQHandler+0x78>)
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <EXTI15_10_IRQHandler+0x7c>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <EXTI15_10_IRQHandler+0x80>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d105      	bne.n	8002e96 <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8002e8a:	480c      	ldr	r0, [pc, #48]	; (8002ebc <EXTI15_10_IRQHandler+0x84>)
 8002e8c:	f003 fe1c 	bl	8006ac8 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <EXTI15_10_IRQHandler+0x80>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002e96:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e9a:	f001 ffcd 	bl	8004e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002e9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ea2:	f001 ffc9 	bl	8004e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200005a0 	.word	0x200005a0
 8002eb0:	40010400 	.word	0x40010400
 8002eb4:	2000001d 	.word	0x2000001d
 8002eb8:	20000020 	.word	0x20000020
 8002ebc:	20000694 	.word	0x20000694

08002ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec8:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <_sbrk+0x5c>)
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <_sbrk+0x60>)
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <_sbrk+0x64>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <_sbrk+0x68>)
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef0:	f004 fe6c 	bl	8007bcc <__errno>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002efe:	e009      	b.n	8002f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <_sbrk+0x64>)
 8002f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20005000 	.word	0x20005000
 8002f20:	00000400 	.word	0x00000400
 8002f24:	20000598 	.word	0x20000598
 8002f28:	20000968 	.word	0x20000968

08002f2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <Menu_Init>:
void periodic_measurement_am2302_on(void);		// On Measure T and H using TIMER2 (Use it for TX data by NRF or LoRa)
void periodic_measurement_am2302_off(void);		// OFF Measure T and H using TIMER2

// ----------------------------------------------------------------------------------------
void Menu_Init (void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b08b      	sub	sp, #44	; 0x2c
 8002f3c:	af00      	add	r7, sp, #0
	// Make pointers on funsctions
	// Main functions
	void (*p_print_rows_on_oled_if_up) (void);
	p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
 8002f3e:	4b8a      	ldr	r3, [pc, #552]	; (8003168 <Menu_Init+0x230>)
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
	void (*p_print_rows_on_oled_if_down) (void);					// Create pointer on function
	p_print_rows_on_oled_if_down = print_rows_on_oled_if_down;		// Save function print on pointer print_p
 8002f42:	4b8a      	ldr	r3, [pc, #552]	; (800316c <Menu_Init+0x234>)
 8002f44:	623b      	str	r3, [r7, #32]
	void (*p_return_from_menu)(void);
	p_return_from_menu = return_from_menu;
 8002f46:	4b8a      	ldr	r3, [pc, #552]	; (8003170 <Menu_Init+0x238>)
 8002f48:	61fb      	str	r3, [r7, #28]
	// ------------------------------------------------------

	// LoRa  menu functions
	void (*p_lora_rx_mode) (void);						// Function "Do it". Works when select it
	p_lora_rx_mode = lora_rx_mode;
 8002f4a:	4b8a      	ldr	r3, [pc, #552]	; (8003174 <Menu_Init+0x23c>)
 8002f4c:	61bb      	str	r3, [r7, #24]
	void (*p_lora_tx_mode) (void);						// Function "Do it". Works when select it
	p_lora_tx_mode = lora_tx_mode;
 8002f4e:	4b8a      	ldr	r3, [pc, #552]	; (8003178 <Menu_Init+0x240>)
 8002f50:	617b      	str	r3, [r7, #20]

	// ------------------------------------------------------
	// NRF menu functions
	void (*p_nrf_tx_mode) (void);						// Function "Do it". Works when select it
	p_nrf_tx_mode = nrf_tx_mode;
 8002f52:	4b8a      	ldr	r3, [pc, #552]	; (800317c <Menu_Init+0x244>)
 8002f54:	613b      	str	r3, [r7, #16]
	void (*p_nrf_rx_mode) (void);						// Function "Do it". Works when select it
	p_nrf_rx_mode = nrf_rx_mode;
 8002f56:	4b8a      	ldr	r3, [pc, #552]	; (8003180 <Menu_Init+0x248>)
 8002f58:	60fb      	str	r3, [r7, #12]

	// ------------------------------------------------------
	// NRF menu functions
	void (*p_am2302_measure) (void);
	p_am2302_measure = am2302;
 8002f5a:	4b8a      	ldr	r3, [pc, #552]	; (8003184 <Menu_Init+0x24c>)
 8002f5c:	60bb      	str	r3, [r7, #8]
	// ------------------------------------------------------
	void (*p_periodic_measurement_am2302_on) (void);
	p_periodic_measurement_am2302_on = periodic_measurement_am2302_on;
 8002f5e:	4b8a      	ldr	r3, [pc, #552]	; (8003188 <Menu_Init+0x250>)
 8002f60:	607b      	str	r3, [r7, #4]
	// ------------------------------------------------------
	void (*p_periodic_measurement_am2302_off) (void);
	p_periodic_measurement_am2302_off = periodic_measurement_am2302_off;
 8002f62:	4b8a      	ldr	r3, [pc, #552]	; (800318c <Menu_Init+0x254>)
 8002f64:	603b      	str	r3, [r7, #0]


	// Fill in elements(nodes) of list (7 items)
	// Main menu items
	/////////////////////////////////////////////////////////////////
	items[0].up = 0;
 8002f66:	4b8a      	ldr	r3, [pc, #552]	; (8003190 <Menu_Init+0x258>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
	items[0].down = &items[1];
 8002f6c:	4b88      	ldr	r3, [pc, #544]	; (8003190 <Menu_Init+0x258>)
 8002f6e:	4a89      	ldr	r2, [pc, #548]	; (8003194 <Menu_Init+0x25c>)
 8002f70:	605a      	str	r2, [r3, #4]
	items[0].child = &items_menu_1[0];
 8002f72:	4b87      	ldr	r3, [pc, #540]	; (8003190 <Menu_Init+0x258>)
 8002f74:	4a88      	ldr	r2, [pc, #544]	; (8003198 <Menu_Init+0x260>)
 8002f76:	609a      	str	r2, [r3, #8]
	items[0].parent = 0;
 8002f78:	4b85      	ldr	r3, [pc, #532]	; (8003190 <Menu_Init+0x258>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60da      	str	r2, [r3, #12]
	items[0].id = 1;
 8002f7e:	4b84      	ldr	r3, [pc, #528]	; (8003190 <Menu_Init+0x258>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	741a      	strb	r2, [r3, #16]
	items[0].name = "LoRa E220";
 8002f84:	4b82      	ldr	r3, [pc, #520]	; (8003190 <Menu_Init+0x258>)
 8002f86:	4a85      	ldr	r2, [pc, #532]	; (800319c <Menu_Init+0x264>)
 8002f88:	615a      	str	r2, [r3, #20]
	items[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8002f8a:	4a81      	ldr	r2, [pc, #516]	; (8003190 <Menu_Init+0x258>)
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	6193      	str	r3, [r2, #24]
	items[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8002f90:	4a7f      	ldr	r2, [pc, #508]	; (8003190 <Menu_Init+0x258>)
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	61d3      	str	r3, [r2, #28]
	items[0].makeAction = 0;
 8002f96:	4b7e      	ldr	r3, [pc, #504]	; (8003190 <Menu_Init+0x258>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	621a      	str	r2, [r3, #32]

	items[1].up = &items[0];
 8002f9c:	4b7c      	ldr	r3, [pc, #496]	; (8003190 <Menu_Init+0x258>)
 8002f9e:	4a7c      	ldr	r2, [pc, #496]	; (8003190 <Menu_Init+0x258>)
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24
	items[1].down = &items[2];
 8002fa2:	4b7b      	ldr	r3, [pc, #492]	; (8003190 <Menu_Init+0x258>)
 8002fa4:	4a7e      	ldr	r2, [pc, #504]	; (80031a0 <Menu_Init+0x268>)
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
	items[1].child = &items_menu_2[0];
 8002fa8:	4b79      	ldr	r3, [pc, #484]	; (8003190 <Menu_Init+0x258>)
 8002faa:	4a7e      	ldr	r2, [pc, #504]	; (80031a4 <Menu_Init+0x26c>)
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c
	items[1].parent = 0;
 8002fae:	4b78      	ldr	r3, [pc, #480]	; (8003190 <Menu_Init+0x258>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
	items[1].id = 2;
 8002fb4:	4b76      	ldr	r3, [pc, #472]	; (8003190 <Menu_Init+0x258>)
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items[1].name = "NRF24L01";
 8002fbc:	4b74      	ldr	r3, [pc, #464]	; (8003190 <Menu_Init+0x258>)
 8002fbe:	4a7a      	ldr	r2, [pc, #488]	; (80031a8 <Menu_Init+0x270>)
 8002fc0:	639a      	str	r2, [r3, #56]	; 0x38
	items[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8002fc2:	4a73      	ldr	r2, [pc, #460]	; (8003190 <Menu_Init+0x258>)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	63d3      	str	r3, [r2, #60]	; 0x3c
	items[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8002fc8:	4a71      	ldr	r2, [pc, #452]	; (8003190 <Menu_Init+0x258>)
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	6413      	str	r3, [r2, #64]	; 0x40
	items[1].makeAction = 0;
 8002fce:	4b70      	ldr	r3, [pc, #448]	; (8003190 <Menu_Init+0x258>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	645a      	str	r2, [r3, #68]	; 0x44

	items[2].up = &items[1];
 8002fd4:	4b6e      	ldr	r3, [pc, #440]	; (8003190 <Menu_Init+0x258>)
 8002fd6:	4a6f      	ldr	r2, [pc, #444]	; (8003194 <Menu_Init+0x25c>)
 8002fd8:	649a      	str	r2, [r3, #72]	; 0x48
	items[2].down = 0;
 8002fda:	4b6d      	ldr	r3, [pc, #436]	; (8003190 <Menu_Init+0x258>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	64da      	str	r2, [r3, #76]	; 0x4c
	items[2].child = &items_menu_3[0];
 8002fe0:	4b6b      	ldr	r3, [pc, #428]	; (8003190 <Menu_Init+0x258>)
 8002fe2:	4a72      	ldr	r2, [pc, #456]	; (80031ac <Menu_Init+0x274>)
 8002fe4:	651a      	str	r2, [r3, #80]	; 0x50
	items[2].parent = 0;
 8002fe6:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <Menu_Init+0x258>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
	items[2].id = 3;
 8002fec:	4b68      	ldr	r3, [pc, #416]	; (8003190 <Menu_Init+0x258>)
 8002fee:	2203      	movs	r2, #3
 8002ff0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items[2].name = "AM2302 sensor";
 8002ff4:	4b66      	ldr	r3, [pc, #408]	; (8003190 <Menu_Init+0x258>)
 8002ff6:	4a6e      	ldr	r2, [pc, #440]	; (80031b0 <Menu_Init+0x278>)
 8002ff8:	65da      	str	r2, [r3, #92]	; 0x5c
	items[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8002ffa:	4a65      	ldr	r2, [pc, #404]	; (8003190 <Menu_Init+0x258>)
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	6613      	str	r3, [r2, #96]	; 0x60
	items[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8003000:	4a63      	ldr	r2, [pc, #396]	; (8003190 <Menu_Init+0x258>)
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	6653      	str	r3, [r2, #100]	; 0x64
	items[2].makeAction = 0;
 8003006:	4b62      	ldr	r3, [pc, #392]	; (8003190 <Menu_Init+0x258>)
 8003008:	2200      	movs	r2, #0
 800300a:	669a      	str	r2, [r3, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating LoRa menu
	items_menu_1[0].up = 0;
 800300c:	4b62      	ldr	r3, [pc, #392]	; (8003198 <Menu_Init+0x260>)
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
	items_menu_1[0].down = &items_menu_1[1];
 8003012:	4b61      	ldr	r3, [pc, #388]	; (8003198 <Menu_Init+0x260>)
 8003014:	4a67      	ldr	r2, [pc, #412]	; (80031b4 <Menu_Init+0x27c>)
 8003016:	605a      	str	r2, [r3, #4]
	items_menu_1[0].id = 1;
 8003018:	4b5f      	ldr	r3, [pc, #380]	; (8003198 <Menu_Init+0x260>)
 800301a:	2201      	movs	r2, #1
 800301c:	741a      	strb	r2, [r3, #16]
	items_menu_1[0].child = 0;
 800301e:	4b5e      	ldr	r3, [pc, #376]	; (8003198 <Menu_Init+0x260>)
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
	items_menu_1[0].parent = &items[0];
 8003024:	4b5c      	ldr	r3, [pc, #368]	; (8003198 <Menu_Init+0x260>)
 8003026:	4a5a      	ldr	r2, [pc, #360]	; (8003190 <Menu_Init+0x258>)
 8003028:	60da      	str	r2, [r3, #12]
	items_menu_1[0].name = "LoRa RX";
 800302a:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <Menu_Init+0x260>)
 800302c:	4a62      	ldr	r2, [pc, #392]	; (80031b8 <Menu_Init+0x280>)
 800302e:	615a      	str	r2, [r3, #20]
	items_menu_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8003030:	4a59      	ldr	r2, [pc, #356]	; (8003198 <Menu_Init+0x260>)
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	6193      	str	r3, [r2, #24]
	items_menu_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8003036:	4a58      	ldr	r2, [pc, #352]	; (8003198 <Menu_Init+0x260>)
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	61d3      	str	r3, [r2, #28]
	items_menu_1[0].makeAction = p_lora_rx_mode;
 800303c:	4a56      	ldr	r2, [pc, #344]	; (8003198 <Menu_Init+0x260>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	6213      	str	r3, [r2, #32]

	items_menu_1[1].up = &items_menu_1[0];
 8003042:	4b55      	ldr	r3, [pc, #340]	; (8003198 <Menu_Init+0x260>)
 8003044:	4a54      	ldr	r2, [pc, #336]	; (8003198 <Menu_Init+0x260>)
 8003046:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1[1].down = &items_menu_1[2];
 8003048:	4b53      	ldr	r3, [pc, #332]	; (8003198 <Menu_Init+0x260>)
 800304a:	4a5c      	ldr	r2, [pc, #368]	; (80031bc <Menu_Init+0x284>)
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1[1].child = 0;
 800304e:	4b52      	ldr	r3, [pc, #328]	; (8003198 <Menu_Init+0x260>)
 8003050:	2200      	movs	r2, #0
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1[1].parent = &items[0];
 8003054:	4b50      	ldr	r3, [pc, #320]	; (8003198 <Menu_Init+0x260>)
 8003056:	4a4e      	ldr	r2, [pc, #312]	; (8003190 <Menu_Init+0x258>)
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1[1].id = 2;
 800305a:	4b4f      	ldr	r3, [pc, #316]	; (8003198 <Menu_Init+0x260>)
 800305c:	2202      	movs	r2, #2
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1[1].name = "LoRa TX";
 8003062:	4b4d      	ldr	r3, [pc, #308]	; (8003198 <Menu_Init+0x260>)
 8003064:	4a56      	ldr	r2, [pc, #344]	; (80031c0 <Menu_Init+0x288>)
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8003068:	4a4b      	ldr	r2, [pc, #300]	; (8003198 <Menu_Init+0x260>)
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 800306e:	4a4a      	ldr	r2, [pc, #296]	; (8003198 <Menu_Init+0x260>)
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1[1].makeAction = p_lora_tx_mode;
 8003074:	4a48      	ldr	r2, [pc, #288]	; (8003198 <Menu_Init+0x260>)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_1[2].up = &items_menu_1[1];
 800307a:	4b47      	ldr	r3, [pc, #284]	; (8003198 <Menu_Init+0x260>)
 800307c:	4a4d      	ldr	r2, [pc, #308]	; (80031b4 <Menu_Init+0x27c>)
 800307e:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1[2].down = 0;
 8003080:	4b45      	ldr	r3, [pc, #276]	; (8003198 <Menu_Init+0x260>)
 8003082:	2200      	movs	r2, #0
 8003084:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1[2].child = 0;
 8003086:	4b44      	ldr	r3, [pc, #272]	; (8003198 <Menu_Init+0x260>)
 8003088:	2200      	movs	r2, #0
 800308a:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1[2].parent = &items[0];
 800308c:	4b42      	ldr	r3, [pc, #264]	; (8003198 <Menu_Init+0x260>)
 800308e:	4a40      	ldr	r2, [pc, #256]	; (8003190 <Menu_Init+0x258>)
 8003090:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1[2].id = 3;
 8003092:	4b41      	ldr	r3, [pc, #260]	; (8003198 <Menu_Init+0x260>)
 8003094:	2203      	movs	r2, #3
 8003096:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1[2].name = "EXIT";						// Name of item
 800309a:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <Menu_Init+0x260>)
 800309c:	4a49      	ldr	r2, [pc, #292]	; (80031c4 <Menu_Init+0x28c>)
 800309e:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80030a0:	4a3d      	ldr	r2, [pc, #244]	; (8003198 <Menu_Init+0x260>)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80030a6:	4a3c      	ldr	r2, [pc, #240]	; (8003198 <Menu_Init+0x260>)
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1[2].makeAction = p_return_from_menu;
 80030ac:	4a3a      	ldr	r2, [pc, #232]	; (8003198 <Menu_Init+0x260>)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating NRF menu
	items_menu_2[0].up = 0;
 80030b2:	4b3c      	ldr	r3, [pc, #240]	; (80031a4 <Menu_Init+0x26c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
	items_menu_2[0].down = &items_menu_2[1];
 80030b8:	4b3a      	ldr	r3, [pc, #232]	; (80031a4 <Menu_Init+0x26c>)
 80030ba:	4a43      	ldr	r2, [pc, #268]	; (80031c8 <Menu_Init+0x290>)
 80030bc:	605a      	str	r2, [r3, #4]
	items_menu_2[0].child = 0;
 80030be:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <Menu_Init+0x26c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
	items_menu_2[0].parent = &items[1];
 80030c4:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <Menu_Init+0x26c>)
 80030c6:	4a33      	ldr	r2, [pc, #204]	; (8003194 <Menu_Init+0x25c>)
 80030c8:	60da      	str	r2, [r3, #12]
	items_menu_2[0].id = 1;
 80030ca:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <Menu_Init+0x26c>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	741a      	strb	r2, [r3, #16]
	items_menu_2[0].name = "NRF RX";						// Name of item
 80030d0:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <Menu_Init+0x26c>)
 80030d2:	4a3e      	ldr	r2, [pc, #248]	; (80031cc <Menu_Init+0x294>)
 80030d4:	615a      	str	r2, [r3, #20]
	items_menu_2[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80030d6:	4a33      	ldr	r2, [pc, #204]	; (80031a4 <Menu_Init+0x26c>)
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	6193      	str	r3, [r2, #24]
	items_menu_2[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80030dc:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <Menu_Init+0x26c>)
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	61d3      	str	r3, [r2, #28]
	items_menu_2[0].makeAction = p_nrf_rx_mode;
 80030e2:	4a30      	ldr	r2, [pc, #192]	; (80031a4 <Menu_Init+0x26c>)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6213      	str	r3, [r2, #32]

	items_menu_2[1].up = &items_menu_2[0];
 80030e8:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <Menu_Init+0x26c>)
 80030ea:	4a2e      	ldr	r2, [pc, #184]	; (80031a4 <Menu_Init+0x26c>)
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2[1].down = &items_menu_2[2];
 80030ee:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <Menu_Init+0x26c>)
 80030f0:	4a37      	ldr	r2, [pc, #220]	; (80031d0 <Menu_Init+0x298>)
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2[1].child = 0;
 80030f4:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <Menu_Init+0x26c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2[1].parent = &items[1];
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <Menu_Init+0x26c>)
 80030fc:	4a25      	ldr	r2, [pc, #148]	; (8003194 <Menu_Init+0x25c>)
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2[1].id = 2;
 8003100:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <Menu_Init+0x26c>)
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2[1].name = "NRF TX";						// Name of item
 8003108:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <Menu_Init+0x26c>)
 800310a:	4a32      	ldr	r2, [pc, #200]	; (80031d4 <Menu_Init+0x29c>)
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2[1].updateScreen_up = p_print_rows_on_oled_if_up;
 800310e:	4a25      	ldr	r2, [pc, #148]	; (80031a4 <Menu_Init+0x26c>)
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8003114:	4a23      	ldr	r2, [pc, #140]	; (80031a4 <Menu_Init+0x26c>)
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2[1].makeAction = p_nrf_tx_mode;
 800311a:	4a22      	ldr	r2, [pc, #136]	; (80031a4 <Menu_Init+0x26c>)
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_2[2].up = &items_menu_2[1];
 8003120:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <Menu_Init+0x26c>)
 8003122:	4a29      	ldr	r2, [pc, #164]	; (80031c8 <Menu_Init+0x290>)
 8003124:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2[2].down = 0;
 8003126:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <Menu_Init+0x26c>)
 8003128:	2200      	movs	r2, #0
 800312a:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2[2].child = 0;
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <Menu_Init+0x26c>)
 800312e:	2200      	movs	r2, #0
 8003130:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2[2].parent = &items[1];
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <Menu_Init+0x26c>)
 8003134:	4a17      	ldr	r2, [pc, #92]	; (8003194 <Menu_Init+0x25c>)
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2[2].id = 3;
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <Menu_Init+0x26c>)
 800313a:	2203      	movs	r2, #3
 800313c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2[2].name = "EXIT";						// Name of item
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <Menu_Init+0x26c>)
 8003142:	4a20      	ldr	r2, [pc, #128]	; (80031c4 <Menu_Init+0x28c>)
 8003144:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8003146:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <Menu_Init+0x26c>)
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2[2].updateScreen_down = p_print_rows_on_oled_if_down;
 800314c:	4a15      	ldr	r2, [pc, #84]	; (80031a4 <Menu_Init+0x26c>)
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2[2].makeAction = p_return_from_menu;
 8003152:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <Menu_Init+0x26c>)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating sensor menu
	items_menu_3[0].up = 0;
 8003158:	4b14      	ldr	r3, [pc, #80]	; (80031ac <Menu_Init+0x274>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
	items_menu_3[0].down = &items_menu_3[1];
 800315e:	4b13      	ldr	r3, [pc, #76]	; (80031ac <Menu_Init+0x274>)
 8003160:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <Menu_Init+0x2a0>)
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	e03a      	b.n	80031dc <Menu_Init+0x2a4>
 8003166:	bf00      	nop
 8003168:	080035dd 	.word	0x080035dd
 800316c:	080036d5 	.word	0x080036d5
 8003170:	08003a41 	.word	0x08003a41
 8003174:	08003a95 	.word	0x08003a95
 8003178:	08003b31 	.word	0x08003b31
 800317c:	08003c7d 	.word	0x08003c7d
 8003180:	08003bcd 	.word	0x08003bcd
 8003184:	08003d55 	.word	0x08003d55
 8003188:	08004055 	.word	0x08004055
 800318c:	0800433d 	.word	0x0800433d
 8003190:	200008e4 	.word	0x200008e4
 8003194:	20000908 	.word	0x20000908
 8003198:	200007e8 	.word	0x200007e8
 800319c:	0800863c 	.word	0x0800863c
 80031a0:	2000092c 	.word	0x2000092c
 80031a4:	2000077c 	.word	0x2000077c
 80031a8:	08008648 	.word	0x08008648
 80031ac:	20000854 	.word	0x20000854
 80031b0:	08008654 	.word	0x08008654
 80031b4:	2000080c 	.word	0x2000080c
 80031b8:	08008664 	.word	0x08008664
 80031bc:	20000830 	.word	0x20000830
 80031c0:	0800866c 	.word	0x0800866c
 80031c4:	08008674 	.word	0x08008674
 80031c8:	200007a0 	.word	0x200007a0
 80031cc:	0800867c 	.word	0x0800867c
 80031d0:	200007c4 	.word	0x200007c4
 80031d4:	08008684 	.word	0x08008684
 80031d8:	20000878 	.word	0x20000878
	items_menu_3[0].child = 0;
 80031dc:	4b38      	ldr	r3, [pc, #224]	; (80032c0 <Menu_Init+0x388>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
	items_menu_3[0].parent = &items[2];
 80031e2:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <Menu_Init+0x388>)
 80031e4:	4a37      	ldr	r2, [pc, #220]	; (80032c4 <Menu_Init+0x38c>)
 80031e6:	60da      	str	r2, [r3, #12]
	items_menu_3[0].id = 1;
 80031e8:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <Menu_Init+0x388>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	741a      	strb	r2, [r3, #16]
	items_menu_3[0].name = "Measure T & H";						// Name of item
 80031ee:	4b34      	ldr	r3, [pc, #208]	; (80032c0 <Menu_Init+0x388>)
 80031f0:	4a35      	ldr	r2, [pc, #212]	; (80032c8 <Menu_Init+0x390>)
 80031f2:	615a      	str	r2, [r3, #20]
	items_menu_3[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80031f4:	4a32      	ldr	r2, [pc, #200]	; (80032c0 <Menu_Init+0x388>)
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	6193      	str	r3, [r2, #24]
	items_menu_3[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80031fa:	4a31      	ldr	r2, [pc, #196]	; (80032c0 <Menu_Init+0x388>)
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	61d3      	str	r3, [r2, #28]
	items_menu_3[0].makeAction = p_am2302_measure;
 8003200:	4a2f      	ldr	r2, [pc, #188]	; (80032c0 <Menu_Init+0x388>)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	6213      	str	r3, [r2, #32]

	items_menu_3[1].up = &items_menu_3[0];
 8003206:	4b2e      	ldr	r3, [pc, #184]	; (80032c0 <Menu_Init+0x388>)
 8003208:	4a2d      	ldr	r2, [pc, #180]	; (80032c0 <Menu_Init+0x388>)
 800320a:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_3[1].down = &items_menu_3[2];
 800320c:	4b2c      	ldr	r3, [pc, #176]	; (80032c0 <Menu_Init+0x388>)
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <Menu_Init+0x394>)
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_3[1].child = 0;
 8003212:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <Menu_Init+0x388>)
 8003214:	2200      	movs	r2, #0
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_3[1].parent = &items[2];
 8003218:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <Menu_Init+0x388>)
 800321a:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <Menu_Init+0x38c>)
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_3[1].id = 2;
 800321e:	4b28      	ldr	r3, [pc, #160]	; (80032c0 <Menu_Init+0x388>)
 8003220:	2202      	movs	r2, #2
 8003222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_3[1].name = "Per Meas: ON";						// Name of item
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <Menu_Init+0x388>)
 8003228:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <Menu_Init+0x398>)
 800322a:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_3[1].updateScreen_up = p_print_rows_on_oled_if_up;
 800322c:	4a24      	ldr	r2, [pc, #144]	; (80032c0 <Menu_Init+0x388>)
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_3[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8003232:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <Menu_Init+0x388>)
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_3[1].makeAction = p_periodic_measurement_am2302_on;
 8003238:	4a21      	ldr	r2, [pc, #132]	; (80032c0 <Menu_Init+0x388>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_3[2].up = &items_menu_3[1];
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <Menu_Init+0x388>)
 8003240:	4a24      	ldr	r2, [pc, #144]	; (80032d4 <Menu_Init+0x39c>)
 8003242:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_3[2].down = &items_menu_3[3];
 8003244:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <Menu_Init+0x388>)
 8003246:	4a24      	ldr	r2, [pc, #144]	; (80032d8 <Menu_Init+0x3a0>)
 8003248:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_3[2].child = 0;
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <Menu_Init+0x388>)
 800324c:	2200      	movs	r2, #0
 800324e:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_3[2].parent = &items[2];
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <Menu_Init+0x388>)
 8003252:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <Menu_Init+0x38c>)
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_3[2].id = 3;
 8003256:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <Menu_Init+0x388>)
 8003258:	2203      	movs	r2, #3
 800325a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_3[2].name = "Per Meas: OFF";						// Name of item
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <Menu_Init+0x388>)
 8003260:	4a1e      	ldr	r2, [pc, #120]	; (80032dc <Menu_Init+0x3a4>)
 8003262:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_3[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8003264:	4a16      	ldr	r2, [pc, #88]	; (80032c0 <Menu_Init+0x388>)
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_3[2].updateScreen_down = p_print_rows_on_oled_if_down;
 800326a:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <Menu_Init+0x388>)
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_3[2].makeAction = p_periodic_measurement_am2302_off;
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <Menu_Init+0x388>)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6693      	str	r3, [r2, #104]	; 0x68

	items_menu_3[3].up = &items_menu_3[2];
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <Menu_Init+0x388>)
 8003278:	4a14      	ldr	r2, [pc, #80]	; (80032cc <Menu_Init+0x394>)
 800327a:	66da      	str	r2, [r3, #108]	; 0x6c
	items_menu_3[3].down = 0;
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <Menu_Init+0x388>)
 800327e:	2200      	movs	r2, #0
 8003280:	671a      	str	r2, [r3, #112]	; 0x70
	items_menu_3[3].child = 0;
 8003282:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <Menu_Init+0x388>)
 8003284:	2200      	movs	r2, #0
 8003286:	675a      	str	r2, [r3, #116]	; 0x74
	items_menu_3[3].parent = &items[2];
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <Menu_Init+0x388>)
 800328a:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <Menu_Init+0x38c>)
 800328c:	679a      	str	r2, [r3, #120]	; 0x78
	items_menu_3[3].id = 4;
 800328e:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <Menu_Init+0x388>)
 8003290:	2204      	movs	r2, #4
 8003292:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items_menu_3[3].name = "EXIT";						// Name of item
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <Menu_Init+0x388>)
 8003298:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <Menu_Init+0x3a8>)
 800329a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items_menu_3[3].updateScreen_up = p_print_rows_on_oled_if_up;
 800329e:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <Menu_Init+0x388>)
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items_menu_3[3].updateScreen_down = p_print_rows_on_oled_if_down;
 80032a6:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <Menu_Init+0x388>)
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items_menu_3[3].makeAction = p_return_from_menu;
 80032ae:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <Menu_Init+0x388>)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80032b6:	bf00      	nop
 80032b8:	372c      	adds	r7, #44	; 0x2c
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	20000854 	.word	0x20000854
 80032c4:	2000092c 	.word	0x2000092c
 80032c8:	0800868c 	.word	0x0800868c
 80032cc:	2000089c 	.word	0x2000089c
 80032d0:	0800869c 	.word	0x0800869c
 80032d4:	20000878 	.word	0x20000878
 80032d8:	200008c0 	.word	0x200008c0
 80032dc:	080086ac 	.word	0x080086ac
 80032e0:	08008674 	.word	0x08008674

080032e4 <menu>:

// ----------------------------------------------------------------------------------------
void menu(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
	Menu_Init();									// Init all structures
 80032e8:	f7ff fe26 	bl	8002f38 <Menu_Init>
	print_menu_init();								// Print start menu and scrolingbar
 80032ec:	f000 fa74 	bl	80037d8 <print_menu_init>
	HAL_Delay(10);
 80032f0:	200a      	movs	r0, #10
 80032f2:	f001 f937 	bl	8004564 <HAL_Delay>

	while(1)
	{
		if(button_processed_status == 1)			// If buttons was pressed
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <menu+0x50>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d1fb      	bne.n	80032f6 <menu+0x12>
		{

			button_processed_status = 1;
 80032fe:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <menu+0x50>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]
			switch (button_status)
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <menu+0x54>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d00c      	beq.n	8003326 <menu+0x42>
 800330c:	2b03      	cmp	r3, #3
 800330e:	dc0d      	bgt.n	800332c <menu+0x48>
 8003310:	2b01      	cmp	r3, #1
 8003312:	d002      	beq.n	800331a <menu+0x36>
 8003314:	2b02      	cmp	r3, #2
 8003316:	d003      	beq.n	8003320 <menu+0x3c>
 8003318:	e008      	b.n	800332c <menu+0x48>
			{
				case BOTTON_UP:
					up();
 800331a:	f000 f80f 	bl	800333c <up>
					break;
 800331e:	e005      	b.n	800332c <menu+0x48>
				case BUTTON_ENTER:
					enter();
 8003320:	f000 f840 	bl	80033a4 <enter>
					break;
 8003324:	e002      	b.n	800332c <menu+0x48>
				case BUTTON_DOWN:
					down();
 8003326:	f000 f823 	bl	8003370 <down>
					break;
 800332a:	bf00      	nop
			}
			button_status = BOTTON_DOESENT_PRESS;
 800332c:	4b02      	ldr	r3, [pc, #8]	; (8003338 <menu+0x54>)
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
		if(button_processed_status == 1)			// If buttons was pressed
 8003332:	e7e0      	b.n	80032f6 <menu+0x12>
 8003334:	20000020 	.word	0x20000020
 8003338:	200005a1 	.word	0x200005a1

0800333c <up>:
		}
	}
}
// ----------------------------------------------------------------------------------------
void up(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
	if (currentItem->up)
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <up+0x30>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00d      	beq.n	8003366 <up+0x2a>
	{
	    currentItem = currentItem->up;
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <up+0x30>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a06      	ldr	r2, [pc, #24]	; (800336c <up+0x30>)
 8003352:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_up )
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <up+0x30>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <up+0x2a>
	    {
	        currentItem->updateScreen_up();
 800335e:	4b03      	ldr	r3, [pc, #12]	; (800336c <up+0x30>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	4798      	blx	r3
	    }
	}
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000028 	.word	0x20000028

08003370 <down>:
// ----------------------------------------------------------------------------------------
void down(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
	if (currentItem->down)
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <down+0x30>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <down+0x2a>
	{
	    currentItem = currentItem->down;
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <down+0x30>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a06      	ldr	r2, [pc, #24]	; (80033a0 <down+0x30>)
 8003386:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_down )
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <down+0x30>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <down+0x2a>
	    {
	        currentItem->updateScreen_down();
 8003392:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <down+0x30>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	4798      	blx	r3
	    }
	}
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000028 	.word	0x20000028

080033a4 <enter>:
// ----------------------------------------------------------------------------------------
void enter(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
	bool status = true;
 80033aa:	2301      	movs	r3, #1
 80033ac:	71fb      	strb	r3, [r7, #7]
	// Якщо є функція "makeAction" тоді виконати її
	if (currentItem->makeAction)
 80033ae:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <enter+0x48>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <enter+0x20>
	{
		currentItem->makeAction();
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <enter+0x48>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4798      	blx	r3
		status = false;
 80033c0:	2300      	movs	r3, #0
 80033c2:	71fb      	strb	r3, [r7, #7]
	}
	// Якщо є перехід на  "child" і "makeAction" не була виконана, тоді виконати перехід
	if((currentItem->child) && (status == true))
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <enter+0x48>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <enter+0x3e>
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d006      	beq.n	80033e2 <enter+0x3e>
	{
		currentItem = currentItem->child;
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <enter+0x48>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	4a04      	ldr	r2, [pc, #16]	; (80033ec <enter+0x48>)
 80033dc:	6013      	str	r3, [r2, #0]
		print_menu_items();
 80033de:	f000 fa91 	bl	8003904 <print_menu_items>
	}
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000028 	.word	0x20000028

080033f0 <scroll_bar>:
// ----------------------------------------------------------------------------------------
/*
This function print scrollbar on right part of OLED.
 */
void scroll_bar(void)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af02      	add	r7, sp, #8
	// Work size scrollbar
	uint16_t start_x_scrollbar = 124;
 80033f6:	237c      	movs	r3, #124	; 0x7c
 80033f8:	81fb      	strh	r3, [r7, #14]
	uint16_t start_y_scrollbar = 17;
 80033fa:	2311      	movs	r3, #17
 80033fc:	81bb      	strh	r3, [r7, #12]
	uint16_t active_width = 3;
 80033fe:	2303      	movs	r3, #3
 8003400:	817b      	strh	r3, [r7, #10]
	uint16_t lenght_all_scrollbar = 48;
 8003402:	2330      	movs	r3, #48	; 0x30
 8003404:	813b      	strh	r3, [r7, #8]

	uint8_t menu_items_counter = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
	// 1. Скопіювати показник на меню в буффер.
	// 2. Піднятися до першого елемента меню.
	// 3. Опускатися вниз до останнього пункту меню і інкрементувати лічильник елементів меню.
	// 4. Використати лічильник пунктів меню для вираховування довжини полоси прокрутки і її координат.

	MenuItem_t * currentItem_buff = currentItem;
 800340a:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <scroll_bar+0xe4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	613b      	str	r3, [r7, #16]

	if ((currentItem_buff -> up) != 0)							// Step up if existing up
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <scroll_bar+0x36>
	{
		do{
			currentItem_buff = currentItem_buff -> up;			// Step up to the top of menu
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	613b      	str	r3, [r7, #16]
		}
		while ((currentItem_buff -> up) != 0);					// If the top of item doesen't found
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f8      	bne.n	8003418 <scroll_bar+0x28>
	}

	if ((currentItem_buff -> up) == 0)							// If found top of menu item
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <scroll_bar+0x52>
	{
		do{
			currentItem_buff = currentItem_buff -> down;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	613b      	str	r3, [r7, #16]
			menu_items_counter++;								// Count how many list on menu
 8003434:	7dfb      	ldrb	r3, [r7, #23]
 8003436:	3301      	adds	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
		}
		while ((currentItem_buff -> down) != 0);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f5      	bne.n	800342e <scroll_bar+0x3e>
	}
	 // Очистити частину керану де є скролбар
	ssd1306FillRect(start_x_scrollbar, start_y_scrollbar, active_width, lenght_all_scrollbar - 2, Black);
 8003442:	89fb      	ldrh	r3, [r7, #14]
 8003444:	b2d8      	uxtb	r0, r3
 8003446:	89bb      	ldrh	r3, [r7, #12]
 8003448:	b2d9      	uxtb	r1, r3
 800344a:	897b      	ldrh	r3, [r7, #10]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	893b      	ldrh	r3, [r7, #8]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	3b02      	subs	r3, #2
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2400      	movs	r4, #0
 8003458:	9400      	str	r4, [sp, #0]
 800345a:	f7fe fde0 	bl	800201e <ssd1306FillRect>

	// Вивести подовгастий квадрат на край екрану
	ssd1306_DrawRectangle(start_x_scrollbar - 1, start_y_scrollbar - 1, start_x_scrollbar + active_width, 63, White);
 800345e:	89fb      	ldrh	r3, [r7, #14]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b2d8      	uxtb	r0, r3
 8003466:	89bb      	ldrh	r3, [r7, #12]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b2d9      	uxtb	r1, r3
 800346e:	89fb      	ldrh	r3, [r7, #14]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	897b      	ldrh	r3, [r7, #10]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	4413      	add	r3, r2
 8003478:	b2da      	uxtb	r2, r3
 800347a:	2301      	movs	r3, #1
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	233f      	movs	r3, #63	; 0x3f
 8003480:	f7fe fd96 	bl	8001fb0 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8003484:	f7fe fbda 	bl	8001c3c <ssd1306_UpdateScreen>

	 // Print scroling line
	int id_for_line = currentItem -> id;				// Скопіювати порядковий номер меню (Для того щоб взнати на якому пункті меню зараз стоїмо)
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <scroll_bar+0xe4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	7c1b      	ldrb	r3, [r3, #16]
 800348e:	607b      	str	r3, [r7, #4]
	// Print scroling line
	uint16_t line_lenght = (lenght_all_scrollbar/menu_items_counter + 1);					   	// Довжина лінії яка відповідає одному меню
 8003490:	893a      	ldrh	r2, [r7, #8]
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	fb92 f3f3 	sdiv	r3, r2, r3
 8003498:	b29b      	uxth	r3, r3
 800349a:	3301      	adds	r3, #1
 800349c:	807b      	strh	r3, [r7, #2]
	uint16_t start_lenght = 16 + ((id_for_line - 1)*line_lenght);								// Початок лінії
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	887a      	ldrh	r2, [r7, #2]
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3310      	adds	r3, #16
 80034ae:	803b      	strh	r3, [r7, #0]
	// Print active scrollbar part (line)
	ssd1306FillRect(start_x_scrollbar, start_lenght, active_width, line_lenght, White);
 80034b0:	89fb      	ldrh	r3, [r7, #14]
 80034b2:	b2d8      	uxtb	r0, r3
 80034b4:	883b      	ldrh	r3, [r7, #0]
 80034b6:	b2d9      	uxtb	r1, r3
 80034b8:	897b      	ldrh	r3, [r7, #10]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	887b      	ldrh	r3, [r7, #2]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2401      	movs	r4, #1
 80034c2:	9400      	str	r4, [sp, #0]
 80034c4:	f7fe fdab 	bl	800201e <ssd1306FillRect>

	ssd1306_UpdateScreen();
 80034c8:	f7fe fbb8 	bl	8001c3c <ssd1306_UpdateScreen>
}
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd90      	pop	{r4, r7, pc}
 80034d4:	20000028 	.word	0x20000028

080034d8 <print_rectangle_on_head>:
// ----------------------------------------------------------------------------------------
void print_rectangle_on_head(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(0, 0, 127 , 15, White);
 80034de:	2301      	movs	r3, #1
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	230f      	movs	r3, #15
 80034e4:	227f      	movs	r2, #127	; 0x7f
 80034e6:	2100      	movs	r1, #0
 80034e8:	2000      	movs	r0, #0
 80034ea:	f7fe fd61 	bl	8001fb0 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 80034ee:	f7fe fba5 	bl	8001c3c <ssd1306_UpdateScreen>
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <clear_menu_items>:
// ----------------------------------------------------------------------------------------
// Clear some menu items.
void clear_menu_items (bool first, bool second, bool third, bool fourth)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4604      	mov	r4, r0
 8003500:	4608      	mov	r0, r1
 8003502:	4611      	mov	r1, r2
 8003504:	461a      	mov	r2, r3
 8003506:	4623      	mov	r3, r4
 8003508:	71fb      	strb	r3, [r7, #7]
 800350a:	4603      	mov	r3, r0
 800350c:	71bb      	strb	r3, [r7, #6]
 800350e:	460b      	mov	r3, r1
 8003510:	717b      	strb	r3, [r7, #5]
 8003512:	4613      	mov	r3, r2
 8003514:	713b      	strb	r3, [r7, #4]
	uint8_t start_row_x = 15;
 8003516:	230f      	movs	r3, #15
 8003518:	77fb      	strb	r3, [r7, #31]
	char str[16] = "               ";   						// Must be 15
 800351a:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <clear_menu_items+0xcc>)
 800351c:	f107 040c 	add.w	r4, r7, #12
 8003520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(first == true)
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00e      	beq.n	800354a <clear_menu_items+0x52>
	{
		ssd1306_SetCursor(start_row_x, first_menu_row);
 800352c:	4b26      	ldr	r3, [pc, #152]	; (80035c8 <clear_menu_items+0xd0>)
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	7ffb      	ldrb	r3, [r7, #31]
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fcb6 	bl	8001ea8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800353c:	4a23      	ldr	r2, [pc, #140]	; (80035cc <clear_menu_items+0xd4>)
 800353e:	f107 000c 	add.w	r0, r7, #12
 8003542:	2301      	movs	r3, #1
 8003544:	ca06      	ldmia	r2, {r1, r2}
 8003546:	f7fe fc89 	bl	8001e5c <ssd1306_WriteString>
	}
	if(second == true)
 800354a:	79bb      	ldrb	r3, [r7, #6]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <clear_menu_items+0x76>
	{
		ssd1306_SetCursor(start_row_x, second_menu_row);
 8003550:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <clear_menu_items+0xd8>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	7ffb      	ldrb	r3, [r7, #31]
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fca4 	bl	8001ea8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003560:	4a1a      	ldr	r2, [pc, #104]	; (80035cc <clear_menu_items+0xd4>)
 8003562:	f107 000c 	add.w	r0, r7, #12
 8003566:	2301      	movs	r3, #1
 8003568:	ca06      	ldmia	r2, {r1, r2}
 800356a:	f7fe fc77 	bl	8001e5c <ssd1306_WriteString>
	}
	if(first == true)
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00e      	beq.n	8003592 <clear_menu_items+0x9a>
	{
		ssd1306_SetCursor(start_row_x, third_menu_row);
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <clear_menu_items+0xdc>)
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	7ffb      	ldrb	r3, [r7, #31]
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe fc92 	bl	8001ea8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003584:	4a11      	ldr	r2, [pc, #68]	; (80035cc <clear_menu_items+0xd4>)
 8003586:	f107 000c 	add.w	r0, r7, #12
 800358a:	2301      	movs	r3, #1
 800358c:	ca06      	ldmia	r2, {r1, r2}
 800358e:	f7fe fc65 	bl	8001e5c <ssd1306_WriteString>
	}
	if(fourth == true)
 8003592:	793b      	ldrb	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00e      	beq.n	80035b6 <clear_menu_items+0xbe>
	{
		ssd1306_SetCursor(start_row_x, fourth_menu_row);
 8003598:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <clear_menu_items+0xe0>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	7ffb      	ldrb	r3, [r7, #31]
 80035a0:	4611      	mov	r1, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fc80 	bl	8001ea8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80035a8:	4a08      	ldr	r2, [pc, #32]	; (80035cc <clear_menu_items+0xd4>)
 80035aa:	f107 000c 	add.w	r0, r7, #12
 80035ae:	2301      	movs	r3, #1
 80035b0:	ca06      	ldmia	r2, {r1, r2}
 80035b2:	f7fe fc53 	bl	8001e5c <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 80035b6:	f7fe fb41 	bl	8001c3c <ssd1306_UpdateScreen>
}
 80035ba:	bf00      	nop
 80035bc:	3724      	adds	r7, #36	; 0x24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd90      	pop	{r4, r7, pc}
 80035c2:	bf00      	nop
 80035c4:	080086bc 	.word	0x080086bc
 80035c8:	20000030 	.word	0x20000030
 80035cc:	20000014 	.word	0x20000014
 80035d0:	20000032 	.word	0x20000032
 80035d4:	20000034 	.word	0x20000034
 80035d8:	20000036 	.word	0x20000036

080035dc <print_rows_on_oled_if_up>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_up(void)								// print text menu items
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
	char str[16] = {0};
 80035e2:	2300      	movs	r3, #0
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
	clear_menu_items (true , true , true , true );
 80035f0:	2301      	movs	r3, #1
 80035f2:	2201      	movs	r2, #1
 80035f4:	2101      	movs	r1, #1
 80035f6:	2001      	movs	r0, #1
 80035f8:	f7ff ff7e 	bl	80034f8 <clear_menu_items>
	print_rectangle_on_head();
 80035fc:	f7ff ff6c 	bl	80034d8 <print_rectangle_on_head>
	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8003600:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <print_rows_on_oled_if_up+0xd8>)
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4619      	mov	r1, r3
 8003608:	2000      	movs	r0, #0
 800360a:	f7fe fc4d 	bl	8001ea8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 800360e:	4a2a      	ldr	r2, [pc, #168]	; (80036b8 <print_rows_on_oled_if_up+0xdc>)
 8003610:	2301      	movs	r3, #1
 8003612:	ca06      	ldmia	r2, {r1, r2}
 8003614:	4829      	ldr	r0, [pc, #164]	; (80036bc <print_rows_on_oled_if_up+0xe0>)
 8003616:	f7fe fc21 	bl	8001e5c <ssd1306_WriteString>

	MenuItem_t * currentItem_buff_up = currentItem;				// Create buffer on selected current item pointer.
 800361a:	4b29      	ldr	r3, [pc, #164]	; (80036c0 <print_rows_on_oled_if_up+0xe4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <print_rows_on_oled_if_up+0xd8>)
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	74fb      	strb	r3, [r7, #19]
 8003626:	e035      	b.n	8003694 <print_rows_on_oled_if_up+0xb8>
	{
		// Fill in OLED buffer
		// Print number of menu item
		itoa(currentItem_buff_up -> id, str, 10);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	7c1b      	ldrb	r3, [r3, #16]
 800362c:	4618      	mov	r0, r3
 800362e:	463b      	mov	r3, r7
 8003630:	220a      	movs	r2, #10
 8003632:	4619      	mov	r1, r3
 8003634:	f004 fb0c 	bl	8007c50 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8003638:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <print_rows_on_oled_if_up+0xe8>)
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	7cfa      	ldrb	r2, [r7, #19]
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe fc30 	bl	8001ea8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003648:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <print_rows_on_oled_if_up+0xdc>)
 800364a:	4638      	mov	r0, r7
 800364c:	2301      	movs	r3, #1
 800364e:	ca06      	ldmia	r2, {r1, r2}
 8003650:	f7fe fc04 	bl	8001e5c <ssd1306_WriteString>

		// Print name of menu item
		strncpy(str, currentItem_buff_up -> name, 15);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	6959      	ldr	r1, [r3, #20]
 8003658:	463b      	mov	r3, r7
 800365a:	220f      	movs	r2, #15
 800365c:	4618      	mov	r0, r3
 800365e:	f004 fbfc 	bl	8007e5a <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <print_rows_on_oled_if_up+0xec>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	7cfa      	ldrb	r2, [r7, #19]
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fc1b 	bl	8001ea8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003672:	4a11      	ldr	r2, [pc, #68]	; (80036b8 <print_rows_on_oled_if_up+0xdc>)
 8003674:	4638      	mov	r0, r7
 8003676:	2301      	movs	r3, #1
 8003678:	ca06      	ldmia	r2, {r1, r2}
 800367a:	f7fe fbef 	bl	8001e5c <ssd1306_WriteString>

		currentItem_buff_up = currentItem_buff_up -> down;		// Make a step down
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	617b      	str	r3, [r7, #20]

		// Print only existing items
		if(currentItem_buff_up == 0)							// If no next item
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <print_rows_on_oled_if_up+0xc6>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <print_rows_on_oled_if_up+0xf0>)
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	7cfb      	ldrb	r3, [r7, #19]
 8003690:	4413      	add	r3, r2
 8003692:	74fb      	strb	r3, [r7, #19]
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	b29a      	uxth	r2, r3
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <print_rows_on_oled_if_up+0xf4>)
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d9c3      	bls.n	8003628 <print_rows_on_oled_if_up+0x4c>
 80036a0:	e000      	b.n	80036a4 <print_rows_on_oled_if_up+0xc8>
		{
			break;
 80036a2:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 80036a4:	f7fe faca 	bl	8001c3c <ssd1306_UpdateScreen>
	scroll_bar();
 80036a8:	f7ff fea2 	bl	80033f0 <scroll_bar>
}
 80036ac:	bf00      	nop
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000030 	.word	0x20000030
 80036b8:	20000014 	.word	0x20000014
 80036bc:	2000002c 	.word	0x2000002c
 80036c0:	20000028 	.word	0x20000028
 80036c4:	2000003a 	.word	0x2000003a
 80036c8:	2000003c 	.word	0x2000003c
 80036cc:	20000038 	.word	0x20000038
 80036d0:	20000036 	.word	0x20000036

080036d4 <print_rows_on_oled_if_down>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_down(void)							// print text menu items
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
	char str[16] = {0};
 80036da:	2300      	movs	r3, #0
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
	clear_menu_items (true , true , true , true );
 80036e8:	2301      	movs	r3, #1
 80036ea:	2201      	movs	r2, #1
 80036ec:	2101      	movs	r1, #1
 80036ee:	2001      	movs	r0, #1
 80036f0:	f7ff ff02 	bl	80034f8 <clear_menu_items>
	print_rectangle_on_head();
 80036f4:	f7ff fef0 	bl	80034d8 <print_rectangle_on_head>
	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 80036f8:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <print_rows_on_oled_if_down+0xe4>)
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	4619      	mov	r1, r3
 8003700:	2000      	movs	r0, #0
 8003702:	f7fe fbd1 	bl	8001ea8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8003706:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <print_rows_on_oled_if_down+0xe8>)
 8003708:	2301      	movs	r3, #1
 800370a:	ca06      	ldmia	r2, {r1, r2}
 800370c:	482c      	ldr	r0, [pc, #176]	; (80037c0 <print_rows_on_oled_if_down+0xec>)
 800370e:	f7fe fba5 	bl	8001e5c <ssd1306_WriteString>

	MenuItem_t * currentItem_buff = currentItem;				// Create buffer on selected current item pointer.
 8003712:	4b2c      	ldr	r3, [pc, #176]	; (80037c4 <print_rows_on_oled_if_down+0xf0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003718:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <print_rows_on_oled_if_down+0xe4>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	74fb      	strb	r3, [r7, #19]
 800371e:	e03b      	b.n	8003798 <print_rows_on_oled_if_down+0xc4>
	{
		// Fill in OLED buffer
		// Print number of menu item
        itoa(currentItem_buff -> id, str, 10);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	7c1b      	ldrb	r3, [r3, #16]
 8003724:	4618      	mov	r0, r3
 8003726:	463b      	mov	r3, r7
 8003728:	220a      	movs	r2, #10
 800372a:	4619      	mov	r1, r3
 800372c:	f004 fa90 	bl	8007c50 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8003730:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <print_rows_on_oled_if_down+0xf4>)
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	7cfa      	ldrb	r2, [r7, #19]
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fbb4 	bl	8001ea8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003740:	4a1e      	ldr	r2, [pc, #120]	; (80037bc <print_rows_on_oled_if_down+0xe8>)
 8003742:	4638      	mov	r0, r7
 8003744:	2301      	movs	r3, #1
 8003746:	ca06      	ldmia	r2, {r1, r2}
 8003748:	f7fe fb88 	bl	8001e5c <ssd1306_WriteString>

		// Print name of menu item
		memset(str, 0, sizeof(str));
 800374c:	463b      	mov	r3, r7
 800374e:	2210      	movs	r2, #16
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f004 fa8c 	bl	8007c70 <memset>
	    strncpy(str, currentItem_buff -> name, 15);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	6959      	ldr	r1, [r3, #20]
 800375c:	463b      	mov	r3, r7
 800375e:	220f      	movs	r2, #15
 8003760:	4618      	mov	r0, r3
 8003762:	f004 fb7a 	bl	8007e5a <strncpy>
	    ssd1306_SetCursor(start_print_name_menu_x, row);
 8003766:	4b19      	ldr	r3, [pc, #100]	; (80037cc <print_rows_on_oled_if_down+0xf8>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	7cfa      	ldrb	r2, [r7, #19]
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fb99 	bl	8001ea8 <ssd1306_SetCursor>
	    ssd1306_WriteString(str,  Font_7x10, White);
 8003776:	4a11      	ldr	r2, [pc, #68]	; (80037bc <print_rows_on_oled_if_down+0xe8>)
 8003778:	4638      	mov	r0, r7
 800377a:	2301      	movs	r3, #1
 800377c:	ca06      	ldmia	r2, {r1, r2}
 800377e:	f7fe fb6d 	bl	8001e5c <ssd1306_WriteString>

	    currentItem_buff = currentItem_buff -> down;			// Make a step down
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	617b      	str	r3, [r7, #20]

	    // Print only existing items
	    if(currentItem_buff == 0)		 						// If no next item
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <print_rows_on_oled_if_down+0xd2>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 800378e:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <print_rows_on_oled_if_down+0xfc>)
 8003790:	781a      	ldrb	r2, [r3, #0]
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	4413      	add	r3, r2
 8003796:	74fb      	strb	r3, [r7, #19]
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	b29a      	uxth	r2, r3
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <print_rows_on_oled_if_down+0x100>)
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d9bd      	bls.n	8003720 <print_rows_on_oled_if_down+0x4c>
 80037a4:	e000      	b.n	80037a8 <print_rows_on_oled_if_down+0xd4>
	    {
	    	break;
 80037a6:	bf00      	nop
	    }
	 }
	 ssd1306_UpdateScreen();
 80037a8:	f7fe fa48 	bl	8001c3c <ssd1306_UpdateScreen>
	 scroll_bar();
 80037ac:	f7ff fe20 	bl	80033f0 <scroll_bar>
}
 80037b0:	bf00      	nop
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000030 	.word	0x20000030
 80037bc:	20000014 	.word	0x20000014
 80037c0:	2000002c 	.word	0x2000002c
 80037c4:	20000028 	.word	0x20000028
 80037c8:	2000003a 	.word	0x2000003a
 80037cc:	2000003c 	.word	0x2000003c
 80037d0:	20000038 	.word	0x20000038
 80037d4:	20000036 	.word	0x20000036

080037d8 <print_menu_init>:
// ----------------------------------------------------------------------------------------
// Print first 4 items of menu (only first time)
void print_menu_init(void)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b089      	sub	sp, #36	; 0x24
 80037dc:	af00      	add	r7, sp, #0
	MenuItem_t * currentItem_buff = currentItem;		// Create buffer on selected current item pointer.
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <print_menu_init+0x10c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61fb      	str	r3, [r7, #28]
	print_rectangle_on_head();
 80037e4:	f7ff fe78 	bl	80034d8 <print_rectangle_on_head>

	// Print ">> MAIN MENU <<" on head of OLED
	char str[20] = ">> MAIN MENU <<";
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <print_menu_init+0x110>)
 80037ea:	1d3c      	adds	r4, r7, #4
 80037ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 80037f6:	2103      	movs	r1, #3
 80037f8:	200a      	movs	r0, #10
 80037fa:	f7fe fb55 	bl	8001ea8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80037fe:	4a3b      	ldr	r2, [pc, #236]	; (80038ec <print_menu_init+0x114>)
 8003800:	1d38      	adds	r0, r7, #4
 8003802:	2301      	movs	r3, #1
 8003804:	ca06      	ldmia	r2, {r1, r2}
 8003806:	f7fe fb29 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800380a:	f7fe fa17 	bl	8001c3c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	2214      	movs	r2, #20
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f004 fa2b 	bl	8007c70 <memset>

	for(uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 800381a:	4b35      	ldr	r3, [pc, #212]	; (80038f0 <print_menu_init+0x118>)
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	76fb      	strb	r3, [r7, #27]
 8003820:	e051      	b.n	80038c6 <print_menu_init+0xee>
	{
		if(row == first_menu_row)
 8003822:	7efb      	ldrb	r3, [r7, #27]
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <print_menu_init+0x118>)
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d10d      	bne.n	800384a <print_menu_init+0x72>
		{
			// Print pointer on menu (On top)
			char str_pointer[4] = "->";
 800382e:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8003832:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8003834:	7efb      	ldrb	r3, [r7, #27]
 8003836:	4619      	mov	r1, r3
 8003838:	2000      	movs	r0, #0
 800383a:	f7fe fb35 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 800383e:	4a2b      	ldr	r2, [pc, #172]	; (80038ec <print_menu_init+0x114>)
 8003840:	4638      	mov	r0, r7
 8003842:	2301      	movs	r3, #1
 8003844:	ca06      	ldmia	r2, {r1, r2}
 8003846:	f7fe fb09 	bl	8001e5c <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	7c1b      	ldrb	r3, [r3, #16]
 800384e:	4618      	mov	r0, r3
 8003850:	1d3b      	adds	r3, r7, #4
 8003852:	220a      	movs	r2, #10
 8003854:	4619      	mov	r1, r3
 8003856:	f004 f9fb 	bl	8007c50 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 800385a:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <print_menu_init+0x11c>)
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	7efa      	ldrb	r2, [r7, #27]
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe fb1f 	bl	8001ea8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800386a:	4a20      	ldr	r2, [pc, #128]	; (80038ec <print_menu_init+0x114>)
 800386c:	1d38      	adds	r0, r7, #4
 800386e:	2301      	movs	r3, #1
 8003870:	ca06      	ldmia	r2, {r1, r2}
 8003872:	f7fe faf3 	bl	8001e5c <ssd1306_WriteString>
		memset(str, 0, sizeof(str));
 8003876:	1d3b      	adds	r3, r7, #4
 8003878:	2214      	movs	r2, #20
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f004 f9f7 	bl	8007c70 <memset>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	6959      	ldr	r1, [r3, #20]
 8003886:	1d3b      	adds	r3, r7, #4
 8003888:	220f      	movs	r2, #15
 800388a:	4618      	mov	r0, r3
 800388c:	f004 fae5 	bl	8007e5a <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8003890:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <print_menu_init+0x120>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	7efa      	ldrb	r2, [r7, #27]
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe fb04 	bl	8001ea8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80038a0:	4a12      	ldr	r2, [pc, #72]	; (80038ec <print_menu_init+0x114>)
 80038a2:	1d38      	adds	r0, r7, #4
 80038a4:	2301      	movs	r3, #1
 80038a6:	ca06      	ldmia	r2, {r1, r2}
 80038a8:	f7fe fad8 	bl	8001e5c <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 80038ac:	f7fe f9c6 	bl	8001c3c <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00b      	beq.n	80038d4 <print_menu_init+0xfc>
	for(uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <print_menu_init+0x124>)
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	7efb      	ldrb	r3, [r7, #27]
 80038c2:	4413      	add	r3, r2
 80038c4:	76fb      	strb	r3, [r7, #27]
 80038c6:	7efb      	ldrb	r3, [r7, #27]
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <print_menu_init+0x128>)
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d9a7      	bls.n	8003822 <print_menu_init+0x4a>
 80038d2:	e000      	b.n	80038d6 <print_menu_init+0xfe>
		{
			break;
 80038d4:	bf00      	nop
		}
	}
	scroll_bar();
 80038d6:	f7ff fd8b 	bl	80033f0 <scroll_bar>
}
 80038da:	bf00      	nop
 80038dc:	3724      	adds	r7, #36	; 0x24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd90      	pop	{r4, r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000028 	.word	0x20000028
 80038e8:	080086cc 	.word	0x080086cc
 80038ec:	20000014 	.word	0x20000014
 80038f0:	20000030 	.word	0x20000030
 80038f4:	2000003a 	.word	0x2000003a
 80038f8:	2000003c 	.word	0x2000003c
 80038fc:	20000038 	.word	0x20000038
 8003900:	20000036 	.word	0x20000036

08003904 <print_menu_items>:
// ----------------------------------------------------------------------------------------
// print pointers of menu
void print_menu_items(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
	char str[16] = {0};
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	f107 0308 	add.w	r3, r7, #8
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	609a      	str	r2, [r3, #8]
	clearn_oled();
 800391a:	f7fe f8df 	bl	8001adc <clearn_oled>
	print_rectangle_on_head();
 800391e:	f7ff fddb 	bl	80034d8 <print_rectangle_on_head>

	//Print selected name of menu on top of OLED (in rectangle)
	MenuItem_t * currentItem_buff_parent = currentItem;
 8003922:	4b40      	ldr	r3, [pc, #256]	; (8003a24 <print_menu_items+0x120>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	617b      	str	r3, [r7, #20]
	currentItem_buff_parent = currentItem_buff_parent -> parent;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	617b      	str	r3, [r7, #20]

	strncpy(str, currentItem_buff_parent -> name, 15);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	6959      	ldr	r1, [r3, #20]
 8003932:	1d3b      	adds	r3, r7, #4
 8003934:	220f      	movs	r2, #15
 8003936:	4618      	mov	r0, r3
 8003938:	f004 fa8f 	bl	8007e5a <strncpy>
	ssd1306_SetCursor(10, 3);
 800393c:	2103      	movs	r1, #3
 800393e:	200a      	movs	r0, #10
 8003940:	f7fe fab2 	bl	8001ea8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003944:	4a38      	ldr	r2, [pc, #224]	; (8003a28 <print_menu_items+0x124>)
 8003946:	1d38      	adds	r0, r7, #4
 8003948:	2301      	movs	r3, #1
 800394a:	ca06      	ldmia	r2, {r1, r2}
 800394c:	f7fe fa86 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003950:	f7fe f974 	bl	8001c3c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8003954:	1d3b      	adds	r3, r7, #4
 8003956:	2210      	movs	r2, #16
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f004 f988 	bl	8007c70 <memset>

	MenuItem_t * currentItem_buff = currentItem;
 8003960:	4b30      	ldr	r3, [pc, #192]	; (8003a24 <print_menu_items+0x120>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	61fb      	str	r3, [r7, #28]

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003966:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <print_menu_items+0x128>)
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	76fb      	strb	r3, [r7, #27]
 800396c:	e04b      	b.n	8003a06 <print_menu_items+0x102>
	{
		if(row == first_menu_row)
 800396e:	7efb      	ldrb	r3, [r7, #27]
 8003970:	b29a      	uxth	r2, r3
 8003972:	4b2e      	ldr	r3, [pc, #184]	; (8003a2c <print_menu_items+0x128>)
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d10d      	bne.n	8003996 <print_menu_items+0x92>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 800397a:	f643 632d 	movw	r3, #15917	; 0x3e2d
 800397e:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8003980:	7efb      	ldrb	r3, [r7, #27]
 8003982:	4619      	mov	r1, r3
 8003984:	2000      	movs	r0, #0
 8003986:	f7fe fa8f 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 800398a:	4a27      	ldr	r2, [pc, #156]	; (8003a28 <print_menu_items+0x124>)
 800398c:	4638      	mov	r0, r7
 800398e:	2301      	movs	r3, #1
 8003990:	ca06      	ldmia	r2, {r1, r2}
 8003992:	f7fe fa63 	bl	8001e5c <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	7c1b      	ldrb	r3, [r3, #16]
 800399a:	4618      	mov	r0, r3
 800399c:	1d3b      	adds	r3, r7, #4
 800399e:	220a      	movs	r2, #10
 80039a0:	4619      	mov	r1, r3
 80039a2:	f004 f955 	bl	8007c50 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80039a6:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <print_menu_items+0x12c>)
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	7efa      	ldrb	r2, [r7, #27]
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fa79 	bl	8001ea8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80039b6:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <print_menu_items+0x124>)
 80039b8:	1d38      	adds	r0, r7, #4
 80039ba:	2301      	movs	r3, #1
 80039bc:	ca06      	ldmia	r2, {r1, r2}
 80039be:	f7fe fa4d 	bl	8001e5c <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	6959      	ldr	r1, [r3, #20]
 80039c6:	1d3b      	adds	r3, r7, #4
 80039c8:	220f      	movs	r2, #15
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 fa45 	bl	8007e5a <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 80039d0:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <print_menu_items+0x130>)
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	7efa      	ldrb	r2, [r7, #27]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fa64 	bl	8001ea8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80039e0:	4a11      	ldr	r2, [pc, #68]	; (8003a28 <print_menu_items+0x124>)
 80039e2:	1d38      	adds	r0, r7, #4
 80039e4:	2301      	movs	r3, #1
 80039e6:	ca06      	ldmia	r2, {r1, r2}
 80039e8:	f7fe fa38 	bl	8001e5c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80039ec:	f7fe f926 	bl	8001c3c <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00b      	beq.n	8003a14 <print_menu_items+0x110>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80039fc:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <print_menu_items+0x134>)
 80039fe:	781a      	ldrb	r2, [r3, #0]
 8003a00:	7efb      	ldrb	r3, [r7, #27]
 8003a02:	4413      	add	r3, r2
 8003a04:	76fb      	strb	r3, [r7, #27]
 8003a06:	7efb      	ldrb	r3, [r7, #27]
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <print_menu_items+0x138>)
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d9ad      	bls.n	800396e <print_menu_items+0x6a>
 8003a12:	e000      	b.n	8003a16 <print_menu_items+0x112>
		{
			break;
 8003a14:	bf00      	nop
		}
	}
	scroll_bar();
 8003a16:	f7ff fceb 	bl	80033f0 <scroll_bar>
}
 8003a1a:	bf00      	nop
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000028 	.word	0x20000028
 8003a28:	20000014 	.word	0x20000014
 8003a2c:	20000030 	.word	0x20000030
 8003a30:	2000003a 	.word	0x2000003a
 8003a34:	2000003c 	.word	0x2000003c
 8003a38:	20000038 	.word	0x20000038
 8003a3c:	20000036 	.word	0x20000036

08003a40 <return_from_menu>:
// ----------------------------------------------------------------------------------------
void return_from_menu(void)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
	currentItem = &items[0];											// Jump to main menu
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <return_from_menu+0x44>)
 8003a48:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <return_from_menu+0x48>)
 8003a4a:	601a      	str	r2, [r3, #0]
	clearn_oled();
 8003a4c:	f7fe f846 	bl	8001adc <clearn_oled>

	// Print "MAIN MENU:"
	char str[20] = ">> MAIN MENU <<";
 8003a50:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <return_from_menu+0x4c>)
 8003a52:	1d3c      	adds	r4, r7, #4
 8003a54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8003a5e:	2103      	movs	r1, #3
 8003a60:	200a      	movs	r0, #10
 8003a62:	f7fe fa21 	bl	8001ea8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003a66:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <return_from_menu+0x50>)
 8003a68:	1d38      	adds	r0, r7, #4
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	ca06      	ldmia	r2, {r1, r2}
 8003a6e:	f7fe f9f5 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003a72:	f7fe f8e3 	bl	8001c3c <ssd1306_UpdateScreen>

	print_menu_init();													// Print all start menu
 8003a76:	f7ff feaf 	bl	80037d8 <print_menu_init>
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd90      	pop	{r4, r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000028 	.word	0x20000028
 8003a88:	200008e4 	.word	0x200008e4
 8003a8c:	080086cc 	.word	0x080086cc
 8003a90:	20000014 	.word	0x20000014

08003a94 <lora_rx_mode>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// LORA FUNCTIONS
void lora_rx_mode(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
	clearn_oled();
 8003a9a:	f7fe f81f 	bl	8001adc <clearn_oled>
	print_rectangle_on_head();
 8003a9e:	f7ff fd1b 	bl	80034d8 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <lora_rx_mode+0x88>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6959      	ldr	r1, [r3, #20]
 8003ab6:	463b      	mov	r3, r7
 8003ab8:	220f      	movs	r2, #15
 8003aba:	4618      	mov	r0, r3
 8003abc:	f004 f9cd 	bl	8007e5a <strncpy>
	ssd1306_SetCursor(10, 3);
 8003ac0:	2103      	movs	r1, #3
 8003ac2:	200a      	movs	r0, #10
 8003ac4:	f7fe f9f0 	bl	8001ea8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003ac8:	4a15      	ldr	r2, [pc, #84]	; (8003b20 <lora_rx_mode+0x8c>)
 8003aca:	4638      	mov	r0, r7
 8003acc:	2301      	movs	r3, #1
 8003ace:	ca06      	ldmia	r2, {r1, r2}
 8003ad0:	f7fe f9c4 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003ad4:	f7fe f8b2 	bl	8001c3c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8003ad8:	463b      	mov	r3, r7
 8003ada:	2210      	movs	r2, #16
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f004 f8c6 	bl	8007c70 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <lora_rx_mode+0x90>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8003aea:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <lora_rx_mode+0x94>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_RX(true);
 8003af0:	2001      	movs	r0, #1
 8003af2:	f7fc ffc3 	bl	8000a7c <LoRa_RX>
	}while (button_status != BUTTON_ENTER);
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <lora_rx_mode+0x90>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d1f8      	bne.n	8003af0 <lora_rx_mode+0x5c>
	LoRa_RX(false);
 8003afe:	2000      	movs	r0, #0
 8003b00:	f7fc ffbc 	bl	8000a7c <LoRa_RX>

	block_interrupt_form_up_and_down_buttons = false;
 8003b04:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <lora_rx_mode+0x94>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8003b0a:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <lora_rx_mode+0x88>)
 8003b0c:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <lora_rx_mode+0x98>)
 8003b0e:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8003b10:	f7ff fef8 	bl	8003904 <print_menu_items>
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000028 	.word	0x20000028
 8003b20:	20000014 	.word	0x20000014
 8003b24:	200005a1 	.word	0x200005a1
 8003b28:	200005a0 	.word	0x200005a0
 8003b2c:	200007e8 	.word	0x200007e8

08003b30 <lora_tx_mode>:
// ----------------------------------------------------------------------------------------
void lora_tx_mode(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
	clearn_oled();
 8003b36:	f7fd ffd1 	bl	8001adc <clearn_oled>
	print_rectangle_on_head();
 8003b3a:	f7ff fccd 	bl	80034d8 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8003b3e:	2300      	movs	r3, #0
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	1d3b      	adds	r3, r7, #4
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <lora_tx_mode+0x88>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6959      	ldr	r1, [r3, #20]
 8003b52:	463b      	mov	r3, r7
 8003b54:	220f      	movs	r2, #15
 8003b56:	4618      	mov	r0, r3
 8003b58:	f004 f97f 	bl	8007e5a <strncpy>
	ssd1306_SetCursor(10, 3);
 8003b5c:	2103      	movs	r1, #3
 8003b5e:	200a      	movs	r0, #10
 8003b60:	f7fe f9a2 	bl	8001ea8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003b64:	4a15      	ldr	r2, [pc, #84]	; (8003bbc <lora_tx_mode+0x8c>)
 8003b66:	4638      	mov	r0, r7
 8003b68:	2301      	movs	r3, #1
 8003b6a:	ca06      	ldmia	r2, {r1, r2}
 8003b6c:	f7fe f976 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003b70:	f7fe f864 	bl	8001c3c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8003b74:	463b      	mov	r3, r7
 8003b76:	2210      	movs	r2, #16
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f004 f878 	bl	8007c70 <memset>


	button_status = BOTTON_DOESENT_PRESS;
 8003b80:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <lora_tx_mode+0x90>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <lora_tx_mode+0x94>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_TX(true);
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f7fd f817 	bl	8000bc0 <LoRa_TX>

	}while (button_status != BUTTON_ENTER);
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <lora_tx_mode+0x90>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d1f8      	bne.n	8003b8c <lora_tx_mode+0x5c>
	LoRa_TX(false);
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	f7fd f810 	bl	8000bc0 <LoRa_TX>

	block_interrupt_form_up_and_down_buttons = false;
 8003ba0:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <lora_tx_mode+0x94>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <lora_tx_mode+0x88>)
 8003ba8:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <lora_tx_mode+0x98>)
 8003baa:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8003bac:	f7ff feaa 	bl	8003904 <print_menu_items>
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000028 	.word	0x20000028
 8003bbc:	20000014 	.word	0x20000014
 8003bc0:	200005a1 	.word	0x200005a1
 8003bc4:	200005a0 	.word	0x200005a0
 8003bc8:	200007e8 	.word	0x200007e8

08003bcc <nrf_rx_mode>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// NRF FUNCTIONS
void nrf_rx_mode(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
	clearn_oled();
 8003bd2:	f7fd ff83 	bl	8001adc <clearn_oled>
	NRF24_init_RX_mode();
 8003bd6:	f7fd fab1 	bl	800113c <NRF24_init_RX_mode>
	print_rectangle_on_head();
 8003bda:	f7ff fc7d 	bl	80034d8 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8003bde:	2300      	movs	r3, #0
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <nrf_rx_mode+0x98>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6959      	ldr	r1, [r3, #20]
 8003bf2:	463b      	mov	r3, r7
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f004 f92f 	bl	8007e5a <strncpy>
	ssd1306_SetCursor(10, 3);
 8003bfc:	2103      	movs	r1, #3
 8003bfe:	200a      	movs	r0, #10
 8003c00:	f7fe f952 	bl	8001ea8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003c04:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <nrf_rx_mode+0x9c>)
 8003c06:	4638      	mov	r0, r7
 8003c08:	2301      	movs	r3, #1
 8003c0a:	ca06      	ldmia	r2, {r1, r2}
 8003c0c:	f7fe f926 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003c10:	f7fe f814 	bl	8001c3c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8003c14:	463b      	mov	r3, r7
 8003c16:	2210      	movs	r2, #16
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f004 f828 	bl	8007c70 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8003c20:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <nrf_rx_mode+0xa0>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <nrf_rx_mode+0xa4>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		NRF24L01_Receive();
 8003c2c:	f7fd fa24 	bl	8001078 <NRF24L01_Receive>
	}while (button_status != BUTTON_ENTER);
 8003c30:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <nrf_rx_mode+0xa0>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d1f9      	bne.n	8003c2c <nrf_rx_mode+0x60>

	NRF24_WriteReg(CONFIG, 0x00); 										// STOP work with nrf module  (Power off)
 8003c38:	2100      	movs	r1, #0
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f7fd fdba 	bl	80017b4 <NRF24_WriteReg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				// Turn off GREEN LED
 8003c40:	2201      	movs	r2, #1
 8003c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c46:	480b      	ldr	r0, [pc, #44]	; (8003c74 <nrf_rx_mode+0xa8>)
 8003c48:	f001 f8c5 	bl	8004dd6 <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <nrf_rx_mode+0xa4>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8003c52:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <nrf_rx_mode+0x98>)
 8003c54:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <nrf_rx_mode+0xac>)
 8003c56:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8003c58:	f7ff fe54 	bl	8003904 <print_menu_items>
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000028 	.word	0x20000028
 8003c68:	20000014 	.word	0x20000014
 8003c6c:	200005a1 	.word	0x200005a1
 8003c70:	200005a0 	.word	0x200005a0
 8003c74:	40011000 	.word	0x40011000
 8003c78:	2000077c 	.word	0x2000077c

08003c7c <nrf_tx_mode>:
// ----------------------------------------------------------------------------------------
void nrf_tx_mode(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
	clearn_oled();
 8003c82:	f7fd ff2b 	bl	8001adc <clearn_oled>
	NRF24_init_TX_mode();
 8003c86:	f7fd fb1d 	bl	80012c4 <NRF24_init_TX_mode>
	print_rectangle_on_head();
 8003c8a:	f7ff fc25 	bl	80034d8 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8003c8e:	2300      	movs	r3, #0
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	1d3b      	adds	r3, r7, #4
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8003c9c:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <nrf_tx_mode+0xb0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6959      	ldr	r1, [r3, #20]
 8003ca2:	463b      	mov	r3, r7
 8003ca4:	220f      	movs	r2, #15
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f004 f8d7 	bl	8007e5a <strncpy>
	ssd1306_SetCursor(10, 3);
 8003cac:	2103      	movs	r1, #3
 8003cae:	200a      	movs	r0, #10
 8003cb0:	f7fe f8fa 	bl	8001ea8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003cb4:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <nrf_tx_mode+0xb4>)
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	2301      	movs	r3, #1
 8003cba:	ca06      	ldmia	r2, {r1, r2}
 8003cbc:	f7fe f8ce 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003cc0:	f7fd ffbc 	bl	8001c3c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8003cc4:	463b      	mov	r3, r7
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f003 ffd0 	bl	8007c70 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8003cd0:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <nrf_tx_mode+0xb8>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8003cd6:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <nrf_tx_mode+0xbc>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		NRF24L01_Transmission();
 8003cdc:	f7fd fc00 	bl	80014e0 <NRF24L01_Transmission>
	}while (button_status != BUTTON_ENTER);
 8003ce0:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <nrf_tx_mode+0xb8>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d1f9      	bne.n	8003cdc <nrf_tx_mode+0x60>
	i = 1; 																// Counter transmitted data
 8003ce8:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <nrf_tx_mode+0xc0>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
	test_data = 0;									  					// Init test data for transmit data
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <nrf_tx_mode+0xc4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
	retr_cnt_full = 0;
 8003cf4:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <nrf_tx_mode+0xc8>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
	cnt_lost = 0;
 8003cfa:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <nrf_tx_mode+0xcc>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

	NRF24_WriteReg(CONFIG, 0x00); 										// STOP work with nrf module  (Power off)
 8003d00:	2100      	movs	r1, #0
 8003d02:	2000      	movs	r0, #0
 8003d04:	f7fd fd56 	bl	80017b4 <NRF24_WriteReg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				// Turn off GREEN LED
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d0e:	480f      	ldr	r0, [pc, #60]	; (8003d4c <nrf_tx_mode+0xd0>)
 8003d10:	f001 f861 	bl	8004dd6 <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <nrf_tx_mode+0xbc>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8003d1a:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <nrf_tx_mode+0xb0>)
 8003d1c:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <nrf_tx_mode+0xd4>)
 8003d1e:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8003d20:	f7ff fdf0 	bl	8003904 <print_menu_items>
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000028 	.word	0x20000028
 8003d30:	20000014 	.word	0x20000014
 8003d34:	200005a1 	.word	0x200005a1
 8003d38:	200005a0 	.word	0x200005a0
 8003d3c:	20000010 	.word	0x20000010
 8003d40:	20000144 	.word	0x20000144
 8003d44:	2000013c 	.word	0x2000013c
 8003d48:	20000140 	.word	0x20000140
 8003d4c:	40011000 	.word	0x40011000
 8003d50:	2000077c 	.word	0x2000077c

08003d54 <am2302>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// SENSORS FUNCTIONS
// Function uses Tim2 for periodic measuring.
void am2302(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	; 0x38
 8003d58:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);		// For sensor measure
 8003d5a:	48ac      	ldr	r0, [pc, #688]	; (800400c <am2302+0x2b8>)
 8003d5c:	f002 feb4 	bl	8006ac8 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 8003d60:	2064      	movs	r0, #100	; 0x64
 8003d62:	f000 fbff 	bl	8004564 <HAL_Delay>
	clearn_oled();
 8003d66:	f7fd feb9 	bl	8001adc <clearn_oled>
	print_rectangle_on_head();
 8003d6a:	f7ff fbb5 	bl	80034d8 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8003d6e:	2300      	movs	r3, #0
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8003d7e:	4ba4      	ldr	r3, [pc, #656]	; (8004010 <am2302+0x2bc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6959      	ldr	r1, [r3, #20]
 8003d84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d88:	220f      	movs	r2, #15
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f004 f865 	bl	8007e5a <strncpy>
	ssd1306_SetCursor(10, 3);
 8003d90:	2103      	movs	r1, #3
 8003d92:	200a      	movs	r0, #10
 8003d94:	f7fe f888 	bl	8001ea8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8003d98:	4a9e      	ldr	r2, [pc, #632]	; (8004014 <am2302+0x2c0>)
 8003d9a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003d9e:	2301      	movs	r3, #1
 8003da0:	ca06      	ldmia	r2, {r1, r2}
 8003da2:	f7fe f85b 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003da6:	f7fd ff49 	bl	8001c3c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8003daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dae:	2210      	movs	r2, #16
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f003 ff5c 	bl	8007c70 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8003db8:	4b97      	ldr	r3, [pc, #604]	; (8004018 <am2302+0x2c4>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;	// Lock interrupt from UP and DOWN buttons
 8003dbe:	4b97      	ldr	r3, [pc, #604]	; (800401c <am2302+0x2c8>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	701a      	strb	r2, [r3, #0]
	measure_counter = 1;
 8003dc4:	4b96      	ldr	r3, [pc, #600]	; (8004020 <am2302+0x2cc>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		// Print data
		if(am2302_ready == true)						// Flug from interrup tim2
 8003dca:	4b96      	ldr	r3, [pc, #600]	; (8004024 <am2302+0x2d0>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8101 	beq.w	8003fd6 <am2302+0x282>
		{
			char str_temperature[10] = {0};
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61fb      	str	r3, [r7, #28]
 8003dd8:	f107 0320 	add.w	r3, r7, #32
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	809a      	strh	r2, [r3, #4]
			char str_humidity[10] = {0};
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	f107 0314 	add.w	r3, r7, #20
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	809a      	strh	r2, [r3, #4]
			char str_1[10] = {0};
 8003df0:	2300      	movs	r3, #0
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	f107 0308 	add.w	r3, r7, #8
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	809a      	strh	r2, [r3, #4]

			// Clear data place on OLED
			memset(str, ' ', sizeof(str));
 8003dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e02:	2210      	movs	r2, #16
 8003e04:	2120      	movs	r1, #32
 8003e06:	4618      	mov	r0, r3
 8003e08:	f003 ff32 	bl	8007c70 <memset>
			ssd1306_SetCursor(10, first_menu_row);
 8003e0c:	4b86      	ldr	r3, [pc, #536]	; (8004028 <am2302+0x2d4>)
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	4619      	mov	r1, r3
 8003e14:	200a      	movs	r0, #10
 8003e16:	f7fe f847 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8003e1a:	4a7e      	ldr	r2, [pc, #504]	; (8004014 <am2302+0x2c0>)
 8003e1c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003e20:	2301      	movs	r3, #1
 8003e22:	ca06      	ldmia	r2, {r1, r2}
 8003e24:	f7fe f81a 	bl	8001e5c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8003e28:	f7fd ff08 	bl	8001c3c <ssd1306_UpdateScreen>
			ssd1306_SetCursor(10, second_menu_row);
 8003e2c:	4b7f      	ldr	r3, [pc, #508]	; (800402c <am2302+0x2d8>)
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	4619      	mov	r1, r3
 8003e34:	200a      	movs	r0, #10
 8003e36:	f7fe f837 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8003e3a:	4a76      	ldr	r2, [pc, #472]	; (8004014 <am2302+0x2c0>)
 8003e3c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003e40:	2301      	movs	r3, #1
 8003e42:	ca06      	ldmia	r2, {r1, r2}
 8003e44:	f7fe f80a 	bl	8001e5c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8003e48:	f7fd fef8 	bl	8001c3c <ssd1306_UpdateScreen>
			memset(str, 0, sizeof(str));
 8003e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e50:	2210      	movs	r2, #16
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f003 ff0b 	bl	8007c70 <memset>

			// Print T and H on OLED
			itoa(am3202_sensor.temterature , str, 10);
 8003e5a:	4b75      	ldr	r3, [pc, #468]	; (8004030 <am2302+0x2dc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003e62:	220a      	movs	r2, #10
 8003e64:	4618      	mov	r0, r3
 8003e66:	f003 fef3 	bl	8007c50 <itoa>
			strcat(str_temperature, "T = ");
 8003e6a:	f107 031c 	add.w	r3, r7, #28
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc f96c 	bl	800014c <strlen>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	f107 031c 	add.w	r3, r7, #28
 8003e7c:	4413      	add	r3, r2
 8003e7e:	4a6d      	ldr	r2, [pc, #436]	; (8004034 <am2302+0x2e0>)
 8003e80:	6810      	ldr	r0, [r2, #0]
 8003e82:	6018      	str	r0, [r3, #0]
 8003e84:	7912      	ldrb	r2, [r2, #4]
 8003e86:	711a      	strb	r2, [r3, #4]
			strcat(str_temperature, str);
 8003e88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e8c:	f107 031c 	add.w	r3, r7, #28
 8003e90:	4611      	mov	r1, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f003 ffca 	bl	8007e2c <strcat>
			strcat(str_temperature, " C");
 8003e98:	f107 031c 	add.w	r3, r7, #28
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fc f955 	bl	800014c <strlen>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f107 031c 	add.w	r3, r7, #28
 8003eaa:	4413      	add	r3, r2
 8003eac:	4a62      	ldr	r2, [pc, #392]	; (8004038 <am2302+0x2e4>)
 8003eae:	8811      	ldrh	r1, [r2, #0]
 8003eb0:	7892      	ldrb	r2, [r2, #2]
 8003eb2:	8019      	strh	r1, [r3, #0]
 8003eb4:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, first_menu_row);
 8003eb6:	4b5c      	ldr	r3, [pc, #368]	; (8004028 <am2302+0x2d4>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	200a      	movs	r0, #10
 8003ec0:	f7fd fff2 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_temperature,  Font_7x10, White);
 8003ec4:	4a53      	ldr	r2, [pc, #332]	; (8004014 <am2302+0x2c0>)
 8003ec6:	f107 001c 	add.w	r0, r7, #28
 8003eca:	2301      	movs	r3, #1
 8003ecc:	ca06      	ldmia	r2, {r1, r2}
 8003ece:	f7fd ffc5 	bl	8001e5c <ssd1306_WriteString>
			memset(str, 0,sizeof(str));
 8003ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f003 fec8 	bl	8007c70 <memset>

			itoa(am3202_sensor.humidity , str, 10);
 8003ee0:	4b53      	ldr	r3, [pc, #332]	; (8004030 <am2302+0x2dc>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003ee8:	220a      	movs	r2, #10
 8003eea:	4618      	mov	r0, r3
 8003eec:	f003 feb0 	bl	8007c50 <itoa>
			strcat(str_humidity, "H = ");
 8003ef0:	f107 0310 	add.w	r3, r7, #16
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fc f929 	bl	800014c <strlen>
 8003efa:	4603      	mov	r3, r0
 8003efc:	461a      	mov	r2, r3
 8003efe:	f107 0310 	add.w	r3, r7, #16
 8003f02:	4413      	add	r3, r2
 8003f04:	4a4d      	ldr	r2, [pc, #308]	; (800403c <am2302+0x2e8>)
 8003f06:	6810      	ldr	r0, [r2, #0]
 8003f08:	6018      	str	r0, [r3, #0]
 8003f0a:	7912      	ldrb	r2, [r2, #4]
 8003f0c:	711a      	strb	r2, [r3, #4]
			strcat(str_humidity, str);
 8003f0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f12:	f107 0310 	add.w	r3, r7, #16
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f003 ff87 	bl	8007e2c <strcat>
			strcat(str_humidity, " %");
 8003f1e:	f107 0310 	add.w	r3, r7, #16
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc f912 	bl	800014c <strlen>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f107 0310 	add.w	r3, r7, #16
 8003f30:	4413      	add	r3, r2
 8003f32:	4a43      	ldr	r2, [pc, #268]	; (8004040 <am2302+0x2ec>)
 8003f34:	8811      	ldrh	r1, [r2, #0]
 8003f36:	7892      	ldrb	r2, [r2, #2]
 8003f38:	8019      	strh	r1, [r3, #0]
 8003f3a:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, second_menu_row);
 8003f3c:	4b3b      	ldr	r3, [pc, #236]	; (800402c <am2302+0x2d8>)
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	4619      	mov	r1, r3
 8003f44:	200a      	movs	r0, #10
 8003f46:	f7fd ffaf 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_humidity,  Font_7x10, White);
 8003f4a:	4a32      	ldr	r2, [pc, #200]	; (8004014 <am2302+0x2c0>)
 8003f4c:	f107 0010 	add.w	r0, r7, #16
 8003f50:	2301      	movs	r3, #1
 8003f52:	ca06      	ldmia	r2, {r1, r2}
 8003f54:	f7fd ff82 	bl	8001e5c <ssd1306_WriteString>

			// Print counter
			memset(str, 0,sizeof(str));
 8003f58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f003 fe85 	bl	8007c70 <memset>
			strcat(str, "Counter: ");
 8003f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fc f8ee 	bl	800014c <strlen>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f78:	4413      	add	r3, r2
 8003f7a:	4932      	ldr	r1, [pc, #200]	; (8004044 <am2302+0x2f0>)
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	460b      	mov	r3, r1
 8003f80:	cb03      	ldmia	r3!, {r0, r1}
 8003f82:	6010      	str	r0, [r2, #0]
 8003f84:	6051      	str	r1, [r2, #4]
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	8113      	strh	r3, [r2, #8]
			itoa(measure_counter , str_1, 10);
 8003f8a:	4b25      	ldr	r3, [pc, #148]	; (8004020 <am2302+0x2cc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	1d39      	adds	r1, r7, #4
 8003f90:	220a      	movs	r2, #10
 8003f92:	4618      	mov	r0, r3
 8003f94:	f003 fe5c 	bl	8007c50 <itoa>
			strcat(str, str_1);
 8003f98:	1d3a      	adds	r2, r7, #4
 8003f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f003 ff43 	bl	8007e2c <strcat>
			ssd1306_SetCursor(10, third_menu_row);
 8003fa6:	4b28      	ldr	r3, [pc, #160]	; (8004048 <am2302+0x2f4>)
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	4619      	mov	r1, r3
 8003fae:	200a      	movs	r0, #10
 8003fb0:	f7fd ff7a 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8003fb4:	4a17      	ldr	r2, [pc, #92]	; (8004014 <am2302+0x2c0>)
 8003fb6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003fba:	2301      	movs	r3, #1
 8003fbc:	ca06      	ldmia	r2, {r1, r2}
 8003fbe:	f7fd ff4d 	bl	8001e5c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8003fc2:	f7fd fe3b 	bl	8001c3c <ssd1306_UpdateScreen>

			measure_counter++;
 8003fc6:	4b16      	ldr	r3, [pc, #88]	; (8004020 <am2302+0x2cc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <am2302+0x2cc>)
 8003fce:	6013      	str	r3, [r2, #0]
			am2302_ready = false;
 8003fd0:	4b14      	ldr	r3, [pc, #80]	; (8004024 <am2302+0x2d0>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
		}

	}while (button_status != BUTTON_ENTER);
 8003fd6:	4b10      	ldr	r3, [pc, #64]	; (8004018 <am2302+0x2c4>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	f47f aef5 	bne.w	8003dca <am2302+0x76>
	HAL_TIM_Base_Stop_IT(&htim2);
 8003fe0:	480a      	ldr	r0, [pc, #40]	; (800400c <am2302+0x2b8>)
 8003fe2:	f002 fdc3 	bl	8006b6c <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn off LED
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fec:	4817      	ldr	r0, [pc, #92]	; (800404c <am2302+0x2f8>)
 8003fee:	f000 fef2 	bl	8004dd6 <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;	// Unlock  UP and DOWN buttons interrupt
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <am2302+0x2c8>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <am2302+0x2bc>)
 8003ffa:	4a15      	ldr	r2, [pc, #84]	; (8004050 <am2302+0x2fc>)
 8003ffc:	601a      	str	r2, [r3, #0]
	print_menu_items();
 8003ffe:	f7ff fc81 	bl	8003904 <print_menu_items>
}
 8004002:	bf00      	nop
 8004004:	3738      	adds	r7, #56	; 0x38
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000734 	.word	0x20000734
 8004010:	20000028 	.word	0x20000028
 8004014:	20000014 	.word	0x20000014
 8004018:	200005a1 	.word	0x200005a1
 800401c:	200005a0 	.word	0x200005a0
 8004020:	2000059c 	.word	0x2000059c
 8004024:	20000590 	.word	0x20000590
 8004028:	20000030 	.word	0x20000030
 800402c:	20000032 	.word	0x20000032
 8004030:	200005ac 	.word	0x200005ac
 8004034:	080086e0 	.word	0x080086e0
 8004038:	080086e8 	.word	0x080086e8
 800403c:	080086ec 	.word	0x080086ec
 8004040:	080086f4 	.word	0x080086f4
 8004044:	080086f8 	.word	0x080086f8
 8004048:	20000034 	.word	0x20000034
 800404c:	40011000 	.word	0x40011000
 8004050:	20000854 	.word	0x20000854

08004054 <periodic_measurement_am2302_on>:
// ----------------------------------------------------------------------------------------
// Function uses Tim2 for periodic measuring.
void periodic_measurement_am2302_on(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08e      	sub	sp, #56	; 0x38
 8004058:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);		// For sensor measure
 800405a:	48a7      	ldr	r0, [pc, #668]	; (80042f8 <periodic_measurement_am2302_on+0x2a4>)
 800405c:	f002 fd34 	bl	8006ac8 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 8004060:	2064      	movs	r0, #100	; 0x64
 8004062:	f000 fa7f 	bl	8004564 <HAL_Delay>
	clearn_oled();
 8004066:	f7fd fd39 	bl	8001adc <clearn_oled>
	print_rectangle_on_head();
 800406a:	f7ff fa35 	bl	80034d8 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 800406e:	2300      	movs	r3, #0
 8004070:	62bb      	str	r3, [r7, #40]	; 0x28
 8004072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 800407e:	4b9f      	ldr	r3, [pc, #636]	; (80042fc <periodic_measurement_am2302_on+0x2a8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6959      	ldr	r1, [r3, #20]
 8004084:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004088:	220f      	movs	r2, #15
 800408a:	4618      	mov	r0, r3
 800408c:	f003 fee5 	bl	8007e5a <strncpy>
	ssd1306_SetCursor(10, 3);
 8004090:	2103      	movs	r1, #3
 8004092:	200a      	movs	r0, #10
 8004094:	f7fd ff08 	bl	8001ea8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004098:	4a99      	ldr	r2, [pc, #612]	; (8004300 <periodic_measurement_am2302_on+0x2ac>)
 800409a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800409e:	2301      	movs	r3, #1
 80040a0:	ca06      	ldmia	r2, {r1, r2}
 80040a2:	f7fd fedb 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80040a6:	f7fd fdc9 	bl	8001c3c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80040aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ae:	2210      	movs	r2, #16
 80040b0:	2100      	movs	r1, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f003 fddc 	bl	8007c70 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 80040b8:	4b92      	ldr	r3, [pc, #584]	; (8004304 <periodic_measurement_am2302_on+0x2b0>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80040be:	4b92      	ldr	r3, [pc, #584]	; (8004308 <periodic_measurement_am2302_on+0x2b4>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	701a      	strb	r2, [r3, #0]
	measure_counter = 1;
 80040c4:	4b91      	ldr	r3, [pc, #580]	; (800430c <periodic_measurement_am2302_on+0x2b8>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		// Print data
		if(am2302_ready == true)	// Flug from interrup tim2
 80040ca:	4b91      	ldr	r3, [pc, #580]	; (8004310 <periodic_measurement_am2302_on+0x2bc>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8101 	beq.w	80042d6 <periodic_measurement_am2302_on+0x282>
		{
			char str_temperature[10] = {0};
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	f107 0320 	add.w	r3, r7, #32
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	809a      	strh	r2, [r3, #4]
			char str_humidity[10] = {0};
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	f107 0314 	add.w	r3, r7, #20
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	809a      	strh	r2, [r3, #4]
			char str_1[10] = {0};
 80040f0:	2300      	movs	r3, #0
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	f107 0308 	add.w	r3, r7, #8
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	809a      	strh	r2, [r3, #4]

			// Clear data place on OLED
			memset(str, ' ', sizeof(str));
 80040fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004102:	2210      	movs	r2, #16
 8004104:	2120      	movs	r1, #32
 8004106:	4618      	mov	r0, r3
 8004108:	f003 fdb2 	bl	8007c70 <memset>
			ssd1306_SetCursor(10, first_menu_row);
 800410c:	4b81      	ldr	r3, [pc, #516]	; (8004314 <periodic_measurement_am2302_on+0x2c0>)
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	4619      	mov	r1, r3
 8004114:	200a      	movs	r0, #10
 8004116:	f7fd fec7 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 800411a:	4a79      	ldr	r2, [pc, #484]	; (8004300 <periodic_measurement_am2302_on+0x2ac>)
 800411c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004120:	2301      	movs	r3, #1
 8004122:	ca06      	ldmia	r2, {r1, r2}
 8004124:	f7fd fe9a 	bl	8001e5c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004128:	f7fd fd88 	bl	8001c3c <ssd1306_UpdateScreen>
			ssd1306_SetCursor(10, second_menu_row);
 800412c:	4b7a      	ldr	r3, [pc, #488]	; (8004318 <periodic_measurement_am2302_on+0x2c4>)
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	4619      	mov	r1, r3
 8004134:	200a      	movs	r0, #10
 8004136:	f7fd feb7 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 800413a:	4a71      	ldr	r2, [pc, #452]	; (8004300 <periodic_measurement_am2302_on+0x2ac>)
 800413c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004140:	2301      	movs	r3, #1
 8004142:	ca06      	ldmia	r2, {r1, r2}
 8004144:	f7fd fe8a 	bl	8001e5c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004148:	f7fd fd78 	bl	8001c3c <ssd1306_UpdateScreen>

			memset(str, 0, sizeof(str));
 800414c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004150:	2210      	movs	r2, #16
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f003 fd8b 	bl	8007c70 <memset>
			// Print T and H on OLED

			itoa(am3202_sensor.temterature , str, 10);
 800415a:	4b70      	ldr	r3, [pc, #448]	; (800431c <periodic_measurement_am2302_on+0x2c8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004162:	220a      	movs	r2, #10
 8004164:	4618      	mov	r0, r3
 8004166:	f003 fd73 	bl	8007c50 <itoa>
			strcat(str_temperature, "T = ");
 800416a:	f107 031c 	add.w	r3, r7, #28
 800416e:	4618      	mov	r0, r3
 8004170:	f7fb ffec 	bl	800014c <strlen>
 8004174:	4603      	mov	r3, r0
 8004176:	461a      	mov	r2, r3
 8004178:	f107 031c 	add.w	r3, r7, #28
 800417c:	4413      	add	r3, r2
 800417e:	4a68      	ldr	r2, [pc, #416]	; (8004320 <periodic_measurement_am2302_on+0x2cc>)
 8004180:	6810      	ldr	r0, [r2, #0]
 8004182:	6018      	str	r0, [r3, #0]
 8004184:	7912      	ldrb	r2, [r2, #4]
 8004186:	711a      	strb	r2, [r3, #4]
			strcat(str_temperature, str);
 8004188:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800418c:	f107 031c 	add.w	r3, r7, #28
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f003 fe4a 	bl	8007e2c <strcat>
			strcat(str_temperature, " C");
 8004198:	f107 031c 	add.w	r3, r7, #28
 800419c:	4618      	mov	r0, r3
 800419e:	f7fb ffd5 	bl	800014c <strlen>
 80041a2:	4603      	mov	r3, r0
 80041a4:	461a      	mov	r2, r3
 80041a6:	f107 031c 	add.w	r3, r7, #28
 80041aa:	4413      	add	r3, r2
 80041ac:	4a5d      	ldr	r2, [pc, #372]	; (8004324 <periodic_measurement_am2302_on+0x2d0>)
 80041ae:	8811      	ldrh	r1, [r2, #0]
 80041b0:	7892      	ldrb	r2, [r2, #2]
 80041b2:	8019      	strh	r1, [r3, #0]
 80041b4:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, first_menu_row);
 80041b6:	4b57      	ldr	r3, [pc, #348]	; (8004314 <periodic_measurement_am2302_on+0x2c0>)
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	4619      	mov	r1, r3
 80041be:	200a      	movs	r0, #10
 80041c0:	f7fd fe72 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_temperature,  Font_7x10, White);
 80041c4:	4a4e      	ldr	r2, [pc, #312]	; (8004300 <periodic_measurement_am2302_on+0x2ac>)
 80041c6:	f107 001c 	add.w	r0, r7, #28
 80041ca:	2301      	movs	r3, #1
 80041cc:	ca06      	ldmia	r2, {r1, r2}
 80041ce:	f7fd fe45 	bl	8001e5c <ssd1306_WriteString>

			memset(str, 0,sizeof(str));
 80041d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041d6:	2210      	movs	r2, #16
 80041d8:	2100      	movs	r1, #0
 80041da:	4618      	mov	r0, r3
 80041dc:	f003 fd48 	bl	8007c70 <memset>
			itoa(am3202_sensor.humidity , str, 10);
 80041e0:	4b4e      	ldr	r3, [pc, #312]	; (800431c <periodic_measurement_am2302_on+0x2c8>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80041e8:	220a      	movs	r2, #10
 80041ea:	4618      	mov	r0, r3
 80041ec:	f003 fd30 	bl	8007c50 <itoa>
			strcat(str_humidity, "H = ");
 80041f0:	f107 0310 	add.w	r3, r7, #16
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fb ffa9 	bl	800014c <strlen>
 80041fa:	4603      	mov	r3, r0
 80041fc:	461a      	mov	r2, r3
 80041fe:	f107 0310 	add.w	r3, r7, #16
 8004202:	4413      	add	r3, r2
 8004204:	4a48      	ldr	r2, [pc, #288]	; (8004328 <periodic_measurement_am2302_on+0x2d4>)
 8004206:	6810      	ldr	r0, [r2, #0]
 8004208:	6018      	str	r0, [r3, #0]
 800420a:	7912      	ldrb	r2, [r2, #4]
 800420c:	711a      	strb	r2, [r3, #4]
			strcat(str_humidity, str);
 800420e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004212:	f107 0310 	add.w	r3, r7, #16
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f003 fe07 	bl	8007e2c <strcat>
			strcat(str_humidity, " %");
 800421e:	f107 0310 	add.w	r3, r7, #16
 8004222:	4618      	mov	r0, r3
 8004224:	f7fb ff92 	bl	800014c <strlen>
 8004228:	4603      	mov	r3, r0
 800422a:	461a      	mov	r2, r3
 800422c:	f107 0310 	add.w	r3, r7, #16
 8004230:	4413      	add	r3, r2
 8004232:	4a3e      	ldr	r2, [pc, #248]	; (800432c <periodic_measurement_am2302_on+0x2d8>)
 8004234:	8811      	ldrh	r1, [r2, #0]
 8004236:	7892      	ldrb	r2, [r2, #2]
 8004238:	8019      	strh	r1, [r3, #0]
 800423a:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, second_menu_row);
 800423c:	4b36      	ldr	r3, [pc, #216]	; (8004318 <periodic_measurement_am2302_on+0x2c4>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	4619      	mov	r1, r3
 8004244:	200a      	movs	r0, #10
 8004246:	f7fd fe2f 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_humidity,  Font_7x10, White);
 800424a:	4a2d      	ldr	r2, [pc, #180]	; (8004300 <periodic_measurement_am2302_on+0x2ac>)
 800424c:	f107 0010 	add.w	r0, r7, #16
 8004250:	2301      	movs	r3, #1
 8004252:	ca06      	ldmia	r2, {r1, r2}
 8004254:	f7fd fe02 	bl	8001e5c <ssd1306_WriteString>

			// Print counter
			memset(str, 0,sizeof(str));
 8004258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800425c:	2210      	movs	r2, #16
 800425e:	2100      	movs	r1, #0
 8004260:	4618      	mov	r0, r3
 8004262:	f003 fd05 	bl	8007c70 <memset>
			strcat(str, "Counter: ");
 8004266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800426a:	4618      	mov	r0, r3
 800426c:	f7fb ff6e 	bl	800014c <strlen>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004278:	4413      	add	r3, r2
 800427a:	492d      	ldr	r1, [pc, #180]	; (8004330 <periodic_measurement_am2302_on+0x2dc>)
 800427c:	461a      	mov	r2, r3
 800427e:	460b      	mov	r3, r1
 8004280:	cb03      	ldmia	r3!, {r0, r1}
 8004282:	6010      	str	r0, [r2, #0]
 8004284:	6051      	str	r1, [r2, #4]
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	8113      	strh	r3, [r2, #8]
			itoa(measure_counter , str_1, 10);
 800428a:	4b20      	ldr	r3, [pc, #128]	; (800430c <periodic_measurement_am2302_on+0x2b8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1d39      	adds	r1, r7, #4
 8004290:	220a      	movs	r2, #10
 8004292:	4618      	mov	r0, r3
 8004294:	f003 fcdc 	bl	8007c50 <itoa>
			strcat(str, str_1);
 8004298:	1d3a      	adds	r2, r7, #4
 800429a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f003 fdc3 	bl	8007e2c <strcat>
			ssd1306_SetCursor(10, third_menu_row);
 80042a6:	4b23      	ldr	r3, [pc, #140]	; (8004334 <periodic_measurement_am2302_on+0x2e0>)
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	4619      	mov	r1, r3
 80042ae:	200a      	movs	r0, #10
 80042b0:	f7fd fdfa 	bl	8001ea8 <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 80042b4:	4a12      	ldr	r2, [pc, #72]	; (8004300 <periodic_measurement_am2302_on+0x2ac>)
 80042b6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80042ba:	2301      	movs	r3, #1
 80042bc:	ca06      	ldmia	r2, {r1, r2}
 80042be:	f7fd fdcd 	bl	8001e5c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80042c2:	f7fd fcbb 	bl	8001c3c <ssd1306_UpdateScreen>

			measure_counter++;
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <periodic_measurement_am2302_on+0x2b8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	4a0f      	ldr	r2, [pc, #60]	; (800430c <periodic_measurement_am2302_on+0x2b8>)
 80042ce:	6013      	str	r3, [r2, #0]
			am2302_ready = false;
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <periodic_measurement_am2302_on+0x2bc>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
		}

	}while (button_status != BUTTON_ENTER);
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <periodic_measurement_am2302_on+0x2b0>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	f47f aef5 	bne.w	80040ca <periodic_measurement_am2302_on+0x76>
	block_interrupt_form_up_and_down_buttons = false;	// Unlock  UP and DOWN buttons interrupt
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <periodic_measurement_am2302_on+0x2b4>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <periodic_measurement_am2302_on+0x2a8>)
 80042e8:	4a13      	ldr	r2, [pc, #76]	; (8004338 <periodic_measurement_am2302_on+0x2e4>)
 80042ea:	601a      	str	r2, [r3, #0]
	print_menu_items();
 80042ec:	f7ff fb0a 	bl	8003904 <print_menu_items>
}
 80042f0:	bf00      	nop
 80042f2:	3738      	adds	r7, #56	; 0x38
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000734 	.word	0x20000734
 80042fc:	20000028 	.word	0x20000028
 8004300:	20000014 	.word	0x20000014
 8004304:	200005a1 	.word	0x200005a1
 8004308:	200005a0 	.word	0x200005a0
 800430c:	2000059c 	.word	0x2000059c
 8004310:	20000590 	.word	0x20000590
 8004314:	20000030 	.word	0x20000030
 8004318:	20000032 	.word	0x20000032
 800431c:	200005ac 	.word	0x200005ac
 8004320:	080086e0 	.word	0x080086e0
 8004324:	080086e8 	.word	0x080086e8
 8004328:	080086ec 	.word	0x080086ec
 800432c:	080086f4 	.word	0x080086f4
 8004330:	080086f8 	.word	0x080086f8
 8004334:	20000034 	.word	0x20000034
 8004338:	20000854 	.word	0x20000854

0800433c <periodic_measurement_am2302_off>:
// ----------------------------------------------------------------------------------------
// Function turn off Tim2 for periodic measuring.
void periodic_measurement_am2302_off(void)
{
 800433c:	b590      	push	{r4, r7, lr}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);		// For sensor measure
 8004342:	483a      	ldr	r0, [pc, #232]	; (800442c <periodic_measurement_am2302_off+0xf0>)
 8004344:	f002 fbc0 	bl	8006ac8 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 8004348:	2064      	movs	r0, #100	; 0x64
 800434a:	f000 f90b 	bl	8004564 <HAL_Delay>
	clearn_oled();
 800434e:	f7fd fbc5 	bl	8001adc <clearn_oled>
	print_rectangle_on_head();
 8004352:	f7ff f8c1 	bl	80034d8 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004356:	2300      	movs	r3, #0
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	1d3b      	adds	r3, r7, #4
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004364:	4b32      	ldr	r3, [pc, #200]	; (8004430 <periodic_measurement_am2302_off+0xf4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6959      	ldr	r1, [r3, #20]
 800436a:	463b      	mov	r3, r7
 800436c:	220f      	movs	r2, #15
 800436e:	4618      	mov	r0, r3
 8004370:	f003 fd73 	bl	8007e5a <strncpy>
	ssd1306_SetCursor(10, 3);
 8004374:	2103      	movs	r1, #3
 8004376:	200a      	movs	r0, #10
 8004378:	f7fd fd96 	bl	8001ea8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800437c:	4a2d      	ldr	r2, [pc, #180]	; (8004434 <periodic_measurement_am2302_off+0xf8>)
 800437e:	4638      	mov	r0, r7
 8004380:	2301      	movs	r3, #1
 8004382:	ca06      	ldmia	r2, {r1, r2}
 8004384:	f7fd fd6a 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004388:	f7fd fc58 	bl	8001c3c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800438c:	463b      	mov	r3, r7
 800438e:	2210      	movs	r2, #16
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f003 fc6c 	bl	8007c70 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004398:	4b27      	ldr	r3, [pc, #156]	; (8004438 <periodic_measurement_am2302_off+0xfc>)
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800439e:	4b27      	ldr	r3, [pc, #156]	; (800443c <periodic_measurement_am2302_off+0x100>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	701a      	strb	r2, [r3, #0]
	measure_counter = 1;
 80043a4:	4b26      	ldr	r3, [pc, #152]	; (8004440 <periodic_measurement_am2302_off+0x104>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80043aa:	4820      	ldr	r0, [pc, #128]	; (800442c <periodic_measurement_am2302_off+0xf0>)
 80043ac:	f002 fbde 	bl	8006b6c <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn off LED
 80043b0:	2201      	movs	r2, #1
 80043b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043b6:	4823      	ldr	r0, [pc, #140]	; (8004444 <periodic_measurement_am2302_off+0x108>)
 80043b8:	f000 fd0d 	bl	8004dd6 <HAL_GPIO_WritePin>

	ssd1306_SetCursor(10, second_menu_row);
 80043bc:	4b22      	ldr	r3, [pc, #136]	; (8004448 <periodic_measurement_am2302_off+0x10c>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	4619      	mov	r1, r3
 80043c4:	200a      	movs	r0, #10
 80043c6:	f7fd fd6f 	bl	8001ea8 <ssd1306_SetCursor>
	strcat(str, "STOP measuring");
 80043ca:	463b      	mov	r3, r7
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fb febd 	bl	800014c <strlen>
 80043d2:	4603      	mov	r3, r0
 80043d4:	461a      	mov	r2, r3
 80043d6:	463b      	mov	r3, r7
 80043d8:	4413      	add	r3, r2
 80043da:	4a1c      	ldr	r2, [pc, #112]	; (800444c <periodic_measurement_am2302_off+0x110>)
 80043dc:	461c      	mov	r4, r3
 80043de:	4613      	mov	r3, r2
 80043e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80043e2:	6020      	str	r0, [r4, #0]
 80043e4:	6061      	str	r1, [r4, #4]
 80043e6:	60a2      	str	r2, [r4, #8]
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	789b      	ldrb	r3, [r3, #2]
 80043ec:	81a2      	strh	r2, [r4, #12]
 80043ee:	73a3      	strb	r3, [r4, #14]
	ssd1306_WriteString(str,  Font_7x10, White);
 80043f0:	4a10      	ldr	r2, [pc, #64]	; (8004434 <periodic_measurement_am2302_off+0xf8>)
 80043f2:	4638      	mov	r0, r7
 80043f4:	2301      	movs	r3, #1
 80043f6:	ca06      	ldmia	r2, {r1, r2}
 80043f8:	f7fd fd30 	bl	8001e5c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80043fc:	f7fd fc1e 	bl	8001c3c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004400:	463b      	mov	r3, r7
 8004402:	2210      	movs	r2, #16
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f003 fc32 	bl	8007c70 <memset>

	// waiting for press enter(SW2) button
	do{

	}while (button_status != BUTTON_ENTER);
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <periodic_measurement_am2302_off+0xfc>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d1fb      	bne.n	800440c <periodic_measurement_am2302_off+0xd0>
	block_interrupt_form_up_and_down_buttons = false;	// Unlock  UP and DOWN buttons interrupt
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <periodic_measurement_am2302_off+0x100>)
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <periodic_measurement_am2302_off+0xf4>)
 800441c:	4a0c      	ldr	r2, [pc, #48]	; (8004450 <periodic_measurement_am2302_off+0x114>)
 800441e:	601a      	str	r2, [r3, #0]
	print_menu_items();
 8004420:	f7ff fa70 	bl	8003904 <print_menu_items>

}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	bd90      	pop	{r4, r7, pc}
 800442c:	20000734 	.word	0x20000734
 8004430:	20000028 	.word	0x20000028
 8004434:	20000014 	.word	0x20000014
 8004438:	200005a1 	.word	0x200005a1
 800443c:	200005a0 	.word	0x200005a0
 8004440:	2000059c 	.word	0x2000059c
 8004444:	40011000 	.word	0x40011000
 8004448:	20000032 	.word	0x20000032
 800444c:	08008704 	.word	0x08008704
 8004450:	20000854 	.word	0x20000854

08004454 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004454:	480c      	ldr	r0, [pc, #48]	; (8004488 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004456:	490d      	ldr	r1, [pc, #52]	; (800448c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004458:	4a0d      	ldr	r2, [pc, #52]	; (8004490 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800445a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800445c:	e002      	b.n	8004464 <LoopCopyDataInit>

0800445e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800445e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004462:	3304      	adds	r3, #4

08004464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004468:	d3f9      	bcc.n	800445e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800446a:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800446c:	4c0a      	ldr	r4, [pc, #40]	; (8004498 <LoopFillZerobss+0x22>)
  movs r3, #0
 800446e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004470:	e001      	b.n	8004476 <LoopFillZerobss>

08004472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004474:	3204      	adds	r2, #4

08004476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004478:	d3fb      	bcc.n	8004472 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800447a:	f7fe fd57 	bl	8002f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800447e:	f003 fbab 	bl	8007bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004482:	f7fd ff43 	bl	800230c <main>
  bx lr
 8004486:	4770      	bx	lr
  ldr r0, =_sdata
 8004488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800448c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8004490:	08008f4c 	.word	0x08008f4c
  ldr r2, =_sbss
 8004494:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8004498:	20000964 	.word	0x20000964

0800449c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800449c:	e7fe      	b.n	800449c <ADC1_2_IRQHandler>
	...

080044a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <HAL_Init+0x28>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a07      	ldr	r2, [pc, #28]	; (80044c8 <HAL_Init+0x28>)
 80044aa:	f043 0310 	orr.w	r3, r3, #16
 80044ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044b0:	2003      	movs	r0, #3
 80044b2:	f000 f947 	bl	8004744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044b6:	2000      	movs	r0, #0
 80044b8:	f000 f808 	bl	80044cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044bc:	f7fe fa1c 	bl	80028f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40022000 	.word	0x40022000

080044cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044d4:	4b12      	ldr	r3, [pc, #72]	; (8004520 <HAL_InitTick+0x54>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b12      	ldr	r3, [pc, #72]	; (8004524 <HAL_InitTick+0x58>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	4619      	mov	r1, r3
 80044de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f95f 	bl	80047ae <HAL_SYSTICK_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e00e      	b.n	8004518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b0f      	cmp	r3, #15
 80044fe:	d80a      	bhi.n	8004516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004500:	2200      	movs	r2, #0
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004508:	f000 f927 	bl	800475a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800450c:	4a06      	ldr	r2, [pc, #24]	; (8004528 <HAL_InitTick+0x5c>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e000      	b.n	8004518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000024 	.word	0x20000024
 8004524:	20000044 	.word	0x20000044
 8004528:	20000040 	.word	0x20000040

0800452c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_IncTick+0x1c>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_IncTick+0x20>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4413      	add	r3, r2
 800453c:	4a03      	ldr	r2, [pc, #12]	; (800454c <HAL_IncTick+0x20>)
 800453e:	6013      	str	r3, [r2, #0]
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	20000044 	.word	0x20000044
 800454c:	20000950 	.word	0x20000950

08004550 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return uwTick;
 8004554:	4b02      	ldr	r3, [pc, #8]	; (8004560 <HAL_GetTick+0x10>)
 8004556:	681b      	ldr	r3, [r3, #0]
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	20000950 	.word	0x20000950

08004564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800456c:	f7ff fff0 	bl	8004550 <HAL_GetTick>
 8004570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800457c:	d005      	beq.n	800458a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800457e:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <HAL_Delay+0x44>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800458a:	bf00      	nop
 800458c:	f7ff ffe0 	bl	8004550 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	429a      	cmp	r2, r3
 800459a:	d8f7      	bhi.n	800458c <HAL_Delay+0x28>
  {
  }
}
 800459c:	bf00      	nop
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000044 	.word	0x20000044

080045ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045bc:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <__NVIC_SetPriorityGrouping+0x44>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045c8:	4013      	ands	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045de:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <__NVIC_SetPriorityGrouping+0x44>)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	60d3      	str	r3, [r2, #12]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <__NVIC_GetPriorityGrouping+0x18>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	0a1b      	lsrs	r3, r3, #8
 80045fe:	f003 0307 	and.w	r3, r3, #7
}
 8004602:	4618      	mov	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	e000ed00 	.word	0xe000ed00

08004610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800461a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461e:	2b00      	cmp	r3, #0
 8004620:	db0b      	blt.n	800463a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	f003 021f 	and.w	r2, r3, #31
 8004628:	4906      	ldr	r1, [pc, #24]	; (8004644 <__NVIC_EnableIRQ+0x34>)
 800462a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	2001      	movs	r0, #1
 8004632:	fa00 f202 	lsl.w	r2, r0, r2
 8004636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	e000e100 	.word	0xe000e100

08004648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	6039      	str	r1, [r7, #0]
 8004652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004658:	2b00      	cmp	r3, #0
 800465a:	db0a      	blt.n	8004672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	490c      	ldr	r1, [pc, #48]	; (8004694 <__NVIC_SetPriority+0x4c>)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	0112      	lsls	r2, r2, #4
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	440b      	add	r3, r1
 800466c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004670:	e00a      	b.n	8004688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	4908      	ldr	r1, [pc, #32]	; (8004698 <__NVIC_SetPriority+0x50>)
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	3b04      	subs	r3, #4
 8004680:	0112      	lsls	r2, r2, #4
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	440b      	add	r3, r1
 8004686:	761a      	strb	r2, [r3, #24]
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	e000e100 	.word	0xe000e100
 8004698:	e000ed00 	.word	0xe000ed00

0800469c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	; 0x24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f1c3 0307 	rsb	r3, r3, #7
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	bf28      	it	cs
 80046ba:	2304      	movcs	r3, #4
 80046bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2b06      	cmp	r3, #6
 80046c4:	d902      	bls.n	80046cc <NVIC_EncodePriority+0x30>
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3b03      	subs	r3, #3
 80046ca:	e000      	b.n	80046ce <NVIC_EncodePriority+0x32>
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43da      	mvns	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	401a      	ands	r2, r3
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	fa01 f303 	lsl.w	r3, r1, r3
 80046ee:	43d9      	mvns	r1, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f4:	4313      	orrs	r3, r2
         );
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3724      	adds	r7, #36	; 0x24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3b01      	subs	r3, #1
 800470c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004710:	d301      	bcc.n	8004716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004712:	2301      	movs	r3, #1
 8004714:	e00f      	b.n	8004736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004716:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <SysTick_Config+0x40>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3b01      	subs	r3, #1
 800471c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800471e:	210f      	movs	r1, #15
 8004720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004724:	f7ff ff90 	bl	8004648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <SysTick_Config+0x40>)
 800472a:	2200      	movs	r2, #0
 800472c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800472e:	4b04      	ldr	r3, [pc, #16]	; (8004740 <SysTick_Config+0x40>)
 8004730:	2207      	movs	r2, #7
 8004732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	e000e010 	.word	0xe000e010

08004744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff ff2d 	bl	80045ac <__NVIC_SetPriorityGrouping>
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800475a:	b580      	push	{r7, lr}
 800475c:	b086      	sub	sp, #24
 800475e:	af00      	add	r7, sp, #0
 8004760:	4603      	mov	r3, r0
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800476c:	f7ff ff42 	bl	80045f4 <__NVIC_GetPriorityGrouping>
 8004770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	6978      	ldr	r0, [r7, #20]
 8004778:	f7ff ff90 	bl	800469c <NVIC_EncodePriority>
 800477c:	4602      	mov	r2, r0
 800477e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004782:	4611      	mov	r1, r2
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff ff5f 	bl	8004648 <__NVIC_SetPriority>
}
 800478a:	bf00      	nop
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	4603      	mov	r3, r0
 800479a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800479c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff35 	bl	8004610 <__NVIC_EnableIRQ>
}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff ffa2 	bl	8004700 <SysTick_Config>
 80047bc:	4603      	mov	r3, r0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d008      	beq.n	80047ee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2204      	movs	r2, #4
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e020      	b.n	8004830 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 020e 	bic.w	r2, r2, #14
 80047fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004816:	2101      	movs	r1, #1
 8004818:	fa01 f202 	lsl.w	r2, r1, r2
 800481c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800482e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
	...

0800483c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800484e:	2b02      	cmp	r3, #2
 8004850:	d005      	beq.n	800485e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2204      	movs	r2, #4
 8004856:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
 800485c:	e051      	b.n	8004902 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 020e 	bic.w	r2, r2, #14
 800486c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0201 	bic.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a22      	ldr	r2, [pc, #136]	; (800490c <HAL_DMA_Abort_IT+0xd0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d029      	beq.n	80048dc <HAL_DMA_Abort_IT+0xa0>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a20      	ldr	r2, [pc, #128]	; (8004910 <HAL_DMA_Abort_IT+0xd4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d022      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x9c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <HAL_DMA_Abort_IT+0xd8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d01a      	beq.n	80048d2 <HAL_DMA_Abort_IT+0x96>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <HAL_DMA_Abort_IT+0xdc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d012      	beq.n	80048cc <HAL_DMA_Abort_IT+0x90>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1c      	ldr	r2, [pc, #112]	; (800491c <HAL_DMA_Abort_IT+0xe0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00a      	beq.n	80048c6 <HAL_DMA_Abort_IT+0x8a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1a      	ldr	r2, [pc, #104]	; (8004920 <HAL_DMA_Abort_IT+0xe4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d102      	bne.n	80048c0 <HAL_DMA_Abort_IT+0x84>
 80048ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048be:	e00e      	b.n	80048de <HAL_DMA_Abort_IT+0xa2>
 80048c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048c4:	e00b      	b.n	80048de <HAL_DMA_Abort_IT+0xa2>
 80048c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048ca:	e008      	b.n	80048de <HAL_DMA_Abort_IT+0xa2>
 80048cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048d0:	e005      	b.n	80048de <HAL_DMA_Abort_IT+0xa2>
 80048d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048d6:	e002      	b.n	80048de <HAL_DMA_Abort_IT+0xa2>
 80048d8:	2310      	movs	r3, #16
 80048da:	e000      	b.n	80048de <HAL_DMA_Abort_IT+0xa2>
 80048dc:	2301      	movs	r3, #1
 80048de:	4a11      	ldr	r2, [pc, #68]	; (8004924 <HAL_DMA_Abort_IT+0xe8>)
 80048e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
    } 
  }
  return status;
 8004902:	7bfb      	ldrb	r3, [r7, #15]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40020008 	.word	0x40020008
 8004910:	4002001c 	.word	0x4002001c
 8004914:	40020030 	.word	0x40020030
 8004918:	40020044 	.word	0x40020044
 800491c:	40020058 	.word	0x40020058
 8004920:	4002006c 	.word	0x4002006c
 8004924:	40020000 	.word	0x40020000

08004928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004928:	b480      	push	{r7}
 800492a:	b08b      	sub	sp, #44	; 0x2c
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004936:	2300      	movs	r3, #0
 8004938:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800493a:	e169      	b.n	8004c10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800493c:	2201      	movs	r2, #1
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	4013      	ands	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	429a      	cmp	r2, r3
 8004956:	f040 8158 	bne.w	8004c0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4a9a      	ldr	r2, [pc, #616]	; (8004bc8 <HAL_GPIO_Init+0x2a0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d05e      	beq.n	8004a22 <HAL_GPIO_Init+0xfa>
 8004964:	4a98      	ldr	r2, [pc, #608]	; (8004bc8 <HAL_GPIO_Init+0x2a0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d875      	bhi.n	8004a56 <HAL_GPIO_Init+0x12e>
 800496a:	4a98      	ldr	r2, [pc, #608]	; (8004bcc <HAL_GPIO_Init+0x2a4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d058      	beq.n	8004a22 <HAL_GPIO_Init+0xfa>
 8004970:	4a96      	ldr	r2, [pc, #600]	; (8004bcc <HAL_GPIO_Init+0x2a4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d86f      	bhi.n	8004a56 <HAL_GPIO_Init+0x12e>
 8004976:	4a96      	ldr	r2, [pc, #600]	; (8004bd0 <HAL_GPIO_Init+0x2a8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d052      	beq.n	8004a22 <HAL_GPIO_Init+0xfa>
 800497c:	4a94      	ldr	r2, [pc, #592]	; (8004bd0 <HAL_GPIO_Init+0x2a8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d869      	bhi.n	8004a56 <HAL_GPIO_Init+0x12e>
 8004982:	4a94      	ldr	r2, [pc, #592]	; (8004bd4 <HAL_GPIO_Init+0x2ac>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d04c      	beq.n	8004a22 <HAL_GPIO_Init+0xfa>
 8004988:	4a92      	ldr	r2, [pc, #584]	; (8004bd4 <HAL_GPIO_Init+0x2ac>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d863      	bhi.n	8004a56 <HAL_GPIO_Init+0x12e>
 800498e:	4a92      	ldr	r2, [pc, #584]	; (8004bd8 <HAL_GPIO_Init+0x2b0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d046      	beq.n	8004a22 <HAL_GPIO_Init+0xfa>
 8004994:	4a90      	ldr	r2, [pc, #576]	; (8004bd8 <HAL_GPIO_Init+0x2b0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d85d      	bhi.n	8004a56 <HAL_GPIO_Init+0x12e>
 800499a:	2b12      	cmp	r3, #18
 800499c:	d82a      	bhi.n	80049f4 <HAL_GPIO_Init+0xcc>
 800499e:	2b12      	cmp	r3, #18
 80049a0:	d859      	bhi.n	8004a56 <HAL_GPIO_Init+0x12e>
 80049a2:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <HAL_GPIO_Init+0x80>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	08004a23 	.word	0x08004a23
 80049ac:	080049fd 	.word	0x080049fd
 80049b0:	08004a0f 	.word	0x08004a0f
 80049b4:	08004a51 	.word	0x08004a51
 80049b8:	08004a57 	.word	0x08004a57
 80049bc:	08004a57 	.word	0x08004a57
 80049c0:	08004a57 	.word	0x08004a57
 80049c4:	08004a57 	.word	0x08004a57
 80049c8:	08004a57 	.word	0x08004a57
 80049cc:	08004a57 	.word	0x08004a57
 80049d0:	08004a57 	.word	0x08004a57
 80049d4:	08004a57 	.word	0x08004a57
 80049d8:	08004a57 	.word	0x08004a57
 80049dc:	08004a57 	.word	0x08004a57
 80049e0:	08004a57 	.word	0x08004a57
 80049e4:	08004a57 	.word	0x08004a57
 80049e8:	08004a57 	.word	0x08004a57
 80049ec:	08004a05 	.word	0x08004a05
 80049f0:	08004a19 	.word	0x08004a19
 80049f4:	4a79      	ldr	r2, [pc, #484]	; (8004bdc <HAL_GPIO_Init+0x2b4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80049fa:	e02c      	b.n	8004a56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	623b      	str	r3, [r7, #32]
          break;
 8004a02:	e029      	b.n	8004a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	623b      	str	r3, [r7, #32]
          break;
 8004a0c:	e024      	b.n	8004a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	3308      	adds	r3, #8
 8004a14:	623b      	str	r3, [r7, #32]
          break;
 8004a16:	e01f      	b.n	8004a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	623b      	str	r3, [r7, #32]
          break;
 8004a20:	e01a      	b.n	8004a58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	623b      	str	r3, [r7, #32]
          break;
 8004a2e:	e013      	b.n	8004a58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d105      	bne.n	8004a44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a38:	2308      	movs	r3, #8
 8004a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	611a      	str	r2, [r3, #16]
          break;
 8004a42:	e009      	b.n	8004a58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a44:	2308      	movs	r3, #8
 8004a46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	615a      	str	r2, [r3, #20]
          break;
 8004a4e:	e003      	b.n	8004a58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a50:	2300      	movs	r3, #0
 8004a52:	623b      	str	r3, [r7, #32]
          break;
 8004a54:	e000      	b.n	8004a58 <HAL_GPIO_Init+0x130>
          break;
 8004a56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2bff      	cmp	r3, #255	; 0xff
 8004a5c:	d801      	bhi.n	8004a62 <HAL_GPIO_Init+0x13a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	e001      	b.n	8004a66 <HAL_GPIO_Init+0x13e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	2bff      	cmp	r3, #255	; 0xff
 8004a6c:	d802      	bhi.n	8004a74 <HAL_GPIO_Init+0x14c>
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	e002      	b.n	8004a7a <HAL_GPIO_Init+0x152>
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	3b08      	subs	r3, #8
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	210f      	movs	r1, #15
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	6a39      	ldr	r1, [r7, #32]
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	fa01 f303 	lsl.w	r3, r1, r3
 8004a94:	431a      	orrs	r2, r3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 80b1 	beq.w	8004c0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004aa8:	4b4d      	ldr	r3, [pc, #308]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	4a4c      	ldr	r2, [pc, #304]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	6193      	str	r3, [r2, #24]
 8004ab4:	4b4a      	ldr	r3, [pc, #296]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ac0:	4a48      	ldr	r2, [pc, #288]	; (8004be4 <HAL_GPIO_Init+0x2bc>)
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	089b      	lsrs	r3, r3, #2
 8004ac6:	3302      	adds	r3, #2
 8004ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004acc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	220f      	movs	r2, #15
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a40      	ldr	r2, [pc, #256]	; (8004be8 <HAL_GPIO_Init+0x2c0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <HAL_GPIO_Init+0x1ec>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a3f      	ldr	r2, [pc, #252]	; (8004bec <HAL_GPIO_Init+0x2c4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00d      	beq.n	8004b10 <HAL_GPIO_Init+0x1e8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a3e      	ldr	r2, [pc, #248]	; (8004bf0 <HAL_GPIO_Init+0x2c8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <HAL_GPIO_Init+0x1e4>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a3d      	ldr	r2, [pc, #244]	; (8004bf4 <HAL_GPIO_Init+0x2cc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d101      	bne.n	8004b08 <HAL_GPIO_Init+0x1e0>
 8004b04:	2303      	movs	r3, #3
 8004b06:	e006      	b.n	8004b16 <HAL_GPIO_Init+0x1ee>
 8004b08:	2304      	movs	r3, #4
 8004b0a:	e004      	b.n	8004b16 <HAL_GPIO_Init+0x1ee>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e002      	b.n	8004b16 <HAL_GPIO_Init+0x1ee>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <HAL_GPIO_Init+0x1ee>
 8004b14:	2300      	movs	r3, #0
 8004b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b18:	f002 0203 	and.w	r2, r2, #3
 8004b1c:	0092      	lsls	r2, r2, #2
 8004b1e:	4093      	lsls	r3, r2
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b26:	492f      	ldr	r1, [pc, #188]	; (8004be4 <HAL_GPIO_Init+0x2bc>)
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d006      	beq.n	8004b4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b40:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	492c      	ldr	r1, [pc, #176]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	600b      	str	r3, [r1, #0]
 8004b4c:	e006      	b.n	8004b5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b4e:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	43db      	mvns	r3, r3
 8004b56:	4928      	ldr	r1, [pc, #160]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d006      	beq.n	8004b76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b68:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	4922      	ldr	r1, [pc, #136]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	604b      	str	r3, [r1, #4]
 8004b74:	e006      	b.n	8004b84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b76:	4b20      	ldr	r3, [pc, #128]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	491e      	ldr	r1, [pc, #120]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d006      	beq.n	8004b9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b90:	4b19      	ldr	r3, [pc, #100]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	4918      	ldr	r1, [pc, #96]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	608b      	str	r3, [r1, #8]
 8004b9c:	e006      	b.n	8004bac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b9e:	4b16      	ldr	r3, [pc, #88]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	4914      	ldr	r1, [pc, #80]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d021      	beq.n	8004bfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	490e      	ldr	r1, [pc, #56]	; (8004bf8 <HAL_GPIO_Init+0x2d0>)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60cb      	str	r3, [r1, #12]
 8004bc4:	e021      	b.n	8004c0a <HAL_GPIO_Init+0x2e2>
 8004bc6:	bf00      	nop
 8004bc8:	10320000 	.word	0x10320000
 8004bcc:	10310000 	.word	0x10310000
 8004bd0:	10220000 	.word	0x10220000
 8004bd4:	10210000 	.word	0x10210000
 8004bd8:	10120000 	.word	0x10120000
 8004bdc:	10110000 	.word	0x10110000
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40010800 	.word	0x40010800
 8004bec:	40010c00 	.word	0x40010c00
 8004bf0:	40011000 	.word	0x40011000
 8004bf4:	40011400 	.word	0x40011400
 8004bf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_GPIO_Init+0x304>)
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	4909      	ldr	r1, [pc, #36]	; (8004c2c <HAL_GPIO_Init+0x304>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f47f ae8e 	bne.w	800493c <HAL_GPIO_Init+0x14>
  }
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	372c      	adds	r7, #44	; 0x2c
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr
 8004c2c:	40010400 	.word	0x40010400

08004c30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	; 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8004c3e:	e09a      	b.n	8004d76 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004c40:	2201      	movs	r2, #1
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 808d 	beq.w	8004d70 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8004c56:	4a4e      	ldr	r2, [pc, #312]	; (8004d90 <HAL_GPIO_DeInit+0x160>)
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	089b      	lsrs	r3, r3, #2
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c62:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	220f      	movs	r2, #15
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4013      	ands	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a46      	ldr	r2, [pc, #280]	; (8004d94 <HAL_GPIO_DeInit+0x164>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_GPIO_DeInit+0x78>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a45      	ldr	r2, [pc, #276]	; (8004d98 <HAL_GPIO_DeInit+0x168>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00d      	beq.n	8004ca4 <HAL_GPIO_DeInit+0x74>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a44      	ldr	r2, [pc, #272]	; (8004d9c <HAL_GPIO_DeInit+0x16c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <HAL_GPIO_DeInit+0x70>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a43      	ldr	r2, [pc, #268]	; (8004da0 <HAL_GPIO_DeInit+0x170>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d101      	bne.n	8004c9c <HAL_GPIO_DeInit+0x6c>
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e006      	b.n	8004caa <HAL_GPIO_DeInit+0x7a>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	e004      	b.n	8004caa <HAL_GPIO_DeInit+0x7a>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e002      	b.n	8004caa <HAL_GPIO_DeInit+0x7a>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_GPIO_DeInit+0x7a>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	69fa      	ldr	r2, [r7, #28]
 8004cac:	f002 0203 	and.w	r2, r2, #3
 8004cb0:	0092      	lsls	r2, r2, #2
 8004cb2:	4093      	lsls	r3, r2
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d132      	bne.n	8004d20 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	220f      	movs	r2, #15
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004cca:	4a31      	ldr	r2, [pc, #196]	; (8004d90 <HAL_GPIO_DeInit+0x160>)
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	089b      	lsrs	r3, r3, #2
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	43da      	mvns	r2, r3
 8004cda:	482d      	ldr	r0, [pc, #180]	; (8004d90 <HAL_GPIO_DeInit+0x160>)
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	089b      	lsrs	r3, r3, #2
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	3302      	adds	r3, #2
 8004ce4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004ce8:	4b2e      	ldr	r3, [pc, #184]	; (8004da4 <HAL_GPIO_DeInit+0x174>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	492c      	ldr	r1, [pc, #176]	; (8004da4 <HAL_GPIO_DeInit+0x174>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004cf6:	4b2b      	ldr	r3, [pc, #172]	; (8004da4 <HAL_GPIO_DeInit+0x174>)
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	4929      	ldr	r1, [pc, #164]	; (8004da4 <HAL_GPIO_DeInit+0x174>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004d04:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <HAL_GPIO_DeInit+0x174>)
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	4925      	ldr	r1, [pc, #148]	; (8004da4 <HAL_GPIO_DeInit+0x174>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004d12:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <HAL_GPIO_DeInit+0x174>)
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	4922      	ldr	r1, [pc, #136]	; (8004da4 <HAL_GPIO_DeInit+0x174>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2bff      	cmp	r3, #255	; 0xff
 8004d24:	d801      	bhi.n	8004d2a <HAL_GPIO_DeInit+0xfa>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	e001      	b.n	8004d2e <HAL_GPIO_DeInit+0xfe>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2bff      	cmp	r3, #255	; 0xff
 8004d34:	d802      	bhi.n	8004d3c <HAL_GPIO_DeInit+0x10c>
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	e002      	b.n	8004d42 <HAL_GPIO_DeInit+0x112>
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	3b08      	subs	r3, #8
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	210f      	movs	r1, #15
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d50:	43db      	mvns	r3, r3
 8004d52:	401a      	ands	r2, r3
 8004d54:	2104      	movs	r1, #4
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	401a      	ands	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	3301      	adds	r3, #1
 8004d74:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f47f af5e 	bne.w	8004c40 <HAL_GPIO_DeInit+0x10>
  }
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	3724      	adds	r7, #36	; 0x24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40010800 	.word	0x40010800
 8004d98:	40010c00 	.word	0x40010c00
 8004d9c:	40011000 	.word	0x40011000
 8004da0:	40011400 	.word	0x40011400
 8004da4:	40010400 	.word	0x40010400

08004da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	887b      	ldrh	r3, [r7, #2]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
 8004dc4:	e001      	b.n	8004dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	460b      	mov	r3, r1
 8004de0:	807b      	strh	r3, [r7, #2]
 8004de2:	4613      	mov	r3, r2
 8004de4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004de6:	787b      	ldrb	r3, [r7, #1]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dec:	887a      	ldrh	r2, [r7, #2]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004df2:	e003      	b.n	8004dfc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004df4:	887b      	ldrh	r3, [r7, #2]
 8004df6:	041a      	lsls	r2, r3, #16
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	611a      	str	r2, [r3, #16]
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e18:	887a      	ldrh	r2, [r7, #2]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	041a      	lsls	r2, r3, #16
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	43d9      	mvns	r1, r3
 8004e24:	887b      	ldrh	r3, [r7, #2]
 8004e26:	400b      	ands	r3, r1
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	611a      	str	r2, [r3, #16]
}
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e42:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d006      	beq.n	8004e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e4e:	4a05      	ldr	r2, [pc, #20]	; (8004e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fd fcf4 	bl	8002844 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40010400 	.word	0x40010400

08004e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e12b      	b.n	80050d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fd fd64 	bl	800295c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2224      	movs	r2, #36	; 0x24
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0201 	bic.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ecc:	f000 fffa 	bl	8005ec4 <HAL_RCC_GetPCLK1Freq>
 8004ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4a81      	ldr	r2, [pc, #516]	; (80050dc <HAL_I2C_Init+0x274>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d807      	bhi.n	8004eec <HAL_I2C_Init+0x84>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a80      	ldr	r2, [pc, #512]	; (80050e0 <HAL_I2C_Init+0x278>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	bf94      	ite	ls
 8004ee4:	2301      	movls	r3, #1
 8004ee6:	2300      	movhi	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	e006      	b.n	8004efa <HAL_I2C_Init+0x92>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a7d      	ldr	r2, [pc, #500]	; (80050e4 <HAL_I2C_Init+0x27c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	bf94      	ite	ls
 8004ef4:	2301      	movls	r3, #1
 8004ef6:	2300      	movhi	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e0e7      	b.n	80050d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a78      	ldr	r2, [pc, #480]	; (80050e8 <HAL_I2C_Init+0x280>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	0c9b      	lsrs	r3, r3, #18
 8004f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a6a      	ldr	r2, [pc, #424]	; (80050dc <HAL_I2C_Init+0x274>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d802      	bhi.n	8004f3c <HAL_I2C_Init+0xd4>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	e009      	b.n	8004f50 <HAL_I2C_Init+0xe8>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f42:	fb02 f303 	mul.w	r3, r2, r3
 8004f46:	4a69      	ldr	r2, [pc, #420]	; (80050ec <HAL_I2C_Init+0x284>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	099b      	lsrs	r3, r3, #6
 8004f4e:	3301      	adds	r3, #1
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	495c      	ldr	r1, [pc, #368]	; (80050dc <HAL_I2C_Init+0x274>)
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	d819      	bhi.n	8004fa4 <HAL_I2C_Init+0x13c>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	1e59      	subs	r1, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f7e:	1c59      	adds	r1, r3, #1
 8004f80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f84:	400b      	ands	r3, r1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_I2C_Init+0x138>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1e59      	subs	r1, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f98:	3301      	adds	r3, #1
 8004f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9e:	e051      	b.n	8005044 <HAL_I2C_Init+0x1dc>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	e04f      	b.n	8005044 <HAL_I2C_Init+0x1dc>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d111      	bne.n	8004fd0 <HAL_I2C_Init+0x168>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	1e58      	subs	r0, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6859      	ldr	r1, [r3, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	440b      	add	r3, r1
 8004fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2301      	moveq	r3, #1
 8004fca:	2300      	movne	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	e012      	b.n	8004ff6 <HAL_I2C_Init+0x18e>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1e58      	subs	r0, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	0099      	lsls	r1, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_I2C_Init+0x196>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e022      	b.n	8005044 <HAL_I2C_Init+0x1dc>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10e      	bne.n	8005024 <HAL_I2C_Init+0x1bc>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1e58      	subs	r0, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6859      	ldr	r1, [r3, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	440b      	add	r3, r1
 8005014:	fbb0 f3f3 	udiv	r3, r0, r3
 8005018:	3301      	adds	r3, #1
 800501a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800501e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005022:	e00f      	b.n	8005044 <HAL_I2C_Init+0x1dc>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1e58      	subs	r0, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6859      	ldr	r1, [r3, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	0099      	lsls	r1, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	fbb0 f3f3 	udiv	r3, r0, r3
 800503a:	3301      	adds	r3, #1
 800503c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	6809      	ldr	r1, [r1, #0]
 8005048:	4313      	orrs	r3, r2
 800504a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6911      	ldr	r1, [r2, #16]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68d2      	ldr	r2, [r2, #12]
 800507e:	4311      	orrs	r1, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	430b      	orrs	r3, r1
 8005086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	000186a0 	.word	0x000186a0
 80050e0:	001e847f 	.word	0x001e847f
 80050e4:	003d08ff 	.word	0x003d08ff
 80050e8:	431bde83 	.word	0x431bde83
 80050ec:	10624dd3 	.word	0x10624dd3

080050f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	4608      	mov	r0, r1
 80050fa:	4611      	mov	r1, r2
 80050fc:	461a      	mov	r2, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	817b      	strh	r3, [r7, #10]
 8005102:	460b      	mov	r3, r1
 8005104:	813b      	strh	r3, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800510a:	f7ff fa21 	bl	8004550 <HAL_GetTick>
 800510e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b20      	cmp	r3, #32
 800511a:	f040 80d9 	bne.w	80052d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	2319      	movs	r3, #25
 8005124:	2201      	movs	r2, #1
 8005126:	496d      	ldr	r1, [pc, #436]	; (80052dc <HAL_I2C_Mem_Write+0x1ec>)
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f971 	bl	8005410 <I2C_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005134:	2302      	movs	r3, #2
 8005136:	e0cc      	b.n	80052d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_I2C_Mem_Write+0x56>
 8005142:	2302      	movs	r3, #2
 8005144:	e0c5      	b.n	80052d2 <HAL_I2C_Mem_Write+0x1e2>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d007      	beq.n	800516c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800517a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2221      	movs	r2, #33	; 0x21
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2240      	movs	r2, #64	; 0x40
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a3a      	ldr	r2, [r7, #32]
 8005196:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800519c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a4d      	ldr	r2, [pc, #308]	; (80052e0 <HAL_I2C_Mem_Write+0x1f0>)
 80051ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051ae:	88f8      	ldrh	r0, [r7, #6]
 80051b0:	893a      	ldrh	r2, [r7, #8]
 80051b2:	8979      	ldrh	r1, [r7, #10]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	4603      	mov	r3, r0
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f890 	bl	80052e4 <I2C_RequestMemoryWrite>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d052      	beq.n	8005270 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e081      	b.n	80052d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f9f2 	bl	80055bc <I2C_WaitOnTXEFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d107      	bne.n	80051f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e06b      	b.n	80052d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	781a      	ldrb	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b04      	cmp	r3, #4
 8005236:	d11b      	bne.n	8005270 <HAL_I2C_Mem_Write+0x180>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	2b00      	cmp	r3, #0
 800523e:	d017      	beq.n	8005270 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1aa      	bne.n	80051ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f9de 	bl	800563e <I2C_WaitOnBTFFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00d      	beq.n	80052a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	2b04      	cmp	r3, #4
 800528e:	d107      	bne.n	80052a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e016      	b.n	80052d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e000      	b.n	80052d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80052d0:	2302      	movs	r3, #2
  }
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	00100002 	.word	0x00100002
 80052e0:	ffff0000 	.word	0xffff0000

080052e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	4608      	mov	r0, r1
 80052ee:	4611      	mov	r1, r2
 80052f0:	461a      	mov	r2, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	817b      	strh	r3, [r7, #10]
 80052f6:	460b      	mov	r3, r1
 80052f8:	813b      	strh	r3, [r7, #8]
 80052fa:	4613      	mov	r3, r2
 80052fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800530c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	2200      	movs	r2, #0
 8005316:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f878 	bl	8005410 <I2C_WaitOnFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00d      	beq.n	8005342 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005334:	d103      	bne.n	800533e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e05f      	b.n	8005402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005342:	897b      	ldrh	r3, [r7, #10]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005350:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	6a3a      	ldr	r2, [r7, #32]
 8005356:	492d      	ldr	r1, [pc, #180]	; (800540c <I2C_RequestMemoryWrite+0x128>)
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f8b0 	bl	80054be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e04c      	b.n	8005402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800537e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005380:	6a39      	ldr	r1, [r7, #32]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f91a 	bl	80055bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00d      	beq.n	80053aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2b04      	cmp	r3, #4
 8005394:	d107      	bne.n	80053a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e02b      	b.n	8005402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d105      	bne.n	80053bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053b0:	893b      	ldrh	r3, [r7, #8]
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	611a      	str	r2, [r3, #16]
 80053ba:	e021      	b.n	8005400 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053bc:	893b      	ldrh	r3, [r7, #8]
 80053be:	0a1b      	lsrs	r3, r3, #8
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053cc:	6a39      	ldr	r1, [r7, #32]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f8f4 	bl	80055bc <I2C_WaitOnTXEFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00d      	beq.n	80053f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d107      	bne.n	80053f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e005      	b.n	8005402 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053f6:	893b      	ldrh	r3, [r7, #8]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	00010002 	.word	0x00010002

08005410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4613      	mov	r3, r2
 800541e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005420:	e025      	b.n	800546e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005428:	d021      	beq.n	800546e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542a:	f7ff f891 	bl	8004550 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d116      	bne.n	800546e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f043 0220 	orr.w	r2, r3, #32
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e023      	b.n	80054b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	0c1b      	lsrs	r3, r3, #16
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	d10d      	bne.n	8005494 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	43da      	mvns	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4013      	ands	r3, r2
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	bf0c      	ite	eq
 800548a:	2301      	moveq	r3, #1
 800548c:	2300      	movne	r3, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	e00c      	b.n	80054ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	43da      	mvns	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4013      	ands	r3, r2
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	bf0c      	ite	eq
 80054a6:	2301      	moveq	r3, #1
 80054a8:	2300      	movne	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d0b6      	beq.n	8005422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054cc:	e051      	b.n	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054dc:	d123      	bne.n	8005526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f043 0204 	orr.w	r2, r3, #4
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e046      	b.n	80055b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800552c:	d021      	beq.n	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552e:	f7ff f80f 	bl	8004550 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	429a      	cmp	r2, r3
 800553c:	d302      	bcc.n	8005544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d116      	bne.n	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2220      	movs	r2, #32
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f043 0220 	orr.w	r2, r3, #32
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e020      	b.n	80055b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	0c1b      	lsrs	r3, r3, #16
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	d10c      	bne.n	8005596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	43da      	mvns	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4013      	ands	r3, r2
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	e00b      	b.n	80055ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	43da      	mvns	r2, r3
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4013      	ands	r3, r2
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d18d      	bne.n	80054ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055c8:	e02d      	b.n	8005626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 f878 	bl	80056c0 <I2C_IsAcknowledgeFailed>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e02d      	b.n	8005636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e0:	d021      	beq.n	8005626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e2:	f7fe ffb5 	bl	8004550 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d302      	bcc.n	80055f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d116      	bne.n	8005626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f043 0220 	orr.w	r2, r3, #32
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e007      	b.n	8005636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005630:	2b80      	cmp	r3, #128	; 0x80
 8005632:	d1ca      	bne.n	80055ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800564a:	e02d      	b.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f837 	bl	80056c0 <I2C_IsAcknowledgeFailed>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e02d      	b.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005662:	d021      	beq.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005664:	f7fe ff74 	bl	8004550 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	d302      	bcc.n	800567a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d116      	bne.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	f043 0220 	orr.w	r2, r3, #32
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e007      	b.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d1ca      	bne.n	800564c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d6:	d11b      	bne.n	8005710 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	f043 0204 	orr.w	r2, r3, #4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e26c      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 8087 	beq.w	800584a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800573c:	4b92      	ldr	r3, [pc, #584]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 030c 	and.w	r3, r3, #12
 8005744:	2b04      	cmp	r3, #4
 8005746:	d00c      	beq.n	8005762 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005748:	4b8f      	ldr	r3, [pc, #572]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 030c 	and.w	r3, r3, #12
 8005750:	2b08      	cmp	r3, #8
 8005752:	d112      	bne.n	800577a <HAL_RCC_OscConfig+0x5e>
 8005754:	4b8c      	ldr	r3, [pc, #560]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800575c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005760:	d10b      	bne.n	800577a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005762:	4b89      	ldr	r3, [pc, #548]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d06c      	beq.n	8005848 <HAL_RCC_OscConfig+0x12c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d168      	bne.n	8005848 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e246      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005782:	d106      	bne.n	8005792 <HAL_RCC_OscConfig+0x76>
 8005784:	4b80      	ldr	r3, [pc, #512]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a7f      	ldr	r2, [pc, #508]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 800578a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	e02e      	b.n	80057f0 <HAL_RCC_OscConfig+0xd4>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x98>
 800579a:	4b7b      	ldr	r3, [pc, #492]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a7a      	ldr	r2, [pc, #488]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80057a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	4b78      	ldr	r3, [pc, #480]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a77      	ldr	r2, [pc, #476]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e01d      	b.n	80057f0 <HAL_RCC_OscConfig+0xd4>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057bc:	d10c      	bne.n	80057d8 <HAL_RCC_OscConfig+0xbc>
 80057be:	4b72      	ldr	r3, [pc, #456]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a71      	ldr	r2, [pc, #452]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80057c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	4b6f      	ldr	r3, [pc, #444]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a6e      	ldr	r2, [pc, #440]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80057d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e00b      	b.n	80057f0 <HAL_RCC_OscConfig+0xd4>
 80057d8:	4b6b      	ldr	r3, [pc, #428]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a6a      	ldr	r2, [pc, #424]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80057de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	4b68      	ldr	r3, [pc, #416]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a67      	ldr	r2, [pc, #412]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80057ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d013      	beq.n	8005820 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f8:	f7fe feaa 	bl	8004550 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005800:	f7fe fea6 	bl	8004550 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b64      	cmp	r3, #100	; 0x64
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e1fa      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005812:	4b5d      	ldr	r3, [pc, #372]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f0      	beq.n	8005800 <HAL_RCC_OscConfig+0xe4>
 800581e:	e014      	b.n	800584a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005820:	f7fe fe96 	bl	8004550 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005828:	f7fe fe92 	bl	8004550 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b64      	cmp	r3, #100	; 0x64
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e1e6      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800583a:	4b53      	ldr	r3, [pc, #332]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f0      	bne.n	8005828 <HAL_RCC_OscConfig+0x10c>
 8005846:	e000      	b.n	800584a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d063      	beq.n	800591e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005856:	4b4c      	ldr	r3, [pc, #304]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005862:	4b49      	ldr	r3, [pc, #292]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b08      	cmp	r3, #8
 800586c:	d11c      	bne.n	80058a8 <HAL_RCC_OscConfig+0x18c>
 800586e:	4b46      	ldr	r3, [pc, #280]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d116      	bne.n	80058a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587a:	4b43      	ldr	r3, [pc, #268]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <HAL_RCC_OscConfig+0x176>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d001      	beq.n	8005892 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e1ba      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005892:	4b3d      	ldr	r3, [pc, #244]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4939      	ldr	r1, [pc, #228]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a6:	e03a      	b.n	800591e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d020      	beq.n	80058f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058b0:	4b36      	ldr	r3, [pc, #216]	; (800598c <HAL_RCC_OscConfig+0x270>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b6:	f7fe fe4b 	bl	8004550 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058be:	f7fe fe47 	bl	8004550 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e19b      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d0:	4b2d      	ldr	r3, [pc, #180]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058dc:	4b2a      	ldr	r3, [pc, #168]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	4927      	ldr	r1, [pc, #156]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	600b      	str	r3, [r1, #0]
 80058f0:	e015      	b.n	800591e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058f2:	4b26      	ldr	r3, [pc, #152]	; (800598c <HAL_RCC_OscConfig+0x270>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f8:	f7fe fe2a 	bl	8004550 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005900:	f7fe fe26 	bl	8004550 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e17a      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005912:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d03a      	beq.n	80059a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d019      	beq.n	8005966 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005932:	4b17      	ldr	r3, [pc, #92]	; (8005990 <HAL_RCC_OscConfig+0x274>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005938:	f7fe fe0a 	bl	8004550 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005940:	f7fe fe06 	bl	8004550 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e15a      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005952:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <HAL_RCC_OscConfig+0x26c>)
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0f0      	beq.n	8005940 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800595e:	2001      	movs	r0, #1
 8005960:	f000 fad8 	bl	8005f14 <RCC_Delay>
 8005964:	e01c      	b.n	80059a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005966:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <HAL_RCC_OscConfig+0x274>)
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800596c:	f7fe fdf0 	bl	8004550 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005972:	e00f      	b.n	8005994 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005974:	f7fe fdec 	bl	8004550 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d908      	bls.n	8005994 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e140      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
 8005986:	bf00      	nop
 8005988:	40021000 	.word	0x40021000
 800598c:	42420000 	.word	0x42420000
 8005990:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005994:	4b9e      	ldr	r3, [pc, #632]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e9      	bne.n	8005974 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80a6 	beq.w	8005afa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ae:	2300      	movs	r3, #0
 80059b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059b2:	4b97      	ldr	r3, [pc, #604]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10d      	bne.n	80059da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059be:	4b94      	ldr	r3, [pc, #592]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	4a93      	ldr	r2, [pc, #588]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 80059c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c8:	61d3      	str	r3, [r2, #28]
 80059ca:	4b91      	ldr	r3, [pc, #580]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d2:	60bb      	str	r3, [r7, #8]
 80059d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d6:	2301      	movs	r3, #1
 80059d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059da:	4b8e      	ldr	r3, [pc, #568]	; (8005c14 <HAL_RCC_OscConfig+0x4f8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d118      	bne.n	8005a18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059e6:	4b8b      	ldr	r3, [pc, #556]	; (8005c14 <HAL_RCC_OscConfig+0x4f8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a8a      	ldr	r2, [pc, #552]	; (8005c14 <HAL_RCC_OscConfig+0x4f8>)
 80059ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059f2:	f7fe fdad 	bl	8004550 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059fa:	f7fe fda9 	bl	8004550 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b64      	cmp	r3, #100	; 0x64
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e0fd      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0c:	4b81      	ldr	r3, [pc, #516]	; (8005c14 <HAL_RCC_OscConfig+0x4f8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d106      	bne.n	8005a2e <HAL_RCC_OscConfig+0x312>
 8005a20:	4b7b      	ldr	r3, [pc, #492]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	4a7a      	ldr	r2, [pc, #488]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a26:	f043 0301 	orr.w	r3, r3, #1
 8005a2a:	6213      	str	r3, [r2, #32]
 8005a2c:	e02d      	b.n	8005a8a <HAL_RCC_OscConfig+0x36e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10c      	bne.n	8005a50 <HAL_RCC_OscConfig+0x334>
 8005a36:	4b76      	ldr	r3, [pc, #472]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	4a75      	ldr	r2, [pc, #468]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	6213      	str	r3, [r2, #32]
 8005a42:	4b73      	ldr	r3, [pc, #460]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	4a72      	ldr	r2, [pc, #456]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a48:	f023 0304 	bic.w	r3, r3, #4
 8005a4c:	6213      	str	r3, [r2, #32]
 8005a4e:	e01c      	b.n	8005a8a <HAL_RCC_OscConfig+0x36e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b05      	cmp	r3, #5
 8005a56:	d10c      	bne.n	8005a72 <HAL_RCC_OscConfig+0x356>
 8005a58:	4b6d      	ldr	r3, [pc, #436]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	4a6c      	ldr	r2, [pc, #432]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a5e:	f043 0304 	orr.w	r3, r3, #4
 8005a62:	6213      	str	r3, [r2, #32]
 8005a64:	4b6a      	ldr	r3, [pc, #424]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	4a69      	ldr	r2, [pc, #420]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	6213      	str	r3, [r2, #32]
 8005a70:	e00b      	b.n	8005a8a <HAL_RCC_OscConfig+0x36e>
 8005a72:	4b67      	ldr	r3, [pc, #412]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	4a66      	ldr	r2, [pc, #408]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a78:	f023 0301 	bic.w	r3, r3, #1
 8005a7c:	6213      	str	r3, [r2, #32]
 8005a7e:	4b64      	ldr	r3, [pc, #400]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	4a63      	ldr	r2, [pc, #396]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005a84:	f023 0304 	bic.w	r3, r3, #4
 8005a88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d015      	beq.n	8005abe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a92:	f7fe fd5d 	bl	8004550 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a98:	e00a      	b.n	8005ab0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9a:	f7fe fd59 	bl	8004550 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e0ab      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab0:	4b57      	ldr	r3, [pc, #348]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0ee      	beq.n	8005a9a <HAL_RCC_OscConfig+0x37e>
 8005abc:	e014      	b.n	8005ae8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005abe:	f7fe fd47 	bl	8004550 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac4:	e00a      	b.n	8005adc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac6:	f7fe fd43 	bl	8004550 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e095      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005adc:	4b4c      	ldr	r3, [pc, #304]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1ee      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d105      	bne.n	8005afa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aee:	4b48      	ldr	r3, [pc, #288]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	4a47      	ldr	r2, [pc, #284]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005af8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 8081 	beq.w	8005c06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b04:	4b42      	ldr	r3, [pc, #264]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d061      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d146      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b18:	4b3f      	ldr	r3, [pc, #252]	; (8005c18 <HAL_RCC_OscConfig+0x4fc>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7fe fd17 	bl	8004550 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b26:	f7fe fd13 	bl	8004550 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e067      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b38:	4b35      	ldr	r3, [pc, #212]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1f0      	bne.n	8005b26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b4c:	d108      	bne.n	8005b60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b4e:	4b30      	ldr	r3, [pc, #192]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	492d      	ldr	r1, [pc, #180]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b60:	4b2b      	ldr	r3, [pc, #172]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a19      	ldr	r1, [r3, #32]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	430b      	orrs	r3, r1
 8005b72:	4927      	ldr	r1, [pc, #156]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b78:	4b27      	ldr	r3, [pc, #156]	; (8005c18 <HAL_RCC_OscConfig+0x4fc>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7e:	f7fe fce7 	bl	8004550 <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b86:	f7fe fce3 	bl	8004550 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e037      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b98:	4b1d      	ldr	r3, [pc, #116]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0f0      	beq.n	8005b86 <HAL_RCC_OscConfig+0x46a>
 8005ba4:	e02f      	b.n	8005c06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba6:	4b1c      	ldr	r3, [pc, #112]	; (8005c18 <HAL_RCC_OscConfig+0x4fc>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bac:	f7fe fcd0 	bl	8004550 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fe fccc 	bl	8004550 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e020      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bc6:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f0      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x498>
 8005bd2:	e018      	b.n	8005c06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e013      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <HAL_RCC_OscConfig+0x4f4>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d106      	bne.n	8005c02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d001      	beq.n	8005c06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40021000 	.word	0x40021000
 8005c14:	40007000 	.word	0x40007000
 8005c18:	42420060 	.word	0x42420060

08005c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0d0      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c30:	4b6a      	ldr	r3, [pc, #424]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d910      	bls.n	8005c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3e:	4b67      	ldr	r3, [pc, #412]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f023 0207 	bic.w	r2, r3, #7
 8005c46:	4965      	ldr	r1, [pc, #404]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4e:	4b63      	ldr	r3, [pc, #396]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0b8      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d020      	beq.n	8005cae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c78:	4b59      	ldr	r3, [pc, #356]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4a58      	ldr	r2, [pc, #352]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c90:	4b53      	ldr	r3, [pc, #332]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4a52      	ldr	r2, [pc, #328]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c9c:	4b50      	ldr	r3, [pc, #320]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	494d      	ldr	r1, [pc, #308]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d040      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d107      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cc2:	4b47      	ldr	r3, [pc, #284]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d115      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e07f      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d107      	bne.n	8005cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cda:	4b41      	ldr	r3, [pc, #260]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e073      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cea:	4b3d      	ldr	r3, [pc, #244]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e06b      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cfa:	4b39      	ldr	r3, [pc, #228]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f023 0203 	bic.w	r2, r3, #3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	4936      	ldr	r1, [pc, #216]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d0c:	f7fe fc20 	bl	8004550 <HAL_GetTick>
 8005d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d12:	e00a      	b.n	8005d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d14:	f7fe fc1c 	bl	8004550 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e053      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d2a:	4b2d      	ldr	r3, [pc, #180]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f003 020c 	and.w	r2, r3, #12
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d1eb      	bne.n	8005d14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b27      	ldr	r3, [pc, #156]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d210      	bcs.n	8005d6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b24      	ldr	r3, [pc, #144]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 0207 	bic.w	r2, r3, #7
 8005d52:	4922      	ldr	r1, [pc, #136]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5a:	4b20      	ldr	r3, [pc, #128]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d001      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e032      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d78:	4b19      	ldr	r3, [pc, #100]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4916      	ldr	r1, [pc, #88]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d96:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	490e      	ldr	r1, [pc, #56]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005daa:	f000 f821 	bl	8005df0 <HAL_RCC_GetSysClockFreq>
 8005dae:	4602      	mov	r2, r0
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	091b      	lsrs	r3, r3, #4
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	490a      	ldr	r1, [pc, #40]	; (8005de4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbc:	5ccb      	ldrb	r3, [r1, r3]
 8005dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc2:	4a09      	ldr	r2, [pc, #36]	; (8005de8 <HAL_RCC_ClockConfig+0x1cc>)
 8005dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dc6:	4b09      	ldr	r3, [pc, #36]	; (8005dec <HAL_RCC_ClockConfig+0x1d0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe fb7e 	bl	80044cc <HAL_InitTick>

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40022000 	.word	0x40022000
 8005de0:	40021000 	.word	0x40021000
 8005de4:	08008ed4 	.word	0x08008ed4
 8005de8:	20000024 	.word	0x20000024
 8005dec:	20000040 	.word	0x20000040

08005df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df0:	b490      	push	{r4, r7}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005df6:	4b2a      	ldr	r3, [pc, #168]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005df8:	1d3c      	adds	r4, r7, #4
 8005dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005e00:	f240 2301 	movw	r3, #513	; 0x201
 8005e04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e1a:	4b22      	ldr	r3, [pc, #136]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d002      	beq.n	8005e30 <HAL_RCC_GetSysClockFreq+0x40>
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d003      	beq.n	8005e36 <HAL_RCC_GetSysClockFreq+0x46>
 8005e2e:	e02d      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e30:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e32:	623b      	str	r3, [r7, #32]
      break;
 8005e34:	e02d      	b.n	8005e92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	0c9b      	lsrs	r3, r3, #18
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e42:	4413      	add	r3, r2
 8005e44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d013      	beq.n	8005e7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e54:	4b13      	ldr	r3, [pc, #76]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	0c5b      	lsrs	r3, r3, #17
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e62:	4413      	add	r3, r2
 8005e64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	4a0e      	ldr	r2, [pc, #56]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e6e:	fb02 f203 	mul.w	r2, r2, r3
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7a:	e004      	b.n	8005e86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	4a0b      	ldr	r2, [pc, #44]	; (8005eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e80:	fb02 f303 	mul.w	r3, r2, r3
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	623b      	str	r3, [r7, #32]
      break;
 8005e8a:	e002      	b.n	8005e92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e8c:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e8e:	623b      	str	r3, [r7, #32]
      break;
 8005e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e92:	6a3b      	ldr	r3, [r7, #32]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3728      	adds	r7, #40	; 0x28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bc90      	pop	{r4, r7}
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	08008758 	.word	0x08008758
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	007a1200 	.word	0x007a1200
 8005eac:	003d0900 	.word	0x003d0900

08005eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eb4:	4b02      	ldr	r3, [pc, #8]	; (8005ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	20000024 	.word	0x20000024

08005ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ec8:	f7ff fff2 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	4903      	ldr	r1, [pc, #12]	; (8005ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eda:	5ccb      	ldrb	r3, [r1, r3]
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	08008ee4 	.word	0x08008ee4

08005eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ef0:	f7ff ffde 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	0adb      	lsrs	r3, r3, #11
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	4903      	ldr	r1, [pc, #12]	; (8005f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f02:	5ccb      	ldrb	r3, [r1, r3]
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	08008ee4 	.word	0x08008ee4

08005f14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <RCC_Delay+0x34>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <RCC_Delay+0x38>)
 8005f22:	fba2 2303 	umull	r2, r3, r2, r3
 8005f26:	0a5b      	lsrs	r3, r3, #9
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	fb02 f303 	mul.w	r3, r2, r3
 8005f2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f30:	bf00      	nop
  }
  while (Delay --);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	1e5a      	subs	r2, r3, #1
 8005f36:	60fa      	str	r2, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1f9      	bne.n	8005f30 <RCC_Delay+0x1c>
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bc80      	pop	{r7}
 8005f46:	4770      	bx	lr
 8005f48:	20000024 	.word	0x20000024
 8005f4c:	10624dd3 	.word	0x10624dd3

08005f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e076      	b.n	8006050 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d108      	bne.n	8005f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f72:	d009      	beq.n	8005f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	61da      	str	r2, [r3, #28]
 8005f7a:	e005      	b.n	8005f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fc fd18 	bl	80029d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	ea42 0103 	orr.w	r1, r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	0c1a      	lsrs	r2, r3, #16
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f002 0204 	and.w	r2, r2, #4
 800602e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69da      	ldr	r2, [r3, #28]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800603e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_SPI_Transmit+0x22>
 8006076:	2302      	movs	r3, #2
 8006078:	e126      	b.n	80062c8 <HAL_SPI_Transmit+0x270>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006082:	f7fe fa65 	bl	8004550 <HAL_GetTick>
 8006086:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	d002      	beq.n	800609e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006098:	2302      	movs	r3, #2
 800609a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800609c:	e10b      	b.n	80062b6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <HAL_SPI_Transmit+0x52>
 80060a4:	88fb      	ldrh	r3, [r7, #6]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060ae:	e102      	b.n	80062b6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2203      	movs	r2, #3
 80060b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	88fa      	ldrh	r2, [r7, #6]
 80060c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	88fa      	ldrh	r2, [r7, #6]
 80060ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f6:	d10f      	bne.n	8006118 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006106:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006116:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b40      	cmp	r3, #64	; 0x40
 8006124:	d007      	beq.n	8006136 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006134:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800613e:	d14b      	bne.n	80061d8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <HAL_SPI_Transmit+0xf6>
 8006148:	8afb      	ldrh	r3, [r7, #22]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d13e      	bne.n	80061cc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	881a      	ldrh	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	1c9a      	adds	r2, r3, #2
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006172:	e02b      	b.n	80061cc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b02      	cmp	r3, #2
 8006180:	d112      	bne.n	80061a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006186:	881a      	ldrh	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006192:	1c9a      	adds	r2, r3, #2
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80061a6:	e011      	b.n	80061cc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a8:	f7fe f9d2 	bl	8004550 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d803      	bhi.n	80061c0 <HAL_SPI_Transmit+0x168>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061be:	d102      	bne.n	80061c6 <HAL_SPI_Transmit+0x16e>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061ca:	e074      	b.n	80062b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1ce      	bne.n	8006174 <HAL_SPI_Transmit+0x11c>
 80061d6:	e04c      	b.n	8006272 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <HAL_SPI_Transmit+0x18e>
 80061e0:	8afb      	ldrh	r3, [r7, #22]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d140      	bne.n	8006268 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	330c      	adds	r3, #12
 80061f0:	7812      	ldrb	r2, [r2, #0]
 80061f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800620c:	e02c      	b.n	8006268 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b02      	cmp	r3, #2
 800621a:	d113      	bne.n	8006244 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	7812      	ldrb	r2, [r2, #0]
 8006228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	86da      	strh	r2, [r3, #54]	; 0x36
 8006242:	e011      	b.n	8006268 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006244:	f7fe f984 	bl	8004550 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d803      	bhi.n	800625c <HAL_SPI_Transmit+0x204>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800625a:	d102      	bne.n	8006262 <HAL_SPI_Transmit+0x20a>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006266:	e026      	b.n	80062b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800626c:	b29b      	uxth	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1cd      	bne.n	800620e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fbb8 	bl	80069ec <SPI_EndRxTxTransaction>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006290:	2300      	movs	r3, #0
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e000      	b.n	80062b6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80062b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ec:	d112      	bne.n	8006314 <HAL_SPI_Receive+0x44>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10e      	bne.n	8006314 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2204      	movs	r2, #4
 80062fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062fe:	88fa      	ldrh	r2, [r7, #6]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4613      	mov	r3, r2
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 f8f1 	bl	80064f2 <HAL_SPI_TransmitReceive>
 8006310:	4603      	mov	r3, r0
 8006312:	e0ea      	b.n	80064ea <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <HAL_SPI_Receive+0x52>
 800631e:	2302      	movs	r3, #2
 8006320:	e0e3      	b.n	80064ea <HAL_SPI_Receive+0x21a>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800632a:	f7fe f911 	bl	8004550 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d002      	beq.n	8006342 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800633c:	2302      	movs	r3, #2
 800633e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006340:	e0ca      	b.n	80064d8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <HAL_SPI_Receive+0x7e>
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d102      	bne.n	8006354 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006352:	e0c1      	b.n	80064d8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2204      	movs	r2, #4
 8006358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	88fa      	ldrh	r2, [r7, #6]
 800636c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	88fa      	ldrh	r2, [r7, #6]
 8006372:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639a:	d10f      	bne.n	80063bc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c6:	2b40      	cmp	r3, #64	; 0x40
 80063c8:	d007      	beq.n	80063da <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d162      	bne.n	80064a8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063e2:	e02e      	b.n	8006442 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d115      	bne.n	800641e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f103 020c 	add.w	r2, r3, #12
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	7812      	ldrb	r2, [r2, #0]
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006412:	b29b      	uxth	r3, r3
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800641c:	e011      	b.n	8006442 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800641e:	f7fe f897 	bl	8004550 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d803      	bhi.n	8006436 <HAL_SPI_Receive+0x166>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006434:	d102      	bne.n	800643c <HAL_SPI_Receive+0x16c>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d102      	bne.n	8006442 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006440:	e04a      	b.n	80064d8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1cb      	bne.n	80063e4 <HAL_SPI_Receive+0x114>
 800644c:	e031      	b.n	80064b2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b01      	cmp	r3, #1
 800645a:	d113      	bne.n	8006484 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	b292      	uxth	r2, r2
 8006468:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	1c9a      	adds	r2, r3, #2
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006482:	e011      	b.n	80064a8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006484:	f7fe f864 	bl	8004550 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d803      	bhi.n	800649c <HAL_SPI_Receive+0x1cc>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800649a:	d102      	bne.n	80064a2 <HAL_SPI_Receive+0x1d2>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064a6:	e017      	b.n	80064d8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1cd      	bne.n	800644e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 fa46 	bl	8006948 <SPI_EndRxTransaction>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	75fb      	strb	r3, [r7, #23]
 80064d4:	e000      	b.n	80064d8 <HAL_SPI_Receive+0x208>
  }

error :
 80064d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b08c      	sub	sp, #48	; 0x30
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
 80064fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006500:	2301      	movs	r3, #1
 8006502:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_SPI_TransmitReceive+0x26>
 8006514:	2302      	movs	r3, #2
 8006516:	e18a      	b.n	800682e <HAL_SPI_TransmitReceive+0x33c>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006520:	f7fe f816 	bl	8004550 <HAL_GetTick>
 8006524:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800652c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006536:	887b      	ldrh	r3, [r7, #2]
 8006538:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800653a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800653e:	2b01      	cmp	r3, #1
 8006540:	d00f      	beq.n	8006562 <HAL_SPI_TransmitReceive+0x70>
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006548:	d107      	bne.n	800655a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <HAL_SPI_TransmitReceive+0x68>
 8006552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006556:	2b04      	cmp	r3, #4
 8006558:	d003      	beq.n	8006562 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800655a:	2302      	movs	r3, #2
 800655c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006560:	e15b      	b.n	800681a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <HAL_SPI_TransmitReceive+0x82>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <HAL_SPI_TransmitReceive+0x82>
 800656e:	887b      	ldrh	r3, [r7, #2]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d103      	bne.n	800657c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800657a:	e14e      	b.n	800681a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b04      	cmp	r3, #4
 8006586:	d003      	beq.n	8006590 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2205      	movs	r2, #5
 800658c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	887a      	ldrh	r2, [r7, #2]
 80065a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	887a      	ldrh	r2, [r7, #2]
 80065a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	887a      	ldrh	r2, [r7, #2]
 80065b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	887a      	ldrh	r2, [r7, #2]
 80065b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d0:	2b40      	cmp	r3, #64	; 0x40
 80065d2:	d007      	beq.n	80065e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ec:	d178      	bne.n	80066e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x10a>
 80065f6:	8b7b      	ldrh	r3, [r7, #26]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d166      	bne.n	80066ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	881a      	ldrh	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	1c9a      	adds	r2, r3, #2
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006620:	e053      	b.n	80066ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b02      	cmp	r3, #2
 800662e:	d11b      	bne.n	8006668 <HAL_SPI_TransmitReceive+0x176>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d016      	beq.n	8006668 <HAL_SPI_TransmitReceive+0x176>
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d113      	bne.n	8006668 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	881a      	ldrh	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	1c9a      	adds	r2, r3, #2
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b01      	cmp	r3, #1
 8006674:	d119      	bne.n	80066aa <HAL_SPI_TransmitReceive+0x1b8>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800667a:	b29b      	uxth	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d014      	beq.n	80066aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	b292      	uxth	r2, r2
 800668c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	1c9a      	adds	r2, r3, #2
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066a6:	2301      	movs	r3, #1
 80066a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066aa:	f7fd ff51 	bl	8004550 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d807      	bhi.n	80066ca <HAL_SPI_TransmitReceive+0x1d8>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066c0:	d003      	beq.n	80066ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066c8:	e0a7      	b.n	800681a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1a6      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x130>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1a1      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x130>
 80066de:	e07c      	b.n	80067da <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <HAL_SPI_TransmitReceive+0x1fc>
 80066e8:	8b7b      	ldrh	r3, [r7, #26]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d16b      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	330c      	adds	r3, #12
 80066f8:	7812      	ldrb	r2, [r2, #0]
 80066fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006714:	e057      	b.n	80067c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b02      	cmp	r3, #2
 8006722:	d11c      	bne.n	800675e <HAL_SPI_TransmitReceive+0x26c>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d017      	beq.n	800675e <HAL_SPI_TransmitReceive+0x26c>
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	2b01      	cmp	r3, #1
 8006732:	d114      	bne.n	800675e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	330c      	adds	r3, #12
 800673e:	7812      	ldrb	r2, [r2, #0]
 8006740:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b01      	cmp	r3, #1
 800676a:	d119      	bne.n	80067a0 <HAL_SPI_TransmitReceive+0x2ae>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d014      	beq.n	80067a0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800679c:	2301      	movs	r3, #1
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067a0:	f7fd fed6 	bl	8004550 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d803      	bhi.n	80067b8 <HAL_SPI_TransmitReceive+0x2c6>
 80067b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b6:	d102      	bne.n	80067be <HAL_SPI_TransmitReceive+0x2cc>
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d103      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067c4:	e029      	b.n	800681a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1a2      	bne.n	8006716 <HAL_SPI_TransmitReceive+0x224>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d19d      	bne.n	8006716 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 f904 	bl	80069ec <SPI_EndRxTxTransaction>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d006      	beq.n	80067f8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067f6:	e010      	b.n	800681a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10b      	bne.n	8006818 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006800:	2300      	movs	r3, #0
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	e000      	b.n	800681a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006818:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800682a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800682e:	4618      	mov	r0, r3
 8006830:	3730      	adds	r7, #48	; 0x30
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	4613      	mov	r3, r2
 8006846:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006848:	f7fd fe82 	bl	8004550 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	4413      	add	r3, r2
 8006856:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006858:	f7fd fe7a 	bl	8004550 <HAL_GetTick>
 800685c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800685e:	4b39      	ldr	r3, [pc, #228]	; (8006944 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	015b      	lsls	r3, r3, #5
 8006864:	0d1b      	lsrs	r3, r3, #20
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	fb02 f303 	mul.w	r3, r2, r3
 800686c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800686e:	e054      	b.n	800691a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006876:	d050      	beq.n	800691a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006878:	f7fd fe6a 	bl	8004550 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	429a      	cmp	r2, r3
 8006886:	d902      	bls.n	800688e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d13d      	bne.n	800690a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800689c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068a6:	d111      	bne.n	80068cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b0:	d004      	beq.n	80068bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ba:	d107      	bne.n	80068cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d4:	d10f      	bne.n	80068f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e017      	b.n	800693a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	3b01      	subs	r3, #1
 8006918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4013      	ands	r3, r2
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	429a      	cmp	r2, r3
 8006928:	bf0c      	ite	eq
 800692a:	2301      	moveq	r3, #1
 800692c:	2300      	movne	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	429a      	cmp	r2, r3
 8006936:	d19b      	bne.n	8006870 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3720      	adds	r7, #32
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000024 	.word	0x20000024

08006948 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af02      	add	r7, sp, #8
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800695c:	d111      	bne.n	8006982 <SPI_EndRxTransaction+0x3a>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006966:	d004      	beq.n	8006972 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006970:	d107      	bne.n	8006982 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006980:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800698a:	d117      	bne.n	80069bc <SPI_EndRxTransaction+0x74>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006994:	d112      	bne.n	80069bc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2200      	movs	r2, #0
 800699e:	2101      	movs	r1, #1
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f7ff ff49 	bl	8006838 <SPI_WaitFlagStateUntilTimeout>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01a      	beq.n	80069e2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b0:	f043 0220 	orr.w	r2, r3, #32
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e013      	b.n	80069e4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2200      	movs	r2, #0
 80069c4:	2180      	movs	r1, #128	; 0x80
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7ff ff36 	bl	8006838 <SPI_WaitFlagStateUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d6:	f043 0220 	orr.w	r2, r3, #32
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e000      	b.n	80069e4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	2180      	movs	r1, #128	; 0x80
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff ff18 	bl	8006838 <SPI_WaitFlagStateUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d007      	beq.n	8006a1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a12:	f043 0220 	orr.w	r2, r3, #32
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e000      	b.n	8006a20 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e041      	b.n	8006abe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d106      	bne.n	8006a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fc f80c 	bl	8002a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4619      	mov	r1, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	f000 faa8 	bl	8006fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d001      	beq.n	8006ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e03a      	b.n	8006b56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0201 	orr.w	r2, r2, #1
 8006af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a18      	ldr	r2, [pc, #96]	; (8006b60 <HAL_TIM_Base_Start_IT+0x98>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00e      	beq.n	8006b20 <HAL_TIM_Base_Start_IT+0x58>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0a:	d009      	beq.n	8006b20 <HAL_TIM_Base_Start_IT+0x58>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a14      	ldr	r2, [pc, #80]	; (8006b64 <HAL_TIM_Base_Start_IT+0x9c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d004      	beq.n	8006b20 <HAL_TIM_Base_Start_IT+0x58>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a13      	ldr	r2, [pc, #76]	; (8006b68 <HAL_TIM_Base_Start_IT+0xa0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d111      	bne.n	8006b44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b06      	cmp	r3, #6
 8006b30:	d010      	beq.n	8006b54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0201 	orr.w	r2, r2, #1
 8006b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b42:	e007      	b.n	8006b54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr
 8006b60:	40012c00 	.word	0x40012c00
 8006b64:	40000400 	.word	0x40000400
 8006b68:	40000800 	.word	0x40000800

08006b6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0201 	bic.w	r2, r2, #1
 8006b82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6a1a      	ldr	r2, [r3, #32]
 8006b8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b8e:	4013      	ands	r3, r2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10f      	bne.n	8006bb4 <HAL_TIM_Base_Stop_IT+0x48>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6a1a      	ldr	r2, [r3, #32]
 8006b9a:	f240 4344 	movw	r3, #1092	; 0x444
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d107      	bne.n	8006bb4 <HAL_TIM_Base_Stop_IT+0x48>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0201 	bic.w	r2, r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d122      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d11b      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f06f 0202 	mvn.w	r2, #2
 8006bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f9ba 	bl	8006f84 <HAL_TIM_IC_CaptureCallback>
 8006c10:	e005      	b.n	8006c1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f9ad 	bl	8006f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f9bc 	bl	8006f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d122      	bne.n	8006c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d11b      	bne.n	8006c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0204 	mvn.w	r2, #4
 8006c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f990 	bl	8006f84 <HAL_TIM_IC_CaptureCallback>
 8006c64:	e005      	b.n	8006c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f983 	bl	8006f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f992 	bl	8006f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d122      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d11b      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0208 	mvn.w	r2, #8
 8006c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2204      	movs	r2, #4
 8006ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f966 	bl	8006f84 <HAL_TIM_IC_CaptureCallback>
 8006cb8:	e005      	b.n	8006cc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f959 	bl	8006f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f968 	bl	8006f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0310 	and.w	r3, r3, #16
 8006cd6:	2b10      	cmp	r3, #16
 8006cd8:	d122      	bne.n	8006d20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0310 	and.w	r3, r3, #16
 8006ce4:	2b10      	cmp	r3, #16
 8006ce6:	d11b      	bne.n	8006d20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0210 	mvn.w	r2, #16
 8006cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2208      	movs	r2, #8
 8006cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f93c 	bl	8006f84 <HAL_TIM_IC_CaptureCallback>
 8006d0c:	e005      	b.n	8006d1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f92f 	bl	8006f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f93e 	bl	8006f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d10e      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d107      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f06f 0201 	mvn.w	r2, #1
 8006d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f90a 	bl	8006f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	2b80      	cmp	r3, #128	; 0x80
 8006d58:	d10e      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d64:	2b80      	cmp	r3, #128	; 0x80
 8006d66:	d107      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fa81 	bl	800727a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d82:	2b40      	cmp	r3, #64	; 0x40
 8006d84:	d10e      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	d107      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f902 	bl	8006fa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0320 	and.w	r3, r3, #32
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	d10e      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d107      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0220 	mvn.w	r2, #32
 8006dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fa4c 	bl	8007268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_TIM_ConfigClockSource+0x18>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e0b3      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x180>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e28:	d03e      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0xd0>
 8006e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2e:	f200 8087 	bhi.w	8006f40 <HAL_TIM_ConfigClockSource+0x168>
 8006e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e36:	f000 8085 	beq.w	8006f44 <HAL_TIM_ConfigClockSource+0x16c>
 8006e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3e:	d87f      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x168>
 8006e40:	2b70      	cmp	r3, #112	; 0x70
 8006e42:	d01a      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0xa2>
 8006e44:	2b70      	cmp	r3, #112	; 0x70
 8006e46:	d87b      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x168>
 8006e48:	2b60      	cmp	r3, #96	; 0x60
 8006e4a:	d050      	beq.n	8006eee <HAL_TIM_ConfigClockSource+0x116>
 8006e4c:	2b60      	cmp	r3, #96	; 0x60
 8006e4e:	d877      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x168>
 8006e50:	2b50      	cmp	r3, #80	; 0x50
 8006e52:	d03c      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0xf6>
 8006e54:	2b50      	cmp	r3, #80	; 0x50
 8006e56:	d873      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x168>
 8006e58:	2b40      	cmp	r3, #64	; 0x40
 8006e5a:	d058      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x136>
 8006e5c:	2b40      	cmp	r3, #64	; 0x40
 8006e5e:	d86f      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x168>
 8006e60:	2b30      	cmp	r3, #48	; 0x30
 8006e62:	d064      	beq.n	8006f2e <HAL_TIM_ConfigClockSource+0x156>
 8006e64:	2b30      	cmp	r3, #48	; 0x30
 8006e66:	d86b      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x168>
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d060      	beq.n	8006f2e <HAL_TIM_ConfigClockSource+0x156>
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d867      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x168>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d05c      	beq.n	8006f2e <HAL_TIM_ConfigClockSource+0x156>
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d05a      	beq.n	8006f2e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006e78:	e062      	b.n	8006f40 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6899      	ldr	r1, [r3, #8]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f000 f970 	bl	800716e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	609a      	str	r2, [r3, #8]
      break;
 8006ea6:	e04e      	b.n	8006f46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	6899      	ldr	r1, [r3, #8]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f000 f959 	bl	800716e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eca:	609a      	str	r2, [r3, #8]
      break;
 8006ecc:	e03b      	b.n	8006f46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6859      	ldr	r1, [r3, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f000 f8d0 	bl	8007080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2150      	movs	r1, #80	; 0x50
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f927 	bl	800713a <TIM_ITRx_SetConfig>
      break;
 8006eec:	e02b      	b.n	8006f46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6818      	ldr	r0, [r3, #0]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6859      	ldr	r1, [r3, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f000 f8ee 	bl	80070dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2160      	movs	r1, #96	; 0x60
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 f917 	bl	800713a <TIM_ITRx_SetConfig>
      break;
 8006f0c:	e01b      	b.n	8006f46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6859      	ldr	r1, [r3, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f000 f8b0 	bl	8007080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2140      	movs	r1, #64	; 0x40
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 f907 	bl	800713a <TIM_ITRx_SetConfig>
      break;
 8006f2c:	e00b      	b.n	8006f46 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4619      	mov	r1, r3
 8006f38:	4610      	mov	r0, r2
 8006f3a:	f000 f8fe 	bl	800713a <TIM_ITRx_SetConfig>
        break;
 8006f3e:	e002      	b.n	8006f46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f40:	bf00      	nop
 8006f42:	e000      	b.n	8006f46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr

08006f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bc80      	pop	{r7}
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr

08006f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr
	...

08006fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a29      	ldr	r2, [pc, #164]	; (8007074 <TIM_Base_SetConfig+0xb8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00b      	beq.n	8006fec <TIM_Base_SetConfig+0x30>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fda:	d007      	beq.n	8006fec <TIM_Base_SetConfig+0x30>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a26      	ldr	r2, [pc, #152]	; (8007078 <TIM_Base_SetConfig+0xbc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d003      	beq.n	8006fec <TIM_Base_SetConfig+0x30>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a25      	ldr	r2, [pc, #148]	; (800707c <TIM_Base_SetConfig+0xc0>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d108      	bne.n	8006ffe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <TIM_Base_SetConfig+0xb8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00b      	beq.n	800701e <TIM_Base_SetConfig+0x62>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800700c:	d007      	beq.n	800701e <TIM_Base_SetConfig+0x62>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a19      	ldr	r2, [pc, #100]	; (8007078 <TIM_Base_SetConfig+0xbc>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d003      	beq.n	800701e <TIM_Base_SetConfig+0x62>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a18      	ldr	r2, [pc, #96]	; (800707c <TIM_Base_SetConfig+0xc0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d108      	bne.n	8007030 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a07      	ldr	r2, [pc, #28]	; (8007074 <TIM_Base_SetConfig+0xb8>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d103      	bne.n	8007064 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	615a      	str	r2, [r3, #20]
}
 800706a:	bf00      	nop
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40000400 	.word	0x40000400
 800707c:	40000800 	.word	0x40000800

08007080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f023 0201 	bic.w	r2, r3, #1
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f023 030a 	bic.w	r3, r3, #10
 80070bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	621a      	str	r2, [r3, #32]
}
 80070d2:	bf00      	nop
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bc80      	pop	{r7}
 80070da:	4770      	bx	lr

080070dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	f023 0210 	bic.w	r2, r3, #16
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007106:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	031b      	lsls	r3, r3, #12
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007118:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	011b      	lsls	r3, r3, #4
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	621a      	str	r2, [r3, #32]
}
 8007130:	bf00      	nop
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	bc80      	pop	{r7}
 8007138:	4770      	bx	lr

0800713a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800713a:	b480      	push	{r7}
 800713c:	b085      	sub	sp, #20
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	f043 0307 	orr.w	r3, r3, #7
 800715c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	609a      	str	r2, [r3, #8]
}
 8007164:	bf00      	nop
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr

0800716e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800716e:	b480      	push	{r7}
 8007170:	b087      	sub	sp, #28
 8007172:	af00      	add	r7, sp, #0
 8007174:	60f8      	str	r0, [r7, #12]
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	607a      	str	r2, [r7, #4]
 800717a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007188:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	021a      	lsls	r2, r3, #8
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	431a      	orrs	r2, r3
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	4313      	orrs	r3, r2
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	609a      	str	r2, [r3, #8]
}
 80071a2:	bf00      	nop
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bc80      	pop	{r7}
 80071aa:	4770      	bx	lr

080071ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e046      	b.n	8007252 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a16      	ldr	r2, [pc, #88]	; (800725c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d00e      	beq.n	8007226 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007210:	d009      	beq.n	8007226 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a12      	ldr	r2, [pc, #72]	; (8007260 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d004      	beq.n	8007226 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a10      	ldr	r2, [pc, #64]	; (8007264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d10c      	bne.n	8007240 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800722c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	4313      	orrs	r3, r2
 8007236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40000400 	.word	0x40000400
 8007264:	40000800 	.word	0x40000800

08007268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	bc80      	pop	{r7}
 8007278:	4770      	bx	lr

0800727a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007282:	bf00      	nop
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	bc80      	pop	{r7}
 800728a:	4770      	bx	lr

0800728c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e03f      	b.n	800731e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d106      	bne.n	80072b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7fb fc1a 	bl	8002aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2224      	movs	r2, #36	; 0x24
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fbed 	bl	8007ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695a      	ldr	r2, [r3, #20]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007304:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2220      	movs	r2, #32
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	4613      	mov	r3, r2
 8007332:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b20      	cmp	r3, #32
 800733e:	d130      	bne.n	80073a2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <HAL_UART_Transmit_IT+0x26>
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e029      	b.n	80073a4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_UART_Transmit_IT+0x38>
 800735a:	2302      	movs	r3, #2
 800735c:	e022      	b.n	80073a4 <HAL_UART_Transmit_IT+0x7e>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	88fa      	ldrh	r2, [r7, #6]
 8007370:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	88fa      	ldrh	r2, [r7, #6]
 8007376:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2221      	movs	r2, #33	; 0x21
 8007382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800739c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	e000      	b.n	80073a4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80073a2:	2302      	movs	r3, #2
  }
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bc80      	pop	{r7}
 80073ac:	4770      	bx	lr

080073ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	4613      	mov	r3, r2
 80073ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b20      	cmp	r3, #32
 80073c6:	d11d      	bne.n	8007404 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <HAL_UART_Receive_IT+0x26>
 80073ce:	88fb      	ldrh	r3, [r7, #6]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e016      	b.n	8007406 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_UART_Receive_IT+0x38>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e00f      	b.n	8007406 <HAL_UART_Receive_IT+0x58>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80073f4:	88fb      	ldrh	r3, [r7, #6]
 80073f6:	461a      	mov	r2, r3
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 f9cf 	bl	800779e <UART_Start_Receive_IT>
 8007400:	4603      	mov	r3, r0
 8007402:	e000      	b.n	8007406 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007404:	2302      	movs	r3, #2
  }
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08a      	sub	sp, #40	; 0x28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007430:	2300      	movs	r3, #0
 8007432:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007434:	2300      	movs	r3, #0
 8007436:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	f003 030f 	and.w	r3, r3, #15
 800743e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10d      	bne.n	8007462 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	f003 0320 	and.w	r3, r3, #32
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_UART_IRQHandler+0x52>
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa7f 	bl	800795e <UART_Receive_IT>
      return;
 8007460:	e17b      	b.n	800775a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 80b1 	beq.w	80075cc <HAL_UART_IRQHandler+0x1bc>
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d105      	bne.n	8007480 <HAL_UART_IRQHandler+0x70>
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 80a6 	beq.w	80075cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <HAL_UART_IRQHandler+0x90>
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007498:	f043 0201 	orr.w	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <HAL_UART_IRQHandler+0xb0>
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	f043 0202 	orr.w	r2, r3, #2
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_UART_IRQHandler+0xd0>
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d8:	f043 0204 	orr.w	r2, r3, #4
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	f003 0308 	and.w	r3, r3, #8
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00f      	beq.n	800750a <HAL_UART_IRQHandler+0xfa>
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d104      	bne.n	80074fe <HAL_UART_IRQHandler+0xee>
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	f043 0208 	orr.w	r2, r3, #8
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 811e 	beq.w	8007750 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	f003 0320 	and.w	r3, r3, #32
 800751a:	2b00      	cmp	r3, #0
 800751c:	d007      	beq.n	800752e <HAL_UART_IRQHandler+0x11e>
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fa18 	bl	800795e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b00      	cmp	r3, #0
 800753a:	bf14      	ite	ne
 800753c:	2301      	movne	r3, #1
 800753e:	2300      	moveq	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d102      	bne.n	8007556 <HAL_UART_IRQHandler+0x146>
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d031      	beq.n	80075ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f95a 	bl	8007810 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	d023      	beq.n	80075b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	695a      	ldr	r2, [r3, #20]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007578:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	2b00      	cmp	r3, #0
 8007580:	d013      	beq.n	80075aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	4a76      	ldr	r2, [pc, #472]	; (8007760 <HAL_UART_IRQHandler+0x350>)
 8007588:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	4618      	mov	r0, r3
 8007590:	f7fd f954 	bl	800483c <HAL_DMA_Abort_IT>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d016      	beq.n	80075c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075a4:	4610      	mov	r0, r2
 80075a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a8:	e00e      	b.n	80075c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f8e3 	bl	8007776 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b0:	e00a      	b.n	80075c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f8df 	bl	8007776 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b8:	e006      	b.n	80075c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f8db 	bl	8007776 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80075c6:	e0c3      	b.n	8007750 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c8:	bf00      	nop
    return;
 80075ca:	e0c1      	b.n	8007750 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	f040 80a1 	bne.w	8007718 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 809b 	beq.w	8007718 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	f003 0310 	and.w	r3, r3, #16
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 8095 	beq.w	8007718 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d04e      	beq.n	80076b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800761c:	8a3b      	ldrh	r3, [r7, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 8098 	beq.w	8007754 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007628:	8a3a      	ldrh	r2, [r7, #16]
 800762a:	429a      	cmp	r2, r3
 800762c:	f080 8092 	bcs.w	8007754 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	8a3a      	ldrh	r2, [r7, #16]
 8007634:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	2b20      	cmp	r3, #32
 800763e:	d02b      	beq.n	8007698 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800764e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	695a      	ldr	r2, [r3, #20]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0201 	bic.w	r2, r2, #1
 800765e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	695a      	ldr	r2, [r3, #20]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800766e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0210 	bic.w	r2, r2, #16
 800768c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007692:	4618      	mov	r0, r3
 8007694:	f7fd f897 	bl	80047c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f86d 	bl	8007788 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80076ae:	e051      	b.n	8007754 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d047      	beq.n	8007758 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80076c8:	8a7b      	ldrh	r3, [r7, #18]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d044      	beq.n	8007758 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695a      	ldr	r2, [r3, #20]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0201 	bic.w	r2, r2, #1
 80076ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0210 	bic.w	r2, r2, #16
 800770a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800770c:	8a7b      	ldrh	r3, [r7, #18]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f839 	bl	8007788 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007716:	e01f      	b.n	8007758 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771e:	2b00      	cmp	r3, #0
 8007720:	d008      	beq.n	8007734 <HAL_UART_IRQHandler+0x324>
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f8af 	bl	8007890 <UART_Transmit_IT>
    return;
 8007732:	e012      	b.n	800775a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00d      	beq.n	800775a <HAL_UART_IRQHandler+0x34a>
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007744:	2b00      	cmp	r3, #0
 8007746:	d008      	beq.n	800775a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f8f0 	bl	800792e <UART_EndTransmit_IT>
    return;
 800774e:	e004      	b.n	800775a <HAL_UART_IRQHandler+0x34a>
    return;
 8007750:	bf00      	nop
 8007752:	e002      	b.n	800775a <HAL_UART_IRQHandler+0x34a>
      return;
 8007754:	bf00      	nop
 8007756:	e000      	b.n	800775a <HAL_UART_IRQHandler+0x34a>
      return;
 8007758:	bf00      	nop
  }
}
 800775a:	3728      	adds	r7, #40	; 0x28
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	08007869 	.word	0x08007869

08007764 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr

08007776 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	bc80      	pop	{r7}
 8007786:	4770      	bx	lr

08007788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	bc80      	pop	{r7}
 800779c:	4770      	bx	lr

0800779e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800779e:	b480      	push	{r7}
 80077a0:	b085      	sub	sp, #20
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	4613      	mov	r3, r2
 80077aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2222      	movs	r2, #34	; 0x22
 80077c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077e2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695a      	ldr	r2, [r3, #20]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0201 	orr.w	r2, r2, #1
 80077f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0220 	orr.w	r2, r2, #32
 8007802:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr

08007810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007826:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695a      	ldr	r2, [r3, #20]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0201 	bic.w	r2, r2, #1
 8007836:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783c:	2b01      	cmp	r3, #1
 800783e:	d107      	bne.n	8007850 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0210 	bic.w	r2, r2, #16
 800784e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	bc80      	pop	{r7}
 8007866:	4770      	bx	lr

08007868 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f7ff ff77 	bl	8007776 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b21      	cmp	r3, #33	; 0x21
 80078a2:	d13e      	bne.n	8007922 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ac:	d114      	bne.n	80078d8 <UART_Transmit_IT+0x48>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d110      	bne.n	80078d8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	1c9a      	adds	r2, r3, #2
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	621a      	str	r2, [r3, #32]
 80078d6:	e008      	b.n	80078ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	1c59      	adds	r1, r3, #1
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	6211      	str	r1, [r2, #32]
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	3b01      	subs	r3, #1
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	4619      	mov	r1, r3
 80078f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10f      	bne.n	800791e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800790c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68da      	ldr	r2, [r3, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800791c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	e000      	b.n	8007924 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007922:	2302      	movs	r3, #2
  }
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	bc80      	pop	{r7}
 800792c:	4770      	bx	lr

0800792e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007944:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2220      	movs	r2, #32
 800794a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff ff08 	bl	8007764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b086      	sub	sp, #24
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b22      	cmp	r3, #34	; 0x22
 8007970:	f040 8099 	bne.w	8007aa6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800797c:	d117      	bne.n	80079ae <UART_Receive_IT+0x50>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d113      	bne.n	80079ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799c:	b29a      	uxth	r2, r3
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a6:	1c9a      	adds	r2, r3, #2
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	629a      	str	r2, [r3, #40]	; 0x28
 80079ac:	e026      	b.n	80079fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c0:	d007      	beq.n	80079d2 <UART_Receive_IT+0x74>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <UART_Receive_IT+0x82>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d106      	bne.n	80079e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	e008      	b.n	80079f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d148      	bne.n	8007aa2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0220 	bic.w	r2, r2, #32
 8007a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	695a      	ldr	r2, [r3, #20]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0201 	bic.w	r2, r2, #1
 8007a3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d123      	bne.n	8007a98 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0210 	bic.w	r2, r2, #16
 8007a64:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0310 	and.w	r3, r3, #16
 8007a70:	2b10      	cmp	r3, #16
 8007a72:	d10a      	bne.n	8007a8a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff fe79 	bl	8007788 <HAL_UARTEx_RxEventCallback>
 8007a96:	e002      	b.n	8007a9e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7fa feed 	bl	8002878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e002      	b.n	8007aa8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e000      	b.n	8007aa8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007aa6:	2302      	movs	r3, #2
  }
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007aea:	f023 030c 	bic.w	r3, r3, #12
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	6812      	ldr	r2, [r2, #0]
 8007af2:	68b9      	ldr	r1, [r7, #8]
 8007af4:	430b      	orrs	r3, r1
 8007af6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	699a      	ldr	r2, [r3, #24]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a2c      	ldr	r2, [pc, #176]	; (8007bc4 <UART_SetConfig+0x114>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d103      	bne.n	8007b20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b18:	f7fe f9e8 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 8007b1c:	60f8      	str	r0, [r7, #12]
 8007b1e:	e002      	b.n	8007b26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b20:	f7fe f9d0 	bl	8005ec4 <HAL_RCC_GetPCLK1Freq>
 8007b24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009a      	lsls	r2, r3, #2
 8007b30:	441a      	add	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3c:	4a22      	ldr	r2, [pc, #136]	; (8007bc8 <UART_SetConfig+0x118>)
 8007b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b42:	095b      	lsrs	r3, r3, #5
 8007b44:	0119      	lsls	r1, r3, #4
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009a      	lsls	r2, r3, #2
 8007b50:	441a      	add	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b5c:	4b1a      	ldr	r3, [pc, #104]	; (8007bc8 <UART_SetConfig+0x118>)
 8007b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	2064      	movs	r0, #100	; 0x64
 8007b66:	fb00 f303 	mul.w	r3, r0, r3
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	3332      	adds	r3, #50	; 0x32
 8007b70:	4a15      	ldr	r2, [pc, #84]	; (8007bc8 <UART_SetConfig+0x118>)
 8007b72:	fba2 2303 	umull	r2, r3, r2, r3
 8007b76:	095b      	lsrs	r3, r3, #5
 8007b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b7c:	4419      	add	r1, r3
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	009a      	lsls	r2, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b94:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <UART_SetConfig+0x118>)
 8007b96:	fba3 0302 	umull	r0, r3, r3, r2
 8007b9a:	095b      	lsrs	r3, r3, #5
 8007b9c:	2064      	movs	r0, #100	; 0x64
 8007b9e:	fb00 f303 	mul.w	r3, r0, r3
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	011b      	lsls	r3, r3, #4
 8007ba6:	3332      	adds	r3, #50	; 0x32
 8007ba8:	4a07      	ldr	r2, [pc, #28]	; (8007bc8 <UART_SetConfig+0x118>)
 8007baa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bae:	095b      	lsrs	r3, r3, #5
 8007bb0:	f003 020f 	and.w	r2, r3, #15
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	440a      	add	r2, r1
 8007bba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007bbc:	bf00      	nop
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	40013800 	.word	0x40013800
 8007bc8:	51eb851f 	.word	0x51eb851f

08007bcc <__errno>:
 8007bcc:	4b01      	ldr	r3, [pc, #4]	; (8007bd4 <__errno+0x8>)
 8007bce:	6818      	ldr	r0, [r3, #0]
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	20000048 	.word	0x20000048

08007bd8 <__libc_init_array>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	2600      	movs	r6, #0
 8007bdc:	4d0c      	ldr	r5, [pc, #48]	; (8007c10 <__libc_init_array+0x38>)
 8007bde:	4c0d      	ldr	r4, [pc, #52]	; (8007c14 <__libc_init_array+0x3c>)
 8007be0:	1b64      	subs	r4, r4, r5
 8007be2:	10a4      	asrs	r4, r4, #2
 8007be4:	42a6      	cmp	r6, r4
 8007be6:	d109      	bne.n	8007bfc <__libc_init_array+0x24>
 8007be8:	f000 fce2 	bl	80085b0 <_init>
 8007bec:	2600      	movs	r6, #0
 8007bee:	4d0a      	ldr	r5, [pc, #40]	; (8007c18 <__libc_init_array+0x40>)
 8007bf0:	4c0a      	ldr	r4, [pc, #40]	; (8007c1c <__libc_init_array+0x44>)
 8007bf2:	1b64      	subs	r4, r4, r5
 8007bf4:	10a4      	asrs	r4, r4, #2
 8007bf6:	42a6      	cmp	r6, r4
 8007bf8:	d105      	bne.n	8007c06 <__libc_init_array+0x2e>
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c00:	4798      	blx	r3
 8007c02:	3601      	adds	r6, #1
 8007c04:	e7ee      	b.n	8007be4 <__libc_init_array+0xc>
 8007c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0a:	4798      	blx	r3
 8007c0c:	3601      	adds	r6, #1
 8007c0e:	e7f2      	b.n	8007bf6 <__libc_init_array+0x1e>
 8007c10:	08008f44 	.word	0x08008f44
 8007c14:	08008f44 	.word	0x08008f44
 8007c18:	08008f44 	.word	0x08008f44
 8007c1c:	08008f48 	.word	0x08008f48

08007c20 <__itoa>:
 8007c20:	1e93      	subs	r3, r2, #2
 8007c22:	2b22      	cmp	r3, #34	; 0x22
 8007c24:	b510      	push	{r4, lr}
 8007c26:	460c      	mov	r4, r1
 8007c28:	d904      	bls.n	8007c34 <__itoa+0x14>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	461c      	mov	r4, r3
 8007c2e:	700b      	strb	r3, [r1, #0]
 8007c30:	4620      	mov	r0, r4
 8007c32:	bd10      	pop	{r4, pc}
 8007c34:	2a0a      	cmp	r2, #10
 8007c36:	d109      	bne.n	8007c4c <__itoa+0x2c>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	da07      	bge.n	8007c4c <__itoa+0x2c>
 8007c3c:	232d      	movs	r3, #45	; 0x2d
 8007c3e:	700b      	strb	r3, [r1, #0]
 8007c40:	2101      	movs	r1, #1
 8007c42:	4240      	negs	r0, r0
 8007c44:	4421      	add	r1, r4
 8007c46:	f000 f91b 	bl	8007e80 <__utoa>
 8007c4a:	e7f1      	b.n	8007c30 <__itoa+0x10>
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	e7f9      	b.n	8007c44 <__itoa+0x24>

08007c50 <itoa>:
 8007c50:	f7ff bfe6 	b.w	8007c20 <__itoa>

08007c54 <memcpy>:
 8007c54:	440a      	add	r2, r1
 8007c56:	4291      	cmp	r1, r2
 8007c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c5c:	d100      	bne.n	8007c60 <memcpy+0xc>
 8007c5e:	4770      	bx	lr
 8007c60:	b510      	push	{r4, lr}
 8007c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c66:	4291      	cmp	r1, r2
 8007c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c6c:	d1f9      	bne.n	8007c62 <memcpy+0xe>
 8007c6e:	bd10      	pop	{r4, pc}

08007c70 <memset>:
 8007c70:	4603      	mov	r3, r0
 8007c72:	4402      	add	r2, r0
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d100      	bne.n	8007c7a <memset+0xa>
 8007c78:	4770      	bx	lr
 8007c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c7e:	e7f9      	b.n	8007c74 <memset+0x4>

08007c80 <_free_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4605      	mov	r5, r0
 8007c84:	2900      	cmp	r1, #0
 8007c86:	d043      	beq.n	8007d10 <_free_r+0x90>
 8007c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8c:	1f0c      	subs	r4, r1, #4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bfb8      	it	lt
 8007c92:	18e4      	addlt	r4, r4, r3
 8007c94:	f000 f936 	bl	8007f04 <__malloc_lock>
 8007c98:	4a1e      	ldr	r2, [pc, #120]	; (8007d14 <_free_r+0x94>)
 8007c9a:	6813      	ldr	r3, [r2, #0]
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	b933      	cbnz	r3, 8007cae <_free_r+0x2e>
 8007ca0:	6063      	str	r3, [r4, #4]
 8007ca2:	6014      	str	r4, [r2, #0]
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007caa:	f000 b931 	b.w	8007f10 <__malloc_unlock>
 8007cae:	42a3      	cmp	r3, r4
 8007cb0:	d90a      	bls.n	8007cc8 <_free_r+0x48>
 8007cb2:	6821      	ldr	r1, [r4, #0]
 8007cb4:	1862      	adds	r2, r4, r1
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	bf01      	itttt	eq
 8007cba:	681a      	ldreq	r2, [r3, #0]
 8007cbc:	685b      	ldreq	r3, [r3, #4]
 8007cbe:	1852      	addeq	r2, r2, r1
 8007cc0:	6022      	streq	r2, [r4, #0]
 8007cc2:	6063      	str	r3, [r4, #4]
 8007cc4:	6004      	str	r4, [r0, #0]
 8007cc6:	e7ed      	b.n	8007ca4 <_free_r+0x24>
 8007cc8:	461a      	mov	r2, r3
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	b10b      	cbz	r3, 8007cd2 <_free_r+0x52>
 8007cce:	42a3      	cmp	r3, r4
 8007cd0:	d9fa      	bls.n	8007cc8 <_free_r+0x48>
 8007cd2:	6811      	ldr	r1, [r2, #0]
 8007cd4:	1850      	adds	r0, r2, r1
 8007cd6:	42a0      	cmp	r0, r4
 8007cd8:	d10b      	bne.n	8007cf2 <_free_r+0x72>
 8007cda:	6820      	ldr	r0, [r4, #0]
 8007cdc:	4401      	add	r1, r0
 8007cde:	1850      	adds	r0, r2, r1
 8007ce0:	4283      	cmp	r3, r0
 8007ce2:	6011      	str	r1, [r2, #0]
 8007ce4:	d1de      	bne.n	8007ca4 <_free_r+0x24>
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	4401      	add	r1, r0
 8007cec:	6011      	str	r1, [r2, #0]
 8007cee:	6053      	str	r3, [r2, #4]
 8007cf0:	e7d8      	b.n	8007ca4 <_free_r+0x24>
 8007cf2:	d902      	bls.n	8007cfa <_free_r+0x7a>
 8007cf4:	230c      	movs	r3, #12
 8007cf6:	602b      	str	r3, [r5, #0]
 8007cf8:	e7d4      	b.n	8007ca4 <_free_r+0x24>
 8007cfa:	6820      	ldr	r0, [r4, #0]
 8007cfc:	1821      	adds	r1, r4, r0
 8007cfe:	428b      	cmp	r3, r1
 8007d00:	bf01      	itttt	eq
 8007d02:	6819      	ldreq	r1, [r3, #0]
 8007d04:	685b      	ldreq	r3, [r3, #4]
 8007d06:	1809      	addeq	r1, r1, r0
 8007d08:	6021      	streq	r1, [r4, #0]
 8007d0a:	6063      	str	r3, [r4, #4]
 8007d0c:	6054      	str	r4, [r2, #4]
 8007d0e:	e7c9      	b.n	8007ca4 <_free_r+0x24>
 8007d10:	bd38      	pop	{r3, r4, r5, pc}
 8007d12:	bf00      	nop
 8007d14:	200005a4 	.word	0x200005a4

08007d18 <_malloc_r>:
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1a:	1ccd      	adds	r5, r1, #3
 8007d1c:	f025 0503 	bic.w	r5, r5, #3
 8007d20:	3508      	adds	r5, #8
 8007d22:	2d0c      	cmp	r5, #12
 8007d24:	bf38      	it	cc
 8007d26:	250c      	movcc	r5, #12
 8007d28:	2d00      	cmp	r5, #0
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	db01      	blt.n	8007d32 <_malloc_r+0x1a>
 8007d2e:	42a9      	cmp	r1, r5
 8007d30:	d903      	bls.n	8007d3a <_malloc_r+0x22>
 8007d32:	230c      	movs	r3, #12
 8007d34:	6033      	str	r3, [r6, #0]
 8007d36:	2000      	movs	r0, #0
 8007d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d3a:	f000 f8e3 	bl	8007f04 <__malloc_lock>
 8007d3e:	4921      	ldr	r1, [pc, #132]	; (8007dc4 <_malloc_r+0xac>)
 8007d40:	680a      	ldr	r2, [r1, #0]
 8007d42:	4614      	mov	r4, r2
 8007d44:	b99c      	cbnz	r4, 8007d6e <_malloc_r+0x56>
 8007d46:	4f20      	ldr	r7, [pc, #128]	; (8007dc8 <_malloc_r+0xb0>)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	b923      	cbnz	r3, 8007d56 <_malloc_r+0x3e>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f000 f83c 	bl	8007dcc <_sbrk_r>
 8007d54:	6038      	str	r0, [r7, #0]
 8007d56:	4629      	mov	r1, r5
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f000 f837 	bl	8007dcc <_sbrk_r>
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	d123      	bne.n	8007daa <_malloc_r+0x92>
 8007d62:	230c      	movs	r3, #12
 8007d64:	4630      	mov	r0, r6
 8007d66:	6033      	str	r3, [r6, #0]
 8007d68:	f000 f8d2 	bl	8007f10 <__malloc_unlock>
 8007d6c:	e7e3      	b.n	8007d36 <_malloc_r+0x1e>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	1b5b      	subs	r3, r3, r5
 8007d72:	d417      	bmi.n	8007da4 <_malloc_r+0x8c>
 8007d74:	2b0b      	cmp	r3, #11
 8007d76:	d903      	bls.n	8007d80 <_malloc_r+0x68>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	441c      	add	r4, r3
 8007d7c:	6025      	str	r5, [r4, #0]
 8007d7e:	e004      	b.n	8007d8a <_malloc_r+0x72>
 8007d80:	6863      	ldr	r3, [r4, #4]
 8007d82:	42a2      	cmp	r2, r4
 8007d84:	bf0c      	ite	eq
 8007d86:	600b      	streq	r3, [r1, #0]
 8007d88:	6053      	strne	r3, [r2, #4]
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f000 f8c0 	bl	8007f10 <__malloc_unlock>
 8007d90:	f104 000b 	add.w	r0, r4, #11
 8007d94:	1d23      	adds	r3, r4, #4
 8007d96:	f020 0007 	bic.w	r0, r0, #7
 8007d9a:	1ac2      	subs	r2, r0, r3
 8007d9c:	d0cc      	beq.n	8007d38 <_malloc_r+0x20>
 8007d9e:	1a1b      	subs	r3, r3, r0
 8007da0:	50a3      	str	r3, [r4, r2]
 8007da2:	e7c9      	b.n	8007d38 <_malloc_r+0x20>
 8007da4:	4622      	mov	r2, r4
 8007da6:	6864      	ldr	r4, [r4, #4]
 8007da8:	e7cc      	b.n	8007d44 <_malloc_r+0x2c>
 8007daa:	1cc4      	adds	r4, r0, #3
 8007dac:	f024 0403 	bic.w	r4, r4, #3
 8007db0:	42a0      	cmp	r0, r4
 8007db2:	d0e3      	beq.n	8007d7c <_malloc_r+0x64>
 8007db4:	1a21      	subs	r1, r4, r0
 8007db6:	4630      	mov	r0, r6
 8007db8:	f000 f808 	bl	8007dcc <_sbrk_r>
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d1dd      	bne.n	8007d7c <_malloc_r+0x64>
 8007dc0:	e7cf      	b.n	8007d62 <_malloc_r+0x4a>
 8007dc2:	bf00      	nop
 8007dc4:	200005a4 	.word	0x200005a4
 8007dc8:	200005a8 	.word	0x200005a8

08007dcc <_sbrk_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	2300      	movs	r3, #0
 8007dd0:	4d05      	ldr	r5, [pc, #20]	; (8007de8 <_sbrk_r+0x1c>)
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	602b      	str	r3, [r5, #0]
 8007dd8:	f7fb f872 	bl	8002ec0 <_sbrk>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_sbrk_r+0x1a>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_sbrk_r+0x1a>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	20000954 	.word	0x20000954

08007dec <siprintf>:
 8007dec:	b40e      	push	{r1, r2, r3}
 8007dee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007df2:	b500      	push	{lr}
 8007df4:	b09c      	sub	sp, #112	; 0x70
 8007df6:	ab1d      	add	r3, sp, #116	; 0x74
 8007df8:	9002      	str	r0, [sp, #8]
 8007dfa:	9006      	str	r0, [sp, #24]
 8007dfc:	9107      	str	r1, [sp, #28]
 8007dfe:	9104      	str	r1, [sp, #16]
 8007e00:	4808      	ldr	r0, [pc, #32]	; (8007e24 <siprintf+0x38>)
 8007e02:	4909      	ldr	r1, [pc, #36]	; (8007e28 <siprintf+0x3c>)
 8007e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e08:	9105      	str	r1, [sp, #20]
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	a902      	add	r1, sp, #8
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	f000 f8e0 	bl	8007fd4 <_svfiprintf_r>
 8007e14:	2200      	movs	r2, #0
 8007e16:	9b02      	ldr	r3, [sp, #8]
 8007e18:	701a      	strb	r2, [r3, #0]
 8007e1a:	b01c      	add	sp, #112	; 0x70
 8007e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e20:	b003      	add	sp, #12
 8007e22:	4770      	bx	lr
 8007e24:	20000048 	.word	0x20000048
 8007e28:	ffff0208 	.word	0xffff0208

08007e2c <strcat>:
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	7814      	ldrb	r4, [r2, #0]
 8007e32:	4613      	mov	r3, r2
 8007e34:	3201      	adds	r2, #1
 8007e36:	2c00      	cmp	r4, #0
 8007e38:	d1fa      	bne.n	8007e30 <strcat+0x4>
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e40:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e44:	2a00      	cmp	r2, #0
 8007e46:	d1f9      	bne.n	8007e3c <strcat+0x10>
 8007e48:	bd10      	pop	{r4, pc}

08007e4a <strcpy>:
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e50:	f803 2b01 	strb.w	r2, [r3], #1
 8007e54:	2a00      	cmp	r2, #0
 8007e56:	d1f9      	bne.n	8007e4c <strcpy+0x2>
 8007e58:	4770      	bx	lr

08007e5a <strncpy>:
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	3901      	subs	r1, #1
 8007e60:	b132      	cbz	r2, 8007e70 <strncpy+0x16>
 8007e62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e66:	3a01      	subs	r2, #1
 8007e68:	f803 4b01 	strb.w	r4, [r3], #1
 8007e6c:	2c00      	cmp	r4, #0
 8007e6e:	d1f7      	bne.n	8007e60 <strncpy+0x6>
 8007e70:	2100      	movs	r1, #0
 8007e72:	441a      	add	r2, r3
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d100      	bne.n	8007e7a <strncpy+0x20>
 8007e78:	bd10      	pop	{r4, pc}
 8007e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e7e:	e7f9      	b.n	8007e74 <strncpy+0x1a>

08007e80 <__utoa>:
 8007e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e82:	b08b      	sub	sp, #44	; 0x2c
 8007e84:	4605      	mov	r5, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	466e      	mov	r6, sp
 8007e8a:	4c1d      	ldr	r4, [pc, #116]	; (8007f00 <__utoa+0x80>)
 8007e8c:	f104 0c20 	add.w	ip, r4, #32
 8007e90:	4637      	mov	r7, r6
 8007e92:	6820      	ldr	r0, [r4, #0]
 8007e94:	6861      	ldr	r1, [r4, #4]
 8007e96:	3408      	adds	r4, #8
 8007e98:	c703      	stmia	r7!, {r0, r1}
 8007e9a:	4564      	cmp	r4, ip
 8007e9c:	463e      	mov	r6, r7
 8007e9e:	d1f7      	bne.n	8007e90 <__utoa+0x10>
 8007ea0:	7921      	ldrb	r1, [r4, #4]
 8007ea2:	6820      	ldr	r0, [r4, #0]
 8007ea4:	7139      	strb	r1, [r7, #4]
 8007ea6:	1e91      	subs	r1, r2, #2
 8007ea8:	2922      	cmp	r1, #34	; 0x22
 8007eaa:	6038      	str	r0, [r7, #0]
 8007eac:	f04f 0100 	mov.w	r1, #0
 8007eb0:	d904      	bls.n	8007ebc <__utoa+0x3c>
 8007eb2:	7019      	strb	r1, [r3, #0]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	b00b      	add	sp, #44	; 0x2c
 8007eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ebc:	1e58      	subs	r0, r3, #1
 8007ebe:	4684      	mov	ip, r0
 8007ec0:	fbb5 f7f2 	udiv	r7, r5, r2
 8007ec4:	fb02 5617 	mls	r6, r2, r7, r5
 8007ec8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8007ecc:	4476      	add	r6, lr
 8007ece:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007ed8:	462e      	mov	r6, r5
 8007eda:	42b2      	cmp	r2, r6
 8007edc:	463d      	mov	r5, r7
 8007ede:	f101 0101 	add.w	r1, r1, #1
 8007ee2:	d9ed      	bls.n	8007ec0 <__utoa+0x40>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	545a      	strb	r2, [r3, r1]
 8007ee8:	1919      	adds	r1, r3, r4
 8007eea:	1aa5      	subs	r5, r4, r2
 8007eec:	42aa      	cmp	r2, r5
 8007eee:	dae2      	bge.n	8007eb6 <__utoa+0x36>
 8007ef0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007ef4:	780e      	ldrb	r6, [r1, #0]
 8007ef6:	3201      	adds	r2, #1
 8007ef8:	7006      	strb	r6, [r0, #0]
 8007efa:	f801 5901 	strb.w	r5, [r1], #-1
 8007efe:	e7f4      	b.n	8007eea <__utoa+0x6a>
 8007f00:	08008eec 	.word	0x08008eec

08007f04 <__malloc_lock>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__malloc_lock+0x8>)
 8007f06:	f000 bafb 	b.w	8008500 <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	2000095c 	.word	0x2000095c

08007f10 <__malloc_unlock>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__malloc_unlock+0x8>)
 8007f12:	f000 baf6 	b.w	8008502 <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	2000095c 	.word	0x2000095c

08007f1c <__ssputs_r>:
 8007f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f20:	688e      	ldr	r6, [r1, #8]
 8007f22:	4682      	mov	sl, r0
 8007f24:	429e      	cmp	r6, r3
 8007f26:	460c      	mov	r4, r1
 8007f28:	4690      	mov	r8, r2
 8007f2a:	461f      	mov	r7, r3
 8007f2c:	d838      	bhi.n	8007fa0 <__ssputs_r+0x84>
 8007f2e:	898a      	ldrh	r2, [r1, #12]
 8007f30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f34:	d032      	beq.n	8007f9c <__ssputs_r+0x80>
 8007f36:	6825      	ldr	r5, [r4, #0]
 8007f38:	6909      	ldr	r1, [r1, #16]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	eba5 0901 	sub.w	r9, r5, r1
 8007f40:	6965      	ldr	r5, [r4, #20]
 8007f42:	444b      	add	r3, r9
 8007f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f4c:	106d      	asrs	r5, r5, #1
 8007f4e:	429d      	cmp	r5, r3
 8007f50:	bf38      	it	cc
 8007f52:	461d      	movcc	r5, r3
 8007f54:	0553      	lsls	r3, r2, #21
 8007f56:	d531      	bpl.n	8007fbc <__ssputs_r+0xa0>
 8007f58:	4629      	mov	r1, r5
 8007f5a:	f7ff fedd 	bl	8007d18 <_malloc_r>
 8007f5e:	4606      	mov	r6, r0
 8007f60:	b950      	cbnz	r0, 8007f78 <__ssputs_r+0x5c>
 8007f62:	230c      	movs	r3, #12
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f68:	f8ca 3000 	str.w	r3, [sl]
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f72:	81a3      	strh	r3, [r4, #12]
 8007f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f78:	464a      	mov	r2, r9
 8007f7a:	6921      	ldr	r1, [r4, #16]
 8007f7c:	f7ff fe6a 	bl	8007c54 <memcpy>
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8a:	81a3      	strh	r3, [r4, #12]
 8007f8c:	6126      	str	r6, [r4, #16]
 8007f8e:	444e      	add	r6, r9
 8007f90:	6026      	str	r6, [r4, #0]
 8007f92:	463e      	mov	r6, r7
 8007f94:	6165      	str	r5, [r4, #20]
 8007f96:	eba5 0509 	sub.w	r5, r5, r9
 8007f9a:	60a5      	str	r5, [r4, #8]
 8007f9c:	42be      	cmp	r6, r7
 8007f9e:	d900      	bls.n	8007fa2 <__ssputs_r+0x86>
 8007fa0:	463e      	mov	r6, r7
 8007fa2:	4632      	mov	r2, r6
 8007fa4:	4641      	mov	r1, r8
 8007fa6:	6820      	ldr	r0, [r4, #0]
 8007fa8:	f000 faba 	bl	8008520 <memmove>
 8007fac:	68a3      	ldr	r3, [r4, #8]
 8007fae:	6822      	ldr	r2, [r4, #0]
 8007fb0:	1b9b      	subs	r3, r3, r6
 8007fb2:	4432      	add	r2, r6
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	60a3      	str	r3, [r4, #8]
 8007fb8:	6022      	str	r2, [r4, #0]
 8007fba:	e7db      	b.n	8007f74 <__ssputs_r+0x58>
 8007fbc:	462a      	mov	r2, r5
 8007fbe:	f000 fac9 	bl	8008554 <_realloc_r>
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d1e1      	bne.n	8007f8c <__ssputs_r+0x70>
 8007fc8:	4650      	mov	r0, sl
 8007fca:	6921      	ldr	r1, [r4, #16]
 8007fcc:	f7ff fe58 	bl	8007c80 <_free_r>
 8007fd0:	e7c7      	b.n	8007f62 <__ssputs_r+0x46>
	...

08007fd4 <_svfiprintf_r>:
 8007fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	4698      	mov	r8, r3
 8007fda:	898b      	ldrh	r3, [r1, #12]
 8007fdc:	4607      	mov	r7, r0
 8007fde:	061b      	lsls	r3, r3, #24
 8007fe0:	460d      	mov	r5, r1
 8007fe2:	4614      	mov	r4, r2
 8007fe4:	b09d      	sub	sp, #116	; 0x74
 8007fe6:	d50e      	bpl.n	8008006 <_svfiprintf_r+0x32>
 8007fe8:	690b      	ldr	r3, [r1, #16]
 8007fea:	b963      	cbnz	r3, 8008006 <_svfiprintf_r+0x32>
 8007fec:	2140      	movs	r1, #64	; 0x40
 8007fee:	f7ff fe93 	bl	8007d18 <_malloc_r>
 8007ff2:	6028      	str	r0, [r5, #0]
 8007ff4:	6128      	str	r0, [r5, #16]
 8007ff6:	b920      	cbnz	r0, 8008002 <_svfiprintf_r+0x2e>
 8007ff8:	230c      	movs	r3, #12
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008000:	e0d1      	b.n	80081a6 <_svfiprintf_r+0x1d2>
 8008002:	2340      	movs	r3, #64	; 0x40
 8008004:	616b      	str	r3, [r5, #20]
 8008006:	2300      	movs	r3, #0
 8008008:	9309      	str	r3, [sp, #36]	; 0x24
 800800a:	2320      	movs	r3, #32
 800800c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008010:	2330      	movs	r3, #48	; 0x30
 8008012:	f04f 0901 	mov.w	r9, #1
 8008016:	f8cd 800c 	str.w	r8, [sp, #12]
 800801a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80081c0 <_svfiprintf_r+0x1ec>
 800801e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008022:	4623      	mov	r3, r4
 8008024:	469a      	mov	sl, r3
 8008026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800802a:	b10a      	cbz	r2, 8008030 <_svfiprintf_r+0x5c>
 800802c:	2a25      	cmp	r2, #37	; 0x25
 800802e:	d1f9      	bne.n	8008024 <_svfiprintf_r+0x50>
 8008030:	ebba 0b04 	subs.w	fp, sl, r4
 8008034:	d00b      	beq.n	800804e <_svfiprintf_r+0x7a>
 8008036:	465b      	mov	r3, fp
 8008038:	4622      	mov	r2, r4
 800803a:	4629      	mov	r1, r5
 800803c:	4638      	mov	r0, r7
 800803e:	f7ff ff6d 	bl	8007f1c <__ssputs_r>
 8008042:	3001      	adds	r0, #1
 8008044:	f000 80aa 	beq.w	800819c <_svfiprintf_r+0x1c8>
 8008048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800804a:	445a      	add	r2, fp
 800804c:	9209      	str	r2, [sp, #36]	; 0x24
 800804e:	f89a 3000 	ldrb.w	r3, [sl]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 80a2 	beq.w	800819c <_svfiprintf_r+0x1c8>
 8008058:	2300      	movs	r3, #0
 800805a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800805e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008062:	f10a 0a01 	add.w	sl, sl, #1
 8008066:	9304      	str	r3, [sp, #16]
 8008068:	9307      	str	r3, [sp, #28]
 800806a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800806e:	931a      	str	r3, [sp, #104]	; 0x68
 8008070:	4654      	mov	r4, sl
 8008072:	2205      	movs	r2, #5
 8008074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008078:	4851      	ldr	r0, [pc, #324]	; (80081c0 <_svfiprintf_r+0x1ec>)
 800807a:	f000 fa43 	bl	8008504 <memchr>
 800807e:	9a04      	ldr	r2, [sp, #16]
 8008080:	b9d8      	cbnz	r0, 80080ba <_svfiprintf_r+0xe6>
 8008082:	06d0      	lsls	r0, r2, #27
 8008084:	bf44      	itt	mi
 8008086:	2320      	movmi	r3, #32
 8008088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800808c:	0711      	lsls	r1, r2, #28
 800808e:	bf44      	itt	mi
 8008090:	232b      	movmi	r3, #43	; 0x2b
 8008092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008096:	f89a 3000 	ldrb.w	r3, [sl]
 800809a:	2b2a      	cmp	r3, #42	; 0x2a
 800809c:	d015      	beq.n	80080ca <_svfiprintf_r+0xf6>
 800809e:	4654      	mov	r4, sl
 80080a0:	2000      	movs	r0, #0
 80080a2:	f04f 0c0a 	mov.w	ip, #10
 80080a6:	9a07      	ldr	r2, [sp, #28]
 80080a8:	4621      	mov	r1, r4
 80080aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ae:	3b30      	subs	r3, #48	; 0x30
 80080b0:	2b09      	cmp	r3, #9
 80080b2:	d94e      	bls.n	8008152 <_svfiprintf_r+0x17e>
 80080b4:	b1b0      	cbz	r0, 80080e4 <_svfiprintf_r+0x110>
 80080b6:	9207      	str	r2, [sp, #28]
 80080b8:	e014      	b.n	80080e4 <_svfiprintf_r+0x110>
 80080ba:	eba0 0308 	sub.w	r3, r0, r8
 80080be:	fa09 f303 	lsl.w	r3, r9, r3
 80080c2:	4313      	orrs	r3, r2
 80080c4:	46a2      	mov	sl, r4
 80080c6:	9304      	str	r3, [sp, #16]
 80080c8:	e7d2      	b.n	8008070 <_svfiprintf_r+0x9c>
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	1d19      	adds	r1, r3, #4
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	9103      	str	r1, [sp, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	bfbb      	ittet	lt
 80080d6:	425b      	neglt	r3, r3
 80080d8:	f042 0202 	orrlt.w	r2, r2, #2
 80080dc:	9307      	strge	r3, [sp, #28]
 80080de:	9307      	strlt	r3, [sp, #28]
 80080e0:	bfb8      	it	lt
 80080e2:	9204      	strlt	r2, [sp, #16]
 80080e4:	7823      	ldrb	r3, [r4, #0]
 80080e6:	2b2e      	cmp	r3, #46	; 0x2e
 80080e8:	d10c      	bne.n	8008104 <_svfiprintf_r+0x130>
 80080ea:	7863      	ldrb	r3, [r4, #1]
 80080ec:	2b2a      	cmp	r3, #42	; 0x2a
 80080ee:	d135      	bne.n	800815c <_svfiprintf_r+0x188>
 80080f0:	9b03      	ldr	r3, [sp, #12]
 80080f2:	3402      	adds	r4, #2
 80080f4:	1d1a      	adds	r2, r3, #4
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	9203      	str	r2, [sp, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bfb8      	it	lt
 80080fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081d0 <_svfiprintf_r+0x1fc>
 8008108:	2203      	movs	r2, #3
 800810a:	4650      	mov	r0, sl
 800810c:	7821      	ldrb	r1, [r4, #0]
 800810e:	f000 f9f9 	bl	8008504 <memchr>
 8008112:	b140      	cbz	r0, 8008126 <_svfiprintf_r+0x152>
 8008114:	2340      	movs	r3, #64	; 0x40
 8008116:	eba0 000a 	sub.w	r0, r0, sl
 800811a:	fa03 f000 	lsl.w	r0, r3, r0
 800811e:	9b04      	ldr	r3, [sp, #16]
 8008120:	3401      	adds	r4, #1
 8008122:	4303      	orrs	r3, r0
 8008124:	9304      	str	r3, [sp, #16]
 8008126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812a:	2206      	movs	r2, #6
 800812c:	4825      	ldr	r0, [pc, #148]	; (80081c4 <_svfiprintf_r+0x1f0>)
 800812e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008132:	f000 f9e7 	bl	8008504 <memchr>
 8008136:	2800      	cmp	r0, #0
 8008138:	d038      	beq.n	80081ac <_svfiprintf_r+0x1d8>
 800813a:	4b23      	ldr	r3, [pc, #140]	; (80081c8 <_svfiprintf_r+0x1f4>)
 800813c:	bb1b      	cbnz	r3, 8008186 <_svfiprintf_r+0x1b2>
 800813e:	9b03      	ldr	r3, [sp, #12]
 8008140:	3307      	adds	r3, #7
 8008142:	f023 0307 	bic.w	r3, r3, #7
 8008146:	3308      	adds	r3, #8
 8008148:	9303      	str	r3, [sp, #12]
 800814a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814c:	4433      	add	r3, r6
 800814e:	9309      	str	r3, [sp, #36]	; 0x24
 8008150:	e767      	b.n	8008022 <_svfiprintf_r+0x4e>
 8008152:	460c      	mov	r4, r1
 8008154:	2001      	movs	r0, #1
 8008156:	fb0c 3202 	mla	r2, ip, r2, r3
 800815a:	e7a5      	b.n	80080a8 <_svfiprintf_r+0xd4>
 800815c:	2300      	movs	r3, #0
 800815e:	f04f 0c0a 	mov.w	ip, #10
 8008162:	4619      	mov	r1, r3
 8008164:	3401      	adds	r4, #1
 8008166:	9305      	str	r3, [sp, #20]
 8008168:	4620      	mov	r0, r4
 800816a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800816e:	3a30      	subs	r2, #48	; 0x30
 8008170:	2a09      	cmp	r2, #9
 8008172:	d903      	bls.n	800817c <_svfiprintf_r+0x1a8>
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0c5      	beq.n	8008104 <_svfiprintf_r+0x130>
 8008178:	9105      	str	r1, [sp, #20]
 800817a:	e7c3      	b.n	8008104 <_svfiprintf_r+0x130>
 800817c:	4604      	mov	r4, r0
 800817e:	2301      	movs	r3, #1
 8008180:	fb0c 2101 	mla	r1, ip, r1, r2
 8008184:	e7f0      	b.n	8008168 <_svfiprintf_r+0x194>
 8008186:	ab03      	add	r3, sp, #12
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	462a      	mov	r2, r5
 800818c:	4638      	mov	r0, r7
 800818e:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <_svfiprintf_r+0x1f8>)
 8008190:	a904      	add	r1, sp, #16
 8008192:	f3af 8000 	nop.w
 8008196:	1c42      	adds	r2, r0, #1
 8008198:	4606      	mov	r6, r0
 800819a:	d1d6      	bne.n	800814a <_svfiprintf_r+0x176>
 800819c:	89ab      	ldrh	r3, [r5, #12]
 800819e:	065b      	lsls	r3, r3, #25
 80081a0:	f53f af2c 	bmi.w	8007ffc <_svfiprintf_r+0x28>
 80081a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081a6:	b01d      	add	sp, #116	; 0x74
 80081a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ac:	ab03      	add	r3, sp, #12
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	462a      	mov	r2, r5
 80081b2:	4638      	mov	r0, r7
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <_svfiprintf_r+0x1f8>)
 80081b6:	a904      	add	r1, sp, #16
 80081b8:	f000 f87c 	bl	80082b4 <_printf_i>
 80081bc:	e7eb      	b.n	8008196 <_svfiprintf_r+0x1c2>
 80081be:	bf00      	nop
 80081c0:	08008f11 	.word	0x08008f11
 80081c4:	08008f1b 	.word	0x08008f1b
 80081c8:	00000000 	.word	0x00000000
 80081cc:	08007f1d 	.word	0x08007f1d
 80081d0:	08008f17 	.word	0x08008f17

080081d4 <_printf_common>:
 80081d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	4616      	mov	r6, r2
 80081da:	4699      	mov	r9, r3
 80081dc:	688a      	ldr	r2, [r1, #8]
 80081de:	690b      	ldr	r3, [r1, #16]
 80081e0:	4607      	mov	r7, r0
 80081e2:	4293      	cmp	r3, r2
 80081e4:	bfb8      	it	lt
 80081e6:	4613      	movlt	r3, r2
 80081e8:	6033      	str	r3, [r6, #0]
 80081ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081ee:	460c      	mov	r4, r1
 80081f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081f4:	b10a      	cbz	r2, 80081fa <_printf_common+0x26>
 80081f6:	3301      	adds	r3, #1
 80081f8:	6033      	str	r3, [r6, #0]
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	0699      	lsls	r1, r3, #26
 80081fe:	bf42      	ittt	mi
 8008200:	6833      	ldrmi	r3, [r6, #0]
 8008202:	3302      	addmi	r3, #2
 8008204:	6033      	strmi	r3, [r6, #0]
 8008206:	6825      	ldr	r5, [r4, #0]
 8008208:	f015 0506 	ands.w	r5, r5, #6
 800820c:	d106      	bne.n	800821c <_printf_common+0x48>
 800820e:	f104 0a19 	add.w	sl, r4, #25
 8008212:	68e3      	ldr	r3, [r4, #12]
 8008214:	6832      	ldr	r2, [r6, #0]
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	42ab      	cmp	r3, r5
 800821a:	dc28      	bgt.n	800826e <_printf_common+0x9a>
 800821c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008220:	1e13      	subs	r3, r2, #0
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	bf18      	it	ne
 8008226:	2301      	movne	r3, #1
 8008228:	0692      	lsls	r2, r2, #26
 800822a:	d42d      	bmi.n	8008288 <_printf_common+0xb4>
 800822c:	4649      	mov	r1, r9
 800822e:	4638      	mov	r0, r7
 8008230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008234:	47c0      	blx	r8
 8008236:	3001      	adds	r0, #1
 8008238:	d020      	beq.n	800827c <_printf_common+0xa8>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	68e5      	ldr	r5, [r4, #12]
 800823e:	f003 0306 	and.w	r3, r3, #6
 8008242:	2b04      	cmp	r3, #4
 8008244:	bf18      	it	ne
 8008246:	2500      	movne	r5, #0
 8008248:	6832      	ldr	r2, [r6, #0]
 800824a:	f04f 0600 	mov.w	r6, #0
 800824e:	68a3      	ldr	r3, [r4, #8]
 8008250:	bf08      	it	eq
 8008252:	1aad      	subeq	r5, r5, r2
 8008254:	6922      	ldr	r2, [r4, #16]
 8008256:	bf08      	it	eq
 8008258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800825c:	4293      	cmp	r3, r2
 800825e:	bfc4      	itt	gt
 8008260:	1a9b      	subgt	r3, r3, r2
 8008262:	18ed      	addgt	r5, r5, r3
 8008264:	341a      	adds	r4, #26
 8008266:	42b5      	cmp	r5, r6
 8008268:	d11a      	bne.n	80082a0 <_printf_common+0xcc>
 800826a:	2000      	movs	r0, #0
 800826c:	e008      	b.n	8008280 <_printf_common+0xac>
 800826e:	2301      	movs	r3, #1
 8008270:	4652      	mov	r2, sl
 8008272:	4649      	mov	r1, r9
 8008274:	4638      	mov	r0, r7
 8008276:	47c0      	blx	r8
 8008278:	3001      	adds	r0, #1
 800827a:	d103      	bne.n	8008284 <_printf_common+0xb0>
 800827c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008284:	3501      	adds	r5, #1
 8008286:	e7c4      	b.n	8008212 <_printf_common+0x3e>
 8008288:	2030      	movs	r0, #48	; 0x30
 800828a:	18e1      	adds	r1, r4, r3
 800828c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008296:	4422      	add	r2, r4
 8008298:	3302      	adds	r3, #2
 800829a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800829e:	e7c5      	b.n	800822c <_printf_common+0x58>
 80082a0:	2301      	movs	r3, #1
 80082a2:	4622      	mov	r2, r4
 80082a4:	4649      	mov	r1, r9
 80082a6:	4638      	mov	r0, r7
 80082a8:	47c0      	blx	r8
 80082aa:	3001      	adds	r0, #1
 80082ac:	d0e6      	beq.n	800827c <_printf_common+0xa8>
 80082ae:	3601      	adds	r6, #1
 80082b0:	e7d9      	b.n	8008266 <_printf_common+0x92>
	...

080082b4 <_printf_i>:
 80082b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082b8:	460c      	mov	r4, r1
 80082ba:	7e27      	ldrb	r7, [r4, #24]
 80082bc:	4691      	mov	r9, r2
 80082be:	2f78      	cmp	r7, #120	; 0x78
 80082c0:	4680      	mov	r8, r0
 80082c2:	469a      	mov	sl, r3
 80082c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082ca:	d807      	bhi.n	80082dc <_printf_i+0x28>
 80082cc:	2f62      	cmp	r7, #98	; 0x62
 80082ce:	d80a      	bhi.n	80082e6 <_printf_i+0x32>
 80082d0:	2f00      	cmp	r7, #0
 80082d2:	f000 80d9 	beq.w	8008488 <_printf_i+0x1d4>
 80082d6:	2f58      	cmp	r7, #88	; 0x58
 80082d8:	f000 80a4 	beq.w	8008424 <_printf_i+0x170>
 80082dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082e4:	e03a      	b.n	800835c <_printf_i+0xa8>
 80082e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082ea:	2b15      	cmp	r3, #21
 80082ec:	d8f6      	bhi.n	80082dc <_printf_i+0x28>
 80082ee:	a001      	add	r0, pc, #4	; (adr r0, 80082f4 <_printf_i+0x40>)
 80082f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80082f4:	0800834d 	.word	0x0800834d
 80082f8:	08008361 	.word	0x08008361
 80082fc:	080082dd 	.word	0x080082dd
 8008300:	080082dd 	.word	0x080082dd
 8008304:	080082dd 	.word	0x080082dd
 8008308:	080082dd 	.word	0x080082dd
 800830c:	08008361 	.word	0x08008361
 8008310:	080082dd 	.word	0x080082dd
 8008314:	080082dd 	.word	0x080082dd
 8008318:	080082dd 	.word	0x080082dd
 800831c:	080082dd 	.word	0x080082dd
 8008320:	0800846f 	.word	0x0800846f
 8008324:	08008391 	.word	0x08008391
 8008328:	08008451 	.word	0x08008451
 800832c:	080082dd 	.word	0x080082dd
 8008330:	080082dd 	.word	0x080082dd
 8008334:	08008491 	.word	0x08008491
 8008338:	080082dd 	.word	0x080082dd
 800833c:	08008391 	.word	0x08008391
 8008340:	080082dd 	.word	0x080082dd
 8008344:	080082dd 	.word	0x080082dd
 8008348:	08008459 	.word	0x08008459
 800834c:	680b      	ldr	r3, [r1, #0]
 800834e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008352:	1d1a      	adds	r2, r3, #4
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	600a      	str	r2, [r1, #0]
 8008358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800835c:	2301      	movs	r3, #1
 800835e:	e0a4      	b.n	80084aa <_printf_i+0x1f6>
 8008360:	6825      	ldr	r5, [r4, #0]
 8008362:	6808      	ldr	r0, [r1, #0]
 8008364:	062e      	lsls	r6, r5, #24
 8008366:	f100 0304 	add.w	r3, r0, #4
 800836a:	d50a      	bpl.n	8008382 <_printf_i+0xce>
 800836c:	6805      	ldr	r5, [r0, #0]
 800836e:	600b      	str	r3, [r1, #0]
 8008370:	2d00      	cmp	r5, #0
 8008372:	da03      	bge.n	800837c <_printf_i+0xc8>
 8008374:	232d      	movs	r3, #45	; 0x2d
 8008376:	426d      	negs	r5, r5
 8008378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800837c:	230a      	movs	r3, #10
 800837e:	485e      	ldr	r0, [pc, #376]	; (80084f8 <_printf_i+0x244>)
 8008380:	e019      	b.n	80083b6 <_printf_i+0x102>
 8008382:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008386:	6805      	ldr	r5, [r0, #0]
 8008388:	600b      	str	r3, [r1, #0]
 800838a:	bf18      	it	ne
 800838c:	b22d      	sxthne	r5, r5
 800838e:	e7ef      	b.n	8008370 <_printf_i+0xbc>
 8008390:	680b      	ldr	r3, [r1, #0]
 8008392:	6825      	ldr	r5, [r4, #0]
 8008394:	1d18      	adds	r0, r3, #4
 8008396:	6008      	str	r0, [r1, #0]
 8008398:	0628      	lsls	r0, r5, #24
 800839a:	d501      	bpl.n	80083a0 <_printf_i+0xec>
 800839c:	681d      	ldr	r5, [r3, #0]
 800839e:	e002      	b.n	80083a6 <_printf_i+0xf2>
 80083a0:	0669      	lsls	r1, r5, #25
 80083a2:	d5fb      	bpl.n	800839c <_printf_i+0xe8>
 80083a4:	881d      	ldrh	r5, [r3, #0]
 80083a6:	2f6f      	cmp	r7, #111	; 0x6f
 80083a8:	bf0c      	ite	eq
 80083aa:	2308      	moveq	r3, #8
 80083ac:	230a      	movne	r3, #10
 80083ae:	4852      	ldr	r0, [pc, #328]	; (80084f8 <_printf_i+0x244>)
 80083b0:	2100      	movs	r1, #0
 80083b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083b6:	6866      	ldr	r6, [r4, #4]
 80083b8:	2e00      	cmp	r6, #0
 80083ba:	bfa8      	it	ge
 80083bc:	6821      	ldrge	r1, [r4, #0]
 80083be:	60a6      	str	r6, [r4, #8]
 80083c0:	bfa4      	itt	ge
 80083c2:	f021 0104 	bicge.w	r1, r1, #4
 80083c6:	6021      	strge	r1, [r4, #0]
 80083c8:	b90d      	cbnz	r5, 80083ce <_printf_i+0x11a>
 80083ca:	2e00      	cmp	r6, #0
 80083cc:	d04d      	beq.n	800846a <_printf_i+0x1b6>
 80083ce:	4616      	mov	r6, r2
 80083d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80083d4:	fb03 5711 	mls	r7, r3, r1, r5
 80083d8:	5dc7      	ldrb	r7, [r0, r7]
 80083da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083de:	462f      	mov	r7, r5
 80083e0:	42bb      	cmp	r3, r7
 80083e2:	460d      	mov	r5, r1
 80083e4:	d9f4      	bls.n	80083d0 <_printf_i+0x11c>
 80083e6:	2b08      	cmp	r3, #8
 80083e8:	d10b      	bne.n	8008402 <_printf_i+0x14e>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	07df      	lsls	r7, r3, #31
 80083ee:	d508      	bpl.n	8008402 <_printf_i+0x14e>
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	6861      	ldr	r1, [r4, #4]
 80083f4:	4299      	cmp	r1, r3
 80083f6:	bfde      	ittt	le
 80083f8:	2330      	movle	r3, #48	; 0x30
 80083fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083fe:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008402:	1b92      	subs	r2, r2, r6
 8008404:	6122      	str	r2, [r4, #16]
 8008406:	464b      	mov	r3, r9
 8008408:	4621      	mov	r1, r4
 800840a:	4640      	mov	r0, r8
 800840c:	f8cd a000 	str.w	sl, [sp]
 8008410:	aa03      	add	r2, sp, #12
 8008412:	f7ff fedf 	bl	80081d4 <_printf_common>
 8008416:	3001      	adds	r0, #1
 8008418:	d14c      	bne.n	80084b4 <_printf_i+0x200>
 800841a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800841e:	b004      	add	sp, #16
 8008420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008424:	4834      	ldr	r0, [pc, #208]	; (80084f8 <_printf_i+0x244>)
 8008426:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800842a:	680e      	ldr	r6, [r1, #0]
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008432:	061f      	lsls	r7, r3, #24
 8008434:	600e      	str	r6, [r1, #0]
 8008436:	d514      	bpl.n	8008462 <_printf_i+0x1ae>
 8008438:	07d9      	lsls	r1, r3, #31
 800843a:	bf44      	itt	mi
 800843c:	f043 0320 	orrmi.w	r3, r3, #32
 8008440:	6023      	strmi	r3, [r4, #0]
 8008442:	b91d      	cbnz	r5, 800844c <_printf_i+0x198>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	f023 0320 	bic.w	r3, r3, #32
 800844a:	6023      	str	r3, [r4, #0]
 800844c:	2310      	movs	r3, #16
 800844e:	e7af      	b.n	80083b0 <_printf_i+0xfc>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	f043 0320 	orr.w	r3, r3, #32
 8008456:	6023      	str	r3, [r4, #0]
 8008458:	2378      	movs	r3, #120	; 0x78
 800845a:	4828      	ldr	r0, [pc, #160]	; (80084fc <_printf_i+0x248>)
 800845c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008460:	e7e3      	b.n	800842a <_printf_i+0x176>
 8008462:	065e      	lsls	r6, r3, #25
 8008464:	bf48      	it	mi
 8008466:	b2ad      	uxthmi	r5, r5
 8008468:	e7e6      	b.n	8008438 <_printf_i+0x184>
 800846a:	4616      	mov	r6, r2
 800846c:	e7bb      	b.n	80083e6 <_printf_i+0x132>
 800846e:	680b      	ldr	r3, [r1, #0]
 8008470:	6826      	ldr	r6, [r4, #0]
 8008472:	1d1d      	adds	r5, r3, #4
 8008474:	6960      	ldr	r0, [r4, #20]
 8008476:	600d      	str	r5, [r1, #0]
 8008478:	0635      	lsls	r5, r6, #24
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	d501      	bpl.n	8008482 <_printf_i+0x1ce>
 800847e:	6018      	str	r0, [r3, #0]
 8008480:	e002      	b.n	8008488 <_printf_i+0x1d4>
 8008482:	0671      	lsls	r1, r6, #25
 8008484:	d5fb      	bpl.n	800847e <_printf_i+0x1ca>
 8008486:	8018      	strh	r0, [r3, #0]
 8008488:	2300      	movs	r3, #0
 800848a:	4616      	mov	r6, r2
 800848c:	6123      	str	r3, [r4, #16]
 800848e:	e7ba      	b.n	8008406 <_printf_i+0x152>
 8008490:	680b      	ldr	r3, [r1, #0]
 8008492:	1d1a      	adds	r2, r3, #4
 8008494:	600a      	str	r2, [r1, #0]
 8008496:	681e      	ldr	r6, [r3, #0]
 8008498:	2100      	movs	r1, #0
 800849a:	4630      	mov	r0, r6
 800849c:	6862      	ldr	r2, [r4, #4]
 800849e:	f000 f831 	bl	8008504 <memchr>
 80084a2:	b108      	cbz	r0, 80084a8 <_printf_i+0x1f4>
 80084a4:	1b80      	subs	r0, r0, r6
 80084a6:	6060      	str	r0, [r4, #4]
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	6123      	str	r3, [r4, #16]
 80084ac:	2300      	movs	r3, #0
 80084ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b2:	e7a8      	b.n	8008406 <_printf_i+0x152>
 80084b4:	4632      	mov	r2, r6
 80084b6:	4649      	mov	r1, r9
 80084b8:	4640      	mov	r0, r8
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	47d0      	blx	sl
 80084be:	3001      	adds	r0, #1
 80084c0:	d0ab      	beq.n	800841a <_printf_i+0x166>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	079b      	lsls	r3, r3, #30
 80084c6:	d413      	bmi.n	80084f0 <_printf_i+0x23c>
 80084c8:	68e0      	ldr	r0, [r4, #12]
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	4298      	cmp	r0, r3
 80084ce:	bfb8      	it	lt
 80084d0:	4618      	movlt	r0, r3
 80084d2:	e7a4      	b.n	800841e <_printf_i+0x16a>
 80084d4:	2301      	movs	r3, #1
 80084d6:	4632      	mov	r2, r6
 80084d8:	4649      	mov	r1, r9
 80084da:	4640      	mov	r0, r8
 80084dc:	47d0      	blx	sl
 80084de:	3001      	adds	r0, #1
 80084e0:	d09b      	beq.n	800841a <_printf_i+0x166>
 80084e2:	3501      	adds	r5, #1
 80084e4:	68e3      	ldr	r3, [r4, #12]
 80084e6:	9903      	ldr	r1, [sp, #12]
 80084e8:	1a5b      	subs	r3, r3, r1
 80084ea:	42ab      	cmp	r3, r5
 80084ec:	dcf2      	bgt.n	80084d4 <_printf_i+0x220>
 80084ee:	e7eb      	b.n	80084c8 <_printf_i+0x214>
 80084f0:	2500      	movs	r5, #0
 80084f2:	f104 0619 	add.w	r6, r4, #25
 80084f6:	e7f5      	b.n	80084e4 <_printf_i+0x230>
 80084f8:	08008f22 	.word	0x08008f22
 80084fc:	08008f33 	.word	0x08008f33

08008500 <__retarget_lock_acquire_recursive>:
 8008500:	4770      	bx	lr

08008502 <__retarget_lock_release_recursive>:
 8008502:	4770      	bx	lr

08008504 <memchr>:
 8008504:	4603      	mov	r3, r0
 8008506:	b510      	push	{r4, lr}
 8008508:	b2c9      	uxtb	r1, r1
 800850a:	4402      	add	r2, r0
 800850c:	4293      	cmp	r3, r2
 800850e:	4618      	mov	r0, r3
 8008510:	d101      	bne.n	8008516 <memchr+0x12>
 8008512:	2000      	movs	r0, #0
 8008514:	e003      	b.n	800851e <memchr+0x1a>
 8008516:	7804      	ldrb	r4, [r0, #0]
 8008518:	3301      	adds	r3, #1
 800851a:	428c      	cmp	r4, r1
 800851c:	d1f6      	bne.n	800850c <memchr+0x8>
 800851e:	bd10      	pop	{r4, pc}

08008520 <memmove>:
 8008520:	4288      	cmp	r0, r1
 8008522:	b510      	push	{r4, lr}
 8008524:	eb01 0402 	add.w	r4, r1, r2
 8008528:	d902      	bls.n	8008530 <memmove+0x10>
 800852a:	4284      	cmp	r4, r0
 800852c:	4623      	mov	r3, r4
 800852e:	d807      	bhi.n	8008540 <memmove+0x20>
 8008530:	1e43      	subs	r3, r0, #1
 8008532:	42a1      	cmp	r1, r4
 8008534:	d008      	beq.n	8008548 <memmove+0x28>
 8008536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800853a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800853e:	e7f8      	b.n	8008532 <memmove+0x12>
 8008540:	4601      	mov	r1, r0
 8008542:	4402      	add	r2, r0
 8008544:	428a      	cmp	r2, r1
 8008546:	d100      	bne.n	800854a <memmove+0x2a>
 8008548:	bd10      	pop	{r4, pc}
 800854a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800854e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008552:	e7f7      	b.n	8008544 <memmove+0x24>

08008554 <_realloc_r>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	4607      	mov	r7, r0
 8008558:	4614      	mov	r4, r2
 800855a:	460e      	mov	r6, r1
 800855c:	b921      	cbnz	r1, 8008568 <_realloc_r+0x14>
 800855e:	4611      	mov	r1, r2
 8008560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008564:	f7ff bbd8 	b.w	8007d18 <_malloc_r>
 8008568:	b922      	cbnz	r2, 8008574 <_realloc_r+0x20>
 800856a:	f7ff fb89 	bl	8007c80 <_free_r>
 800856e:	4625      	mov	r5, r4
 8008570:	4628      	mov	r0, r5
 8008572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008574:	f000 f814 	bl	80085a0 <_malloc_usable_size_r>
 8008578:	42a0      	cmp	r0, r4
 800857a:	d20f      	bcs.n	800859c <_realloc_r+0x48>
 800857c:	4621      	mov	r1, r4
 800857e:	4638      	mov	r0, r7
 8008580:	f7ff fbca 	bl	8007d18 <_malloc_r>
 8008584:	4605      	mov	r5, r0
 8008586:	2800      	cmp	r0, #0
 8008588:	d0f2      	beq.n	8008570 <_realloc_r+0x1c>
 800858a:	4631      	mov	r1, r6
 800858c:	4622      	mov	r2, r4
 800858e:	f7ff fb61 	bl	8007c54 <memcpy>
 8008592:	4631      	mov	r1, r6
 8008594:	4638      	mov	r0, r7
 8008596:	f7ff fb73 	bl	8007c80 <_free_r>
 800859a:	e7e9      	b.n	8008570 <_realloc_r+0x1c>
 800859c:	4635      	mov	r5, r6
 800859e:	e7e7      	b.n	8008570 <_realloc_r+0x1c>

080085a0 <_malloc_usable_size_r>:
 80085a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085a4:	1f18      	subs	r0, r3, #4
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	bfbc      	itt	lt
 80085aa:	580b      	ldrlt	r3, [r1, r0]
 80085ac:	18c0      	addlt	r0, r0, r3
 80085ae:	4770      	bx	lr

080085b0 <_init>:
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	bf00      	nop
 80085b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b6:	bc08      	pop	{r3}
 80085b8:	469e      	mov	lr, r3
 80085ba:	4770      	bx	lr

080085bc <_fini>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	bf00      	nop
 80085c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c2:	bc08      	pop	{r3}
 80085c4:	469e      	mov	lr, r3
 80085c6:	4770      	bx	lr
