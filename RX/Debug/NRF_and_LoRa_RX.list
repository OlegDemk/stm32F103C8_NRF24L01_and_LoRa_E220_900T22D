
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  080032d0  080032d0  000132d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa4  08003aa4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003aa4  08003aa4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003aa4  08003aa4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000018  08003ac4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08003ac4  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abda  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b12  00000000  00000000  0002ac1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001755e  00000000  00000000  0002d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000cafe  00000000  00000000  000445ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000845b3  00000000  00000000  000510ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000d569f  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000008a8  00000000  00000000  000d56f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002630  00000000  00000000  000d5fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080032b8 	.word	0x080032b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080032b8 	.word	0x080032b8

0800014c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af04      	add	r7, sp, #16
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8000156:	230a      	movs	r3, #10
 8000158:	9302      	str	r3, [sp, #8]
 800015a:	2301      	movs	r3, #1
 800015c:	9301      	str	r3, [sp, #4]
 800015e:	1dfb      	adds	r3, r7, #7
 8000160:	9300      	str	r3, [sp, #0]
 8000162:	2301      	movs	r3, #1
 8000164:	2200      	movs	r2, #0
 8000166:	2178      	movs	r1, #120	; 0x78
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <ssd1306_WriteCommand+0x2c>)
 800016a:	f001 fb85 	bl	8001878 <HAL_I2C_Mem_Write>
}
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000468 	.word	0x20000468

0800017c <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000180:	2064      	movs	r0, #100	; 0x64
 8000182:	f000 ff79 	bl	8001078 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8000186:	20ae      	movs	r0, #174	; 0xae
 8000188:	f7ff ffe0 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800018c:	2020      	movs	r0, #32
 800018e:	f7ff ffdd 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000192:	2010      	movs	r0, #16
 8000194:	f7ff ffda 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000198:	20b0      	movs	r0, #176	; 0xb0
 800019a:	f7ff ffd7 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800019e:	20c8      	movs	r0, #200	; 0xc8
 80001a0:	f7ff ffd4 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80001a4:	2000      	movs	r0, #0
 80001a6:	f7ff ffd1 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80001aa:	2010      	movs	r0, #16
 80001ac:	f7ff ffce 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80001b0:	2040      	movs	r0, #64	; 0x40
 80001b2:	f7ff ffcb 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80001b6:	2081      	movs	r0, #129	; 0x81
 80001b8:	f7ff ffc8 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80001bc:	20ff      	movs	r0, #255	; 0xff
 80001be:	f7ff ffc5 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80001c2:	20a1      	movs	r0, #161	; 0xa1
 80001c4:	f7ff ffc2 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80001c8:	20a6      	movs	r0, #166	; 0xa6
 80001ca:	f7ff ffbf 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80001ce:	20a8      	movs	r0, #168	; 0xa8
 80001d0:	f7ff ffbc 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80001d4:	203f      	movs	r0, #63	; 0x3f
 80001d6:	f7ff ffb9 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80001da:	20a4      	movs	r0, #164	; 0xa4
 80001dc:	f7ff ffb6 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80001e0:	20d3      	movs	r0, #211	; 0xd3
 80001e2:	f7ff ffb3 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80001e6:	2000      	movs	r0, #0
 80001e8:	f7ff ffb0 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80001ec:	20d5      	movs	r0, #213	; 0xd5
 80001ee:	f7ff ffad 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80001f2:	20f0      	movs	r0, #240	; 0xf0
 80001f4:	f7ff ffaa 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80001f8:	20d9      	movs	r0, #217	; 0xd9
 80001fa:	f7ff ffa7 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80001fe:	2022      	movs	r0, #34	; 0x22
 8000200:	f7ff ffa4 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000204:	20da      	movs	r0, #218	; 0xda
 8000206:	f7ff ffa1 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800020a:	2012      	movs	r0, #18
 800020c:	f7ff ff9e 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000210:	20db      	movs	r0, #219	; 0xdb
 8000212:	f7ff ff9b 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000216:	2020      	movs	r0, #32
 8000218:	f7ff ff98 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800021c:	208d      	movs	r0, #141	; 0x8d
 800021e:	f7ff ff95 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000222:	2014      	movs	r0, #20
 8000224:	f7ff ff92 	bl	800014c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000228:	20af      	movs	r0, #175	; 0xaf
 800022a:	f7ff ff8f 	bl	800014c <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f810 	bl	8000254 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000234:	f000 f830 	bl	8000298 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <ssd1306_Init+0xd4>)
 800023a:	2200      	movs	r2, #0
 800023c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <ssd1306_Init+0xd4>)
 8000240:	2200      	movs	r2, #0
 8000242:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000244:	4b02      	ldr	r3, [pc, #8]	; (8000250 <ssd1306_Init+0xd4>)
 8000246:	2201      	movs	r2, #1
 8000248:	715a      	strb	r2, [r3, #5]

	return 1;
 800024a:	2301      	movs	r3, #1
}
 800024c:	4618      	mov	r0, r3
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000434 	.word	0x20000434

08000254 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	e00d      	b.n	8000280 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d101      	bne.n	800026e <ssd1306_Fill+0x1a>
 800026a:	2100      	movs	r1, #0
 800026c:	e000      	b.n	8000270 <ssd1306_Fill+0x1c>
 800026e:	21ff      	movs	r1, #255	; 0xff
 8000270:	4a08      	ldr	r2, [pc, #32]	; (8000294 <ssd1306_Fill+0x40>)
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	4413      	add	r3, r2
 8000276:	460a      	mov	r2, r1
 8000278:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	3301      	adds	r3, #1
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000286:	d3ed      	bcc.n	8000264 <ssd1306_Fill+0x10>
	}
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	20000034 	.word	0x20000034

08000298 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 800029e:	2300      	movs	r3, #0
 80002a0:	71fb      	strb	r3, [r7, #7]
 80002a2:	e01d      	b.n	80002e0 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	3b50      	subs	r3, #80	; 0x50
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ff4e 	bl	800014c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80002b0:	2000      	movs	r0, #0
 80002b2:	f7ff ff4b 	bl	800014c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80002b6:	2010      	movs	r0, #16
 80002b8:	f7ff ff48 	bl	800014c <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	01db      	lsls	r3, r3, #7
 80002c0:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <ssd1306_UpdateScreen+0x58>)
 80002c2:	4413      	add	r3, r2
 80002c4:	2264      	movs	r2, #100	; 0x64
 80002c6:	9202      	str	r2, [sp, #8]
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	9201      	str	r2, [sp, #4]
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	2301      	movs	r3, #1
 80002d0:	2240      	movs	r2, #64	; 0x40
 80002d2:	2178      	movs	r1, #120	; 0x78
 80002d4:	4807      	ldr	r0, [pc, #28]	; (80002f4 <ssd1306_UpdateScreen+0x5c>)
 80002d6:	f001 facf 	bl	8001878 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	3301      	adds	r3, #1
 80002de:	71fb      	strb	r3, [r7, #7]
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	2b07      	cmp	r3, #7
 80002e4:	d9de      	bls.n	80002a4 <ssd1306_UpdateScreen+0xc>
	}
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000034 	.word	0x20000034
 80002f4:	20000468 	.word	0x20000468

080002f8 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
 8000302:	460b      	mov	r3, r1
 8000304:	71bb      	strb	r3, [r7, #6]
 8000306:	4613      	mov	r3, r2
 8000308:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	2b00      	cmp	r3, #0
 8000310:	db48      	blt.n	80003a4 <ssd1306_DrawPixel+0xac>
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	2b3f      	cmp	r3, #63	; 0x3f
 8000316:	d845      	bhi.n	80003a4 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000318:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <ssd1306_DrawPixel+0xb8>)
 800031a:	791b      	ldrb	r3, [r3, #4]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d006      	beq.n	800032e <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000320:	797b      	ldrb	r3, [r7, #5]
 8000322:	2b00      	cmp	r3, #0
 8000324:	bf0c      	ite	eq
 8000326:	2301      	moveq	r3, #1
 8000328:	2300      	movne	r3, #0
 800032a:	b2db      	uxtb	r3, r3
 800032c:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 800032e:	797b      	ldrb	r3, [r7, #5]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d11a      	bne.n	800036a <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000334:	79fa      	ldrb	r2, [r7, #7]
 8000336:	79bb      	ldrb	r3, [r7, #6]
 8000338:	08db      	lsrs	r3, r3, #3
 800033a:	b2d8      	uxtb	r0, r3
 800033c:	4603      	mov	r3, r0
 800033e:	01db      	lsls	r3, r3, #7
 8000340:	4413      	add	r3, r2
 8000342:	4a1c      	ldr	r2, [pc, #112]	; (80003b4 <ssd1306_DrawPixel+0xbc>)
 8000344:	5cd3      	ldrb	r3, [r2, r3]
 8000346:	b25a      	sxtb	r2, r3
 8000348:	79bb      	ldrb	r3, [r7, #6]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	2101      	movs	r1, #1
 8000350:	fa01 f303 	lsl.w	r3, r1, r3
 8000354:	b25b      	sxtb	r3, r3
 8000356:	4313      	orrs	r3, r2
 8000358:	b259      	sxtb	r1, r3
 800035a:	79fa      	ldrb	r2, [r7, #7]
 800035c:	4603      	mov	r3, r0
 800035e:	01db      	lsls	r3, r3, #7
 8000360:	4413      	add	r3, r2
 8000362:	b2c9      	uxtb	r1, r1
 8000364:	4a13      	ldr	r2, [pc, #76]	; (80003b4 <ssd1306_DrawPixel+0xbc>)
 8000366:	54d1      	strb	r1, [r2, r3]
 8000368:	e01d      	b.n	80003a6 <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800036a:	79fa      	ldrb	r2, [r7, #7]
 800036c:	79bb      	ldrb	r3, [r7, #6]
 800036e:	08db      	lsrs	r3, r3, #3
 8000370:	b2d8      	uxtb	r0, r3
 8000372:	4603      	mov	r3, r0
 8000374:	01db      	lsls	r3, r3, #7
 8000376:	4413      	add	r3, r2
 8000378:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <ssd1306_DrawPixel+0xbc>)
 800037a:	5cd3      	ldrb	r3, [r2, r3]
 800037c:	b25a      	sxtb	r2, r3
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	f003 0307 	and.w	r3, r3, #7
 8000384:	2101      	movs	r1, #1
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	b25b      	sxtb	r3, r3
 800038c:	43db      	mvns	r3, r3
 800038e:	b25b      	sxtb	r3, r3
 8000390:	4013      	ands	r3, r2
 8000392:	b259      	sxtb	r1, r3
 8000394:	79fa      	ldrb	r2, [r7, #7]
 8000396:	4603      	mov	r3, r0
 8000398:	01db      	lsls	r3, r3, #7
 800039a:	4413      	add	r3, r2
 800039c:	b2c9      	uxtb	r1, r1
 800039e:	4a05      	ldr	r2, [pc, #20]	; (80003b4 <ssd1306_DrawPixel+0xbc>)
 80003a0:	54d1      	strb	r1, [r2, r3]
 80003a2:	e000      	b.n	80003a6 <ssd1306_DrawPixel+0xae>
		return;
 80003a4:	bf00      	nop
	}
}
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000434 	.word	0x20000434
 80003b4:	20000034 	.word	0x20000034

080003b8 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80003b8:	b590      	push	{r4, r7, lr}
 80003ba:	b089      	sub	sp, #36	; 0x24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4604      	mov	r4, r0
 80003c0:	1d38      	adds	r0, r7, #4
 80003c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80003c6:	461a      	mov	r2, r3
 80003c8:	4623      	mov	r3, r4
 80003ca:	73fb      	strb	r3, [r7, #15]
 80003cc:	4613      	mov	r3, r2
 80003ce:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80003d0:	4b38      	ldr	r3, [pc, #224]	; (80004b4 <ssd1306_WriteChar+0xfc>)
 80003d2:	881b      	ldrh	r3, [r3, #0]
 80003d4:	461a      	mov	r2, r3
 80003d6:	793b      	ldrb	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	2b7f      	cmp	r3, #127	; 0x7f
 80003dc:	dc06      	bgt.n	80003ec <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80003de:	4b35      	ldr	r3, [pc, #212]	; (80004b4 <ssd1306_WriteChar+0xfc>)
 80003e0:	885b      	ldrh	r3, [r3, #2]
 80003e2:	461a      	mov	r2, r3
 80003e4:	797b      	ldrb	r3, [r7, #5]
 80003e6:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80003e8:	2b3f      	cmp	r3, #63	; 0x3f
 80003ea:	dd01      	ble.n	80003f0 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	e05d      	b.n	80004ac <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80003f0:	2300      	movs	r3, #0
 80003f2:	61fb      	str	r3, [r7, #28]
 80003f4:	e04c      	b.n	8000490 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80003f6:	68ba      	ldr	r2, [r7, #8]
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	3b20      	subs	r3, #32
 80003fc:	7979      	ldrb	r1, [r7, #5]
 80003fe:	fb01 f303 	mul.w	r3, r1, r3
 8000402:	4619      	mov	r1, r3
 8000404:	69fb      	ldr	r3, [r7, #28]
 8000406:	440b      	add	r3, r1
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	4413      	add	r3, r2
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
 8000414:	e034      	b.n	8000480 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8000416:	697a      	ldr	r2, [r7, #20]
 8000418:	69bb      	ldr	r3, [r7, #24]
 800041a:	fa02 f303 	lsl.w	r3, r2, r3
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d012      	beq.n	800044c <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000426:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <ssd1306_WriteChar+0xfc>)
 8000428:	881b      	ldrh	r3, [r3, #0]
 800042a:	b2da      	uxtb	r2, r3
 800042c:	69bb      	ldr	r3, [r7, #24]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4413      	add	r3, r2
 8000432:	b2d8      	uxtb	r0, r3
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <ssd1306_WriteChar+0xfc>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	b2da      	uxtb	r2, r3
 800043a:	69fb      	ldr	r3, [r7, #28]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	4413      	add	r3, r2
 8000440:	b2db      	uxtb	r3, r3
 8000442:	7bba      	ldrb	r2, [r7, #14]
 8000444:	4619      	mov	r1, r3
 8000446:	f7ff ff57 	bl	80002f8 <ssd1306_DrawPixel>
 800044a:	e016      	b.n	800047a <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800044c:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <ssd1306_WriteChar+0xfc>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	b2da      	uxtb	r2, r3
 8000452:	69bb      	ldr	r3, [r7, #24]
 8000454:	b2db      	uxtb	r3, r3
 8000456:	4413      	add	r3, r2
 8000458:	b2d8      	uxtb	r0, r3
 800045a:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <ssd1306_WriteChar+0xfc>)
 800045c:	885b      	ldrh	r3, [r3, #2]
 800045e:	b2da      	uxtb	r2, r3
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	4413      	add	r3, r2
 8000466:	b2d9      	uxtb	r1, r3
 8000468:	7bbb      	ldrb	r3, [r7, #14]
 800046a:	2b00      	cmp	r3, #0
 800046c:	bf0c      	ite	eq
 800046e:	2301      	moveq	r3, #1
 8000470:	2300      	movne	r3, #0
 8000472:	b2db      	uxtb	r3, r3
 8000474:	461a      	mov	r2, r3
 8000476:	f7ff ff3f 	bl	80002f8 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800047a:	69bb      	ldr	r3, [r7, #24]
 800047c:	3301      	adds	r3, #1
 800047e:	61bb      	str	r3, [r7, #24]
 8000480:	793b      	ldrb	r3, [r7, #4]
 8000482:	461a      	mov	r2, r3
 8000484:	69bb      	ldr	r3, [r7, #24]
 8000486:	4293      	cmp	r3, r2
 8000488:	d3c5      	bcc.n	8000416 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	3301      	adds	r3, #1
 800048e:	61fb      	str	r3, [r7, #28]
 8000490:	797b      	ldrb	r3, [r7, #5]
 8000492:	461a      	mov	r2, r3
 8000494:	69fb      	ldr	r3, [r7, #28]
 8000496:	4293      	cmp	r3, r2
 8000498:	d3ad      	bcc.n	80003f6 <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <ssd1306_WriteChar+0xfc>)
 800049c:	881a      	ldrh	r2, [r3, #0]
 800049e:	793b      	ldrb	r3, [r7, #4]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	4413      	add	r3, r2
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	4b03      	ldr	r3, [pc, #12]	; (80004b4 <ssd1306_WriteChar+0xfc>)
 80004a8:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3724      	adds	r7, #36	; 0x24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd90      	pop	{r4, r7, pc}
 80004b4:	20000434 	.word	0x20000434

080004b8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	1d38      	adds	r0, r7, #4
 80004c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80004c6:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80004c8:	e012      	b.n	80004f0 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	7818      	ldrb	r0, [r3, #0]
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	1d3a      	adds	r2, r7, #4
 80004d2:	ca06      	ldmia	r2, {r1, r2}
 80004d4:	f7ff ff70 	bl	80003b8 <ssd1306_WriteChar>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d002      	beq.n	80004ea <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	e008      	b.n	80004fc <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3301      	adds	r3, #1
 80004ee:	60fb      	str	r3, [r7, #12]
	while (*str)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d1e8      	bne.n	80004ca <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	781b      	ldrb	r3, [r3, #0]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	460a      	mov	r2, r1
 800050e:	71fb      	strb	r3, [r7, #7]
 8000510:	4613      	mov	r3, r2
 8000512:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	b29a      	uxth	r2, r3
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <ssd1306_SetCursor+0x2c>)
 800051a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800051c:	79bb      	ldrb	r3, [r7, #6]
 800051e:	b29a      	uxth	r2, r3
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <ssd1306_SetCursor+0x2c>)
 8000522:	805a      	strh	r2, [r3, #2]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000434 	.word	0x20000434

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fd3b 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f82f 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f8d7 	bl	80006f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000546:	f000 f871 	bl	800062c <MX_I2C1_Init>
  MX_SPI1_Init();
 800054a:	f000 f89d 	bl	8000688 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ssd1306_Init();
 800054e:	f7ff fe15 	bl	800017c <ssd1306_Init>
  ssd1306_Fill(Black);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff fe7e 	bl	8000254 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000558:	f7ff fe9e 	bl	8000298 <ssd1306_UpdateScreen>


  // Test write on OLED
  ssd1306_SetCursor(0, 0);
 800055c:	2100      	movs	r1, #0
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff ffd0 	bl	8000504 <ssd1306_SetCursor>
  char test_main[20] = {0};
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
  strcpy(test_main, "NRF24L01 RX");
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <main+0x64>)
 800057a:	ca07      	ldmia	r2, {r0, r1, r2}
 800057c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  ssd1306_WriteString(test_main,  Font_7x10, White);
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <main+0x68>)
 8000582:	1d38      	adds	r0, r7, #4
 8000584:	2301      	movs	r3, #1
 8000586:	ca06      	ldmia	r2, {r1, r2}
 8000588:	f7ff ff96 	bl	80004b8 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800058c:	f7ff fe84 	bl	8000298 <ssd1306_UpdateScreen>
  while (1)
  {
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	  HAL_Delay(100);

	  nrf_communication_test();
 8000590:	f000 fb88 	bl	8000ca4 <nrf_communication_test>
  {
 8000594:	e7fc      	b.n	8000590 <main+0x5c>
 8000596:	bf00      	nop
 8000598:	080032d0 	.word	0x080032d0
 800059c:	20000000 	.word	0x20000000

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b090      	sub	sp, #64	; 0x40
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	2228      	movs	r2, #40	; 0x28
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fe28 	bl	8003204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80005de:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0318 	add.w	r3, r7, #24
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fc5b 	bl	8001ea4 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005f4:	f000 f8fc 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2102      	movs	r1, #2
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fec6 	bl	80023a4 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800061e:	f000 f8e7 	bl	80007f0 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3740      	adds	r7, #64	; 0x40
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_I2C1_Init+0x50>)
 800066a:	f000 ffc1 	bl	80015f0 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f8bc 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000468 	.word	0x20000468
 8000680:	40005400 	.word	0x40005400
 8000684:	000186a0 	.word	0x000186a0

08000688 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_SPI1_Init+0x64>)
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_SPI1_Init+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_SPI1_Init+0x64>)
 8000694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_SPI1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_SPI1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_SPI1_Init+0x64>)
 80006b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_SPI1_Init+0x64>)
 80006bc:	2218      	movs	r2, #24
 80006be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_SPI1_Init+0x64>)
 80006d4:	220a      	movs	r2, #10
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_SPI1_Init+0x64>)
 80006da:	f001 ffe9 	bl	80026b0 <HAL_SPI_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e4:	f000 f884 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200004bc 	.word	0x200004bc
 80006f0:	40013000 	.word	0x40013000

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000708:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <MX_GPIO_Init+0xf0>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a35      	ldr	r2, [pc, #212]	; (80007e4 <MX_GPIO_Init+0xf0>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0310 	and.w	r3, r3, #16
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000720:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000726:	f043 0320 	orr.w	r3, r3, #32
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <MX_GPIO_Init+0xf0>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0320 	and.w	r3, r3, #32
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <MX_GPIO_Init+0xf0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a29      	ldr	r2, [pc, #164]	; (80007e4 <MX_GPIO_Init+0xf0>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <MX_GPIO_Init+0xf0>)
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_GPIO_Init+0xf0>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0308 	and.w	r3, r3, #8
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076e:	481e      	ldr	r0, [pc, #120]	; (80007e8 <MX_GPIO_Init+0xf4>)
 8000770:	f000 ff25 	bl	80015be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2108      	movs	r1, #8
 8000778:	481c      	ldr	r0, [pc, #112]	; (80007ec <MX_GPIO_Init+0xf8>)
 800077a:	f000 ff20 	bl	80015be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2110      	movs	r1, #16
 8000782:	481a      	ldr	r0, [pc, #104]	; (80007ec <MX_GPIO_Init+0xf8>)
 8000784:	f000 ff1b 	bl	80015be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2302      	movs	r3, #2
 8000798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	4619      	mov	r1, r3
 80007a0:	4811      	ldr	r0, [pc, #68]	; (80007e8 <MX_GPIO_Init+0xf4>)
 80007a2:	f000 fd71 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007a6:	2304      	movs	r3, #4
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <MX_GPIO_Init+0xf8>)
 80007ba:	f000 fd65 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80007be:	2318      	movs	r3, #24
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_GPIO_Init+0xf8>)
 80007d6:	f000 fd57 	bl	8001288 <HAL_GPIO_Init>

}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40011000 	.word	0x40011000
 80007ec:	40010800 	.word	0x40010800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <DelayMicro+0x3c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <DelayMicro+0x3c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <DelayMicro+0x40>)
 8000810:	fba2 2303 	umull	r2, r3, r2, r3
 8000814:	0ddb      	lsrs	r3, r3, #23
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	fb02 f303 	mul.w	r3, r2, r3
 800081c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800081e:	bf00      	nop
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	1e5a      	subs	r2, r3, #1
 8000824:	607a      	str	r2, [r7, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1fa      	bne.n	8000820 <DelayMicro+0x24>
}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	2000000c 	.word	0x2000000c
 800083c:	ffa71ee7 	.word	0xffa71ee7

08000840 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af02      	add	r7, sp, #8
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800084a:	2300      	movs	r3, #0
 800084c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800084e:	2200      	movs	r2, #0
 8000850:	2110      	movs	r1, #16
 8000852:	4813      	ldr	r0, [pc, #76]	; (80008a0 <NRF24_ReadReg+0x60>)
 8000854:	f000 feb3 	bl	80015be <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8000858:	f107 020f 	add.w	r2, r7, #15
 800085c:	1df9      	adds	r1, r7, #7
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2301      	movs	r3, #1
 8000866:	480f      	ldr	r0, [pc, #60]	; (80008a4 <NRF24_ReadReg+0x64>)
 8000868:	f002 f9f3 	bl	8002c52 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b07      	cmp	r3, #7
 8000870:	d00c      	beq.n	800088c <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 8000872:	23ff      	movs	r3, #255	; 0xff
 8000874:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8000876:	f107 020f 	add.w	r2, r7, #15
 800087a:	f107 010e 	add.w	r1, r7, #14
 800087e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2301      	movs	r3, #1
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <NRF24_ReadReg+0x64>)
 8000888:	f002 f9e3 	bl	8002c52 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 800088c:	2201      	movs	r2, #1
 800088e:	2110      	movs	r1, #16
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <NRF24_ReadReg+0x60>)
 8000892:	f000 fe94 	bl	80015be <HAL_GPIO_WritePin>
  return dt;
 8000896:	7bfb      	ldrb	r3, [r7, #15]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40010800 	.word	0x40010800
 80008a4:	200004bc 	.word	0x200004bc

080008a8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	460a      	mov	r2, r1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	4613      	mov	r3, r2
 80008b6:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 80008c2:	2200      	movs	r2, #0
 80008c4:	2110      	movs	r1, #16
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <NRF24_WriteReg+0x54>)
 80008c8:	f000 fe79 	bl	80015be <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80008cc:	1df9      	adds	r1, r7, #7
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	2201      	movs	r2, #1
 80008d4:	480a      	ldr	r0, [pc, #40]	; (8000900 <NRF24_WriteReg+0x58>)
 80008d6:	f001 ff6f 	bl	80027b8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 80008da:	1db9      	adds	r1, r7, #6
 80008dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e0:	2201      	movs	r2, #1
 80008e2:	4807      	ldr	r0, [pc, #28]	; (8000900 <NRF24_WriteReg+0x58>)
 80008e4:	f001 ff68 	bl	80027b8 <HAL_SPI_Transmit>
  CS_OFF;
 80008e8:	2201      	movs	r2, #1
 80008ea:	2110      	movs	r1, #16
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <NRF24_WriteReg+0x54>)
 80008ee:	f000 fe66 	bl	80015be <HAL_GPIO_WritePin>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40010800 	.word	0x40010800
 8000900:	200004bc 	.word	0x200004bc

08000904 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 800090a:	2350      	movs	r3, #80	; 0x50
 800090c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800090e:	2200      	movs	r2, #0
 8000910:	2110      	movs	r1, #16
 8000912:	480f      	ldr	r0, [pc, #60]	; (8000950 <NRF24_ToggleFeatures+0x4c>)
 8000914:	f000 fe53 	bl	80015be <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000918:	1d39      	adds	r1, r7, #4
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	2201      	movs	r2, #1
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <NRF24_ToggleFeatures+0x50>)
 8000922:	f001 ff49 	bl	80027b8 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff ff68 	bl	80007fc <DelayMicro>
  dt[0] = 0x73;
 800092c:	2373      	movs	r3, #115	; 0x73
 800092e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000930:	1d39      	adds	r1, r7, #4
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	2201      	movs	r2, #1
 8000938:	4806      	ldr	r0, [pc, #24]	; (8000954 <NRF24_ToggleFeatures+0x50>)
 800093a:	f001 ff3d 	bl	80027b8 <HAL_SPI_Transmit>
  CS_OFF;
 800093e:	2201      	movs	r2, #1
 8000940:	2110      	movs	r1, #16
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <NRF24_ToggleFeatures+0x4c>)
 8000944:	f000 fe3b 	bl	80015be <HAL_GPIO_WritePin>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40010800 	.word	0x40010800
 8000954:	200004bc 	.word	0x200004bc

08000958 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000968:	2200      	movs	r2, #0
 800096a:	2110      	movs	r1, #16
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <NRF24_Read_Buf+0x4c>)
 800096e:	f000 fe26 	bl	80015be <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000972:	1df9      	adds	r1, r7, #7
 8000974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000978:	2201      	movs	r2, #1
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <NRF24_Read_Buf+0x50>)
 800097c:	f001 ff1c 	bl	80027b8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 8000980:	79bb      	ldrb	r3, [r7, #6]
 8000982:	b29a      	uxth	r2, r3
 8000984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000988:	6839      	ldr	r1, [r7, #0]
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <NRF24_Read_Buf+0x50>)
 800098c:	f002 f850 	bl	8002a30 <HAL_SPI_Receive>
  CS_OFF;
 8000990:	2201      	movs	r2, #1
 8000992:	2110      	movs	r1, #16
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <NRF24_Read_Buf+0x4c>)
 8000996:	f000 fe12 	bl	80015be <HAL_GPIO_WritePin>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010800 	.word	0x40010800
 80009a8:	200004bc 	.word	0x200004bc

080009ac <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	4613      	mov	r3, r2
 80009ba:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f043 0320 	orr.w	r3, r3, #32
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 80009c6:	2200      	movs	r2, #0
 80009c8:	2110      	movs	r1, #16
 80009ca:	480f      	ldr	r0, [pc, #60]	; (8000a08 <NRF24_Write_Buf+0x5c>)
 80009cc:	f000 fdf7 	bl	80015be <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80009d0:	1df9      	adds	r1, r7, #7
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	2201      	movs	r2, #1
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <NRF24_Write_Buf+0x60>)
 80009da:	f001 feed 	bl	80027b8 <HAL_SPI_Transmit>
  DelayMicro(1);
 80009de:	2001      	movs	r0, #1
 80009e0:	f7ff ff0c 	bl	80007fc <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 80009e4:	79bb      	ldrb	r3, [r7, #6]
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <NRF24_Write_Buf+0x60>)
 80009f0:	f001 fee2 	bl	80027b8 <HAL_SPI_Transmit>
  CS_OFF;
 80009f4:	2201      	movs	r2, #1
 80009f6:	2110      	movs	r1, #16
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <NRF24_Write_Buf+0x5c>)
 80009fa:	f000 fde0 	bl	80015be <HAL_GPIO_WritePin>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40010800 	.word	0x40010800
 8000a0c:	200004bc 	.word	0x200004bc

08000a10 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000a16:	23e2      	movs	r3, #226	; 0xe2
 8000a18:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <NRF24_FlushRX+0x3c>)
 8000a20:	f000 fdcd 	bl	80015be <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000a24:	1d39      	adds	r1, r7, #4
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <NRF24_FlushRX+0x40>)
 8000a2e:	f001 fec3 	bl	80027b8 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000a32:	2001      	movs	r0, #1
 8000a34:	f7ff fee2 	bl	80007fc <DelayMicro>
  CS_OFF;
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	4803      	ldr	r0, [pc, #12]	; (8000a4c <NRF24_FlushRX+0x3c>)
 8000a3e:	f000 fdbe 	bl	80015be <HAL_GPIO_WritePin>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010800 	.word	0x40010800
 8000a50:	200004bc 	.word	0x200004bc

08000a54 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 8000a5a:	23e1      	movs	r3, #225	; 0xe1
 8000a5c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2110      	movs	r1, #16
 8000a62:	480b      	ldr	r0, [pc, #44]	; (8000a90 <NRF24_FlushTX+0x3c>)
 8000a64:	f000 fdab 	bl	80015be <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000a68:	1d39      	adds	r1, r7, #4
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <NRF24_FlushTX+0x40>)
 8000a72:	f001 fea1 	bl	80027b8 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff fec0 	bl	80007fc <DelayMicro>
  CS_OFF;
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2110      	movs	r1, #16
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <NRF24_FlushTX+0x3c>)
 8000a82:	f000 fd9c 	bl	80015be <HAL_GPIO_WritePin>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40010800 	.word	0x40010800
 8000a94:	200004bc 	.word	0x200004bc

08000a98 <NRF24L01_RX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);			// 0x0B  -> 0b 0000 1010
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fecc 	bl	8000840 <NRF24_ReadReg>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if((regval != 0x08) | (regval != 0x0B) )
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b08      	cmp	r3, #8
 8000ab0:	bf14      	ite	ne
 8000ab2:	2301      	movne	r3, #1
 8000ab4:	2300      	moveq	r3, #0
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b0b      	cmp	r3, #11
 8000abc:	bf14      	ite	ne
 8000abe:	2301      	movne	r3, #1
 8000ac0:	2300      	moveq	r3, #0
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <NRF24L01_RX_Mode+0x38>
  {
	  // Error
	  int fuc = 99;
 8000acc:	2363      	movs	r3, #99	; 0x63
 8000ace:	603b      	str	r3, [r7, #0]
  }

  regval |= (1<<PWR_UP) | (1<<PRIM_RX);    // Power up module. Write PWR_UP and PRIM_RX bits
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f043 0303 	orr.w	r3, r3, #3
 8000ad6:	71fb      	strb	r3, [r7, #7]

  // regval = 0x7B;
  NRF24_WriteReg(CONFIG,regval);
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	4619      	mov	r1, r3
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff fee3 	bl	80008a8 <NRF24_WriteReg>
  // Debug read CONFIG register   //////////////////////////////////////////////////
  NRF24_WriteReg(CONFIG, 0x33);     // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< IRQ WORK  ~ 130 us
 8000ae2:	2133      	movs	r1, #51	; 0x33
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fedf 	bl	80008a8 <NRF24_WriteReg>

//
//  regval = NRF24_ReadReg(RF_SETUP);
//  NRF24_WriteReg(RF_SETUP,0x00);     // set -16 dBm <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,
  ////////////////////////////////////////////////////////////////////////////////////
  CE_SET;
 8000aea:	2201      	movs	r2, #1
 8000aec:	2108      	movs	r1, #8
 8000aee:	4807      	ldr	r0, [pc, #28]	; (8000b0c <NRF24L01_RX_Mode+0x74>)
 8000af0:	f000 fd65 	bl	80015be <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 8000af4:	2096      	movs	r0, #150	; 0x96
 8000af6:	f7ff fe81 	bl	80007fc <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 8000afa:	f7ff ff89 	bl	8000a10 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000afe:	f7ff ffa9 	bl	8000a54 <NRF24_FlushTX>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40010800 	.word	0x40010800

08000b10 <NRF24L01_Receive>:
//----------------------------------------------------------------------------------------
// Function waite Low IRQ signal from NRF module
bool NRF24L01_Receive(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  uint8_t status=0x01;
 8000b16:	2301      	movs	r3, #1
 8000b18:	71fb      	strb	r3, [r7, #7]
  uint16_t dt_1=0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	80bb      	strh	r3, [r7, #4]
  uint16_t dt_2=0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	807b      	strh	r3, [r7, #2]
  while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}	// Waiting interrupt from IRQ
 8000b22:	bf00      	nop
 8000b24:	2104      	movs	r1, #4
 8000b26:	4818      	ldr	r0, [pc, #96]	; (8000b88 <NRF24L01_Receive+0x78>)
 8000b28:	f000 fd32 	bl	8001590 <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d0f8      	beq.n	8000b24 <NRF24L01_Receive+0x14>
  status = NRF24_ReadReg(STATUS_NRF);
 8000b32:	2007      	movs	r0, #7
 8000b34:	f7ff fe84 	bl	8000840 <NRF24_ReadReg>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]

  DelayMicro(10);
 8000b3c:	200a      	movs	r0, #10
 8000b3e:	f7ff fe5d 	bl	80007fc <DelayMicro>
  status = NRF24_ReadReg(STATUS_NRF);
 8000b42:	2007      	movs	r0, #7
 8000b44:	f7ff fe7c 	bl	8000840 <NRF24_ReadReg>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if(status & 0x40)		//	Флаг надходження нових даних в FIFO  (Check RX_DR flag)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d012      	beq.n	8000b7c <NRF24L01_Receive+0x6c>
   {
      NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 8000b56:	2205      	movs	r2, #5
 8000b58:	490c      	ldr	r1, [pc, #48]	; (8000b8c <NRF24L01_Receive+0x7c>)
 8000b5a:	2061      	movs	r0, #97	; 0x61
 8000b5c:	f7ff fefc 	bl	8000958 <NRF24_Read_Buf>
      dt_1 = *(int16_t*)RX_BUF;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <NRF24L01_Receive+0x7c>)
 8000b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b66:	80bb      	strh	r3, [r7, #4]
      //Clear_7219();
      //Number_7219(dt);
      dt_2 = *(int16_t*)(RX_BUF+2);
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <NRF24L01_Receive+0x80>)
 8000b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6e:	807b      	strh	r3, [r7, #2]
     // NumberL_7219(dt);
      NRF24_WriteReg(STATUS_NRF, 0x40);		// Turn off interrupt
 8000b70:	2140      	movs	r1, #64	; 0x40
 8000b72:	2007      	movs	r0, #7
 8000b74:	f7ff fe98 	bl	80008a8 <NRF24_WriteReg>
      return true;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e000      	b.n	8000b7e <NRF24L01_Receive+0x6e>
    }
  else
  {
	  return false;
 8000b7c:	2300      	movs	r3, #0
  }
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40010800 	.word	0x40010800
 8000b8c:	2000043c 	.word	0x2000043c
 8000b90:	2000043e 	.word	0x2000043e

08000b94 <NRF24_ini>:
//----------------------------------------------------------------------------------------
void NRF24_ini(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	CE_RESET;
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	4823      	ldr	r0, [pc, #140]	; (8000c2c <NRF24_ini+0x98>)
 8000b9e:	f000 fd0e 	bl	80015be <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8000ba2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ba6:	f7ff fe29 	bl	80007fc <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter) 0b 0000 1010
 8000baa:	210a      	movs	r1, #10
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff fe7b 	bl	80008a8 <NRF24_WriteReg>

	DelayMicro(5000);
 8000bb2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bb6:	f7ff fe21 	bl	80007fc <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x02); 			// Enable Pipe1
 8000bba:	2102      	movs	r1, #2
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f7ff fe73 	bl	80008a8 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x02); 		// Enable Pipe1
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f7ff fe6f 	bl	80008a8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8000bca:	2101      	movs	r1, #1
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f7ff fe6b 	bl	80008a8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8000bd2:	215f      	movs	r1, #95	; 0x5f
 8000bd4:	2004      	movs	r0, #4
 8000bd6:	f7ff fe67 	bl	80008a8 <NRF24_WriteReg>
	NRF24_ToggleFeatures();					// Send activated command
 8000bda:	f7ff fe93 	bl	8000904 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);				// Turn off all FEATURE register
 8000bde:	2100      	movs	r1, #0
 8000be0:	201d      	movs	r0, #29
 8000be2:	f7ff fe61 	bl	80008a8 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0); 				// Turn off all payload length data pipe
 8000be6:	2100      	movs	r1, #0
 8000be8:	201c      	movs	r0, #28
 8000bea:	f7ff fe5d 	bl	80008a8 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 8000bee:	2170      	movs	r1, #112	; 0x70
 8000bf0:	2007      	movs	r0, #7
 8000bf2:	f7ff fe59 	bl	80008a8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8000bf6:	214c      	movs	r1, #76	; 0x4c
 8000bf8:	2005      	movs	r0, #5
 8000bfa:	f7ff fe55 	bl	80008a8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x06); 					// 0x06 //TX_PWR:0dBm, Datarate:1Mbps
 8000bfe:	2106      	movs	r1, #6
 8000c00:	2006      	movs	r0, #6
 8000c02:	f7ff fe51 	bl	80008a8 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8000c06:	2203      	movs	r2, #3
 8000c08:	4909      	ldr	r1, [pc, #36]	; (8000c30 <NRF24_ini+0x9c>)
 8000c0a:	2010      	movs	r0, #16
 8000c0c:	f7ff fece 	bl	80009ac <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS, TX_ADR_WIDTH);
 8000c10:	2203      	movs	r2, #3
 8000c12:	4907      	ldr	r1, [pc, #28]	; (8000c30 <NRF24_ini+0x9c>)
 8000c14:	200b      	movs	r0, #11
 8000c16:	f7ff fec9 	bl	80009ac <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);				 //Number of bytes in RX
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	2012      	movs	r0, #18
 8000c1e:	f7ff fe43 	bl	80008a8 <NRF24_WriteReg>
	NRF24L01_RX_Mode();
 8000c22:	f7ff ff39 	bl	8000a98 <NRF24L01_RX_Mode>

	//read_config_registers();
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	20000008 	.word	0x20000008

08000c34 <read_config_registers>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
void read_config_registers(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000c38:	2064      	movs	r0, #100	; 0x64
 8000c3a:	f000 fa1d 	bl	8001078 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fdfe 	bl	8000840 <NRF24_ReadReg>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <read_config_registers+0x68>)
 8000c4a:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			// 0x01
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff fdf7 	bl	8000840 <NRF24_ReadReg>
 8000c52:	4603      	mov	r3, r0
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <read_config_registers+0x68>)
 8000c58:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f7ff fdf0 	bl	8000840 <NRF24_ReadReg>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <read_config_registers+0x68>)
 8000c66:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 8000c68:	2007      	movs	r0, #7
 8000c6a:	f7ff fde9 	bl	8000840 <NRF24_ReadReg>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <read_config_registers+0x68>)
 8000c74:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		// 0x06
 8000c76:	2006      	movs	r0, #6
 8000c78:	f7ff fde2 	bl	8000840 <NRF24_ReadReg>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <read_config_registers+0x68>)
 8000c82:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8000c84:	2203      	movs	r2, #3
 8000c86:	4906      	ldr	r1, [pc, #24]	; (8000ca0 <read_config_registers+0x6c>)
 8000c88:	2010      	movs	r0, #16
 8000c8a:	f7ff fe65 	bl	8000958 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 8000c8e:	2203      	movs	r2, #3
 8000c90:	4903      	ldr	r1, [pc, #12]	; (8000ca0 <read_config_registers+0x6c>)
 8000c92:	200a      	movs	r0, #10
 8000c94:	f7ff fe60 	bl	8000958 <NRF24_Read_Buf>
//	uint8_t RX_ADDR_dump[20] = {0};
//
//	NRF24_Read_Buf(TX_ADDR, TX_ADDR_dump,3);						// 0xb3,0xb4,0x01
//	NRF24_Read_Buf(RX_ADDR_P1,RX_ADDR_dump,3);					// 0xb3,0xb4,0x01

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000444 	.word	0x20000444
 8000ca0:	20000454 	.word	0x20000454

08000ca4 <nrf_communication_test>:
//----------------------------------------------------------------------------------------


void nrf_communication_test(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
//		DelayMicro(100);
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//
//	}

	NRF24_ini();
 8000caa:	f7ff ff73 	bl	8000b94 <NRF24_ini>
	read_config_registers();
 8000cae:	f7ff ffc1 	bl	8000c34 <read_config_registers>

	// 1. Print config registers
	char ctr[5] = {0};
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	773b      	strb	r3, [r7, #28]
	char ctr_buf[5] = {0};
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	753b      	strb	r3, [r7, #20]

	uint8_t x = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (int i = 0; i <=4; i++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
 8000ccc:	e037      	b.n	8000d3e <nrf_communication_test+0x9a>
	{
		itoa(config_array[i], ctr, 16);
 8000cce:	4a2e      	ldr	r2, [pc, #184]	; (8000d88 <nrf_communication_test+0xe4>)
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	2210      	movs	r2, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f002 fa8e 	bl	8003200 <itoa>
		strcat(ctr_buf, ctr);
 8000ce4:	f107 0218 	add.w	r2, r7, #24
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 fa90 	bl	8003214 <strcat>
		ssd1306_SetCursor(x, 16);
 8000cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cf8:	2110      	movs	r1, #16
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fc02 	bl	8000504 <ssd1306_SetCursor>
		ssd1306_WriteString(ctr_buf,  Font_7x10, White);
 8000d00:	4a22      	ldr	r2, [pc, #136]	; (8000d8c <nrf_communication_test+0xe8>)
 8000d02:	f107 0010 	add.w	r0, r7, #16
 8000d06:	2301      	movs	r3, #1
 8000d08:	ca06      	ldmia	r2, {r1, r2}
 8000d0a:	f7ff fbd5 	bl	80004b8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000d0e:	f7ff fac3 	bl	8000298 <ssd1306_UpdateScreen>
		x = x + 26;
 8000d12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d16:	331a      	adds	r3, #26
 8000d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		memset(ctr_buf, 0, sizeof(ctr_buf));
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	2205      	movs	r2, #5
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 fa6d 	bl	8003204 <memset>
		memset(ctr, 0, sizeof(ctr));
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	2205      	movs	r2, #5
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 fa66 	bl	8003204 <memset>
	for (int i = 0; i <=4; i++)
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
 8000d3e:	6a3b      	ldr	r3, [r7, #32]
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	ddc4      	ble.n	8000cce <nrf_communication_test+0x2a>
	}

	while(1)
	{
		NRF24L01_Receive();
 8000d44:	f7ff fee4 	bl	8000b10 <NRF24L01_Receive>

		// Print RX data on OLED
		ssd1306_SetCursor(0, 32);
 8000d48:	2120      	movs	r1, #32
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fbda 	bl	8000504 <ssd1306_SetCursor>
		char test_main[15] = {0};
 8000d50:	2300      	movs	r3, #0
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	f8c3 2007 	str.w	r2, [r3, #7]
		strcpy(test_main, "RX data: ");
 8000d60:	463b      	mov	r3, r7
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <nrf_communication_test+0xec>)
 8000d64:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d66:	c303      	stmia	r3!, {r0, r1}
 8000d68:	801a      	strh	r2, [r3, #0]
		strcat(test_main, RX_BUF);
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4909      	ldr	r1, [pc, #36]	; (8000d94 <nrf_communication_test+0xf0>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fa50 	bl	8003214 <strcat>
		ssd1306_WriteString(test_main,  Font_7x10, White);
 8000d74:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <nrf_communication_test+0xe8>)
 8000d76:	4638      	mov	r0, r7
 8000d78:	2301      	movs	r3, #1
 8000d7a:	ca06      	ldmia	r2, {r1, r2}
 8000d7c:	f7ff fb9c 	bl	80004b8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000d80:	f7ff fa8a 	bl	8000298 <ssd1306_UpdateScreen>
	{
 8000d84:	e7de      	b.n	8000d44 <nrf_communication_test+0xa0>
 8000d86:	bf00      	nop
 8000d88:	20000444 	.word	0x20000444
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	080032dc 	.word	0x080032dc
 8000d94:	2000043c 	.word	0x2000043c

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_MspInit+0x5c>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <HAL_MspInit+0x5c>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_MspInit+0x5c>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_MspInit+0x5c>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_MspInit+0x5c>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_MspInit+0x5c>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_MspInit+0x60>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_MspInit+0x60>)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010000 	.word	0x40010000

08000dfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <HAL_I2C_MspInit+0x70>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d123      	bne.n	8000e64 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_I2C_MspInit+0x74>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <HAL_I2C_MspInit+0x74>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_I2C_MspInit+0x74>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e34:	23c0      	movs	r3, #192	; 0xc0
 8000e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e38:	2312      	movs	r3, #18
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <HAL_I2C_MspInit+0x78>)
 8000e48:	f000 fa1e 	bl	8001288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_I2C_MspInit+0x74>)
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_I2C_MspInit+0x74>)
 8000e52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e56:	61d3      	str	r3, [r2, #28]
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_I2C_MspInit+0x74>)
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	3720      	adds	r7, #32
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40005400 	.word	0x40005400
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010c00 	.word	0x40010c00

08000e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <HAL_SPI_MspInit+0x88>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d12f      	bne.n	8000ef8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <HAL_SPI_MspInit+0x8c>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_SPI_MspInit+0x8c>)
 8000e9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_SPI_MspInit+0x8c>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_SPI_MspInit+0x8c>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <HAL_SPI_MspInit+0x8c>)
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_SPI_MspInit+0x8c>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ec8:	23a0      	movs	r3, #160	; 0xa0
 8000eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480b      	ldr	r0, [pc, #44]	; (8000f08 <HAL_SPI_MspInit+0x90>)
 8000edc:	f000 f9d4 	bl	8001288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ee0:	2340      	movs	r3, #64	; 0x40
 8000ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <HAL_SPI_MspInit+0x90>)
 8000ef4:	f000 f9c8 	bl	8001288 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40013000 	.word	0x40013000
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010800 	.word	0x40010800

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f52:	f000 f875 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
	...

08000f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	; (8000fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f8e:	f7ff ffe4 	bl	8000f5a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f002 f8f9 	bl	8003188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff facd 	bl	8000534 <main>
  bx lr
 8000f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000fa4:	08003aac 	.word	0x08003aac
  ldr r2, =_sbss
 8000fa8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000fac:	20000518 	.word	0x20000518

08000fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_2_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x28>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x28>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f92b 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fee2 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f935 	bl	800126e <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101c:	f000 f90b 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000014 	.word	0x20000014
 800103c:	20000010 	.word	0x20000010

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20000014 	.word	0x20000014
 8001060:	20000514 	.word	0x20000514

08001064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	20000514 	.word	0x20000514

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff fff0 	bl	8001064 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffe0 	bl	8001064 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000014 	.word	0x20000014

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001200:	f7ff ff90 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff49 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff5e 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff90 	bl	8001178 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5f 	bl	8001124 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffb0 	bl	80011dc <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b08b      	sub	sp, #44	; 0x2c
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e169      	b.n	8001570 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800129c:	2201      	movs	r2, #1
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 8158 	bne.w	800156a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4a9a      	ldr	r2, [pc, #616]	; (8001528 <HAL_GPIO_Init+0x2a0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d05e      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012c4:	4a98      	ldr	r2, [pc, #608]	; (8001528 <HAL_GPIO_Init+0x2a0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d875      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012ca:	4a98      	ldr	r2, [pc, #608]	; (800152c <HAL_GPIO_Init+0x2a4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d058      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012d0:	4a96      	ldr	r2, [pc, #600]	; (800152c <HAL_GPIO_Init+0x2a4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d86f      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012d6:	4a96      	ldr	r2, [pc, #600]	; (8001530 <HAL_GPIO_Init+0x2a8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d052      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012dc:	4a94      	ldr	r2, [pc, #592]	; (8001530 <HAL_GPIO_Init+0x2a8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d869      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012e2:	4a94      	ldr	r2, [pc, #592]	; (8001534 <HAL_GPIO_Init+0x2ac>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d04c      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012e8:	4a92      	ldr	r2, [pc, #584]	; (8001534 <HAL_GPIO_Init+0x2ac>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d863      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012ee:	4a92      	ldr	r2, [pc, #584]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d046      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012f4:	4a90      	ldr	r2, [pc, #576]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d85d      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012fa:	2b12      	cmp	r3, #18
 80012fc:	d82a      	bhi.n	8001354 <HAL_GPIO_Init+0xcc>
 80012fe:	2b12      	cmp	r3, #18
 8001300:	d859      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <HAL_GPIO_Init+0x80>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001383 	.word	0x08001383
 800130c:	0800135d 	.word	0x0800135d
 8001310:	0800136f 	.word	0x0800136f
 8001314:	080013b1 	.word	0x080013b1
 8001318:	080013b7 	.word	0x080013b7
 800131c:	080013b7 	.word	0x080013b7
 8001320:	080013b7 	.word	0x080013b7
 8001324:	080013b7 	.word	0x080013b7
 8001328:	080013b7 	.word	0x080013b7
 800132c:	080013b7 	.word	0x080013b7
 8001330:	080013b7 	.word	0x080013b7
 8001334:	080013b7 	.word	0x080013b7
 8001338:	080013b7 	.word	0x080013b7
 800133c:	080013b7 	.word	0x080013b7
 8001340:	080013b7 	.word	0x080013b7
 8001344:	080013b7 	.word	0x080013b7
 8001348:	080013b7 	.word	0x080013b7
 800134c:	08001365 	.word	0x08001365
 8001350:	08001379 	.word	0x08001379
 8001354:	4a79      	ldr	r2, [pc, #484]	; (800153c <HAL_GPIO_Init+0x2b4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800135a:	e02c      	b.n	80013b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	623b      	str	r3, [r7, #32]
          break;
 8001362:	e029      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	3304      	adds	r3, #4
 800136a:	623b      	str	r3, [r7, #32]
          break;
 800136c:	e024      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	3308      	adds	r3, #8
 8001374:	623b      	str	r3, [r7, #32]
          break;
 8001376:	e01f      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	330c      	adds	r3, #12
 800137e:	623b      	str	r3, [r7, #32]
          break;
 8001380:	e01a      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800138a:	2304      	movs	r3, #4
 800138c:	623b      	str	r3, [r7, #32]
          break;
 800138e:	e013      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d105      	bne.n	80013a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001398:	2308      	movs	r3, #8
 800139a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	611a      	str	r2, [r3, #16]
          break;
 80013a2:	e009      	b.n	80013b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a4:	2308      	movs	r3, #8
 80013a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	615a      	str	r2, [r3, #20]
          break;
 80013ae:	e003      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
          break;
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          break;
 80013b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2bff      	cmp	r3, #255	; 0xff
 80013bc:	d801      	bhi.n	80013c2 <HAL_GPIO_Init+0x13a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	e001      	b.n	80013c6 <HAL_GPIO_Init+0x13e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3304      	adds	r3, #4
 80013c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2bff      	cmp	r3, #255	; 0xff
 80013cc:	d802      	bhi.n	80013d4 <HAL_GPIO_Init+0x14c>
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	e002      	b.n	80013da <HAL_GPIO_Init+0x152>
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	3b08      	subs	r3, #8
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	210f      	movs	r1, #15
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	401a      	ands	r2, r3
 80013ec:	6a39      	ldr	r1, [r7, #32]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	431a      	orrs	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80b1 	beq.w	800156a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001408:	4b4d      	ldr	r3, [pc, #308]	; (8001540 <HAL_GPIO_Init+0x2b8>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a4c      	ldr	r2, [pc, #304]	; (8001540 <HAL_GPIO_Init+0x2b8>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b4a      	ldr	r3, [pc, #296]	; (8001540 <HAL_GPIO_Init+0x2b8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001420:	4a48      	ldr	r2, [pc, #288]	; (8001544 <HAL_GPIO_Init+0x2bc>)
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4013      	ands	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a40      	ldr	r2, [pc, #256]	; (8001548 <HAL_GPIO_Init+0x2c0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d013      	beq.n	8001474 <HAL_GPIO_Init+0x1ec>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3f      	ldr	r2, [pc, #252]	; (800154c <HAL_GPIO_Init+0x2c4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d00d      	beq.n	8001470 <HAL_GPIO_Init+0x1e8>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a3e      	ldr	r2, [pc, #248]	; (8001550 <HAL_GPIO_Init+0x2c8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d007      	beq.n	800146c <HAL_GPIO_Init+0x1e4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a3d      	ldr	r2, [pc, #244]	; (8001554 <HAL_GPIO_Init+0x2cc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_GPIO_Init+0x1e0>
 8001464:	2303      	movs	r3, #3
 8001466:	e006      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 8001468:	2304      	movs	r3, #4
 800146a:	e004      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 800146c:	2302      	movs	r3, #2
 800146e:	e002      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 8001474:	2300      	movs	r3, #0
 8001476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001478:	f002 0203 	and.w	r2, r2, #3
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	4093      	lsls	r3, r2
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001486:	492f      	ldr	r1, [pc, #188]	; (8001544 <HAL_GPIO_Init+0x2bc>)
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	492c      	ldr	r1, [pc, #176]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4928      	ldr	r1, [pc, #160]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	4922      	ldr	r1, [pc, #136]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	43db      	mvns	r3, r3
 80014de:	491e      	ldr	r1, [pc, #120]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	4918      	ldr	r1, [pc, #96]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	43db      	mvns	r3, r3
 8001506:	4914      	ldr	r1, [pc, #80]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 8001508:	4013      	ands	r3, r2
 800150a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d021      	beq.n	800155c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	490e      	ldr	r1, [pc, #56]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	60cb      	str	r3, [r1, #12]
 8001524:	e021      	b.n	800156a <HAL_GPIO_Init+0x2e2>
 8001526:	bf00      	nop
 8001528:	10320000 	.word	0x10320000
 800152c:	10310000 	.word	0x10310000
 8001530:	10220000 	.word	0x10220000
 8001534:	10210000 	.word	0x10210000
 8001538:	10120000 	.word	0x10120000
 800153c:	10110000 	.word	0x10110000
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000
 8001548:	40010800 	.word	0x40010800
 800154c:	40010c00 	.word	0x40010c00
 8001550:	40011000 	.word	0x40011000
 8001554:	40011400 	.word	0x40011400
 8001558:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_GPIO_Init+0x304>)
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	43db      	mvns	r3, r3
 8001564:	4909      	ldr	r1, [pc, #36]	; (800158c <HAL_GPIO_Init+0x304>)
 8001566:	4013      	ands	r3, r2
 8001568:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	3301      	adds	r3, #1
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	fa22 f303 	lsr.w	r3, r2, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	f47f ae8e 	bne.w	800129c <HAL_GPIO_Init+0x14>
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	372c      	adds	r7, #44	; 0x2c
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e001      	b.n	80015b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	807b      	strh	r3, [r7, #2]
 80015ca:	4613      	mov	r3, r2
 80015cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ce:	787b      	ldrb	r3, [r7, #1]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015da:	e003      	b.n	80015e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	041a      	lsls	r2, r3, #16
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	611a      	str	r2, [r3, #16]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e12b      	b.n	800185a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fbf0 	bl	8000dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2224      	movs	r2, #36	; 0x24
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001654:	f000 fffa 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a81      	ldr	r2, [pc, #516]	; (8001864 <HAL_I2C_Init+0x274>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d807      	bhi.n	8001674 <HAL_I2C_Init+0x84>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4a80      	ldr	r2, [pc, #512]	; (8001868 <HAL_I2C_Init+0x278>)
 8001668:	4293      	cmp	r3, r2
 800166a:	bf94      	ite	ls
 800166c:	2301      	movls	r3, #1
 800166e:	2300      	movhi	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	e006      	b.n	8001682 <HAL_I2C_Init+0x92>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4a7d      	ldr	r2, [pc, #500]	; (800186c <HAL_I2C_Init+0x27c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	bf94      	ite	ls
 800167c:	2301      	movls	r3, #1
 800167e:	2300      	movhi	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0e7      	b.n	800185a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4a78      	ldr	r2, [pc, #480]	; (8001870 <HAL_I2C_Init+0x280>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0c9b      	lsrs	r3, r3, #18
 8001694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a6a      	ldr	r2, [pc, #424]	; (8001864 <HAL_I2C_Init+0x274>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d802      	bhi.n	80016c4 <HAL_I2C_Init+0xd4>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	e009      	b.n	80016d8 <HAL_I2C_Init+0xe8>
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	4a69      	ldr	r2, [pc, #420]	; (8001874 <HAL_I2C_Init+0x284>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	3301      	adds	r3, #1
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	430b      	orrs	r3, r1
 80016de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	495c      	ldr	r1, [pc, #368]	; (8001864 <HAL_I2C_Init+0x274>)
 80016f4:	428b      	cmp	r3, r1
 80016f6:	d819      	bhi.n	800172c <HAL_I2C_Init+0x13c>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1e59      	subs	r1, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fbb1 f3f3 	udiv	r3, r1, r3
 8001706:	1c59      	adds	r1, r3, #1
 8001708:	f640 73fc 	movw	r3, #4092	; 0xffc
 800170c:	400b      	ands	r3, r1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00a      	beq.n	8001728 <HAL_I2C_Init+0x138>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1e59      	subs	r1, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001720:	3301      	adds	r3, #1
 8001722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001726:	e051      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 8001728:	2304      	movs	r3, #4
 800172a:	e04f      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d111      	bne.n	8001758 <HAL_I2C_Init+0x168>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	440b      	add	r3, r1
 8001742:	fbb0 f3f3 	udiv	r3, r0, r3
 8001746:	3301      	adds	r3, #1
 8001748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e012      	b.n	800177e <HAL_I2C_Init+0x18e>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e58      	subs	r0, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	0099      	lsls	r1, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	fbb0 f3f3 	udiv	r3, r0, r3
 800176e:	3301      	adds	r3, #1
 8001770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_I2C_Init+0x196>
 8001782:	2301      	movs	r3, #1
 8001784:	e022      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10e      	bne.n	80017ac <HAL_I2C_Init+0x1bc>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1e58      	subs	r0, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6859      	ldr	r1, [r3, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	440b      	add	r3, r1
 800179c:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	0099      	lsls	r1, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	6809      	ldr	r1, [r1, #0]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6911      	ldr	r1, [r2, #16]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68d2      	ldr	r2, [r2, #12]
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	430b      	orrs	r3, r1
 800180e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	000186a0 	.word	0x000186a0
 8001868:	001e847f 	.word	0x001e847f
 800186c:	003d08ff 	.word	0x003d08ff
 8001870:	431bde83 	.word	0x431bde83
 8001874:	10624dd3 	.word	0x10624dd3

08001878 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	4608      	mov	r0, r1
 8001882:	4611      	mov	r1, r2
 8001884:	461a      	mov	r2, r3
 8001886:	4603      	mov	r3, r0
 8001888:	817b      	strh	r3, [r7, #10]
 800188a:	460b      	mov	r3, r1
 800188c:	813b      	strh	r3, [r7, #8]
 800188e:	4613      	mov	r3, r2
 8001890:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001892:	f7ff fbe7 	bl	8001064 <HAL_GetTick>
 8001896:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b20      	cmp	r3, #32
 80018a2:	f040 80d9 	bne.w	8001a58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2319      	movs	r3, #25
 80018ac:	2201      	movs	r2, #1
 80018ae:	496d      	ldr	r1, [pc, #436]	; (8001a64 <HAL_I2C_Mem_Write+0x1ec>)
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 f971 	bl	8001b98 <I2C_WaitOnFlagUntilTimeout>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80018bc:	2302      	movs	r3, #2
 80018be:	e0cc      	b.n	8001a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_I2C_Mem_Write+0x56>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e0c5      	b.n	8001a5a <HAL_I2C_Mem_Write+0x1e2>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d007      	beq.n	80018f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2221      	movs	r2, #33	; 0x21
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2240      	movs	r2, #64	; 0x40
 8001910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a3a      	ldr	r2, [r7, #32]
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_I2C_Mem_Write+0x1f0>)
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001936:	88f8      	ldrh	r0, [r7, #6]
 8001938:	893a      	ldrh	r2, [r7, #8]
 800193a:	8979      	ldrh	r1, [r7, #10]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	4603      	mov	r3, r0
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f890 	bl	8001a6c <I2C_RequestMemoryWrite>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d052      	beq.n	80019f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e081      	b.n	8001a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 f9f2 	bl	8001d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00d      	beq.n	8001982 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	2b04      	cmp	r3, #4
 800196c:	d107      	bne.n	800197e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800197c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e06b      	b.n	8001a5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	3b01      	subs	r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d11b      	bne.n	80019f8 <HAL_I2C_Mem_Write+0x180>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d017      	beq.n	80019f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	781a      	ldrb	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1aa      	bne.n	8001956 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 f9de 	bl	8001dc6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00d      	beq.n	8001a2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d107      	bne.n	8001a28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e016      	b.n	8001a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	e000      	b.n	8001a5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a58:	2302      	movs	r3, #2
  }
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	00100002 	.word	0x00100002
 8001a68:	ffff0000 	.word	0xffff0000

08001a6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	4608      	mov	r0, r1
 8001a76:	4611      	mov	r1, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	817b      	strh	r3, [r7, #10]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	813b      	strh	r3, [r7, #8]
 8001a82:	4613      	mov	r3, r2
 8001a84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f878 	bl	8001b98 <I2C_WaitOnFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00d      	beq.n	8001aca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001abc:	d103      	bne.n	8001ac6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e05f      	b.n	8001b8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001aca:	897b      	ldrh	r3, [r7, #10]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ad8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	6a3a      	ldr	r2, [r7, #32]
 8001ade:	492d      	ldr	r1, [pc, #180]	; (8001b94 <I2C_RequestMemoryWrite+0x128>)
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 f8b0 	bl	8001c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e04c      	b.n	8001b8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b08:	6a39      	ldr	r1, [r7, #32]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f91a 	bl	8001d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00d      	beq.n	8001b32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d107      	bne.n	8001b2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e02b      	b.n	8001b8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b38:	893b      	ldrh	r3, [r7, #8]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	e021      	b.n	8001b88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b44:	893b      	ldrh	r3, [r7, #8]
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	6a39      	ldr	r1, [r7, #32]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f8f4 	bl	8001d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00d      	beq.n	8001b7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d107      	bne.n	8001b7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e005      	b.n	8001b8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b7e:	893b      	ldrh	r3, [r7, #8]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	00010002 	.word	0x00010002

08001b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba8:	e025      	b.n	8001bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb0:	d021      	beq.n	8001bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb2:	f7ff fa57 	bl	8001064 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d302      	bcc.n	8001bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d116      	bne.n	8001bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f043 0220 	orr.w	r2, r3, #32
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e023      	b.n	8001c3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d10d      	bne.n	8001c1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	bf0c      	ite	eq
 8001c12:	2301      	moveq	r3, #1
 8001c14:	2300      	movne	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	e00c      	b.n	8001c36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4013      	ands	r3, r2
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	2300      	movne	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d0b6      	beq.n	8001baa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c54:	e051      	b.n	8001cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c64:	d123      	bne.n	8001cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f043 0204 	orr.w	r2, r3, #4
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e046      	b.n	8001d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cb4:	d021      	beq.n	8001cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb6:	f7ff f9d5 	bl	8001064 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d302      	bcc.n	8001ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d116      	bne.n	8001cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f043 0220 	orr.w	r2, r3, #32
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e020      	b.n	8001d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	0c1b      	lsrs	r3, r3, #16
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d10c      	bne.n	8001d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bf14      	ite	ne
 8001d16:	2301      	movne	r3, #1
 8001d18:	2300      	moveq	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	e00b      	b.n	8001d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	43da      	mvns	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bf14      	ite	ne
 8001d30:	2301      	movne	r3, #1
 8001d32:	2300      	moveq	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d18d      	bne.n	8001c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d50:	e02d      	b.n	8001dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f878 	bl	8001e48 <I2C_IsAcknowledgeFailed>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e02d      	b.n	8001dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d68:	d021      	beq.n	8001dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6a:	f7ff f97b 	bl	8001064 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d302      	bcc.n	8001d80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d116      	bne.n	8001dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f043 0220 	orr.w	r2, r3, #32
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e007      	b.n	8001dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db8:	2b80      	cmp	r3, #128	; 0x80
 8001dba:	d1ca      	bne.n	8001d52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dd2:	e02d      	b.n	8001e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f837 	bl	8001e48 <I2C_IsAcknowledgeFailed>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e02d      	b.n	8001e40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dea:	d021      	beq.n	8001e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dec:	f7ff f93a 	bl	8001064 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d302      	bcc.n	8001e02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d116      	bne.n	8001e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e007      	b.n	8001e40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d1ca      	bne.n	8001dd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5e:	d11b      	bne.n	8001e98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f043 0204 	orr.w	r2, r3, #4
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e26c      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8087 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec4:	4b92      	ldr	r3, [pc, #584]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d00c      	beq.n	8001eea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ed0:	4b8f      	ldr	r3, [pc, #572]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d112      	bne.n	8001f02 <HAL_RCC_OscConfig+0x5e>
 8001edc:	4b8c      	ldr	r3, [pc, #560]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee8:	d10b      	bne.n	8001f02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eea:	4b89      	ldr	r3, [pc, #548]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d06c      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x12c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d168      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e246      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x76>
 8001f0c:	4b80      	ldr	r3, [pc, #512]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a7f      	ldr	r2, [pc, #508]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	e02e      	b.n	8001f78 <HAL_RCC_OscConfig+0xd4>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x98>
 8001f22:	4b7b      	ldr	r3, [pc, #492]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a7a      	ldr	r2, [pc, #488]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b78      	ldr	r3, [pc, #480]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a77      	ldr	r2, [pc, #476]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e01d      	b.n	8001f78 <HAL_RCC_OscConfig+0xd4>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0xbc>
 8001f46:	4b72      	ldr	r3, [pc, #456]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a71      	ldr	r2, [pc, #452]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b6f      	ldr	r3, [pc, #444]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a6e      	ldr	r2, [pc, #440]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0xd4>
 8001f60:	4b6b      	ldr	r3, [pc, #428]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a6a      	ldr	r2, [pc, #424]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	4b68      	ldr	r3, [pc, #416]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a67      	ldr	r2, [pc, #412]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d013      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff f870 	bl	8001064 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff f86c 	bl	8001064 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1fa      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	4b5d      	ldr	r3, [pc, #372]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0xe4>
 8001fa6:	e014      	b.n	8001fd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff f85c 	bl	8001064 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f858 	bl	8001064 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e1e6      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	4b53      	ldr	r3, [pc, #332]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x10c>
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d063      	beq.n	80020a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fde:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00b      	beq.n	8002002 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fea:	4b49      	ldr	r3, [pc, #292]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d11c      	bne.n	8002030 <HAL_RCC_OscConfig+0x18c>
 8001ff6:	4b46      	ldr	r3, [pc, #280]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d116      	bne.n	8002030 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	4b43      	ldr	r3, [pc, #268]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_RCC_OscConfig+0x176>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e1ba      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201a:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4939      	ldr	r1, [pc, #228]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202e:	e03a      	b.n	80020a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002038:	4b36      	ldr	r3, [pc, #216]	; (8002114 <HAL_RCC_OscConfig+0x270>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff f811 	bl	8001064 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002046:	f7ff f80d 	bl	8001064 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e19b      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4927      	ldr	r1, [pc, #156]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]
 8002078:	e015      	b.n	80020a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <HAL_RCC_OscConfig+0x270>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7fe fff0 	bl	8001064 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002088:	f7fe ffec 	bl	8001064 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e17a      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d03a      	beq.n	8002128 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d019      	beq.n	80020ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <HAL_RCC_OscConfig+0x274>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c0:	f7fe ffd0 	bl	8001064 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c8:	f7fe ffcc 	bl	8001064 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e15a      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f000 fac4 	bl	8002674 <RCC_Delay>
 80020ec:	e01c      	b.n	8002128 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_RCC_OscConfig+0x274>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7fe ffb6 	bl	8001064 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fa:	e00f      	b.n	800211c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fc:	f7fe ffb2 	bl	8001064 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d908      	bls.n	800211c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e140      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	42420000 	.word	0x42420000
 8002118:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211c:	4b9e      	ldr	r3, [pc, #632]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1e9      	bne.n	80020fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80a6 	beq.w	8002282 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b97      	ldr	r3, [pc, #604]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10d      	bne.n	8002162 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	4b94      	ldr	r3, [pc, #592]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4a93      	ldr	r2, [pc, #588]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002150:	61d3      	str	r3, [r2, #28]
 8002152:	4b91      	ldr	r3, [pc, #580]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215e:	2301      	movs	r3, #1
 8002160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002162:	4b8e      	ldr	r3, [pc, #568]	; (800239c <HAL_RCC_OscConfig+0x4f8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d118      	bne.n	80021a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216e:	4b8b      	ldr	r3, [pc, #556]	; (800239c <HAL_RCC_OscConfig+0x4f8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a8a      	ldr	r2, [pc, #552]	; (800239c <HAL_RCC_OscConfig+0x4f8>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217a:	f7fe ff73 	bl	8001064 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002182:	f7fe ff6f 	bl	8001064 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b64      	cmp	r3, #100	; 0x64
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e0fd      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	4b81      	ldr	r3, [pc, #516]	; (800239c <HAL_RCC_OscConfig+0x4f8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x312>
 80021a8:	4b7b      	ldr	r3, [pc, #492]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4a7a      	ldr	r2, [pc, #488]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6213      	str	r3, [r2, #32]
 80021b4:	e02d      	b.n	8002212 <HAL_RCC_OscConfig+0x36e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x334>
 80021be:	4b76      	ldr	r3, [pc, #472]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4a75      	ldr	r2, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6213      	str	r3, [r2, #32]
 80021ca:	4b73      	ldr	r3, [pc, #460]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a72      	ldr	r2, [pc, #456]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	e01c      	b.n	8002212 <HAL_RCC_OscConfig+0x36e>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d10c      	bne.n	80021fa <HAL_RCC_OscConfig+0x356>
 80021e0:	4b6d      	ldr	r3, [pc, #436]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4a6c      	ldr	r2, [pc, #432]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6213      	str	r3, [r2, #32]
 80021ec:	4b6a      	ldr	r3, [pc, #424]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4a69      	ldr	r2, [pc, #420]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	e00b      	b.n	8002212 <HAL_RCC_OscConfig+0x36e>
 80021fa:	4b67      	ldr	r3, [pc, #412]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4a66      	ldr	r2, [pc, #408]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6213      	str	r3, [r2, #32]
 8002206:	4b64      	ldr	r3, [pc, #400]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a63      	ldr	r2, [pc, #396]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d015      	beq.n	8002246 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7fe ff23 	bl	8001064 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe ff1f 	bl	8001064 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0ab      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	4b57      	ldr	r3, [pc, #348]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ee      	beq.n	8002222 <HAL_RCC_OscConfig+0x37e>
 8002244:	e014      	b.n	8002270 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7fe ff0d 	bl	8001064 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7fe ff09 	bl	8001064 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e095      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ee      	bne.n	800224e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4b48      	ldr	r3, [pc, #288]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a47      	ldr	r2, [pc, #284]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 800227c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002280:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8081 	beq.w	800238e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800228c:	4b42      	ldr	r3, [pc, #264]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b08      	cmp	r3, #8
 8002296:	d061      	beq.n	800235c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d146      	bne.n	800232e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a0:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_RCC_OscConfig+0x4fc>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7fe fedd 	bl	8001064 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ae:	f7fe fed9 	bl	8001064 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e067      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c0:	4b35      	ldr	r3, [pc, #212]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d4:	d108      	bne.n	80022e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	492d      	ldr	r1, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a19      	ldr	r1, [r3, #32]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	430b      	orrs	r3, r1
 80022fa:	4927      	ldr	r1, [pc, #156]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002300:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <HAL_RCC_OscConfig+0x4fc>)
 8002302:	2201      	movs	r2, #1
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7fe fead 	bl	8001064 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230e:	f7fe fea9 	bl	8001064 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e037      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x46a>
 800232c:	e02f      	b.n	800238e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_RCC_OscConfig+0x4fc>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe fe96 	bl	8001064 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe fe92 	bl	8001064 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e020      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x498>
 800235a:	e018      	b.n	800238e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e013      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_OscConfig+0x4f4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	429a      	cmp	r2, r3
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	40007000 	.word	0x40007000
 80023a0:	42420060 	.word	0x42420060

080023a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0d0      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b8:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d910      	bls.n	80023e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b67      	ldr	r3, [pc, #412]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 0207 	bic.w	r2, r3, #7
 80023ce:	4965      	ldr	r1, [pc, #404]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b63      	ldr	r3, [pc, #396]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0b8      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002400:	4b59      	ldr	r3, [pc, #356]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4a58      	ldr	r2, [pc, #352]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800240a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a52      	ldr	r2, [pc, #328]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002422:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002424:	4b50      	ldr	r3, [pc, #320]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	494d      	ldr	r1, [pc, #308]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d040      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d115      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e07f      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e073      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06b      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002482:	4b39      	ldr	r3, [pc, #228]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f023 0203 	bic.w	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4936      	ldr	r1, [pc, #216]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002494:	f7fe fde6 	bl	8001064 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249c:	f7fe fde2 	bl	8001064 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e053      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 020c 	and.w	r2, r3, #12
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d1eb      	bne.n	800249c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d210      	bcs.n	80024f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b24      	ldr	r3, [pc, #144]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 0207 	bic.w	r2, r3, #7
 80024da:	4922      	ldr	r1, [pc, #136]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e032      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4916      	ldr	r1, [pc, #88]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	490e      	ldr	r1, [pc, #56]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002532:	f000 f821 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002536:	4602      	mov	r2, r0
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	490a      	ldr	r1, [pc, #40]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	5ccb      	ldrb	r3, [r1, r3]
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1cc>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1d0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fd44 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40022000 	.word	0x40022000
 8002568:	40021000 	.word	0x40021000
 800256c:	08003a64 	.word	0x08003a64
 8002570:	2000000c 	.word	0x2000000c
 8002574:	20000010 	.word	0x20000010

08002578 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	b490      	push	{r4, r7}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002580:	1d3c      	adds	r4, r7, #4
 8002582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002588:	f240 2301 	movw	r3, #513	; 0x201
 800258c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x40>
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d003      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x46>
 80025b6:	e02d      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ba:	623b      	str	r3, [r7, #32]
      break;
 80025bc:	e02d      	b.n	800261a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	0c9b      	lsrs	r3, r3, #18
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ca:	4413      	add	r3, r2
 80025cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	0c5b      	lsrs	r3, r3, #17
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ea:	4413      	add	r3, r2
 80025ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f6:	fb02 f203 	mul.w	r2, r2, r3
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
 8002602:	e004      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	623b      	str	r3, [r7, #32]
      break;
 8002612:	e002      	b.n	800261a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002616:	623b      	str	r3, [r7, #32]
      break;
 8002618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800261a:	6a3b      	ldr	r3, [r7, #32]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3728      	adds	r7, #40	; 0x28
 8002620:	46bd      	mov	sp, r7
 8002622:	bc90      	pop	{r4, r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	080032e8 	.word	0x080032e8
 800262c:	40021000 	.word	0x40021000
 8002630:	007a1200 	.word	0x007a1200
 8002634:	003d0900 	.word	0x003d0900

08002638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800263c:	4b02      	ldr	r3, [pc, #8]	; (8002648 <HAL_RCC_GetHCLKFreq+0x10>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	2000000c 	.word	0x2000000c

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002650:	f7ff fff2 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4903      	ldr	r1, [pc, #12]	; (8002670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	08003a74 	.word	0x08003a74

08002674 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <RCC_Delay+0x34>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <RCC_Delay+0x38>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0a5b      	lsrs	r3, r3, #9
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002690:	bf00      	nop
  }
  while (Delay --);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	60fa      	str	r2, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f9      	bne.n	8002690 <RCC_Delay+0x1c>
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	2000000c 	.word	0x2000000c
 80026ac:	10624dd3 	.word	0x10624dd3

080026b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e076      	b.n	80027b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d108      	bne.n	80026dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026d2:	d009      	beq.n	80026e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
 80026da:	e005      	b.n	80026e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe fbb8 	bl	8000e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276c:	ea42 0103 	orr.w	r1, r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	0c1a      	lsrs	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f002 0204 	and.w	r2, r2, #4
 800278e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69da      	ldr	r2, [r3, #28]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_SPI_Transmit+0x22>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e126      	b.n	8002a28 <HAL_SPI_Transmit+0x270>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027e2:	f7fe fc3f 	bl	8001064 <HAL_GetTick>
 80027e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d002      	beq.n	80027fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
 80027fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027fc:	e10b      	b.n	8002a16 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_SPI_Transmit+0x52>
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800280e:	e102      	b.n	8002a16 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2203      	movs	r2, #3
 8002814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002856:	d10f      	bne.n	8002878 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002866:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002876:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	d007      	beq.n	8002896 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800289e:	d14b      	bne.n	8002938 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_SPI_Transmit+0xf6>
 80028a8:	8afb      	ldrh	r3, [r7, #22]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d13e      	bne.n	800292c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	881a      	ldrh	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	1c9a      	adds	r2, r3, #2
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028d2:	e02b      	b.n	800292c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d112      	bne.n	8002908 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	881a      	ldrh	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	1c9a      	adds	r2, r3, #2
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	86da      	strh	r2, [r3, #54]	; 0x36
 8002906:	e011      	b.n	800292c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002908:	f7fe fbac 	bl	8001064 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d803      	bhi.n	8002920 <HAL_SPI_Transmit+0x168>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800291e:	d102      	bne.n	8002926 <HAL_SPI_Transmit+0x16e>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	77fb      	strb	r3, [r7, #31]
          goto error;
 800292a:	e074      	b.n	8002a16 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ce      	bne.n	80028d4 <HAL_SPI_Transmit+0x11c>
 8002936:	e04c      	b.n	80029d2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_SPI_Transmit+0x18e>
 8002940:	8afb      	ldrh	r3, [r7, #22]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d140      	bne.n	80029c8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800296c:	e02c      	b.n	80029c8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b02      	cmp	r3, #2
 800297a:	d113      	bne.n	80029a4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	330c      	adds	r3, #12
 8002986:	7812      	ldrb	r2, [r2, #0]
 8002988:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80029a2:	e011      	b.n	80029c8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029a4:	f7fe fb5e 	bl	8001064 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d803      	bhi.n	80029bc <HAL_SPI_Transmit+0x204>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ba:	d102      	bne.n	80029c2 <HAL_SPI_Transmit+0x20a>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d102      	bne.n	80029c8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029c6:	e026      	b.n	8002a16 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1cd      	bne.n	800296e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	6839      	ldr	r1, [r7, #0]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fbb8 	bl	800314c <SPI_EndRxTxTransaction>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	77fb      	strb	r3, [r7, #31]
 8002a12:	e000      	b.n	8002a16 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a4c:	d112      	bne.n	8002a74 <HAL_SPI_Receive+0x44>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10e      	bne.n	8002a74 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a5e:	88fa      	ldrh	r2, [r7, #6]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f8f1 	bl	8002c52 <HAL_SPI_TransmitReceive>
 8002a70:	4603      	mov	r3, r0
 8002a72:	e0ea      	b.n	8002c4a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_SPI_Receive+0x52>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e0e3      	b.n	8002c4a <HAL_SPI_Receive+0x21a>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a8a:	f7fe faeb 	bl	8001064 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d002      	beq.n	8002aa2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002aa0:	e0ca      	b.n	8002c38 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_SPI_Receive+0x7e>
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ab2:	e0c1      	b.n	8002c38 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	88fa      	ldrh	r2, [r7, #6]
 8002acc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	88fa      	ldrh	r2, [r7, #6]
 8002ad2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002afa:	d10f      	bne.n	8002b1c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d007      	beq.n	8002b3a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d162      	bne.n	8002c08 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b42:	e02e      	b.n	8002ba2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d115      	bne.n	8002b7e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f103 020c 	add.w	r2, r3, #12
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	7812      	ldrb	r2, [r2, #0]
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b7c:	e011      	b.n	8002ba2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b7e:	f7fe fa71 	bl	8001064 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d803      	bhi.n	8002b96 <HAL_SPI_Receive+0x166>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b94:	d102      	bne.n	8002b9c <HAL_SPI_Receive+0x16c>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ba0:	e04a      	b.n	8002c38 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1cb      	bne.n	8002b44 <HAL_SPI_Receive+0x114>
 8002bac:	e031      	b.n	8002c12 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d113      	bne.n	8002be4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	1c9a      	adds	r2, r3, #2
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002be2:	e011      	b.n	8002c08 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be4:	f7fe fa3e 	bl	8001064 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d803      	bhi.n	8002bfc <HAL_SPI_Receive+0x1cc>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfa:	d102      	bne.n	8002c02 <HAL_SPI_Receive+0x1d2>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c06:	e017      	b.n	8002c38 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1cd      	bne.n	8002bae <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	6839      	ldr	r1, [r7, #0]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fa46 	bl	80030a8 <SPI_EndRxTransaction>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
 8002c34:	e000      	b.n	8002c38 <HAL_SPI_Receive+0x208>
  }

error :
 8002c36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b08c      	sub	sp, #48	; 0x30
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c60:	2301      	movs	r3, #1
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_SPI_TransmitReceive+0x26>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e18a      	b.n	8002f8e <HAL_SPI_TransmitReceive+0x33c>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c80:	f7fe f9f0 	bl	8001064 <HAL_GetTick>
 8002c84:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d00f      	beq.n	8002cc2 <HAL_SPI_TransmitReceive+0x70>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ca8:	d107      	bne.n	8002cba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d103      	bne.n	8002cba <HAL_SPI_TransmitReceive+0x68>
 8002cb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d003      	beq.n	8002cc2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cc0:	e15b      	b.n	8002f7a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_SPI_TransmitReceive+0x82>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_SPI_TransmitReceive+0x82>
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cda:	e14e      	b.n	8002f7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d003      	beq.n	8002cf0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2205      	movs	r2, #5
 8002cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	887a      	ldrh	r2, [r7, #2]
 8002d06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	887a      	ldrh	r2, [r7, #2]
 8002d12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d007      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d4c:	d178      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x10a>
 8002d56:	8b7b      	ldrh	r3, [r7, #26]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d166      	bne.n	8002e2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	881a      	ldrh	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	1c9a      	adds	r2, r3, #2
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d80:	e053      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_SPI_TransmitReceive+0x176>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d016      	beq.n	8002dc8 <HAL_SPI_TransmitReceive+0x176>
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d113      	bne.n	8002dc8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	881a      	ldrh	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	1c9a      	adds	r2, r3, #2
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d119      	bne.n	8002e0a <HAL_SPI_TransmitReceive+0x1b8>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d014      	beq.n	8002e0a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	b292      	uxth	r2, r2
 8002dec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	1c9a      	adds	r2, r3, #2
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e06:	2301      	movs	r3, #1
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e0a:	f7fe f92b 	bl	8001064 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d807      	bhi.n	8002e2a <HAL_SPI_TransmitReceive+0x1d8>
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e20:	d003      	beq.n	8002e2a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e28:	e0a7      	b.n	8002f7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1a6      	bne.n	8002d82 <HAL_SPI_TransmitReceive+0x130>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1a1      	bne.n	8002d82 <HAL_SPI_TransmitReceive+0x130>
 8002e3e:	e07c      	b.n	8002f3a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_SPI_TransmitReceive+0x1fc>
 8002e48:	8b7b      	ldrh	r3, [r7, #26]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d16b      	bne.n	8002f26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	7812      	ldrb	r2, [r2, #0]
 8002e5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e74:	e057      	b.n	8002f26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d11c      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0x26c>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d017      	beq.n	8002ebe <HAL_SPI_TransmitReceive+0x26c>
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d114      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	7812      	ldrb	r2, [r2, #0]
 8002ea0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d119      	bne.n	8002f00 <HAL_SPI_TransmitReceive+0x2ae>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d014      	beq.n	8002f00 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002efc:	2301      	movs	r3, #1
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f00:	f7fe f8b0 	bl	8001064 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d803      	bhi.n	8002f18 <HAL_SPI_TransmitReceive+0x2c6>
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f16:	d102      	bne.n	8002f1e <HAL_SPI_TransmitReceive+0x2cc>
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f24:	e029      	b.n	8002f7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1a2      	bne.n	8002e76 <HAL_SPI_TransmitReceive+0x224>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d19d      	bne.n	8002e76 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f904 	bl	800314c <SPI_EndRxTxTransaction>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d006      	beq.n	8002f58 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f56:	e010      	b.n	8002f7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	e000      	b.n	8002f7a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3730      	adds	r7, #48	; 0x30
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fa8:	f7fe f85c 	bl	8001064 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fb8:	f7fe f854 	bl	8001064 <HAL_GetTick>
 8002fbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fbe:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	015b      	lsls	r3, r3, #5
 8002fc4:	0d1b      	lsrs	r3, r3, #20
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fce:	e054      	b.n	800307a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd6:	d050      	beq.n	800307a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fd8:	f7fe f844 	bl	8001064 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d902      	bls.n	8002fee <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d13d      	bne.n	800306a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ffc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003006:	d111      	bne.n	800302c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003010:	d004      	beq.n	800301c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301a:	d107      	bne.n	800302c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800302a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003034:	d10f      	bne.n	8003056 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003054:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e017      	b.n	800309a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	3b01      	subs	r3, #1
 8003078:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4013      	ands	r3, r2
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	bf0c      	ite	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	2300      	movne	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	429a      	cmp	r2, r3
 8003096:	d19b      	bne.n	8002fd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3720      	adds	r7, #32
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	2000000c 	.word	0x2000000c

080030a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030bc:	d111      	bne.n	80030e2 <SPI_EndRxTransaction+0x3a>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c6:	d004      	beq.n	80030d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d0:	d107      	bne.n	80030e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ea:	d117      	bne.n	800311c <SPI_EndRxTransaction+0x74>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f4:	d112      	bne.n	800311c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2101      	movs	r1, #1
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f7ff ff49 	bl	8002f98 <SPI_WaitFlagStateUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01a      	beq.n	8003142 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e013      	b.n	8003144 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2200      	movs	r2, #0
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff ff36 	bl	8002f98 <SPI_WaitFlagStateUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003136:	f043 0220 	orr.w	r2, r3, #32
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e000      	b.n	8003144 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff ff18 	bl	8002f98 <SPI_WaitFlagStateUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e000      	b.n	8003180 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <__libc_init_array>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	2600      	movs	r6, #0
 800318c:	4d0c      	ldr	r5, [pc, #48]	; (80031c0 <__libc_init_array+0x38>)
 800318e:	4c0d      	ldr	r4, [pc, #52]	; (80031c4 <__libc_init_array+0x3c>)
 8003190:	1b64      	subs	r4, r4, r5
 8003192:	10a4      	asrs	r4, r4, #2
 8003194:	42a6      	cmp	r6, r4
 8003196:	d109      	bne.n	80031ac <__libc_init_array+0x24>
 8003198:	f000 f88e 	bl	80032b8 <_init>
 800319c:	2600      	movs	r6, #0
 800319e:	4d0a      	ldr	r5, [pc, #40]	; (80031c8 <__libc_init_array+0x40>)
 80031a0:	4c0a      	ldr	r4, [pc, #40]	; (80031cc <__libc_init_array+0x44>)
 80031a2:	1b64      	subs	r4, r4, r5
 80031a4:	10a4      	asrs	r4, r4, #2
 80031a6:	42a6      	cmp	r6, r4
 80031a8:	d105      	bne.n	80031b6 <__libc_init_array+0x2e>
 80031aa:	bd70      	pop	{r4, r5, r6, pc}
 80031ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b0:	4798      	blx	r3
 80031b2:	3601      	adds	r6, #1
 80031b4:	e7ee      	b.n	8003194 <__libc_init_array+0xc>
 80031b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ba:	4798      	blx	r3
 80031bc:	3601      	adds	r6, #1
 80031be:	e7f2      	b.n	80031a6 <__libc_init_array+0x1e>
 80031c0:	08003aa4 	.word	0x08003aa4
 80031c4:	08003aa4 	.word	0x08003aa4
 80031c8:	08003aa4 	.word	0x08003aa4
 80031cc:	08003aa8 	.word	0x08003aa8

080031d0 <__itoa>:
 80031d0:	1e93      	subs	r3, r2, #2
 80031d2:	2b22      	cmp	r3, #34	; 0x22
 80031d4:	b510      	push	{r4, lr}
 80031d6:	460c      	mov	r4, r1
 80031d8:	d904      	bls.n	80031e4 <__itoa+0x14>
 80031da:	2300      	movs	r3, #0
 80031dc:	461c      	mov	r4, r3
 80031de:	700b      	strb	r3, [r1, #0]
 80031e0:	4620      	mov	r0, r4
 80031e2:	bd10      	pop	{r4, pc}
 80031e4:	2a0a      	cmp	r2, #10
 80031e6:	d109      	bne.n	80031fc <__itoa+0x2c>
 80031e8:	2800      	cmp	r0, #0
 80031ea:	da07      	bge.n	80031fc <__itoa+0x2c>
 80031ec:	232d      	movs	r3, #45	; 0x2d
 80031ee:	700b      	strb	r3, [r1, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	4240      	negs	r0, r0
 80031f4:	4421      	add	r1, r4
 80031f6:	f000 f81d 	bl	8003234 <__utoa>
 80031fa:	e7f1      	b.n	80031e0 <__itoa+0x10>
 80031fc:	2100      	movs	r1, #0
 80031fe:	e7f9      	b.n	80031f4 <__itoa+0x24>

08003200 <itoa>:
 8003200:	f7ff bfe6 	b.w	80031d0 <__itoa>

08003204 <memset>:
 8003204:	4603      	mov	r3, r0
 8003206:	4402      	add	r2, r0
 8003208:	4293      	cmp	r3, r2
 800320a:	d100      	bne.n	800320e <memset+0xa>
 800320c:	4770      	bx	lr
 800320e:	f803 1b01 	strb.w	r1, [r3], #1
 8003212:	e7f9      	b.n	8003208 <memset+0x4>

08003214 <strcat>:
 8003214:	4602      	mov	r2, r0
 8003216:	b510      	push	{r4, lr}
 8003218:	7814      	ldrb	r4, [r2, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	3201      	adds	r2, #1
 800321e:	2c00      	cmp	r4, #0
 8003220:	d1fa      	bne.n	8003218 <strcat+0x4>
 8003222:	3b01      	subs	r3, #1
 8003224:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003228:	f803 2f01 	strb.w	r2, [r3, #1]!
 800322c:	2a00      	cmp	r2, #0
 800322e:	d1f9      	bne.n	8003224 <strcat+0x10>
 8003230:	bd10      	pop	{r4, pc}
	...

08003234 <__utoa>:
 8003234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003236:	b08b      	sub	sp, #44	; 0x2c
 8003238:	4605      	mov	r5, r0
 800323a:	460b      	mov	r3, r1
 800323c:	466e      	mov	r6, sp
 800323e:	4c1d      	ldr	r4, [pc, #116]	; (80032b4 <__utoa+0x80>)
 8003240:	f104 0c20 	add.w	ip, r4, #32
 8003244:	4637      	mov	r7, r6
 8003246:	6820      	ldr	r0, [r4, #0]
 8003248:	6861      	ldr	r1, [r4, #4]
 800324a:	3408      	adds	r4, #8
 800324c:	c703      	stmia	r7!, {r0, r1}
 800324e:	4564      	cmp	r4, ip
 8003250:	463e      	mov	r6, r7
 8003252:	d1f7      	bne.n	8003244 <__utoa+0x10>
 8003254:	7921      	ldrb	r1, [r4, #4]
 8003256:	6820      	ldr	r0, [r4, #0]
 8003258:	7139      	strb	r1, [r7, #4]
 800325a:	1e91      	subs	r1, r2, #2
 800325c:	2922      	cmp	r1, #34	; 0x22
 800325e:	6038      	str	r0, [r7, #0]
 8003260:	f04f 0100 	mov.w	r1, #0
 8003264:	d904      	bls.n	8003270 <__utoa+0x3c>
 8003266:	7019      	strb	r1, [r3, #0]
 8003268:	460b      	mov	r3, r1
 800326a:	4618      	mov	r0, r3
 800326c:	b00b      	add	sp, #44	; 0x2c
 800326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003270:	1e58      	subs	r0, r3, #1
 8003272:	4684      	mov	ip, r0
 8003274:	fbb5 f7f2 	udiv	r7, r5, r2
 8003278:	fb02 5617 	mls	r6, r2, r7, r5
 800327c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8003280:	4476      	add	r6, lr
 8003282:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003286:	460c      	mov	r4, r1
 8003288:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800328c:	462e      	mov	r6, r5
 800328e:	42b2      	cmp	r2, r6
 8003290:	463d      	mov	r5, r7
 8003292:	f101 0101 	add.w	r1, r1, #1
 8003296:	d9ed      	bls.n	8003274 <__utoa+0x40>
 8003298:	2200      	movs	r2, #0
 800329a:	545a      	strb	r2, [r3, r1]
 800329c:	1919      	adds	r1, r3, r4
 800329e:	1aa5      	subs	r5, r4, r2
 80032a0:	42aa      	cmp	r2, r5
 80032a2:	dae2      	bge.n	800326a <__utoa+0x36>
 80032a4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80032a8:	780e      	ldrb	r6, [r1, #0]
 80032aa:	3201      	adds	r2, #1
 80032ac:	7006      	strb	r6, [r0, #0]
 80032ae:	f801 5901 	strb.w	r5, [r1], #-1
 80032b2:	e7f4      	b.n	800329e <__utoa+0x6a>
 80032b4:	08003a7c 	.word	0x08003a7c

080032b8 <_init>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	bf00      	nop
 80032bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032be:	bc08      	pop	{r3}
 80032c0:	469e      	mov	lr, r3
 80032c2:	4770      	bx	lr

080032c4 <_fini>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	bf00      	nop
 80032c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ca:	bc08      	pop	{r3}
 80032cc:	469e      	mov	lr, r3
 80032ce:	4770      	bx	lr
